Availability: Docs
Crumbs: %ROOT%
Title: Brand Glossary
Description: A glossary of key terms, which are used to describe the systems, features, and tools that belong to Unreal Engine 4 (UE4).
Type: Reference
Version: 4.16
Parent:BrandGlossary
Order:12
Tags:Brand Glossary

Welcome to the Unreal Engine 4 (UE4) **Brand Glossary**. If you want to create user-facing resources for the UE4 community, this guide 
helps you gain a better understanding of the terms being used to describe systems, features, and tools belonging to UE4. After reading 
through this glossary, you'll also know how to properly spell and capitalize the terms we use to describe Unreal Engine.  

<hr>
  
[<font size = "5" color=#001940>A</font>](DocumentationGuidelines/BrandGlossary/A)&nbsp;&nbsp;
[<font size = "5" color=#001940>B</font>](DocumentationGuidelines/BrandGlossary/B)&nbsp;&nbsp;
[<font size = "5" color=#001940>C</font>](DocumentationGuidelines/BrandGlossary/C)&nbsp;&nbsp;
[<font size = "5" color=#001940>D</font>](DocumentationGuidelines/BrandGlossary/D)&nbsp;&nbsp;
[<font size = "5" color=#001940>E</font>](DocumentationGuidelines/BrandGlossary/E)&nbsp;&nbsp;
[<font size = "5" color=#001940>F</font>](DocumentationGuidelines/BrandGlossary/F)&nbsp;&nbsp;
[<font size = "5" color=#001940>G</font>](DocumentationGuidelines/BrandGlossary/G)&nbsp;&nbsp;
[<font size = "5" color=#001940>H</font>](DocumentationGuidelines/BrandGlossary/H)&nbsp;&nbsp;
<font size = "5" color=#001940>I</font>&nbsp;&nbsp;
<font size = "5" color=#001940>J</font>&nbsp;&nbsp;
<font size = "5" color=#001940>K</font>&nbsp;&nbsp;
[<font size = "5" color=#001940>L</font>](DocumentationGuidelines/BrandGlossary/L)&nbsp;&nbsp;
[<font size = "5" color=#001940>M</font>](DocumentationGuidelines/BrandGlossary/M)&nbsp;&nbsp;
<font size = "5" color=#001940>N</font>&nbsp;&nbsp;
[<font size = "5" color=#001940>O</font>](DocumentationGuidelines/BrandGlossary/O)&nbsp;&nbsp;
<font size = "6" color=#00327F>P</font>&nbsp;&nbsp;
<font size = "5" color=#001940>Q</font>&nbsp;&nbsp;
[<font size = "5" color=#001940>R</font>](DocumentationGuidelines/BrandGlossary/R)&nbsp;&nbsp;
[<font size = "5" color=#001940>S</font>](DocumentationGuidelines/BrandGlossary/S)&nbsp;&nbsp;
[<font size = "5" color=#001940>T</font>](DocumentationGuidelines/BrandGlossary/T)&nbsp;&nbsp;
[<font size = "5" color=#001940>U</font>](DocumentationGuidelines/BrandGlossary/U)&nbsp;&nbsp;
[<font size = "5" color=#001940>V</font>](DocumentationGuidelines/BrandGlossary/V)&nbsp;&nbsp;
[<font size = "5" color=#001940>W</font>](DocumentationGuidelines/BrandGlossary/W)&nbsp;&nbsp;
<font size = "5" color=#001940>X</font>&nbsp;&nbsp;
<font size = "5" color=#001940>Y</font>&nbsp;&nbsp;
<font size = "5" color=#001940>Z</font>&nbsp;&nbsp;

##Packaging

The purpose of packaging is to test your full game instead of a single map, or to prepare your game for submission/distribution.

##Paper 2D

Paper 2D is a sprite-based system for creating 2D and 2D/3D hybrid games entirely within Unreal Engine.

##Paper 2D Flipbook Editor

The Flipbook Editor enables setup and editing of individual Flipbook assets, where you can edit the sequential playability of your sprites, tune or tweak the duration in which a sprite is displayed, or determine the overall playback speed of the Flipbook animation through the Frames Per Second option.

##Paper 2D Sprite Editor

The Paper 2D Sprite Editor enables setup and editing of individual Sprite assets.

##Particle System Component

A ParticleSystemComponent allows you to add a particle emitter as a sub-object to another object. 

##Pawn

A Pawn is an Actor that can be an “agent” within the world. Pawns can be possessed by a Controller, they are set up to easily accept input, and they can do a variety of player-like things. Note that a Pawn is not assumed to be humanoid.

##Persona Animation Editor

The Persona Animation Editor is the animation editing toolset which provides a robust system for editing Skeletons, Skeletal Meshes, Animation Blueprints, and various other animation assets.

##Physics Asset Tool (PhAT)

The Unreal Physics Asset Tool (PhAT) is an integrated editor in the Unreal Editor that is designed specifically to manipulate Physics Assets for Skeletal Meshes.

##Play in Editor (PIE)

Play In Editor allows you to play the current level directly from the editor, so that you can test gameplay functionality, including player controls and level events triggered by players’ actions.

##PlayerController

A PlayerController is the interface between the Pawn and the human player controlling it. The PlayerController essentially represents the human player’s will.

##PlayerState

A PlayerState is the state of a participant in the game, such as a human player or a bot that is simulating a player.

##Plugin

Plugins enable you to add entirely new features and to modify built-in functionality without modifying the engine code directly, such as adding new menu items and tool bar commands to the editor, or even adding entirely new features and editor sub-modes.

##Post Process Effect

Post Process Effects enable artists and designers to tweak the overall look and feel of the scene by applying effects including bloom (HDR blooming effect on bright objects), ambient occlusion, and tone mapping to the rendered scene before displaying it in the viewport.

##Procedural Foliage Tool

The Procedural Foliage Tool is used for simulating huge forests that are filled with lots of different kinds of trees and bushes. This tool works by simulating how a forest grows over the years using Steps to define years of growth. At each Step in the simulation, newly created virtual seeds are cast into the level to act as spawn locations for other Foliage Type Actors. By tweaking the various Foliage Type options like Spread, Size, and Priority Settings, you will affect how those Foliage Types spread and compete for spawn locations through the level that the Procedural Foliage Spawner is placed in. 

##Project

A Project is a self-contained unit that holds all of the content and code that make-up an individual game and coincides with a set of directories on your disk.

##Project Browser

The Project Browser provides an interface for creating new projects, opening your existing projects, or opening sample content like sample games and Showcases.

##Project Launcher

The Project Launcher tab provides a graphical front-end interface to build, cook, deploy, and launch your game.

##Project Settings

The Project Settings editor provides access to configuration options that specify information about your project, as well as defining how the engine behaves when running the project.

##Property Matrix

The Property Matrix enables easy bulk editing and value comparison for large numbers of Objects or Actors by displaying a configurable set of properties for a collection of objects as columns in a table view that can be sorted on any column.