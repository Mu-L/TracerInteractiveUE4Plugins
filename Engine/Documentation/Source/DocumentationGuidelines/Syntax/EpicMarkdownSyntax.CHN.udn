INTSourceChangelist:3809611
Availability:Docs
Keywords: 添加的元数据位于文档顶部、带分号
Title: Epic对Markdown的使用及语法延伸
Crumbs:DocumentationGuidelines
Description:如何使用Epic的自定义Markdown扩展来新建文档源文件。

[TOC (start:2 end:3)]

[REGION:note]
**注意：** 此文档使用Epic的Markdown自行编写而成，可[在此处查看源代码](DocumentationGuidelines\SyntaxSource)。
[/REGION]

(#overview)
##总览

Epic版的Markdown基于[MarkdownSharp](http://code.google.com/p/markdownsharp/)。而MarkdownSharp基于[Markdown](http://daringfireball.net/projects/markdown/)，其部分功能源自[PHP Markdown Extra](http://michelf.com/projects/php-markdown/)。

此文档是延展内容的指南，介绍其对Epic功能的支持，以及Markdown Extra支持的具体内容。此语法指南是对原始[Markdown语法](http://daringfireball.net/projects/markdown/syntax)的补充。

(#epic'sfunctionality)
## Epic版功能

(#autogenerationoftableofcontentsandheadings)
### 自动生成内容和标题表

调整之后的标头生成包含了一个书签，它是移除了空格的标题。为支持相同命名的多个标头，之后的标头将附加一个从2开始的索引。生成一个标头列表，文档顶部带正确的缩进，替换标签\[TOC\]

指定\[TOC (start:HeadingStartLevel end:HeadingEndLevel)\]后，即可设置内容表中包含的标题级别。开始和结束为可选变量。如缺失，则会为开始指定为1的值，为结束指定为6的值。两者皆设置后，结束变量必须跟随开始变量。

如标头的首个字符为!!，则标头将不会包含在内容表中。

(#markdownsyntax)
#### Markdown语法
	(#heading)
#标题
	[TOC(start:2)]

(#htmloutput)
#### HTML输出
	<h1 id="Heading1">Heading</h1>
	<ul><li><a href="#Heading">Heading</a></ul>


(#results)
#### 结果
此页顶部的内容表由此处\[TOC\] (start:2 end:3)讲述的方法生成

(#linkingtobookmarkswithindocument)
### 链接到文档中的书签

除允许用户放置链接到文档中的标头外，还允许放置在文档中进行链接的书签

(#markdownsyntax)
#### Markdown语法
	下例是到文件[自动生成内容表](#AutogenerationofTableofContentsandHeadings)中标题的链接。移除文本中的空格后即可链接到标头文本。此外，如果多于1个标头拥有相同的命名，则可将2、3等附加到命名上（不带空格：[Markdown Syntax 1](#MarkdownSyntax) [Markdown Syntax 2](#MarkdownSyntax2) [Markdown Syntax 3](#MarkdownSyntax3)），以引用后续的标头 
	下例是到文档[Bookmark 1](#Bookmark1)中用户定义书签的链接。
	(#Bookmark1) 书签文本必须为一行上的首个文本。

(#htmloutput)
#### HTML输出
	<p>下例是到<a href="#AutogenerationofTableofContents">自动生成内容表</a>中标题的链接。移除文本中的空格后即可链接到标头文本。此外，如果多于1个标头拥有相同的命名，则可将2、3等附加到命名上（不带空格：<a href="#MarkdownSyntax">Markdown Syntax 1</a> <a href="#MarkdownSyntax2">Markdown Syntax 2</a> <a href="#MarkdownSyntax3">Markdown Syntax 3</a>），以引用后续的标头</p>
	<p>下例是到文档<a href="#Bookmark1">Bookmark 1</a>中用户定义书签的链接。</p>
	<p><a id="Bookmark1"/> 书签文本必须为一行上的首个文本。</p>
	
(#results)
#### 结果

下例是到文件[自动生成内容表](#AutogenerationofTableofContentsandHeadings)中标题的链接。移除文本中的空格后即可链接到标头文本。此外，如果多于1个标头拥有相同的命名，则可将2、3等附加到命名上（不带空格：`[Markdown Syntax 1](#MarkdownSyntax)` `[Markdown Syntax 2](#MarkdownSyntax2)` `[Markdown Syntax 3](#MarkdownSyntax3)`），以引用后续的标头 

下例是到文档[Bookmark 1](#Bookmark1)中用户定义书签的链接。

(#Bookmark1)书签文本必须为一行上的首个文本。

(#linkingtootherpagesinourdocumentation)
### 链接到文档中的其他页面

我们将通过相对链接来链接到其他页面。如果文档在markdown文件夹的根中，我们将使用\%ROOT\%对其进行引用。语言未在链接中指定，将假设链接到当前正在查看语言的文件。

(#markdownsyntax)
#### Markdown语法
	[UE4主页](%ROOT%)
	[虚幻编辑器用户指南](Engine/UI)

(#htmloutput)
#### HTML输出
	<a href="./../../../INT\index.html">UE4主页</a>
	<a href="./../../../INT\Editor\index.html">虚幻编辑器用户指南</a>

(#results)
#### 结果
[UE4主页](%ROOT%)

[虚幻编辑器用户指南](Engine/UI)

(#linkingtolocalimages)
### 链接到本地图像

不需要引用图像文件夹。如果图像属于文档中的另一个页面，则只需要引用其他路径，语言未在链接中指定，将首先在语言文件夹图像目录中找到图像，然后默认为INT图像文件夹。

(#markdownsyntax)
#### Markdown语法
	![Logo](Logo_Epic-New.jpg)
	![编辑器视口](Engine/UI/LevelEditor\Viewports\viewport.png) 

(#htmloutput)
#### HTML输出
	<img alt="Logo" src="./../../../images\EpicMarkdownDocGuides\EpicMarkdownExtension\Logo_Epic-New.jpg"/>
	<img alt="Editor Viewport" src="./../../../images\Editor\viewport.png"/>

(#results)
#### 结果
![Logo](Logo_Epic-New.jpg)

![编辑器视口](Engine/UI/LevelEditor\Viewports\viewport.png)

(#imageproperties)
### 图像属性

理想的结果是能够提供一些图像的格式化指令、以及其被转换的方式。

	（w: h: a: convert: type: quality: fill:）

* 	**w:** 用于显示图像的宽度。如省略，将使用源图像的宽度，除非已指定高度，在这种情况下将使用相应于高度给定源图像高宽比的正确宽度。
* 	**h:** 用于显示图像的高度。如省略，将使用源图像的高度，除非已指定宽度，在这种情况下将使用相应于宽度给定源图像高宽比的正确高度。
*	**a:** 表明应用至图像的漂浮类型拥有左、右和空的设置。默认为空。
*   **convert:** 值为 `false` 或 `true`，说明图像是否应被压缩和/或转换为一个不同的类型。默认为true。为维持质量或须保持源格式（如动画GIF）时，此项可设为false。
*	**type:** 要转换到的图像格式；可为 `jpg`、`png`、`gif`。默认为 `jpg`。
*	**quality:** jpeg压缩质量（`1`-`100`）。默认压缩质量为 `80`。如果默认压缩引起瑕疵，使图像无法正确表达含义，提高压缩质量便有助于解决问题。
*	**fill:** 如格式被转换成jpg，一个十六进制颜色（使用的格式为 `#0088FF`）将说明图像的背景颜色。默认为 `#FFFFFF`。

[REGION:note]
	* 选项的排序非常重要，但每个为可选，且可被省略。或者图像信息之后的整个括号结构都可被省略。
	* 如缺失转换参数，则会使用app.config文件中的默认值。
	* 现有的Markdown图像包含法“内联（Inline）”和“引用（Reference）”均已扩展为支持格式化。
	* 将图像漂浮至左或右会出现不良后果，不相关的内容可能包围图像。举例而言，移动到新片段时，我们不希望标头被放置在不相关图像的旁边。此文本位于图像旁边的段落中。样式表元素将用于控制何时清理漂浮样式，其方式为添加一个“清理”[区域](#Regions)，等级1、2和hr元素的标题将停止漂浮。
[/REGION]


(#markdownsyntax)
#### Markdown语法
    这是指定了右![Epic Logo](Logo_Epic-New.jpg "Here's a title")(a:right)漂浮的内联图像，其高度和宽度已留空
    这是拥有宽度、高度和左漂浮的参考图像![Epic Logo][refepiclogo]。
    [refepiclogo]: Logo_Epic-New.jpg "Here's a title"(w:50 h:50 a:left convert:true quality:75 fill:#000000)
	此文本位于图像旁边的段落中。一个特殊的div元素将跟随末尾漂浮。
	[REGION:clear]
[COMMENT:none]
 clear float 
[/COMMENT]
	[/REGION]    
	
(#htmloutput)
#### HTML输出
	<p>这是指定了右<img style="float: right;" title="Here's a title" alt="Epic Logo" src="./../../../images\EpicMarkdownDocGuides\EpicMarkdownExtension\Logo_Epic-New.jpg"/>漂浮的内联图像，高度和宽度已留空。</p>
	<p>这是拥有宽度、高度和左漂浮的参考图像<img width="50" height="50" style="float: left;" title="Here's a title" alt="Epic Logo" src="./../../../images\EpicMarkdownDocGuides\EpicMarkdownExtension\Logo_Epic-New.jpg"/>。</p>
	<p>此文本位于图像旁边的段落中。一个特殊的div元素将跟随末尾漂浮。</p>
	[REGION:clear]
[COMMENT:none]
 clear float 
[/COMMENT]
	[/REGION] 
    
(#results)
#### 结果
这是指定了右![Epic Logo](Logo_Epic-New.jpg "Here's a title")(a:right)漂浮的内联图像，其高度和宽度已留空。

这是拥有宽度、高度和左漂浮的参考图像![Epic Logo][refepiclogo]。

[refepiclogo]: Logo_Epic-New.jpg "Here's a title"(w:50 h:50 a:left convert:true quality:75 fill:#000000)

此文本位于图像旁边的段落中。一个特殊的div元素将跟随末尾漂浮。

[REGION:clear]
[COMMENT:none]
 clear float 
[/COMMENT]
[/REGION]

(#tables)
### 表格
支持使用表格。MultiMarkdown中可用的格式化十分灵活，因此Epic选择它来提供基础。

*	冒号用于说明标头行中表格数据的对齐。
*	行的首尾处可以是竖线，其也可被省略。
*	可添加标题。
*	支持跨列。
*	在单元中使用^符号便支持跨行。


(#markdownsyntax)
#### Markdown语法
	[表1 - 顶部的标头]				    
	|             | 分组                      ||   
	 第一个标头 | 第二个标头  | 第三个标头  |  
	 ------------ | :------------: | ------------: |  
	 内容      |          *长单元*          ||  
	 内容      |      **单元**  |         单元  |  
	 新片段  |     更多       |         数据  |  
	     ^        |            以及更多           || 


	 ------------ | :------------: | ------------: |  
	 内容      |          *长单元*          ||  
	 内容      |      **单元**  |         单元  |  
	 新片段  |     更多       |         数据  |  
	     ^        |            以及更多           || 
	
	[表2 - 右边的标头]				    
	| ------------ | :------------: | ------------: |  
	|  内容      |          *长单元*          ||  
	|  内容      |      **单元**  |         单元  |  
	|  新片段  |     更多       |         数据  |  
	| 	 ^        |            以及更多           || 


(#htmloutput)
#### HTML输出

	<table>
	<caption>表1 - 顶部的标头</caption>
	<colgroup><col/>
	<col align="center"/>
	<col align="right"/>
	</colgroup><thead>
	<tr>
		<th colspan="1"/>
		<th colspan="2">分组</th>
	</tr>
	<tr>
		<th colspan="1">第一个标头</th>

		<th colspan="1">第二个标头</th>
		<th colspan="1">第三个标头</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td colspan="1">内容</td>
		<td align="center" colspan="2"><em>长单元</em></td>
	</tr>

	<tr>
		<td colspan="1">内容</td>
		<td align="center" colspan="1"><strong>单元</strong></td>
		<td align="right" colspan="1">单元</td>
	</tr>
	<tr>
		<td rowspan="2" colspan="1">新片段</td>
		<td align="center" colspan="1">更多</td>

		<td align="right" colspan="1">数据</td>
	</tr>
	<tr>
		<td align="center" colspan="2">以及更多</td>
	</tr>
	</tbody>
	</table>
	
	<table>
	<caption>表2 - 右边的标头</caption>
	<colgroup><col/>
	<col align="center"/>
	<col align="right"/>
	</colgroup><tbody>
	<tr>
		<th colspan="1">内容</th>
		<td align="center" colspan="2"><em>长单元</em></td>
	</tr>
	<tr>

		<th colspan="1">内容</th>
		<td align="center" colspan="1"><strong>单元</strong></td>
		<td align="right" colspan="1">单元</td>
	</tr>
	<tr>
		<th rowspan="2" colspan="1">新片段</th>
		<td align="center" colspan="1">更多</td>

		<td align="right" colspan="1">数据</td>
	</tr>
	<tr>
		<td align="center" colspan="2">以及更多</td>
	</tr>
	</tbody>
	</table>	

(#results)
#### 结果

[表1 - 顶部的标头]			    
|	          | 分组                      ||   
 第一个标头 | 第二个标头  | 第三个标头  |  
 ------------ | :-----------:  | -----------:  |  
 内容      |          *长单元*          ||  
 内容      |      **单元**  |         单元  |  
 新片段  |     更多       |         数据  |  
     ^        |            以及更多           || 

如对齐行上方没有标头信息，则最左列将被视为一个标头。

[表2 - 右边的标头]
| ------------ | :------------: | ------------: |  
|  内容      |          *长单元*          ||  
|  内容      |      **单元**  |         单元  |  
|  新片段  |     更多       |         数据  |  
| 	 ^        |            以及更多           || 

(#metadata)
### 元数据
它的实现与元数据的MultiMarkdowns语法相似，规则如下。

*	元数据必须从文档的最顶部开始，其之前不能有空白行。
*	元数据由两部分组成 - 键和值。
*	元数据键必须从行的开头开始。其必须以一个字母或数字作为开始，之后的字符可由字母、数字、空格、连字符或下划线字符组成。
*	元数据键的末尾以一个冒号来表示。
*	冒号之后便是元数据值，其可由几乎任意字符构成（新行除外）。 
*	元数据结束后，一个空白行便代表剩余文档的开始。


所有元数据均放置在文档标头中的<meta name="Key" content="Value"/>html块中。除以上讲述功能外，部分键还拥有特殊功能。

* 标题元数据用于标头块 `<title>Title</title>` 中
* HtmlDocumentType元数据用于定义include/templates文件夹中的哪个模板用于html生成。如缺失，则使用default.html模板文件。
* DoIndex:false会告知索引器将文档从索引中排除，从而搜索结果。所有文档的默认值均为true。
* ForcePublishFiles:可用于强制将附件和图像发布到html文件夹。


(#markdownsyntax)
#### Markdown语法
	Keywords: 添加的元数据位于文档顶部、带分号
	Title: 此项将指定文档标题；如该元数据缺失，文档所在的路径则会被用作标题。


(#htmloutput)
#### HTML输出
	<title>此项将指定文档标题；如该元数据缺失，文档所在的路径则会被用作标题。</title>
	<meta name="Keywords" content=”添加的元数据位于文档顶部、带分号" />
	<meta name="Title" content=”此项将指定文档标题；如该元数据缺失，文档所在的路径则会被用作标题。" />

(#results)
#### 结果
可以看到文档标题条已更新标题元标签。查看文档源时将在文档头中显示元数据。

(#definitionlists)
### 定义列表

支持定义列表的语法已被添加到转换。定义列表遵循与markdown标准列表相同的对齐和嵌入规则。

(#markdownsyntax)
#### Markdown语法
	定义列表元素处于顶层：
	$ 定义1 : 描述1
	$ 定义2 : 描述2
		* 列表元素1
			1. 已排序
			1. 已排序
		* 列表元素2
	$ 定义3: 描述3


	内嵌的定义列表元素：
	* 列表元素1
		$ 定义1 : 描述1
		$ 定义2 : 描述2
	* 列表元素2

(#htmloutput)
#### HTML输出

	<dl>
	<dt>定义1</dt>
	<dd>描述1</dd>
	<dt>定义2</dt>
	<dd>描述2

	<br/>
	<ul>
	<li>列表元素1
	<br/>
	<ol>
	<li>已排序</li>
	<li>已排序</li>
	</ol></li>
	<li>列表元素2</li>
	</ul></dd>
	<dt>定义3</dt>
	<dd>描述3</dd>

	</dl>

	<ul>
	<li>列表元素1
	<br/>
	<dl>
	<dt>定义1</dt>
	<dd>描述1</dd>
	<dt>定义2</dt>
	<dd>描述2</dd>

	</dl></li>
	<li>列表元素2</li>
	</ul>

(#results)
#### 结果

定义列表元素处于顶层：
$ 定义1 : 描述1
$ 定义2 : 描述2
	* 列表元素1
		1. 已排序
		1. 已排序
	* 列表元素2
$ 定义3: 描述3


内嵌的定义列表元素：
* 列表元素1
	$ 定义1 : 描述1
	$ 定义2 : 描述2
* 列表元素2


(#additionalbackslashescapes)
### 更多反斜杠转义

除能被markdown转义的字符外，还允许以下转义：

    >   大于
    |	竖线
    %	百分比

## 已使用Markdown额外函数

(#strictbolditalic)
### 精确粗斜体

`_Italics_` 和 `__bold__` 语法开头和结尾左右必须留空格。这是为了防止在File_names_including_underscores中使用时出现检测误报。

(#fencedcodeblocks)
### Fenced代码块

(#markdownsyntax)
#### Markdown语法
`~~~`

由3个或更多个~字符围绕起来的代码

`~~~`

(#htmloutput)
#### HTML输出
	<pre class="prettyprint"><code>Code fenced by 3 or more ~ characters
	</code></pre>
	
(#results)
#### 结果
~~~
由3个或更多个~字符围绕起来的代码
~~~

(#regions)
### 区域

区域就是应用了样式的区域，即HTML中的div。可使用此语法来指定区域：

	[REGION:stylename]
	...
	[/REGION]

在HTML生成中，这将被转换为：

	<div class="stylename">
	...
	</div>

还必须在css文件中创建一个相应的样式规则：

	.stylename
	{
		background:#123456;
		border:1px solid #654321;
	}

(#built-inregions)
#### 内置区域

部分区域风格已存在于常见内容中，如注释、提示、警告和引用。

	[REGION:note]
	这是一条注释。其位于一个黄色框中，注释图标位于左上角。
	[/REGION]

[REGION:note]
这是一条注释。其位于一个黄色框中，注释图标位于左上角。
[/REGION]

	[REGION:tip]
	这是一条提示。其位于一个绿色框中，提示图标位于左上角。
	[/REGION]

[REGION:tip]
这是一条提示。其位于一个绿色框中，提示图标位于左上角。
[/REGION]

	[REGION:warning]
	这是一条警告。其位于一个红色框中，警告图标位于左上角。
	[/REGION]

[REGION:warning]
这是一条警告。其位于一个红色框中，警告图标位于左上角。
[/REGION]

	[REGION:quote]
	这是引用文本。其位于一个蓝色框中，引用图标位于左上角。
	[/REGION]

[REGION:quote]
这是引用文本。其位于一个蓝色框中，引用图标位于左上角。
[/REGION]

(#objects)
### 对象

较之于上方讲述的区域，对象系统更为灵活多变。其对应样式表中样式的方式与区域几乎一致，一个对象将对应模板中保存的一个标记块。这使得任意标记能够被插入文档。

对象由 `OBJECT` 标签进行创建。对象的命名由一个颜色（`:`）在标签之外独立指定。最基础的对象形态为：

	[OBJECT:TemplateName][/OBJECT]

匹配的模板可以包含任意类型的HTML标记、javascript等内容，其可以替换任意文档中对象标签的任意实例。

(#templates)
#### 模板

模板是保存在 `Include/Template/Objects` 目录中的HTML文件。模板的命名十分重要，因为这负责将对象匹配到模板。举例而言，命名为 `VideoPlayer` 的对象能够被 `VideoPlayer.html` 模板中找到的标签所替代。

	[OBJECT:VideoPlayer][/OBJECT] <-> VideoPlayer.html

(#parameters)
#### 参数

如要使对象拥有更强的灵活性，信息和内容可传至将插入标签的模板，其之后会被插回文档中。这使得相同模板在使用过程中更加灵活。其并非只是简单地直接放置文档；此方法可对对象进行配置。

存在两种可用的参数：普通参数和文字参数。普通参数在页面中被解析为普通内容。这意味着他们可以包含markdown语法，并被视为markdown。文本参数则完全不会被解析。它们将被直接粘贴到模板中，在文档中显示。

在对象中使用 `PARAM` 和 `PARAMLITERAL` 标签即可将参数传入模板。参数的命名由一个颜色（`:`）在标签之外独立指定。最简单的参数形态为：

	[PARAM:ParamName]ParamData[/PARAM]

和 

	[PARAMLITERAL:ParamName]ParamData[/PARAMLITERAL]

每个参数的数据便会用于替换接受形态的模板中的参数标签：

	{ParamName}

参数使用上文提及VideoPlayer对象的实例如下：

	[OBJECT:VideoPlayer]
		[PARAM:title]超级 **好看** 视频[/PARAM]
		[PARAMLITERAL:video]AwesomeVideo.mp4[/PARAMLITERAL]
		[PARAM:related]
			* [视频1](#Video1)
			* [视频2](#Video2)
			* [视频3](#Video3)
			* [视频4](#Video4)
		[/PARAM]
	[/OBJECT]

VideoPlayer对象的模板可能包含：

	<div class="videoplayer">
		<div class="title">{title}</div>
		<video>
			<source src="{video}" type="video/mp4">
		</video>
		<div class="related_links">
			{related}
		</div>
	</div>

在页面的HTML输出中，VideoPlayer对象可以被替代为：

	<div class="videoplayer">
		<div class="title">超级<strong>好看</strong>视频</div>
		<video>
			<source src="AwesomeVideo.mp4" type="video/mp4">
		</video>
		<div class="related_links">
			<ul>
				<li><a href="#Video1">视频1</a></li>
				<li><a href="#Video2">视频2</a></li>
				<li><a href="#Video3">视频3</a></li>
				<li><a href="#Video4">视频4</a></li>
			</ul>
		</div>
	</div>

(#lightboxes)
### 灯箱效果

以一个 `灯箱` [区域](#Regions)将链接包含在内后，图像和其他内容便能显示在页面上附带的灯箱效果中。

(#imagelightboxing)
### 图像灯箱效果

对图像而言，链接应指向将要放在页面上的完整尺寸图片，同时链接的 _文本_ 应显示一个较小的版本（或缩略图）。相同图像可用于限制显示图像的大小以及使用[图像属性](#ImageProperties)。

语法：

	[REGION:lightbox]
		[![](Engine/UI/LevelEditor/Editor.png)(w:480)](Engine/UI/LevelEditor/Editor.png)
	[/REGION]

结果：

[REGION:lightbox]
	[![](Engine/UI/LevelEditor/Editor.png)(w:480)](Engine/UI/LevelEditor/Editor.png)
[/REGION]

(#includingfilesandexcerpts)
### 纳入文件和摘录

一个页面的整体内容或一个部分均可被纳入另一个整体内容或部分。

纳入整个页面的语法为：

	[INCLUDE:Engine/Landscape]

这将导致整个“地形”页面被转换，并插入包含此行的页面中。

可在使用以下语法的页面中定义摘录：

	[EXCERPT:TerrainLayerCoords]
	...
	[/EXCERPT:TerrainLayerCoords]

可使用此语法来包含此摘录：

	[INCLUDE:Engine/Landscape/Materials#TerrainLayerCoords]

结果（显示在引用区域中）：

[REGION:quote]
[INCLUDE:Engine/Landscape/Materials#TerrainLayerCoords]
[/REGION]
