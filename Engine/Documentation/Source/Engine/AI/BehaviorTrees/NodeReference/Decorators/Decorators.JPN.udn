INTSourceChangelist:3782314
Availability:Public
Title:Behavior Tree ノードのリファレンス：Decorators
Crumbs:%ROOT%, Engine, Gameplay, Engine/AI/BehaviorTrees
Description:Behavior Tree Decorator ノードの説明です。
version:4.9

[TOC(start:2 end:2)]


他の Behavior Tree (ビヘイビアツリー) システムで条件式としても知られる **Decorator** は [Composite](Engine/AI/BehaviorTrees/NodeReference/Composites) または [Task](Engine/AI/BehaviorTrees/NodeReference/Tasks) ノードのいずれかにアタッチされ、ツリーのブランチあるいはノード 1 つでも実行可能かどうかの判断をします。

## Blackboard

![](Blackboard.png)

Blackboard ノードは、任意の Blackboard Key に値が設定されているかを確認します。

| プロパティ | 説明 |
| -------- | ----------- |
| **Notify Observer** | [INCLUDE:#subprop2] |
| **Observer Aborts** | [INCLUDE:#subprop3] |
| **Key Query** | [INCLUDE:#subprop4] |
| **Blackboard Key**| 確認するためのキーです。他のタイプが初期化された値 (0, false, {0,0,0}, etc...) を返すので、 Object などの`None` を返すことができるデータ タイプの場合に非常に便利です。 |
| **Node Name** | Behavior Tree グラフでのノードの表示名です。 |

[COMMENT:none]

[EXCERPT:subprop2]
| --- | --- |
| **On Result Change** | 条件が変更された時のみ再評価されます。 |
| **On Value Change** | 評価された Blackboard Key が変更された時のみ再評価されます。 |
[/EXCERPT:subprop2]

[EXCERPT:subprop3]
| --- | --- |
| **None** | 何も中止しません。 |
| **Self** | このノード自体、および配下で動くサブツリーをすべて中止します。 |
| **Lower Priority** | このノードの右側にあるノードをすべて中止します。 |
| **Both** | このノード自体、および配下で動くすべてのサブツリー、ノードの右側にあるノードをすべて中止します。 |
[/EXCERPT:subprop3]

[EXCERPT:subprop4]
| --- | --- |
| **Is Set** | 値は設定されているかどうか。 |
| **Is Not Set** | 値が設定されていないかどうか。 |
[/EXCERPT:subprop4]

[/COMMENT]

## Compare Blackboard Entries

![](CompareBBEntries.png)

Compare Blackboard Entries ノードは 2 つのブラックボード キーの値を比較し、その結果 (「等しい」か「等しくない」か) 次第でノードの実行をブロックあるいは許可します。

| プロパティ | 説明 |
| -------- | ----------- |
| **Operator** | [INCLUDE:#subprop5] |
| **Blackboard Key A**| この比較で使用される最初のキーです。 |
| **Blackboard Key B**| この比較で使用される 2 番目のキーです。 |
| **Observer Aborts** | [INCLUDE:#subprop3] |
| **Node Name** | Behavior Tree グラフでのノードの表示名です。 |

[COMMENT:none]

[EXCERPT:subprop5]
| --- | --- |
| **Is Equal To** | 2 つのキーが等しいかどうか。 |
| **Is Not Equal To** | 2 つのキーが異なるかどうか。 |
[/EXCERPT:subprop5]

[/COMMENT]

## Composite

![](Composite.png)

**Composite Decorator** ノードは、予め用意されているノードよりもさらに高度ではあるけれどブループリント全体ほど複雑ではないロジックの設定ができます。Composite Decorator をノードに追加して Composite Decorator を **ダブルクリック** すると、 Composite のグラフが呼び出されます。グラフ内で **右クリック** すると、 Decorator Node をスタンドアローン型のノードとして追加し、 **AND** ノード、 **OR** ノード、 **NOT** ノードを使って接続して、さらに高度なロジックを作成することができます。

![](CompositeGraph.png)(w:940)

| プロパティ | 説明 |
| -------- | ----------- |
| **Composite Name** | Behavior Tree グラフでノードが表示すべき名前です。 |
| **Show Operations** | 操作がプレーンテキストでノード上にリスト表示されます。 |

## Conditional Loop

**Key Query** 条件が一致している限り、このデコレーターはループにアタッチされているノードを持ちます。

![](ConditionalLoop.png)

| プロパティ | 説明 |
| -------- | ----------- |
| **Node Name** | Behavior Tree グラフでのノードの表示名です。 |
| **Key Query** | [INCLUDE:#subprop4] |
| **Blackboard Key**| 確認するためのキーです。他のタイプが初期化された値 (0, false, {0,0,0}, etc...) を返すので、 Object などの`None` を返すことができるデータ タイプの場合に非常に便利です。 |


## Cone Check

![](ConeCheck.png)

**Cone Check** デコレーターは 3 つのベクター キーを受け取ります。 1 つ目がコーンの開始位置のキー、 2 つ目がコーンがポイントする向きを定義するキー、 3 つ目はコーンの内部にその位置があるかを確認するキーです。**Cone Half Angle** プロパティを使って、コーンの角度を定義します。

| プロパティ | 説明 |
| -------- | ----------- |
| **Cone Half Angle** | コーンの半分の角度です。つまり、 90 度のコーンの場合、値は 45 度に設定されます。 |
| **Observer Aborts** | [INCLUDE:#subprop3] |
| **Cone Origin** | コーンの開始位置 (コーンの先端) です。 |
| **Cone Direction** | コーンの底面が指す方向です。 |
| **Observed** | コーン内部にあるかどうか確認されている位置あるいはアクタです。 |
| **Inverse Condition** | 結果を反転するかどうか (_true_ から _false_ 、 _false_ から _true_) |
| **Node Name** | Behavior Tree グラフでのノードの表示名です。 |

## Cooldown

![](Cooldown.png)

クールダウン時間が終了するまで、ノードまたはブランチの実行をロックするノードです。

| プロパティ | 説明 |
| -------- | ----------- |
| **Cool Down time** | Cooldown デコレーターがこのノードの実行をロックする秒単位の時間。 |
| **Observer Aborts** | [INCLUDE:#subprop3] |
| **Node Name** | Behavior Tree グラフでのノードの表示名です。 |

## Does Path Exist

![](DoesPathExist.png)

**Does Path Exist** ノードは、パスが Blackboard Key A と Blackboard Key B の 2 つのベクターから構成できるかどうかを確認します。

| プロパティ | 説明 |
| -------- | ----------- |
| **Blackboard Key A**| パスの最初の位置です。 |
| **Blackboard Key B**| パスの 2 番目の位置です。 |
| **Path Query Type** | [INCLUDE:#subprop6] |
| **Inverse Condition** | 結果を反転するかどうか (_true_ から _false_ 、 _false_ から _true_) |
| **Observer Aborts** | [INCLUDE:#subprop3] |
| **Filter Class** | 使用するナビゲーション データを設定します。None に設定されていると、デフォルトのナビゲーション データが使用されます。 |
| **Node Name** | Behavior Tree グラフでのノードの表示名です。 |

[COMMENT:none]

[EXCERPT:subprop6]
| --- | --- |
| **NavMesh Raycast 2D** | 非常に速い。 |
| **Hierarchical Query** | 速い。 |
| **Regular Path Finding** | 遅い。 |
[/EXCERPT:subprop6]

[/COMMENT]

## Force Success

![](ForceSuccess.png)

**Force Success** デコレーターはノード結果を成功に変更します。

| プロパティ | 説明 |
| -------- | ----------- |
| **Node Name** | Behavior Tree グラフでのノードの表示名です。 |

## Gameplay Tag Condition

![](GameplayTagCondition.png)

| プロパティ | 説明 |
| -------- | ----------- |
| **Actor to Check** | チェックするアクタへのリファレンスを含む Blackboard Key です。 |
| **Tags to Match** | デコレーターを **Gameplay Tags** プロパティにリストされているタグの **どれか** あるいは **すべて** に一致させるかどうかです。. |
| **Gameplay Tags** | このデコレーターで使うタグを選択するために Gameplay Tag エディタをロードします。 |
| **Inverse Condition** | このデコレーターの結果を反転しますか? (false を true に、 true は falseに) |
| **Node Name** | Behavior Tree グラフでのノードの表示名です。 |

## Is Blackboard Value of Given Class

![](IsBlackboardValueOfGivenClass.png)

| プロパティ | 説明 |
| -------- | ----------- |
| **Test Class** | Blackboard Key プロパティのオブジェクトのクラスをテストするクラスタイプです。 |
| **Blackboard Key** | テストされる Blackboard Key です。 |
| **Observer Aborts** | [INCLUDE:#subprop3] |
| **Node Name** | Behavior Tree グラフでのノードの表示名です。 |

## Keep in Cone

![](KeepInCone.png)

| プロパティ | 説明 |
| -------- | ----------- |
| **Cone Half Angle** | コーンの半分の角度です。つまり、 90 度のコーンの場合、値は 45 度に設定されます。 |
| **Observer Aborts** | [INCLUDE:#subprop3] |
| **Cone Origin** | コーンの開始位置 (コーンの先端) です。 |
| **Observed** | コーン内部に保持する位置あるいはアクタです。 |
| **Node Name** | Behavior Tree グラフでのノードの表示名です。 |

## Loop 

![](Loop.png)

ノードあるいはブランチを回数分、あるいは無限にループさせます。

| プロパティ | 説明 |
| -------- | ----------- |
| **Num Loops** | 実行するループ回数です。 |
| **Infinite Loop** | このループを無限にループさせるかどうか。 |
| **Node Name** | Behavior Tree グラフでのノードの表示名です。 |

## Reached Move Goal

![](ReachedMoveGoal.png)

**Reached Move Goal** ノードは、(Character Movement コンポーネントを持つ) ポーンのパスを確認し、ポーンが移動ゴールに到達すると成功を返します。

| プロパティ | 説明 |
| -------- | ----------- |
| **Inverse Condition** | 結果を反転するかどうか (_true_ から _false_ 、 _false_ から _true_) |
| **Node Name** | Behavior Tree グラフでのノードの表示名です。 |

## Set Tag Cooldown

![](SetTagCooldown.png)

| プロパティ | 説明 |
| -------- | ----------- |
| **Cooldown Tag** | Cooldown に使用する GameplayTag です。 |
| **Cooldown Duration** | Cooldown の秒単位の時間です。 |
| **Add to Existing Duration** | ある GameplayTag 上に既に Cooldown がある場合、さらに追加するかどうかを決めます。 |
| **Node Name** | Behavior Tree グラフでのノードの表示名です。 |

## Tag Cooldown

![](TagCooldown.png)

| プロパティ | 説明 |
| -------- | ----------- |
| **Cooldown Tag** | Cooldown に使用する GameplayTag です。 |
| **Cooldown Duration** | Cooldown の秒単位の時間です。 |
| **Add to Existing Duration** | ある GameplayTag 上に既に Cooldown がある場合、さらに追加するかどうかを決めます。 |
| **Adds/Sets Cooldown on Deactivation** | デコレーターが非アクティブの時、 CooldownTag の値を追加 / 設定するかどうかを決めます。 |
| **Observer Aborts** | [INCLUDE:#subprop3] |
| **Node Name** | Behavior Tree グラフでのノードの表示名です。 |

## Time Limit

![](TimeLimit.png)

**Time Limit** デコレーターは、ブランチまたはノードに、停止または失敗するまでの終了時間の長さを設定します。ノードがフォーカスされる度に、タイマーはリセットされます。

| プロパティ | 説明 |
| -------- | ----------- |
| **Time Limit** | ノードが失敗するまでの秒単位の時間制限です。 |
| **Observer Aborts** | [INCLUDE:#subprop3] |
| **Node Name** | Behavior Tree グラフでのノードの表示名です。 |





