INTSourceChangelist:3608492
Availability:Public
Crumbs:%ROOT%
Title:ボリュームのリファレンス
Description:ボリュームを配置および操作してビヘイビアとレベル設定を拡張してみましょう
Type:Reference
SkillLevel:Beginner
version:4.16
Parent:Engine/Actors/Types
order:8
tags:Volumes
tags:Collision

[TOC(start:2 end:4)]

**ボリューム** は、3D **アクタ** で、レベル内のエリアのビヘイビアを変更するために使用します。ボリュームは以下のような用途に使用することができます。

* ボリューム内のプレイヤー、または他のアクタにダメージを与える。
* コリジョン サーフェスとして機能し、アクタがボリューム内へ立ち入らないようにブロックする。
* アクタがボリュームに入るときにドアを開く。
* レベルがライティングや可視性を計算する方法を変更する。


## ボリュームを作成し、配置する

ボリュームは **[Modes]** メニューの **[Volumes]** タブからボリュームを選択し、レベル ビューポートへドラッグ＆ドロップして作成します。 

![](creatingVolumes.png)

ボリュームをレベル内に配置したら、見た目が適切になるようにボリュームのリサイズおよび再配置ができます。ボリューム配置時に覚えておく重要なポイントは以下の 2 つです。

1. ボリュームはサポート アクタであり、一般的に特定タイプのアクタが特定エリアに入ったときに検知して反応しエフェクトをトリガーします。
1. ボリュームによっては独自のビルトイン エフェクトを持つ (コードまたはブループリントで) ことがありますが、多くの場合、他のアクタに手がかりを与えます。ボリュームは、他のエレメントが視覚的手ががりになる、大きなシステムの一部として考えられます。

例として **Pain-Causing Volume** があります。これは、ボリューム内にあるものに対してダメージを与えます。以下のようにレベルに配置します。

[VAR:VolumeDemoSize]
h:301
[/VAR]

[REGION:imagetable]
|![](PainCausingVolume_NoEffect.png)(%VolumeDemoSize%)|![](PainCausingVolume_NoEffect_NoVolume.png)(%VolumeDemoSize%)|
|:-----------:|:----------:|
| エディタ内 | インゲーム |
[/REGION]

この場合、プレイヤーはボリュームを避ける方法を知らないか、中に入ったら何故ダメージを受けるかを理解しています。レベル デザイナーは、Pain Causing ボリュームを説明するヒントをプレイヤーに与えるようにします。


[REGION:imagetable]
|![](PainCausingVolume_Effect.png)(h:343)|![](PainCausingVolume_Effect_NoVolume.png)(h:343)|
|:-----------:|:----------:|
| エディタ内 | インゲーム |
[/REGION]

この場合、炎のパーティクル エフェクトが何故そのエリアが危険であるかを視覚的に説明しますが、Pain Causing ボリュームには炎にさらされたときにプレイヤーのヘルスを減らすゲームプレイ エフェクトで視覚的にサポートします。


## ボリュームの種類


### コリジョン ボリュームとオーバーラップ ボリューム

#### Blocking Volume

Blocking Volume は、アクタが通過できないコリジョン形状の役割をします。ボリューム上でコリジョン チャンネルを調整すると (下の画像)、どのタイプのアクタが通過できるのか、また、ボリュームを通過する時にアクタがオーバーラップ イベントを生成すべきかを制御できるようになります。
[REGION:note]詳細は、 [コリジョンのドキュメント](Engine\Physics\Collision) をご覧ください。[/REGION]

![](blocking_volume_details.png)

Blocking Volume はスタティックメッシュ上のコリジョン サーフェスの場所、特に構造体の中に壁がある場合に使用することができます。これにより、シーンは予測しやすくなります。物理オブジェクトは床や壁のバンプなどの小さなものとインタラクションしなくなるからです。物理シミュレーションの負荷を減らすことでパフォーマンスも向上します。

#### Camera Blocking Volume

**Camera Blocking Volume** はコリジョン設定でカメラだけをブロックし他のものは無視するように事前設定します。カメラが不適切な位置にならないように目に見えないバリアを定義することを意図しています。この例として、三人称視点のゲームでプレイ エリアの壁がツタの葉などの装飾で覆われている場合があります。このような場合、薄い Camera Blocking Volume を壁に対して配置し、カメラがツタにぶつからないようにしたり、葉の裏側に行かないようにし、滑らかにスライドさせて、室内のアクションをさえぎる物がない状態で見えるようにします。

#### Kill Z Volume

**Kill Z Volume** は、ある種のゲームでオブジェクトが境界から出るのを防ぐためのものです。例えば、プラットフォーマー ゲームで崖から落ちる、穴に落ちる、または SF ゲームでスーツを着用せずに宇宙船を離れるなどを防ぎます。Kill Z Volume は任意のアクタが入ってくると `FellOutOfWorld` 関数を呼び出します。デフォルトでアクタは迅速なクリーンアップ プロシージャを経て自己を破壊します。制作しているゲームで何か違うものを必要としているならば、どのアクタのタイプでもこのビヘイビアをオーバーライドすることができます。例えば、プレイヤーがゲームを続けるために集める必要があるキーまたはその他のアイテムが溶岩の穴に落ちたら、破棄して勝つ見込みがない状態のままにするよりも、ゲームではそのアイテムをテレポートしてプレイヤーが届く場所に戻すのが望ましいでしょう。または少なくともプレイヤーにアイテムが失われたことを通知し、最後のチェックポイントをリロードするとよいでしょう。

#### Pain-Causing Volume

**Pain Causing Volume** は、Physics Volume にプレーヤーにダメージを与える機能を追加したものです。溶岩の穴、毒ガスのもくもくした塊など、明らかにプレイヤーが行くべきでない領域がレベルに存在する場合に便利です。
[REGION:note]Pain-Causing Volume の各プロパティの情報については、 [詳細ページ](Engine/Actors/Volumes/PainCausingVolumeDetails) をご覧ください。[/REGION]

#### Physics Volume

**Physics Volume** は、キャラクターや他の物理オブジェクトに影響を与える物理のセットアップを操作できるボリュームです。主に、プレイヤーが泳がなければならない水のある背景の作成に使用されます。Physics Volume のエフェクトは可視であり、必要に応じて使用することができます。Character Movement Component クラスでは現在のフィールドを使って、所有している `Character` が背景をどのように動くかを調整します。ゲームにカスタム物理がある場合、`APhysicsVolume` から独自の子クラスを派生させるとそれを実現するのに役立ちます。
[REGION:note]Physics Volume の特定のプロパティに関する情報は、 [詳細ページ](Engine/Actors/Volumes/PhysicsVolumeDetails) をご覧ください。[/REGION]

#### Trigger Volume

**Trigger Volume** は、プレイヤーまたはオブジェクトが出入りする際にイベントを発生させるために使います。Trigger Volume は、 **Level ブループリント** と一緒に使用して、イベントとゲームプレイのシナリオや機能を、ブループリントを追加する必要なくテストすることができます。

例えば、レベル内に TriggerVolume を配置し、**Level ブループリント** でボリュームのオーバーラップ イベントを作成し、これでサウンドを再生したり、シネマティックスを開始したり、ドアを開けることもできるオーバーラップ イベントを作成します。

[REGION:note]
コリジョン設定をチェックして、Overlap コリジョン反応の設定でトリガーが意図したアクタに反応するようにしてください。
[/REGION]


### グラフィカル ボリュームとオーディオ ボリューム

#### Audio Volume
**Audio Volume** は、ボリュームの内外で聞こえるものを制御する区切られたオーディオゾーンを作成するだけでなく、レベル内で様々なサウンドの制御と適用を可能にします。Audio Volume を使用すると、フェーディングによりオーディオ間のトランジションを生成し、ボリューム自体の中で Ambient Zone 設定を制御することができます。
[REGION:note]Audio Volume の各プロパティの情報については、 [詳細ページ](Engine/Actors/Volumes/AudioVolumeDetails) をご覧ください。[/REGION]

#### Cull Distance Volume

**Cull Distance Volume** は、オブジェクトのカメラからの距離とサイズに応じてオブジェクトをカリング (すなわちスクリーンに描画されないように) できる最適化ツールです。小さくて重要でないと思われるオブジェクトをシーンに描画しないことにより最適化します。サイズは、最長寸法に合わせてバウンディング ボックスで計算され、選択されるカリング距離がそのサイズに最も近いものになります。

Cull Distance Volume 設定は、以下の **[Details]** パネルに表示されている **[Cull Distances]** プロパティに依存します。

![](CullDistancesProperty.png)

上図のプロパティでは、動作が以下のように定義されます。

* サイズが 50 ユニット (85 ユニット以下の距離) に最も近いボリューム内のオブジェクトは、カメラから 500 ユニット以上離れるとカリングされ (消滅し) ます。
* サイズが 120 ユニット(85 から 210 ユニットの間の距離) に最も近いボリューム内のオブジェクトは、カメラから 1000 ユニット以上離れるとカリングされ (消滅し) ます。
* サイズが 300 ユニット (210 ユニット以上の距離) に最も近いボリューム内のオブジェクトは、この場合 0 は無限遠として扱われ、カメラが十分に遠ざかることができないため、カリングされることはありません。

Cull Distances 配列にエントリを新規に追加して設定を開始します。これは ![](button_Plus.png) ボタンをクリックすれば完了です。次に、任意のオブジェクトのサイズ、およびそのサイズ以下のオブジェクトをカリングしたい希望の距離を入力します。これらのプロパティは、特定の順序で作成する必要はありません。

#### Hierarchical LOD Volume

**Hierarchical LOD Volume** には特殊なプロパティはありませんが、[HLOD](Engine/HLOD) システムが複数アクタを単一の HLOD クラスタにグループ化するために使われます。クラスタ生成時にアンリアル エンジンは手動配置したボリュームに配慮して通常の生成プロセスをオーバーライドします。

#### Lightmass Character Indirect Detail Volume

**Lightmass Character Indirect Detail Volume** は Lightmass Importance Volume に類似しており、間接ライトのサンプルを生成します。グラウンド上のプレイヤーの高さだけではなく、ボリューム全体の内部にもサンプルを生成します。このタイプの使用例として、間接ライティングが底部だけでなく、確実にシャフトの方向へ正しく照らすエレベータ シャフトへの配置があります。

#### Lightmass Importance Volume

**Lightmass Importance Volume** は Lightmass 計算にフォーカスするために使用します。Lightmass とは、事前計算されたライティングおよびグローバル イルミネーション システムで、UE4 で使用されています。レベル内に事前計算されたライトを生成するために必要な処理量を最小限に抑えるために、 Lightmass Importance Volume を使用してレベル ジオメトリ領域を囲います。Lightmass は、領域外のものはスキップして、領域内でのみ計算を行います。
[REGION:note]Lightmass および Lightmass Importance Volumes に関する詳細は、 [Lightmass に関するドキュメント](Engine/Rendering/LightingAndShadows/Lightmass) を参照してください。[/REGION]

#### Mesh Merge Culling Volume

**Mesh Merge Culling Volumes** は、そこに含まれるメッシュ オブジェクトをマーク付けし、こうしたオブジェクトが単一のメッシュに結合されるようにします。これはあるエリアに含まれる小さなメッシュの集まりをひとつのメッシュとしてまとめてカリングする、または [HLOD](Engine/HLOD) 生成によって最適な方法でジオメトリを減らすことでパフォーマンスを向上させます。

#### Post Process Volume

**Post Process Volume** は **[Details]** パネルのプロパティを調整することでカメラに適用される Post Process 設定をオーバーライドできるスペースです。 
[REGION:note]ポストプロセスに関する詳細は [ポストプロセスのドキュメント](Engine/Rendering/PostProcessEffects) を参照してください。[/REGION]
 
#### Precomputed Visibility Volume
**Precomputed Visibility Volume** は主にパフォーマンスの最適化に使用します。これらのボリュームは、ワールド内の位置に対するアクタの可視性を保存しています。プレイヤーがアクセスできるエリアのみに配置されます。

#### Precomputed Visibility Override Volume
**Precomputed Visibility Override Volume** を使えば、Precomputed Visibilty Volume の自動生成結果が望ましくない場合に、手書きのコードでワールド内の位置に対してアクタの可視性をオーバーライドすることができます。これらはパフォーマンスの最適化にも使用し、プレイヤーがアクセス可能なエリアのみに配置することができます。


### レベル ボリュームと AI ボリューム

#### Level Streaming Volume

[EXCERPT:LSV]
**Level Streaming Volume** は [レベル ストリーミング](Engine/LevelStreaming) プロセスを支援するために使用します。また、プレイヤーのボリュームの出入りに合わせてレベルがメモリに入出力される際、レベルを簡単にカプセル化および制御できるようにします。
[/EXCERPT]

#### Nav Mesh Bounds Volume

**Nav Mesh Bounds Volume** は、レベル内のどこに Nav Mesh をビルドするかを制御するために使用します。Nav Mesh は、レベル領域のすべての場所でナビゲーション パスを計算するために使用します。

ボリューム内で、適切な歩行角度で全てのサーフェス上に Nav Mesh が作成されます。必要に応じて、これらの Nav Mesh を好きなだけオーバーラップさせて望ましい Nav Mesh を生成することができます。

レベル内でナビゲーションが可能な領域を囲む Nav Mesh を 1 つ以上作成するだけで、Nav Mesh Bounds Volume が使用できるようになります。Nav Mesh が自動的にビルドされます。

[REGION:tip]
ビューポートで **[P]** を押せば、いつでも Nav Mesh を表示することができます。
[/REGION]

[REGION:note]詳細は、コンテンツ サンプルと [NavMesh に関するドキュメント](Resources\ContentExamples\NavMesh) をご覧ください。[/REGION]
