Availability:Public
Title: Animation Fast Path Optimization
Crumbs: %ROOT%, Engine, Engine/Animation
Description:Optimizations that can be applied to the structure of animation graphs to gain performance
version: 4.11
topic-image:AnimationFastPathOptimization_topic.png
parent:Engine/Animation/Optimization

[EXCERPT:Intro]
Animation Blueprints are very flexible ways of building animation systems. However the performance overheads 
associated with running Blueprint-based logic can become quite high as your graph becomes more complex.
To mitigate these overheads certain methods of structuring your animation graph can be used.
[/EXCERPT:Intro]

## Access Member Variables Directly

![](DirectMemberAccess.png)

## Access Negated Boolean Member Variables

![](NegatedBooleanAccess.png)

## Access Members of a Nested Struct

![](NestedStructAccess.png)

## Access Members Using "Break Struct" Nodes

![](BreakStructAccess.png)

Note that some "Break Struct" nodes, like "Break Transform" will not currently use the fast path as they perform
conversions internally rather than simply copying data.

## Auditing and Maintaining Optimized Animation Blueprints

![](WarnAboutBlueprintUsage.png)

Once an Animation Blueprint has been configured in an optimal way, subsequent iterations can potentially introduce
new, non-performant constructs. To keep track of this you can enable the "Warn About Blueprint Usage" option in the 
Animation Blueprint's Class Defaults. This is also useful when optimizing a particular Animation Blueprint.