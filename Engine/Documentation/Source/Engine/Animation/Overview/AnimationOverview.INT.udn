Availability:Public
Title:Animation System Overview
Crumbs: %ROOT%, Engine, Engine/Animation
Description:Overview of the system for deforming Skeletal Meshes based on animation data using Animation Blueprints, Blendspaces, and Animation Sequences.
Related: Engine/Content/FBX/Animations
Related: Engine/Animation/PhysicallyDrivenAnimation
Related: Engine/Content/Tools/MayaRiggingTool
version: 4.14
type:overview
topic-image:AnimationToolsTopic.png
tags:Animation
tags:Getting Started


[TOC(start:2 end:2)]

[EXCERPT:Intro]
The animation system in Unreal Engine 4 (UE4) is comprised of several Animation Tools and Editors which mixes skeletal-based deformation of meshes with morph-based vertex deformation to allow for complex animation. 
This system can be used to make basic player movement appear much more realistic by playing and blending between canned **Animation Sequences**, create customized special moves such as scaling 
ledges and walls using **Anim Montages**, apply damage effects or facial expressions through **Morph Targets**, directly control the transformations of bones using **Skeletal Controls**, or create logic based **State Machines** that determine which animation a character should use in a given situation. 
[/EXCERPT:Intro]


The purpose of this document is to offer a high-level overview of UE4's animation system, geared primarily toward users who are new to animating in UE4. However, this should not be considered the comprehensive manual for how to animate skeletal assets in the UE4. Rather, think of this as a primer to familiarize you with the various pieces of the animation system, providing an illustration of how they all fit together and showing how animation in UE4 is more powerful flexible than ever before. 

## Terms and Concepts

We will start by identifying the primary terms and concepts of UE4's animation system (click each header to view more documentation):

(#Skeleton)
### %Engine/Animation/Persona/Modes:title%

%Engine/Animation/Persona/Modes:topiccompact%

[INCLUDE:Engine/Animation/Persona/Modes#overview]

### %Engine/Animation/Skeleton:title%

%Engine/Animation/Skeleton:topiccompact%

A **Skeleton** is a hierarchy of bone locations and rotations used to deform a Skeletal Mesh. In UE4, Skeletons are abstracted from Skeletal Meshes in their own asset. This means that animations are applied to the Skeleton, rather than the Skeletal Mesh. By using the same Skeleton, multiple Skeletal Meshes can share animations.

### %Engine/Animation/Sequences:title%

%Engine/Animation/Sequences:topiccompact%

[INCLUDE:Engine/Animation/Sequences#Intro]

### %Engine/Animation/Sequences/Notifies:title%

%Engine/Animation/Sequences/Notifies:topiccompact%

[INCLUDE:Engine/Animation/Sequences/Notifies#Intro]

### %Engine/Animation/AnimBlueprints:title%

%Engine/Animation/AnimBlueprints:topiccompact%

[INCLUDE:Engine/Animation/AnimBlueprints#Intro]

### %Engine/Animation/Blendspaces:title%

%Engine/Animation/Blendspaces:topiccompact%

[INCLUDE:Engine/Animation/Blendspaces#Intro]

### %Engine/Animation/AnimMontage:title%

%Engine/Animation/AnimMontage:topiccompact%

[INCLUDE:Engine/Animation/AnimMontage#Intro]

### %Engine/Animation/NodeReference/SkeletalControls:title%

%Engine/Animation/NodeReference/SkeletalControls:topiccompact%

[INCLUDE:Engine/Animation/NodeReference/SkeletalControls#Intro]

### %Engine/Animation/StateMachines:title%

%Engine/Animation/StateMachines:topiccompact%

[INCLUDE:Engine/Animation/StateMachines#Intro]


[REGION:note]
Examples of some of the animation features can also be found in the [Content Examples](https://docs.unrealengine.com/latest/INT/Resources/ContentExamples/) project available for free from the **Learn Tab** of the Epic Games Launcher. 
[/REGION]

## System Breakdown

The following is a breakdown of where certain parts of the animation system are created and edited.

[REGION:raw]
![](CreationDiagram.png)
[/REGION] 

This diagram illustrates the flow and ownership of data for a typical animated character in Unreal.

[REGION:raw]
![](AnimationDiagram.png)
[/REGION] 



## Animation Debug Features

Debug features can be accessed by pressing the **`** key to bring up the console while in play mode. 

### Rendering Skeletal Mesh Bones

![](AnimationShowDebugBones.jpg)(h:320)

To display the Skeletal Mesh Bones, enter the `ShowDebug Bones` command inside the console. As seen in the image above the bones are represented by individual white lines. 

The `ShowDebug Bones` command will display the information for the playable character during a play session. To view the debug animation for another character (other than the player character), you can use the `viewactor ExampleCharacterID` command, where _ExampleCharacterID_ refers to the Character ID assigned to the character you wish to view. You can find this ID by hovering over a character in the [World Outliner](Engine/UI/LevelEditor/SceneOutliner) which will display its ID name. 

[REGION:note]
At this time when using the `viewactor` command, the camera will be moved to and locked on the Actor you are currently viewing. If you need to manipulate the camera while debugging still, a work around for this is to create a [Play in Editor](Engine/UI/LevelEditor/InEditorTesting) session with more than one player from the dropdown menu using one window for debugging and the other for controlling a player character. 
[/REGION]

Instead of displaying white lines for bones, you can enable 3D bones with the `ShowDebugToggleSubCategory 3DBones` command inside the console. 

### Animation Debug Output

![](AnimationShowDebugToggle.jpg)

The **Animation Debug Output** information can be enabled by using the `ShowDebug Animation` command inside the console. 

The information displayed is split up into 5 sections, each of which can be toggled on and off using the `ShowDebugToggleSubCategory` command followed by the category name listed below (e.g. `ShowDebugToggleSubCategory SyncGroups`). 

| Button | Description |
|-------|------|
| **SyncGroups** | Displays the animation assets currently contributing to the final pose, organized by their sync group (or Ungrouped if they do not belong to a group). By default Blendspaces listed in this section show all their contributing animations/weights. To reduce screen space used by the output this can be toggled off with `ShowDebugToggleSubCategory FullBlendspaceDisplay`. |
| **Montages** | Lists the montages currently being used by the character. The active montage is highlighted in green. |
| **Curves** | Lists the curve values (in Name: Value pairs) that have been activated by the playing animation(s). |
| **Notifies** | Display any notify states that are currently in effect. |
| **Graph** | Displays the active pose graph. The display starts with the last node (the root node) which represents the final pose and goes on to list all the nodes that go into making that final pose. Nodes are represented in such a way as to keep their hierarchy, allowing the user to see which nodes are connected to what without having to refer to the original Blueprint asset. Active nodes are colored green and (if they have been toggled to display using `ShowDebugToggleSubCategory FullGraph`) inactive nodes are colored gray. |

[COMMENT:none]
 Pulled from the intro section (overkill for overview page).
		
		**Additive Animation**
		
		Animations can be used as absolute or additive at any time. The system performs the appropriate calculations to 
		convert the data to offsets when necessary. This makes the system much more flexible than that of previous versions 
		of the engine since you do not have to specify ahead of time that an animation is to be considered additive.
		
		**Blending Animations**
		
		Animations can be blended together to create more complex final poses through the use of [](Engine/Animation/NodeReference/Blend) 
		and [](Engine/Animation/Blendspaces). For instance, a running animation can be blended with aim poses or 
		facial animation to create an output animation of the player running and aiming or talking at the same time while 
		being able to keep the source animations separate. This allows for the reuse of a single source animation in many 
		circumstances.

		**Animation Poses**

		An Animation Pose is essentially a snapshot of the Skeleton, including the position and rotation of all of its 
		bones. Think of a pose as what you see if you pause the playback of an animation. For example, if you paused a run 
		animation mid-stride, you might see something like this:

		![](AnimationPose_Running.png)(w:600)

		It is as if the mesh, via the underlying Skeleton, has been posed. The data that represents the transforms of 
		all of the bones in the Skeleton is what makes up the actual Animation Pose.

		Some AnimationSequences are designed purely to be used as poses. For instance, you might have a series of short 
		one- or two-frame animations that simply define a pose. The pose below is from this type of Animation Sequence, 
		which is designed to be used to cause the mesh to aim its weapon where the player is looking.

		![](AnimationPose_Aiming.png)(w:600)

		The Animation system uses this concept of Animation Poses within the AnimGraph. The data output from an AnimationSequence, 
		Blendspace, or simple blend node is an Animation Pose, or snapshot of the animation up to that point, to apply 
		to the SkeletalMesh. 

		**Component vs Local Space**

		[INCLUDE:Engine/Animation/NodeReference/SpaceConversion#intro]

		**Morph Targets**

		[INCLUDE:Engine/Content\FBX\MorphTargets#Intro]

[/COMMENT]
