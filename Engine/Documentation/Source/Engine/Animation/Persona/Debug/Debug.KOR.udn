INTSourceChangelist:3217533
Availability:Public
Title:애니메이션 블루프린트 디버깅
Crumbs: %ROOT%, Engine, Engine/Animation, Engine/Animation/Persona
Description:애니메이션 블루프린트 디버깅을 위한 애니메이션 블루프린트 에디터의 디버그 창을 켜는 법에 대한 개요입니다.
Related: Engine/Blueprints/UserGuide/Debugging
Related: Engine/Animation/AnimBlueprints
Related: Engine/Blueprints/Editor/UIComponents/Debug
version: 4.14
type:reference
topic-image:AnimationDebugSmall.png
tags:Animation
tags:Blueprints
tags:Debugging

![](AnimationDebugWindow.png)

[](Engine/Animation/AnimBlueprints) 구성을 완료하고 기능 확인을 위한 플레이 테스트를 할 때 오류가 발생할 수 있는 데, 그럴 때 그 원인을 디버깅하여 고칠 수 있으면 좋습니다.
애니메이션 블루프린트는 [](Engine/Blueprints) 시스템과 여러가지 함수 기능을 공유하는데, 여기에는 변수의 값을 감시하는 기능, 그래프의 노드에 **중단점** 을 배치하여 실행 흐름을 일시 정지시키는 기능, 실행된 블루프린트에 속한 모든 노드 스택 추적을 통한 실행 흐름 확인 기능 등 매우 유용한 디버깅 툴이 포함됩니다.

기본적으로 애니메이션 블루프린트 에디터 내 **디버그** 창은 숨겨져 있으나, 툴바의 **창** 옵션에서 켤 수 있습니다.

![](WindowOption.png)

그러면 아래와 비슷한 디버그 창이 열립니다.

![](DefaultDebugWindow.png)

이 창의 내용은 애니메이션 블루프린트에 무엇이 들어있는가에 따라 달라질 수 있습니다.

애니메이션 블루프린트 안에서 동일한 [](Engine/Blueprints/UserGuide/Debugging) 메소드를 사용하여 중단점을 추가하거나 감시 목록에 변수를 추가할 수 있습니다.

![](ExampleDebugging.png)

위에서 중단점을 **AnimNotify_Jump** 이벤트에 추가했는데, 이 노드를 호출하여 실행하면 이 스크립트가 실행되도록 만듭니다.
**Enable Jump** 변수 값도 감시하는데, 이 디버깅 옵션으로 점프에 붙인 애니메이션 노티파이 실행을 시도할 때 발생할 수 있는 문제를 진단할 수 있습니다.
아마 _Jump_ 가 제대로 설정되지 않았거나 사용중인 **Cast** 노드가 실패했을 수도 있으니, 그러한 부분을 플레이 세션 도중 디버거와 애니메이션 블루프린트 안에서 확인하면 됩니다.

툴바에서 **디버그** 옵션 아래 모든 중단점을 켜고/끌 수 있고, 모든 중단점이나 감시값을 삭제(모든 변수 감시를 중단)할 수도 있습니다.

![](DebugMenuOption.png)
