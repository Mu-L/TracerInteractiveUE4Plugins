INTSourceChangelist:3809606
Availability:Public
Title:ルート モーション
Crumbs: %ROOT%, Engine, Engine/Animation
Description:UE4 内でルートベースのアニメーションを処理する方法
Related:Engine/Content/FBX/Animations
Related:Engine/Content/Types/SkeletalMeshes
Related:Engine/Animation/PhysicallyDrivenAnimation
Related:Engine/Content/Tools/MayaRiggingTool
Related:Engine/Animation/AnimBlueprints
Related:Engine/Animation/AnimBlueprints/EventGraph
version:4.9
topic-image:RootMotion_topic.png

[TOC(start:2 end:2)]



通常、インゲームのアニメーションでは、キャラクターのコリジョン カプセル (またはその他の形状) は、シーンを通してコントローラーによって操作されます。カプセルからのデータは、その後アニメーションを動かすために使用されます。例えばカプセルが前進している場合、キャラクターが独力で移動している様子を作成するために、システムはキャラクターに対してランニング、または歩行のアニメーションを再生することを把握しています。しかしこのタイプの動きが全ての状況で常に理想的とは言えません。ある状況では、複雑なアニメーションがコリジョン カプセルを実際に動かすことが理にかなっていて、その逆は該当しません。このような状況で、ルートモーション処理はゲームにとって重要な課題となります。

例えば、前に飛び出す動作を事前にメッシュにアニメートしたプレイヤーからの特殊攻撃を考えてみてください。キャラクター モーションが全てプレイヤー カプセルに基づいている場合、こうしたアニメーションではキャラクターはカプセルの外側へ出されてしまい、事実上コリジョンが消滅してしまいます。アニメーションの再生が終わると、プレイヤーはコリジョン位置に戻ります。通常カプセルは全ての演算の中心となるため、これは厄介な問題です。カプセル外のキャラクターは、ジオメトリを通過し、適切に反応しません。加えて、アニメーションの最後にキャラクターがカプセルへ戻るのは現実的ではありません。
 
このコンセプトになじみがないユーザーは、説明を読んだだけでは適切なルートモーションが何故重要なのか簡単に理解できないかもしれません。以下のアニメーションキャラクターは、前へ飛び出してハンマーをたたきつける動作を事前にアニメートした攻撃を行います。キャラクターが前進移動しているアニメーションはゲームで処理していないことに留意してください。アニメーション アーティストがあえてこのように作成しました。

[OBJECT:EmbeddedVideo]
[PARAMLITERAL:width]
640
[/PARAMLITERAL]
[PARAMLITERAL:height]
360
[/PARAMLITERAL]
[PARAMLITERAL:videoid]
TKAcNubFOH8
[/PARAMLITERAL]
[/OBJECT]


[REGION:tip]
ルートモーションの別の例は、セクション 1.9 の [アニメーション コンテンツ サンプル](Resources\ContentExamples\Animation) のページをご覧ください。
[/REGION]


## ルートモーションとは？

簡単に言うと、ルートモーションはスケルトンのルートボーンのアニメーションに基づくキャラクターの動作です。ほとんどのインゲームのアニメーションは、キャラクターのルートが静止したままのサイクルを介して処理されます。しかし、上記の例のように必ずしもこれ該当するわけではありません。これを処理するために、ルート モーションをキャラクターから取り除き、代わりにそれをキャラクターのカプセルに適用します。これは UE4 でルートモーションが何を行うかの本質を示しています。

[REGION:warning]
ルートモーションを適切に使用するには、キャラクターのルートボーンが原点 (0,0,0 回転なし) にあることが重要です。こうすることで、システムがアニメートされた動き (キャラクター) から物理的な動き (カプセル) を隔離できるようになります。 
[/REGION]


アニメーションのルートモーションは再生中に表示することができます。ルートボーンが動いているいずれかのアニメーションを開いて、ビューポートで **[Show > Bones]** を選択します。アニメーションのプロパティで **Enable Root Motion** を選択しなかった場合は、キャラクターのルートが動くと赤い線が表示されます。これはアニメーションのルートモーションを示しています。

[REGION:fullwidth]
![](RootMotionBone.png)
[/REGION]

ルートモーションを有効にすると、赤い線は消えます。代わりにキャラクターが所定の位置に移動します。これは、キャラクターのルートがオリジナルの位置から移動しなくなるためです。この画像ではキャラクターのルートモーションを有効にしています。上記の画像と同一フレームですが、キャラクターの位置は変化していないことに注意してください。 

[REGION:fullwidth]
![](RootMotionAppliedBone.png)
[/REGION]

これは何を意味するのでしょうか？システムはキャラクター アニメーションのルートモーションを考慮しているため、キャラクターのコリジョン カプセルへ同じモーションを再び適用できるようになりました。つまり、アニメーターが意図したモーションと全く同じ動作をさせることも出来ますが、ゲーム内のコリジョンやその他の物理およびゲームプレイ イベントに対して適切に反応することもできるようになりました。実際の動作を以下のセクションで見てみましょう。


## ルート モーションを有効にする

ルートモーションは、**アニメーション エディタ** の **[Asset Details (アセットの詳細)]** パネル内で [アニメーション シーケンス](Engine\Animation\Sequences) のために有効にすることができます。 

![](RootMotion.png)

[REGION:warning]
アンリアル エンジンのバージョン 4.5 以前は、ルート モーションを定義するために、[AnimationMontage](https://docs.unrealengine.com/latest/INT/Engine/Animation/AnimMontage/index.html) を使用する必要がありました。バージョン 4.6 以降では、ルート モーションはアニメーション シーケンス毎に処理されるようになり、ペルソナのアニメーションのプロパティでオン、オフを切り替えることができるようになりました。
ただし、ネットワーク ゲームでは、ルートモーションはいまだに Animation Montage を使用する必要があります。以下の [Root Motion from Montages Only](#rootmotionfrommontagesonly) をご覧ください。 

[/REGION]

ルート モーションをアニメーション シーケンス内で有効にするか否かを定義する一方で、それが [アニメーション ブループリント](Engine/Animation/AnimBlueprints) 内でどのように処理されるかを決める必要があります。Animation ブループリント内でルート モーションを処理可能にするいくつかの方法があります。アニメーション ブループリント エディタの **[Details]** パネルの **Root Motion Mode** ドロップダウン メニューから設定できます。 

![](RootMotionMode.png)

オプションは以下の通りです。 

| **プロパティ** | **説明** |
| --- | --- |
| **No Root Motion Extraction** | ルート モーションがそのまま残されます (ルート ボーンに適用されます)。 |
| **Ignore Root Motion** | ルート モーションが抽出され (かつルート ボーンから削除され) ますが、キャラクターには適用されません。 |
| **Root Motion from Everything** | 以下を参照 |
| **Root Motion from Montages Only** | 以下を参照 |

### Root Motion from Everything

このオプションが、ルート モーション モードとして設定される場合、最終的なキャラクターのポーズに寄与する各アニメーション アセット (シークエンス、ブレンドスペース、モンタージュなど) では、ルート モーションが抽出されます (ただし、ルート モーションを含むものとして設定されていた場合)。抽出された各ルート モーションは、ソース アセットのポーズに寄与する重みに基づいてブレンドされます。 

例：

![](FromEverything.png)

上図では **Jog_Loop_Fwd_RM** と **Jog_Loop_Right_RM** のルート モーションは、それぞれ 0.5 の重みでブレンドされます。その結果、アニメーションでキャラクターは斜め前に走り、マップを横切ることになります。 

### Root Motion from Montages Only

この方法は、ネットワーク ゲームを念頭に設計されました。そのため、機能に制限があります。**Root Motion from Everything** は制約がないように設計されているため、アニメーションがネットワーク上でレプリケートされることがないようなゲームに限り使用することをお勧めします。  



## 動作中のルートモーション

以下に、ルートモーションなしのアニメーションの問題、そしてアニメーションにルートモーションを適用するメリットを分析していきます。ここの例では、上のアニメーションを使用します。

### ルートモーションなしのアニメーション

ルートモーションなしのアニメーションは、ご覧のとおりキャラクターをカプセルから引き離すようなアニメーションとなります。カプセルの位置に不自然に急速に戻っていることに注意してください。これはアニメーションの再生が終わると、キャラクターのコントローラーが元の位置にキャラクターを引き戻すために生じます。

[OBJECT:EmbeddedVideo]
[PARAMLITERAL:width]
640
[/PARAMLITERAL]
[PARAMLITERAL:height]
360
[/PARAMLITERAL]
[PARAMLITERAL:videoid]
Xu2bVQ4pg8M
[/PARAMLITERAL]
[/OBJECT]


### カプセルからの分離が問題になる理由

ここで対処するのは、キャラクターが突然カプセルへ戻る問題のみではありません。キャラクターはコリジョン形状を離れているため、ワールドのオブジェクトを通過して全体的な継続性がなくなっています。この例では、キャラクターの攻撃によって壁を通り抜けて戻っているのがわかります。


[OBJECT:EmbeddedVideo]
[PARAMLITERAL:width]
640
[/PARAMLITERAL]
[PARAMLITERAL:height]
360
[/PARAMLITERAL]
[PARAMLITERAL:videoid]
ov9pyx4MAOo
[/PARAMLITERAL]
[/OBJECT]


### ルートモーション処理による問題の解決法

アニメーションにルートモーションの使用を設定すると、アニメーターが設定した動作が一時的にカプセルの駆動力となります。これにより、アニメーションの終了点から再生を続けることができます。2 回目に攻撃がトリガーされると、新しい位置からの攻撃が開始するのが分かります。もちろん、最初に向きを変えたためカメラから逸れてはいません。



[OBJECT:EmbeddedVideo]
[PARAMLITERAL:width]
640
[/PARAMLITERAL]
[PARAMLITERAL:height]
360
[/PARAMLITERAL]
[PARAMLITERAL:videoid]
PWB_mqjz3iA
[/PARAMLITERAL]
[/OBJECT]


### ルートモーションと物理

カプセルがあるということは、物理コリジョンをなおも使用可能であることを意味します。キャラクターが壁を通り抜ける問題、およびキャラクターがカプセル位置に素早く戻る必要がある問題も緩和します。以下の画像では、アニメーションはルート モーションを使っており、カプセルを伴うためキャラクターは壁を完全には通過せずにぶつかります。 

完全ではないのは、キャラクターのブレンドするアニメーションによって、幾分壁を通り抜けてしまうからです。しかし、この問題は壁かキャラクターどちらかのコリジョン ボリュームと連携することで簡単に対処することができます。重要な点は、カプセルがモーションから遅れずに対応していて、キャラクターが壁を突き抜けたり急激にカプセルへ戻ったりしないことです。

[OBJECT:EmbeddedVideo]
[PARAMLITERAL:width]
640
[/PARAMLITERAL]
[PARAMLITERAL:height]
360
[/PARAMLITERAL]
[PARAMLITERAL:videoid]
YuD29-Xr7Oc
[/PARAMLITERAL]
[/OBJECT]

ルートモーション中にキャラクターの物理ステートが考慮されています。例えばキャラクターの物理ステートが Walking または Falling の場合、ルートモーションの Z 軸は無視されて、重力が適用されます。キャラクターは落下するか、坂を下るか、もしくは階段を上ります。キャラクターの物理ステートが Flying の場合、ルートモーションが完全に適用されて、重力は無視されます。


[COMMENT:none]
 This should be a HowTo.It's actually a checkbox now instead of using AnimMontages
## ルートモーションの設定

UE4 のルートモーションの設定はとても簡単です。しかし、どのバージョンの UE4 を使用しているかに応じて手順は若干異なります。大まかに説明すると、pre-4.6 のプロセスは以下を含みます。

1. (UE4 バージョン 4.6 以降) - 使用するアニメーションを開き、**Enable Root Motion** プロパティにチェックが入っていることを確認します。
1. ルートモーション コントロールが必要なアニメーションを AnimMontage アセットへ割り当てます。
1. この AnimMontage 内のモーションを格納するスロットに必ず名前を付けます。
1. (UE4 Pre-4.6 を使用している場合) AnimMontage 内の、 **[Enable Root Motion Translation (ルート モーションの移動を有効にする)]** プロパティと **[Enable Root Motion Rotation (ルート モーションの回転を有効にする)]** プロパティに必ずチェックを入れます。
1. AnimGraph で、アニメーションが **Slot** ノードを流れることと、このノードが AnimMontage で指定されたものと同じ名前のスロットへ割り当てられていることを確認します。
1. Animation ブループリントのイベントグラフから AnimMontage を再生します。 

以下のドキュメントでは、ルートモーションを使用するための上記の例の設定方法について説明します。

### セットアップの概要

手始めに、基本的なサードパーソン キャラクターを用意します。実際には UE4 のプロジェクト テンプレートから利用可能なサードパーソン キャラクター テンプレートの派生物を利用しています。1 つだけ特別に追加するのは、 **[R]** キーを押すとハンマーを振りかざすアニメーションを再生する設定です。攻撃やダメージの処理をするコードはありません。ルートモーションを必要とするアニメーションを再生する手段にすぎません。

いろいろな設定方法があります。ここでは 1 つの方法の概要を示し、続いてルートモーション設定に焦点を当てて行きます。

セットアップは、カスタムの GameMode ブループリント、カスタムの PlayerController ブループリント、カスタムの Character ブループリント、およびカスタムの Animation ブループリントで始まります。キャラクターから Animation ブループリントへイベントを送信するためにブループリント インターフェイスを使用します。以下にその内訳を示します。

* **GameMode** - コントローラーとポーンのクラスのみを決定します。それぞれカスタム仕様のPlayer コントローラーと Character ブループリントになります。
* **PlayerController** - いくつかのプロパティを設定します。これは Third Person テンプレートに入っているものと同じです。
* **Character** - スタティックメッシュとカメラに加え、入力処理を行うコンポーネントを設定する場所です。
* **Animation ブループリント** - キャラクターのアニメーションのステートを処理します。
* **ブループリント インターフェイス** - Character ブループリントから Animation ブループリントへイベントを送信するために使用します。これは AnimMontage をトリガーする方法です。


ブループリント インターフェース内に関数を作成することから開始します。この例では、関数を **UseHammer** と名付けました。この関数に対する入出力値はありません。単にイベントを発生させるために使用します。

![](UseHammerFunction.png)

次に Character ブループリントで以下の特別なネットワークをセットアップします。サードパーソン コントロールの処理が既に整いました。ハンマー アニメーションを機能させるために必要なものに焦点を当てていきます。この場合、 **[R]** キーを押すと UseHammer 関数をインターフェイスに呼ぶ入力イベントを設定します。

[REGION:fullwidth]
![](PressRUseHammer.png)
[/REGION]

[REGION:note]
**Get Anim Instance** ノードを使用していることに注意して下さい。これにより、Animation ブループリントの正しいインスタンスと通信するように確認します。これは、関数呼び出しを正しいオブジェクトへ送信する場合に不可欠です。
[/REGION]


次に Animation ブループリントでインターフェイスが実装済みであることを確認します。

![](ImplementedInterface_AnimBP.png)


Animation ブループリントで、関数呼び出しのためにイベントグラフへ簡易なイベントを設定します。 

![](UseHammerFunctionCall.png)

これで AnimMontage の設定の準備が整いました。


### AnimMontage の設定

ルートモーションは AnimMontage 内で処理されるため、AnimMontage を作成することが必須となります。  
その前に、アニメーションでルートモーションが有効になっていることを確認します。アニメーション シーケンスをダブルクリックしてペルソナを開きます。アニメーション プロパティ (デフォルト位置は左下部) で、チェックボックスをクリックしてルートモーションを有効にするようにします。

![](EnableRootTranslation.png)

これを行ったら、AnimMontage を作成する必要があります。

最も簡単な設定方法は、ルートモーションを必要とするアニメーションを **右クリック** して (Mac では **Ctrl + 左クリック**)、[Create AnimMontage] を選択するものです。

 ![](CreateAnimMontage.png)

AnimMontage に名前を付けて、ペルソナで開くためにこれを **ダブルクリック** します。エディタ中央下部に [SlotName] ドロップダウンがあります。その下にあるメガネ アイコンを選択して、Anim Slot Manager を呼び出します。**[Add Slot]** ボタンを押してスロットに名前を付けます。一緒に再生するアニメーションの主要部分を構成する場合はそのような名前を選択します。一般的なスロット名は、例でも使用する FullBody です。

その後、モンタージュ内のドロップダウン メニューから新しいスロットを選択します。

[REGION:fullwidth]
![](SettingUpSlotinMontage.png)
[/REGION]

次に Animation ブループリントへ戻りますUseHammer 関数イベントのすぐ後に、 **Montage Play** を作成します。これが適切な AnimMontage と関連付けられていることを必ず確認します。

![](PlayMontage.png)

あと少しで終わります。最後に、最終アニメーションでスロットが計算中であることを確認します。Animation ブループリント内で、[AnimGraph] タブへ移動します。**Slot** ノードを作成して、AnimMontage 内のスロットに使用した名前と同じ名前を付けます。この例では「FullBody」です。ノードは、既存ステートマシーンか別のアニメーションと Final Animation Pose ノードとの間に位置させなくてはいけません。

![](InsertSlotNode.png)

[REGION:note]
New State Machine ノードに警告が表示される場合があります。この警告は、セットアップが完了していないことが原因ですが、このチュートリアルの目的上、重要ではありません。
[/REGION]

これで終わりです。アニメーションは、ルートモーションを利用するように設定した AnimMontage を介して再生されているため、これで全て機能するはずです！


[OBJECT:EmbeddedVideo]
[PARAMLITERAL:width]
640
[/PARAMLITERAL]
[PARAMLITERAL:height]
360
[/PARAMLITERAL]
[PARAMLITERAL:videoid]
PWB_mqjz3iA
[/PARAMLITERAL]
[/OBJECT]


[/COMMENT]






