INTSourceChangelist:3429233
Availability:Public
Title:スケルトン アセット 
Crumbs: %ROOT%, Engine, Engine/Animation
Description:スケルトン アセットの概要および UE4 のアニメーションへの適用方法を説明します。
version:4.9
tags:Assets
topic-image:Engine/Animation/Overview/SkeletonTopic.png

[REGION:fullwidth]
![](SkeletonImage.png)
[/REGION]



アンリアル エンジン 4 (UE4) のスケルトンは、スケルタルメッシュとは別個のアセットです。各スケルタルメッシュはスケルトンとの関連付けが必要で、全ての Animation アセット (例、アニメーション シーケンス、アニメーション モンタージュ、ブレンド スペース) はスケルタルメッシュではなくスケルトンと関連付けられています。

## スケルトンとは何でしょう？

デジタル コンテンツ制作に精通しているユーザーは、既に「スケルトン」について理解があるかと思います。ほとんどの 3D アプリケーションでは、スケルトンはキャラクターのボーンやジョイントの定義に使用するデジタル階層フレームワークで、いろんな意味で実際の生物学的骨格を模倣します。 

![](MayaSkeleton.png)(w:200)
[REGION:caption]
Maya の典型的なキャラクター スケルトンです。
[/REGION]

重要な違いは、スケルトン アセットはスケルタル メッシュ内部のボーン階層とは異なることです。アンリアル エンジン 4 のスケルトン アセットは、 3D 表現の実際のスケルトンとは多少異なり、むしろ特定タイプのキャラクターやスケルタル メッシュのボーンや階層情報を保持するリストのようなものです。アニメーションの関連付けは、このリストを通じて設定します。 

アニメーション システムにおけるスケルトン アセットの位置づけは、スケルタル メッシュとアニメーションの中間として考えるのが恐らく最も適しています。複数のスケルタルメッシュは同一スケルトン アセットを使用することができます。また、同じスケルトン アセットを使用しているスケルタルメッシュ間でアニメーションを共有することができます。

[REGION:tip]
Skeleton アセットに関する詳しい情報と何ができるかについては、 [スケルトンの作業](https://docs.unrealengine.com/latest/INT/Videos/PLZlv_N0_O1gbwdyIm78w42fZ1t8dDClsI/index.html) チュートリアル シリーズをご覧ください。
[/REGION]

## 基本的な規則

UE4 でアニメートするために、スケルトン アセットについて基本的な以下の項目について知っておいてください。

* どのスケルタル メッシュも、関連する Skeleton アセットが必要となります。
* スケルタルメッシュのインポート中に新規に Skeleton アセットを作成するか、または既存の Skeleton  アセットを選択できます。
* スケルトンの最初の比率は、スケルトンを作成した元になるスケルタルメッシュによって定義されています。 [リターゲット](Engine/Animation/AnimationRetargeting) の際、これはとても重要なことです。
* アニメーションを共有するには、スケルタルメッシュは同じ Skeleton アセットを使用しなければなりません。
* 同じ Skeleton アセットを共有するには、スケルタルメッシュ内のボーン階層の名前の順序に違反していないことが必要です。以下の [スケルトンの再利用](#スケルトンの再利用) をご覧ください。

![](FBXImportOptions.png)
[REGION:caption]
スケルタル メッシュのインポート時、既存の Skeleton アセットを使用するか、インポートしたメッシュに対して新規作成するかのオプションが表示されます。
[/REGION]

## スケルトンの再利用

Skeleton アセットの重要な機能は、単一の Skeleton アセットを複数のスケルタル メッシュで使用できることです。とりわけ、それぞれのボーン階層が同一である必要さえありません。ただし、それらは同じ一般構造を持つ必要があります。最も重要なのは、あるスケルタルメッシュから別のスケルタルメッシュへのボーン階層は違反することはできません。

つまり、ボーンの名前と順序は一致しなければなりません。_1_、 _2_、 _3_ という名前の 3 ボーンのリムを考えて見ましょう。


[REGION:raw]
![](ExampleBoneHierarchy.png)(w:600)
[/REGION]


同じSkeleton アセットを使用するつもりの 2 つ目のスケルタル メッシュがあれば、これらのボーンを同じ順番に保つ必要がありますが、階層の周辺にあるボーンを追加することができます。例えば、新規階層はこのように見えます。

[REGION:raw]
![](PeripheralBones.png)(w:600)
[/REGION]

しかし、階層の並び替えはできません。例えば、これは有効ではありません。

[REGION:raw]
![](ReorderedBones.png)(w:600)
[/REGION]

### 追加のリム

階層の周辺にあるボーンの追加は有効なので、追加部分のあるスケルタル メッシュ間で Skeleton アセットを簡単に再利用できます。例えば、異なるけれどもよく似ている 3 種類のキャラクター間でアニメーションを共有したいとします。基本的には全て同じボーン構造 (同じボーン名) を持っています。ただし、以下のような重要な違いがあります。

* 人間の男性 (この例では、これが基本のキャラクターとなります)
* ポニーテール用のボーンをもつ人間の女性
* 4 本の腕を持つ人間の形をしたキャラクター

同じ Skeleton アセットをこれら全てのキャラクターに使用することができます。その結果、Skeleton アセットは 3 種類全てのタイプのジョイント階層情報を含むことになります。アニメーションは Skeleton アセットを使って、各ボーンに適用する回転を決定します。スケルタルメッシュは基本となるボーン階層が同じになるように作成されるので、 3 種類の間でアニメーションは完全に機能します。唯一の違いは、これらのキャラクターについている余分な腕やポニーテールを操作するために特別なアニメーションが必要になるということです。

スケルタル メッシュに含まれないボーンに対してアニメーション データを受け取るたびに (例えば、ポニーテール アニメーションが同じスケルトン アセットを使用しているが、ポニーテールのないキャラクターに使用された場合)、そのアニメーション データは無視されます。

このシステムのパフォーマンス オーバーヘッドはほとんどありません。制作の観点から考えると、一般的には、類似のボーン階層をもったスケルタル メッシュ間でのみ Skeleton アセットを共有するのが良いでしょう。




