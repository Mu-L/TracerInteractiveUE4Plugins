Availability: Public
Title: Sound Cue Reference
Crumbs: %ROOT%, Engine, Engine/Audio
Description:Reference describing the nodes available for use in SoundCues and their properties.
version: 4.9
Parent:Engine/Audio
type:reference
order:6

[TOC (start:2)]


The Unreal Engine provides various sound nodes whose properties can be modified to create interesting and complex Sound Cues in the **Sound Cue Editor**. You can find these sound nodes in the **Palette** panel.

![Sound node list](SoundCueEditor_NodeList.png)

This page describes the sound nodes available for use, along with their properties.

For more information about the **Sound Cue Editor**, see [](Engine/Audio\SoundCues\Editor). For more information about the **Sound Cue Editor** UI, see [](Engine/Audio\SoundCues\Editor\Interface).

[REGION:tip]
For some nodes, you can add additional inputs by **Right-clicking** the node and then clicking **Add Input**.
[/REGION]

## Attenuation Node

The **Attenuation** node is used to control spatialization, attenuation, and radii properties.

[REGION:note]
If you want to override the Sound Cue's attenuation settings by using the Attenuation node, the Attenuation node's **Override Attenuation** check box must be set to True in the **Sound Cue Editor**, and the Sound Cue asset's **Override Attenuation** check box must be set to False in the Level Editor's **Details** panel.
[/REGION]

![Attenuation Node](SoundCueEditor_Attenuation.png)

| Property | Description |
| --- | --- |
| [REGION:tablesection]Attenuation[/REGION] ||
| **Attenuation Settings** | The attenuation settings copied from a Sound Attenuation asset. Use this property if you want to use pre-existing attenuation settings. |
| **Attenuate** | If true, fades the input sound out over distance. |
| **Spatialize** | If true, positions the input sound in 3D space. |
| **Distance Algorithm** | The interpolation method to use when attenuating the input sound. See [Distance Model Attenuation Curves](Engine/Audio/DistanceModelAttenuation) for descriptions of the various types of distance algorithms. |
| **Attenuation Shape** | The shape of the attenuation area from a drop-down list. |
| **Radius** | The attenuation radius. |
| **Falloff Distance** | The falloff distance for the attenuation. |
| **Non-Spatialized Radius** | The distance from the sound's origin where the sound source is treated as spatialized. |
| **Attenuate With LPF** | If true, enables attenuation via low pass filter (LPF). |
| **LPFRadius Min** | The distance from the sound's origin where the low pass filter should begin to be applied. |
| **LPFRadius Max** | The distance from the sound's origin where the maximum amount of low pass filter should be applied. |
| **Override Attenuation** | If true, overrides existing attenuation settings. |


Stereo files play evenly on the Left and Right channels and attenuate allowing volume fades between the **Radius Min** and **Radius Max** values, but they are not spatialized. Sound Cues that do not contain the Attenuation node are not localized and play consistently at the Sound Cue volume setting.

## Branch Node

The **Branch** node selects a child node based on the value of a Boolean parameter.

![Branch Node](SoundCueEditor_Branch.png)

| Property | Description |
| -------- | ----------- |
| [REGION:tablesection]Sound Node Branch[/REGION] ||
| **Bool Parameter Name** | The name of the Boolean parameter used to determine which child node is used. |


## Concatenator Node

The **Concatenator** node is used to play sounds sequentially (e.g. creating a simple BGM playlist that plays through a series of specified tracks). While this node handles sequential playback, it does not blend from one sound asset to the next. 

![Concatenator Node](concatenator_node.png)

| Property | Description |
| -------- | ----------- |
| [REGION:tablesection]Sound Node Concatenator[/REGION] ||
| **Input Volume** | Allows for individual volume settings for each sound asset attached to the Concatenator. |

## Continuous Modulator Node

The **Continuous Modulator** node allows gameplay parameters to control volume and pitch modulation in real time. A typical example is using the velocity of a vehicle to correspond to the pitch of an engine sound. This modulator needs to be hooked up in code for desired purposes and does not function on its own within the Sound Cue Editor.

[REGION:note]
The pitch and volume of the input sound default to a uniform distribution, but you can change them in the Sound Cue Editor to any other type.
[/REGION]

![Continuous Modulator Node](SoundCueEditor_ContinuousModulation.png)

| Property | Description |
| -------- | ----------- |
| [REGION:tablesection]Sound Node Modulator Continuous[/REGION] ||
| [REGION:tablesection]Pitch Modulation Params[/REGION] ||
| **Parameter Name** | The parameter being used to manipulate pitch. |
| **Default** | The default level of pitch modulation. |
| **Min Input** | The minimum pitch for the input sound. |
| **Max Input** | The maximum pitch for the input sound. |
| **Min Output** | The minimum pitch for the output sound. |
| **Max Output** | The minimum pitch for the output sound. |
| **Param Mode** | [INCLUDE:Engine/Audio/SoundCues/NodeReference/#ParamMode] |
| [REGION:tablesection]Volume Modulation Params[/REGION] ||
| **Parameter Name** | The parameter being used to manipulate volume. |
| **Default** | The default level of volume modulation. |
| **Min Input** | The minimum volume for the input sound. |
| **Max Input** | The maximum volume for the input sound. |
| **Min Output** | The minimum volume for the output sound. |
| **Max Output** | The minimum volume for the output sound. |
| **Param Mode** | [INCLUDE:Engine/Audio/SoundCues/NodeReference/#ParamMode] |

[REGION:note]
Min and Max fields are provided for randomization. 
[/REGION]


[COMMENT:none]
-
[EXCERPT:ParamMode]
The mode with which the parameter is applied: 
* **MPM_Normal** - Clamps input value to the range (MinInput, MaxInput) then maps to the range (MinOutput, MaxOutput). 
* **MPM_Abs** - Same as MPM_Normal, except that the input value is treated as an absolute value.
* **MPM_Direct** - Uses the input value directly, without scaling or reference to Min or Max input or output values.
[/EXCERPT:ParamMode]
-
[/COMMENT]



## Crossfade by Distance Node

The **Crossfade by Distance** node provides the ability to fade between two or more input sounds based on the distance from the Sound Cue's origin. By default, there are two inputs on this node, but you can add more inputs by **Right-clicking** on the Crossfade by Distance node and clicking **Add Input** on the context menu. Sound nodes can be connected directly to the Crossfade by Distance node inputs but you can also add nodes between them for independent control per layer.

![Crossfade by Distance Node](SoundCueEditor_CrossfadeDistance.png)

| Property | Description |
| -------- | ----------- |
| [REGION:tablesection]Sound Node Distance Cross Fade[/REGION] ||
| [REGION:tablesection]Cross Fade Input[/REGION] ||
| **Fade in Distance Start** | The distance from the listener's position at which the sound begins to be audible. |
| **Fade in Distance End** | The distance from the listener's position at which the sound has reached full volume. |
| **Fade Out Distance Start** | The distance from the listener's position at which the sound begins to fade out. |
| **Fade Out Distance End** | The distance from the listener's position at which the sound is no longer audible. |




## Crossfade by Param Node

The **Crossfade by Param** node works similarly to the Crossfade by Distance node, except that the Crossfade by Param node allows you to manipulate the value of the parameter that controls the crossfade programmatically, with code or Blueprints.

![Crossfade by Param Node](SoundCueEditor_CrossfadeParam.png)

| Property | Description |
| -------- | ----------- |
| [REGION:tablesection]Cross Fade[/REGION] ||
| **Param Name** | The name of the parameter used to control the crossfade. |
| [REGION:tablesection]Sound Node Distance Cross Fade[/REGION] ||
| [REGION:tablesection]Cross Fade Input[/REGION] ||
| **Fade in Distance Start** | The distance from the listener's position at which the sound begins to be audible. |
| **Fade in Distance End** | The distance from the listener's position at which the sound has reached full volume. |
| **Fade Out Distance Start** | The distance from the listener's position at which the sound begins to fade out. |
| **Fade Out Distance End** | The distance from the listener's position at which the sound is no longer audible. |


## Delay Node

The **Delay** node inserts a delay into the audio node chain to cause a pause before the input sound is passed to the output. The amount of the delay is a random value between the **Delay Min** and **Delay Max** values specified in the **Details** panel.

![Delay Node](SoundCueEditor_Delay.png)

| Property | Description |
| -------- | ----------- |
| [REGION:tablesection]Delay[/REGION] ||
| **Delay Min** | Sets the minimum amount of time the Delay node should pause for. |
| **Delay Max** | Sets the maximum amount of time the Delay node should pause for. |


## DialoguePlayer Node

The **DialoguePlayer** node sets up a Dialogue Wave sound asset to be played under specific conditions. Since Dialogue Waves are expected to be used purely for spoken dialogue, the DialoguePlayer node requires the user to specify both the speaker and the targets of the dialogue being played. This allows the Dialogue Wave to play the correct piece of audio according to the speaker's voice and any gender/plural/honorific handling that needs to occur for localization purposes.

![DialoguePlayer Node](SoundCueEditor_DialoguePlayer.png)

| Property | Description |
| -------- | ----------- |
| [REGION:tablesection]Dialogue Player[/REGION] ||
| **Dialogue Wave** | The Dialogue Wave that the node will play. |
| **Context** | Who is speaking, and to whom. |
| **Looping** | If true, plays the dialogue on a loop. |

## Doppler Node

The **Doppler** node simulates the Doppler effect, in which sounds increase in pitch as you approach them at speed and decrease as you move away. You can hear this in the real world as you listen to a siren from an emergency vehicle as it drives past you.

![Doppler Node](SoundCueEditor_Doppler.png)

| Property | Description |
| -------- | ----------- |
| [REGION:tablesection]Doppler[/REGION] ||
| **Doppler Intensity** | A multiplier value for how strongly the Doppler effect is heard. Increase this to make the effect more pronounced. |

## Enveloper Node

The **Enveloper** node allows you to create an envelope with optional looping ability to control the volume and pitch of a sound over time via distribution curves. These curves can either be edited using the small embedded Curve Editors or be based on curves defined in an existing Float Curve asset in the **Content Browser**.

[REGION:note]
You can use the properties in the **Modulation** category to randomize predefined values across all defined points on the envelope.
[/REGION]

![Enveloper Node](SoundCueEditor_Enveloper.png)

| Property | Description |
| -------- | ----------- |
| [REGION:tablesection]Looping[/REGION] ||
| **Loop Start** | The time in seconds where the envelope's loop begins. |
| **Loop End** | The time in seconds where the envelope's loop ends. |
| **Duration After Loop** | The time in seconds it takes the envelope to fade out after the last loop is completed. |
| **Loop Count** | The number of times the envelope should loop if looping is enabled and the envelope is not set to loop indefinitely. |
| **Loop Indefinitely** | If enabled, the envelope will continue to loop indefinitely regardless of the Loop Count value. |
| **Loop** | If enabled, the envelope will loop using the loop settings. |
| [REGION:tablesection]Envelope[/REGION] ||
| **Volume Curve** | The distribution defining the volume envelope.  |
| **Pitch Curve** | The distribution defining the pitch envelope. |
| [REGION:tablesection]Modulation [/REGION] ||
| **Pitch Min** | The minimum pitch for the input sound. |
| **Pitch Max** | The maximum pitch for the input sound. |
| **Volume Min** | The minimum volume for the input sound. |
| **Volume Max** | The maximum volume for the input sound. |


[REGION:note]
The **Details** panel of the Enveloper node contains various options for creating envelope curves.

![](Engine/Audio\SoundCues\NodeReference\SoundCueEditor_Curve.png)

1. **Curve Editor** - You can use the Curve Editor to define the curves manually.
1. **Float Curve picker** - You can select an existing Float Curve asset to define the curves.
1. **Create External Curve button** - If you create your own curve manually, you can then save it as a Float Curve asset to be reused elsewhere.

For more information about working with Curve Editors, see [](Engine/UI/CurveEditor).

[/REGION]

## Group Control Node

The **Group Control** node determines which Sound Wave to play, depending on what sounds in the defined groups are already playing and their proximity to the listener. 


![Group Control Node](SoundCueEditor_GroupControl.png)

| Property | Description |
| -------- | ----------- |
| [REGION:tablesection]Sound Node Group Control[/REGION] ||
| **Group Sizes** | The number of Sound Wave nodes in the group, minus 1 (the first Sound Wave Node is node "0").|

[COMMENT:none]
 get more info here 
[/COMMENT]


## Looping Node

The **Looping** node is used to set a Sound Wave to looping. You can loop multiple audio files independently when used in conjunction with the Mixer node.

![Looping Node](SoundCueEditor_LoopingNode.png)

[REGION:warning]
The Looping node should only be used for logical or procedural looping such as introducing a delay. These sounds will not be played seamlessly. If you want a sound to loop seamlessly and indefinitely, use the Looping flag on the Wave Player node for that sound.
[/REGION]

## Mature Node

The **Mature** node enables you to label a specific node or Sound Cue as containing content that would be labeled "Mature" by the ESRB rating system. You can use this node to filter out Mature-rated content in certain versions of your game.

![Mature Node](SoundCueEditor_Mature.png)

## Mixer Node

The **Mixer** node is used to trigger multiple Sound Wave nodes simultaneously. Sound nodes can be connected directly to the Mixer node inputs, but you can also add nodes between them for independent control per layer.


![Mixer Node](SoundCueEditor_Mixer.png)

| Property | Description |
| -------- | ----------- |
| [REGION:tablesection]Sound Node Mixer[/REGION] ||
| **Input Volume** | The list of volumes to use for each of the input sounds, allowing normalization for sounds with different source volumes. |

## Modulator Node

The **Modulator** node is used to add random volume and pitch modulation. Each has a Max and Min value to determine the range of randomization. When the Sound Cue is triggered, it randomly selects a value within that range. You can use the Modulator node to adjust Volume + Pitch consistently by setting the Min and Max to the same values. It can also be used to adjust relative volumes of multiple Sound Wave nodes contained within a Sound Cue. If the Modulator node is used in conjunction with the Looping node, it will randomly select upon Sound Cue retrigger not per loop revolution.

![Modulator Node](SoundCueEditor_Modulator.png)

| Property | Description |
| -------- | ----------- |
| [REGION:tablesection]Modulation[/REGION] ||
| **Pitch Min** | Sets the minimum pitch for the input sound. |
| **Pitch Max** | Sets the maximum pitch for the input sound. |
| **Volume Min** | Sets the minimum volume for the input sound. |
| **Volume Max** | Sets the maximum volume for the input sound. |


## Oscillator Node

The **Oscillator** node is used to add continuous pitch and volume oscillation over time. This is mostly useful on looping sounds to create a greater degree of ongoing movement.

![Oscillator Node](SoundCueEditor_Oscillator.png)

| Property | Description |
| -------- | ----------- |
| [REGION:tablesection]Oscillator[/REGION] ||
| **Modulate Volume** | If _true_, volume modulation is enabled. |
| **Modulate Pitch** | If _true_, pitch modulation is enabled. |
| **Amplitude Min** | The minimum amplitude of the sine wave's modulation, centered around the value 1. |
| **Amplitude Max** | The maximum amplitude of the sine wave's modulation, centered around the value 1. |
| **Frequency Min** | The minimum frequency of the sine wave's modulation, with the value divided by two to equal to the hertz rate. |
| **Frequency Max** | The maximum frequency of the sine wave's modulation, with the value divided by two to equal to the hertz rate.  |
| **Offset Min** | The minimum offset value into the sine wave; commonly called phase.  Any value here will be multiplied by 2*Pi. |
| **Offset Max** | The maximum offset value into the sine wave; commonly called phase.  Any value here will be multiplied by 2*Pi. |
| **Center Min** | The minimum value around which the center oscillates. |
| **Center Max** | The maximum value around which the center oscillates. |

[REGION:note]
Min and Max fields are provided for randomization. 
[/REGION]


## Random Node

The **Random** node is used to randomly trigger a Sound Wave node from within a group of possible Sound Wave nodes. Weight controls the probability a Sound Wave node will be triggered relative to other Sound Waves nodes in the Sound Cue. The check box **RandomWithoutReplacement** will exhaust the entire list of possible sound nodes before repetition. Inputs are added for each audio file by **Right-clicking** on the Random node and selecting **Add Input**. Sound Wave nodes can be connected directly to a Random node, but you can also add nodes between them for additional control.


![Random Node](SoundCueEditor_Random.png)

| Property | Description |
| -------- | ----------- |
| [REGION:tablesection]Sound Node Random[/REGION] ||
| **Weights** | The list of weights for each input sound determining the odds that a particular sound will be chosen. |
| **Preselect at Level Load** | A random Sound Wave node, selected when the level is loaded, that is always used during that play session. Note that this setting does not apply during Play In Editor or Simulate; it applies only in game builds outside the Unreal Editor. |
| **Randomize Without Replacement** | If true, prevents an input Sound Wave node from being played again until all input Sound Wave nodes have been played. This ensures that all sounds are played before any are repeated. |

[COMMENT:none]
 get more info 
[/COMMENT]

## SoundClass Node

The **SoundClass** node allows you to remap which Sound Class asset you are using with the Sound Wave input node.

![SoundClass Node](SoundCueEditor_SoundClass.png)

| Property | Description |
| -------- | ----------- |
| [REGION:tablesection]Sound Class[/REGION] ||
| **Sound Class Override** | The Sound Class asset that will override the current Sound Class for the Sound Wave input node. |


[COMMENT:none]
 get more info 
[/COMMENT]


## Switch Node

The **Switch** node selects an input node based on the value of an integer parameter.

![Switch Node](SoundCueEditor_Switch.png)

| Property | Description |
| -------- | ----------- |
| [REGION:tablesection]Sound Node Switch[/REGION] ||
| **Int Parameter Name** | The name of the integer parameter used to determine which input is used. |

[COMMENT:none]
 get more info 
[/COMMENT]



## Wave Param Node

The **Wave Param** node takes a runtime parameter to determine whether to play a different Sound Wave than the one feeding into the input pin. If the specified parameter name is set to a valid Sound Wave asset, that Sound Wave asset is played instead of the Sound Wave input node. 



[REGION:note]
You can set the parameter either in code or in Blueprints.
[/REGION]

![Wave Param Node](SoundCueEditor_WaveParam.png)

| Property | Description |
| -------- | ----------- |
| [REGION:tablesection]Sound Node Wave Param[/REGION] ||
| **Wave Parameter Name** | The parameter used to determine which Sound Wave to play.  If the parameter does not exist or points at an invalid Sound Wave, then the Sound Wave specified by the tree connected to the input node is evaluated to determine which Sound Wave(s) to play instead. |

[COMMENT:none]
 get more info 
[/COMMENT]



## Wave Player Node

The **Wave Player** node contains a Sound Wave asset from the **Content Browser**.

![](SoundCueEditor_WavePlayer.png)

| Property | Description |
| -------- | ----------- |
| [REGION:tablesection]Wave Player[/REGION] ||
| **Sound Wave** | The Sound Wave asset to use in this node. |
| [INCLUDE:Engine/Audio/SoundCues/NodeReference/#TableSpacing] **Looping** | If true, plays the Sound Wave on a loop. | 


[EXCERPT:TableSpacing]
<*> 
[/EXCERPT:TableSpacing]

## Examples

Below are examples of more complex Sound Cue arrangements:

![Example 1](SoundCueEditor_Example1.png)(w:900)

This Sound Cue mixes together Sound Waves with a variety of properties, including attenuation, randomization, looping, and delays.

![Example 2](SoundCueEditor_Example2.png)(w:900)

This Sound Cue changes the Sound Classes of the Sound Waves.

![Example 3](SoundCueEditor_Example3.png)(w:900)

This Sound Cue plays one sound if a parameter is set to True, and another if it is set to False.


