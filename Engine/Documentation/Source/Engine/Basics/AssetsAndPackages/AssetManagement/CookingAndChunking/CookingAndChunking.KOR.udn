INTSourceChangelist:3717095
Availability:Public
Crumbs: %ROOT%
Title: 쿠킹과 청킹
Description: 콘텐츠 쿠킹 및 배포용 .pak 파일을 만드는 방법입니다.
Type: Overview
SkillLevel: Intermediate
Version: 4.17
Parent: Engine/Basics/AssetsAndPackages/AssetManagement
Order: 0
Tags: Assets
Tags: Asset Management
Tags: Cooking
Tags: Chunking
Related: Engine/Basics/AssetsAndPackages/AssetManagement

[TOC (start:2 end:3)]

에디터 이외 플랫폼에서 릴리즈 또는 테스트용으로 게임을 쿠킹할 때, **Chunking** (청킹)을 사용하여 데이터를 다수의 .pak 파일로 분할한 뒤 독립적으로 디플로이할 수 있습니다. 청킹 기능은 애셋 매니저에 통합되어, **Primary Asset Labels** (프라이머리 애셋 라벨) 또는 **Rules Overrides** (룰 오버라이드)로 셋업할 수 있습니다. 청킹의 가장 좋은 예는 ShooterGame 샘플 프로젝트에서 찾을 수 있습니다. ShooterGame 은 세 개의 청크를 만듭니다. 청크 1 은 "Sanctuary" 맵, 청크 2 는 "Highrise" 맵, 청크 0 은 그 외 모든 데이터가 들어갑니다. [ShooterGame](Resources/SampleGames/ShooterGame) 의 경우, 프라이머리 애셋 라벨을 선택했는데, 여기서는 두 메소드 다 살펴보도록 하겠습니다.

## 프라이머리 애셋 규칙

**Primary Asset Rules** (프라이머리 애셋 규칙)은 어느 프라이머리 애셋이 어느 세컨데리 애셋에 대한 관리 전권이 있는지와 아울러, 쿠킹 프로세스 도중 애셋 처리 방식을 결정하는 데도 사용됩니다. 이러한 규칙은 `FPrimaryAssetRules` 구조체로 정의되며, [애셋 매니저](Engine\Basics\AssetsAndPackages\AssetManagement) 에서 쿠킹 시간에 애셋 처리 방법을 결정하는 데 사용됩니다. `FPrimaryAssetRules` 에서 사용할 수 있는 옵션 관련 상세 정보는, 해당 [API Page](API:FPrimaryAssetRules) 를 참고하세요. [`EPrimaryAssetCookRule` API Page](API:EPrimaryAssetCookRule) 에 정의된 Cooking Rules 를 찾아보는 것도 좋습니다.

## 프라이머리 애셋 라벨

**Primary Asset Label** (프라이머리 애셋 라벨)은 `UPrimaryDataAsset` 최소 오버라이드이며, 이를 구성하여 청킹 및 쿠킹을 위한 다른 애셋을 지정하는 데 사용합니다. 보통 게임 도중 로드되지는 않지만, 쿠킹 및 청킹을 할 때 사용되며, 별도의 규칙, 목록, 기타 프로젝트 애셋에 대한 우선권을 구성할 수 있습니다. ShooterGame 의 경우, 라벨을 만들어 여러 청크에 들어가는 애셋을 지정하였습니다.

![](HighriseLabel.png)

[REGION:caption]이 "HighriseLabel" 라는 프라이머리 애셋 라벨은 게임의 "Highrise" 맵 애셋을 명시적으로 관리하며, 청크 2 에 속한다는 것을 나타냅니다.[/REGION]

이 시점에서, "Highrise" 에 대한 애셋은 별도의 Primary Asset ID (프라이머리 애셋 ID) "Map:/Game/Maps/Highrise" 는 물론, "HighriseLabel" 의 프라이머리 애셋 ID "PrimaryAssetLabel:HighriseLabel" 도 할당되어 있습니다. 맵에는 별도의 청크 ID 가 없기때문에, 청킹 프로세스는 "HighriseLabel" 에서 찾은 청크 ID, 즉 2 를 사용할 것입니다. 추가로 맵의 모든 Secondary Assets (세컨데리 애셋)은 청크 2 에 할당됩니다. "Sanctuary" 맵과 청크 1 에 대해서도 비슷한 구성을 해줘야 할 것입니다. 청크 ID 가 (음수이거나) 없는 애셋은 기본 .pak 파일이자, 프로젝트의 스타트업 맵인 "ShooterEntry" 가 저장되는 Chunk 0 으로 갑니다. 다수의 프라이머리 애셋 라벨에 레퍼런싱된 세컨데리 애셋은 그 라벨 중 우선권이 가장 높은 것에 할당됩니다. 다수의 라벨이 최고 우선권으로 묶여있는 경우, 애셋은 각 라벨에 할당됩니다.

![](ReferenceViewer.png)

[REGION:caption]레퍼런스 뷰어에 프라이머리 애셋 라벨과 레벨 맵 사이 관리 관계가 표시됩니다.[/REGION]

![](Management.png)

[REGION:caption]"Map:/Game/Maps/Highrise" 에 더블클릭하면 "PrimaryAssetLabel:HighriseLabel" 에 관리된다고 나옵니다. [/REGION]

## 룰 오버라이드

**Rules Overrides** (룰 오버라이드)는 특정 프라이머리 애셋에 대한 우선권과 청크 세팅을 수립하는 데 사용됩니다. ShooterGame 의 3 청크 구성을 만드는 데 프라이머리 애셋 라벨 대신 룰 오버라이드를 사용하려면, `DefaultGame.ini` 에 다음과 같은 섹션을 만들어야 합니다:

	[/Script/Engine.AssetManagerSettings]
	+PrimaryAssetRules=(PrimaryAssetId="Map:/Game/Maps/Sanctuary",Rules=(Priority=-1,ChunkId=1,CookRule=Unknown))
	+PrimaryAssetRules=(PrimaryAssetId="Map:/Game/Maps/Highrise",Rules=(Priority=-1,ChunkId=2,CookRule=Unknown))
	+PrimaryAssetRules=(PrimaryAssetId="Map:/Game/Maps/ShooterEntry",Rules=(Priority=-1,ChunkId=0,CookRule=AlwaysCook))

[REGION:caption]`DefaultGame.ini` 파일의 쿠킹 및 청킹 규칙입니다. 이 예제에서는 스타트업 맵인 "ShooterEntry" 에 명시적 레퍼런스를 추가했습니다.[/REGION]

이렇게 하면 메인 게임 맵이 특정 청크에 있도록 하여, 그 레퍼런스 전부가 해당 청크에도 추가되도록 만듭니다. 청크 0 을 관장하는 최종 항목은, 게임 첫 시작 시 로드되는 맵에 레퍼런싱되는 것들이 기본 청크이기도 한 청크 0 에 들어가도록 해줍니다. 우선권 값이 -1 이면 우선권을 기본값인 1 로 설정합니다.