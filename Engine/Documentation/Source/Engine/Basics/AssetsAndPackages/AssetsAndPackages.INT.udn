Availability:Public
Crumbs: %ROOT%
Title: Assets and Packages
Description:Overview of the asset and package system used in Unreal Engine 4.
Type: Overview
SkillLevel: Beginner
Version: 4.17
Parent:Engine
order:22
tags: Assets
topic-image:Engine/Content/content_topic.png
Related: Resources/SampleGames/ShooterGame
Related: Engine/Basics/AssetsAndPackages/AssetManagement
Related: Engine/Basics/AssetsAndPackages/AssetManagement/CookingAndChunking

[TOC (start:2 end:3)]

An **Asset** is a piece of content for an **Unreal Engine** project, and can be thought of as a `UObject` serialized to a file. You can find a list of Assets in the **Asset Tree** within the **Content Browser**. This list can be expanded or collapsed by clicking its button (![Asset Tree button](AssetTree_button.png)).

* The **Asset Tree** displays a list of folders in your content directories where .uasset files reside.
* Clicking on a folder in the **Asset Tree** shows you all the Assets found in that folder and its subfolders.
* **Right-clicking** on a folder shows you a list of actions you can do to that folder and Assets in the folder or its subfolders. You can add new folders to the **Asset Tree** via this context menu.

[REGION:note]
You can no longer freely move Asset files between folders outside of the Unreal Editor and expect references to remain intact. Instead, you must move Assets from within the **Content Browser**. This is because references to Assets include the full directory path to the Asset. If you move an Asset, its path will change. 

Level (.umap) files are not affected by this restriction.
[/REGION]

For more information on using the **Content Browser** to move, rename, add, and delete Assets, see [](Engine/Content/Browser\UserGuide\BrowserAssetCreation).

## Asset Naming

When importing or creating an Asset, it is named by the user. The Asset's path is set automatically by the folder in which it is created or imported, which is directly associated with the Asset's location on disk. For example, a path of Content/Characters/MyCharacter would save to /UE4/MyProject/Content/Characters/MyCharacter.MyCharacter.uasset.

### Renaming and Moving Assets

An Asset can be renamed in the Editor by selecting it in the **Content Browser**, then left-clicking on its name or pressing the F2 key. Assets can be moved or copied to different folders by being selected and dragged in the **Content Browser**. When renamed or moved in this way, other Assets that refer to the renamed or moved Asset will be updated appropriately, and an invisible **Redirector** will be left in place of the original Asset. Redirectors can be cleaned up by right-clicking in the **Content Browser** and choosing the "Fix Up Redirectors in Folder" option. This will make all Assets that referenced a Redirector point to the Asset in its new location, then remove the Redirector. Note that the Assets will need to be resaved. Assets can also be deleted within the **Content Browser**, either by using the right-click menu on the Asset, or by selecting the Asset and pressing the Delete key. If an Asset is referenced by other Assets, there will be a menu asking which existing Asset (if any) should be used in place of the deleted one.

![](FixupRedirectors.png)

[REGION:caption]
Right-clicking on a folder or anywhere in the **Sources Panel** of the **Content Browser** provides access to the "Fix Up Redirectors in Folder" option.
[/REGION]

[REGION:note]
Moving or renaming Assets should be done in the **Content Browser**. If an Asset file is renamed, moved, or deleted outside of the Editor, such as via your operating system's file explorer, any Assets referencing the affected Asset will fail to find it, even if it still exists in the project.
[/REGION]

References to Assets contain the path in the reference, for example: Blueprint'/MyProject/Content/Characters/MyCharacter.MyCharacter'.

## Asset Management

Assets are generally loaded and unloaded automatically by Unreal Engine. However, there are cases where taking more direct control over the process can result in significant performance improvements, such as reduction or elimination of redundant load times, and removal of hitches during gameplay. For detailed information about managing Asset loading and unloading, see the [](Engine/Basics/AssetsAndPackages/AssetManagement) page. When deploying a project, Assets are "cooked" (converted to final, binary formats dependent on the Asset type and target platform) and can be separated into multiple .pak files for distribution. For information on these processes, see [](Engine/Basics/AssetsAndPackages/AssetManagement/CookingAndChunking).

## Minimizing Source Control Contention

When a workflow includes package files that each contain several Assets, source-control contention can be an issue. A workflow that instead supports and encourages creating many individual Asset files means that each Asset can be checked out individually. This reduces source-control contention and bottlenecks in workflow.

Additionally, sync time in content management systems is faster with individual Asset files than with packages containing multiple Assets, because a change to a single Asset requires only one file update.

In Unreal Editor, Assets are stored in .uasset files, each of which typically contains only a single Asset. Each Asset reference contains a directory-style path that uniquely identifies any Asset in the game.

Assets are created (or imported) in the **Content Browser**. For information about creating Assets, see [](Engine/Content/AssetCreation). For information about working with the **Content Browser**, see [](Engine/Content/Browser).

### Copying Assets to Other Projects

You can use the Migrate Tool in the **Content Browser** to create a copy of an Asset (and any dependent Assets) for use in another project.

For more information about the Migrate Tool, see [](Engine/Content/Browser\UserGuide\Migrate).

### Asset Packs

If you have downloaded Asset packs through the Launcher, you can add the entire contents of the pack to your project without needing to open it or migrate specific Assets.

To add an Asset pack to your project:

1. Find the Asset pack in your **Vault** which is located at the bottom of the **Learn** tab.
	
	![](Vault.png)

1. Click on **Add to Project**.

1. Select your project in the list that appears.
	
	[REGION:raw]
	![](SelectedProject.png)
	[/REGION]

1. Click on **Add to Project**.

The next time you open your project, all of the content will be there, inside a folder named after the Asset pack you added.
