Availability:Public
Title:Derived Data Cache
Crumbs:%ROOT%
Description: Overview of the Derived Data Cache and the storage of assets in formats used by UE4 and its target platforms. 
version: 4.17
Parent:Engine
skilllevel: Advanced
type:overview
order:24
tags:Programming

The **Derived Data Cache** (DDC) stores versions of Assets in the formats used by the Unreal Engine on its target platforms, as opposed to the source formats artists create that are imported into the Editor and stored in `.uasset` files. Content stored in the DDC is disposable in that it can always be regenerated at any time using the data stored in the `.uasset` file. Storing these derived formats externally makes it possible to easily add or change the formats used by the engine without needing to modify the source asset file.

## Using a Shared DDC

Studios should use a shared DDC that all users in a particular location can access. This way, only one person needs to build the derived Asset format(s) and they will be automatically available to all other users. There will occasionally be stalls when Assets need to be processed, but the results are stored and shared. Even on a fairly small team sharing Asset processing work in this way will eliminate most processing time.

[REGION:warning]
It is not advised to copy an entire DDC across the Internet, back up your DDC, or restore a DDC from a backup. This will not do any harm, but it is a waste of time, as it takes longer to transfer the amount of data stored in the DDC than it would to simply generate it from scratch locally.
[/REGION]

To set up a shared DDC, override the paths for the `[InstalledDerivedDataBackendGraph]` or `[DerivedDataBackendGraph]` (depending on whether you use the binary install from the Epic Games Launcher or compile from source) by declaring the following section in your game's `DefaultEngine.ini` file. This section is originally declared in the `BaseEngine.ini` where the paths are set to Epic's internal DDC share. Re-declare the section and change the paths to point to a share on your network.

* For Windows: (`Path=\\mystudio.net\DDC`)
* For Mac: (`Path=/Volumes/UE4DDC`)

%Globals:BinarySourceSelectVar%

[OBJECT:ToggleButtonContent]
    [PARAMLITERAL:category]
    BinarySourceSelect
    [/PARAMLITERAL]
    [PARAMLITERAL:id]
    binaryinstall
    [/PARAMLITERAL]
    [PARAMLITERAL:active]
    active_button_content
    [/PARAMLITERAL]
    [PARAM:content]
            [InstalledDerivedDataBackendGraph]
            MinimumDaysToKeepFile=7
            Root=(Type=KeyLength, Length=120, Inner=AsyncPut)
            AsyncPut=(Type=AsyncPut, Inner=Hierarchy)
            Hierarchy=(Type=Hierarchical, Inner=Boot, Inner=Pak, Inner=EnginePak, Inner=Local, Inner=Shared)
            Boot=(Type=Boot, Filename=\%GAMEDIR\%DerivedDataCache/Boot.ddc, MaxCacheSize=256)
            Local=(Type=FileSystem, ReadOnly=false, Clean=false, Flush=false, PurgeTransient=true, DeleteUnused=true, UnusedFileAge=17, FoldersToClean=-1, Path=../../../Engine/DerivedDataCache)
            Shared=(Type=FileSystem, ReadOnly=false, Clean=false, Flush=false, DeleteUnused=true, UnusedFileAge=19, FoldersToClean=-1, Path=\\mystudio.net\DDC, EnvPathOverride=UE-SharedDataCachePath)
            AltShared=(Type=FileSystem, ReadOnly=true, Clean=false, Flush=false, DeleteUnused=true, UnusedFileAge=19, FoldersToClean=-1, Path=\\mystudio.net\DDC2, EnvPathOverride=UE-SharedDataCachePath2)
            Pak=(Type=ReadPak, Filename=\%GAMEDIR\%DerivedDataCache/DDC.ddp)
            EnginePak=(Type=ReadPak, Filename=../../../Engine/DerivedDataCache/DDC.ddp)
    [/PARAM]
[/OBJECT]
[OBJECT:ToggleButtonContent]
    [PARAMLITERAL:category]
    BinarySourceSelect
    [/PARAMLITERAL]
    [PARAMLITERAL:id]
    sourceinstall
    [/PARAMLITERAL]
    [PARAMLITERAL:active]
    [/PARAMLITERAL]
    [PARAM:content]
            [DerivedDataBackendGraph]
            MinimumDaysToKeepFile=7
            Root=(Type=KeyLength, Length=120, Inner=AsyncPut)
            AsyncPut=(Type=AsyncPut, Inner=Hierarchy)
            Hierarchy=(Type=Hierarchical, Inner=Boot, Inner=Pak, Inner=EnginePak, Inner=Local, Inner=Shared)
            Boot=(Type=Boot, Filename=\%GAMEDIR\%DerivedDataCache/Boot.ddc, MaxCacheSize=256)
            Local=(Type=FileSystem, ReadOnly=false, Clean=false, Flush=false, PurgeTransient=true, DeleteUnused=true, UnusedFileAge=17, FoldersToClean=-1, Path=../../../Engine/DerivedDataCache)
            Shared=(Type=FileSystem, ReadOnly=false, Clean=false, Flush=false, DeleteUnused=true, UnusedFileAge=19, FoldersToClean=-1, Path=\\mystudio.net\DDC, EnvPathOverride=UE-SharedDataCachePath)
            AltShared=(Type=FileSystem, ReadOnly=true, Clean=false, Flush=false, DeleteUnused=true, UnusedFileAge=19, FoldersToClean=-1, Path=\\mystudio.net\DDC2, EnvPathOverride=UE-SharedDataCachePath2)
            Pak=(Type=ReadPak, Filename=\%GAMEDIR\%DerivedDataCache/DDC.ddp)
            EnginePak=(Type=ReadPak, Filename=../../../Engine/DerivedDataCache/DDC.ddp)
    [/PARAM]
[/OBJECT]

Satellite studios working out of a single shared code base can set the `UE-SharedDataCachePath` environment variable to a path that all users at each location can read and write to. This allows each location to have its own shared DDC.

For example:

    UE-SharedDataCachePath=\\mystudio.net\DDC

## Using a Local DDC

Lone developers or developers working remotely generally just use a local DDC. To tell the engine not to use a shared DDC, use one of the methods below:

* Pass `-ddc=noshared` on the command line.
* Set the environment variable to a local drive hard drive: 
    
        UE-SharedDataCachePath=c:\DDC


## Building Derived Data

[OBJECT:ToggleButtonContent]
[PARAMLITERAL:category]
OS
[/PARAMLITERAL]
[PARAMLITERAL:id]
windows
[/PARAMLITERAL]
[PARAMLITERAL:active]
[/PARAMLITERAL]
[PARAM:content]
The user who imports the Asset is the one who builds the derived data since they will most likely be using and testing that Asset in the Engine. However, there may be occasions when a new Asset needs to be processed. This happens automatically on an as-needed basis and should not result in much of an impact when running on fast hardware, though there may be occasional stalls.


You can fill your DDCs at any time by running the following command:
 
    UE4\Engine\Binaries\Win64\UE4Editor.exe ProjectName -run=DerivedDataCache -fill

[REGION:tip]
Epic Games does this on a nightly basis to ensure that the DDC is always primed, but it is not necessary as the general automatic caching feature should suffice.
[/REGION]

[/PARAM]
[/OBJECT]

[OBJECT:ToggleButtonContent]
[PARAMLITERAL:category]
OS
[/PARAMLITERAL]
[PARAMLITERAL:id]
mac
[/PARAMLITERAL]
[PARAMLITERAL:active]
[/PARAMLITERAL]
[PARAM:content]
The user who imports the Asset is the one who builds the derived data since they will most likely be using and testing that Asset in the Engine. However, there may be occasions when a new Asset needs to be processed. This happens automatically on an as-needed basis and should not result in much of an impact when running fast hardware, though there may be occasional stalls.


You can fill your DDCs at any time by running the following command:
 
    open -a "ProjectName.app" --args -run=DerivedDataCache -fill

Epic Games does this on a nightly basis to ensure that the DDC is always primed, but it is not necessary as the general automatic caching feature should suffice.

[/PARAM]
[/OBJECT]

## Mounting Your DDC Folder

For the DDC to be used over your internal network, the folder which contains the DDC must be mounted to a Network drive. If you are unfamiliar with how to do this, check out the following link for more information:

*[Map A Network Drive on Windows](https://support.microsoft.com/en-us/help/4026635/windows-map-a-network-drive)


## Distributing with a DDC
 

[OBJECT:ToggleButtonContent]
[PARAMLITERAL:category]
OS
[/PARAMLITERAL]
[PARAMLITERAL:id]
windows
[/PARAMLITERAL]
[PARAMLITERAL:active]
[/PARAMLITERAL]
[PARAM:content]
Cooking is the preferred method for packaging games since cooked builds do not need (or use) a DDC. However, DDCs can be packaged for distribution if the need arises.

**To package a DDC:**
 
1. Run `UE4Editor.exe` from the `UE4/Engine/Binaries/Win64` directory, passing the arguments shown below:

        UE4Editor.exe ProjectName -run=DerivedDataCache -fill -DDC=CreatePak
 
1. This creates a `DDC.ddp` file in the `UE4\ProjectName\DerivedDataCache` directory.

1. The engine automatically detects and uses the `.ddp` file.
[/PARAM]
[/OBJECT]

[OBJECT:ToggleButtonContent]
[PARAMLITERAL:category]
OS
[/PARAMLITERAL]
[PARAMLITERAL:id]
mac
[/PARAMLITERAL]
[PARAMLITERAL:active]
[/PARAMLITERAL]
[PARAM:content]
Cooking is the preferred method for packaging games since cooked builds do not need (or use) a DDC. However, DDCs can be packaged for distribution if the need arises.

**To package a DDC:**
 
1. Run ` UE4Editor.app` from the `cd /PathToUE4/Engine/Binaries/Mac` directory, passing the arguments shown below:

       `open -a UE4Editor.app --args -run=DerivedDataCache -fill -DDC=CreatePak`
 
1. This creates a `DDC.ddp` file in the `UE4\ProjectName\DerivedDataCache` directory.

1. The engine automatically detects and uses the `.ddp` file.
[/PARAM]
[/OBJECT]
