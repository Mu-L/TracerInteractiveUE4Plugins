Availability: Public
Title:Taking Screenshots
Crumbs:%ROOT%, Engine
Description:Guide to taking in-game screenshots of environments and gameplay.
version: 4.9
Parent:Engine
type:overview
order:28
topic-image:TakingScreenshots_Topic.png

[TOC (start:2 end:3)]

Unreal Engine 4 (UE4) offers users a multitude of different ways of taking in-game screenshots of your project. 
This document will not only cover which tools are available for taking screenshots in UE4 but also how you can use the tools. 


## Default Save Location
By default any screenshots will be saved to the following location in your project folder.

**Saved\Screenshots\Windows**

When you do take a screenshot, the following message will be displayed in the lower Right - Hand corner of the screen. 

![](HRSS_Save_Location.png)

If you click on that message the folder with the Screenshots will be displayed for you. 

## Standard Screen Shot

The standard screenshot feature is accessed via a console command called **Shot** (default key binding is **F9**). 
It can generate screenshots at the size of the screen resolution (or window resolution if the game is running in windowed mode).

## High Resolution Shot

The high resolution screenshot console command is a great cross-platform tool for taking very high resolution screenshots. 
It can be used to generate screenshots of any size that are based off of the screen resolution (or window resolution if the game is running in window mode). 
The high resolution screenshot console command does this by rendering the game frame multiple times, one tile at a time at full resolution and concatenating all tiles into a single image file. 

The default behavior is to take a screenshot with a resolution 4 times greater than the game resolution and create an image file in the Screenshot folder. 
When running the game through the editor (PIE) or as standalone, open the command console by hitting **~** (_tilde_) and type:

    HighResShot
    

### Parameters

The HighResShot console command takes an optional parameter that can be either an integer number that is a multiplier of the current game's resolution or a 'WxH' value that sets width and height resolution explicitly.

Typing the following will take a screenshot that is twice as big as the screen resolution:
    
    HighResShot 2
    
Similarly, the command below will take a screenshot at 3840 wide by 2160 high:

    HighResShot 3840x2160
    
## High Resolution Screenshot Tool

![](HRSS_The_Tool.png)

The High Resolution Screenshot Tool (HRSST) allows you to specify a specific region of your viewport to take a screenshot with. It also gives you the ability to adjust the size of the Screenshot you are going to take as well as output the results of the GBuffer. 

### Accessing the High Resolution Screenshot Tool 
You can access the HRSST by first clicking on the **View Port Options** and then selecting the **High Resolution Screenshot** option. 

![](HRSS_Opening_HRST.png)

Once you have selected the **High Resolution Screenshot**, the HRSST will be displayed on screen.

![](HRSS_HRSST.png)

[region:note]
You can move the HRSST anywhere you want to in side of UE4. However be careful as sometime the HRSST can become hidden by other floating windows like the **Content Browser**. 
[/region]


| Number| Description|
|-----------|-----------|
| 1: | The higher you set this number the bigger your Screenshot will be.|
| 2: | This will include each pass in the GBuffer as an image that gets exported.|
| 3: | This will write all exported images into .EXR format. This enables full 16 bit color depth (HDR) export of all of available intermediate rendering stages.|
| 4: | This will allow you to only capture certain objects in the scene. To use this feature, you first need to select any mesh in the scene that you want to capture and then enable **Render Custom Depth**. Once that has been enabled and **Use custom depth as mask** has been enabled, all you should see now is a green screen with whatever objects you enabled **Render Custom Depth** on. |
| 5: | This allows you to specify a region within the viewport that you wish to capture. You define a region by first clicking on the tool and draw a region to capture by holding down the **Left Mouse Button** and dragging in the Editor viewport.|
| 6: | Clicking on this will clear any previous capture regions that you might have created.|
| 7: | Clicking on this will make the capture region the entire editor window.|
| 8: | Clicking on this this will take the screenshot.|

[region:warning]
Due to the high system requirements of a high resolution screenshot, very large multipliers might cause the graphics driver to be unresponsive and possibly crash. In these circumstances, please try using a lower number. 
[/region]


### Using the High Resolution Screenshot 

Using the HRSST tool is something that can be done in the few following steps. 

1. Before we begin, we must first enable the HRSST tool. To do this, click on the **View Port Options** and then selecting the **High Resolution Screenshot** option. 
	[OBJECT:EmbeddedVideo]
		[PARAMLITERAL:width]
		640
		[/PARAMLITERAL]
		[PARAMLITERAL:height]
		360
		[/PARAMLITERAL]
		[PARAMLITERAL:videoid]
		XHQirVrqPuo
		[/PARAMLITERAL]
	[/OBJECT]

1. Once the tool has been enabled, press on the **Specify Region** button and then draw a region you of the editor viewport that you wish to capture. 
	[OBJECT:EmbeddedVideo]
		[PARAMLITERAL:width]
		640
		[/PARAMLITERAL]
		[PARAMLITERAL:height]
		360
		[/PARAMLITERAL]
		[PARAMLITERAL:videoid]
		-zyz20kRzSg
		[/PARAMLITERAL]
	[/OBJECT]

1. After your capture region has set the size for the screenshot by adjusting the **Screenshot Size Multiplier**, press the Camera icon to take the screenshot. Screenshots will be saved to **Saved\Screenshots\Windows** folder. 
  	[OBJECT:EmbeddedVideo]
		[PARAMLITERAL:width]
		640
		[/PARAMLITERAL]
		[PARAMLITERAL:height]
		360
		[/PARAMLITERAL]
		[PARAMLITERAL:videoid]
		2oWU5hSYwXs
		[/PARAMLITERAL]
	[/OBJECT]


### Buffer Visualizations
The High Resolution Screenshot tool (HRSST) supports the ability to render out each one of the buffers in the G-Buffer.  After clicking the capture button, the HRSST  writes out the following buffers.

* **DiffuseColor**
* **LightingModel**
* **MaterialAO**
* **Opacity**
* **Roughness**
* **SceneColor**
* **SceneDepth**
* **SceneDepthWorldUnits**
* **SeparateTranslucencyA**
* **SeparateTranslucencyRGB**
* **SpecularColor**
* **SubsurfaceColor**
* **WorldNormal**

To enable the HRSST to export out the G-Buffer as images, you need to first enable the **Include Buffer Visualization Targets** and  then press the capture button. Once this has been completed, the capture folder will now contain a screenshot for each of the G-Buffers listed above. 
[OBJECT:EmbeddedVideo]
	[PARAMLITERAL:width]
	640
	[/PARAMLITERAL]
	[PARAMLITERAL:height]
	360
	[/PARAMLITERAL]
	[PARAMLITERAL:videoid]
	8nntyTq2C2g
	[/PARAMLITERAL]
[/OBJECT]

### OpenEXR Image Support

The High Resolution Screenshot tool(HRSST) now supports exporting images in the OpenEXR image format. 
This enables full 16 bit color depth (HDR) export of all of available intermediate rendering stages when enabled. 
After clicking the capture button, the HRSST writes out the following buffers to the OpenEXR image format. 

* **DiffuseColor**
* **LightingModel**
* **MaterialAO**
* **Opacity**
* **Roughness**
* **SceneColor**
* **SceneDepth**
* **SceneDepthWorldUnits**
* **SeparateTranslucencyA**
* **SeparateTranslucencyRGB**
* **SpecularColor**
* **SubsurfaceColor**
* **WorldNormal**

To enable OpenEXR image support, you need to enable **Write HDR format visualization targets** and then press the capture button. Once this has been completed, the capture folder will now contain a screenshot for each of the G-Buffers listed above. 
 
[OBJECT:EmbeddedVideo]
	[PARAMLITERAL:width]
	640
	[/PARAMLITERAL]
	[PARAMLITERAL:height]
	360
	[/PARAMLITERAL]
	[PARAMLITERAL:videoid]
	bliqt34KBpc
	[/PARAMLITERAL]
[/OBJECT]

### Custom Depth Mask
During the course of development, you might need the ability to capture certain objects in the game world for promotional material. 
While doing this, you might find that you have to manually cut out objects from the background which can be both time consuming and frustrating. 
To help speed this process up, the HRSST has an option called **Use custom depth as mask** which helps to separate objects in the world from  one another. 
Setting up and using this part of the tool can be done in the following few steps. 

1. The first thing that needs to be done is that you need to select whatever objects that you want to capture and then in the **Details** enable the **Render Custom Depth** option.  
	[OBJECT:EmbeddedVideo]
		[PARAMLITERAL:width]
		640
		[/PARAMLITERAL]
		[PARAMLITERAL:height]
		360
		[/PARAMLITERAL]
		[PARAMLITERAL:videoid]
		zCaKsdItVQo
		[/PARAMLITERAL]
	[/OBJECT]

1. With Render Custom Depth now enabled on the meshes, open up the HRSST and select a region you want to capture. 
   Make sure that the region that you are trying to capture does include the meshes that you just enabled Render Custom Depth on. 
   Once the screenshot region has been set, enable the **Use custom depth as mask** option and then take the screenshot by pressing the capture button. 
   After you have pressed the capture button, you can view the screenshot by clicking on message that is displayed in the lower right hand corner of the screen. 
   	[OBJECT:EmbeddedVideo]
		[PARAMLITERAL:width]
		640
		[/PARAMLITERAL]
		[PARAMLITERAL:height]
		360
		[/PARAMLITERAL]
		[PARAMLITERAL:videoid]
		lO7lJaMuoTU
		[/PARAMLITERAL]
	[/OBJECT]
