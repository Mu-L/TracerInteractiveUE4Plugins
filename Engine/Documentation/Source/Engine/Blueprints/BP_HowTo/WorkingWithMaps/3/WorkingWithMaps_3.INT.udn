Availability: Docs
Title:3 - Adding Keys and Values to a Map
Description:Adding key-value pairs to a Blueprint Map, ultimately displaying the Map's keys and associated values.
Crumbs:%ROOT%
Parent:Engine/Blueprints/BP_HowTo/WorkingWithMaps
Version: 4.15
Tags:Blueprints
Type:how-to
Skilllevel:Advanced
Checkpoint:HowToWorkWithMaps
Order:3

By now, you have a **TextRender** Actor displaying the associated values of a Blueprint Map that you defined in the previous step. 
In this step, you'll learn how to **Add** a key-value pair to a Map, subsequently displaying the Map's keys and 
associated values.

[nav]

1.	From your project's **Content Browser**, double-click the **Display Map** TextRender Actor to open its Blueprint **Event Graph**.

	[REGION:lightbox]
		[![](Step3_1.png)(w:600)](Step3_1.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	You should see the **Display Map** TextRender Actor Blueprint **Event Graph**, where you'll be able to add a new Blueprint Map, which you'll be able to **Add** a new key-value pair to, ultimately displaying the Map's keys and associated values to the **Viewport**.

	[REGION:lightbox]
		[![](Step3_2.png)(w:600)](Step3_2.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	At this point in the tutorial, you'll want to create a new Blueprint Map container for the upcoming **Add** operation. Go ahead and right-click on the **Instruction Map** variable and select **Duplicate** from the drop-down list to create a new Blueprint Map variable, naming it `Weapon Inventory Map`.

	![](Step3_3.png)

1.	Please make sure that the new Map container matches the following properties, where the key is a String and the value is an Integer:

	![](Step3_4.png)

	[REGION:note]
	For illustrative purposes, you're creating a weapon inventory Blueprint Map container, where the key is the weapon name and the value is how much ammunication is available for the weapon.
	[/REGION]

1.	If you select your new Blueprint Map, the **Default Value** message, saying `Please compile the blueprint`, should be visible.

	[REGION:lightbox]
		[![](Step3_5.png)(w:600)](Step3_5.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	Go ahead and click the **Compile** button.

	[REGION:lightbox]
		[![](Step3_6.png)(w:600)](Step3_6.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	After compiling the Blueprint, you should see the **Default Value** disappear, making way for a default key-value pair.

	[REGION:lightbox]
		[![](Step3_7.png)(w:600)](Step3_7.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	At this point, the editor should also emit the following warning: 

	[REGION:lightbox]
		[![](Step3_8.png)(w:600)](Step3_8.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]
	
	[REGION:note]
	UE4 emits this warning because you're duplicating **Instruction Map**, which is a Blueprint map having an Integer-String key-value property, to create a **Weapon Inventory Map**, which is a Blueprint Map having a String-Integer key-value property. 
	During the duplication process, the engine parses key-value pairs belonging to **Instruction Map**, attempting to copy them into the key-value pairs for **Weapon Inventory Map**, which is undesired behavior. 
	[REGION:lightbox]
		[![](Step3_8Note.png)(w:600)](Step3_8Note.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]
	[/REGION]

1.	Go ahead and fill your new **Weapon Inventory Map** container with the following key-value pairs:

	![](Step3_9.png)

1.	Now, click the **Compile** button.

	[REGION:lightbox]
		[![](Step3_10.png)(w:600)](Step3_10.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	After filling the **Weapon Inventory Map** container with the appropriately typed key-value pairs, satisfying the new Blueprint Map's key-value property requirements, you should see the warning disappear. 

	[REGION:lightbox]
		[![](Step3_11.png)(w:600)](Step3_11.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	Before you can add new logic to the existing Blueprint Event Graph, go ahead and drag the **Weapon Inventory Map** variable into the Blueprint.

	[REGION:lightbox]
		[![](Step3_12.png)(w:600)](Step3_12.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

## Scripting the Logic

1.	To get started with building your new logic, drag off the **Weapon Inventory Map** node and add the **Keys** node from the **Map Utilities** interface.

	[REGION:lightbox]
		[![](Step3_13.png)(w:600)](Step3_13.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

	[REGION:note]
	The **Keys** node will output an Array of all keys that are present in your **Weapon Inventory Map**.
	[/REGION]

1.	Drag off the **Array** output pin belonging to the **Keys** node, search for, and add the **ForEachLoop** node.

	[REGION:lightbox]
		[![](Step3_14.png)(w:600)](Step3_14.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	Now, drag off the **Array Element** pin belonging to the **ForEachLoop** node, search for, and add the **Print String** node.

	[REGION:lightbox]
		[![](Step3_15.png)(w:600)](Step3_15.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	Right-click in the Blueprint Graph to open the **Context Menu**, where you'll search for and add **Event ActorBeginOverlap**.

	[REGION:lightbox]
		[![](Step3_16.png)(w:600)](Step3_16.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	Drag off the **Other Actor** pin of the **Event ActorBeginOverlap** node, search for, and add the **Cast To FirstPersonProjectile** node.

	[REGION:lightbox]
		[![](Step3_17.png)(w:600)](Step3_17.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	Now, connect the **Cast To FirstPersonProjectile** node to the **Keys** node.

	[REGION:lightbox]
		[![](Step3_18.png)(w:600)](Step3_18.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

### Displaying your Map's Keys

At this point, if you enter Play in Editor (PIE) mode, you'll be able to fire a projectile at the collision box for your **Display Map** Text Render Actor, where you'll be able to display an Array of keys that are contained in your **Weapon Inventory Map**.

[REGION:lightbox]
	[![](Step3_DisplayingKeys.png)(w:600)](Step3_DisplayingKeys.png)
[/REGION]

[REGION:caption]
	Click for full image.
[/REGION]

## Finishing the Script

1.	Now's the time to add a new key-value pair to your container. To do this, go ahead and drag the **Weapon Inventory Map** variable into the Blueprint.

	[REGION:lightbox]
		[![](Step3_19.png)(w:600)](Step3_19.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	Drag off the **Weapon Inventory Map** variable, adding the **Add** node from the **Map Utilities** interface.

	[REGION:lightbox]
		[![](Step3_20.png)(w:600)](Step3_20.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	Now, define the key-value pair that you'd like to add, defining `Weapon 6` as the key and `60` as the value.

	[REGION:lightbox]
		[![](Step3_21.png)(w:600)](Step3_21.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	Drag off the **Add** node's **Boolean Return Value** pin, search for, and add the **Branch** node.

	[REGION:lightbox]
		[![](Step3_22.png)(w:600)](Step3_22.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	Before you can set up the additional display logic, showing your added key, you'll need to drag the **Weapon Inventory Map** variable into the Blueprint.

	[REGION:lightbox]
		[![](Step3_23.png)(w:600)](Step3_23.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	Now, drag off the **Weapon Inventory Map** variable, adding the **Keys** node from the **Map Utilities** interface.

	[REGION:lightbox]
		[![](Step3_24.png)(w:600)](Step3_24.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	Drag off the **Array** output pin belonging to the **Keys** node, search for, and add the **ForEachLoop** node.

	[REGION:lightbox]
		[![](Step3_25.png)(w:600)](Step3_25.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	Now, drag off the **Array Element** pin belonging to the **ForEachLoop** node, search for, and add the **Print String** node.

	[REGION:lightbox]
		[![](Step3_26.png)(w:600)](Step3_26.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	Click on the **Text Color** box to open the **Color Picker** menu.

	[REGION:lightbox]
		[![](Step3_27.png)(w:600)](Step3_27.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	Go ahead and set the color to the following values:

	![](Step3_28.png)

1.	Again, before you can set up more display logic, showing your added value, you'll need to drag the **Weapon Inventory Map** variable into the Blueprint.

	[REGION:lightbox]
		[![](Step3_29.png)(w:600)](Step3_29.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	Now, drag off the **Weapon Inventory Map** variable, adding the **Values** node from the **Map Utilities** interface.

	[REGION:lightbox]
		[![](Step3_30.png)(w:600)](Step3_30.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	Drag off the **Array** output pin belonging to the **Values** node, search for, and add the **ForEachLoop** node.

	[REGION:lightbox]
		[![](Step3_31.png)(w:600)](Step3_31.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	Now, drag off the **Execute Output** pin belonging to the **ForEachLoop** node, search for, and add the **Print String** node.

	[REGION:lightbox]
		[![](Step3_32.png)(w:600)](Step3_32.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	Drag off the **Array Element** pin belonging to the **ForEachLoop** node, connecting it to the **In String** pin belonging to the **Print String** node.

	[REGION:lightbox]
		[![](Step3_33.png)(w:600)](Step3_33.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	Click on the **Text Color** box to open the **Color Picker** menu.

	[REGION:lightbox]
		[![](Step3_34.png)(w:600)](Step3_34.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	Go ahead and set the color to the following values:

	![](Step3_35.png)

1.	Connect the **Branch** node's **True** pin to the **Keys** node.

	[REGION:lightbox]
		[![](Step3_36.png)(w:600)](Step3_36.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	Now, connect the **Branch** node's **False** pin to the **Values** node.

	[REGION:lightbox]
		[![](Step3_37.png)(w:600)](Step3_37.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	To complete the script's logic, go ahead and connect the **Cast Failed** pin of the **Cast To FirstPersonProjectile** node to the **Add** node.

	[REGION:lightbox]
		[![](Step3_38.png)(w:600)](Step3_38.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	After inspecting your completed script, go ahead and click the **Compile** button.

	[REGION:lightbox]
		[![](Step3_39.png)(w:600)](Step3_39.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	Finally, click the **Save** button before going back to the Editor's **Viewport** interface.

	[REGION:lightbox]
		[![](Step3_40.png)(w:600)](Step3_40.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	From the Editor's **Viewport** interface, click the **Play** button to see the updated script at work.

	[REGION:lightbox]
		[![](Step3_41.png)(w:600)](Step3_41.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

## End Result

[OBJECT:EmbeddedVideo]
	[PARAMLITERAL:videoid]
	SJbsl6g7UME
	[/PARAMLITERAL]
	[PARAMLITERAL:width]
	100
	[/PARAMLITERAL]
	[PARAMLITERAL:height]
	56.25
	[/PARAMLITERAL]
	[PARAMLITERAL:units]
	%
	[/PARAMLITERAL]
	[PARAMLITERAL:type]
	simple
	[/PARAMLITERAL]
[/OBJECT]

As you can see from the video, when you initially fire a **First Person Projectile** the **Display Map** TextRender Actor's collision box, you'll see the original five keys being printed to the **Viewport**. 
Then, when you walk through the collision box, you'll see the new key being added, subsequently being printed. After backing out of the collision box, go ahead and fire another **First Person Projectile** to confirm 
the newly added key. Finally, when you walk through the collision box for a second time, you'll see all of the values being printed.

[nav]