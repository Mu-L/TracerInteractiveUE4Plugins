INTSourceChangelist:3489715
Availability:Public
Title:3 - キーと値を Map に追加する
Description:キー / 値のペアを Blueprint Map に追加して、最終的に Map のキーおよび関連づいている値を表示する
Crumbs:%ROOT%
Parent:Engine/Blueprints/BP_HowTo/WorkingWithMaps
Version:4.15
Tags:Blueprints
Type:how-to
Skilllevel:Advanced
Checkpoint:HowToWorkWithMaps
Order:3

前のステップでは **TextRender** アクタが Blueprint Map の関連付けられた値を表示するように定義をしました。 
このステップでは、キー / 値のペアを Map に **追加** して、 
Map のキーと関連付けられた値を結果として表示する方法を説明します。

[nav]

1.	プロジェクトの **コンテンツ ブラウザ** から **Display Map** TextRender アクタをダブルクリックして、ブループリント **イベントグラフ** を開きます。

	[REGION:lightbox]
		[![](Step3_1.png)(w:600)](Step3_1.png)
	[/REGION]

	[REGION:caption]
		クリックしてフルサイズで表示
	[/REGION]

1.	**Display Map** TextRender アクタのブループリント **イベントグラフ** が表示されます。ここで、新しくキー / 値のペアを **追加** して、最終的に Map のキーと関連付けられた値を **ビューポート** に表示します。

	[REGION:lightbox]
		[![](Step3_2.png)(w:600)](Step3_2.png)
	[/REGION]

	[REGION:caption]
		クリックしてフルサイズで表示
	[/REGION]

1.	ここで、これから使う **Add** 演算用に Blueprint Map コンテナを新規作成する必要があります。**Instruction Map** 変数を右クリックしてドロップダウン リストから **[Duplicate]** を選択し、新規の Blueprint Map 変数を作成し、「`Weapon Inventory Map`」と名前を付けます。

	![](Step3_3.png)

1.	新規作成した Map コンテナが以下のプロパティと一致するようにしてください。キーは String 型、値は Integer 型です

	![](Step3_4.png)

	[REGION:note]
	説明のため、武器名をキー、その武器が使用できる銃弾数を値にして、Weapon Inventory Blueprint Map コンテナを作成します。
	[/REGION]

1.	その Blueprint Map を選択すると「`Please compile the blueprint`(ブループリントをコンパイルしてください)」という **[Default Value]** メッセージが表示されます。

	[REGION:lightbox]
		[![](Step3_5.png)(w:600)](Step3_5.png)
	[/REGION]

	[REGION:caption]
		クリックしてフルサイズで表示
	[/REGION]

1.	**[Compile]** ボタンをクリックします。

	[REGION:lightbox]
		[![](Step3_6.png)(w:600)](Step3_6.png)
	[/REGION]

	[REGION:caption]
		クリックしてフルサイズで表示
	[/REGION]

1.	ブループリントのコンパイルを完了すると **Default Value** メッセージが消えて今度はデフォルトのキー / 値のペアが表示されます。

	[REGION:lightbox]
		[![](Step3_7.png)(w:600)](Step3_7.png)
	[/REGION]

	[REGION:caption]
		クリックしてフルサイズで表示
	[/REGION]

1.	ここでエディタは以下の警告も出します。 

	[REGION:lightbox]
		[![](Step3_8.png)(w:600)](Step3_8.png)
	[/REGION]

	[REGION:caption]
		クリックしてフルサイズで表示
	[/REGION]

	[REGION:note]
	キーと値のプロパティがそれぞれ Integer-String 型の Blueprint マップである **Weapon Inventory Map** を作成するために、キーと値のプロパティがそれぞれ Integer-String 型の Blueprint マップを複製したため、UE4 がこの警告を出しました。 
	複製中、エンジンは、**Weapon Inventory Map** のキー / 値のペアへそれらをコピーしようとして、**Instruction Map** に属するキー / 値のペアをパースし、それが警告の原因のビヘイビアとなりました。 
	[REGION:lightbox]
		[![](Step3_8Note.png)(w:600)](Step3_8Note.png)
	[/REGION]

	[REGION:caption]
		クリックしてフルサイズで表示
	[/REGION]
	[/REGION]

1.	次のキー / 値のペアを **Weapon Inventory Map** コンテナに入力します。

	![](Step3_9.png)

1.	**[Compile]** ボタンをクリックします。

	[REGION:lightbox]
		[![](Step3_10.png)(w:600)](Step3_10.png)
	[/REGION]

	[REGION:caption]
		クリックしてフルサイズで表示
	[/REGION]

1.	**Weapon Inventory Map** コンテナにキー / 値のペアを正しく入力し、新しい Blueprint マップのキー / 値のプロパティ要件を満たすと、警告が消えます。 

	[REGION:lightbox]
		[![](Step3_11.png)(w:600)](Step3_11.png)
	[/REGION]

	[REGION:caption]
		クリックしてフルサイズで表示
	[/REGION]

1.	新規ロジックを既存のブループリント イベントグラフに追加する前に、**Weapon Inventory Map** 変数をブループリントにドラッグします。

	[REGION:lightbox]
		[![](Step3_12.png)(w:600)](Step3_12.png)
	[/REGION]

	[REGION:caption]
		クリックしてフルサイズで表示
	[/REGION]

## ロジックのスクリプト処理

1.	新規ロジックをビルドするには、**Weapon Inventory Map** ノードを引き出して **Map Utilities** インターフェースから **Keys** ノードを追加します。

	[REGION:lightbox]
		[![](Step3_13.png)(w:600)](Step3_13.png)
	[/REGION]

	[REGION:caption]
		クリックしてフルサイズで表示
	[/REGION]

	[REGION:note]
	**Keys** ノードは、**Weapon Inventory Map** に存在するすべてのキーの Array を出力します。
	[/REGION]

1.	**Keys** ノードに属する **To Array** 出力を引き出して **ForEachLoop** ノードを探して追加します。

	[REGION:lightbox]
		[![](Step3_14.png)(w:600)](Step3_14.png)
	[/REGION]

	[REGION:caption]
		クリックしてフルサイズで表示
	[/REGION]

1.	**ForEachLoop** ノードに属する **Array Element** ピンを引き出して **Print String** ノードを探して追加します。

	[REGION:lightbox]
		[![](Step3_15.png)(w:600)](Step3_15.png)
	[/REGION]

	[REGION:caption]
		クリックしてフルサイズで表示
	[/REGION]

1.	ブループリント グラフ内を右クリックして **コンテキスト メニュー** を開き、**Event ActorBeginOverlap** を探して追加します。

	[REGION:lightbox]
		[![](Step3_16.png)(w:600)](Step3_16.png)
	[/REGION]

	[REGION:caption]
		クリックしてフルサイズで表示
	[/REGION]

1.	**Event ActorBeginOverlap** ノードから **Other Actor** ピンを引き出して、**Cast To FirstPersonProjectile** ノードを探して追加します。

	[REGION:lightbox]
		[![](Step3_17.png)(w:600)](Step3_17.png)
	[/REGION]

	[REGION:caption]
		クリックしてフルサイズで表示
	[/REGION]

1.	**Cast To FirstPersonProjectile** ノードを **Keys** ノードに接続します。

	[REGION:lightbox]
		[![](Step3_18.png)(w:600)](Step3_18.png)
	[/REGION]

	[REGION:caption]
		クリックしてフルサイズで表示
	[/REGION]

### マップのキーを表示する

この時点で Play in Editor (PIE) モードになっていると、**Display Map** Text Render Actor のコリジョン ボックスへ発射物を発砲し、**Weapon Inventory Map** に含まれるキーの Array を表示することができます。

[REGION:lightbox]
	[![](Step3_DisplayingKeys.png)(w:600)](Step3_DisplayingKeys.png)
[/REGION]

[REGION:caption]
	クリックしてフルサイズで表示
[/REGION]

## スクリプト処理を終了する

1.	いよいよキー / 値のペアをコンテナに追加します。**Weapon Inventory Map** 変数をブループリントにドラッグします。

	[REGION:lightbox]
		[![](Step3_19.png)(w:600)](Step3_19.png)
	[/REGION]

	[REGION:caption]
		クリックしてフルサイズで表示
	[/REGION]

1.	**Weapon Inventory Map** 変数を引き出して、**Map Utilities** インターフェースから **Add** ノードを追加します。

	[REGION:lightbox]
		[![](Step3_20.png)(w:600)](Step3_20.png)
	[/REGION]

	[REGION:caption]
		クリックしてフルサイズで表示
	[/REGION]

1.	ここで追加したいキー / 値のペアを定義します。キーを `Weapon 6`、値を `60` に定義します。

	[REGION:lightbox]
		[![](Step3_21.png)(w:600)](Step3_21.png)
	[/REGION]

	[REGION:caption]
		クリックしてフルサイズで表示
	[/REGION]

1.	**Add** ノードの **Boolean Return Value** ピンを引き出して、**Branch** ノードを探して追加します。

	[REGION:lightbox]
		[![](Step3_22.png)(w:600)](Step3_22.png)
	[/REGION]

	[REGION:caption]
		クリックしてフルサイズで表示
	[/REGION]

1.	追加したキーを表示する表示ロジックを設定する前に、**Weapon Inventory Map** 変数をブループリントにドラッグする必要があります。

	[REGION:lightbox]
		[![](Step3_23.png)(w:600)](Step3_23.png)
	[/REGION]

	[REGION:caption]
		クリックしてフルサイズで表示
	[/REGION]

1.	**Weapon Inventory Map** 変数を引き出して、**Map Utilities** インターフェースから **Keys** ノードを追加します。

	[REGION:lightbox]
		[![](Step3_24.png)(w:600)](Step3_24.png)
	[/REGION]

	[REGION:caption]
		クリックしてフルサイズで表示
	[/REGION]

1.	**Keys** ノードに属する **To Array** 出力を引き出して **ForEachLoop** ノードを探して追加します。

	[REGION:lightbox]
		[![](Step3_25.png)(w:600)](Step3_25.png)
	[/REGION]

	[REGION:caption]
		クリックしてフルサイズで表示
	[/REGION]

1.	**ForEachLoop** ノードに属する **Array Element** ピンを引き出して **Print String** ノードを探して追加します。

	[REGION:lightbox]
		[![](Step3_26.png)(w:600)](Step3_26.png)
	[/REGION]

	[REGION:caption]
		クリックしてフルサイズで表示
	[/REGION]

1.	**[Text Color]** ボックスをクリックして **[Color Picker]** メニューを開きます。

	[REGION:lightbox]
		[![](Step3_27.png)(w:600)](Step3_27.png)
	[/REGION]

	[REGION:caption]
		クリックしてフルサイズで表示
	[/REGION]

1.	色を以下の値に設定します。

	![](Step3_28.png)

1.	追加した値を表示する表示ロジックも設定しますが、やはりその前に **Weapon Inventory Map** 変数をブループリントにドラッグする必要があります。

	[REGION:lightbox]
		[![](Step3_29.png)(w:600)](Step3_29.png)
	[/REGION]

	[REGION:caption]
		クリックしてフルサイズで表示
	[/REGION]

1.	**Weapon Inventory Map** 変数を引き出して、**Map Utilities** インターフェースから **Values** ノードを追加します。

	[REGION:lightbox]
		[![](Step3_30.png)(w:600)](Step3_30.png)
	[/REGION]

	[REGION:caption]
		クリックしてフルサイズで表示
	[/REGION]

1.	**Values** ノードに属する **To Array** 出力を引き出して **ForEachLoop** ノードを探して追加します。

	[REGION:lightbox]
		[![](Step3_31.png)(w:600)](Step3_31.png)
	[/REGION]

	[REGION:caption]
		クリックしてフルサイズで表示
	[/REGION]

1.	**ForEachLoop** ノードに属する **Execute Output** ピンを引き出して **Print String** ノードを探して追加します。

	[REGION:lightbox]
		[![](Step3_32.png)(w:600)](Step3_32.png)
	[/REGION]

	[REGION:caption]
		クリックしてフルサイズで表示
	[/REGION]

1.	**ForEachLoop** ノードに属する **Array Element** ピンを引き出して **Print String** ノードに属する **In String** に接続します。

	[REGION:lightbox]
		[![](Step3_33.png)(w:600)](Step3_33.png)
	[/REGION]

	[REGION:caption]
		クリックしてフルサイズで表示
	[/REGION]

1.	**[Text Color]** ボックスをクリックして **[Color Picker]** メニューを開きます。

	[REGION:lightbox]
		[![](Step3_34.png)(w:600)](Step3_34.png)
	[/REGION]

	[REGION:caption]
		クリックしてフルサイズで表示
	[/REGION]

1.	色を以下の値に設定します。

	![](Step3_35.png)

1.	**Branch** ノードの **True** ピンを **Keys** に接続します。

	[REGION:lightbox]
		[![](Step3_36.png)(w:600)](Step3_36.png)
	[/REGION]

	[REGION:caption]
		クリックしてフルサイズで表示
	[/REGION]

1.	次に **Branch** ノードの **False** ピンを **Values** に接続します。

	[REGION:lightbox]
		[![](Step3_37.png)(w:600)](Step3_37.png)
	[/REGION]

	[REGION:caption]
		クリックしてフルサイズで表示
	[/REGION]

1.	**Cast To FirstPersonProjectile** ノードの **Cast Failed** ピンを **Add** ノードに接続すれば、スクリプトのロジックが完成します。

	[REGION:lightbox]
		[![](Step3_38.png)(w:600)](Step3_38.png)
	[/REGION]

	[REGION:caption]
		クリックしてフルサイズで表示
	[/REGION]

1.	完成したスクリプトを確認したら、**[Compile]** ボタンをクリックします。

	[REGION:lightbox]
		[![](Step3_39.png)(w:600)](Step3_39.png)
	[/REGION]

	[REGION:caption]
		クリックしてフルサイズで表示
	[/REGION]

1.	最後に、完成したスクリプト全体を確認したら、エディタの **Viewport** インターフェースに戻る前に **[Save]** ボタンをクリックします。

	[REGION:lightbox]
		[![](Step3_40.png)(w:600)](Step3_40.png)
	[/REGION]

	[REGION:caption]
		クリックしてフルサイズで表示
	[/REGION]

1.	エディタの **Viewport** インターフェースで、**[Play]** ボタンをクリックして更新されたスクリプトの動きを確認します。

	[REGION:lightbox]
		[![](Step3_41.png)(w:600)](Step3_41.png)
	[/REGION]

	[REGION:caption]
		クリックしてフルサイズで表示
	[/REGION]

## 結果

[OBJECT:EmbeddedVideo]
	[PARAMLITERAL:videoid]
	SJbsl6g7UME
	[/PARAMLITERAL]
	[PARAMLITERAL:width]
	100
	[/PARAMLITERAL]
	[PARAMLITERAL:height]
	56.25
	[/PARAMLITERAL]
	[PARAMLITERAL:units]
	%
	[/PARAMLITERAL]
	[PARAMLITERAL:type]
	simple
	[/PARAMLITERAL]
[/OBJECT]

動画を見ると分かりますが、**First Person Projectile** が **Display Set** TextRender Actor のコリジョン ボックスに発射されると、元の 5 つのキーが **Viewport** に出力されます。 
コリジョン ボックスを通り抜ける時に、キーが追加され、その後で出力されます。コリジョン ボックスを後ろに動かす前に、もう 1 回 **First Person Projectile** を発射して、 
キーが新しく追加されたか確認します。2 回目にコリジョン ボックスを通り抜ける時、すべての値の出力が確認できます。

[nav]