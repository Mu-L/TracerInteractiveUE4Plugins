Availability: Docs
Title:2 - Creating and Displaying a Blueprint Set
Description:Setting up a Blueprint Set container so that you can display its contents in-game.
Crumbs:%ROOT%
Parent:Engine/Blueprints/BP_HowTo/WorkingWithSets
Version: 4.15
Tags:Blueprints
Type:how-to
Skilllevel:Advanced
Checkpoint:HowToWorkWithSets
Order:2

[nav]

Now that you've set up a **TextRender** actor in your newly created project, you're ready to create a Blueprint Set container, the contents of which you'll display in-game. 

1.	From your project's **Content Browser**, double-click the **Display Set** TextRender Actor to open its Blueprint **Event Graph**. 

	[REGION:lightbox]
		[![](Step2_1.png)(w:600)](Step2_1.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	If you see the following screen, go ahead and click the **Open Full Blueprint Editor** link to get started.

	[REGION:lightbox]
		[![](Step2_2.png)(w:600)](Step2_2.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	You should see the **Display Set** TextRender Actor Blueprint **Event Graph**, where you'll be able to add a Blueprint Set and its diplay logic.

	[REGION:lightbox]
		[![](Step2_3.png)(w:600)](Step2_3.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

	[REGION:note]

	If you don't see the aforementioned screen, go ahead and click the **Event Graph** tab to open the Actor's Blueprint Event Graph Editor.

	[REGION:lightbox]
		[![](Step2_3Note.png)(w:600)](Step2_3Note.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]
		
	[/REGION]

1.	Now is the time to create a Blueprint Set container, where you'll store some items that you'll display later on. To create a new Blueprint Set, click the **+ Add New** button (located in the **My Blueprint** panel) and select **Variable** from the drop-down list.

	[REGION:lightbox]
		[![](Step2_4.png)(w:600)](Step2_4.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	Name your new variable, `Instruction Set`.

	[REGION:lightbox]
		[![](Step2_5.png)(w:600)](Step2_5.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	Click the variable's **pin type** button, which is located next to the variable's name.

	[REGION:lightbox]
		[![](Step2_6.png)(w:600)](Step2_6.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	Now, select the **String** variable type from the drop-down list.

	[REGION:lightbox]
		[![](Step2_7.png)(w:600)](Step2_7.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	Click the variable's **container type** button, which is located next to the **Variable Type** drop-down list in the **Details** panel.

	[REGION:lightbox]
		[![](Step2_8.png)(w:600)](Step2_8.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	Now, select the **Set** container type from the drop-down list.

	[REGION:lightbox]
		[![](Step2_9.png)(w:600)](Step2_9.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	At this point, the Blueprint Graph reminds you that you need to compile the Blueprint in order to define the items that you're going to store inside of the container. Go ahead and click the **Compile** button to get started.

	[REGION:lightbox]
		[![](Step2_10.png)(w:600)](Step2_10.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

	[REGION:note]
	Compiling the Blueprint replaces the container's **Default Value** message with an interface, enabling you to populate your container with unique items (or elements) of String type.
	[/REGION]	

1.	If you already haven't done so, go ahead and click the **Save** button to save all of the work that you've done so far. 

	[REGION:lightbox]
		[![](Step2_11.png)(w:600)](Step2_11.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

	[REGION:tip]
	In general, it's always a good practice to save early, and save often. 
	[/REGION]

1.	Click the **+** (Adds Element) button (located in the **Default Value** menu of the **Details** panel) to add a String type item to your newly defined **Instruction Set** container.

	[REGION:lightbox]
		[![](Step2_12.png)(w:600)](Step2_12.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	Define your container's new item, defining the item as `Click`.

	![](Step2_13.png)

1.	Repeat the previous two steps, making sure to fill your **Instruction Set** container with the following items: 

	![](Step2_14.png)

## Scripting the Logic

Before you can display the contents of your newly created Blueprint Set, you'll need to write the necessary logic.

1.	Now that you've defined your container, go ahead and drag the **Instruction Set** variable into the Blueprint Event Graph. 

	[REGION:lightbox]
		[![](Step2_15.png)(w:600)](Step2_15.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	Select **Get** from the **Instruction Set** drown-down list.

	[REGION:lightbox]
		[![](Step2_16.png)(w:600)](Step2_16.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	Drag off the **Instruction Set** node and add the **To Array** node from the **Set Utilities** interface.

	[REGION:lightbox]
		[![](Step2_17.png)(w:600)](Step2_17.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	Go ahead and drag off the **To Array** node, connecting it to a **Get** node.

	[REGION:lightbox]
		[![](Step2_18.png)(w:600)](Step2_18.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

	[REGION:note]
	There are several ways to get items from a Set. One way is to query the Set with a specific key and another way is to iterate through the items in a set. For this part in the tutorial, we'll go ahead and use a counter variable to iterate our way through the **Instruction Set**.
	[/REGION]

1.	With the aforementioned note in mind, go ahead and click the **+ Add New** button, selecting **Variable** from the drop-down list.

	[REGION:lightbox]
		[![](Step2_19.png)(w:600)](Step2_19.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	Make sure to set the new variable's type to an **Integer** type, giving it the name, `Counter`.

	[REGION:lightbox]
		[![](Step2_20.png)(w:600)](Step2_20.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	After you've declared and defined your counter variable, drag **Counter** into the Blueprint Event Graph, and select **Get** from the drop-down list.

	[REGION:lightbox]
		[![](Step2_21.png)(w:600)](Step2_21.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	Drag off the **Counter** node, search for, and add the **IncrementInt** node.

	[REGION:lightbox]
		[![](Step2_22.png)(w:600)](Step2_22.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	Now, go ahead and connect the **IncrementInt** node to the **Get** node.

	[REGION:lightbox]
		[![](Step2_23.png)(w:600)](Step2_23.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

	[REGION:note]
	For the purposes of this tutorial, you're going to use a timer function to increment the **Counter** variable.
	[/REGION]

1.	Drag off the **Event Tick** node, search for, and add the **Delay** node.

	[REGION:lightbox]
		[![](Step2_24.png)(w:600)](Step2_24.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	After you've set the delay duration to **2** seconds, connect the **Delay** node to the **IncrementInt** node.

	[REGION:lightbox]
		[![](Step2_25.png)(w:600)](Step2_25.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	Go ahead and connect the **Event BeginPlay** node to the **To Array** node.

	[REGION:lightbox]
		[![](Step2_26.png)(w:600)](Step2_26.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	At this point, you're ready to drag off the **To Array** node to search for, and connect the **Set Text** node in order to display your container's contents in-game.

	[REGION:lightbox]
		[![](Step2_27.png)(w:600)](Step2_27.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	Connect the **Get** node to the **Value** pin (located in the **Set Text** node).

	[REGION:lightbox]
		[![](Step2_28.png)(w:600)](Step2_28.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	Now, go ahead and connect the **Increment** node to the **Set Text** node.

	[REGION:lightbox]
		[![](Step2_29.png)(w:600)](Step2_29.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	After inspecting your completed script, go ahead and click the **Compile** button before going back to the Editor's **Viewport** interface.

	[REGION:lightbox]
		[![](Step2_30.png)(w:600)](Step2_30.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	From the Editor's **Viewport** interface, click the **Play** button to see your newly implemented script at work.

	[REGION:lightbox]
		[![](Step2_31.png)(w:600)](Step2_31.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

## End Result  

[OBJECT:EmbeddedVideo]
	[PARAMLITERAL:videoid]
	BdDdQhDveIY
	[/PARAMLITERAL]
	[PARAMLITERAL:width]
	100
	[/PARAMLITERAL]
	[PARAMLITERAL:height]
	56.25
	[/PARAMLITERAL]
	[PARAMLITERAL:units]
	%
	[/PARAMLITERAL]
	[PARAMLITERAL:type]
	simple
	[/PARAMLITERAL]
[/OBJECT]

At this point in the guide, you've defined a new Blueprint Set, filled the container with items, and displayed them with 
some basic logic that you created in your **TextRender** Actor's Blueprint Event Graph. If you want to learn how to perform a 
slightly more advanced operation, please continue onto the next step, where you'll learn how to perform an **Intersection** of 
two Blueprint Sets.

[nav]