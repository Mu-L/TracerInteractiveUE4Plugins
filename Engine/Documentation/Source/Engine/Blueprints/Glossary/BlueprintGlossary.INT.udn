Availability:Public
Title:Blueprint Glossary
Crumbs:%ROOT%, Engine/Blueprints
Description:Glossary of terms used when working with Blueprints.
tags:Blueprints

[REGION:toc_alpha]
**Quick Jump:** A [B](#B) [C](#C) D [E](#E) [F](#F) G H [I](#I) J K L M N O [P](#P) Q R S T U V W X Y Z
[/REGION]

## B

(#Blueprint)
$ Blueprint : Generic term that can refer to the visual scripting system as a whole or a standard class _Blueprint_ that defines a new class or type of _Actor_.


## C

(#CustomEvent)
$ Custom Event : [Event](#Event) defined through the **Blueprint Editor** that can be executed via nodes in an EventGraph.


## E

(#Event)
$ Event : Executable method defined through code that has no return value and do not have any _output_ parameters. Events are the starting points for execution and, thus, have only an output exec pin. These are executed from native code. Also see [Custom Events](#CustomEvent).


## F

(#Function)
$ Function : Executable method defined either through code or through the **Blueprint Editor** that has at least one _output_ parameter or return a value. Functions can either be [Pure](#PureFunction) or [Impure](#ImpureFunction).

(#FunctionCall)
$ Function Call : Node that can be placed in an EventGraph to execute a [Function](#Function).


## I

(#ImpureFunction)
$ Impure Function : Function that is free to modify state or members of the class. See the [Pure vs Impure](Engine/Blueprints/UserGuide/Functions#PurevsImpure) section for more details.


## P

(#PrivateVariable)
$ Private Variable : Variable that is only editable in the **Class Defaults**, and is reset to that default value each time the _construction scripts_ are run. Private variables can be used to keep track of state within the _Blueprint_.

(#PublicVariable)
$ Public Variable :	Variable that is editable individually on each instance of the _Blueprint_, but is considered constant within the graphs of the _Blueprint_. Public variables can be used to allow designers to tweak the look or behavior of a _Blueprint_ on a per-instance basis.

(#PureFunction)
$ Pure Function: Function that promises not to modify state or members of the class.  See the [Pure vs Impure](Engine/Blueprints/UserGuide/Functions#PurevsImpure) section for more details.

