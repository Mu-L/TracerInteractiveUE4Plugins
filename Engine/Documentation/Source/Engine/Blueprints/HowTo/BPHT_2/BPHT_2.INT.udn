Availability:Docs
Title:2. Required Character Setup
Crumbs: %ROOT%, Engine, Engine/Blueprints, Engine/Blueprints/HowTo
Description:In this step we are going to make sure our playable character is setup correctly for our game. 
version: 4.9
tags:Blueprints
parent:Engine\Blueprints\HowTo
type:how-to
type:multi-step
order:2

[NAV]

On this page, we will work on our Character Blueprint by adding the variables that will be passed to the HUD later in this guide. We will also add some conditions to determine how many times the player can shoot at each rock that is launched. 

## Character Setup 

Let us get to work on our Character Blueprint. 

1.	Inside the **Content Browser** under **Content/FirstPersonBP/Blueprints**, open the **First Person Character** Blueprint. 

	![](FirstPersonCharacter.png)

1.	Inside the graph, delete the **Stick Input**, **Movement Input**, and **Jump** sections so that you only contain the sections below. 

	![](CleanUp.png)

	For our sample game, we only need to allow the player to turn and shoot so we have removed the other script to clean up our Blueprint. 

1.	**Right-click** in the graph and search for and add the **Event Begin Play** node. 

	![](EventBeginPlay.png)

1.	Drag off the **Event Being Play** node and search for and add the **Create Widget** node. 

	![](CreateWidget.png)

	We are going to call our **HUD** Widget Blueprint upon begin play of the game and display it. 

1.	On the **Create Widget** node for **Class** select the **HUD**, then off the **Return Value**, use the **Add to Viewport** node. 

	![](AddToViewport.png)

	Our HUD will now be displayed and we need to create some variables to pass to it. Let us do that now. 

1.	In the **MyBlueprint** window, click the **Add Variable** button. 

	![](AddVariable.png)

1.	Select the new variable, then in the **Details** panel, rename it to **IsActive** and make sure it is the **Boolean** type. 

	![](NewVariable1.png)

1.	Create another variable, rename it to **SpawnLocation** and make the type a **Transform**. 

	![](NewVariable2.png)

	This variable will be used to tell the rock where to spawn and will be updated from the level. 

1.	Create another variable, rename it to **Pulls** and make the type a **Integer**. 

	![](NewVariable3.png)

	This variable will hold the amount of rocks left the player can spawn by button press. 

1.	Create two more **Integer** variables, one called **Shots** and the other called **Score**. 

	![](AllVariables.png)

	Your added variables should look similar to above. 

1.	Click the **Compile** button, then in the **Details** panel for **Pulls** set its **Default Value** to **10**. 

	![](DefaultValuePulls.png)

1.	Set the **Default Value** for **Shots** to **3** and **Score** to **0**. 


## Firing Weapon Setup

Here we are going to make some minor changes to how many times the player can fire a shot per pull. 

1.	Find the **InputAction Fire** event and drag off it and add the **Do N** node. 

	![](DoN.png)

	This node will execute the script following it a set number of times (allowing us to control the number of times the player can shoot). 

1.	Set the **N** to **3**, then while holding **Alt** drag in the **Shots** variable from the **My Blueprint** window and reconnect the nodes. 

	![](SetDoN.png)

	Following the **Shots** node, connect the **Set** back to the **Montage Play** node. 

1.	While holding **Control**, drag in the **Shots** variable again and connect it to a **Integer - Integer** node (set to **1**) and connect as shown. 

	![](ConnectShots.png)

	Here we are setting shots to decrement by 1 each time **Fire** is pressed. 

1.	**Right-click** in the graph next to **Shots** and add a **Custom Event** called **ResetShots**. 

	![](CreateCustomEvent.png)

1.	**Alt** drag in **Shots** and set it to **3**, then connect it following the **Custom Event** and into the **Reset** on the **Do N** node. 

	![](ResetEventSet.png)

	When this custom event is called, it will set shots back to 3 and reset the Do N node so that it can be executed again. 


[NAV]