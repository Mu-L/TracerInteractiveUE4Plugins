Availability:Docs
Title:6. Communicating with the HUD
Crumbs: %ROOT%, Engine, Engine/Blueprints, Engine/Blueprints/HowTo
Description:In this step we will update our HUD based on values stored in our Character Blueprint. 
version: 4.9
order:6
tags:Blueprints

[VAR:Steps]
[OBJECT:Navigation]
	[PARAM:previous]
	[Previous Step](Engine\Blueprints\HowTo\BPHT_5 "%Engine\Blueprints\HowTo\BPHT_5:title%") 
	[/PARAM]
	[PARAM:current]
	[/PARAM]
	[PARAM:home]
		[How-To Home](Engine\Blueprints\HowTo "%Engine\Blueprints\HowTo:Title%")
	[/PARAM]
	[PARAM:next]
	[Next Step](Engine\Blueprints\HowTo\BPHT_7 "%Engine\Blueprints\HowTo\BPHT_7:title%") 
	[/PARAM]
[/OBJECT]
[/VAR]



In this step, we will update the values displayed on our HUD Widget Blueprint by communicating with our Character Blueprint to get values stored in it for Pulls, Shots, and Score. To do this, we will use a **Cast** node to access the player's Character Blueprint then Bind properties in our HUD to values in our Character Blueprint so they automatically get updated when those values are updated in the Character Blueprint. 

Our game is almost complete, let's finish it off by updating the HUD. 

1.	Open the **HUD** Widget Blueprint you created. 

1.	Click the **Graph** tab inside your **HUD** Widget Blueprint. 

	![](GraphClick.png)

1.	**Right-click** in the graph and add the **Event Construct** node. 

	![](EventConstruct.png)

	This node is similar to an **Event Begin Play** and is called when the Widget Blueprint is constructed. 

1.	Add a **Get Player Character** node and **CastTo FirstPersonCharacter**. 

	![](CastToFirstPerson.png)

1.	Off the **As First Person Character** pin, select **Promote to variable** and rename the new node to **MyCharacter**. 

	![](MyCharacter.png)

	You can rename the variable from the **My Blueprint** window by selecting the variable and pressing **F2**. 

1.	On the **Designer** tab, click the value for **Pulls** then next to **Text** in the **Details** panel, click the **Bind** option and choose **Create Binding**. 

	![](Bind1.png)

	This will open a new graph for the binding. 

1.	Hold **Control** and drag in the **MyCharacter** variable, then off it **Get Pulls** and connect it to the **Return Value** of the **Return Node**. 

	![](GetPulls.png)

	The **To Text (Int)** conversion node will automatically be created. We are now set to properly display our Pulls value. 

1. On the **Designer** tab, click the value for **Shots** and in the **Details** panel, click the **Bind** option and create the binding below. 

	![](GetShots.png)

	This will update and display the proper amount of shots left per pull. 

1. On the **Designer** tab, click the value for **Score** and in the **Details** panel, click the **Bind** option and create the binding below. 

	![](GetScore.png)

	And finally, this will get and display the proper score for the player when hitting a rock. 

1. Click **Compile** and **Save**, then close the Blueprint. 

1. From the Main Editor view, click the **Play** button to play in the editor. 

	[OBJECT:EmbeddedVideo]
	[PARAMLITERAL:width]
	640
	[/PARAMLITERAL]
	[PARAMLITERAL:height]
	360
	[/PARAMLITERAL]
	[PARAMLITERAL:videoid]
	tbwor-dRyEs
	[/PARAMLITERAL]
	[/OBJECT]


That's it; your simple shooting gallery game is complete. To spawn a rock, press **F** as we bound it do that event in a previous section. Over the course of this guide, we have learned how to communicate between three different types of Blueprints using an **Event Dispatcher**, **Cast** nodes, and **Binding**. We have learned how to pass information from the level to a Character Blueprint as well as how to communicate variables from the character to a HUD. 

In the final step, you will see some examples you can take to alter this project and make it your own. You will also be provided with links to additional documentation that covers topics in this guide. 













[COMMENT:none]
 Old

For more information on the topics covered in this guide, and across the entire editor, see the [**Unreal Editor Manual**](Engine).

As for coverage related to the topics in this guide:

* For more information on **Blueprints** in general, see: [**Blueprints Visual Scripting**](Engine/Blueprints)

* For more information on **Direct Blueprint Communication**, see: [**Direct Blueprint Communications**](Engine/Blueprints/UserGuide/BlueprintComms)

* For more information on **Blueprint Interfaces**, see: [**Implementing Blueprint Interfaces**](Engine/Blueprints/UserGuide/Types/Interface/UsingInterfaces) 

* For more information on **Event Dispatchers**, see: [**Event Dispatchers**](Engine/Blueprints/UserGuide/EventDispatcher)

* For more information on creating HUD elements with **Unreal Motion Graphics** (UMG), see: [**Unreal Motion Graphics**](Engine/UMG)


[/COMMENT]














