Availability:Public
Title: Blueprint Overview
Crumbs: %ROOT%, Engine, Engine/Blueprints
Description: The Blueprint Overview page breaks down the anatomy of a Blueprint and the different types of Blueprints available. 
version: 4.9
parent:Engine/Blueprints
order:2
tags:Blueprints
topic-image:blueprint_topic.png


[TOC (start:2)]

[INCLUDE:Engine/Blueprints/GettingStarted/#Intro]

Does that mean Blueprints are a replacement for UnrealScript? Yes and no. Gameplay programming and everything that UnrealScript 
was used for in the past can still be handled through code using C++. At the same time, while Blueprints are not meant as a replacement 
for UnrealScript, they do serve many of the same purposes that UnrealScript handled, such as:

* Extending classes
* Storing and modifying default properties
* Managing subobject (e.g. Components) instancing for classes

The expectation is that gameplay programmers will set up base classes which expose a useful set of functions and properties 
that Blueprints made from those base classes can use and extend upon. 

[EXCERPT:GameplayEquivalents]
The table below provides a comparison of how various aspects would be handled in UnrealScript (from Unreal Engine 3), 
C++, and Blueprints to help those transitioning from previous versions of the engine as well as show how native code 
and Blueprints compare.

| UnrealScript (UE3)  | Blueprints (UE4)         | C++ (UE4)          |
| ------------------- | ------------------------ | ------------------ |
| .uc file            | Blueprint Asset          | .h/.cpp files      |
| UClass              | UBlueprintGeneratedClass | UClass             |
| extends [ClassName] | ParentClass              | : [ClassName]      |
| Variable            | Variable                 | UProperty()        |
| Function            | Graphs/Events            | UFunction()        |
| defaultproperties{} | Class Defaults           | native constructor |
| Default Components  | Components List          | native constructor |
[/EXCERPT:GameplayEquivalents]


For more high-level introductory information about Blueprints, see [](Engine/Blueprints\GettingStarted).

## Types of Blueprints

Blueprints can be one of several types that each have their own specific use from creating new types to scripting level 
events to defining interfaces or macros to be used by other Blueprints.


###Blueprint Class

[INCLUDE:Engine/Blueprints/UserGuide/Types/ClassBlueprint#Intro]


###Data-Only Blueprint

[INCLUDE:Engine/Blueprints/UserGuide/Types/ClassBlueprint#DataBlueprint]

###Level Blueprint

[INCLUDE:Engine/Blueprints/UserGuide/Types/LevelBlueprint#Intro]

###Blueprint Interface

[INCLUDE:Engine/Blueprints/UserGuide/Types/Interface#Intro]

###Blueprint Macro Library

[INCLUDE:Engine/Blueprints/UserGuide/Types/MacroLibrary#Intro]

###Blueprint Utilities

A **Blueprint Utility**, a.k.a. a **Blutility**, is an editor-only Blueprint that can be used to perform editor actions or extend 
editor functionality. These can expose [](Engine/Blueprints/UserGuide/Events) with no parameters as buttons in the UI 
and have the ability to execute any functions exposed to _Blueprints_ and act on the current set of selected Actors in the viewport.

##Blueprint Anatomy

The functionality of Blueprints is defined using various elements; some of which are present by default, 
while others can be added on an as-needed basis. These provide the ability to define Components, perform 
initialization and setup operations, respond to events, organize and modularize operations, define properties, 
and more.

[EXCERPT:Sections]
###Components Window

[INCLUDE:Engine/Blueprints/UserGuide/Components#Intro]

###Construction Script

[INCLUDE:Engine/Blueprints/UserGuide/UserConstructionScript#Intro]

###Event Graph

[INCLUDE:Engine/Blueprints/UserGuide/EventGraph#Intro]

###Functions

[INCLUDE:Engine/Blueprints/UserGuide/Functions#Intro]

###Variables

[INCLUDE:Engine/Blueprints/UserGuide/Variables#Intro]

[/EXCERPT:Sections]

[COMMENT:none]

### Blueprint Modes

A Blueprint's _mode_ determines what is visible in its window. Although Level Blueprints contain only one mode, the Graph mode, Blueprint Classes contain three different modes:

* **[Graph Mode](Engine/Blueprints\Editor\Modes\GraphPanel)** - Where you add and connect scripting nodes to create gameplay functionality for your level.
* **[Default Mode](Engine/Blueprints\Editor\Modes\Defaults)** - Where you set the defaults for the Blueprint.
* **[Components Mode](Engine/Blueprints\Editor\Modes\Components)** - Where you add, remove, and modify the components that make up your Blueprint.

For more information about Blueprint Class modes, see [](Engine/Blueprints\Editor\Modes).

[/COMMENT]
