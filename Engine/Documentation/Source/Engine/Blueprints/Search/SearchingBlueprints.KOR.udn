INTSourceChangelist:3782314
Availability:Public
Title: 블루프린트 검색
Crumbs: %ROOT%, Engine, Engine/Blueprints
Description:모든 블루프린트 색인에서 부터 고급 검색 문법까지, 블루프린트 검색 최대 활용법입니다.
version: 4.11
parent:Engine/Blueprints/Workflow
order:2
tags:Blueprints


## 블루프린트 검색

블루프린트 에디터에서, **툴바** 의 **검색** 을 클릭하거나 **Ctrl+F** 를 누르면 [찾기 결과](Engine/Blueprints/Editor/UIComponents/FindResults) 창이 뜹니다.
여기서 노드, 핀, 핀 값, 그래프, 변수, 변수 값이 검색어에 일치하는 블루프린트를 검색할 수 있습니다. 애니메이션 그래프를 검색할 수도 있습니다.

블루프린트의 노드나 **내 블루프린트** 창의 요소에 우클릭하고 **레퍼런스 찾기** 를 클릭해도 **찾기 결과** 창이 열리며, 
검색창에 요소 이름은 물론 요소의 MemberGuid 도 열립니다. 그러면 프로젝트에 이름이 같은 다른 부분이 있다 하더라도 
해당 변수나 함수를 구체적으로 검색할 수 있습니다.

검색은 비동기 프로세스로, 검색 완료를 기다릴 필요 없이 에디터를 계속 사용할 수 있습니다. 동시에 여러가지 다양한 검색을 하는 것도 가능합니다.
애셋 레지스트리에 검색 가능한 데이터가 있는지 확인, 가장 최근 색인된 데이터가 항상 애셋 파일과 함께 있도록 합니다.

기본적으로 이 툴은 현재 블루프린트를 검색하지만, **현재 블루프린트에서만** 옵션 체크를 해제하는 것으로 프로젝트의 모든 블루프린트를 검색할 수 있습니다. 블루프린트가 시스템에 색인되어 있지 않은 경우, 아래와 같은 그림으로 알려줍니다:

[REGION:lightbox]
[![](IndexingPrompt.png)](IndexingPrompt.png)
[/REGION]

**Index All** (모두 색인)을 클릭하면 에디터가 거의 멈출 정도로 매우 느린 프로세스가 진행되는데, 색인되지 않은 모든 블루프린트를 로드한 뒤 다시 저장하여 검색가능 데이터를 캐시에 저장합니다. 
콘텐츠를 다시 저장하고 싶지 않거나, 콘텐츠가 소스 컨트롤에 보호되어 있는데 체크아웃할 수 없는 경우, 그냥 모든 블루프린트 애셋을 로드하여 최신 검색가능 데이터를 메모리에 캐시합니다.
하지만 콘텐츠를 재저장하지 않는 경우, 에디터를 열 때마다 **모두 색인** 을 해 줘야 합니다.

![](IndexingWarning.png)


## 고급 검색 문법

필터는 블루프린트의 특정 데이터 부분집합을 대상으로 검색하는 고급 검색 기능입니다.
예를 들어, 특정한 이름의 노드가 있는 블루프린트 또는 특정한 이름이나 플래그가 설정되어 있는 프로퍼티만 따로 떼어낼 수 있습니다.
 이러한 부분을 중첩 결합시켜 매우 구체적인 부분까지 검색 가능한 고급 쿼리를 구성할 수 있습니다. 특정 필터는 다른 필터 안에서만 사용 가능하나, 모든 필터를 시작점으로 사용할 수 있습니다.
 아래는 검색가능 태그와, 어떤 종류의 데이터에 사용되는지가 나열된 불완전 목록입니다. 모든 태그는 필터 사용 없이 검색할 수 있습니다.
 
일부 아이템은 태그 없이 검색할 때 잡동사니가 제거되도록 하기 위해 태그를 사용해서만 검색할 수 있습니다. 이러한 아이템은 아래에 (명시적) 으로 마크되어 있습니다. 현재, 필터링은 사용자 추가된 멤버 변수에 제한되어 있습니다.

예제 검색 문자열로 `Nodes(Name=Coin)` 은 블루프린트에서 이름에 "coin" 이 들어간 모든 노드를 검색합니다.

[REGION:plainlist]
| 필터 | 검색가능 태그 | 서브필터 |
| -------- | --------------| ------------|
| 블루프린트 | [INCLUDE:#blueprinttags] | [INCLUDE:#blueprintsubfilters] |
| [INCLUDE:#functionfilter] | [INCLUDE:#functiontags] | [INCLUDE:#functionsubfilters]|
| 노드 | [INCLUDE:#nodetags] | 핀 |
| [INCLUDE:#pinfilter] | [INCLUDE:#pintags] | |
[/REGION]

[COMMENT:none]

[EXCERPT:BlueprintTags]
* 이름
* 부모클래스 (명시적)
* 경로 (명시적)
* 인터페이스 (명시적)
[/EXCERPT]

[EXCERPT:BlueprintSubFilters]
* 그래프
* 함수
* 매크로
* 이벤트 그래프
* 노드
* 핀
* 변수/프로퍼티
* 컴포넌트
[/EXCERPT]

[EXCERPT:FunctionFilter]
* 그래프
* 함수
* 매크로
* 이벤트 그래프
[/EXCERPT]

[EXCERPT:FunctionTags]
* 이름
* 설명
[/EXCERPT]

[EXCERPT:FunctionSubFilters]
* 노드
* 핀
* 변수/프로퍼티 (로컬 변수용)
[/EXCERPT]

[EXCERPT:NodeTags]
* 이름
* 클래스 이름 (명시적)
* 코멘트
[/EXCERPT]

[EXCERPT:PinFilter]
* 핀
* 변수/프로퍼티
* 코멘트
[/EXCERPT]

[EXCERPT:PinTags]
* 이름
* 기본 값
* 변수인지 (명시적)
* 레퍼런스인지 (명시적)
* SC 컴포넌트인지 (명시적)
* 핀 카테고리 (명시적)
* 오브젝트 클래스 (명시적)
[/EXCERPT]

[/COMMENT]               
            	
[REGION:tip]
 핀 카테고리는 핀의 유형으로, "bool", "string", "Actor", "MyBlueprint" 입니다. 오브젝트 클래스는 구조체 또는 핀/변수/컴포넌트로 나타나는 오브젝트입니다.
[/REGION]

### All 서브필터

`All` 은 특수한 서브필터입니다. 다른 필터에 중첩해서 사용하면, 그 안에 포함된 데이터는 그렇지 않을 경우 그냥 통과되어 버릴 자손 전부에 대해서도 검사를 합니다.

예: `Graphs(Name=MyFunction && All(Return))`

이름에 "MyFunction" 이 들어있는 그래프는 그 자손 (노드, 로컬 변수, 핀) 전부에 대해 "Return" 검사를 합니다.