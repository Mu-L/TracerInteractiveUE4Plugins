INTSourceChangelist:3244370
Availability:Public
Title:闪光灯
Crumbs: %ROOT%, Engine, Engine/Blueprints, Engine/Blueprints/UserGuide, Engine/Blueprints/UserGuide/Timelines
Description: 这是关于时间轴的应用示例，在这里示例中，我们设置了一个可以改变颜色的闪光灯。
version: 4.9
tags:Blueprints

%Description%

(#FlickeringLight)
## 闪光灯

在这个示例中，我们获得一个简单的点光源并操作它，使在玩家触发一个触发器时，该光源改变颜色，并开始闪烁，5秒后光源恢复为正常状态。

使用这个示例的好处是我们使用了时间轴中提供的三种不同类型的轨迹。


![](Timeline.png)(w:600)

所显示的光源将发生亮度闪烁并且会改变颜色。

(#Setup)
## 设置

时间轴提供了三种主要功能，每种功能有一种单独的轨迹：

1. **浮点型轨迹（称为Brightness（亮度））** 处理亮度的动画效果。该曲线是从 **内容浏览器** 中使用Flicker Curve资源添加的。
2.  **向量型轨迹** (称为Light Color（光源颜色）) 使光源的颜色产生变化。这样处理使得光源在序列开始时变为橘红色，然后在序列结尾处再变为白色。曲线插值设置为区间限定类型，这使得到下一帧之前该值仍然保持不变。
3.  **事件轨迹** (称为Trigger Toggle（触发器开关）) 在时间轴的序列播放过程中禁用我们的触发器。因为这是个事件轨迹，所以关键帧的值是无关的。任何时候，当时间轴遇到一个关键帧时，该轨迹的相关输出引脚发都会发出一个执行脉冲信号。



该网络的逻辑非常简单： 因为我们总是想让这个闪光灯从一个开始就运作，所以我们的事件连入了Play from Start（从开始处运行）引脚。然而，因为我们不想在播放过程中再次触发时间轴，所以我们判断一个布尔变量的值，该变量的唯一作用是判断改时间轴是否正在播放。

该变量的默认值为false，这意味着我们总是在第一次触摸触发器时播放时间轴。所以时间轴的执行过程如下所示：

* Brightness轨迹的结果乘以20来使得光源亮度变得更高。
* 光源的颜色也在下一个动作中发生了改变。
* 通过使用事件轨迹，我们触发一个FlipFlop 触发器，该触发器设置Is Timeline Playing变量为true。由于任何时候当某人触发了该触发器时都会判断该变量，所以一旦播放开始，我们就禁用该触发器。
* 随着播放结束，事件轨迹从Toggle Trigger 事件轨迹发出另一个脉冲信号，该信号再次触发FlipFlop(触发器)，将我们的布尔值还原，从而重新激活触发器。


**点击查看完整尺寸**

[REGION:lightbox]
[![FlickeringLightNetwork.png](FlickeringLightNetwork.png)(w:600)](FlickeringLightNetwork.png)
[/REGION]

