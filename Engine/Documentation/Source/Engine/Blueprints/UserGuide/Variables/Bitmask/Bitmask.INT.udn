Availability:Public
Title:Bitmask Blueprint Variables
Crumbs: %ROOT%, Engine, Engine/Blueprints, Engine/Blueprints/Scripting
Description: Blueprint integer variables can be declared as bitmasks to store binary flags in a more compact fashion.
version: 4.12
skilllevel:Intermediate
Parent:Engine/Blueprints
type:overview
tags:Blueprints
Topic-image:BitmaskBlueprintVariables_topic.png

[TOC (start:2)]

Blueprints now support declaring an integer variable as a bitmask. This allows individual mask bits (flags) to be set and unset through the editor rather than having to manually enter values. 
Additionally, _Blueprint Enumerations _can also be declared as a **Bitmask Flags** type for use as explicit bitflag identifiers.

## Creating Bitmask Variables

Any integer variable can also be created and declared as a bitmask when working with a _Blueprint Class_ in the **Blueprint Editor**. 

1. Create a  _Blueprint Enumeration_ that is also a bitflag enumeration type by toggling the **Bitmask Flags** attribute on in the _Blueprint
Enumeration Editor_. You could also use an existing bitflag enumeration type that was set up in C++ using the `BitmaskEnum=` metadata. 

	![image alt text](image_4.png)

1. In your _Blueprint_, create an integer variable and then enable the **Bitmask** attribute in the **Details** panel. 

	![image alt text](image_2.png)

	This equates to the `Bitmask` metadata in C++ code. 

1. Select your _Blueprint Enumeration_ (or existing bitflag enumeration) in the **Bitmask Enum** dropdown menu in the **Details** panel.

	![image alt text](image_5.png)
	
1. On the variable's **Set** node, you will be able to use the dropdown to select the variable's value. You can also set the default variable value in the **Details** panel after compiling the Blueprint. 

	![image alt text](image_3.png)



## Constructing Bitmasks at Runtime

Bitmask literals can be created in a _Blueprint Class_ graph via the **Make Bitmask** node. 

1. **Right-click** in your graph and type "Make Bitmask" in the context menu. 

1. Select **Make Bitmask**.

	![image alt text](image_6.png)

1. Click on the node, then look at the **Details** panel. Use the **Bitmask Enum** dropdown to change the enumeration type that is associated with the bitmask. As with integer variables defined within the class, only 
enumeration types with the **Bitmask Flags** attribute enabled will be listed in the dropdown.

	![image alt text](image_7.png)

1. On the node, you can now select the **Bitmask** to create.

	![image alt text](image_8.png)

## Bitmask Usage

Bitmasks are treated the same as an integer value in a Blueprint Graph. Bitmask integer output pins can be connected to any input pin that accepts an integer value; this will 
usually be the bitwise OR, AND, XOR and NOT operations.

In this first example, a single **Make Bitmask** node is passed to a **Bitwise XOR** node to toggle the **Red** flag stored in **Target Color Flags**. The enumeration storing the color values would also
have the **Bitmask Flags** attribute toggled on. 

![image alt text](image_9.png)

In the second example, the **Select** node, **Bitwise NOT**, and **Bitwise AND** nodes all take integers as inputs, so they can be used to select one of three sets of colors, toggle them, and then
save that result out to the **Target Color Flags** bitmask.

![image alt text](image_10.png)

