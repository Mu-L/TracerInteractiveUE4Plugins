INTSourceChangelist:3350015
Availability:Public
Title:Rendering コンポーネント
Crumbs:%ROOT%, Engine, Engine/Components
Description:レンダリング ベースのコンポーネントの概要。ParticleSystem コンポーネント、 Decal コンポーネント、Billboard コンポーネントなど。 
Related:Engine/Rendering
Related:Engine/Rendering/ParticleSystems
Related:Engine/Blueprints
Related:Engine/Blueprints/UserGuide/Components
Skilllevel:Beginner
Version:4.9
[TOC (start:2 end:2)]

## Atmospheric Fog コンポーネント

**AtmosphericFog コンポーネント** は、レベル内の雲やアンビエント フォグなどのフォグ エフェクト作成に使用します。このコンポーネントには、配置時にレベルでエフェクトがどのように生成されるかに影響を及ぼす調整可能な設定がいくつかあります。 

このタイプのコンポーネントで **Decay Height** 設定 (フォグ密度の減衰の高さを制御します。すなわち、値が低ければフォグの密度が高くなります。一方、値が高ければフォグが薄くなり、散乱が少なくなります) を様々な値に変えた使用例を以下に示します。詳細は、**[](Engine/Actors/FogEffects/AtmosphericFog)** ページをご覧ください。 

[INCLUDE:Engine/Actors/FogEffects/AtmosphericFog#examples]

## Exponential Height Fog コンポーネント

**ExponentialHeightFog (指数関数的高さフォグ) コンポーネント** は、フォグ エフェクト作成に使用しますが、フォグの高さに関連する密度も伴います。 

[INCLUDE:Engine/Actors/FogEffects/HeightFog#intro]

詳しい情報と調整可能な設定については、**[](Engine/Actors/FogEffects/HeightFog)** をご覧ください。 

## Billboard コンポーネント

**Billboard コンポーネント** は、常にカメラに向いてレンダリングされる 2D テクスチャです。配置と簡単な選択に使用できるという点において **Arrow コンポーネント** と機能が似ています。例えば、作成した以下のフォグ シートでは、追加したコンポーネントは **Billboard コンポーネント** だけです (実際のフォグ エフェクトはスクリプトによって動的に作成されるマテリアルです)。 

![](billboard1.png)

レベル内で、フォグ シートを操作できます。これは、 **Billboard コンポーネント** アイコン (これは指定可能なテクスチャです) を選択して行います。 

![](billboard2.png)

フォグ シートの作成方法例については、 **[](Resources/Showcases/BlueprintExamples/FogSheet)** のドキュメントをご覧ください。 

## Material Billboard コンポーネント

**MaterialBillboard コンポーネント** は、常にカメラに向いてレンダリングされる 2D マテリアルです。このタイプのコンポーネントの使用場所の例として、2D の草やフォリッジがあります。スタティックメッシュを使用して草むらや、個々の草の葉を表すのではなく、**MaterialBillboard コンポーネント** をマテリアルと併用して生えている草を表現します。草の 3D 表現を用意する必要はありません。ビルボードが自動的に回転し、プレイヤーの方を向きます。これにより、3 次元の草であるかのような錯覚を与えます。 


## Cable コンポーネント

**Cable コンポーネント** を使用すると、2 つのコンポーネント間のケーブルをレンダリングしながら 2 つのコンポーネントをアタッチすることができます。ケーブル上で、マテリアルを割り当て、ケーブルがどのように表示されるかに影響を与えるパラメータを定義することができます。Cable コンポーネントの詳しい使用方法については、以下のリンクをご覧ください。

* [Cable コンポーネントのユーザー ガイド](Engine\Components\Rendering\CableComponent\)


## Custom Mesh コンポーネント

**CustomMesh コンポーネント** では、カスタム仕様のトライアングル メッシュ ジオメトリを指定できます。 

## Poseable Mesh コンポーネント

**PoseableMesh コンポーネント** では、**ブループリント** でボーンを変形させることができます。 

## Decal コンポーネント

**Decal コンポーネント** はメッシュのサーフェス上にレンダリングするマテリアルです (モデルに対してバンパースティッカーのような役割を果たします)。デカールは数多くの用途に使用できます。例えば、銃撃時の壁への銃弾の衝撃デカール、道路に沿って生じた車のタイヤのスリップ痕デカール、銃撃されたときに地面に飛び散る血しぶきなどがあります (デカールの例は以下で示します)。 

![](Engine/Actors/DecalActor/Decal_1.png)(w:440)

デカールを使った作業の詳細については、以下のページをご覧ください。 

* **[](Engine/Actors/DecalActor)** 
* **[](Resources/ContentExamples/Decals/1_1)** 
* **[デカールのコンテンツ サンプル](Resources/ContentExamples/Materials#Decalsマップ)** 

## Instanced Static Mesh コンポーネント

**InstancedStaticMesh コンポーネント** は、同一スタティックメッシュの複数インスタンスを効率よくレンダリングするコンポーネントです。 
このタイプのコンポーネントは、プロシージャルなレベルや部屋を制作するうえで特に役立ちます。レベルに数百 (場合によっては数千) という **Static Mesh アクタ** を配置する代わりに、はるかに低いパフォーマンス負荷でひとつの **Instanced Static Mesh (インスタンス化されたスタティックメッシュ)** を配置し、そのスタティックメッシュの複数のインスタンス (例、花や壁) を追加できるからです。 

**InstancedStaticMesh** コンポーネントの作業とランダムな部屋をプロシージャルに生成する例については、[プロシージャルな部屋生成](https://wiki.unrealengine.com/Videos/Player?series=PLZlv_N0_O1ga0aV9jVqJgog0VWz1cLL5f&video=mI7eYXMJ5eI) の Wiki のトレーニング ストリームをご覧ください。 

## Particle System コンポーネント

**ParticleSystem コンポーネント** では、別のオブジェクトのサブオブジェクトとしてパーティクル エミッタを追加できます。**ParticleSystem コンポーネント** は、いくつかの理由から追加されます。破壊される何かに爆発エフェクトを追加したり、火をつける何かに炎のエフェクトを追加するなどが考えられます。このタイプのコンポーネントを別のオブジェクトに追加することで、スクリプトを通してゲームプレイ中にパーティクル エフェクトのパラメータにアクセスし、設定することができます (すなわち、エフェクトをオン、オフする)。 

例えば、以下はセキュリティ カメラであり、スパーク エフェクト用に **ParticleSystem コンポーネント** を追加しました。 

![](particle1.png)

スクリプトを通して、スパーク エフェクトはデフォルトでオフであるが、カメラで撮影時にはアクティベートするように指示しています。 

![](particle2.png)

詳細は **[](Engine/Rendering/ParticleSystems)** をご覧ください。 


## Post Process コンポーネント

**PostProcess コンポーネント** は **ブループリント** のポストプロセス コントロールを有効にします。**PostProcess コンポーネント** では利用可能であれば、ボリュームデータの設定に親 `UShape コンポーネント` を使用します。このタイプのコンポーネントは、ポストプロセス設定が適用されている場合にレベルのトーンを変えるために使用できます。例えば、ゲームで使用するデフォルトのポストプロセス設定を定義したことを想定します。プレイヤーが損傷を受けると (またはキルされる場合)、**Scene Color Tint** の黒白のトーンの設定をスクリプトを通して変更できます。 

詳細は、 **[](Resources/ContentExamples/PostProcessing)** または **[](Engine/Rendering/PostProcessEffects)** のドキュメントをご覧ください。 

## Scene Capture 2D コンポーネント

**SceneCapture2D コンポーネント** は、単一面からシーンの「スナップショット」をキャプチャして、レンダー ターゲットへ入力するために使用します。キャプチャ時および **Render Target** テクスチャ指定時 (他に設定がある中で特にこの設定) に **視野角 (FOV)** を制御するための設定があります。この使用例は、ミラー (以下参照) またはモニタ上のセキュリティ カメラ ビューを作成する場合が考えられます (**[](Resources/Showcases/BlueprintExamples/SecurityCameraAndAlarm)** を参照)。 

![](2dRender.png)(w:440)

上の画面では、**SceneCapture2D コンポーネント** を使用して **ブループリント** を作成し、**Render Target** テクスチャを割り当てました。これは、レベル内のジオメトリに適用する **マテリアル** として使用されました。詳細は、[**シーン キャプチャの 2D コンテンツ サンプル**](Resources/ContentExamples/Reflections/1_7) をご覧ください。 

## Scene Capture Cube コンポーネント

**SceneCaptureCube コンポーネント** は、6 つの面からシーンの「スナップショット」をキャプチャして、レンダー ターゲットへ入力するために使用します。 

![](Resources/ContentExamples/Reflections/1_6/Reflections_1_6_Header.png)(w:640)

ほとんどの場合、**SceneCapture2D コンポーネント** はシーン キャプチャのニーズを満たすはずですが、背景の 3D キャプチャが必要な場合はこのタイプのコンポーネントを使用することができます。ただし、使用方法には注意してください。これらはパフォーマンス的に非常に負荷が高いものであり、絶対に必要な場合に限り使用するようにします。レベル内で反射を作成するために使用可能な様々な方法についての情報は、 **[](Resources/Showcases/Reflections)** をご覧ください。 

## Spline Mesh コンポーネント

**SplineMesh コンポーネント** を使用して、Static Mesh アセットを伸縮することができます。**SplineMeshes コンポーネント** では、スプラインの位置のベクターと開始および終了のタンジェントを設定しなければなりません。以下では、**SplineMesh コンポーネント** が **ブループリント** に追加され、パイプの **スタティックメッシュ** が影響を与えるアセットとして割り当てられました。 

![](splinemesh.png)(w:800)

コンポーネント自体の位置とタンジェントのベクターを指定しながら、スクリプトを使用してこれらを変数として設定し、以下のようにエディタ ビューポート内で編集できるように公開できます。 

![](splinemesh2.png)

上の画面では、**Start Transform** と **End Transform** をアクタ全体の動きとは個別に動かし、必要に応じて伸縮または回転させることができます。この例とセットアップは、**[](Resources/ContentExamples/Blueprint_Splines)** のコンテンツ サンプルのマップ内にあります。 

## Text Render コンポーネント

**TextRender コンポーネント** は任意のフォントでワールドにテキストをレンダリングします。このコンポーネントには、スケール、アラインメント、カラーなどの通常のフォント関連の属性が含まれます。このコンポーネントを使用して、オブジェクトがレベル内でインタラクション可能なものとして示すことができます。 

例えば、プレイヤーが近づき、ボタンを押せば座ることができる椅子がレベルにあるとします。プレイヤーが入るとテキストの可視性を true に設定する (以下参照) トリガーとして使用する **Box コンポーネント** と共に、座るコマンドを実行するために必要な命令を含む **TextRender コンポーネント** を追加(可視性はオフに設定) することができます。 

![](text1.png)(w:800)

ゲーム内でプレイヤーがトリガーに入ると、 **TextRender コンポーネント** テキストが表示され、プレイヤーに座り方を知らせます。 

![](text2.png)(w:500)


## Vector Field コンポーネント

**VectorField コンポーネント** は、 [**ベクターフィールド**](Engine/Rendering/ParticleSystems/VectorFields) を参照するために使用します。ベクターフィールドはベロシティ ベクターのグリッド付きの 3D コンテナで、GPU スプライトのベロシティまたは加速度を決定するために使用します。 
ベクター フィールドは、レベル内での突風などの小規模エフェクトから、大規模なブリザード (猛吹雪) まで使用することができます。詳細は [**ローカル ベクターフィールド**](Resources/ContentExamples/EffectsGallery/2_A) および [**グローバル ベクターフィールド**](Resources/ContentExamples/EffectsGallery/2_B) をご覧ください。 

![](Resources/ContentExamples/EffectsGallery/2_B/image050.png)(w:640)










