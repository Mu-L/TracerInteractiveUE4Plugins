Availability:Public
Title:Shape Components
Crumbs:%ROOT%, Engine, Engine/Components
Description:Overview of the different types of Shape Components that can be added. 
Related: Engine/Physics/Collision
Related: Engine/Physics/PhysicsBodies
Related: Engine/Landscape/Editing/Splines
Related: Resources/ContentExamples/Blueprint_Splines
Related: Engine/Blueprints/UserGuide/Components
SkillLevel: Beginner
Version: 4.9

The Shape Components can be used to create collision or triggers around other objects, indicate orientation or create paths. 

## Arrow Component

The **ArrowComponent** is a simple arrow rendered using lines and is useful for indicating which way an object should face. As seen in the door example below, the arrow indicates which way the door should face when placed in the level (as the door may be scripted to only open one way, the direction in which the arrow is facing). 

![](arrow_component.png)(w:720)

The actual arrow will not show up in-game (unless the _Hidden in Game_ option is unchecked) and the color and size can be adjusted as desired. This Component does not have any collision settings and could poentially also be used as a "marker" for your scripts (for example, adding an **ArrowComponent** to a **CharacterBlueprint** just above the characters shoulder, then when the player presses a button, having the **CameraComponent** move to the location of the **ArrowComponent** creating an over-the-shoulder style camera). 

## Box Component

A **BoxComponent** is a box generally used for simple collision (can also be used as a trigger as in shown in the example below). 

![](box_trigger.png)

A **BoxComponent** was added around a fire particle effect, with its collision settings set to **Generate Overlap Events**. When something overlaps the box, an event will be fired where you execute script that applies damage to the Actor that overlaps it. You could also set the [Collision Response](Engine/Physics/Collision) to **BlockAll** which would prevent all Actors from entering the box (if you wanted to keep things from entering the fire). 


## Capsule Component

The **CapsuleComponent** is a capsule shape which can also be used as simple collision (shown below) or as a trigger. 

![](capsule_component.png)

Above a **CapsuleComponent** is automatically included when creating a new **Character Blueprint** and provides the collision settings for the character, keeping them from intersecting with objects in the world. The **CapsuleComponent** can also **Generate Overlap Events** or **Generate Hit Events** to allow you to provide scripts for when either of those events occur. 


## Sphere Component

**SphereComponents** are spherical shapes that can be used for collision (ie. collision around projectiles as shown below). 

![](sphere_component.png)

Just as with the Box and Capsule Components, you can set the [**Collision Responses**](Engine/Physics/Collision) to generate the type of collision functionality you need. 

## Spline Component

A **SplineComponent** can be used to make streets or complex paths (in which other Components can follow). Below a **SplineComponent**, **BillboardComponent** and **ParticleSystemComponent** were added to a **Blueprint** with the intent of having the particle system following the defined path created by the spline. 

![](spline_component.png)

Inside the Editor Viewport, you can edit the spline by **Right-clicking** on the Actor that has **SplineComponent**. This will bring up a context menu with options like adding points to the spline or defining the type of spline point to use. Below, a path was created to represent the outline of the Unreal Engine logo. 

![](spline_component2.png)(w:440)

After providing some **Blueprint** script to update the location of the particle effect, the end result is represented below. 

![](spline_component4.png)(w:440)







