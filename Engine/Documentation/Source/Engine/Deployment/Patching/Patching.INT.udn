Availability: Public
Title: Patching Overview
Description: Creating updated content packages which allow you to update your project after release.
Version: 4.21
Parent: Engine/Deployment
Order: 2


[TOC (start:2 end:5)]

Once you have released your project, you will probably make updates to it after the initial release. This process is known as **patching**. Patching usually includes new content that addresses known issues, or that fixes vulnerabilities in the original release.

## Different Methods for Patching

There are several methods for creating patches, but they all use one of two approaches. One approach keeps files from the original release or previous patches, but adds a pointer to new content. The other approach is to transform the content in the original build using a binary patch.

[REGION:note]
**Note:** You can build patches in Unreal Engine 4 (UE4) for many different platforms. However, we do not support distribution of patches for your project. Each platform has their own system for uploading patch files, and for distributing those patch files to users. For information on these platform-specific distribution systems, see the documentation for that platform's Software Development Kit (SDK).
[/REGION]

## Platform-Agnostic Patching Method

There is a method for creating patches in Unreal Engine 4 that will technically work on any platform. This method packages the entire build with new content, while the changes between the two builds are placed in a sidecar file that is added to the original file. The new PAK file is labeled with a “_p” suffix. For example, if the original build file is called `MyGamesStuff.pak`, your patch file would be called `MyGamesStuff_p.pak`.

### Windows Patching

Windows uses the method described in [Platform-Agnostic Patching Method](#platform-agnosticpatchingmethod) .

[REGION:note]
For more information on platform-agnostic patching, see [How to Create a Patch](Engine/Deployment/HowToCreatePatch).
[/REGION]

[PUBLISH:XboxOne]
## Xbox One Patching

Xbox One performs a file comparison to distinguish new files from existing files. However, because UE4 packages all project elements into one file, Xbox One cannot use this file comparison system to distinguish new content from original content. That is because all content is packaged together into one PAK file. Because of this, if you want to patch Xbox One projects in UE4, you must use the method described in [Platform-Agnostic Patching Method](#platform-agnosticpatchingmethod).

[/PUBLISH]
[PUBLISH:PS4]
## PS4 Patching

Sony's method of patching is to separate the patch into data chunks. The system then compares the binary data in each of those chunks to the original data stored on the console. Only new data is downloaded to the console. Instead of creating a PAK file, like the platform-agnostic method, you would just create a new PS4 build that contains the new content. Then you would use the Sony SDK tools to upload the patch file to Sony's system, using the previous build as the first input and the new build as the second input.

[/PUBLISH]
[PUBLISH:Switch]
## Nintendo Switch Patching

The patching process for titles on the Nintendo Switch is somewhat complicated due to features unique to the Switch platform. Developers need to make sure that the patch interacts with the following areas with no negative consequences:

*   Save Data

*   DLC content

*   Local communication (connecting to other Switch consoles nearby)

[REGION:note]
**Note:** For more information, see [Patching for Nintendo Switch](Platforms/Switch/Patching).
[/REGION]
[/PUBLISH]