INTSourceChangelist:3782314
Availability:Public
Title: レベル ストリーミングの概要
Crumbs:%ROOT%, Engine, Engine/UI/LevelEditor
Description:ストリーミング レベルは、Level Streaming Volume あるいはブループリントまたは C++ でプログラム的にロードすることができます。
Version:4.12
parent:Engine/LevelStreaming
type:reference
order:1
tags:Level Streaming
topic-image:streaming_topic.png


[INCLUDE:Engine/LevelStreaming#intro]

## パーシスタント レベル

レベルをシームレスにブレンドするために、まず パーシスタント レベルを作成します。これは、ストリームインおよびストリーム アウトするレベルを管理するために 
主に使用するマスター レベルと考えることができます。 

## ストリーミング レベル

ストリーミング レベルは [**Levels** ウィンドウ](Engine/Levels/LevelsWindow) で管理します。パーシスタント レベルをオーバーラップしたり、オフセットしてより大きいワールドを作成することができます。参加する各エージェントは、 
**[Always Loaded (常にロード)]** または **[Blueprint (ブループリント)]** に設定することができます。この設定は、サブレベルを右クリックして表示される **[Levels (レベル)]** ウィンドウで切り替えることができます。

ストリーミング レベルを **[Always Loaded (常にロード)]** に設定した場合、パーシスタント レベルも一緒にロードされます。同時にパーシスタント レベルとして表示もされます。 
ブループリントまたは C++ から送られたロード / アンロード要求、および割り当てられたストリーミング ボリュームを無視します。このタイプのサブレベルは、アーティスト同士が邪魔することなく同時に共同作業ができるように、 
通常はパーシスタント レベルで複数の「レイヤー」にするためにコンテンツの分割に使われることが多いです。このワークフローの詳細は、
[](Engine/Levels/CollaborateWithSublevels) をご覧ください。ゲームでは、ゲームがパーシスタント レベルを変更しない限り、**Always Loaded** サブレベルは決してストリーミングされません。 


[OBJECT:ComparisonSlider]
	[PARAM:before]
	![Persistent Level Alone](PersistentLevel.png)(w:700)
	[/PARAM]
	[PARAM:after]
	![After Streaming In Levels](StreamedInLevels.png)(w:700)
	[/PARAM]
[/OBJECT]

### ダイナミック ストリーミング メソッド

**Blueprint** ストリーミング タイプのあるストリーミング レベルは実際、Level Streaming Volume、ブループリント、C++ コードで制御することができます。これらのレベルは、
動的にロード / アンロードすることができます。 

### Level Streaming Volume

**Level Streaming Volume** を使うと、レベル ストリーミングが非常に簡単にできるようになります。発想はシンプルです。視点がレベルと関連づいている LevelStreamingVolume ボリューム内にあるかどうかによって、 
ストリーミング レベルに対するロード / アンロードのリクエストが発行されます。

具体的には、Level Streaming Volume は 2 通りの使い方があります。

* **ゲーム** では、Level Streaming Volumes を使って、レベルがプレイヤーの視点がボリューム内にあればロードし、プレイヤーの視点がボリューム外にあればアンロードします。
* **エディタ** では、パースペクティブ ビューポート カメラの位置に合わせてレベルを自動的に表示 / 非表示にして、Level Streaming Volumes を使ってレベル ストリーミングをプレビューすることができます。

ボリューム ベースのレベル ストリーミングは使い方が簡単な上にスクリプト処理が必要ないので、レベル ストリーミングの制御には理想的です。さらに、ボリューム ベースはスクリプト処理に比べてはるかに管理が容易です。 
システムのロード要求が変化しても、ストリーミング ボリュームの大きさを変更すればレベルのロード / アンロード ビヘイビアを修正できます。

* [](Engine/LevelStreaming/StreamingVolumes "%Engine/LevelStreaming/StreamingVolumes:description%")
* [](Engine/LevelStreaming/HowTo/StreamWithVolumes "%Engine/LevelStreaming/HowTo/StreamWithVolumes:description%")

### スクリプト レベル ストリーミング

レベルのロード / アンロードをより複雑な設定にしたい場合は、ドアを解除する上記の例と同様に、 
レベルのロード / アンロードに対してブループリントあるいは C++ ロジックを設定することができます。主要な機能は **Load Stream Level** と **Unload Stream Level** です。ロードするレベルを名前で使用します。 

**Load Stream Level** と **Unload Stream Level** の他に、**Get Streaming Level** 関数を使うと、ストリーミングのビヘイビアをさらに動的にすることができます。実際のレベル ストリーミング オブジェクトへのアクセスが可能になるので、
そのステートの修正とクエリが可能になります。**Create Instance** と一緒に使えば、特定のサブレベルの作成とストリーミングが可能になります。
これらのコピーにトランスフォームを適用し、パラメータを送れば、プロシージャルなワールドを作成することができます。 

* [](Engine/LevelStreaming/HowTo/StreamWithBlueprints "%Engine/LevelStreaming/HowTo/StreamWithBlueprints:description%")
* [](Engine/LevelStreaming/HowTo/StreamWithCPP "%Engine/LevelStreaming/HowTo/StreamWithCPP:description%")
