INTSourceChangelist:3669916
Availability:Docs
Crumbs: %ROOT%
Title:Niagara の主要概念
Description:アンリアル エンジンとパーティクル エディタである Niagara でパーティクルを扱う際の重要な考え方について説明します。
Type:Overview
SkillLevel:Beginner
Version:4.17
Parent:Engine/Niagara 
Order:2
Tags:Getting Started
topic-image:Engine\Niagara\NiagaraSocial.png

[TOC(start:2 end:2)]

Niagara エディタを使うと、アンリアル エンジン 4 (UE4) のプロジェクトのニーズに対応し、リアルタイムで幅広い視覚効果を作成することができます。プレイヤーに対するエフェクトから、背景のエフェクトまで、Niagara はプロジェクトが必要とするどんな視覚効果でも処理する柔軟性とパワーを備えています。以下のドキュメントでは、Niagara とカスケードの違いについて、および Niagara エディタの様々な構成要素がどのように機能するかについての概要を説明します。 

## パーティクル エフェクトに対するモジュール式アプローチ

カスケードでうまく行かなかった概念として、エフェクトの作成にできる限りモジュール性を与えるというものがあります。これは、何らかの新規エフェクトを作成した場合に、デフォルトのモジュール セットがあり、どのようなエフェクトにするかに応じてエフェクト アーティストがモジュールや全く新しいエミッターを追加することで対応していました。このシステムは数年間、うまく機能していましたが、いくつかの小さな問題があり、エフェクト間でのデータの共有や一度に多くのエフェクトを更新するなどのタスクは時間がかかりエラーが生じがちでした。 

[REGION:lightbox]
[![](NKC_00.png)(w:764)](NKC_00.png)
[/REGION]

[REGION:caption]
この画像は、**カスケードパーティクル システム** が複数のエミッターが集まって構成されていることを示しています。
[/REGION]

こうした問題に対処するために、Niagara ではパーティクル システムを構成する個々のエミッターを切り離し、モジュール性という考え方を大事にしました。パーティクル システムに各エミッターがあるのではなく、**Niagara システム** は多くの個別の **Niagara エミッター** で構成されます。Niagara エミッターには、使い慣れた様々なモジュールによって制御される個々のエフェクトがあります。例えば、パーティクルの挙動と外観を調整する **Lifetime**、**Location**、および **Size** などのモジュールがあります。ただし、Niagara エミッターはコンテンツ ブラウザで保存される独立したアクタであるため、作成する Niagara システムで更新、共有が可能になり、長時間かけることなく、エミッターに大量の変更を加えることができます。

[REGION:lightbox]
[![](NKC_01.png)(w:764)](NKC_01.png)
[/REGION]

[REGION:caption]
この画像は、**Niagara システム** が複数のエミッターの集まりで構成されていることを示しています。
[/REGION]

## Niagara エミッター

Niagara エミッターを作成し開くと、**[Selected Emitter]** タブにいくつかのデフォルト モジュールがあります。このタブ内に、展開および編集が可能な以下の 5 種類のオプションがあります。以下の各セクションは、エミッターのスポーン方法とライフタイムでどのような挙動をするかに影響を及ぼします。

[REGION:lightbox]
[![](NKC_02.png)(w:620)](NKC_02.png)
[/REGION]

* **Emitter Spawn**
    * エミッターが起動するとこのセクションが実行します。これは後の方のスクリプトで使用可能なワンタイム セットアップを行う点で、ブループリントのコンストラクション スクリプトに似ています。個々のパーティクルは参照できませんが、エミッターの変数の設定、エミッター モジュールの実行、パーティクルのスクリプトで使用する変数の設定を行うことができます。
* **Emitter Update**
    * このセクションは、エミッターがアクティブ中の全フレームで実行されます。スポーンするパーティクル数、パーティクルの更新スクリプトで使用する定数値の計算、エミッターのフレーム毎のその他のティック ロジックを行います。このセクションの Emitter Lifecycle モジュールで、すべてのライフサイクルのロジックが各エミッターについて実行されるようにして、システムを適切にシャットダウンできるようにすることが重要です。
* **Particle Spawn**
    * このセクションは、パーティクルが発生するたびに一回実行されます。このセクションを使ってパーティクルの初期状態を設定します。エミッターが Interpolated Spawn (補間されたスポーン) を使用するように設定されていない場合、このセクションからの出力はレンダリングされる第一フレームのパーティクルの状態を定義します。Interpolated Spawn が起こると、パーティクルは突然バーストするのではなく、ひとつ前のフレームからの時間範囲で均一に広がり、フレームが作成されてから、フレームのごく一部の各パーティクルに対して更新スクリプトが実行されます。これにより、トレイル (軌跡) が滑らかになり、パーティクルの更新スクリプトで、レンダリングされる第一フレームのパーティクルの状態を定義することができます。各パーティクルで違いを付けてランダムにする必要があれば、スポーン スクリプトでランダム値を選んで、その値を後続のティックで使うために保存すると良いでしょう。
* **Particle Update**
    * このセクションは個々のパーティクルのライフタイム中の挙動を制御します。物理シミュレーションの属性、レンダリングの属性などに対する変更は、すべてこのセクション内で行うことができます。データを他のエミッターに送信する必要があれば、イベントを放出するモジュールをこのセクションで実行させることができます。ここでは、各パーティクルの存在時間が経過し、ライフタイムが終了したら最終的に消滅するために Update Age モジュールを持つことが重要です。
* **Add Event Handler**
    * Add Event Handler セクションは、このエミッターがコリジョンや他のエミッターから入ってくるイベントにどのように反応するかを決めます。 

## Niagara システム 

プロジェクトで Niagara エミッターを使うには、まず Niagara エミッターを **Niagara システム** に配置します。Niagara システムは、エフェクトのために作成された個々の Niagara エミッターを表示するために使われます。既存エミッターだけを使って様々な Niagara エミッターを非常に簡単に組み合わせて全く新しいエフェクトを生み出すことができます。

[REGION:lightbox]
[![](NKC_08.png)(w:620)](NKC_08.png)
[/REGION]

 Niagara システムに Niagara エミッターを追加するには、コンテンツ ブラウザから Niagara エミッターを **タイムライン** の **Track** セクションまでドラッグする必要があります。 

[REGION:lightbox]
[![](NKC_07.png)(w:600)](NKC_07.png)
[/REGION]

タイムラインに配置した Niagara エミッターを選択して、**[Selected Emitter]** パネルに進み必要なプロパティを調整することができます。

[REGION:lightbox]
[![](NKC_09.png)(w:250)](NKC_09.png)
[/REGION]




