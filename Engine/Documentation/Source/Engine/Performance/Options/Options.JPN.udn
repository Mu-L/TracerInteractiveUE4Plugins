INTSourceChangelist:2742006
Availability:Public
Title:エンジン機能レベルの調整
Crumbs: %ROOT%, Engine
Description:コンソール変数とコマンドあるいはコマンドラインを調整して機能を変更する方法
Navigation:topic
version:4.9


## コンソール変数とコマンド

ゲーム コンソールあるいはエディタ出力ログ / コンソールなどで、実行時に一定の機能を切り替えることができます。
コンソール変数の多くは、様々なプラットフォームのレンダリング品質をスケールする役割を果たします。
(BaseScalability.ini を見る、エディタ UI を使用する、 sg. コンソール変数または Scalability コンソール変数)

便利なものは、ほとんどがプロファイリング用です。

| コンソール変数 | 説明 |
| -------- | ----------- |
| **r.SetRes** | スクリーン / ウィンドウの解像度を変更します。 |
| **r.VSync** | VSync を有効 / 無効にします (ネイティブのフルスクリーンに依存する場合があります).|
| **r.ScreenPercentage** | 内部のレンダリング解像度を減らすため、画像は他のパスからアップサンプリングを行います。上記をご覧ください。|
| **r.AllowOcclusionQueries** | オクルージョンを無効にします (シーンを遅くします)。|
| **r.TiledDeferredShading** | タイルベースのディファード ライティング技術を使用するか、いつ使用するかを調整することができます (GPU パーティクル ライトにはフォールバックがありません)。 |
| **r.TiledDeferredShading.MinimumCount** | タイルベースのディファード ライティング技術の使用に必要なライト数を調整します (見た目は変わりませんが、パフォーマンスに違いが出ます)。|
| **Pause** | ゲームあるいはマチネを停止します (プロファイリングの信頼性は格段にあがりますが、更新 / ティックが無効になります)。 |
| **Slomo** | 時間を遅くしたり加速したりします。 |
| **r.VisualizeOccludedPrimitives** | オクルージョンされたプリミティブのバウンディング ボックスを表示します。|
| **StartFPSChart** **StopFPSChart** | 以下をご覧ください。|
| **r.SeparateTranslucency** | DOF で透過を修正する機能です。必要がなければ無効にすることが可能で、他の影響もあります (シーンカラーの読み取り)。|
| **r.Tonemapper.GrainQuantization** | 量子化ビット数が 8 ビットの場合、カラー バンディングを避けるためにトーンマッパに追加するノイズを無効にします。若干品質が向上します。 10:10:10 出力の場合は必要ありません。|
| **r.SceneColorFormat** | 異なるサブサーフェス スキャタリングを使用できるようになります (デフォルトは最高品質およびサブサーフェス スキャタリングをサポートするために 64 ビットになっています)。|
| **FX.AllowGPUSorting** |パーティクル ソーティングを無効にします (パーティクルを数多く使用する場合に役立ちます)。|
| **FX.FreezeParticleSimulation** | パーティクルの更新を無効にします。|
| **r.SSR.MaxRoughness** | ポストプロセス設定をオーバーライドするために、スクリーン空間反射のラフネスの最大値を調整します。表示フラグ VisualizeSSR を参照してください。|



## コマンドラインのオプション

一部の機能は、**_UE4.exe -NoSound_** などのコマンドラインで無効にできます。
便利なものは、ほとんどがプロファイリング用です。

| コマンドライン オプション | 説明 |
| -------- | ----------- |
| **-NoSound** | サウンドと音楽のシステムを無効にします。 |
| [REGION:nowrap]**-NoTextureStreaming**[/REGION] | テクスチャ ストリーミングを無効にします (処理落ちの発生場所を切り離すのに便利です)。 |
| **-NoVerifyGC** | これを行わないと、リリースビルドで約 30 秒毎に大きな処理落ちが予測されます。 |
| **-NoVSync** | レンダリングは速くなりますが、画像のティアリングが生じる場合があります。特に、高 FPS では重要になります。 |
| **-Streaming** | (クック オンザフライの使用を前提として) さらに検討するためにクック処理する PC へウィンドウ以外のデバイスからデータを取得する際に StartFPSChart/StopFPSChart と使うと便利です。|

## コンパイル オプション

Debug ビルドではプロファイルあるいはパフォーマンスの測定は行わないでください。便宜上、パフォーマンスのプロファイリングとパフォーマンスに対する作業は Development ビルドで行うことをお勧めします。
Shipping ビルドの実際のパフォーマンスが本当のターゲットですが、開発機能がほとんどないので、速度だけが速くなります。 Test は Shipping とほぼ同じように動きますが、
無効のコード機能がまだ幾つかあります (コンソール、統計値ユニットなど)。






