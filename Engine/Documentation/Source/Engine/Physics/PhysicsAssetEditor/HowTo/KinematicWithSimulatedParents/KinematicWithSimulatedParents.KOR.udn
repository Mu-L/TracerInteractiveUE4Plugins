INTSourceChangelist:6344815
Availability: Public
Title:시뮬레이션 부모가 있는 키네마틱 바디 사용법
Crumbs: %ROOT%, Engine
Description:시뮬레이션 부모가 있는 키네마틱 피직스 바디 셋업 안내입니다.
parent:Engine/Physics/PhysicsAssetEditor/HowTo
order:1
Version: 4.16
skilllevel:Intermediate
topic-image:KinematicHowTo_04.png
checkpoint: editorqs
Related: Engine/Physics/PhysicsAssetEditor
Related: Engine/Physics/PhysicsAssetEditor/Reference
type:how-to
tags:Physics
tags:Kinematic
tags:PhAT

[](Engine/Physics/PhysicsAssetEditor) 에는 시뮬레이션 부모가 있는 키네마틱 피직스 바디를 만드는 기능을 포함해서, 피직스 바디 시뮬레이션을 위한 여러가지 다양한 방법이 제공됩니다.
자손 바디는 애니메이션 데이터로, 부모 바디는 피직스 시뮬레이션 데이터로 구동시키는 구성이 가능합니다.
매달린 상태의 대기 또는 이동 애니메이션을 재생하는 도중 물리 기반 반응을 내도록 하려는 캐릭터가 있는 경우 좋습니다.

여기서는 시뮬레이션 바디가 있는 키네마틱 바디를 사용하여 턱에 걸린 상태에서도 나머지 바디는 물리 시뮬레이션이 적용되는 캐릭터 효과를 만들어 보도록 하겠습니다.

![](EndResultImage.png)

## 단계

[REGION:note]
여기서는 **블루프린트 삼인칭 템플릿** 프로젝트에 **시작용 콘텐츠** 를 포함시켜 사용하고 있습니다.
[/REGION]

1.  프로젝트의 **Content/Mannequin/Character/Mesh** 폴더에서 **SK_Mannequin_PhysicsAsset** 을 엽니다. 

	![](KinematicHowTo_01.png)

1.	**계층구조** 창에서 **All Bones** (모든 본) 드롭다운을 클릭한 뒤 **Bones With Bodies** (바디가 있는 본)으로 변경합니다. 

	![](KinematicHowTo_02.png)

	그러면 계층구조 창에 바디가 있는 본만 표시되어 조작하려는 본을 선택하기가 쉬워집니다.

1.	계층구조 목록에서 **Ctrl** 을 누르고 **hand_l** 과 **hand_r** 본을 둘 다 선택한 뒤, **디테일** 패널에서 **Physics Type** 을 **Kinematic** 으로 변경합니다. 

	![](KinematicHowTo_03.png)

	이 본을 키네마틱으로 설정하면, 피직스 시뮬레이션이 아닌 애니메이션 데이터를 따릅니다.

	또는, 계층구조 목록에서 본을 **우클릭** 하면 펼쳐지는 메뉴에서 그 **Physics Type** 을 설정해도 됩니다.

	![](KinematicHowTo_04.png)

	이 옵션은 현재 본 아래 자손 바디의 **Physics Type** 프로퍼티를 설정해 줍니다.

1.	뷰포트 빈 공간에 클릭하여 모든 본 선택을 해제한 뒤, **디테일** 패널에서 **Physics Update Mode** (피직스 업데이트 모드)를 **Component Transform is Kinematic** (컴포넌트 트랜스폼은 키네마틱)으로 설정합니다. 

	![](KinematicHowTo_05.png)

	이 옵션은 루트 바디의 시뮬레이션이 컴포넌트 트랜스폼을 업데이트할지 키네마틱인지 결정합니다.

1.	툴바에서 **시뮬레이트** 버튼을 클릭합니다.

	![](KinematicHowTo_06.png)

	뷰포트의 캐릭터가 주저앉으면서 손으로 매달린 듯이 보일 것입니다.

	![](KinematicHowTo_07.png)

1.	툴바에서, **애니메이션** 선택 아이콘을 클릭한 뒤, **ThirdPersonJump_Loop** 애니메이션을 선택합니다.

	![](KinematicHowTo_08.png)

	손은 (키메나틱으로 설정되어 있으므로) ThirdPersonJump_Loop 모션에 들어있는 애니메이션 데이터를 따를 것입니다.

	![](KinematicHowTo_09.png)

1.	메인 에디터 창에서 **SK_Mannequin_PhysicsAsset** 을 끌어 레벨에 놓고, **디테일** 패널에서 **Physics Transform Update Mode** (피직스 트랜스폼 업데이트 모드)를 **Component Transform is Kinematic** (컴포넌트 트랜스폼은 키네마틱)으로 설정합니다. 

	![](KinematicHowTo_10.png)

1.	**SkeletalMeshComponent** 를 선택한 뒤, **Animation Mode** (애니메이션 모드)를 **Use Animation Asset** (애니메이션 애셋)으로, **Anim to Play** (재생할 애님)을 **ThirdPersonJump_Loop** 로 설정합니다. 

	![](KinematicHowTo_11.png)

1.	툴바의 **플레이** 를 클릭하여 에디터에서 플레이합니다.

## 최종 결과

아래는 턱 근처에 캐릭터를 배치해 두고 달려가 부딛히면 물리 반응을 하면서 손이 살짝 수정되는 것을 볼 수 있습니다.

[OBJECT:EmbeddedVideo]
	[PARAMLITERAL:videoid]
	9IrH75GvdU8
	[/PARAMLITERAL]
	[PARAMLITERAL:width]
	100
	[/PARAMLITERAL]
	[PARAMLITERAL:height]
	56.25
	[/PARAMLITERAL]
	[PARAMLITERAL:units]
	%
	[/PARAMLITERAL]
	[PARAMLITERAL:type]
	simple
	[/PARAMLITERAL]
[/OBJECT]

위에 사용한 애니메이션이 이상적이지 않은 반면, 같은 개념을 턱에 매달려 이동하는 캐릭터 애니메이션에 적용한 것이 아래입니다.

[OBJECT:EmbeddedVideo]
	[PARAMLITERAL:videoid]
	7SB3IrnWOjw
	[/PARAMLITERAL]
	[PARAMLITERAL:width]
	100
	[/PARAMLITERAL]
	[PARAMLITERAL:height]
	56.25
	[/PARAMLITERAL]
	[PARAMLITERAL:units]
	%
	[/PARAMLITERAL]
	[PARAMLITERAL:type]
	simple
	[/PARAMLITERAL]
[/OBJECT]

팔과 머리는 키네마틱으로 (아래 금색 박스 부분) 설정된 반면, 나머지는 시뮬레이션이 적용됩니다.

![](ExampleSetup.png)



	




	













