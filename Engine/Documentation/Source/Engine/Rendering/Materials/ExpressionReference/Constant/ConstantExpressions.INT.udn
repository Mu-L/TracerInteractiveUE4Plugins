Availability:Public
Title:Constant Expressions
Crumbs: %ROOT%, Engine, Engine/Rendering/Materials, Engine/Rendering/Materials/ExpressionReference
Description:Expressions where the values of the outputs generally do not change once set in the editor or when play begins.
Version: 4.9
tags:Materials

[EXCERPT:TOC]
[TOC(start:2)]
[/EXCERPT:TOC]

%Description%

## Constant

The **Constant** expression outputs a single float value. It is one of the most commonly used expressions and can be connected to any input, regardless of the number of channels the input expects. For instance, if you connect a Constant to an input expecting a 3 Vector, the constant value will be used for all 3 elements. When supplying a single number, it can be useful to collapse the node using the small triangle icon in the description area.

| Item | Description |
| -------- | ----------- |
| [REGION:tablesection]Properties[/REGION] ||
| **R** | Specifies the float value the expression outputs. |


**Examples:** 0.7, -0.24, 1.1

![ConstantExample.png](ConstantExample.png)

[REGION:tip]
You can quickly create a Constant node by holding the **1** key and **Left Mouse Click** in the graph area of the Material Editor.
[/REGION]

[EXCERPT:Constant2vector]
## Constant2Vector

The **Constant2Vector** expression outputs a two-channel vector value, in other words, two constant numbers.

| Item | Description |
| -------- | ----------- |
| [REGION:tablesection]Properties[/REGION] ||
| **R** | Specifies the float value of the red (first) channel of the vector the expression outputs. |
| **G** | Specifies the float value of the green (second) channel of the vector the expression outputs. |

**Examples:** (0.4, 0.6), (1.05, -0.3)

**Example Usage:** The Constant2Vector is useful for modifying texture coordinates, as they are two-channel values as well.

[REGION:fullwidth]
![Constant2Example.png](Constant2Example.png)
[/REGION]

[REGION:tip]
You can quickly create a Constant2Vector node by holding the **2** key and **Left Mouse Click** in the graph area of the Material Editor.
[/REGION]

[/EXCERPT:Constant2vector]

[EXCERPT:Constant3vector]
## Constant3Vector

The **Constant3Vector** expression outputs a three-channel vector value, in other words, three constants numbers.  An RGB color can be thought of as a Constant3Vector, where each channel is assigned to a color (red, green, blue).

| Item | Description |
| -------- | ----------- |
| [REGION:tablesection]Properties[/REGION] ||
| **R** | Specifies the float value of the red (first) channel of the vector the expression outputs. |
| **G** | Specifies the float value of the green (second) channel of the vector the expression outputs. |
| **B** | Specifies the float value of the blue (third) channel of the vector the expression outputs. |


**Examples:** (0.4, 0.6, 0.0), (1.05, -0.3, 0.3)

[REGION:fullwidth]
![Constant3Example.png](Constant3Example.png)
[/REGION]

[REGION:tip]
You can quickly create a Constant3Vector node by holding the **3** key and **Left Mouse Click** in the graph area of the Material Editor.
[/REGION]

[/EXCERPT:Constant3vector]

[EXCERPT:Constant4Vector]
## Constant4Vector

The **Constant4Vector** expression outputs a four-channel vector value, in other words, four constants numbers.  An RGBA color can be thought of as a Constant4Vector, where each channel is assigned to a color (red, green, blue, alpha).

| Item | Description |
| -------- | ----------- |
| [REGION:tablesection]Properties[/REGION] ||
| **R** | Specifies the float value of the red (first) channel of the vector the expression outputs. |
| **G** | Specifies the float value of the green (second) channel of the vector the expression outputs. |
| **B** | Specifies the float value of the blue (third) channel of the vector the expression outputs. |
| **A** | Specifies the float value of the alpha (fourth) channel of the vector the expression outputs. |

**Examples:** (0.4, 0.6, 0.0, 1.0), (1.05, -0.3, 0.3, 0.5)

![Constant4Example.png](Constant4Example.png)

[REGION:tip]
You can quickly create a Constant4Vector node by holding the **4** key and **Left Mouse Click** in the graph area of the Material Editor.
[/REGION]

[/EXCERPT:Constant4Vector]

[EXCERPT:DiscanceCullFade]
## Distance Cull Fade

The DistanceCullFade expression outputs a scalar value that fades from black to white and can be used to fade an object in once it comes within the cull distance. It should be noted that it does not fade the object out. 

![DistanceCullFadeExample.png](DistanceCullFadeExample.png)

This network will cause the object to fade in (instead of "popping") once the camera comes within the cull distance.

[/EXCERPT:DiscanceCullFade]


[INCLUDE:Engine/Rendering/Materials/ExpressionReference/Particles#ParticleColor]


[INCLUDE:Engine/Rendering/Materials/ExpressionReference/Particles#ParticleDirection]


[INCLUDE:Engine/Rendering/Materials/ExpressionReference/Particles#ParticleMotionBlurFade]


[INCLUDE:Engine/Rendering/Materials/ExpressionReference/Particles#ParticleRadius]


[INCLUDE:Engine/Rendering/Materials/ExpressionReference/Particles#ParticleRelativeTime]


[INCLUDE:Engine/Rendering/Materials/ExpressionReference/Particles#ParticleSize]


[INCLUDE:Engine/Rendering/Materials/ExpressionReference/Particles#ParticleSpeed]


## PerInstanceFadeAmount

The **PerInstanceFadeAmount** expression outputs a float value associated with the amount of fade applied to an instanced Static Mesh, such as foliage. It is constant, but can be a different number for each individual instance of a mesh.

[REGION:note]
This only works when applied to an InstancedStaticMesh Actor or other Actor which utilizes InstancedStaticMeshComponents.
[/REGION]

## PerInstanceRandom

The **PerInstanceRandom** expression outputs a different random float value per Static Mesh instance to which the material is applied. InstancedStaticMeshComponent sets a random float for instance, which is exposed so that it can be used for whatever is desired (e.g. random light level behind a window). It is constant, but different, for each instance of the mesh.

The output value will be a whole number between 0 and RAND_MAX for the target platform.

![](PerInstRandomResult.png)(h:402) ![](PerInstanceRandomGraph.png) 

[REGION:note]
This only works when applied to an InstancedStaticMesh Actor or other Actor which utilizes InstancedStaticMeshComponents.
[/REGION]



[EXCERPT:Time]
(#Time)
## Time

The **Time** node is used to add the passage of time to a material, such as a [Panner](Engine/Rendering/Materials/ExpressionReference/Coordinates#Panner), [Cosine](Engine/Rendering/Materials/ExpressionReference/Math#Cosine), or other time-dependent operation.

| Item | Description |
| -------- | ----------- |
| [REGION:tablesection]Properties[/REGION] ||
| **Ignore Pause** | If _true_, time will continue to march on even if the game is paused. |
| **Period** | If _true_, this will be the amount at which to wrap around time. On Mobile Materials, this will perform the Period computation on the CPU at full-precision, whereas on the GPU it will run at half precision (potentially having issues on periods longer than a minute). |

[REGION:fullwidth]
![TimeExample.png](TimeExample.png)
[/REGION]
The network described in the image above would create a Material that would change over time, constantly exhibiting a sinusoidal transition between white and black.  If you enable period, setting period to 0 will effectively stop the transition and 1 will be as if period was _false_.  Setting the number closer to 0 will make the material change at a more rapid pace.


[/EXCERPT:Time]

## TwoSidedSign

The **TwoSidedSign** expression is useful for flipping the normal on backfaces of two sided custom lighting materials to match the functionality of Phong. +1 for frontfaces, -1 for backfaces of a twosided material.

![exp_twosidedsign.png](exp_twosidedsign.png)


## VertexColor

The **VertexColor** expression is the access point for the material to the outputs of color modules affecting sprite particles emitters.

| Item | Description |
| -------- | ----------- |
| [REGION:tablesection]Outputs[/REGION] ||
| **RGB** | Outputs the three-channel RGB vector value of the color. |
| **R** | Outputs the red channel of the color. |
| **G** | Outputs the green channel of the color. |
| **B** | Outputs the blue channel of the color. |
| **A** | Outputs the alpha channel of the color. |

![](VertexColorExample.png)

The network above would utilize color and alpha data directly from a Particle System. Such networks are ideal for special effects such as sparks.

(#ViewProperty)
## View Property

The ViewProperty expression outputs a view dependant constant property such as the field of view or the render target size. The view property to be accessed can be configured, and the type of the output depends on the configured accessed property.

[REGION:fullwidth]
![ViewPropertyExample.png](ViewPropertyExample.png)
[/REGION]

Here is the example with a field of view of 50 degrees.
[REGION:fullwidth]
![ViewPropertyExampleFOV50.png](ViewPropertyExampleFOV50.png)
[/REGION]

Here is the same example with a field of view of 90 degrees.
[REGION:fullwidth]
![ViewPropertyExampleFOV90.png](ViewPropertyExampleFOV90.png)
[/REGION]

## Precomputed AO Mask

The **PrecomputedAOMask** node lets you access Lightmass-calculated ambient occlusion (AO) in your Material,
 which can be useful for procedural texturing or for adding in aging effects and dirt in areas where it would slowly accumulate over time.

[region:note]
Before you can see the results of the Precomputed AO Mask, you will need to build the lighting of the level you are working in using Lightmass.
[/region]

![](PrecompitedAOMas_00.png)

The above screenshot uses an AO mask to blend a dirt layer automatically into corners of the environment.
To use AO masks, you'll need to enable both **Use Ambient Occlusion** and **Generate Ambient Occlusion Material Mask** under **World Settings -> Lightmass settings**, and then build lighting. 
The other AO controls like **Max Occlusion Distance** can be useful to tweak the look of the AO. 
Also make sure to set both **Direct** and **Indirect Occlusion Fraction** to **0**, so that this AO will not be applied to the actual level lighting.

![](PrecompitedAOSettings_00.png)

You can access the AO in any Material by using the **PrecomputedAOMask** Material Expression node. 
The PrecomputedAOMask works as a 0 to 1 mask with 1 providing areas that are affected by AO and 0 for areas that are not.
In the image below you can see how how to set up a Material to make use of the Precomputed AO Mask.

![](PrecomputedAO_Material_00.png)
