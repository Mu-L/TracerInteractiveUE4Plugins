Availability:Public
Title:Constant 表現式
Crumbs: %ROOT%, Engine, Engine/Rendering/Materials, Engine/Rendering/Materials/ExpressionReference
Description:一度エディタに設定される、またはプレイが開始すると出力値が通常変化しない表現式
Version:4.9

[EXCERPT:TOC]
[TOC(start:2)]
[/EXCERPT:TOC]

%Description%

## Constant

**Constant** 表現式は単精度浮動小数点値を出力します。Constant は、最もよく使用される表現式の 1 つで、入力のチャンネル数に関係なく入力と接続します。例えば、 Constant を 3 Vector が期待される入力へ接続した場合、定数値は 3 つすべてのエレメントに使用されます。数が 1 つだけ提供された場合は、説明領域の小さな三角のアイコンを使ってノードを折りたためむと便利です。

| アイテム | 説明 |
| -------- | ----------- |
| [REGION:tablesection]プロパティ[/REGION] ||
| **R** | 表現式が出力する浮動小数点値を特定します。 |


**例： ** 0.7, -0.24, 1.1

![ConstantExample.png](ConstantExample.png)

[REGION:tip]
**1** キーを押してマテリアル エディタのグラフ領域を **クリック** すると、Constant ノードをすぐに作成できます。
[/REGION]

[EXCERPT:Constant2vector]
## Constant2Vector

**Constant2Vector** は、2 チャンネルのベクター値を出力します。つまり、2 つの定数です。

| アイテム | 説明 |
| -------- | ----------- |
| [REGION:tablesection]プロパティ[/REGION] ||
| **R** | 表現式が出力する赤の (最初の) チャンネルの浮動小数点値を指定します。 |
| **G** | 表現式が出力する緑の (2 番目の) チャンネルの浮動小数点値を指定します。 |

**例： ** (0.4, 0.6), (1.05, -0.3)

**使用例：** Constant2Vector もまた、2 チャンネルの値なので、テクスチャ座標の修正に実用的です。

[REGION:fullwidth]
![Constant2Example.png](Constant2Example.png)
[/REGION]

[REGION:tip]
**2** キーを押してマテリアル エディタのグラフ領域を **クリック** すると Constant2Vector ノードをすぐに作成できます。
[/REGION]

[/EXCERPT:Constant2vector]

[EXCERPT:Constant3vector]
## Constant3Vector

**Constant3Vector** 表現式は、3 チャンネルのベクター値を出力します。つまり、3 つの定数です。RGB カラーは各チャンネルが色に割り当てられる (赤、緑、青) Constant3Vector として考えられます。

| アイテム | 説明 |
| -------- | ----------- |
| [REGION:tablesection]プロパティ[/REGION] ||
| **R** | 表現式が出力する赤の (最初の) チャンネルの浮動小数点値を指定します。 |
| **G** | 表現式が出力する緑の (2 番目の) チャンネルの浮動小数点値を指定します。 |
| **B** | 表現式が出力する青の (3 番目の) チャンネルの浮動小数点値を指定します。 |


**例： ** (0.4, 0.6, 0.0), (1.05, -0.3, 0.3)

[REGION:fullwidth]
![Constant3Example.png](Constant3Example.png)
[/REGION]

[REGION:tip]
**3** キーを押してマテリアル エディタのグラフ領域を **クリック** すると Constant3Vector ノードをすぐに作成できます。
[/REGION]

[/EXCERPT:Constant3vector]

[EXCERPT:Constant4Vector]
## Constant4Vector

**Constant4Vector** 表現式は、4 チャンネルのベクター値を出力します。つまり、4 つの定数です。RGB カラーは各チャンネルが色に割り当てられる (赤、緑、青、アルファ) Constant4Vector として考えられます。

| アイテム | 説明 |
| -------- | ----------- |
| [REGION:tablesection]プロパティ[/REGION] ||
| **R** | 表現式が出力する赤の (最初の) チャンネルの浮動小数点値を指定します。 |
| **G** | 表現式が出力する緑の (2 番目の) チャンネルの浮動小数点値を指定します。 |
| **B** | 表現式が出力する青の (3 番目の) チャンネルの浮動小数点値を指定します。 |
| **A** | 表現式が出力するアルファの (4 番目の) チャンネルの浮動小数点値を指定します。 |

**例： ** (0.4, 0.6, 0.0, 1.0), (1.05, -0.3, 0.3, 0.5)

![Constant4Example.png](Constant4Example.png)

[REGION:tip]
**4** キーを押してマテリアル エディタのグラフ領域を **クリック** すると Constant4Vector ノードをすぐに作成できます。
[/REGION]

[/EXCERPT:Constant4Vector]

[EXCERPT:DiscanceCullFade]
## Distance Cull Fade

DistanceCullFade 式は、黒から白へフェードさせるスカラー値を出力し、オブジェクトがカリング距離に近づいた時点でオブジェクトをフェードインさせることが出来ます。オブジェクトをフェードアウトさせないことにご留意ください。 

![DistanceCullFadeExample.png](DistanceCullFadeExample.png)

このネットワークでは、カメラがカリング距離に近づくと、オブジェクトが次第に明るくなる、フェードイン (ポッピングの代わりに) が生じます。

[/EXCERPT:DiscanceCullFade]


[INCLUDE:Engine/Rendering/Materials/ExpressionReference/Particles#ParticleColor]


[INCLUDE:Engine/Rendering/Materials/ExpressionReference/Particles#ParticleDirection]


[INCLUDE:Engine/Rendering/Materials/ExpressionReference/Particles#ParticleMotionBlurFade]


[INCLUDE:Engine/Rendering/Materials/ExpressionReference/Particles#ParticleRadius]


[INCLUDE:Engine/Rendering/Materials/ExpressionReference/Particles#ParticleRelativeTime]


[INCLUDE:Engine/Rendering/Materials/ExpressionReference/Particles#ParticleSize]


[INCLUDE:Engine/Rendering/Materials/ExpressionReference/Particles#ParticleSpeed]


## PerInstanceFadeAmount

**PerInstanceFadeAmount** 表現式は、例えばフォリッジのような、インスタンス化されたスタティックメッシュに適用されるフェード量に関連した float 値を出力します。出力値は定数ですが、メッシュの個々のインスタンスに対し異なる数値になります。

[REGION:note]
InstancedStaticMesh アクタ、または InstancedStaticMeshComponents を利用する別のアクタに適用時のみ機能します。
[/REGION]

## PerInstanceRandom

**PerInstanceRandom** 表現式は、マテリアルが適用されるスタティックメッシュのインスタンスごとに異なるランダムな float 値を出力します。InstancedStaticMeshComponent はランダムな浮動小数点値をインスタンスに設定しますが、必要に応じてどこでも利用できるようにエクスポーズされています (例えば窓の後方のランダムな光源レベル)。出力値は定数ですが、個々のメッシュのインスタンスに対し異なる値となります。

出力値は、ターゲットプラットフォームに対して 0 から RAND_MAX 間の整数になります。

![](PerInstRandomResult.png)(h:402) ![](PerInstanceRandomGraph.png) 

[REGION:note]
InstancedStaticMesh アクタ、または InstancedStaticMeshComponents を利用する別のアクタに適用時のみ機能します。
[/REGION]



[EXCERPT:Time]
(#Time)
## Time

**Time** ノードは、 [Panner](Engine/Rendering/Materials/ExpressionReference/Coordinates#Panner)、[Cosine](Engine/Rendering/Materials/ExpressionReference/Math#Cosine) その他時間に依存する演算など、マテリアルに時間の推移を追加する際に使用されます。

| アイテム | 説明 |
| -------- | ----------- |
| [REGION:tablesection]プロパティ[/REGION] ||
| **Ignore Pause** | _true_ の場合、ゲームが一時中断されても時間は経過します。|
| **Period** | _true_ の場合、 タイムをラップする量となります。Mobile マテリアル上では、単精度で CPU の Period 演算を行います。GPU 上では、半精度で実行します (継続時間が 1 分を超えると問題が発生する可能性があります)。 |

[REGION:fullwidth]
![TimeExample.png](TimeExample.png)
[/REGION]
上の画像で描かれているネットワークでは、白と黒の間で正弦波的な遷移を常に表しながら時間経過と共に変化するマテリアルを作成します。Period を有効にすると、Period を 0 に設定することで遷移を効果的に停止し、1 に設定すると Period があたかも _false_ のようになります。値を 0 に近づけるほど、マテリアルの変更するペースが速くなります。


[/EXCERPT:Time]

## TwoSidedSign

**TwoSidedSign** 表現式は、Phong の機能と一致させるために両面カスタム ライティング マテリアルの背面で法線を反転させる場合に使うと便利です。＋1 は表面へ、-1 は、両面マテリアルの背面へ反転します。

![exp_twosidedsign.png](exp_twosidedsign.png)


## VertexColor

**VertexColor** 表現式は、スプライト パーティクル エミッターに影響を及ぼすカラー モジュールの出力を目的とした、マテリアルのアクセス ポイントです。

| アイテム | 説明 |
| -------- | ----------- |
| [REGION:tablesection]出力値[/REGION] ||
| **RGB** | カラーの 3 チャンネルの RGB ベクター値を出力します。 |
| **R** | カラーの赤チャンネルを出力します。 |
| **G** | カラーの緑チャンネルを出力します。 |
| **B** | カラーの青チャンネルを出力します。 |
| **A** | カラーのアルファ チャンネルを出力します。 |

![](VertexColorExample.png)

このネットワークでは、カラーとアルファ データをパーティクル システムから直接使います。火花などの特別なエフェクトには、このようなネットワークが理想です。

(#ViewProperty)
## View Property

ViewProperty 表現式は、視野角やレンダリング ターゲット サイズなど、ビューに依存する定数プロパティを出力します。アクセスするビュー プロパティは設定可能であり、出力のタイプは、こうして設定しアクセスしたプロパティに依存します。

[REGION:fullwidth]
![ViewPropertyExample.png](ViewPropertyExample.png)
[/REGION]

これは、視野角が 50 度の例です。
[REGION:fullwidth]
![ViewPropertyExampleFOV50.png](ViewPropertyExampleFOV50.png)
[/REGION]

同じ例の視野角を 90 度にしました。
[REGION:fullwidth]
![ViewPropertyExampleFOV90.png](ViewPropertyExampleFOV90.png)
[/REGION]

## Precomputed AO Mask

**PrecomputedAOMask** により、マテリアル内でライトマスが計算されたアンビエント オクルージョンにアクセスすることができます。
 プロシージャルなテクスチャ化、あるいは時間が経つと徐々に古くなる領域に劣化エフェクトや汚れを追加する場合に便利です。

[region:note]
Precomputed AO Mask の結果を確認するには、ライトマスを使って作業するレベルのライティングをビルドする必要があります。
[/region]

![](PrecompitedAOMas_00.png)

上のスクリーンショットでは、背景の隅に自動的い汚れのレイヤーをブレンドするために AO マスクが使われています。
AO マスクを使用するには、**[World Settings (ワールド設定)]** -> **[Lightmass settings (ライトマス設定)]** で **[Use Ambient Occlusion (AO を使用)]** と [Generate Ambient Occlusion Material Mask (AO マテリアル マスクを生成)] の両方を有効にする必要があります。 
**Max Occlusion Distance** などの他の AO 制御は、AO の外観を微調整するのに便利です。 
(**Direct Occlusion Fraction** および **Indirect Occlusion Fraction** を **0** に設定し、この AO が実際のレベルのライティングに適用されないようにしてください。)

![](PrecompitedAOSettings_00.png)

**PrecomputedAOMask** マテリアル表現式ノードを使って、すべてのマテリアルの AO にアクセスすることができます。 
PrecomputedAOMask は AO の影響を受けた領域に 1、そうでない領域を 0 として、0 と 1 でマスクします。
Precomputed AO Mask を使うためのマテリアルの設定は、下図のようになります。

![](PrecomputedAO_Material_00.png)
