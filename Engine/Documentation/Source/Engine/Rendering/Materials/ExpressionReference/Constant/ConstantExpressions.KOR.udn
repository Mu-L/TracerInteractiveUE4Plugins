INTSourceChangelist:3242329
Availability:Public
Title:Constant 표현식
Crumbs: %ROOT%, Engine, Engine/Rendering/Materials, Engine/Rendering/Materials/ExpressionReference
Description:값이 에디터에서 한 번 설정되거나 플레이가 시작되면 일반적으로 출력의 값이 변하지 않는 표현식입니다.
Version: 4.9
tags:Materials

[EXCERPT:TOC]
[TOC(start:2)]
[/EXCERPT:TOC]

%Description%

## Constant

Constant (상수) 표현식은 실수 값 하나를 출력합니다. 입력에서 바라는 채널 수와 상관없이 어떤 입력에도 연결할 수 있는 가장 흔한 표현식 중 하나입니다. 예를 들어 3 벡터를 기대하는 입력에 상수를 연결하면, 그 상수값이 3 요소 모두에 사용됩니다. 수치값 하나를 줄 때는, 설명 부분의 작은 삼각형 아이콘을 사용하여 노드를 접는 것이 좋습니다.

| 항목 | 설명 |
| --- | --- |
| [REGION:tablesection]프로퍼티[/REGION] ||
| **R** | 표현식이 출력하는 실수 값을 나타냅니다. |


**예:** 0.7, -0.24, 1.1

![ConstantExample.png](ConstantExample.png)

[REGION:tip]
머티리얼 에디터의 그래프 영역에서 **1** 키를 누른 채 클릭하면 Constant 노드를 빠르게 만들 수 있습니다.
[/REGION]

[EXCERPT:Constant2vector]
## Constant2Vector

Constant2Vector 표현식은 2채널 벡터 값, 다른 말로 상수 둘을 출력하는 표현식입니다.

| 항목 | 설명 |
| --- | --- |
| [REGION:tablesection]프로퍼티[/REGION] ||
| **R** | 표현식이 출력하는 벡터의 빨강 또는 첫 번째 채널의 실수 값을 나타냅니다. |
| **G** | 표현식이 출력하는 벡터의 초록 또는 두 번째 채널의 실수 값을 나타냅니다. |

**예:** (0.4, 0.6), (1.05, -0.3)

**사용 예:** Constant2Vector 는 마찬가지로 2채널 값을 사용하는 텍스처 좌표 변경에 좋습니다.

[REGION:fullwidth]
![Constant2Example.png](Constant2Example.png)
[/REGION]

[REGION:tip]
머티리얼 에디터의 그래프 영역에서 **2** 키를 누른 채 클릭하면 Constant2Vector 노드를 빠르게 만들 수 있습니다.
[/REGION]

[/EXCERPT:Constant2vector]

[EXCERPT:Constant3vector]
## Constant3Vector

Constant3Vector 표현식은 3채널 벡터 값, 다른 말로 상수 셋을 출력하는 표현식입니다. 각 채널마다 (빨강, 초록, 파랑) 한 가지씩 색이 할당되는 RGB 컬러를 예로 들 수 있습니다.

| 항목 | 설명 |
| --- | --- |
| [REGION:tablesection]프로퍼티[/REGION] ||
| **R** | 표현식이 출력하는 벡터의 빨강 또는 첫 번째 채널의 실수 값을 나타냅니다. |
| **G** | 표현식이 출력하는 벡터의 초록 또는 두 번째 채널의 실수 값을 나타냅니다. |
| **B** | 표현식이 출력하는 벡터의 파랑 또는 세 번째 채널의 실수 값을 나타냅니다. |


**예:** (0.4, 0.6, 0.0), (1.05, -0.3, 0.3)

[REGION:fullwidth]
![Constant3Example.png](Constant3Example.png)
[/REGION]

[REGION:tip]
머티리얼 에디터의 그래프 영역에서 **3** 키를 누른 채 클릭하면 Constant3Vector 노드를 빠르게 만들 수 있습니다.
[/REGION]

[/EXCERPT:Constant3vector]

[EXCERPT:Constant4Vector]
## Constant4Vector

Constant4Vector 표현식은 4채널 벡터 값, 다른 말로 상수 넷을 출력하는 표현식입니다. 각 채널마다 (빨강, 초록, 파랑, 알파) 한 가지씩 색이 할당되는 RGBA 컬러를 예로 들 수 있습니다.

| 항목 | 설명 |
| --- | --- |
| [REGION:tablesection]프로퍼티[/REGION] ||
| **R** | 표현식이 출력하는 벡터의 빨강 또는 첫 번째 채널의 실수 값을 나타냅니다. |
| **G** | 표현식이 출력하는 벡터의 초록 또는 두 번째 채널의 실수 값을 나타냅니다. |
| **B** | 표현식이 출력하는 벡터의 파랑 또는 세 번째 채널의 실수 값을 나타냅니다. |
| **A** | 표현식이 출력하는 벡터의 알파 또는 네 번째 채널의 실수 값을 나타냅니다. |

**예:** (0.4, 0.6, 0.0, 1.0), (1.05, -0.3, 0.3, 0.5)

![Constant4Example.png](Constant4Example.png)

[REGION:tip]
머티리얼 에디터의 그래프 영역에 **4** 키를 누른 채 클릭하면 Constant4Vector 노드를 빠르게 만들 수 있습니다.
[/REGION]

[/EXCERPT:Constant4Vector]

[EXCERPT:DiscanceCullFade]
## Distance Cull Fade

DistanceCullFade 표현식은 검정에서 하양으로 페이드해 들어가는 스칼라 값을 출력하며, Cull Distance 안에 들어온 오브젝트를 페이드 인 시키는 데 사용할 수 있습니다. 참고로 페이드 아웃은 아니됩니다.

![DistanceCullFadeExample.png](DistanceCullFadeExample.png)

카메라가 Cull Distance 안에 들어오면 오브젝트가 ("뿅" 튀어나오는 대신) 서서히 나타나게 만드는 네트워크 입니다.

[/EXCERPT:DiscanceCullFade]


[INCLUDE:Engine/Rendering/Materials/ExpressionReference/Particles#ParticleColor]


[INCLUDE:Engine/Rendering/Materials/ExpressionReference/Particles#ParticleDirection]


[INCLUDE:Engine/Rendering/Materials/ExpressionReference/Particles#ParticleMotionBlurFade]


[INCLUDE:Engine/Rendering/Materials/ExpressionReference/Particles#ParticleRadius]


[INCLUDE:Engine/Rendering/Materials/ExpressionReference/Particles#ParticleRelativeTime]


[INCLUDE:Engine/Rendering/Materials/ExpressionReference/Particles#ParticleSize]


[INCLUDE:Engine/Rendering/Materials/ExpressionReference/Particles#ParticleSpeed]


## PerInstanceFadeAmount

PerInstanceFadeAmount 표현식은 Foliage 처럼 인스턴싱된 스태틱 메시에 적용할 페이드 양에 관계된 float 값을 출력합니다. 그 값은 상수이긴 하나 메시의 각 인스턴스 별로 수치가 달라질 수는 있습니다.

[REGION:note]
이 표현식은 InstancedStaticMesh 액터나 InstancedStaticMeshComponents 를 활용하는 다른 액터에 적용되었을 때만 작동합니다.
[/REGION]

## PerInstanceRandom

PerInstanceRandom 은 머티리얼이 적용된 스태틱 메시 인스턴스마다 다른 랜덤 실수값을 출력하는 표현식입니다. InstancedStaticMeshComponent 는 인스턴스에 임의의 실수값을 설정하며, 이는 (창문 뒤 밝기가 제각각인 불빛 등) 원하는 대로 사용할 수 있도록 노출됩니다. 메시의 각 인스턴스마다 달라지긴 하지만, 상수입니다.

출력값은 0 에서 대상 플랫폼의 RAND_MAX 사이 정수가 됩니다.

![](PerInstRandomResult.png)(h:402) ![](PerInstanceRandomGraph.png) 

[REGION:note]
이 표현식은 InstancedStaticMeshComponents 를 활용하는 액터나 InstancedStaticMesh 액터에 적용되었을 때만 작동합니다.
[/REGION]



[EXCERPT:Time]
(#Time)
## Time

Time 노드는 [Panner](Engine/Rendering/Materials/ExpressionReference/Coordinates#Panner), [Cosine](Engine/Rendering/Materials/ExpressionReference/Math#Cosine) 이나 다른 시간 의존 연산을 하는 머티리얼에 시간의 흐름을 더하는 데 사용됩니다.

| 항목 | 설명 |
| --- | --- |
| [REGION:tablesection]프로퍼티[/REGION] ||
| **Ignore Pause** | _True_ 면 게임이 일시정지되어도 시간은 계속 흘러갑니다. |
| **Period** | _True_ 면 이 기간만큼 구간 반복합니다. 모바일 머티리얼에서는 CPU 에서 최대 정밀도로 Period 계산을 하는 반면, GPU 에서는 절반 정밀도로 계산합니다 (1 분 이상의 긴 기간에 문제가 있을 수 있습니다). |

[REGION:fullwidth]
![TimeExample.png](TimeExample.png)
[/REGION]
위 이미지에 설명된 망은 시간의 흐름에 따라 흑백 사이를 사인 곡선같은 모양으로 전환되는 머티리얼을 만들어 줍니다. Period 옵션을 켠 경우, 0 으로 설정하면 사실상 전환이 중지되고, 1 이 되면 Period 가 _False_ 인 효과가 납니다. 수치를 0 에 가깝게 설정하면 머티리얼이 보다 빠른 속도로 변화하게 됩니다.


[/EXCERPT:Time]

## TwoSidedSign

TwoSidedSign 는 양면 커스텀 라이팅 머티리얼 뒷면의 노멀을 뒤집어 Phong 과 같은 기능을 내도록 하기에 좋은 표현식입니다. 양면 머티리얼의 앞면은 +1, 뒷면은 -1 입니다.

![exp_twosidedsign.png](exp_twosidedsign.png)


## VertexColor

VertexColor 표현식은 스프라이트 파티클 이미터에 영향을 끼치는 컬러 모듈 출력으로의 머티리얼에 접근해 볼 수 있는 곳입니다.

| 항목 | 설명 |
| --- | --- |
| [REGION:tablesection]Outputs[/REGION] ||
| **RGB** | 색의 3채널 RGB 벡터 값 출력입니다. |
| **R** | 색의 빨강 채널 출력입니다. |
| **G** | 색의 초록 채널 출력입니다. |
| **B** | 색의 파랑 채널 출력입니다. |
| **A** | 색의 알파 채널 출력입니다. |

![](VertexColorExample.png)

위의 망은 파티클 시스템의 컬러와 알파 데이터를 직접 활용합니다. 이러한 망은 스파크같은 특수 효과에 이상적입니다.

(#ViewProperty)
## View Property

ViewProperty 표현식은 필드 오브 뷰나 렌더 타깃 사이즈같은 뷰 종속 상수 프로퍼티를 출력합니다. 접근할 뷰 프로퍼티에 대한 환경설정이 가능하며, 출력 유형은 환경설정된 접근 프로퍼티에 따라 달라집니다.

[REGION:fullwidth]
![ViewPropertyExample.png](ViewPropertyExample.png)
[/REGION]

필드 오브 뷰가 50 도인 예제입니다.
[REGION:fullwidth]
![ViewPropertyExampleFOV50.png](ViewPropertyExampleFOV50.png)
[/REGION]

같은 예제에 필드 오브 뷰가 90 도입니다.
[REGION:fullwidth]
![ViewPropertyExampleFOV90.png](ViewPropertyExampleFOV90.png)
[/REGION]

## Precomputed AO Mask

**PrecomputedAOMask** (미리계산된 AO 마스크) 노드는 머티리얼에서 라이트매스 계산된 앰비언트 오클루전(AO)에 접근할 수 있도록 해 주어,
 자동 텍스처링이나 영역 내 시간에 따라 서서히 쌓여가는 먼지 및 노화 이펙트를 추가하는 데 좋습니다.

[region:note]
미리계산된 AO 마스크 결과 확인을 위해서는, 라이트매스를 사용하여 작업중인 레벨의 라이팅을 빌드해 줘야 합니다.
[/region]

![](PrecompitedAOMas_00.png)

위 스크린샷은 AO 마스크를 사용하여 먼지 레이어를 배경 구석에 자동으로 블렌딩해 줍니다.
AO 마스크를 사용하려면, **월드 세팅 -> 라이트매스 세팅** 아래 **Use Ambient Occlusion** 과 **Generate Ambient Occlusion Material Mask** 옵션을 둘 다 켜준 뒤 라이팅을 빌드해야 합니다.
**Max Occlusion Distance** 같은 다른 AO 컨트롤은 AO 모습 트윅 작업에 좋습니다.
또 한 가지 **Direct** / **Indirect Occlusion Fraction** 둘 다 **0** 으로 설정하여, 이 AO 가 실제 레벨 라이팅에 영향을 끼치지 않도록 해 주십시오.

![](PrecompitedAOSettings_00.png)

**PrecomputedAOMask** 머티리얼 표현식 노드를 사용하면 어떤 머티리얼의 AO 든 접근할 수 있습니다.
PrecomputedAOMask 는 0-1 범위 마스크처럼 작동하는데, AO 에 영향받은 영역은 1, 받지 않은 영역은 0 입니다.
아래 그림에서 Precomputed AO Mask 를 사용하는 머티리얼 구성법을 살펴볼 수 있습니다.

![](PrecomputedAO_Material_00.png)
