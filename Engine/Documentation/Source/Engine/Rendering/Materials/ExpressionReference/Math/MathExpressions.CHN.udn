INTSourceChangelist:2929391
Availability:Public
Title:数学表达式
Crumbs:%ROOT%, Engine, Engine/Rendering/Materials, Engine/Rendering/Materials/ExpressionReference
Description:对一个或多个输入执行数学运算的表达式。
Version:4.9

[EXCERPT:TOC]
[TOC(start:2)]
[/EXCERPT:TOC]

(#Abs)
## Abs（绝对值）

**Abs（绝对值）**是数学术语“绝对值（absolute value）”的缩写。Abs（绝对值）表达式输出其接收到的输入的绝对值（无符号值）。基本上，这意味着它通过删除减号将负数转换为正数，而正数和零将保持不变。

**示例：**-0.7 的 Abs（绝对值）为 0.7；-1.0 的 Abs（绝对值）为 1.0；1.0 的 Abs（绝对值）也是 1.0

**用法示例：**Abs（绝对值）一般与 [DotProduct（标量积）](#DotProduct) 配合使用。DotProduct（标量积）的结果是 -1..0..1，对 DotProduct（标量积）的结果执行 Abs（绝对值）的结果将是 1..0..1。

![AbsExample.png](AbsExample.png)

(#Add)
## Add（加）

**Add（加）**表达式接收两个输入，将其相加，然后输出结果。这个加法运算按通道执行，这意味着输入的 R 通道、G 通道和 B 通道等等将分别相加。两个输入必须具有相同数目的通道，除非其中之一是单个常量值。常量可以添加到具有任意数目输入的矢量。

| 项目 | 说明 |
| -------- | ----------- |
| [REGION:tablesection]属性[/REGION] ||
| **常量 A（Const A）** | 接收被加数的值。仅当未使用 A 输入时才使用。|
| **常量 B（Const B）** | 接收加数的值。仅当未使用 B 输入时才使用。|
| [REGION:tablesection]输入[/REGION] ||
| **A** | 接收被加数的值。|
| **B** | 接收加数的值。|


**示例：**对 0.2 和 0.4 执行 Add（加）的结果是 0.6；对 (0.2,-0.4,0.6) 和 (0.1,0.5,1.0) 执行 Add（加）的结果是 (0.3,0.1,1.6)；对 (0.2,-0.4,0.6) 和 1.0 执行 Add（加）的结果是 (1.2,0.6,1.6)

**用法示例：**Add（加）通常用来使颜色变亮/变暗，或者使 UV 纹理坐标偏移。

![AddExample.png](AddExample.png)


[INCLUDE:Engine/Rendering/Materials/ExpressionReference/VectorOps#AppendVector]

(#Ceil)
## Ceil（加一取整）

**Ceil（加一取整）**表达式接收值，使其 **向上** 舍入到下一个整数，并输出结果。另请参阅 [Floor（减一取整）](#Floor) 和 [Frac（小数）](#Frac)。

**示例：**对 0.2 执行 Ceil（加一取整）的结果是 1.0；对 (0.2,1.6) 执行 Ceil（加一取整）的结果是 (1.0,2.0)。

![CeilExample.png](CeilExample.png)(w:900)

(#Clamp)
## Clamp（限制）

**Clamp（限制）**表达式接收值，并将它们约束到由最小值和最大值定义的指定范围。最小值 0.0 和最大值 0.5 意味着结果值决不会小于 0.0，并且决不会大于 0.5。

| 项目 | 说明 |
| -------- | ----------- |
| [REGION:tablesection]属性[/REGION] ||
| **限制模式（Clamp Mode）** | 选择要使用的限制类型。CMODE_Clamp 将对范围的两端进行限制。CMODE_ClampMin 和 CMODE_ClampMax 将仅对范围的相应端进行限制。
| **默认最小值（Min Default）** | 接收限制时用作最小值的值。仅当未使用“最小值”（Min）输入时才使用。|
| **默认最大值（Max Default）** | 接收限制时用作最大值的值。仅当未使用“最大值”（Max）输入时才使用。|
| [REGION:tablesection]输入[/REGION] ||
| **最小值（Min）** | 接收限制时用作最小值的值。|
| **最大值（Max）** | 接收限制时用作最大值的值。|


**示例：**在最小值为 0.0 且最大值为 1.0 的情况下对 0.3 进行限制将产生 0.3；在最小值为 0.0 且最大值为 1.0 的情况下对 1.3 进行限制将产生 1.0；

![ClampExample.png](ClampExample.png)(w:900)


[INCLUDE:Engine/Rendering/Materials/ExpressionReference/VectorOps#ComponentMask]

(#Cosine)
## Cosine（余弦）

**Cosine（余弦）**表达式反复输出 [0, 1] 范围内的余弦波值。最常见的情况是，通过将 [Time（时间）](Engine/Rendering/Materials/ExpressionReference/Constant#Time) 表达式连接至它的输入，输出连续的振荡波形。输出值将在 -1 与 1 之间来回循环。下图显示波的视觉表示：

![CosineWave.png](CosineWave.png)

| 项目 | 说明 |
| -------- | ----------- |
| [REGION:tablesection]属性[/REGION] ||
| **周期（Period）** | 指定产生的波的周期。换而言之，这是发生一次振荡的长度。|


**用法示例：**在任何需要振荡效果的场合，此表达式都非常有用。通过将时间输入（速度）或输出（振幅）倍增，可以轻松地动态控制振荡的速度和振幅。

![CosineExample.png](CosineExample.png)

在以上示例中，颜色将以余弦频率振荡。


[EXCERPT:CrossProduct]
(#CrossProduct)
## CrossProduct（矢量积）

**CrossProduct（矢量积）**表达式计算两个三通道矢量值输入的矢量积，并输出所产生的三通道矢量值。给定空间中的两个矢量，矢量积是与两个输入都垂直的矢量。

| 项目 | 说明 |
| -------- | ----------- |
| [REGION:tablesection]输入[/REGION] ||
| **A** | 接收三通道矢量值。|
| **B** | 接收三通道矢量值。|


**用法示例：**CrossProduct（矢量积）通常用来计算与另外两个方向都垂直的方向。

![CrossProductExample.png](CrossProductExample.png)

[/EXCERPT:CrossProduct]

(#Divide)
## Divide（除）

**Divide（除）**表达式接收两个输入，并输出第一个输入除以第二个输入的结果。除法按通道进行，即，第一个输入的 R 通道将除以第二个输入的 R 通道，第一个输入的 G 通道将除以第二个输入的 G 通道，依此类推。除非除数是单个浮点值，否则两个输入必须具有相同数目的值。_切勿以零作除数。_

| 项目 | 说明 |
| -------- | ----------- |
| [REGION:tablesection]属性[/REGION] ||
| **常量 A（Const A）** | 接收被除数的值。仅当未使用 A 输入时才使用。|
| **常量 B（Const B）** | 接收除数的值。仅当未使用 B 输入时才使用。|
| [REGION:tablesection]输入[/REGION] ||
| **A** | 接收被除数的值。|
| **B** | 接收除数的值。|


**示例：**当 A=(1.0,0.5,-0.4) 且 B=(2.0,2.0,4.0) 时，Divide（除）的输出为 (0.5,0.25,-0.1)

![DivideExample.png](DivideExample.png)


[EXCERPT:DotProduct]
(#DotProduct)
## DotProduct（标量积）

**DotProduct（标量积）**表达式计算标量积，即一个矢量投射到另一个矢量上的长度。许多技术使用此计算来计算衰减。DotProduct（标量积）要求两个矢量输入具有相同数目的通道。

| 项目 | 说明 |
| -------- | ----------- |
| [REGION:tablesection]输入[/REGION] ||
| **A** | 接收一个值，或接收任意长度的矢量。|
| **B** | 接收一个值，或接收任意长度的矢量。|


![DotProductExample.png](DotProductExample.png)(w:900)

[/EXCERPT:DotProduct]

(#Floor)
## Floor（减一取整）

**Floor**（减一取整）表达式接收值，使其 **向下** 舍入到上一个整数，并输出结果。另请参阅 [Ceil（加一取整）](#Ceil) 和 [Frac（小数）](#Frac)。

**示例：**对 0.2 执行 Floor（减一取整）的结果是 0.0；对 (0.2,1.6) 执行 Floor（减一取整）的结果是 (0.0,1.0)。

![FloorExample.png](FloorExample.png)(w:900)

(#FMod)
## FMod（浮点余数）

**FMod（浮点余数）**表达式返回对两个输入执行除法运算的浮点余数。

![FModExample.png](FModExample.png)

在此示例中，FMod（浮点余数）每秒返回一个重复值，该值的范围限制在 0 到 1。达到 1 之后，该值将恢复为 0，并无穷反复。

(#Frac)
## Frac（小数）

**Frac（小数）**表达式接收值，并输出这些值的小数部分。另请参阅 [Ceil（加一取整）](#Ceil) 和 [Floor（减一取整）](#Floor)。

**示例：**对 0.2 执行 Frac（小数）的结果是 0.2；对 (0.0,1.6) 执行 Frac（小数）的结果是 (0.0,0.6)。

![FracExample.png](FracExample.png)(w:900)

在此示例中，Frac（小数）节点将时间转换为重复的 0 - 1 级数序列，从而通过线性插值使颜色从绿色渐变为红色，然后恢复为绿色，并无穷反复。

[EXCERPT:If]
(#If)
## If（如果）

**If（如果）**表达式对两个输入进行比较，然后根据比较结果传递另外三个输入值中的一个。所比较的两个输入必须都是单个浮点值。

| 项目 | 说明 |
| -------- | ----------- |
| [REGION:tablesection]输入[/REGION] ||
| **A** | 接收单个浮点值。|
| **B** | 接收单个浮点值。|
| **A > B** | 接收 A 的值大于 B 的值时要输出的值。|
| **A = B** | 接收 A 的值等于 B 的值时要输出的值。|
| **A &lt; B** | 接收 A 的值小于 B 的值时要输出的值。|


![IfExample.png](IfExample.png)(w:900)

在此示例中，If（如果）表达式接收高度贴图，并根据高度是低于还是高于值 0.2 来输出红色或绿色。

[/EXCERPT:If]


[INCLUDE:Engine/Rendering/Materials/ExpressionReference/Utility#LinearInterpolate]

(#Max)
## Max（最大值）

**Max（最大值）**表达式接收两个输入，然后输出其中的较大者。 

此节点类似于 Photoshop 的“变亮”。 

![](MaxExample.png)(w:720)

在以上示例中，A 为 "0"，B 为 "1"；因此，产生的底色为 "1"（白色）。 

| 项目 | 说明 |
| -------- | ----------- |
| [REGION:tablesection]属性[/REGION] ||
| **常量 A（Const A）** | 接收第一个值。仅当未使用 A 输入时才使用。|
| **常量 B（Const B）** | 接收第二个值。仅当未使用 B 输入时才使用。|
| [REGION:tablesection]输入[/REGION] ||
| **A** | 接收要比较的第一个值。|
| **B** | 接收要比较的第二个值。|

(#Min)
## Min（最小值）

**Min（最小值）**表达式接收两个输入，然后输出其中的较小者。 

此节点类似于 Photoshop 的“变暗”。 

![](MinExample.png)(w:720)

在以上示例中，A 为 "0"，B 为 "1"；因此，产生的底色为 "0"（黑色）。

| 项目 | 说明 |
| -------- | ----------- |
| [REGION:tablesection]属性[/REGION] ||
| **常量 A（Const A）** | 接收第一个值。仅当未使用 A 输入时才使用。|
| **常量 B（Const B）** | 接收第二个值。仅当未使用 B 输入时才使用。|
| [REGION:tablesection]输入[/REGION] ||
| **A** | 接收要比较的第一个值。|
| **B** | 接收要比较的第二个值。|



(#Multiply)
## Multiply（乘）

**Multiply（乘）**表达式接收两个输入，将其相乘，然后输出结果。类似于 Photoshop 的多层混合。乘法按通道进行，即，第一个输入的 R 通道将乘以第二个输入的 R 通道，第一个输入的 G 通道将乘以第二个输入的 G 通道，依此类推。除非其中一个值是单个浮点值，否则两个输入必须具有相同数目的值。

| 项目 | 说明 |
| -------- | ----------- |
| [REGION:tablesection]属性[/REGION] ||
| **常量 A（Const A）** | 接收第一个要相乘的值。仅当未使用 A 输入时才使用。|
| **常量 B（Const B）** | 接收第二个要相乘的值。仅当未使用 B 输入时才使用。|
| [REGION:tablesection]输入[/REGION] ||
| **A** | 接收第一个要相乘的值。|
| **B** | 接收第二个要相乘的值。|


请注意，UE4 中的材质不限于 [0,1]。如果颜色/值大于 1，那么 Multiply（乘）实际上会使颜色变亮。

**示例：**对 0.4 和 0.5 执行 Multiply（乘）的结果是 0.2；对 (0.2,-0.4,0.6) 和 (0.0,2.0,1.0) 执行 Multiply（乘）的结果是 (0.0,-0.8,0.6)；对 (0.2,-0.4,0.6) 和 0.5 执行 Multiply（乘）的结果是 (0.1,-0.2,0.3)。

**用法示例：**Multiply（乘）通常用来使颜色/纹理变亮或变暗。

![MultiplyExample.png](MultiplyExample.png)(w:900)


[EXCERPT:Normalize]
(#Normalize)
## Normalize（规范化）

**Normalize（规范化）**表达式计算并输出其输入的规范化值。这表示该输入的每个分量都会除以矢量的 L-2 范数（长度）。

![NormalizeExample.png](NormalizeExample.png)(w:900)

[REGION:note]
不必对连接到“法线”（Normal）材质输出的表达式进行规范化。
[/REGION]

[/EXCERPT:Normalize]
(#OneMinus)
## OneMinus（一减）

**OneMinus（一减）**表达式接收一个输入值，并输出“一减去该值”。此运算按通道执行。

**示例：**对 0.4 执行 OneMinus（一减）的结果是 0.6；对 (0.2,0.5,1.0) 执行 OneMinus（一减）的结果是 (0.8,0.5,0.0)；对 (0.0,-0.4,1.6) 执行 OneMinus（一减）的结果是 (1.0,1.4,-0.6)。

**用法示例：**当输入颜色在 [0,1] 范围内时，OneMinus（一减）的作用就是通常所谓的“反色”-- 即，OneMinus（一减）将返回互补色，这种颜色与输入相加将产生白色。

![OneMinusExample.png](OneMinusExample.png)

(#Power)
## Power（幂）

**Power（幂）**表达式接收两个输入，计算“底数”（Base）的“指数”（Exp）次幂，并输出结果；换而言之，“底数”（Base）自乘“指数”（Exp）次。

| 项目 | 说明 |
| -------- | ----------- |
| [REGION:tablesection]属性[/REGION] ||
| **常量指数（Const Exponent）** | 接收指数值。仅当未使用“指数”（Exp）输入时才使用。|
| [REGION:tablesection]输入[/REGION] ||
| **底数（Base）** | 接收底数值。|
| **指数（Exp）** | 接收指数值。|


**示例：**底数为 0.5，指数为 2.0 时，Power（幂）的结果为 0.25。

**用法示例：**如果传递到 Power（幂）的颜色在 [0,1] 范围内，那么 Power（幂）可以用作对比度调整，即，仅保留较亮的值。

![PowerExample.png](PowerExample.png)

(#Sine)
## Sine（正弦）

**Sine（正弦）**表达式反复输出 [0, 1] 范围内的正弦波值。最常见的情况是，通过将 [Time（时间）](Engine/Rendering/Materials/ExpressionReference/Constant#Time) 表达式连接至它的输入，输出连续的振荡波形。输出值将在 -1 与 1 之间来回循环。此表达式与 [Cosine（余弦）](#Cosine) 表达式输出之间的差别是，输出波形偏移半个周期。下图显示波的视觉表示：

![SineWave.png](SineWave.png)

| 项目 | 说明 |
| -------- | ----------- |
| [REGION:tablesection]属性[/REGION] ||
| **周期（Period）** | 指定产生的波的周期。换而言之，这是发生一次振荡的长度。|


**用法示例：**在任何需要振荡效果的场合，此表达式都非常有用。通过将时间输入（速度）或输出（振幅）倍增，可以轻松地动态控制振荡的速度和振幅。

![SineExample.png](SineExample.png)

(#SquareRoot)
## SquareRoot（平方根）

**SquareRoot（平方根）**表达式输出输入值的平方根。SquareRoot（平方根）只能对单个浮点输入值执行运算。

![SqrtExample.png](SqrtExample.png)(w:900)

(#Subtract)
## Subtract（减）

**Subtract（减）**节点接收两个输入，从第一个输入中减去第二个输入，然后输出它们的差。减法按通道进行，即，第一个输入的 R 通道将减去第二个输入的 R 通道，第一个输入的 G 通道将减去第二个输入的 G 通道，依此类推。除非第二个输入是单个常量值，否则两个输入必须具有相同数目的通道。常量可以从具有任意数目输入的矢量中减去。

| 项目 | 说明 |
| -------- | ----------- |
| [REGION:tablesection]属性[/REGION] ||
| **常量 A（Const A）** | 接收被减数的值。仅当未使用 A 输入时才使用。|
| **常量 B（Const B）** | 接收减数的值。仅当未使用 B 输入时才使用。|
| [REGION:tablesection]输入[/REGION] ||
| **A** | 接收被减数的值。|
| **B** | 接收减数的值。|


**示例：**对 0.5 和 0.2 执行 Subtract（减）的结果是 0.3；对 (0.2,-0.4,0.6) 和 (0.1,0.1,1.0) 执行 Subtract（减）的结果是 (0.1,-0.5,-0.4)；对 (0.2,0.4,1.0) 和 0.2 执行 Subtract（减）的结果是 (0.0,0.2,0.8)。

**用法示例：**Subtract（减）可用来使颜色变暗以及使 UV 偏移。

![SubtractExample.png](SubtractExample.png)(w:900)

