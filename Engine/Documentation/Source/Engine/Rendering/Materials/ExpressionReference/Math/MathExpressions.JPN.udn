INTSourceChangelist:3409695
Availability:Public
Title:Math 表現式
Crumbs: %ROOT%, Engine, Engine/Rendering/Materials, Engine/Rendering/Materials/ExpressionReference
Description:1 つ以上の入力で様々な数学演算を行うための表現式。
Version:4.9
tags:Materials

[EXCERPT:TOC]
[TOC(start:2)]
[/EXCERPT:TOC]

## Abs

**Abs** は、数学用語「absolute value」 (絶対値) の略語です。Abs 表現式は絶対値、符号なしの値、または受け取った入力値を出力します。つまり、基本的にマイナス符号を取り除くことで負の数を正の数に変えます。正の数と 0 の場合は変化しません。

**例：** -0.7 の Abs は 0.7 、-1.0 の Abs は 1.0、1.0 の Abs は 1.0 です。

**使用例：** Abs は、通常 [DotProduct](#DotProduct) と併用されます。DotProduct (ドット積) は、-1..0..1 の順番で値が始まる一方、DotProduct の Abs は、1..0..1 の順番となります。

![AbsExample.png](AbsExample.png)


## Add

**Add** 表現式は、2 つの入力値を受け取り、2 つを足して結果を出力します。この加法演算はチャンネル毎に実行されます。つまり、R チャンネルへの入力が加算され、G チャンネルが加算され、そして B チャンネルが加算されるなどのようになります。入力の片方が単一の Constant 値でない限り、両入力は同数のチャンネル数を持っていなくてはいけません。Constant は入力数に関係なくベクターに加法できます。

| アイテム | 説明 |
| -------- | ----------- |
| [REGION:tablesection]プロパティ[/REGION] ||
| **Const A** | 加算する値を受け取ります。A 入力が未使用時のみ使用されます。|
| **Const B** | 加算される値を受け取ります。B 入力が未使用時のみ使用されます。 |
| [REGION:tablesection]入力[/REGION] ||
| **A** | 加算する値を受け取ります。 |
| **B** | 加算される値を受け取ります。 |


**例：** 0.2 と 0.4 の Add は 0.6 、 (0.2,-0.4,0.6) と (0.1,0.5,1.0) の Add は (0.3,0.1,1.6) 、 (0.2,-0.4,0.6) と 1.0 の Add は (1.2,0.6,1.6) となります。

**使用例：** Add はカラーを明るくまたは暗くする際、もしくは UV テクスチャ座標をオフセットする際にしばし使用します。

![AddExample.png](AddExample.png)


[INCLUDE:Engine/Rendering/Materials/ExpressionReference/VectorOps#AppendVector]


## ArcSine 

[REGION:lightbox]
[![](MEN_ArcSine.png)(w:469)](MEN_ArcSine.png)
[/REGION]

[REGION:caption]
クリックしてフルサイズで表示
[/REGION]

**Arcsine** は、逆正弦 (アークサイン) 関数を出力します。負荷が大きく、命令数に影響されない関数です。

## ArcSineFast

[REGION:lightbox]
[![](MEN_ArcSineFast.png)(w:469)](MEN_ArcSineFast.png)
[/REGION]

[REGION:caption]
クリックしてフルサイズで表示
[/REGION]

**ArcsineFast** は、近似の逆正弦 (アークサイン) 関数を出力します。入力値は -1 から 1 の間でなければなりません。

## ArcCosine

[REGION:lightbox]
[![](MEN_ArcCosine.png)(w:469)](MEN_ArcCosine.png)
[/REGION]

[REGION:caption]
クリックしてフルサイズで表示
[/REGION]

**Arccosine** は逆余弦 (アークコサイン) 関数を出力します。負荷が大きく、命令数に影響されない関数です。

## ArcCosineFast

[REGION:lightbox]
[![](MEN_ArcCosineFast.png)(w:469)](MEN_ArcCosineFast.png)
[/REGION]

[REGION:caption]
クリックしてフルサイズで表示
[/REGION]


**Arccosine** は近似の逆余弦 (アークコサイン) 関数を出力します。入力値は -1 から 1 の間でなければなりません。	

## ArcTangent

[REGION:lightbox]
[![](MEN_ArcTangent.png)(w:469)](MEN_ArcTangent.png)
[/REGION]

[REGION:caption]
クリックしてフルサイズで表示
[/REGION]

**Arctangent** は逆正接 (アークタンジェント) 関数を出力します。負荷が大きく、命令数に影響されない関数です。

## ArcTragnetFast

[REGION:lightbox]
[![](MEN_ArcTangentFast.png)(w:469)](MEN_ArcTangentFast.png)
[/REGION]

[REGION:caption]
クリックしてフルサイズで表示
[/REGION]

**Arctangent** は近似の逆正接 (アークタンジェント) を計算します。

## ArcTangent2

[REGION:lightbox]
[![](MEN_ArcTangent2.png)(w:469)](MEN_ArcTangent2.png)
[/REGION]

[REGION:caption]
クリックしてフルサイズで表示
[/REGION]


**Arctangent2** は、入力の符号を使用して、x / y の逆タンジェントを計算することで、四分円を決定します。負荷が大きく、命令数に影響されない関数です。

## ArcrTangent2Fast

[REGION:lightbox]
[![](MEN_ArcTangent2Fast.png)(w:469)](MEN_ArcTangent2Fast.png)
[/REGION]

[REGION:caption]
クリックしてフルサイズで表示
[/REGION]

**Arctangent2Fast** は、入力の符号を使用して、X / Y の近似の逆タンジェントを計算することで、四分円を決定します。

## Ceil

**Ceil** 表現式は、値を受け取り、一番近い整数へ **切り上げて** 結果を出力します。[Floor](#Floor) と [Frac](#Frac) も参照してください。

**例：** 0.2 の Ceil は 1.0 (0.2,1.6) の Ceil は (1.0,2.0) となります。

![CeilExample.png](CeilExample.png)(w:900)


## Clamp

Clamp 表現式は、最小値と最大値が定義された指定範囲に受け取った値を制限します。0.0 の最小値と 0.5 の最大値は、結果値が決して 0.0 より小さく、および 0.5 より大きくならないことを意味します。

| アイテム | 説明 |
| -------- | ----------- |
| [REGION:tablesection]プロパティ[/REGION] ||
| **Clamp Mode** | 使用する Clamp のタイプを選択します。CMODE_Clamp は範囲の両端値をクランプします。CMODE_ClampMin と CMODE_ClampMax は、範囲内のそれぞれ対象となる値のみをクランプします。
| **Min Default** | クランプに使用する最小値を受け取ります。最小値の入力が未使用時のみ使用されます。 |
| **Max Default** | クランプに使用する最大値を受け取ります。最大値の入力が未使用時のみ使用されます。 |
| [REGION:tablesection]入力[/REGION] ||
| **Min** | クランプに使用する最少値を受け取ります。 |
| **Max** | クランプに使用する最大値を受け取ります。 |


**例：** (0.0) から (1.0) の入力範囲を Min 0.0 と Maxx 1.0 で 0.3 をクランプすると、結果は 0.3 になり、Min0.0 と Max1.0 で 1.3 をクランプすると結果は 1.0 になります。

![ClampExample.png](ClampExample.png)(w:900)


[INCLUDE:Engine/Rendering/Materials/ExpressionReference/VectorOps#ComponentMask]


## Cosine

**Cosine** 表現式は、[0, 1] の入力範囲および [-1, 1] の出力範囲に正弦波の値を繰り返し計算します。この関数は、[Time](Engine/Rendering/Materials/ExpressionReference/Constant#Time) 式と入力値を関連付けして継続的な振動の波形を出力することでよく知られていますが、ワールド スペースやスクリーン スペース、また継続した滑らかな円が必要なその他のアプリケーションでさざ波の作成に使用することもできます。波形を視覚的に表現したものが以下となります。出力範囲は [0, 1] に調整しています。

![CosineWave.png](CosineWave.png)

| アイテム | 説明 |
| -------- | ----------- |
| [REGION:tablesection]プロパティ[/REGION] ||
| **Period** | 結果として得られる振動の周期を特定します。つまり、これによって 1 つの振動が発生するまでの時間が分かります。|


**使用例：** この表現式は振動効果が必要な際にいつでも便利です。振動の速度と振幅は、時間入力 (速度) または出力 (振幅) を乗算することにより、動的に簡単な制御が可能です。

![CosineExample.png](CosineExample.png)

この例では、カラーは正弦波周波数で振動します。


[EXCERPT:CrossProduct]
## CrossProduct

**CrossProduct** 表現式は、3 チャンネルのベクター値の 2 つの入力値の外積を計算し、結果として 3 チャンネルのベクター値を計算します。空間に 2 つのライン (またはベクター) が与えられ、外積は両方の入力に対して垂直なライン (またはベクター) となります。

| アイテム | 説明 |
| -------- | ----------- |
| [REGION:tablesection]入力[/REGION] ||
| **A** | 3チャンネルのベクター値を受け取ります。 |
| **B** | 3チャンネルのベクター値を受け取ります。 |


**使用例：** CrossProduct は、しばし 2 つの反対方向に垂直な方向を計算します。

![CrossProductExample.png](CrossProductExample.png)

[/EXCERPT:CrossProduct]


## Divide

Divide 表現式は、2 つの入力値を受け取り、1 番目の値を 2 番目の値で割った結果を出力します。除算はチャンネルごとに計算されます。つまり、最初の R チャンネルが 2 番目のチャンネルによって、最初の G チャンネルが 2 番目のチャンネルによって除算される形です。約数が single float 値でない限り、両方の入力値は同等でなければなりｍさえん。どのチャンネルにおいてもゼロで割るとチャンネルにローカル ハードウェアの "無限" インプリメンテーションが含まれる結果になり、通常は非常に大きい正の値になります。

| アイテム | 説明 |
| -------- | ----------- |
| [REGION:tablesection]プロパティ[/REGION] ||
| **Const A** | 除算される値、被除数を受け取ります。A 入力が未使用時のみ使用されます。|
| **Const B** | 除算する値、約数を受け取ります。B 入力が未使用時のみ使用されます。|
| [REGION:tablesection]入力[/REGION] ||
| **A** | 除算される値、被除数を受け取ります。 |
| **B** | 除算する値、約数を受け取ります。 |


**例：** A=(1.0) と B=(5.0) を持つ Divide を使うと (0.2) を出力して、暗いグレーとなります。

![DivideExample.png](DivideExample.png)


[EXCERPT:DotProduct]
## DotProduct

**DotProduct** 表現式は、別のベクターに投影された 1 つのベクターの長さ、もしくは大きさを乗じた 2 つのベクター間のコサインである dot product (内積) を計算します。この計算は、フォールオフの計算に頻繁に使用される技術です。DotProduct は、両方のベクター入力値に同等のチャンネル数を必要とします。

| アイテム | 説明 |
| -------- | ----------- |
| [REGION:tablesection]入力[/REGION] ||
| **A** | 任意の長さの値またはベクターを受け取ります。 |
| **B** |  **A** と同じ長さの値またはベクターを受け取ります。 |


![DotProductExample.png](DotProductExample.png)(w:900)

[/EXCERPT:DotProduct]

## Floor

**Floor** 表現式は、値を受け取り前の整数へ **切り下げて** 結果を出力します。[Ceil](#Ceil) と [Frac](#Frac) も参照してください。

**例：** 0.2 の Floor は 0.0 、 (0.2,1.6) の Floor は (0.0, 1.0) です。

![FloorExample.png](FloorExample.png)(w:900)


## FMod

**FMod** 表現式は、2 つの入力値を除算した後の浮動小数点値余りを返します。被除数 (入力 "A") はどの値でも構いませんが、被除数が負の場合は結果も負になります。約数 (2 つ目のインプット) をゼロにするとゼロでの除算を意味することになるので使えませんが、約数は正であっても負であっても結果に影響しません。一般的なユースケースでは、最大値まで明るいマテリアルを作成し、次のフレームで急に最小値に戻し、最大値へ上昇する結果となります。

![FModExample.png](FModExample.png)

この例では、FMod が 0 から 1 への UV 進捗を受け取り、それを変換して緑チャンネルの X 軸で 0.2 UV ごとに周期を繰り返されるようにします。

## Frac

**Frac** 表現式は、値を受け取り、受け取った値の端数部分を出力します。言い換えると、入力値が "X" の場合、結果は "X - X の Floor" です。出力値は 0 から 1 です。下限は含みますが、上限は含みません。[Ceil](#Ceil) と [Floor](#Floor) も参照してください。

**例：** (0.2) の Franc は (0.2) です。(-0.2) の ranc は (0.8) です。(0.0,1.6,1.0) の ranc は (0.0,0.6,0.0) です。

![FracExample.png](FracExample.png)(w:900)

この例では、Franc ノードは一連の繰り返しとなる 0 - 1 数列へ時間を変更しています。カラーを緑から赤へフェード (Lerp を通じて) させて、緑へ戻り、これを無限に繰り返します。

[EXCERPT:If]
## If

**If** 表現式は、2 つの入力値を比較し、比較結果に基づいて他の 3 つの値のうち 1 つを渡します。比較される 2 つの入力値は単精度浮動小数点でなければいけません。

| アイテム | 説明 |
| -------- | ----------- |
| [REGION:tablesection]入力[/REGION] ||
| **A** | 単精度浮動小数点を受け取ります。 |
| **B** | 単精度浮動小数点を受け取ります。 |
| **A > B** | A の値が B の値より大きい時、値を受け取り出力します。 |
| **A = B** | A の値と B の値が同等の時、値を受け取り出力します。 |
| **A &lt; B** | A の値が B の値よりも小さい時、値を受け取り出力します。 |


![IfExample.png](IfExample.png)(w:900)

この例では、If 式が高さマップを受け取り、高さが 0.2 値を上回るまたは下回るかによって赤、もしくは緑を出力します。

[/EXCERPT:If]


[INCLUDE:Engine/Rendering/Materials/ExpressionReference/Utility#LinearInterpolate]


## Max

**Max** 表現式は 2 つの入力を取り込み、高い方の値を出力します。

このノードは Photoshop の Lighten に似ています。 

![](MaxExample.png)(w:720)

上記の表現式では、A は "0" で B は "1" なので、ベースカラーは "1" (白) になります。 

| アイテム | 説明 |
| -------- | ----------- |
| [REGION:tablesection]プロパティ[/REGION] ||
| **Const A** | 最初の値を受け取ります。A 入力値が未使用の場合のみ使用されます。|
| **Const B** | 2 番目の値を受け取ります。B 入力値が未使用の場合のみ使用されます。|
| [REGION:tablesection]入力[/REGION] ||
| **A** | 比較する最初の値を受け取ります。 |
| **B** | 比較する 2 番目の値を受け取ります。 |


## Min

**Min** 表現式は 2 つの入力を取り込み、低い方の値を出力します。

このノードは Photoshop の Darken に似ています。 

![](MinExample.png)(w:720)

上記の表現式では、A は "0" で B は "1" なので、ベースカラーは "0" (黒) になります。

| アイテム | 説明 |
| -------- | ----------- |
| [REGION:tablesection]プロパティ[/REGION] ||
| **Const A** | 最初の値を受け取ります。A 入力値が未使用の場合のみ使用されます。|
| **Const B** | 2 番目の値を受け取ります。B 入力値が未使用の場合のみ使用されます。|
| [REGION:tablesection]入力[/REGION] ||
| **A** | 比較する最初の値を受け取ります。 |
| **B** | 比較する 2 番目の値を受け取ります。 |


## Multiply

**Multiply** 表現式は、 2 つの入力値を受け取り、その入力値を掛け合わせて結果を出力します。Photoshop のレイヤーのブレンドモードの乗算に似た機能です。乗算はチャンネルごとに計算されます。つまり最初の R チャンネルを 2 番目の R チャンネルと掛け、最初の G チャンネルを 2 番目の G チャンネルと掛けます。片方の値が single float 値でない限り、両方の入力は同等の入力値でなくてはいけません。

| アイテム | 説明 |
| -------- | ----------- |
| [REGION:tablesection]プロパティ[/REGION] ||
| **Const A** | 乗算する最初の値を受け取ります。A 入力値が未使用の場合のみ使用されます。|
| **Const B** | 乗算する 2 番目の値を受け取ります。B 入力値が未使用の場合のみ使用されます。|
| [REGION:tablesection]入力[/REGION] ||
| **A** | 乗算する最初の値を受け取ります。 |
| **B** | 乗算する 2 番目の値を受け取ります。 |


UE4 のマテリアルは [0,1] には制限されないことを忘れないでください！カラー / 値が 1 より大きい場合、Multiply 表現式は実際にカラーを明るくします。

**例：** 0.4 と 0.5 の Multiply は 0.2 、 (0.2、-0.4、0.6) と (0.0、2.0、1.0) の Multiply は (0.0、-0.8、0.6) 、 (0.2、-0.4、0.6) と 0.5 の Multiply は (0.1、-0.2、0.3) となります。

**使用例：** Multiply は、しばしカラー / テクスチャを明るく、もしくは暗くするために使用します。

![MultiplyExample.png](MultiplyExample.png)(w:900)


[EXCERPT:Normalize]
## Normalize

**Normalize** 表現式は、入力の標準値を計算して出力します。ノーマライズされたベクター ("単位ベクター" とも呼ばれます) の全長は 1.0 です。つまり、入力値の各コンポーネントをベクターの大きさ (長さ) で割ることを意味します。

**例：** Normalize で (0,2,0) あるいは (0,0.2,0) をパスすると、(0,1,0) が出力されます。Normalize で (0,1,-1) をパスすると (0, 0.707, -0.707) が出力されます。すべてのベクターがゼロの場合は特別なケースとなり、変化しません。

[OBJECT:ComparisonSlider]
	[PARAM:before]
	![Normalized Input Vector](NormalizeExample.png)(w:900)
	[/PARAM]
	[PARAM:after]
	![Non-Normalized Input Vector](NormalizeExample2.png)(w:900)
	[/PARAM]
[/OBJECT]

[REGION:note]
Normal マテリアル出力値に接続された表現式は、標準化する必要はありません。
[/REGION]

[/EXCERPT:Normalize]

## OneMinus

**OneMinus** は、入力値 "X" を受け取り、"1 - X" の値を出力します。演算はチャンネルごとに実行されます。

**例：** 0.4 の OneMinus は 0.6、 (0.2、0.5、1.0) の OneMinus は (0.8、0.5、0.0) 、 (0.0、-0.4、1.6) の OneMinus は (1.0、1.4、-0.6) になります。

**使用例：** 入力カラーの範囲が [0,1] の時、OneMinus は通常「invert」と呼ばれる機能と同等のエフェクトがあります。つまり、OneMinus は入力値に加算すると白を作り出すといった、補完カラーを返します。

![OneMinusExample.png](OneMinusExample.png)


## Power

**Power** は、2 つの入力値を受け取り、Base を Exp 乗の累乗をして結果を出力します。言い換えると、Base がその値によって Exp 回乗算されます。

| アイテム | 説明 |
| -------- | ----------- |
| [REGION:tablesection]プロパティ[/REGION] ||
| **Const Exponent** | 指数値を受け取ります。Exp 入力値が未使用の場合のみ使用されます。|
| [REGION:tablesection]入力[/REGION] ||
| **Base** | ベース値を受け取ります。 |
| **Exp** | 指数値を受け取ります。 |


**例：** Base0.5 の Exp2.0 乗は 0.25 になります。

**使用例：** Power に渡すカラーが [0,1] の場合、Power は非常に明るい値はわずかに下がり、暗めの値は大幅に減少するように、コントラスト調整のような動作をします。

![PowerExample.png](PowerExample.png)


## Round

**Round** は端数部分が半分以上の場合、その値を次の整数へ値を四捨五入します。半分以下の場合は切り捨てます。

[OBJECT:ComparisonSlider]
	[PARAM:before]
	![Before Round](RoundExample_00.png)(w:1100)
	[/PARAM]
	[PARAM:after]
	![After Round](RoundExample_01.png)
	[/PARAM]
[/OBJECT]

**例：**  
* 1.1 は四捨五入すると 1 となります。
* 1.4 は四捨五入すると 1 となります。
* 1.5 は四捨五入すると 2 となります。
* 1.85 は四捨五入すると 2 となります。

## Saturate

The **Saturate** ノードは値を 0 と 1 の間にクランプします。最新のグラフィックス ハードウェアの多くの場合、Saturate は命令負荷がほとんどありません。

![](SaturateExample_00.png)

**使用例：** このノードは、入力値もしくは出力値を 0 と 1 の間にクランプする必要がある場合に使用します。

## Sine

**Sine** 表現式は、[0, 1] の入力範囲および [-1, 1] の出力範囲に正弦波の値を繰り返し出力します。この表現式の結果と [Cosine](#Cosine)  表現式の出力値の違いは、出力波形が1/4 にオフセットされる、つまり `Cos(X)` は `Sin(X + 0.25)` に等しくなります。この関数は、[Time](Engine/Rendering/Materials/ExpressionReference/Constant#Time) 式と入力値を関連付けして継続的な振動の波形を出力することでよく知られていますが、ワールド スペースやスクリーン スペース、また継続した滑らかな円が必要なその他のアプリケーションでさざ波の作成に使用することもできます。波形を視覚的に表現したものが以下となります。出力範囲は [0, 1] に調整しています。

![SineWave.png](SineWave.png)

| アイテム | 説明 |
| -------- | ----------- |
| [REGION:tablesection]プロパティ[/REGION] ||
| **Period** | 結果として得られる振動の周期を特定します。つまり、これによって 1 つの振動が発生するまでの時間が分かります。|


**使用例：** この表現式は振動効果が必要な場合に役立ちます。振動の速度と振幅は、時間入力 (速度) または出力 (振幅) を乗算することにより、動的に簡単な制御が可能です。

![SineExample.png](SineExample.png)


## SquareRoot

**SquareRoot** 表現式は入力値の平方根を出力します。ベクターに適用する場合、各コンポーネントは個々に処理されます。

![SqrtExample.png](SqrtExample.png)(w:900)


## Subtract

**Subtract** ノードは 2 つの入力値を受け取り、最初の入力値から 2 番目の値を減算し差分を出力します。減算はチャンネルごとに実行されます。つまり、 2 番目の入力の R チャンネルが最初の入力値から減算され、 2 番目の入力の G チャンネルから最初の入力値が減算される、といった具合です。2 番目の入力値が単一の定数値でない限り、両入力値は同数のチャンネルを持たなくてはいけません。定数は、ベクターのさまざまな入力値から減算されます。

| アイテム | 説明 |
| -------- | ----------- |
| [REGION:tablesection]プロパティ[/REGION] ||
| **Const A** | 被減数の値を受け取ります。A 入力値が未使用の場合のみ使用されます。|
| **Const B** | 減数される値を受け取ります。B 入力値が未使用の場合のみ使用されます。|
| [REGION:tablesection]入力[/REGION] ||
| **A** | 被減数の値を受け取ります。 |
| **B** | 減数される値を受け取ります。


**例：** 0.5 から 0.2 を減算すると 0.3 、 (0.2、-0.4、0.6) から (0.1、0.1、1.0) を減算すると、 (0.1、-0.5、-0.4) 、 (0.2、0.4、1.0) から 0.2 を減算すると (0.0、0.2、0.8) になります。

**使用例：** Subtract は、濃いカラーやオフセット UV に使用出来ます。

![SubtractExample.png](SubtractExample.png)(w:900)

## Tangent

[REGION:lightbox]
[![](MEN_Tangent.png)(w:469)](MEN_Tangent.png)
[/REGION]

[REGION:caption]
クリックしてフルサイズで表示
[/REGION]

**Tangent** ノードは指定した値のタンジェントを出力します。 

## Truncate

[OBJECT:ComparisonSlider]
	[PARAM:before]
	![Before Truncate](TruncateExample_00.png)(w:1100)
	[/PARAM]
	[PARAM:after]
	![After Truncate](TruncateExample_01.png)
	[/PARAM]
[/OBJECT]


**Truncate** ノードは、整数部分は変更せずに端数部分を削除して、値を切り捨てます。

**例：**  
* 1.1 は切り捨てると 1 になります。
* 1.4 は切り捨てると 1 になります。
* 2.5 は切り捨てると 2 になります。
* 3.1 は切り捨てると 3 になります。