Availability:Public
Title:Particle Expressions
Crumbs: %ROOT%, Engine, Engine/Rendering/Materials, Engine/Rendering/Materials/ExpressionReference
Description:Expressions used for creating materials to be applied to emitters in Particle Systems.
Version: 4.9
tags:Materials

[EXCERPT:TOC]
[TOC(start:2)]
[/EXCERPT:TOC]

## DynamicParameter


[INCLUDE:Engine/Rendering/Materials/ExpressionReference/Parameters#DynamicParameter]


[EXCERPT:ParticleColor]
## ParticleColor

The **ParticleColor** expression ties into the current color of a given particle based on any per-particle color data defined within **Cascade**. This must be plugged into the appropriate channel (Emissive Color).

| Item | Description |
|----|----|
| [REGION:tablesection]Outputs[/REGION] ||
| **RGB** | Outputs the combined RGB vector data. |
| **R** | Outputs the red channel data.|
| **G** | Outputs the green channel data. |
| **B** | Outputs the blue channel data. |
| **A** | Outputs the alpha channel data. |

![ParticleColorExample.png](ParticleColorExample.png)(w:900)

In this example, you can see where the ParticleColor expression is providing color to the particles as defined within the particle system.

[/EXCERPT:ParticleColor]



[EXCERPT:ParticleDirection]
## ParticleDirection

The **ParticleDirection** expression outputs Vector3 (RGB) data on a per-particle basis, representing the direction a given particle is currently traveling. 


![ParticleDirectionExample.png](ParticleDirectionExample.png)(w:900)


You can see in this image how the color of the particles is changing based on the current direction each particle is traveling.

[/EXCERPT:ParticleDirection]


## ParticleMacroUV

The **ParticleMacroUV** expression outputs UV texture coordinates that can be used to map any 2d texture onto the entire particle system in a continuous way, meaning the texture will be seamless across particles.  The UVs will be centered around MacroUVPosition (specified in Cascade on the ParticleSystem, under the MacroUV category) and MacroUVRadius determines the world space radius that the UVs should tile at.  The ParticleMacroUV node is useful for mapping continuous noise onto particles to break up the pattern introduced by mapping a texture onto each particle with normal texture coordinates.

| Item | Description |
| -------- | ----------- |
| [REGION:tablesection]Properties[/REGION] ||
| **Use View Space** | If _true_, effectively offsets the coordinates based on the depth of each sprite and creates a parallax effect, which can be useful for giving explosions a radial blur look |

[REGION:fullwidth]
![ParticleMacroUVExample.png](ParticleMacroUVExample.png)
[/REGION]

[EXCERPT:ParticleMotionBlurFade]
## ParticleMotionBlurFade

The **ParticleMotionBlurFade** expression outputs a value representing the amount of fade on a particle as a result of motion blur. A value of 1 represents no blur, black represents complete blur.

![ParticleMotionBlurFade.png](ParticleMotionBlurFade.png)(w:900)

[/EXCERPT:ParticleMotionBlurFade]



[EXCERPT:ParticlePositionWS]
## ParticlePositionWS

The **ParticlePositionWS** expression outputs Vector3 (RGB) data representing each individual particle's position in world space.


![ParticlePositionWS.png](ParticlePositionWSExample.png)(w:900)



In this image, ParticlePositionWS is being fed into emissive color to visualize the data. The particle system has been scaled up to show how the color is changing based on position.

[/EXCERPT:ParticlePositionWS]



[EXCERPT:ParticleRadius]
## ParticleRadius

The **ParticleRadius** expression outputs the radius in Unreal units of each particle individually. This allows, for example, for changes to be made to a material once the radius has reached a certain point.

[REGION:fullwidth]
![ParticleRadiusExample.png](ParticleRadiusExample.png)(w:1000)
[/REGION]

In this image, the particles are shifting from green to red as their radius exceeds 7 units.

[/EXCERPT:ParticleRadius]



[EXCERPT:ParticleRelativetime]
## ParticleRelativeTime

The **ParticleRelativeTime** expression outputs a number between 0 and 1 representing a particle's age, with 0 being the moment of birth and 1 being the moment of death.

[REGION:fullwidth]
![ParticleRelativeTimeExample.png](ParticleRelativeTimeExample.png)(w:900)
[/REGION]

In this example, you can see the particle relative time fed into the emissive color, resulting in particles that are fading from black at the moment of birth to white as they approach death.

[/EXCERPT:ParticleRelativetime]

[EXCERPT:ParticleSize]
## ParticleSize

The **Particle Size** expression outputs the X and Y size of a particle sprite. This can then be used to drive some aspect of a Material.

![](ParticleSize.png)(w:480) 

[REGION:lightbox]
[![](ParticleSizeNetwork.png)(w:480)](ParticleSizeNetwork.png)
[/REGION]

_Click image for full view._

In the example above, Particle Size is being multiplied into Particle Color. Notice that we are masking the output so that we only use the Green channel, which corresponds to the Y-Axis, or the length of the particles. This means that as the particles stretch out, they become brighter in color. As they shrink, they will become dimmer.

[/EXCERPT:ParticleSize]

[EXCERPT:ParticleSpeed]

## ParticleSpeed

**ParticleSpeed** outputs the current speed each particle is traveling, measured in Unreal units per second.

[REGION:fullwidth]
![ParticleSpeedExample.png](ParticleSpeedExample.png)(w:1000)
[/REGION]

In this example, particle speed is feeding the color of the particles, which is then divided by 10 provide more meaningful results. The particles become black as they slow down.


[/EXCERPT:ParticleSpeed]

## SphericalParticleOpacity

The **SphericalParticleOpacity** expression creates a procedural opacity map to cause sprite particles to appear spherical. This can be much simpler than having to create an import a texture map for a similar effect.

| Item | Description |
| -------- | ----------- |
| [REGION:tablesection]Inputs[/REGION] ||
| **Density** | This 0-1 value controls the density of the sphere map. Lower values result in more transparent spheres. Default is 1. |


[OBJECT:ComparisonSlider]
	[PARAM:before]
	![Before](SPO_Before.png)(w:350)
	[/PARAM]
	[PARAM:after]
	![After](SPO_After.png)(w:350)
	[/PARAM]
[/OBJECT]

[INCLUDE:#SPO]


[COMMENT:none]

[EXCERPT:SPO]
[REGION:lightbox]
[![](SPO_Network.png)(w:305)](SPO_Network.png)
[/REGION]
[/EXCERPT:SPO]

[/COMMENT]


[EXCERPT:ParticleSubUV]
## ParticleSubUV

The **ParticleSubUV** expression is used to render sub-images of a texture to a particle.  ParticleSubUV is similar to a flipbook, except that ParticleSubUV allows the texture animation to be manipulated in Cascade.

| Item | Description |
| -------- | ----------- |
| [REGION:tablesection]Properties[/REGION] ||
| **Blend** | Blends together each frame of the SubUV sprite layout, rather than instantly "popping" from one frame to the next. |
| **Texture** | Specifies the texture to use. |
| **Sampler Type** | The type of data that will be sampled and output from the node. |
| **MipValueMode** | Selects how to customize the sample's mip-level or derivatives from the default hardware computed. Affects the look and performance. |
| [REGION:tablesection]Inputs[/REGION] ||
| **UVs** | The UV input is ignored and does nothing. |
| [REGION:tablesection]Outputs[/REGION] ||
| **RGB** | Outputs the three-channel RGB vector value of the color. |
| **R** | Outputs the red channel of the color. |
| **G** | Outputs the green channel of the color. |
| **B** | Outputs the blue channel of the color. |
| **A** | Outputs the alpha channel of the color. If a texture does not contain an alpha channel, connecting the 'alpha' channel to something, while not technically illegal, will always result in zero (black). |


![ParticleSubUVExample.png](ParticleSubUVExample.png)

[/EXCERPT:ParticleSubUV]



[EXCERPT:TextureSampleParameterSubUV]
## TextureSampleParameterSubUV

The **TextureSampleParameterSubUV** expression is identical to the [ParticleSubUV](Engine/Rendering/Materials/ExpressionReference/Particles#ParticleSubUV) except that it is a parameter that can be modified in instances of the material and through code.

| Item | Description |
| -------- | ----------- |
| [REGION:tablesection]Properties[/REGION] ||
| **Parameter Name** | [INCLUDE:Engine/Rendering/Materials/ExpressionReference/Parameters#ParameterNameDefinition] |
| **Group**| [INCLUDE:Engine/Rendering/Materials/ExpressionReference/Parameters#GroupDefinition] |
| **Blend** | Blends together each frame of the SubUV sprite layout, rather than instantly "popping" from one frame to the next. |
| **Texture** | Specifies the texture sampled by the expression. |
| **Sampler Type** | The type of data that will be sampled and output from the node. |
| **MipValueMode** | Selects how to customize the sample's mip-level or derivatives from the default hardware computed. Affects the look and performance. |
| [REGION:tablesection]Inputs[/REGION] ||
| **UVs** | The UV input is ignored and does nothing. |
| [REGION:tablesection]Outputs[/REGION] ||
| **RGB** | Outputs the three-channel RGB vector value of the color. |
| **R** | Outputs the red channel of the color. |
| **G** | Outputs the green channel of the color. |
| **B** | Outputs the blue channel of the color. |
| **A** | Outputs the alpha channel of the color. If a texture does not contain an alpha channel, connecting the 'alpha' channel to something, while not technically illegal, will always result in zero (black). |
[/EXCERPT:TextureSampleParameterSubUV]


