INTSourceChangelist:3807090
Availability:Public
Title:Particle 表現式
Crumbs: %ROOT%, Engine, Engine/Rendering/Materials, Engine/Rendering/Materials/ExpressionReference
Description:パーティクル システムでエミッタに適用するマテリアルの作成に用いる表現式
Version:4.9
tags:Materials

[EXCERPT:TOC]
[TOC(start:2)]
[/EXCERPT:TOC]

## DynamicParameter


[INCLUDE:Engine/Rendering/Materials/ExpressionReference/Parameters#DynamicParameter]


[EXCERPT:ParticleColor]
## ParticleColor

**ParticleColor** 表現式は、**Cascade** 内で定義されたパーティクルごとのカラーデータをもとに任意のパーティクルの現在のカラーに結合します。関数は適切なチャンネル (エミッシブカラー) に接続しなくてはいけません。

| アイテム | 説明 |
|----|----|
| [REGION:tablesection]出力値[/REGION] ||
| **RGB** | 結合した RGB ベクター データを出力します。 |
| **R** | 赤チャンネル データを出力します。 |
| **G** | 緑チャンネル データを出力します。 |
| **B** | 青チャンネル データを出力します。 |
| **A** | アルファ チャンネル データを出力します。 |

![ParticleColorExample.png](ParticleColorExample.png)(w:900)

この例では、パーティクル システム内でパーティクルが定義されると表示する色を供給する ParticleColor 表現式を紹介しています。

[/EXCERPT:ParticleColor]



[EXCERPT:ParticleDirection]
## ParticleDirection

**ParticleDirection** 表現式はパーティクルごとに 3vector (RGB) データを出力します。これは任意のパーティクルが現在移動している方向を表します。 


![ParticleDirectionExample.png](ParticleDirectionExample.png)(w:900)


この画像で、それぞれのパーティクルが現在の移動方向に基づいてパーティクルの色を変化させているのがわかります。

[/EXCERPT:ParticleDirection]


## ParticleMacroUV

**ParticleMacroUV** は、連続的に 2D テクスチャをパーティクル システム全体へマップする際に使用する UV のテクスチャ座標を出力します。つまり、パーティクル全体でテクスチャがシームレスな動作となります。UV は、MacroUVPosition (MacroUV カテゴリにある ParticleSystem 、 Cascade で指定) を中心に配置され、MacroUVRadius は UV がタイル処理されるワールド空間の半径を決定します。ParticleMacroUV ノードは、法線テクスチャ座標で各パーティクル上にテクスチャをマッピングすることによってパターン化を解消し、パーティクル上に連続的なノイズをマッピングするのに役立ちます。

| アイテム | 説明 |
| -------- | ----------- |
| [REGION:tablesection]プロパティ[/REGION] ||
| **Use View Space** | _true_ の場合、各スプライトの深度に基づいて座標を効率よくオフセットし、爆発に放射ブラーの視差効果をもたらします。|

[REGION:fullwidth]
![ParticleMacroUVExample.png](ParticleMacroUVExample.png)
[/REGION]

[EXCERPT:ParticleMotionBlurFade]
## ParticleMotionBlurFade

**ParticleMotionBlurFade** 式は、モーションブラーの結果としてパーティクル上でフェードする量を値で出力します。1 の値はブラーが無いことを表し、黒は完全なブラーを表します。

![ParticleMotionBlurFade.png](ParticleMotionBlurFade.png)(w:900)

[/EXCERPT:ParticleMotionBlurFade]



[EXCERPT:ParticlePositionWS]
## ParticlePositionWS

**ParticlePositionWS** 表現式は、ワールド空間における各パーティクルの位置を表す Vector3 (RGB) データを出力します。


![ParticlePositionWS.png](ParticlePositionWSExample.png)(w:900)



この画像では、 ParticlePositionWS はデータを可視化するためにエミッシブカラーへ送り込まれています。パーティクル システムの機能は、位置に基づいた色の変化方法を表示するようになりました。

[/EXCERPT:ParticlePositionWS]



[EXCERPT:ParticleRadius]
## ParticleRadius

**ParticleRadius** 表現式は、各パーティクルの半径をアンリアル単位で個別に出力します。例えば、半径がある特定のポイントに到達すると、マテリアルに変化をもたらすことができます。

[REGION:fullwidth]
![ParticleRadiusExample.png](ParticleRadiusExample.png)(w:1000)
[/REGION]

この画像は、半径が 7 単位を超えるとパーティクルが緑から赤へ変化する模様を表しています。

[/EXCERPT:ParticleRadius]



[EXCERPT:ParticleRelativetime]
## ParticleRelativeTime

**ParticleRelativeTime** 表現式は、パーティクルの寿命を表す 0 か 1の値を出力します。 0 はパーティクルの誕生を表し、 1 はパーティクルの消滅を表します。

[REGION:fullwidth]
![ParticleRelativeTimeExample.png](ParticleRelativeTimeExample.png)(w:900)
[/REGION]

この例では、パーティクルの相対時間がエミッシブカラーへ送られているのが分かります。結果として誕生時に色が黒から薄れていくパーティクルが、消滅に近づくにつれて白へ変化しています。

[/EXCERPT:ParticleRelativetime]

[EXCERPT:ParticleSize]
## ParticleSize

**Particle Size** 表現式は、パーティクル スプライトの X と Y のサイズを出力します。これは、マテリアルの一部の操作に使用できます。

![](ParticleSize.png)(w:480) 

[REGION:lightbox]
[![](ParticleSizeNetwork.png)(w:480)](ParticleSizeNetwork.png)
[/REGION]

_画像をクリックしてフルサイズで表示_

上のサンプルでは、パーティクル サイズはパーティクル カラーへ乗算されます。出力をマスクしているので、 Y 軸あるいはパーティクルの長さに対応する緑チャネルのみ利用できることにご注意ください。つまり、パーティクルが伸びるにつれて、色が明るくなるということです。パーティクルが縮むと色は暗くなります。

[/EXCERPT:ParticleSize]

[EXCERPT:ParticleSpeed]

## ParticleSpeed

**ParticleSpeed** は、各パーティクルの現在の移動速度をアンリアル単位 / 秒で測定して出力します。

[REGION:fullwidth]
![ParticleSpeedExample.png](ParticleSpeedExample.png)(w:1000)
[/REGION]

この例は、パーティクルの速度はパーティクルの色を送り込んでいます。その後より意味のある結果とするため 10 で除算を行っています。減速するとパーティクルは黒に変化します。


[/EXCERPT:ParticleSpeed]

## SphericalParticleOpacity

**SphericalParticleOpacity** 表現式は、スプライト パーティクルを球体に表示させるプロシージャル オパシティ マップを作成します。インポート テクスチャマップで類似エフェクトを作成するよりも非常にシンプルです。

| アイテム | 説明 |
| -------- | ----------- |
| [REGION:tablesection]入力[/REGION] ||
| **Density** | 球体マップの密度を制御する 0-1 の値です。低値は透明性のある球体となります。デフォルト値は 1 です。 |


[OBJECT:ComparisonSlider]
	[PARAM:before]
	![Before](SPO_Before.png)(w:350)
	[/PARAM]
	[PARAM:after]
	![After](SPO_After.png)(w:350)
	[/PARAM]
[/OBJECT]

[INCLUDE:#SPO]


[COMMENT:none]

[EXCERPT:SPO]
[REGION:lightbox]
[![](SPO_Network.png)(w:305)](SPO_Network.png)
[/REGION]
[/EXCERPT:SPO]

[/COMMENT]


[EXCERPT:ParticleSubUV]
## ParticleSubUV

**ParticleSubUV** 表現式は、テクスチャのサブイメージをパーティクルへレンダリングする際に使用します。ParticleSubUV はテクスチャ アニメーションを Cascade で操作できるという点を除いて、フリップブックと似ています。

| アイテム | 説明 |
| -------- | ----------- |
| [REGION:tablesection]プロパティ[/REGION] ||
| **Blend** | 次から次へとフレームを即時に「ポッピング」するのではなく、 SubUV スプライト レイアウトの各フレームを一緒にブレンドします。 |
| **Texture** | 使用するテクスチャを特定します。 |
| **Sampler Type** | ノードからサンプルおよび出力されるデータ タイプです。 |
| **MipValueMode** | サンプルのミップレベルもしくはデフォルト ハードウェアで計算された微分係数をカスタマイズする方法を選択します。外観とパフォーマンスの調整に影響します。 |
| [REGION:tablesection]入力[/REGION] ||
| **UVs** | UV 入力値は無視され何も起こりません。 |
| [REGION:tablesection]出力値[/REGION] ||
| **RGB** | その色の 3 つのチャンネルである RGB ベクターの値を出力します。 |
| **R** | その色の赤チャンネルを出力します。 |
| **G** | その色の緑チャンネルを出力します。 |
| **B** | その色の青チャンネルを出力します。 |
| **A** | その色のアルファチャンネルを出力します。テクスチャにアルファ チャンネルが含まれていない場合、「アルファ」チャンネルへ何かを接続すると、表向きは不正行為ではないものの常に結果はゼロ (黒) となります。 |


![ParticleSubUVExample.png](ParticleSubUVExample.png)

[/EXCERPT:ParticleSubUV]



[EXCERPT:TextureSampleParameterSubUV]
## TextureSampleParameterSubUV

TextureSampleParameterSubUV は、マテリアルのインスタンスやコードを通じて修正できるパラメータである点を除いて [ParticleSubUV](Engine/Rendering/Materials/ExpressionReference/Particles#ParticleSubUV) と同一です。

| アイテム | 説明 |
| -------- | ----------- |
| [REGION:tablesection]プロパティ[/REGION] ||
| **Parameter Name** | [INCLUDE:Engine/Rendering/Materials/ExpressionReference/Parameters#ParameterNameDefinition] |
| **Group**| [INCLUDE:Engine/Rendering/Materials/ExpressionReference/Parameters#GroupDefinition] |
| **Blend** | 次から次へとフレームを即時に「ポッピング」するのではなく、 SubUV スプライト レイアウトの各フレームを一緒にブレンドします。 |
| **Texture** | 表現式によってサンプル化されたテクスチャを指定します。|
| **Sampler Type** | ノードからサンプルおよび出力されるデータ タイプです。 |
| **MipValueMode** | サンプルのミップレベルもしくはデフォルト ハードウェアで計算された微分係数をカスタマイズする方法を選択します。外観とパフォーマンスの調整に影響します。 |
| [REGION:tablesection]入力[/REGION] ||
| **UVs** | UV 入力値は無視され何も起こりません。 |
| [REGION:tablesection]出力値[/REGION] ||
| **RGB** | その色の 3 つのチャンネルである RGB ベクターの値を出力します。 |
| **R** | その色の赤チャンネルを出力します。 |
| **G** | その色の緑チャンネルを出力します。 |
| **B** | その色の青チャンネルを出力します。 |
| **A** | その色のアルファチャンネルを出力します。テクスチャにアルファ チャンネルが含まれていない場合、「アルファ」チャンネルへ何かを接続すると、表向きは不正行為ではないものの常に結果はゼロ (黒) となります。 |
[/EXCERPT:TextureSampleParameterSubUV]


