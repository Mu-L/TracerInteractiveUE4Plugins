INTSourceChangelist:3354806
Availability:Public
Title:Vector Operation 表現式
Crumbs: %ROOT%, Engine, Engine/Rendering/Materials, Engine/Rendering/Materials/ExpressionReference
Description:ベクター入力値の演算を実行する表現式
Version:4.9
tags:Materials

[EXCERPT:TOC]
[TOC(start:2)]
[/EXCERPT:TOC]

[EXCERPT:AppendVector]
## AppendVector

**AppendVector** 表現式は、チャンネルを結合して、オリジナルよりも多いチャンネルでベクターを作成することができます。例えば、 2 つの個別の [Constants](Engine/Rendering/Materials/ExpressionReference/Constant#Constant) 値を受け取り、2チャンネルの [Constant2Vector](Engine/Rendering/Materials/ExpressionReference/Constant#Constant2Vector) 値を作成するためにこれらをアペンドします。単一テクスチャ内でチャンネルの再順序付けをしたり、複数のグレースケール テクスチャを 1 つの RGB カラーテクスチャに結合する際に役立ちます。

| アイテム | 説明 |
| -------- | ----------- |
| [REGION:tablesection]入力[/REGION] ||
| **A** | 追加する値を受け取ります。 |
| **B** | 追加される値を受け取ります。 |


**例：** 0.2 と 0.4 のアペンドは、 (0.2、0.4) 、(0.2、0.4) と (1.0) のアペンドは (0.2、0.4) です。

![AppendVectorExample.png](AppendVectorExample.png)

[/EXCERPT:AppendVector]


[EXCERPT:ComponentMask]
## ComponentMask

**ComponentMask** 表現式は、入力値から出力へ渡すためのチャンネル (R、G、B および / もしくは A) の特定サブセットの選択を有効にします。入力に存在しないチャンネルを通過しようとすると、入力値が単一の定数値でない限りエラーが生じます。その場合、単一値が各チャンネルを通過します。値が通過するチャンネルとして現在選択されたチャンネルは、表現式のタイトルバーに表示されます。

| アイテム | 説明 |
| -------- | ----------- |
| [REGION:tablesection]プロパティ[/REGION] ||
| **R** | チェックされると、赤 (最初の) チャンネルの入力値が出力へ渡されます。 |
| **G** | チェックされると、緑 (2 番目の) チャンネルの入力値が出力へ渡されます。 |
| **B** | チェックされると、青 (3 番目の) チャンネルの入力値が出力へ渡されます。 |
| **A** | チェックされると、アルファ (4 番目の) チャンネルの入力値が出力へ渡されます。 |


**例：** ComponentMask に (0.2,0.4,1.0) を入力すると G チャンネルから (0.4) が出力されます。これをカラー ベクターで使うと 40% 明るいグレースケール値として表示されます。

[REGION:fullwidth]
![ComponentMaskExample.png](ComponentMaskExample.png)
[/REGION]

[/EXCERPT:ComponentMask]


[INCLUDE:Engine/Rendering/Materials/ExpressionReference/Math#CrossProduct]


## DeriveNormalZ

**DeriveNormalZ** 表現式は、 X と Y コンポーネントが入力されてタンジェント空間法線の Z コンポーネントを派生し、結果として 3 チャンネルのタンジェント空間法線を出力します。Z は、「Z = sqrt(1 - (x \* x + y \* y));」として演算されます。

| アイテム | 説明 |
| -------- | ----------- |
| [REGION:tablesection]入力[/REGION] ||
| **InXY** | 2 チャンネルベクター値の形式でタンジェント空間法線の X と Y コンポーネントを受け取ります。 |


![DeriveNormalZExample.png](DeriveNormalZExample.png)


[INCLUDE:Engine/Rendering/Materials/ExpressionReference/Math#DotProduct]


[INCLUDE:Engine/Rendering/Materials/ExpressionReference/Math#Normalize]


## Transform

**Transform** 表現式は、3 チャンネル ベクター値をある参照座標系から別の系に変換します。

デフォルト設定で、マテリアルの全てのシェーダー計算はタンジェント空間で実行されます。ベクター定数、カメラ ベクター、ライト ベクターなどは、マテリアルで使用される前に全てタンジェント空間へ変換されます。Transform 表現式は、これらのベクターをタンジェント空間からワールド空間、ローカル空間、またはビュー空間の座標系への変換を可能にします。また、ワールド空間ベクターとローカル空間ベクターを他の参照座標系への変換も可能にします。

| アイテム | 説明 |
| -------- | ----------- |
| [REGION:tablesection]プロパティ[/REGION] ||
| **Source** | 変換するベクターのソースとなる現在の座標システムを指定します。ワールド、ローカル、またはタンジェントのいずれかになります。 |
| **Destination** | 変換するベクターの送り先となる現在の座標システムを指定します。ワールド、ビュー、ローカル、またはタンジェントのいずれかになります。 |


Transform ノードは、ミラー化された UV を構成するため、例えば、キャラクターの右端のみに影響を及ぼすハイライトなどを有効にします。

Transform ノードは、キューブマップのサンプリングに使用するワールド空間法線の生成に実用的です。法線マップはワールド空間へ変換することができます。以下は、キューブマップをサンプリングするために法線マップをワールド空間へ変換した例です。

[REGION:fullwidth]
![TransformExample1.png](TransformExample1.png)
[/REGION]

真横向き効果を作成するために、法線マップをビュー空間へ変換します。これはテクスチャ座標の生成にメッシュ法線を使用して実行します (一般的に「スフィア (球状) マッピング」と呼ばれます) 。この手法は、カメラに直接対向している法線をテクスチャ座標の中心にマッピングし、カメラに垂直に対向している法線をテクスチャ座標の端にマッピングします。これはスフィア マッピングの例です。

![SphereMapTestTexture.png](SphereMapTestTexture.png)

値 (0、0、1) が入力された Constant3vector は、 TRANSFORM_View が設定された Transform ノードへ入力されます。その後 ComponentMask ノードを通過します (R と G のみを通過)。Transform ノードは、 -1 から 1 の範囲の値を出力するため、値を 0 から 1 の範囲にするバイアスをかけなくてはいけません。バイアスをかけるには、 0.5 で乗算してその後 0.5 を加算します。そしてテクスチャの座標へ接続します。どのテクスチャにも機能します。 3 つのリングで実行してみましたが、効果は明らかです。

![SphereMapTestTexture.png](SphereMapTestTexture.png)

この効果を法線マップへ適用するには、 Constant3Vector を法線マップテクスチャと置き換えます。

これは、ブロブのようなロック形状のメッシュへ適用された球状マップマテリアルの例です。

[REGION:fullwidth]
![SphereMapRockExample.png](SphereMapRockExample.png)
[/REGION]

[REGION:warning]
**制限付き補間が原因で、 VertexColor と Transform ノードは相互排他的な関係にあります。Transform ノードと VertexColor を両方使用すると、 VertexColor は全て白色になります。
[/REGION]
[REGION:warning]
**Transform ノードは現時点で不均一なスケーリングを正確に処理しません。**
[/REGION]


## TransformPosition

[REGION:warning]
オリジンから離れたワールドポジションの派生に使用すると、主要な精密性に問題が発生するためこのノードは廃止される予定です。代わりに WorldPosition ノードを使用してください。
[/REGION]

**TransformPosition** 表現式は、スクリーン スペースから式の TransformType 変数で指定された変換先へ、どんなポジションの変換も有効にします。現時点では、ワールド空間への変換のみをサポートしています。この表現式は、マテリアルのワールド空間座標の取得に使用します。ワールド空間を可視化するには、エミッシブへ直接接続します。

