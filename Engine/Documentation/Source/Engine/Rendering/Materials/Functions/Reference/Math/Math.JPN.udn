INTSourceChangelist:2735597
Availability:Public
title:数学
Crumbs: %ROOT%, Engine, Engine/Rendering/Materials,  Engine/Rendering/Materials/Functions
Description:Pi（π） の計算やベクターコンポーネントの追加など事前設定された数学関数
Version:4.9

[TOC (start:2 end:3)]

数学関数は、テクスチャ内のピクセルの値を基本的な数学方程式で実行します。 

## 数学関数

以下は、Math カテゴリ配下にある全関数のリストです。

### コンポーネントの追加

**AddComponents** は、Vector2、Vector3、Vector4 の値を受け取り、これらのコンポーネントを結合して結果を出力します。対応入力に適切な出力を使用しなくてはいけません。例えば *f3 (Vector3)* へ画像を入力した場合、*f3* 出力を使用しなくてはいけません。

| アイテム | 説明 |
| -------- | -------- |
| [REGION:tablesection]入力値[/REGION] ||
| **f2 (Vector2)** | コンポーネントを混ぜ合わせて *f2* 出力へ送信するために Vector2 の値を受け取ります。|
| **f3 (Vector3)** | コンポーネントを混ぜ合わせて *f3* 出力へ送信するために Vector3 の値を受け取ります。|
| **f4 (Vector4)** | コンポーネントを混ぜ合わせて *f4* 出力へ送信するために Vector4 の値を受け取ります。|
|[REGION:tablesection]出力値[/REGION] ||
| **f2 (Vector2)** | *f2* 入力からコンポーネントの結合値を出力します。|
| **f3 (Vector3)** | *f3* 入力からコンポーネントの結合値を出力します。|
| **f4 (Vector4)** | *f4* 入力からコンポーネントの結合値を出力します。|


![Add Components](AddComponents_Demo.png)

[REGION:note]
	それぞれの入力値は対応する出力に対して個別に計算されるため、それぞれのノードに対して出力を使用する場合、3 つ全ての入力値を単一ノードで使用することもできます。例えば、*f2* 出力を利用して Vector2 のコンポーネントの結合に AddComponent 関数ノードを使用したり、*f3* 出力を利用して Vector3 のコンポーネントの結合に同一ノードを使用します。
[/REGION]

### Pi

**Pi** 関数は Pi (π) の定数として機能し、小数第六位 (3.141592) まで計算します。ノードは乗数の入力値も装備しています。

| アイテム | 説明 |
| -------- | -------- |
| [REGION:tablesection]入力値[/REGION] ||
| **Multiplier (Scalar)** | Pi (π) を掛け合わせる値を入力します。|


![Pi](Pi_Demo.png)

### LinearSine

**LinearSine** 関数はスカラー値を受け取り、その値の 0 から 1 の値の線形正弦波 (繰り上げた線形正弦波) を出力します。Time 式を入力値と接続して Linear Sine 関数を使用すると、出力値に線形正弦波と一致するアニメーションが表示されます。 

| アイテム | 説明 |
| -------- | -------- |
| [REGION:tablesection]入力値[/REGION] ||
| **Value** (Scalar) | Linear Sine 関数が適用される入力値です。この値が時間経過とともに変化すると、出力は波形になります。|
| **Period**  (Scalar) | Period は一つの完全な遷移に必要な時間を制御します。値 1 よりも大きな値は波形を減速させます。|
| **-1 to 1** (StaticBool) | _true_ に設定すると、波形をスケーリングおよびオフセットして、値 0 から 1 ではなく、値 -1 から 1 の間で実行します。|
| **Sine Phase** (StaticBool) | _true_ に設定すると、線形動作ではなく、通常の正弦波の動作を出力します。|
|[REGION:tablesection]出力値[/REGION] ||
| **Linear Sine** | 線形正弦波を出力します。 |
| **Rounded Linear Sine** | 曲線的な端の線形正弦波を出力します。|


![Linear Sine](LinearSine_Demo.png)

### VectorToRadialValue

**VectorToRadialValue** 関数は Vector2 のベクターを角度に変換、または UV 座標データをラジアル座標へ変換します。このベクターの場合、角度は一つのチャンネルに出力されて、ベクターの長さは別のチャンネルに出力されます。

| アイテム | 説明 |
| -------- | -------- |
| [REGION:tablesection]入力値[/REGION] ||
| **Vector or UVs (Vector2)** | Vector2 または UV 座標一式のどちらかを受け取ります。|
| **Swizzle Coordinate Output (StaticBool)** | 出力の U と V コンポーネントを反転させます。|
|[REGION:tablesection]出力値[/REGION] ||
| **Radial Coordinates** | 入力値のラジアル座標を返します。このベクターの場合、角度は一つのチャンネルに出力されて、距離は別のチャンネルに出力されます。|
| **Vector Converted to Angle** | 入力ベクターの角度、または UV の場合、ラジアル グラディエントを返します。|
| **Linear Distance** | 入力ベクターの線形の長さ、または UV の場合、ラジアル グラディエントの距離を出力します。|


![Vector To Radial Value](VectorToRadialValue_Demo.png)
