Availability:Public
Title:Material Inputs			
Crumbs: %ROOT%, Engine, Engine/Rendering/Materials, Engine/Rendering/Materials/IntroductionToMaterials
Description:An in-depth look at the various inputs available on a Material and how they are used.
Version: 4.9
parent:Engine/Rendering/Materials
order:5
topic-image:Engine/Rendering/Materials/MaterialInputsTopic.png
type:reference
tags:Materials


Here we take a look at the available inputs when making a Material. By feeding values (by way of constants, parameters, and textures) into these inputs, you can define just about any physical surface you can imagine.

Not all inputs are used with every combination of Blend Mode and Shading Model. As such, we will designate when each input is available for use, so that you know which inputs are used with each type of Material you create.


## Inputs and Material Settings

Not all inputs will be useful for every type of Material you create. For instance, when developing a Light Function - a Material that is applied to a light - you can only use the Emissive Color input on the material and nothing else, since other inputs, such as Metallic or Roughness, would not be applicable. Because of this, it is important to know what type of Material you are creating before you start worrying too much about inputs. The three primary controlling properties in this are:

* **Blend Mode** - This controls how your Material will blend in with the pixels behind it.
* **Shading Model** - This defines how light is calculated for the surface of the Material.
* **Material Domain** - This controls how the Material is intended to be used, such as whether it is meant to be part of a surface, a Light Function, or a Post Process Material.

Fortunately, Unreal Engine 4 removes the guess work for which inputs you need for a given type of Material. As you change these settings in the Material, you will notice that your available inputs will update, and inputs that you do not need will be disabled.


## Base Color

[INCLUDE:Engine/Rendering/Materials\PhysicallyBased#BaseColor]



## Metallic

[INCLUDE:Engine/Rendering/Materials\PhysicallyBased#Metallic] 

![](Engine/Rendering/Materials\PhysicallyBased\Metallic_21.png)

## Specular

[INCLUDE:Engine/Rendering/Materials\PhysicallyBased#Specular]

![](Engine/Rendering/Materials\PhysicallyBased\Specular_21.png)


## Roughness

[INCLUDE:Engine/Rendering/Materials\PhysicallyBased#Roughness]

[INCLUDE:Engine/Rendering/Materials\PhysicallyBased#RoughnessMap]

[EXCERPT:lightbox]
**Click for full size**

[REGION:lightbox]
[![](Engine/Rendering/Materials\PhysicallyBased/RoughBias_12.png)(w:935)](Engine/Rendering/Materials\PhysicallyBased/RoughBias_12.png)
[/REGION]
[/EXCERPT:lightbox]

## Emissive Color

[EXCERPT:Emissive]
The **Emissive Color** input controls which parts of your Material will appear to glow because they are emitting light. Ideally, this will receive a masked texture (mostly black except in the areas that need to glow). 

Values greater than 1 are allowed as HDR lighting is supported.

[EXCERPT:lightbox]
**Click for full size**

[REGION:lightbox]
[![](Emissive_21.png)(w:935)](Emissive_21.png)
[/REGION]
[/EXCERPT:lightbox]
[/EXCERPT:Emissive]

## Opacity

[EXCERPT:Opacity]
The **Opacity** input is used when using the [Translucent Blend Mode](Engine/Rendering/Materials\MaterialProperties\BlendModes#Translucent). It allows you to input a value between 0 and 1 where:

* 0.0 represents completely transparent.
* 1.0 represents fully opaque.

Opaque and masked blend modes also use Opacity when using one of the subsurface shading models.

[EXCERPT:lightbox]
**Click for full size**

[REGION:lightbox]
[![](TranslucencyImage.png)(w:935)](TranslucencyImage.png)
[/REGION]
[/EXCERPT:lightbox]

Opacity is mostly used for _Translucent_, _Additive_, and _Modulated Materials_.
[/EXCERPT:Opacity]

## Opacity Mask


[EXCERPT:OpacityMask]
**Opacity Mask** is similar to Opacity, but is only available when using the Masked Blend Mode. As with Opacity, this takes in a value between 0.0 and 1.0, but _unlike_ Opacity, varying shades of gray are not seen in the result.  When in Masked mode, a Material is either completely visible or completely invisible. This makes it a perfect solution when you need Materials that define complex solid surfaces such as wire mesh, chain link fences, and so on. The opaque portions will still respect lighting.

You can use the **Opacity Mask Clip Value** property on the base Material node to control the point where clipping takes place. See the [Masked Blend Mode documentation](Engine/Rendering/Materials\MaterialProperties\BlendModes#Masked) for more details.

[EXCERPT:lightbox]
**Click for full size**

[REGION:lightbox]
[![](MaskedChainlink.png)(w:935)](Engine/Rendering/Materials\MaterialInputs/MaskedChainlink.png)
[/REGION]
[/EXCERPT:lightbox]

[/EXCERPT:OpacityMask]

## Normal

[EXCERPT:Normal]
The **Normal** input takes in a normal map, which is used to provide significant physical detail to the surface by perturbing the "normal," or facing direction, of each individual pixel. 

![](Axes.png)(w:935)

**In the image above**, both weapons are using the same Static Mesh. The lower one exhibits a highly detailed normal map, which provides tremendous additional detail and gives the illusion that the surface contains many more polygons than are actually being rendered. Such normal maps are often created from high-resolution modeling packages, such as Pixologic ZBrush.

![](NormalNetwork.png)
[/EXCERPT:Normal]


## World Position Offset

[EXCERPT:WPO]
The **World Position Offset** input allows for the vertices of a mesh to be manipulated in world space by the Material. This is useful for making objects move, change shape, rotate, and a variety of other effects. This is useful for things like ambient animation.


**Click for full size**

[REGION:lightbox]
[![](WPODancing.png)(w:935)](WPODancing.png)
[/REGION]

The above network will cause your object to simultaneously spiral and wave up and down, like it is dancing!

[REGION:warning]
When using World Position Offset to expand your object beyond its original bounds, keep in mind that the renderer still uses those original bounds. This means that you may see culling and shadowing errors. You may go into the properties of a mesh and set its **Scale Bounds** property to compensate, though this has a draw on performance and may lead to shadowing errors.
[/REGION]

[/EXCERPT:WPO]

## World Displacement & Tessellation Multiplier

[EXCERPT:WorldDisp]
**World Displacement** works very much like World Position Offset, but it uses Tessellation vertices rather than the base vertices of the mesh. In order for this to be enabled, the Tessellation property on the Material must be set to something other than _None_.
[/EXCERPT:WorldDisp]

[EXCERPT:TessMult]
**Tessellation Multiplier** controls the amount tessellation along the surface, allowing more detail to be added where needed. As with World Displacement, for this to be enabled, the Tessellation property must be set to something other than _None_.
[/EXCERPT:TessMult]

[EXCERPT:WorldDispAndTess]
**Click for full size**

[REGION:lightbox]
[![](DisplacementNetwork.png)(w:935)](DisplacementNetwork.png)
[/REGION]


[REGION:warning]
When using World Displacement to expand your object beyond its original bounds, keep in mind that the renderer still uses those original bounds. This means that you may see culling and shadowing errors. You may go into the properties of a mesh and set its **Scale Bounds** property to compensate, though this has a draw on performance and may lead to shadowing errors.
[/REGION]

[/EXCERPT:WorldDispAndTess]

## Subsurface Color

[EXCERPT:SubsurfColor]
The Subsurface Color input is only enabled when the [Shading Model](Engine/Rendering/Materials\MaterialProperties\LightingModels) property is set to Subsurface. This input allows you to add a color to your Material to simulate shifts in color when light passes through the surface. For instance, human characters might have a red subsurface color on their skin to simulate the blood beneath its surface.

**Click for full size**

[REGION:lightbox]
[![](SkinSSS.png)(w:935)](SkinSSS.png)
[/REGION]

[/EXCERPT:SubsurfColor]

## Ambient Occlusion

Ambient Occlusion is used to help simulate the self-shadowing that happens within crevices of a surface. Generally, this input will be connected to an AO map of some type, which is often created within 3D modeling packages such as Maya, 3ds Max, or ZBrush.

![](NormalNetwork.png)

## Refraction

[EXCERPT:Refraction]
The Refraction input takes in a texture or value that simulates the index of refraction of the surface. This is useful for things like glass and water, which refract light that passes through them. 

**Click for full size**

[REGION:lightbox]
[![](RefractionNetwork.png)(w:935)](RefractionNetwork.png)
[/REGION]

|Common Indices of Refraction||
|--|--|
|**Air**|1.00|
|**Water**|1.33|
|**Ice**|1.31|
|**Glass**|1.52|
|**Diamond**|2.42|

[/EXCERPT:Refraction]

## Clear Coat

The Clear Coat Shading Model can be used to better simulate multilayer materials that have a thin translucent layer of film over the surface of the Material.
In addition to this, the Clear Coat Shading Model can also be used with either metal or nonmetal surfaces. In fact, it was specifically designed to model this second class of smooth colored films 
over a non-colored metal. Some examples of Clear Coat Materials include acrylic or lacquer clear coats, and colored films over metals such as soda cans or car paint. 

![](Clearcoat.png)

The Clear Coat Shading Model opens up two new Material inputs on the Main Material node. 

**Clear Coat**: Amount of clear coat layer, 0 acts like the standard shading model, 1 is the full clear coat model. This is useful for masking. 

**Clear Coat Roughness**: Roughness for the clear coat layer. Our approximation is accurate for small values. Very rough clear coat layers are supported but will not be very accurate compared to their real world counterparts. 


