Availability: Public
Title:Material Blend Modes
Crumbs: %ROOT%, Engine, Engine/Rendering/Materials, Engine/Rendering/Materials/IntroductionToMaterials,  Engine/Rendering/Materials/MaterialProperties
Description:A look at Material Blend Modes and how they affect the rendering of a Material.
Version: 4.9
tags:Materials


[TOC(start:2 end:2)]



![](BlendModeProperties.png)

[EXCERPT:BlendModes]
Blend Modes describe how the output of the current Material will blend over what is already being drawn in the background. Put more technically, it allows you to control how the engine will combine this Material (**Source color**) with what is already in the frame buffer (**Destination color**) when rendered this Material is rendered in front of other pixels.

To demonstrate this, we have set up a simple scene with a camera and two objects. We will look at (or through) the first object and see how it affects the background as we change Blend Modes.

[REGION:fullwidth]
![](CameraObjectSetup.png)
[/REGION]

## Opaque

The Opaque Blend Mode is easily the most straightforward, and probably the one you will use most often. It defines a surface through which light neither passes nor penetrates. This is perfect for most plastics, metals, stone, and the larger percentage of other surface types.



[REGION:imagetable]
| ![](CameraObjectSetup.png)(w:500) | ![](CamerasView.png)(h:189) |
| --- | --- |
| Scene Setup | Camera's View |
[/REGION]



## Masked

Masked Blend Mode is used for objects in which you will need to selectively control visibility in a binary (on/off) fashion. For example, consider a Material that simulates a chain link fence or grate. You will have some areas that look solid while others are invisible. Such Materials are perfect for the Masked Blend Mode.


![](MaskedGridMaterial.png)(w:700)


It is important to keep in mind the difference between _transparent_ and _not rendered_. A transparent surface, such as glass, still interacts with light in the form of reflections (specularity). Pixels that are culled in Masked mode simply _do not draw_; you will not see any reflections in those areas. If you want to retain reflections or specular aspects, you would do well to use the Translucent Blend Mode, or consider making a Layered Material.

Further, since these features don't render in the masked area, they aren't calculated at all, leading to performance savings on the GPU.


[REGION:imagetable]
| ![](MaskedSetup.png)(w:500) | ![](MaskedGridCameraView.png)(h:189) |
| --- | --- |
| Scene Setup | Camera's View |
[/REGION]


When using Masked Blend Mode, you need to pay special attention to the **Opacity Mask Clip Value** property. This property holds a 0-1 scalar value which controls what value of the opacity mask texture will be used as a cutoff point, beyond which all **darker** pixels will not render. 

[REGION:imagetable]
| [INCLUDE:#OpacityMaskClipValue] | ![](OpacityMaskMaterial.png)(w:445) |
| --- | --- |
| Opacity Mask Clip Value (Drag the slider to preview) | Material Network |
[/REGION]

[REGION:note]
	In the example above, the Material has its **Two Sided** property set to _True (checked)_, which is why you can see the inside of the box.

	Also, despite the interactive example shown here, the **Opacity Mask Clip Value** property is not designed to be changed at runtime.
[/REGION]

## Translucent

The Translucent Blend Mode is used for objects that require some form of transparency. 

![](TranslucentNetwork.png)(w:400)

This Blend Mode works by taking in an Opacity value or texture and applying it to the surface such that black areas are completely transparent, white areas are completely opaque, and the varying shades of gradation between result in corresponding transparency levels. This means that with a gray Opacity texture, you can have objects that appear to be translucent, letting only some of the background through.

[REGION:imagetable]
| ![](TranslucentSetup.png)(w:500) | ![](TranslucentCamera.png)(h:192) |
| --- | --- |
| Scene Setup | Camera's View |
[/REGION]

An important consideration when using Translucent Materials is that they do not currently support specularity. This means that you will see no reflections along the surface. However, such reflections can be faked using a [Cubemap](Engine/Content/Types/Textures\Cubemaps) via a network similar to this:

[REGION:lightbox]
[![](FakedReflections.png)(w:930)](FakedReflections.png)
[/REGION]**Click to enlarge**



## Additive

The Additive Blend Mode simply takes the pixels of the Material and adds them to the pixels of the background. This is very similar to the _Linear Dodge (Add)_ Blend Mode in Photoshop. This means that there is no darkening; since all pixel values are _added_ together, blacks will just render as transparent. This Blend Mode is useful for various special effects such as fire, steam, or holograms. 

[REGION:fullwidth]
![](AdditiveNetwork.png)
[/REGION]

As with the Translucent Blend Mode, this Blend Mode does not respect specularity (i.e. reflections). The additive nature of the blending probably means you will not use it anyway, but it is possible to simulate a reflection-like effect using the Cubemap method shown above in the Translucent section.


[REGION:imagetable]
| ![](AdditiveSetup.png)(w:500) | ![](AdditiveCamera.png)(h:192) |
| --- | --- |
| Scene Setup | Camera's View |
[/REGION]



## Modulate

The Modulate Blend Mode simply multiplies the value of the Material against the pixels of the background. The behavior is very similar to the _Multiply_ Blend Mode in Photoshop. 


![](ModulateNetwork.png)

In the graph above, the material has been set to a Blend Mode of _Modulate_ with a Shading Model of _Unlit_.

[REGION:imagetable]
| ![](ModulateScene.png)(w:500) | ![](ModulateCamera.png)(h:192) |
| --- | --- |
| Scene Setup | Camera's View |
[/REGION]


[REGION:warning]
The Modulate blend mode is best suited for certain particle effects. But care must be taken as it does not support lighting or Separate Translucency.
[/REGION]

| Mode | Description |
| ---- | ----------- |
| **_BLEND_Opaque_** | Final color = Source color.  This means that the Material will draw on top of the background. This blend mode is compatible with lighting.
| **_BLEND_Masked_** | Final color = Source color if OpacityMask > OpacityMaskClipValue, otherwise the pixel is discarded.  This blend mode is compatible with lighting.
| **_BLEND_Translucent_** | Final color = Source color * Opacity + Dest color * (1 - Opacity).  This blend mode is **NOT** compatible with dynamic lighting.
| **_BLEND_Additive_** | Final color = Source color + Dest color.  This blend mode is **NOT** compatible with dynamic lighting.
| **_BLEND_Modulate_** | Final color = Source color x Dest color.  This blend mode is **NOT** compatible with dynamic lighting, or fog, unless this is a decal material.
[/EXCERPT:BlendModes]

[COMMENT:none]
[EXCERPT:OpacityMaskClipValue]
[OBJECT:SliderSequence]
	[PARAMLITERAL:max]
	19
	[/PARAMLITERAL]
	[PARAMLITERAL:ext]
	jpg
	[/PARAMLITERAL]
	[PARAMLITERAL:id]
	opacityMaskClipValue
	[/PARAMLITERAL]
	[PARAM:caption]
	 
	[/PARAM]
	[PARAM:image_list]
	![](opacityMaskClipValue_1.png)
	![](opacityMaskClipValue_2.png)
	![](opacityMaskClipValue_3.png)
	![](opacityMaskClipValue_4.png)
	![](opacityMaskClipValue_5.png)
	![](opacityMaskClipValue_6.png)
	![](opacityMaskClipValue_7.png)
	![](opacityMaskClipValue_8.png)
	![](opacityMaskClipValue_9.png)
	![](opacityMaskClipValue_10.png)
	![](opacityMaskClipValue_11.png)
	![](opacityMaskClipValue_12.png)
	![](opacityMaskClipValue_13.png)
	![](opacityMaskClipValue_14.png)
	![](opacityMaskClipValue_15.png)
	![](opacityMaskClipValue_16.png)
	![](opacityMaskClipValue_17.png)
	![](opacityMaskClipValue_18.png)
	![](opacityMaskClipValue_19.png)
	[/PARAM]
[/OBJECT]
[/EXCERPT:OpacityMaskClipValue]
[/COMMENT]