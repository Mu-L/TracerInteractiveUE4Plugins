Availability: Public
Title:Material Properties
Crumbs: %ROOT%, Engine, Engine/Rendering/Materials, Engine/Rendering/Materials/IntroductionToMaterials
Description:An introductory document on UE4 Materials and how they work.
Version: 4.9
topic-image:Engine/Rendering/Materials/MatProps.png
parent:Engine/Rendering/Materials
order:4
type:reference
tags:Materials

[TOC(start:2 end:2)]



This document breaks down the properties available on a Material. These properties are accessible by selecting the Main Material node in the Material Editor.


* Properties inside Material:

![](PropertiesPanelMaterialEditor_Mat.png)(h:445) 


The base material node has a number of properties which affect how the material behaves. These properties are described below, with each category divided into its own document section, and presented in the order in which they appear in the **Properties** panel.


## Physical Material

![](PhysicalMaterials.png)

| Property | Description |
| -------- | ----------- |
| **Phys Material** | The [Physical Material](Engine/Physics\PhysicalMaterials) associated with this Material. Physical Materials provide a definition of physics properties, such as how much energy will be retained on collision (bounciness) and other physics-based aspects. A Physics Material has no influence over how a Material appears visually. |

## Material

![](MaterialSection.png)

| Property | Description |
| -------- | ----------- |
| **Material Domain** | [INCLUDE:#MaterialDomain] |
| **Blend Mode** | [INCLUDE:#BlendModes]   |
| **Decal Blend Mode**| This defines how to GBuffer channels are getting manipulated by a decal material pass.(Only with MaterialDomain == MD_DeferredDecal) |
| **Decal Response**| This defines how the Material reacts on DBuffer decals(Affects look, performance, and texture/sample usage). Non DBuffer Decals can be disabled on the primitive(e.g. static mesh)|
| **Shading Model** | [INCLUDE:#ShadingModels] |
| **Opacity Mask Clip Value** | This is the reference value which the OpacityMask input of masked materials will clip against per-pixel.  Any value higher than OpacityMaskClipValue will pass and the pixel will be drawn (opaque), any value lower will fail and the pixel will be discarded (transparent). |
| **Two Sided** | The normal will be flipped on back faces, which means lighting will be calculated for both the front faces and the back faces.  This is commonly used on foliage to keep from having to double up the number of polygons.  Two Sided does not work correctly with static lighting, since the mesh still uses only a single UV set for light mapping.  As a result, two sided materials with static lighting will be shaded the same on both sides. |
| **Tangent Space Normal** | Tangent space normal's are calculated from the surface of the object, with the Z-Axis (blue) always pointing directly away from the surface. World space normal's use the world coordinate system to calculate pixel angle, ignoring the surface's original orientation. Tangent space calculations are a bit more costly in terms of performance, but are generally more convenient, as these are usually the types of normal maps you can create in 2D applications such as Photoshop.   Visually, tangent-space normal maps tend to look primarily blue-ish, while world-space maps are more vividly rainbow-colored.|
| **Decal Blend Mode** | [INCLUDE:#DecalBlendModes] |
| **Use Material Attributes** | This checkbox will cause the Material's primary node to be condensed down to a single input labeled "Material Attributes." This is useful when you need to blend in multiple Materials using Layered Materials, or when defining multiple Material types using a Make Material Attributes expression node. See the Layered Materials documentation for more information. |
| **Subsurface Profile** | This will allow you to change what [Subsurface Profile](Engine/Rendering/Materials/LightingModels/SubSurfaceProfile) is used in the Material.  |
| **Num Customized UVs** | This sets the number of Customized UV inputs to display. Unconnected customized UV inputs will just pass through the vertex UVs.  |
| **Generate Spherical Particle Normal's** | This produces surface normal's that remain spherical as you rotate around a Particle System that uses this Material. This is useful for volumetric Particle Systems, since the sprites always rotate to face the camera. With this option, they will have a more spherical volume appearance. |
| **Emissive(Dynamic Area Light)** | If enabled, the Material's Emissive color is injected into the Light Propagation Volume. |
| **Wire Frame)** | Enables a wire frame view of the mesh the Material is applied to. |
| **Refraction Bias** | This property offsets the depth of the refraction test. This is useful when refraction values are causing unwanted nearby objects (typically in front of the translucent object) from rendering into the Material surface. Higher values will start to separate refractions, however, causing a visible break between the surface and the refracted objects. This property does not enable until you have connected some expression node into the Refraction input. |


## Translucency

![](TranslucencyProperties.png)

| Property | Description |
| -------- | ----------- |
| **Separate Translucency** | This indicates that the Material should be rendered in the Separate Translucency Pass( This mean that this will not be affected by DOF and also requires bAllowSeparateTranslucency to be set in the .INI files) |
| **Responsive AA (Ant aliasing)** | Small moving objects, especially particles, can sometimes get obliterated by ant aliasing; by setting this property to _true_, a different AA algorithm is used which provides more definition. Put another way, if you create a blizzard or similar particle system and you feel like you cannot really see your snowflakes, turn this on - it will help. However, this should _only_ be used on small moving objects, because it creates aliasing artifacts on the background. |
| **Translucency Lighting Mode** | [INCLUDE:#TransLightingMode]  See [LitTranslucency](Engine/Rendering/LightingAndShadows/LitTranslucency). |
| **Translucency Directional Lighting Intensity** | Useful for artificially increasing the influence of the normal on the lighting result for translucency. A value larger than 1 increases the influence for the normal, a value smaller than 1 makes the lighting more ambient. |
| **Disable Depth Test** |  Allows the Material to disable depth tests, which is only meaningful with translucent blend modes.  Disabling depth tests will make rendering significantly slower since no occluded pixels can get Z-culled. |
| **Use Translucency Vertex Fog** | When _true_, translucent materials are fogged. Defaults to _true_. |


## Translucency Self Shadowing

![](TransSelfShadowingProperties.png) ![](PerPixNonDirectional.png)(h:189)

Translucent self shadowing is a nice way to get a volumetrically lit translucent object, such as a pillar of smoke or steam. The self shadowing is broken into two primary parts: Self Shadow Density and Second Self Shadow Density. The two parts exist to allow for variations. You can define the density of each independently and use the difference between the two to get interesting patterns throughout the self shadow.

| Property | Description |
| -------- | ----------- |
| **Translucent Shadow Density Scale** | This sets the density of the shadow cast onto other surfaces by this Translucent Material. This acts a bit like a master scale for shadowing; if set to 0, there is no shadowing whatsoever. As you increase the value to 1 and beyond, both the cast shadow and the self shadow will get darker. |
| **Translucent Self Shadow Density Scale** | Sets the density of the shadow this Material casts on itself. Consider shadows within a pillar of smoke.  |
| **Translucent Self Shadow Second Density Scale** | This is a second self shadow density that can be set for variation. An internal gradient is created between this value and the Translucent Self Shadow Density Scale. |
| **Translucent Self Shadow Second Opacity** | This sets the opacity value for secondary self shadowing., serving as a way to scale the gradient effect between self shadow and second self shadow. |
| **Translucent Backscattering Exponent** | This controls the backscattering that is used when employing the Subsurface shading model along with Translucency. Larger values give a smaller, brighter backscattering highlight. This value is only used within volumetric translucent shadows formed from a directional light. |
| **Translucent Multiple Scattering Extinction** | This gives a colored extinction value - which basically amounts to a shadow color - for objects that have a volumetric translucent shadow, such as smoke or steam. |
| **Translucent Shadow Start Offset** | This is a world-space offset for the self shadow created within a translucent volume. The higher the number, the farther the shadow moves away from the lighting source. |


## Usage

![](UsageFlagProperties.png)

The Usage flags are used to control the types of objects on which the Material will be used. When compiling Materials, these settings allow the Engine to compile special versions for each application. These are only valid when using the Surface Material Domain setting.

In the editor, these flags will be set automatically for any objects that already exist within your maps. For instance, if you have a Particle System that uses your Material placed somewhere in a level, when you load that map in the editor, it will automatically set the _Used with Particle System_ flag.  The material asset will need to be saved to allow the game to use the material on that specific mesh.

[REGION:warning]
 If you do not have the appropriate usage flag set, the default world grid material will be used in-game instead! This will have an appropriate message in the log of the game client.
[/REGION]

| Property | Description |
| -------- | ----------- |
| **Used with Skeletal Mesh** | Set this if the Material will be placed on a Static Mesh. |
| **Used with Editor Compositing** | Set if the Material will be used with the Editor UI. |
| **Used with Landscape** | Set if the Material will be used on a Landscape surface. |
| **Used with Particle Sprites** | Used if this Material will be placed on a Particle System. |
| **Used with Beam Trails** | Set if the Material will be used with Beam Trails. |
| **Used with Mesh Particles** | Indicates that the Material and its instances can be used with mesh particles. This will result in the shaders required to support mesh particles being compiled which will increase shader compile time and memory usage. |
| **Used with Static Lighting** | This is set if the Material will be considered for Static Lighting, such as if it uses an Emissive effect that should affect lighting. |
| **Used with Fluid Surfaces** | Fluid surfaces are no longer supported in Unreal Engine 4. This option will soon be removed. |
| **Used with Morph Targets** | Set if this Material will be applied to a Skeletal Mesh that utilizes a Morph Target. |
| **Used with Spline Meshes** | Set if the Material will be applied to Landscape Spline meshes. |
| **Used with Instanced Static Meshes** | Set if the Material is intended to be applied to Instanced Static Meshes. |
| **Used with Distortion** | Distortion is no longer supported (it is now Refraction) and this option will soon be removed. |
| **Used with Clothing** | This should be set if the Material will be applied to Apex physically simulated clothing. |
| **Used with UI** | This indicates that this Material and any Material Instances can be used with Slate UI and UMG. |
| **Automatically Set Usage in Editor** | Whether to automatically set usage flags based on what the Material is applied to in the Editor. The default option for this is enabled.|

## Mobile

![](MobileProperties.png)

| Property | Description |
| -------- | ----------- |
| **Fully Rough** | This forces the Material to be completely rough and by doing so saves a number of shader instructions and one texture sampler. |
| **Use Lightmap Directionality** | This will use lightmap directionality and per pixel normal's. If disabled, lighting from lightmaps will be flat but cheaper.|

## Tessellation

![](TessellationProperties.png)

Tessellation features allow you to add more physical detail to your meshes at runtime. 

| Property | Description |
| -------- | ----------- |
| **Tessellation Mode** | [INCLUDE:#TessellationMode] |
| **Enable Crack Free Displacement** | Enables a displacement algorithm that fixes any cracks that may appear in the mesh. This is more expensive, however, so if you do not see cracks when displacing, leave this set to _False_. |
| **Enable Adaptive Tessellation** | This tessellation method tries to maintain the same number of pixels for each triangle. |

## Post Process Material

![](PostProcessMaterialProperties.png)

| Property | Description |
| -------- | ----------- |
| **Blendable Location** | If this Material is being used as a Post Process Material, this property allows you to control whether the Material is calculated before or after Tonemapping. This is important if your Material will be used to modify the color of the Post Process.  |
| **Blendable Priority** | This is a priority value that is used for any other Materials that can be applied to the Post Process. |


## Lightmass

![](LightmassProperties.png)

| Property | Description |
| -------- | ----------- |
| **Cast Shadow as Masked** | If _true_, lit translucent objects will cast shadows as if they were using Masked lighting mode. This can help get sharper shadows on translucent objects. | 
| **Diffuse Boost** | A multiplier for the amount of influence the diffuse component of the material has on static lighting. |
| **Export Resolution Scale** | A multiplier for the resolution at which this material's attributes are exported. This should be increased when details are needed. |

## Material Interface

![](MaterialInterfaceProperties.png)

| Property | Description |
| -------- | ----------- |
| **Preview Mesh** | Sets a Static Mesh used to preview the Material in the **Preview** pane. |

## Thumbnail

![](ThumbnailProperties.png)
| Property | Description |
| -------- | ----------- |
| **Primitive Type** | Sets the type of shape primitive that is used in the thumbnail preview. |
| **Preview Mesh**   | Sets the mesh that is used in the thumbnail preview. This will only work if Primitive Type is set to **TPT None** |
| **Orbit Pitch**    | Sets the pitch of the orbit camera around the object. |
| **Orbit Yaw**      | Sets the yaw of the orbit camera around the object. |
| **Orbit Zoom**     | The offset from the bounds sphere distance from the asset. |


[COMMENT:none]


[EXCERPT:ShadingModels]
Shading models determine how material inputs (e.g. Emissive, Diffuse, Specular, Normal) are combined to make the final color.  

[REGION:simpletable]
| Model | Description |
| ---- | ----------- |
| **_Unlit_** | The Material is defined by the Emissive and Opacity inputs only. It does not respond to light. |
| **_Default Lit_** | The default shading model. Perfect for most solid objects. |
| **_Subsurface_** | Used for subsurface scattering materials, such as wax and ice. Activates the Subsurface Color input. |
| **_Preintegrated Skin_** | Used for materials similar to human skin. Activates the Subsurface Color input. |
| **_Clear Coat_** | Used for materials that have a translucent coating on top like clear coat car paint or lacquer. Activates the Clear Coat and Clear Coat Roughness inputs. |
| **_Subsurface Profile_** |  Used for materials similar to human skin. Requires the use of a [Subsurface Profile](Engine/Rendering/Materials/LightingModels/SubSurfaceProfile) in order to work correctly. |

[/REGION]

For more information on these Shading Models, please see the [Shading Model documentation](Engine/Rendering/Materials\MaterialProperties\LightingModels). 

[/EXCERPT:ShadingModels]



[EXCERPT:BlendModes]
Blend Modes describe how the output of the current Material will blend over what is already being drawn in the background. Put more technically, it allows you to control how the engine will combine this Material (**Source color**) with what is already in the frame buffer (**Destination color**) when rendered. The available blending modes are:

[REGION:simpletable]
| Mode | Description |
| ---- | ----------- |
| **_BLEND_Opaque_** | Final color = Source color.  This means that the Material will draw on top of the background. This blend mode is compatible with lighting.
| **_BLEND_Masked_** | Final color = Source color if OpacityMask > OpacityMaskClipValue, otherwise the pixel is discarded.  This blend mode is compatible with lighting.
| **_BLEND_Translucent_** | Final color = Source color * Opacity + Dest color * (1 - Opacity).  This blend mode is **NOT** compatible with dynamic lighting.
| **_BLEND_Additive_** | Final color = Source color + Dest color.  This blend mode is **NOT** compatible with dynamic lighting.
| **_BLEND_Modulate_** | Final color = Source color x Dest color.  This blend mode is **NOT** compatible with dynamic lighting, or fog, unless this is a decal material.
[/REGION]

For more information on these Blend Modes, please see the [Blend Modes documentation](Engine/Rendering/Materials\MaterialProperties\BlendModes). 
[/EXCERPT:BlendModes]


[EXCERPT:MaterialDomain]
This setting allows you to designate how this Material is going to be used. Certain Material uses (such as decals) require additional instructions for the rendering engine to consider. Because of this, it is important to designate the Material as being used for those cases. Material Domain includes the following options:

[REGION:simpletable]
| Domain | Description |
| ------ | ----------- |
| **Surface** | This setting defines the Material as something that will be used on an object's surface; think metal, plastic, skin, or any physical surface. As such this is the setting that you will use most of the time.  |
| **Deferred Decal** | When making a [Decal Material](Engine/Actors/DecalActor), you will use this setting. |
| **Light Function** | Used when creating a Material for use with a Light Function. |
| **Post Process** | Used if the Material will be used as a [Post Process Material](Engine/Rendering\PostProcessEffects\PostProcessMaterials). |
[/REGION]
[/EXCERPT:MaterialDomain]


[EXCERPT:DecalBlendModes]
As the name suggests, this defines the Blend Mode that will be used when the Material Domain property is set to _Deferred Decal_ and cannot be changed until the Material Domain is set accordingly. It contains different Blend Modes than those available to surfaces.

[REGION:simpletable]
| Mode | Description |
| ---- | ----------- |
| **Translucent** | This will cause the decal to blend Base Color, Metallic, Specular, Roughness, Emissive color, Opacity, and Normal. With this you can blend in an entirely separate material, such as a wavy water puddle, complete with normal map-based muddy building around it. |
| **Stain** | Only blends Base Color and Opacity. Useful for decals that only change color, such as dry spray paint on a wall. |
| **Normal** | Only blends Normal and Opacity. This is useful for adding cracks to a surface. |
| **Emissive** | Only blends the Emissive and Opacity channels. Nice for making things glow that were not originally. |
[/REGION]
[/EXCERPT:DecalBlendModes]


[EXCERPT:TransLightingMode]
This allows for control over the lighting mode used by Translucency within this Material. This is especially useful for Particle Systems that are making use of Translucency, such as self-shadowing smoke or steam. 

[REGION:simpletable]
| Mode | Description |
| ---- | ----------- |
| **Volumetric NonDirectional** | Lighting will be calculated for a volume, without directionality.  Use this on particle effects like smoke and dust.  This is the cheapest lighting method, however, the material normal is not taken into account. |
| **Volumetric Directional** | Lighting will be calculated for a volume, with directionality so that the normal of the material is taken into account.  Note that the default particle tangent space is facing the camera, so enable **bGenerateSphericalParticleNormals** to get a more useful tangent space. |
| **Volumetric PerVertex NonDirectional** |Same as Volumetric NonDirectional, but lighting is only evaluated at vertices so the pixel shader cost is significantly less. Note that lighting still comes from a volume texture, so it is limited in range. Directional lights become unshadowed in the distance. |
| **Volumetric PerVertex Directional** |Same as Volumetric Directional, but lighting is only evaluated at vertices so the pixel shader cost is significantly less. Note that lighting still comes from a volume texture, so it is limited in range. Directional lights become unshadowed in the distance. |
| **Surface Translucency Volume** |Lighting will be calculated for a surface. The light in accumulated in a volume so the result is blurry, limited distance but the per pixel cost is very low. Use this on translucent surfaces like glass and water. Only Diffuse lighting is supported. |
| **Surface Forward Shading** |Lighting will be calculated for a surface. Use this on translucent surfaces like glass and water. This is implemented with forward shading so Specular highlights from local lights are supported, however, many deferred-only features are not. This is the **most expensive** translucency lighting method as each light's contribution is computed per-pixel. |
[/REGION]
[/EXCERPT:TransLightingMode]


[EXCERPT:TessellationMode]
This controls the type of tessellation that will be employed by your Material, if any.

[REGION:simpletable]
| Mode | Description |
| ---- | ----------- |
| **No Tessellation** | The mesh will not tessellate. Effectively disables the feature. |
| **Flat Tessellation** | A simple form of tessellation. This adds more triangles without smoothing the mesh. |
| **PN Triangles** | Employs simple spline-based tessellation, which is more expensive but better for fine details. |
[/REGION]

[/EXCERPT:TessellationMode]


[/COMMENT]
