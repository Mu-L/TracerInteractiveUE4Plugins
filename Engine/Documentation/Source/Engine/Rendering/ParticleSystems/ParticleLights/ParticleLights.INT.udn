Availability:Public
Title:Particle Lights
Crumbs: %ROOT%, Engine, Engine/Rendering/LightingAndShadows
Description:Particle Lights are another weapon in the VFX artist's arsenal.
Version: 4.9
tags:Particles
parent:Engine/Rendering/ParticleSystems
order:6
type:overview
topic-image:particleLights_topic.png

[TOC(start:2 end:2)]

[EXCERPT:PL001]
_CPU Particle Emitters_ can be made to render with a light attached to each particle by adding a **Particle Light Module** in **Cascade**.  This is useful for effects like sparks or fire, where it emits enough light to be noticeable on the surrounding environment.
[/EXCERPT:PL001]

## General Preparation

The performance cost of particle lights is almost completely dependent on how much overdraw on the screen they cause.  Overdraw comes from the number of lights times the number of pixels affected.  

The general strategy when setting up particle lights is to have a very small number of large particle lights, and a larger number of small particle lights.  It is important to tweak and profile with the _ProfileGPU_ console command as the cost of particle lights can easily get out of hand.  The cost shows up under _Lights_.

[OBJECT:EmbeddedVideo]
[PARAMLITERAL:width]
640
[/PARAMLITERAL]
[PARAMLITERAL:height]
360
[/PARAMLITERAL]
[PARAMLITERAL:videoid]
bJ1xiMPl71Y
[/PARAMLITERAL]
[/OBJECT]

[OBJECT:EmbeddedVideo]
[PARAMLITERAL:width]
640
[/PARAMLITERAL]
[PARAMLITERAL:height]
360
[/PARAMLITERAL]
[PARAMLITERAL:videoid]
nyGqpilZe08
[/PARAMLITERAL]
[/OBJECT]

For reference, here are some still images of the above animations with just the Particle Lights emitters.

![](PL_system_01_still.png)(h:407) ![](PL_system_02_still.png)(h:407)

In this first image, the particle lights are used to accent an already solid particle system, making the sparks and flare feel more physical. Further, very few particle lights exist at any given moment. In the second image, the lights add volume and position to the system, but uses far more particle lights to achieve the effect (over 200).

## Usage

Adding lights to a particle system is very straight forward:

1. Open a particle system in Cascade.
1. **Right Click** anywhere on the emitter on which you want to have the lights.
1. Mouse down in the module list to **Light -> Light**.
	[REGION:lightbox]
	[![](PL_addLightModule.png)(w:830)](PL_addLightModule.png)
	[/REGION]
1. Setup your new light module.
	[REGION:lightbox]
	[![](PL_lightModuleAdded.png)(w:830)](PL_lightModuleAdded.png)
	[/REGION]


[REGION:note]
Remember: the **Light** module can only be used on CPU particles, so none of the GPU particles will work with it. You would not break the system adding the module to a GPU emitter, but it will not do anything and you will have a giant red _X_ over the module in the list.
[/REGION]

### Properties

![](PL_lightModuleProperties.png)

| Property | Description |
| -------- | ----------- |
| **Use Inverse Squared Falloff** | If enabled, **Light Exponent** will be ignored in favor of having a more realistic falloff based on the radius of the light. |
| **Affects Translucency** | When enabled, each particle light will affect lit translucency.  This is useful for the emissive trail of a rocket passing through smoke.  This property adds significant cost to each particle that is rendered with it, so it is recommended to only have a few particles with this setting enabled. |
| **Preview Light Radius** | In the **Preview** window this will show the radius of the lights in wireframe spheres. |
| **Spawn Fraction** | Defines what percentage of particles should have lights attached to them. 1.0 is all particles, 0.5 is half of the particles, and 0.1 is 10% of the particles.  Use this for reducing cost when optimizing.  |
| **Color Scale Over Life** | Like Radius Scale, this multiplies the color of the light by the values entered here to offset the color of the light based on the color of the particle. |
| **Brightness Over Life** | Allows you to change the brightness of the light over its lifetime. |
| **Radius Scale** | This is a multiplier that defines the range of the light based on the size of the particle. A particle that is scaled by 1 on the X axis will have a radius equal to the **Radius Scale** but a particle with a scale of 10 on its X axis will have a radius of 10 times the **Radius Scale**. |
| **Light Exponent** | If **Use Inverse Squared Falloff** is disabled, then this will control the falloff of the light, higher numbers result in a more gradual falloff as light approaches the light radius where as lower numbers will result in a sudden drop off of the light near the light radius. |




