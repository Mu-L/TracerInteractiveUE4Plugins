INTSourceChangelist:3429247
Availability:Public
Title:パーティクル ライト
Crumbs: %ROOT%, Engine, Engine/Rendering/LightingAndShadows
Description:パーティクル ライトは VFX アーティストの必殺技の 1 つです。
Version:4.9
tags:Particles
parent:Engine/Rendering/ParticleSystems
order:6
type:overview
topic-image:particleLights_topic.png

[TOC(start:2 end:2)]

[EXCERPT:PL001]
_CPU パーティクル エミッタ_ は **カスケード** の **Particle Light Module** を追加して、それぞれのパーティクルに適用したライトでレンダリングするために作成します。周囲より目立つだけのライトをエミットする、火花や花火などのエフェクトに便利です。
[/EXCERPT:PL001]

## 使用前の準備

パーティクル ライトのパフォーマンス負荷はほぼ完全と言っていいほど、画面上で発生するオーバードローの量に依存しています。オーバードローは、ライト数 x 影響を受けるピクセル数です。  

パーティクル ライトを設定するコツは、大きいパーティクル ライトを少なくし、小さいパーティクル ライトを多くすることです。パーティクル ライトの負荷は一気に膨れ上がるので、_ProfileGPU_ コンソール コマンドで調整およびプロファイルすることが重要です。負荷は _[Lights]_ で確認できます。

[OBJECT:EmbeddedVideo]
[PARAMLITERAL:width]
640
[/PARAMLITERAL]
[PARAMLITERAL:height]
360
[/PARAMLITERAL]
[PARAMLITERAL:videoid]
bJ1xiMPl71Y
[/PARAMLITERAL]
[/OBJECT]

[OBJECT:EmbeddedVideo]
[PARAMLITERAL:width]
640
[/PARAMLITERAL]
[PARAMLITERAL:height]
360
[/PARAMLITERAL]
[PARAMLITERAL:videoid]
nyGqpilZe08
[/PARAMLITERAL]
[/OBJECT]

上の画像をパーティクル ライト エミッタのみでアニメーションをした静止画像が以下の 2 つです。

![](PL_system_01_still.png)(h:407) ![](PL_system_02_still.png)(h:407)

最初の画像では、パーティクル ライトは既にソリッドなっているパーティクル システムのアクセントとして使用し、火花や花火にさらに物理間を出しています。さらに、パーティクル ライトが存在する瞬間はほとんどありません。2 つ目の画像ではライトがボリュームと位置を追加しています。エフェクト効果を出すために大量のパーティクル (200 以上) を使用します。

## 使用方法

ライトをパーティクル システムに追加する方法は、非常に分かりやすいです。

1. カスケードでパーティクル システムを開きます。
1. エミッタへライトを配置する位置でエミッタを **右クリック** をします。
1. マウスを使用してモジュール リストから **[Lights] -> [Light]** を選択します。
	[REGION:lightbox]
	[![](PL_addLightModule.png)(w:830)](PL_addLightModule.png)
	[/REGION]
1. 新規 Light モジュールを設定します。
	[REGION:lightbox]
	[![](PL_lightModuleAdded.png)(w:830)](PL_lightModuleAdded.png)
	[/REGION]


[REGION:note]
注記： **Light** モジュールは CPU パーティクル上のみで使用できます。このモジュールとは機能する GPU パーティクルはありません。GPU エミッタへモジュールを追加してもシステムを壊すようなことはありませんが、実際には何も起こらずリストのモジュール上に巨大な赤い _X_ マークが表示されます。
[/REGION]

### プロパティ

![](PL_lightModuleProperties.png)

| プロパティ | 説明 |
| -------- | ----------- |
| Use Inverse Squared Falloff | 有効になると、ライトの半径に基づいてより現実味のあるフォールオフとするために **Light Exponent** は無視されます。 |
| **Affects Translucency** | 有効になると、それぞれのパーティクル ライトは lit 透過に影響します。煙を通過するロケットのエミッシブ トレイルに便利です。このプロパティはレンダリング対象のパーティクルにかなりの負荷をかけるので、この設定を有効にするパーティクルは少なくすることを推奨します。 |
| **Preview Light Radius** |  **[Preview]** ウィンドウに球体のワイヤーフレームでライトの半径を表示します。 |
| Spawn Fraction | ライトをアタッチするパーティクルの割合を定義します。値が 1.0 だとパーティクル全体、値が 0.5 だとパーティクルの 50 ％、値が 0.1 だとパーティクルの 10 ％ になります。これを使って最適化処理の負荷を減らします。 |
| **Color Scale Over Life** | Radius Scale 同様に、パーティクルの色に基づいてライトの色をオフセットするために、ここで入力した値でライトの色を乗算します。 |
| **Brightness Over Life** | ライフタイム中、ライトの輝度の変更を有効にします。 |
| **Radius Scale** | パーティクルのサイズに基づいてライトの範囲を定義する乗数です。X 軸上で値 1 でスケーリングされたパーティクルは **Radius Scale** と同等の半径になりますが、 X 軸上で値 10 でスケーリングされたパーティクルは **Radius Scale** の半径の 10 倍になります。 |
| **Light Exponent** | **Use Inverse Squared Falloff** を無効にすると、ライトのフォールオフを制御します。数値が大きくなるとライトがライトの半径に近づくにつれてフォールオフが緩やかになり、数値が小さくなるとライトの半径付近でライトが突然落ちます。 |


