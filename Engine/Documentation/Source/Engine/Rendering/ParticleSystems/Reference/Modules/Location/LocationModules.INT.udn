Availability: Public
Title:Location Modules
Crumbs: %ROOT%, Engine, Engine/Rendering/ParticleSystems, Engine/Rendering/ParticleSystems/Reference
Description:Location modules affect the position of particles at various times throughout their lives.
Version: 4.9
tags:Particles

[TOC(start:2 end:3)]

Location modules affect the position of particles at various times throughout their lives.

## Initial Location

[OBJECT:EmbeddedVideo]
[PARAMLITERAL:width]
640
[/PARAMLITERAL]
[PARAMLITERAL:height]
360
[/PARAMLITERAL]
[PARAMLITERAL:videoid]
LAd89U2b-YY
[/PARAMLITERAL]
[/OBJECT]

The **Initial Location** module is used to set the initial location of a particle at spawn time. It contains the following member(s):

| Property | Description |
| ---- | ---- |
|[REGION:tablesection]Location[/REGION]||
|**Start Location** | A vector distribution indicating the location the particle should be emitted, relative to the emitter. Value is retrieved based on the EmitterTime at the spawn of the particle.|
|**Distribute over NPoints**|When this is set to a non-zero number, it provides a number of evenly-spaced points along a uniform distribution from which to emit. For instance, if the min and max values of a distribution defined a line 100 units long, setting this value to 2 would cause particles to only be emitted from the actual min and max locations, nowhere in between.|
|**Distribute Threshold**|When _Distribute over NPoints_ is set to any non-zero number, this provides a percentage for how many of the particles will emit from those evenly-spaced points. For example, a value of 1 will cause all particles to emit from those points. A value of 0.5 would cause half of the particles to emit from those points, while the other half would still spawn randomly.|

In Spawn, the module retrieves the appropriate values from the distribution using the current emitter time. If the particle emitter does not have the _Use Local Space_ flag, this value is transformed into world-space. The Particle.Location field then has this value added to it.


## Initial Loc (Seed)

The **Initial Loc (Seeded)** module is identical to the [Initial Location](#InitialLocation) module in that it sets the initial location of a particle at spawn time; however, this module allows you to specify seed information to be used when choosing distribution values in order to provide a more consistent effect from the module each time the emitter is used. It contains the following member(s):

| Property | Description |
| ---- | ---- |
|[REGION:tablesection]RandomSeed[/REGION]||
|**Random Seed Info** | The random seed(s) to use for selecting "random" values for this module's properties.[INCLUDE:Engine/Rendering/ParticleSystems/Reference#RandomSeedInfo]|
|[REGION:tablesection]Location[/REGION]||
|**Start Location** | A vector distribution indicating the location the particle should be emitted, relative to the emitter. Value is retrieved based on the EmitterTime at the spawn of the particle.|
|**Distribute over NPoints**|When this is set to a non-zero number, it provides a number of evenly-spaced points along a uniform distribution from which to emit. For instance, if the min and max values of a distribution defined a line 100 units long, setting this value to 2 would cause particles to only be emitted from the actual min and max locations, nowhere in between.|
|**Distribute Threshold**|When _Distribute over NPoints_ is set to any non-zero number, this provides a percentage for how many of the particles will emit from those evenly-spaced points. For example, a value of 1 will cause all particles to emit from those points. A value of 0.5 would cause half of the particles to emit from those points, while the other half would still spawn randomly.|




In Spawn, the module retrieves the appropriate values from the distribution using the current emitter time. If the particle emitter does not have the _Use Local Space_ flag, this value is transformed into world-space. The Particle.Location field then has this value added to it.


## World Offset

The **World Offset** module is used to offset the initial location of a particle. The offset is in world space but respects the _Use Local Space_ flag through the life of the particle. This means the particle will always spawn offset in world space regardless of the orientation of the emitter, but will keep that offset relative to the emitter throughout its life. It contains the following member(s):

| Property | Description |
| ---- | ---- |
|[REGION:tablesection]Location[/REGION]||
|**Start Location** | A vector distribution indicating the world-space offset the particle should use. Value is retrieved based on the EmitterTime at the spawn of the particle.|
|**Distribute over NPoints**|When this is set to a non-zero number, it provides a number of evenly-spaced points along a uniform distribution from which to emit. For instance, if the min and max values of a distribution defined a line 100 units long, setting this value to 2 would cause particles to only be emitted from the actual min and max locations, nowhere in between.|
|**Distribute Threshold**|When _Distribute over NPoints_ is set to any non-zero number, this provides a percentage for how many of the particles will emit from those evenly-spaced points. For example, a value of 1 will cause all particles to emit from those points. A value of 0.5 would cause half of the particles to emit from those points, while the other half would still spawn randomly.|



## Bone/Socket Location

The **Bone/Socket Location** module allows particle to be spawned directly at the locations of bones or sockets of a SkeletalMesh. It provides the following properties:

| Property | Description |
| ---- | ---- |
|[REGION:tablesection]BoneSocket[/REGION]||
|**Source Type** | Specifies whether the source locations are bones or sockets.[INCLUDE:#BoneSourceType]|
|**Universal Offset** | The offset to apply to each bone or socket source.|
|**Source Locations** | An array of source bones or sockets on the Skeletal Mesh from which to spawn particles.[INCLUDE:#BoneSourceLoc]|
|**Selection Method** | The method by which a bone or socket is chosen from the _Source Locations_ array.[INCLUDE:#BoneSelMethod]|
|**Update Position Each Frame** | If _true_, the locations of the particles will be updated to those of the bones or sockets each frame.|
|**Orient Mesh Emitters** | If _true_, mesh particles emitted by mesh emitters will be oriented to the bone or socket source.|
|**Skel Mesh Actor Param Name** | The name of the instance parameter specifying the SkeletalMeshActor that supplies the SkeletalMeshComponent to use in-game.|
|**Editor Skel Mesh** | Specifies a SkeletalMesh to use in the editor for preview purposes.|



[COMMENT:none]
-----------Bone/Socket Location Includes----------------


[EXCERPT:BoneSelMethod]
[REGION:simpletable]
|**Method**|**Description**|
| --- | --- |
|_BONESOCKETSEL_Sequential_|Items in the _Source Locations_ array are chosen in sequential order.|
|_BONESOCKETSEL_Random_|Items in the _Source Locations_ array are chosen at random.|
|_BONESOCKETSEL_RandomExhaustive_|Items in the _Source Locations_ are chosen at random, but never the same item twice until all sources have been used.|
[/REGION]
[/EXCERPT:BoneSelMethod]



[EXCERPT:BoneSourceType]
[REGION:simpletable]
|**Type**|**Description**|
| --- | --- |
|_BONESOCKETSOURCE_Sockets_|_Source Locations_ for spawning particles are socket names.|
|_BONESOCKETSOURCE_Bones_|_Source Locations_ for spawning particles are bones.|
[/REGION]
[/EXCERPT:BoneSourceType]



[EXCERPT:BoneSourceLoc]
[REGION:simpletable]
|**Property**|**Description**|
| --- | --- |
| _Bone Socket Name_ |Specifies the name of the bone or socket on the SkeletalMesh to use as the source for the particles.|
| _Offset_ |The offset from this individual bone or socket to use in addition to the _Universal Offset_.|
[/REGION]
[/EXCERPT:BoneSourceLoc]



-------------End Bone/Socket Location Includes-------------
[/COMMENT]

## Direct Location

The **Direct Location** module is used to directly set the location of a particle. It contains the following member(s):

| Property | Description |
| ---- | ---- |
|[REGION:tablesection]Location[/REGION]||
|**Location** | A vector distribution giving the location of the particle at a given time. The value is retrieved based on the Particle RelativeTime. NOTE that the particle location is set to this value, thereby over-writing any previous module impacts.|
|**Location Offset** | A vector distribution giving the offset to apply from the position retrieved from the Location calculation. The offset is retrieved using the EmitterTime. This is useful for using a Location field set by script code to an Actor or something, and a random LocationOffset to offset it around the object. The offset will remain constant over the life of the particle.|
|**Scale Factor** | A vector distribution which allows for scaling the velocity of the object at a given point in the timeline. This allows for warping the particles to fit the path they are following.|
|**Direction** | Currently unused.|



## Emitter Init Loc

The **Emitter InitLoc** module is used to set the initial location of a particle to the position of a particle from another emitter (in the same particle system). It contains the following member(s):

| Property | Description |
| ---- | ---- |
|[REGION:tablesection]Location[/REGION]||
|**Emitter Name** | The name of the emitter to use as a source for the location particles.|
|**Selection Method** | An enumeration indicating how to select the particles from the source emitter. If can be one of the following values:[INCLUDE:#InitLocSelMethod]|
|**Inherit Source Velocity** | A Boolean that indicates the spawned particle should inherit the velocity of the source particle.|
|**Inherit Source Velocity Scale** | Amount to scale the source velocity by when inheriting it.|
|**Inherit Source Rotation** | A Boolean that indicates the spawned particle should inherit the rotation of the source particle.|
|**Inherit Source Rotation Scale** | Amount to scale the source rotation by when inheriting it.|



[COMMENT:none]
-----------Emitter Init Loc Includes----------------
#### Includes

[EXCERPT:InitLocSelMethod]
[REGION:simpletable]
|**Method**|**Description**|
| --- | --- |
|_ELESM_Random_|Randomly select a particle from the source emitter.|
|_ELESM_Sequential_|Step through each of the particles from the source emitter in order.|
[/REGION]
[/EXCERPT:InitLocSelMethod]

-------------End Emitter Init Loc Includes-------------
[/COMMENT]


## Emitter Direct Loc

The **Emitter DirectLoc** module is used to set the location of a particle to the position of a particle from another emitter (in the same particle system) for the particle's entire life. It contains the following member(s):

| Property | Description |
| ---- | ---- |
|[REGION:tablesection]Location[/REGION]||
|**EmitterName** | The name of the emitter to use as a source for the location particles.|


The particle used will be the one at the same index as the particle having its location set.


## Cylinder

[OBJECT:EmbeddedVideo]
[PARAMLITERAL:width]
640
[/PARAMLITERAL]
[PARAMLITERAL:height]
360
[/PARAMLITERAL]
[PARAMLITERAL:videoid]
sefKMZtdGR0
[/PARAMLITERAL]
[/OBJECT]

The **Cylinder** module is used to set the initial location of particles within a cylinder shape. It contains the following member(s):

| Property | Description |
| ---- | ---- |
|[REGION:tablesection]Location[/REGION]||
|**Radial Velocity** | A Boolean indicating that the particle velocity should only be applied in the `circular' plane of the cylinder.|
|**Start Radius** | A float distribution giving the radius of the cylinder.|
|**Start Height** | A float distribution giving the height of the cylinder - centered about the location.|
|**Height Axis** | An enumeration indicating which particle system axis should represent the height axis of the cylinder. Can be one of the following:[INCLUDE:#CylinderHeightAxis]|
|**Positive_X, Positive_Y, Positive_Z, Negative_X, Negative_Y, Negative_Z** | Boolean values indicating the valid axes for particle spawning.|
|**Surface Only** | A Boolean value indicating that the particles should only be spawned on the surface of the primitive.|
|**Velocity** | A Boolean value indicating that the particle should get its velocity from the position within the primitive.|
|**Velocity Scale** | A float distribution indicating the scale that should be applied to the velocity. Only used if the Velocity value is checked (_true_).|
|**Start Location** | A vector distribution indicating the location of the bounding primitive, relative to the position of the emitter.|



[COMMENT:none]
-----------Cylinder Includes----------------
#### Includes

[EXCERPT:CylinderHeightAxis]
[REGION:simpletable]
|**Axis**|**Description**|
| --- | --- |
|_PMLPC_HEIGHTAXIS_X_|Orient the cylinder with height along the particle system X-axis.|
|_PMLPC_HEIGHTAXIS_Y_|Orient the cylinder with height along the particle system Y-axis.|
|_PMLPC_HEIGHTAXIS_Z_|Orient the cylinder with height along the particle system Z-axis.|
[/REGION]
[/EXCERPT:CylinderHeightAxis]

-------------End Cylinder Includes-------------
[/COMMENT]

## Cylinder (Seeded)

The **Cylinder (Seeded)** module is identical to the [Cylinder](#Cylinder) module in that it sets the initial location of particles within a cylinder shape; however, this module allows you to specify seed information to be used when choosing distribution values in order to provide a more consistent effect from the module each time the emitter is used. It contains the following member(s):

| Property | Description |
| ---- | ---- |
|[REGION:tablesection]RandomSeed[/REGION]||
|**Random Seed Info** | The random seed(s) to use for selecting "random" values for this module's properties.[INCLUDE:Engine/Rendering/ParticleSystems/Reference#RandomSeedInfo]|
|[REGION:tablesection]Location[/REGION]||
|**Radial Velocity** | A Boolean indicating that the particle velocity should only be applied in the `circular' plane of the cylinder.|
|**Start Radius** | A float distribution giving the radius of the cylinder.|
|**Start Height** | A float distribution giving the height of the cylinder - centered about the location.|
|**Height Axis** | An enumeration indicating which particle system axis should represent the height axis of the cylinder. Can be one of the following:[INCLUDE:#CylinderHeightAxis]|
|**Positive_X, Positive_Y, Positive_Z, Negative_X, Negative_Y, Negative_Z** | Boolean values indicating the valid axes for particle spawning.|
|**Surface Only** | A Boolean value indicating that the particles should only be spawned on the surface of the primitive.|
|**Velocity** | A Boolean value indicating that the particle should get its velocity from the position within the primitive.|
|**Velocity Scale** | A float distribution indicating the scale that should be applied to the velocity. Only used if the Velocity value is checked (_true_).|
|**Start Location** | A vector distribution indicating the location of the bounding primitive, relative to the position of the emitter.|





## Sphere

[OBJECT:EmbeddedVideo]
[PARAMLITERAL:width]
640
[/PARAMLITERAL]
[PARAMLITERAL:height]
360
[/PARAMLITERAL]
[PARAMLITERAL:videoid]
ZM6GkFxO-b0
[/PARAMLITERAL]
[/OBJECT]

The **Sphere** module is used to set the initial location of particles within a sphere shape. The class contains the following member(s):

| Property | Description |
| ---- | ---- |
|[REGION:tablesection]Location[/REGION]||
|**Start Radius** | A float distribution giving the radius of the sphere.|
|**Positive_X, Positive_Y, Positive_Z, Negative_X, Negative_Y, Negative_Z** | Boolean values indicating the valid axes for particle spawning.|
|**Surface Only** | A Boolean value indicating that the particles should only be spawned on the surface of the primitive.|
|**Velocity** | A Boolean value indicating that the particle should get its velocity from the position within the primitive.|
|**Velocity Scale** | A float distribution indicating the scale that should be applied to the velocity. Only used if the Velocity value is checked (_true_).|
|**Start Location** | A vector distribution indicating the location of the bounding primitive, relative to the position of the emitter.|







## Sphere (Seeded)

The **Sphere (Seeded)** module is identical to the [Sphere](#Sphere) module in that it sets the initial location of particles within a sphere shape; however, this module allows you to specify seed information to be used when choosing distribution values in order to provide a more consistent effect from the module each time the emitter is used. It contains the following member(s):

| Property | Description |
| ---- | ---- |
||[REGION:tablesection]RandomSeed[/REGION]||
|**Random Seed Info** | The random seed(s) to use for selecting "random" values for this module's properties.[INCLUDE:Engine/Rendering/ParticleSystems/Reference#RandomSeedInfo]|
|[REGION:tablesection]Location[/REGION]||
|**Start Radius** | A float distribution giving the radius of the sphere.|
|**Positive_X, Positive_Y, Positive_Z, Negative_X, Negative_Y, Negative_Z** | Boolean values indicating the valid axes for particle spawning.|
|**Surface Only** | A Boolean value indicating that the particles should only be spawned on the surface of the primitive.|
|**Velocity** | A Boolean value indicating that the particle should get its velocity from the position within the primitive.|
|**Velocity Scale** | A float distribution indicating the scale that should be applied to the velocity. Only used if the Velocity value is checked (_true_).|
|**Start Location** | A vector distribution indicating the location of the bounding primitive, relative to the position of the emitter.|




## Triangle

![](Triangle.png)

The **Triangle** module allows the user to specify the shape and location of a triangle, with particles being emitted from that triangle's 2D or 3D area, depending on whether there is a thickness applied.

| Property | Description |
| ---- | ---- |
|[REGION:tablesection]Location[/REGION]||
|**Start Offset**|A vector distribution that defines an offset to the location of the triangle.|
|**Height**|A float distribution that defines the length of the legs of the triangle.|
|**Angle**|A float distribution that provides the angle between the primary leg and the hypotenuse. |
|**Thickness**|A float distribution that provides the thickness of the triangle, turning it into a 3D wedge. Particles will be emitted from within the 3-dimensional area.|


## Skeletal Mesh Vertex/Surface Location (Skel Vert/Surf Loc)

The **Skel Vert/Surf Loc** module allows for particles to be emitted from a skeletal mesh's vertices or polygonal surfaces. It provides the following properties:

| Property | Description |
| ---- | ---- |
|[REGION:tablesection]Vert Surface[/REGION]||
|**Source Type** | Specifies whether the source locations are vertices or surfaces.[INCLUDE:#VertSourceType]|
|**Universal Offset** | The offset to apply to each bone or socket source.|
|**Update Position Each Frame** | If _true_, the locations of the particles will be updated to those of the vertices or surfaces each frame.|
|**Orient Mesh Emitters** | If _true_, mesh particles emitted by mesh emitters will be oriented to the vertex or surface source.|
|**Inherit Bone Velocity** | If _true_, particles inherit the associated bone velocities when spawned.|
|**Skel Mesh Actor Param Name** | The name of the instance parameter specifying the SkeletalMeshActor that supplies the SkeletalMeshComponent to use in-game.|
|**Editor Skel Mesh** | Specifies a SkeletalMesh to use in the editor for preview purposes.|
|**Valid Associated Bones** | An array of source bones on the Skeletal Mesh with which the vertices/surfaces must be associated (via skin weighting) to spawn particles.[INCLUDE:#VertSourceLoc]|
|**Enforce Normal Check** | When _true_, the _Normal to Compare_ and _Normal Check Tolerance Degree_ fields will be used to verify whether the surface has the appropriate normals for particle emission. This is useful in situations where, for example, you want to emit smoke or fire from the upward facing surfaces of a mesh, but not the downward facing ones. |
|**Normal to Compare** | When _Enforce Normal Check_ is _true_, this will provide a normal direction to test against. |
|**Normal Check Tolerance Degree** |When _Enforce Normal Check_ is _true_, this gives a tolerance value against the _Normal to Compare_ value. A value of 0 means that the normals must match exactly, while a value of 180 would result in any normal direction being valid. |
|**Valid Material Indices** | Provides a list of materials applied to the skeletal mesh from which particles will be allowed to emit. Useful if only certain materials should be emitting particles. Leave empty to allow any material to emit. |


[COMMENT:none]
-----------Vert/Surf Location Includes----------------
#### Includes


[EXCERPT:VertSourceLoc]
[REGION:simpletable]
|**Property**|**Description**|
| --- | --- |
|_(Numbered Entry)_|Specifies the name of the bone on the SkeletalMesh to which a vertex or surface must be weighted in order to serve as the source for the particles.|
[/REGION]
[/EXCERPT:VertSourceLoc]


[EXCERPT:VertSourceType]
[REGION:simpletable]
|**Type**|**Description**|
| --- | --- |
|_VERTSURFACESOURCE_Vert_|_Source Locations_ for spawning particles are mesh vertices.|
|_VERTSURFACESOURCE_Surface_|_Source Locations_ for spawning particles mesh surfaces.|
[/REGION]
[/EXCERPT:VertSourceType]

-------------End Vert/Surf Location Includes-------------
[/COMMENT]



## Source Movement

The **Source Movement** module is used to offset the location of particles based on the movement of the source (i.e. the emitter). It contains the following properties:

| Property | Description |
| ---- | ---- |
|[REGION:tablesection]SourceMovement[/REGION]||
|**Source Movement** | A vector distribution specifying the scaling factor to apply to the source movement before adding to the particle location. The value is retrieved using particle-relative time.|


