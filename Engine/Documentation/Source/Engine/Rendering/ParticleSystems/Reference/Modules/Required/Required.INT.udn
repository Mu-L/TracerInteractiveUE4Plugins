Availability: Public
Title:Default Required and Spawn Modules
Crumbs: %ROOT%, Engine, Engine/Rendering/ParticleSystems, Engine/Rendering/ParticleSystems/Reference
Description:Modules that are included along with an emitter and required for its function.
Version: 4.9
tags:Particles


[TOC(start:2 end:3)]

The following classes and modules always exist when a new emitter is created. They will always be present and cannot be deleted.


## Required Module

Every particle emitter contains this module which contains all the properties that are required by a particle emitter. This includes the following:

| Property | Description |
| -------- | ----------- |
| [REGION:tablesection]Emitter[/REGION] ||
| **Material** | The material to apply to the particles. |
| **Emitter Origin**| The point in 3D space where particles will be emitted from this emitter, unless otherwise specified by other modules. |
| **Emitter Rotation** | A local rotation applied to the emitter itself.|
| **Screen Alignment** | How the particle is oriented in relation to the camera. The following modes are allowed: [INCLUDE:#ScreenAlign] |
| **Use Local Space** | Indicates whether the particle emitter should apply the world transform of its parent (_false_) or not (_true_). When _true_, a particle emitter will perform all operations in local space. |
| **Kill On Deactivate** | Indicates whether the particle emitter should kill all particles on deactivation. If _false_, any living particles will complete their lifetime when the emitter is deactivated. |
| **Kill On Completed** | Indicates whether the particle system component should kill this emitter instance when it completes. |
| **Sort mode** | The sorting mode use for the emitter. [INCLUDE:#SortMode] |
| **Use Legacy Emitter Time** | If _true_, the EmitterTime for the emitter will be calculated by modulating the SecondsSinceCreation by the EmitterDuration. As this can lead to issues with looping and variable duration, a new approach has been implemented. If _false_, this new approach is utilized, and the EmitterTime is simply incremented by DeltaTime each tick. When the emitter loops, it adjusts the EmitterTime by the current EmitterDuration resulting in proper looping/delay behavior. |
| **Orbit Module Affects Velocity Alignment** | If _true_, movement generated by orbit modules is applied to velocity-aligned particles. |
| [REGION:tablesection]Duration[/REGION] ||
| **Emitter Duration** | Indicates how long, in seconds, the emitter will run before looping. If set to 0, the emitter will never loop. |
| **Emitter Duration Low** | Gives the low-end of emitter duration to allow for variations in the duration of an emitter. |
| **Emitter Duration Use Range** | When _true_, the emitter will select a duration from the range of _EmitterDurationLow_ to _EmitterDuration_ when starting up. |
| **Duration Recalc Each Loop** | When _true_, the emitter will select a new duration from the range of _EmitterDurationLow_ to _EmitterDuration_ when looping. |
| **Emitter Loops** | The number of times to loop before going inactive. If set to 0, the emitter will run constantly, looping 'forever'. |
| [REGION:tablesection]Delay[/REGION] ||
| **Emitter Delay** | The amount of time to delay starting the emitter. This allows for 'staggering' emitters within a single particle system. This also serves as the upper bound for choosing a random delay value when using a range. |
| **Emitter Delay Low** | The lower bound for choosing a random delay value when using a range. |
| **Emitter Delay Use Range** | If _true_, the effective delay value for the emitter will be a random value chosen from the range [Emitter Delay Low, Emitter Delay]. |
| **Delay First Loop Only** | When _true_, and emitter with an EmitterDelay of greater than 0 and EmitterLoops greater than 1 will only perform the delay on the first loop. |
| [REGION:tablesection]Sub UV[/REGION] ||
| [REGION:note]The Sub UV data indicates that the emitter should utilize sub-images of the texture applied. This is useful for implementing simple animations on particles.[/REGION] ||
| **Interpolation Method** | An enumeration indicating the method that should be utilized to interpolate between sub-images. This can be one of the following: [INCLUDE:#InterpMethod] |
| **Sub Images_Horizontal** | The number of sub-images in the texture on the horizontal (x) axis of the texture. |
| **Sub Images_Vertical** | The number of sub-images in the texture on the vertical (y) axis of the texture. |
| **Scale UV** | Indicates that the UV values should be scaled to properly `fit' the sub-image size. This is only used for mesh emitters. |
| **Random Image Changes** | The number of times to changes the image over the lifetime of the particle when InterpolationMethod is set to Random. |
| [REGION:tablesection]Macro UV[/REGION]||
| [REGION:note]The Macro UV section indicates that the emitter should utilize macro UVs, which allow for a single image to be mapped contiguously across multiple particles, rather than individually for each particle. Be aware that to make use of this feature, the material applied to the particles must utilize the _ParticleMacroUV_ material expression node.[/REGION] ||
| **Override System Macro UV** | If _true_, the settings here will override the system Macro UV settings, which can be seen by deselecting all emitters and modules in Cascade's Emitter List. |
| **Macro UVPosition** | The local space position from which all Macro UV calculations will originate. |
| **Macro UVRadius** | World radius beyond which any Macro UV materials will begin tiling. |
| [REGION:tablesection]Rendering[/REGION] ||
| **Use Max Draw Count** | When _true_, the emitter will never draw more than MaxDrawCount particles. All particles will still be updated when ticking. |
| **Max Draw Count** | The number of particles to limit rendering to. |
| **UV Flipping Mode** | Enabled the flipping of Sprite and GPU particles UV's in a number of different ways. [INCLUDE:#UVFlipping] |
| [REGION:tablesection]Normals[/REGION] ||
| **Emitter Normals Mode** | The mode used to generate normals for this emitter LOD. [INCLUDE:#NormalsMode] |
| **Normals Sphere Center** | When _Emitter Normals Mode_ is _ENM_Spherical_, particle normals are created to face away from _Normals Sphere Center_. The value is in local space. |
| **Normals Cylinder Direction** | When _Emitter Normals Mode_ is _ENM_Cylindrical_, particle normals are created to face away from the cylinder going through _Normals Sphere Center_ in the direction _Normals Cylinder Direction_. This value is in local space. |



## Spawn Module

Every particle emitter contains this module which contains all the properties that determine how particles are spawned. This includes the following:

| Property | Description |
| -------- | ----------- |
| [REGION:tablesection]Spawn[/REGION] ||
| **Rate** | This float distribution provides the spawn rate (particle per second) of particles for the emitter at a given time. |
| **Rate Scale** | A scaling factor to apply to the _Rate_ for the emitter. |
| **Process Spawn Rate** | If _true_, the _Rate_ will be processed. If multiple Spawn Modules are 'stacked' in an emitter and ANY one of them has this property disabled, none of the _Rates_ will be processed for the emitter. |
| [REGION:tablesection]Burst[/REGION] ||
| The Burst data indicates that the emitter should force the emission of a given number of particles at a set time. It involves the following members: | |
| **ParticleBurstMethod** | The method to use when emitting particles in bursts. Currently ignored. |
| **BurstList** | An array of integer Count and CountLow and float Time values identifying desired bursts of particles. Time is in the range of [0..1] over the emitter lifetime. If CountLow is set to -1, the emitter will burst Count particles at the given time. Otherwise, the emitter will burst a random number of particles in the range [CountLow..Count] at the given time. |
| **Process Burst list** | If _true_, the _Burst List_ will be processed. If multiple Spawn Modules are 'stacked' in an emitter and ANY one of them has this property disabled, none of the _Burst Lists_ will be processed for the emitter. |
| **Burst Scale** | Scales all burst entries by this amount. |




[COMMENT:none]
 Begin RequiredModule Table Includes 
[/COMMENT]
[COMMENT:none]

[EXCERPT:ScreenAlign]
[REGION:simpletable]
| Flag | Description |
| --- | --- |
| FacingCameraPosition | Particles will rotate to face the camera position, but will ignore camera rotation. |
| Square | Uniform scale (forced to the X setting), facing the camera. |
| Rectangle | Non-uniform scale, facing the camera. |
| Velocity | Orient the particle towards both the camera and the direction the particle is moving. Non-uniform scaling is allowed. |
| TypeSpecific | Use the alignment method indicated in the type data module. (Mesh only) |
[/REGION]
[/EXCERPT:ScreenAlign]

[EXCERPT:SortMode]
[REGION:simpletable]
| Mode | Description |
| --- | --- |
| _PSORTMODE_None_ |No sorting is performed. |
| _PSORTMODE_ViewProjDepth_ | Sort particles by depth based on the view projection. |
| _PSORTMODE_DistanceToView_ | Sort particles by distance of the particle to the camera in world space. |
| _PSORTMODE_Age_OldestFirst_ | Sort the particles by age, with oldest particle drawn first. |
| _PSORTMODE_Age_NewestFirst_  |Sort the particles by age, with newest particle drawn first. |
[/REGION]
[/EXCERPT:SortMode]

[EXCERPT:UVFlipping]
[REGION:simpletable]
| Mode | Description |
| --- | --- |
|None|No UV flipping occurs. This is the default.|
|FlipUV|Flips the U and V texture coordinates.|
|U Only|Flips only the U texture coordinate.|
|V Only|Flips the V texture coordinate.|
|Random Flip UV|Randomly flips U and V together at spawn time.|
|Random Flip U Only|Randomly flips just U at spawn time.|
|Random Flip V Only|Randomly flips just V at spawn time.|
|Random Flip UV Independent|Randomly flips U and V independently at spawn time.|
[/REGION]
[/EXCERPT:UVFlipping]


[EXCERPT:InterpMethod]
[REGION:simpletable]
| Method | Description |
| --- | --- |
| None | Do not apply SubUV modules to this emitter. |
| Linear | Smoothly transition between sub-images in the given order, with no blending between the current and the next. |
| Linear_Blend | Smoothly transition between sub-images in the given order, blending between the current and the next. |
| Random | Pick the next image at random, with no blending between the current and the next. |
| Random_Blend | Pick the next image at random, blending between the current and the next. |
[/REGION]
[/EXCERPT:InterpMethod]



[EXCERPT:NormalsMode]
[REGION:simpletable]
| Mode | Description |
| --- | --- |
| _ENM_CameraFacing_ | Default mode, normals are based on the camera facing geometry. |
| _ENM_Spherical_ | Normals are generated from a sphere centered at NormalsSphereCenter. |
| _ENM_Cylindrical_ | Normals are generated from a cylinder going through NormalsSphereCenter, in the direction NormalsCylinderDirection. |
[/REGION]
[/EXCERPT:NormalsMode]

[/COMMENT]
[COMMENT:none]
 End RequiredModule Includes 
[/COMMENT]
