INTSourceChangelist:3782314
Availability:Public
Title:Ribbon Type Data
Crumbs: %ROOT%, Engine, Engine/Rendering/ParticleSystems, Engine/Rendering/ParticleSystems/Reference
Description:Ribbon Type Data モジュールは、パーティクルをリボン形状に結合した、エミッタからのトレイルの出力を意味します。
Version:4.9
tags:Particles
tags:TypeData
order:4
topic-image:RibbonSmoke.png



![RibbonSmoke.png](RibbonSmoke.png)(w:460)

[EXCERPT:Intro]
**Ribbon** Type Data モジュールは、パーティクルをリボン形状に結合した、エミッタからのトレイルの出力を意味します。パーティクルは生成された順番で結合されます。従って、最初のパーティクルのベロシティのパターンが不規則になればなるほど、リボンの形状はカオス的になります。
[/EXCERPT:Intro]

**Ribbon** Type Data モジュールには以下のプロパティがあります。

|プロパティ|説明|
|---|---|
|[REGION:tablesection]Trail[/REGION]||
|**Sheets Per Trail**| トレイルをレンダリングするために、トレイルの長さを囲むように回転するシート数です。|
|**Max Trail Count**| 存続するトレイルの許容数です。|
|**Max Particle In Trail Count**| 常にトレイルに含まれているパーティクルの最大数です。|
|**Dead Trails On Deactivate**| _true_ の場合、パーティクル システムが無効になると、効力のないトレイルとして認識されます。つまりトレイルはまだレンダリングされますが、パーティクル システム が再度有効になっても新規のパーティクルはスポーンされません。|
|**Dead Trails On Source Loss**| _true_ の場合、トレイルの発生源が「消滅」すると、効力のないトレイルとして認識されます。例えばパーティクルの発生源の消滅など。|
|**Clip Source Segment**| _true_ の場合、トレイルは発生源の位置に結合しません。|
|**Enable Previous Tangent Recalculation**| _true_ の場合、新規のパーティクルがスポーンされる度に前回のタンジェントが再計算されます。|
|**Tangent Recalculation Every Frame**| _true_ の場合、ベロシティと速度を適用させるために全てのタンジェントがフレーム毎に再計算されます。|
|**Spawn Initial Particle** | _true_ の場合、リボンの動作が開始するとリボンはパーティクルをスポーンします。|
|**Render Axis**| トレイルが「レンダリング」する軸です (トレイルが広がる軸)。以下が利用可能なオプションです：[INCLUDE:#RenderAxisOption]|
|[REGION:tablesection]Spawn[/REGION]||
|**Tangent Spawning Scalar**| スポーンに使用するタンジェント スカラー値です。タンジェント A と B 間の角度は [0.0f .. 1.0f] にマッピングされます。そしてスポーンに使用するパーティクル数を求めるため、_Tangent Spawning Scalar_ 値で乗算されます。|
| [REGION:tablesection]レンダリング[/REGION] ||
|**Render Geometry**| _true_ の場合、トレイル ジオメトリがレンダリングされます。無効の場合トレイルが目に見えないため、通常は有効にします。|
|**Render Spawn Points**| _true_ の場合、トレイルに沿って、スポーンされた各パーティクルの位置で星がレンダリングされます。カスケードでのデバッグ作業に使用します。|
|**Render Tangents**| _true_ の場合、トレイルに沿ったそれぞれのスポーン パーティクルの位置にあるタンジェントが線を利用してレンダリングされます。カスケードでのデバッグ作業に使用します。|
|**Render Tessellation**| _true_ の場合、それぞれのスポーンパーティクル間にある細分化されたパスがレンダリングされます。カスケードでのデバッグ作業に使用します。|
|**Tiling Distance** | 2番目の UV が設定されているタイルへの隠された距離 (推測) です。値が 0.0 の場合、2 番目の UV 設定は通過しません。
|**Distance Tessellation Step Size**| トレイルが細分化処理された地点間の距離です。これはトレイルに存在する細分化処理の地点数を確認することにより、結果としてトレイルの滑らかさを確認します。正確な計算は:[INCLUDE:#TessellationPoints]|
|**Enable Tangent Diff Interp Scale**|[INCLUDE:#EnableTangentDiffInterpScale]|
|**Tangent Tessellation Scalar**| 細分化処理に使用するタンジェントスカラー値です。タンジェント A と B 間の角度は 0 と 1 にマップされます。そして細分化処理のための点の数を求めるため、TangentTessellationScalar 値で乗算されます。|




[COMMENT:none]
------------BEGIN INCLUDES------------

[EXCERPT:TessellationPoints]
      TessellationPoints = TruncToInt((スポーンパーティクル間の距離) / (DistanceTessellationStepSize))
[/EXCERPT:TessellationPoints]
    
[EXCERPT:RenderAxisOption]
[REGION:simpletable]
|オプション|説明|
| --- | --- |
|_Trails_CameraUp_|従来のカメラに対面するトレイルです。|
|_Trails_SourceUp_|各スポーンパーティクルに発生源の Up 軸を使用します。|
|_Trails_WorldUp_|ワールドの Up 軸を使用します。|
[/REGION]
[/EXCERPT:RenderAxisOption]
	  

[EXCERPT:EnableTangentDiffInterpScale]
このフラグが有効な場合、システムは隣接パーティクルのタンジェントの違いに基づいて補間された頂点の数をスケーリングします。隣接パーティクルの各ペアは、以下の CheckTangent 値を計算します:[INCLUDE:#CheckTangent]

平行から直交（0 から 90 度）は、0 から 1 へスケーリングするようにマップされます。90 度を超えると 1 のスケール値でクランプされます。
[/EXCERPT:EnableTangentDiffInterpScale]

[EXCERPT:CheckTangent]
	CheckTangent が < 0.5の場合、 DistanceTessellationStepSize は結果に基づいてスケーリングされます。 
[/EXCERPT:CheckTangent]

------------END INCLUDES------------
[/COMMENT]
