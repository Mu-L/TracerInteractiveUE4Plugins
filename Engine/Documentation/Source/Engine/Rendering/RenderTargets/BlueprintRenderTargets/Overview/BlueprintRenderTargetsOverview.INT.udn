availability:Public
title:Blueprints and Render Targets Overview
description:Taking a high level look at how to use Blueprints and Render Targets togther in UE4.
crumbs:%ROOT%, Engine, Engine/Rendering, Engine/Rendering/RenderTargets, Engine/Rendering/RenderTargets/BlueprintRenderTargets
version:4.13
Type:overview
SkillLevel:Intermediate
parent:Engine/Rendering/RenderTargets/BlueprintRenderTargets
order:1
Navigation:topic
tags: Render Targets
tags: Blueprints
topic-image:Engine/Rendering/RenderTargets/Render_Targets_Overview.png

![](BP_RT_Overview.png)

## Overview
Using Blueprints and render targets together opens up a whole new way to create and use assets inside of Unreal Engine 4 (UE4).  From creating fluid like surfaces, to creating Textures that can be used with visual effects and Materials there are many different ways Blueprints and render targets can be used. In the following document, we will go over some of the things that you need to be aware of when using Blueprints and render targets.

## Possible Uses 
You can use Blueprints and render targets to create a wide variety of different rendering effects. The following list has a few suggestions of the types of items that can be created when using Blueprints and render targets. Keep in mind that the following are only suggestions on what you can achieve with Blueprints and render targets. 

* Create a Heightmap painter.
* Create a Fluid surface simulation.
* Create a runtime paint program.
* Deform a surface when a certain object passes over.


## Known Limitations
When using Blueprints and render targets, there are some limitations and restrictions that you need to be aware of in order 
to get the most out of this tool. In the following section, we will cover what these limitations are and what can be done to 
accommodate them in your workflow.

* You cannot draw to a render target that is being sampled as a Texture by the Material you specify.  Either use alpha blending to modify a render target in-place, or go back and forth between two different render targets.

* Only the **Emissive Color** and **Opacity** outputs of the Material are valid when drawing to a render target. 

* Lighting is not supported when using render targets and Material Expression nodes like **World Position** may return unexpected values.

* Emissive Color is clamped to be positive by default, but you can output negative values by enabling the material property **AllowNegativeEmissiveColor**.

	![](Allow_Neg_Emissive_Color.png)




































