INTSourceChangelist:3782314
Availability: Docs
Title: 可视性剔除的最佳实践
Crumbs: %ROOT%, Engine, 
Description: 可视性剔除的策略和最佳实践
Version: 4.13

[TOC(start:2 end:2)]



以下是设计和处理游戏可视性剔除时应当遵循的一些良好做法。 

##大视图距离

由于待渲染的Actor数量较多，大视图距离会对性能产生影响。通过使用大型遮挡物遮挡这些大视图距离，您可以遮挡原本会被渲染的Actor。
这可以通过减少待检查的Actor来减少需要发送至GPU的查询数量。反过来，通过减少待检查和待渲染的Actor，可以获得更好性能。

* 尽可能使用大型遮挡物。 
* 使用剔除距离体积以移除远距离处不易发现的任何较小Actor，即使这些Actor被遮挡在视线之外时也是如此。
* 限制从半透明Actor处获得的过度绘制量，因为这些Actor不会遮挡。

##GPU查询中的“弹出”/延迟

这是为视锥体和硬件遮挡查询而使用可视性剔除时的常见问题，因为这些查询会在一帧后从GPU读回。当您非常快速地转动玩家摄像机时， 
或者当您走到后方有强烈光照区域的灯光昏暗区域中的拐角处时，这个现象通常很明显。 

* 使用其他几何体以便隐藏此瑕疵。对于洞穴或具有明亮外部的黑暗区域之类的物体，使用恰好可以放在这些碎片外部的大型遮挡物网格体，从而隐藏弹出并阻挡使其变得显眼的光线。
* 扩大造成攻击行为的Actor的边界范围。 
* 以无需组装太多小碎片的方式构建几何体。这对于墙体、地板和天花板尤其适用。

##资源构造

为游戏创建几何体时，为了实现设计目的和可重复利用，最好将几何体分解成模块化碎片。然而，如果使用太小而无法构成较大几何体的碎片， 
则可能会导致设计过程中过度模块化。因此，需要为每个Actor检查其可视性状态。最好是找到一个适合游戏设计的平衡点，
并对其进行优化，以获得最佳性能。减少检查可视性所需的查询数量是优化的关键，并有助于减少可能发生的“弹出”。 

* 在制作结构表面的关卡时，应使用较大几何体，而不是将其分解成许多较小碎片。与测试单个Actor相比，测试多个较小Actor会对GPU产生更大的影响。
* 考虑网格体的构造会减少Actor的“弹出”。


##考虑遮挡与距离剔除成本

遮挡法和可视性剔除法的成本远远超过距离剔除法，因为这两种方法需要GPU查询，因此为远距离物体设置剔除距离体积不失为一种好方法，即使它们会被场景中某一部分的其他Actor所遮挡。

* 充分利用剔除距离体积以减少遮挡剔除成本。
* 尽可能地流送出关卡，而非依赖距离或遮挡剔除。
* 使用‘Stat Initviews’命令来确保性能在检查时维持平衡。

有关[关卡流送](Engine/LevelStreaming)的信息，请参阅此页面中的设置方法。

