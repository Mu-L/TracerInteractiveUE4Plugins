INTSourceChangelist:0
Availability: Docs
Title: Visibility Culling Best Practices
Crumbs: %ROOT%, Engine, 
Description: Visibility Culling Strategies and Best Practices
Version: 4.13

[VAR:Topic]
[OBJECT:Topic]
	[PARAM:image]
		![%Engine/Rendering/VisibilityCulling:title%]()
	[/PARAM]
	[PARAM:icon]
		![](%ROOT%/light_icon.png)(convert:false)
	[/PARAM]
	[PARAM:title]
		%Engine/Rendering/VisibilityCulling:title%
	[/PARAM]
	[PARAM:description]
		%Engine/Rendering/VisibilityCulling:description%
	[/PARAM]
	[PARAM:path]
		[RELATIVE:Engine/Rendering/VisibilityCulling]
	[/PARAM]
[/OBJECT]
[/VAR]
[VAR:TopicCompact]
[OBJECT:TopicCompact]
	[PARAM:image]
		![%Engine/Rendering/VisibilityCulling:title%]()
	[/PARAM]
	[PARAM:icon]
		![](%ROOT%/light_icon.png)(convert:false)
	[/PARAM]
	[PARAM:title]
		%Engine/Rendering/VisibilityCulling:title%
	[/PARAM]
	[PARAM:description]
		%Engine/Rendering/VisibilityCulling:description%
	[/PARAM]
	[PARAM:path]
		[RELATIVE:Engine/Rendering/VisibilityCulling]
	[/PARAM]
[/OBJECT]
[/VAR]

[TOC(start:2 end:2)]



Below are some good practices to follow when designing and working with visibility culling for your game. 

## Large View Distances

Large view distances can cause an impact on performance due to the number of Actors that need to be rendered. By blocking these large view distances with large occluders you can block Actors that would have been rendered otherwise.
This can reduce the number of queries that need to be sent to the GPU by having fewer Actors to check. In turn, you get better performance by having fewer Actors to check and render.

* Use large occluders where possible. 
* Use Cull Distance Volumes to remove any smaller Actors that will not be easily visible at far distances, even if they are occluded from view.
* Limit the amount of overdraw you get from Translucent Actors, since they will not occlude.

## "Popping" in/Lag from GPU Queries

This is a common issue with using visibility culling for the view frustum and hardware occlusion queries since they are being read back from the GPU one frame later. This is often 
noticeable when turning your player camera very fast or when you come around a corner in darkly lit areas that have a contrasting lit area behind them. 

* Use other geometry to help hide this artifact. For something like caves or darkened areas with bright outsides use a large occluder mesh that can sit just outside of these pieces to hide the popping in and block the light that makes it evident.
* Increase the Bounds Scale of the Actor that is causing the offending behavior. 
* Build geometry in a way that does not have too many small pieces that need to be assembled. This is especially true for walls, floors, and ceilings.

## Asset Construction

When creating geometry for your game it is a good idea to break your geometry up into modular pieces for design purposes and reusability. However, it is possible to modularize too much in the design 
process by using pieces that are too small to make up larger geometry. Because of this, each actor will need to be have its visibility state checked. It's best to find a balance that makes sense
for your game design and optimize for the best performance. Reducing the number of queries needed to check visibility is key for optimization and to help reduce the "Popping" in that can happen. 

* Use larger geometry when crafting your levels for structural surfaces rather than breaking it up into many smaller pieces. There is more impact on the GPU testing multiple smaller Actors than a single Actor.
* "Popping" in of Actors is reduced when considering the construction of the mesh.


## Consider Occlusion vs Distance Culling Cost

Occlusion and visibility culling methods cost much more than distance culling since these require GPU queries, so it is a good idea to setup Cull Distance Volumes for distant stuff even if they will 
be occluded by other Actors from a certain part of the scene.

* Make good use of Cull Distance Volumes to reduce occlusion culling costs.
* Stream out levels where possible instead of relying on distance or occlusion culling.
* Use the `Stat Initviews` command to keep performance balance in check.

For information about [Level Streaming](Engine/LevelStreaming) see how to set this up in this page.

