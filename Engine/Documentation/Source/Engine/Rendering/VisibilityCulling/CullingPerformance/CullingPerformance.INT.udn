Availability: Docs
Title: Visibility Culling Settings and Performance 
Crumbs: %ROOT%, Engine, 
Description: Visibility Culling Settings and Performance
Version: 4.13


[TOC(start:2 end:2)]




## Project Settings

The **Project Settings** contain various settings that will influence how culling works for your game. You can get to these settings by first going to the main menu and select 
**Edit** > **Project Settings**. When the window opens you can select the **Rendering** category to see the available settings under the section named **Culling**.

![](ProjectSettingsCulling.png)

| Setting | Description |
| --- | --- |
| **Occlusion Culling** | Allows occluded meshes to be culled and not rendered. If this is disabled all occlusion culling will be disabled for the project which can have performance implications. |
| **Min Screen Radius for EarlyZPass** | Screen radius at which objects are culled for early Z pass. Larger values can improve performance but very large values can degrade performance if large occluders are not rendered. |
| **Warn about no precomputed visibility** | Displays a warning when no precomputed visibility data is available for the current camera location. This can be helpful if you are making a game that relies on precomputed visibility. |

[REGION:tip]
​If you are developing a mobile game it would be beneficial to enable the option for **Warn about no precomputed visibility** as a good reminder for your Level Designers when developing for mobile, since it does not currently use dynamic 
occlusion culling.
[/REGION]



## Relevant Stats for Performance

[REGION:warning]
Keep in mind that when testing visibility and occlusion culling there are a couple of things to be aware of.

* Occlusion culling is disabled in **Wireframe** view mode.
* Use the console command **Stat Initviews** in PIE or Standalone games for more accurate results, because geometry for editor Actors that represent Lights, Cameras, and so on will be included when calculating visibility and occlusion culling.
[/REGION]

In real-time rendering for games, it is important to manage your scene for optimization by keeping check of the stats generated for your scene that are relevant to visibility and occlusion culling.

Use the following console command to view the stats relevant to visibility and occlusion culling for your scene: 

	Stat Initviews


[REGION:lightbox]
![](StatInitViews.png)
[/REGION]
[REGION:caption]
The scene's stats above were taken from the [Infinity Blade Grasslands](https://www.unrealengine.com/marketplace/infinity-blade-plain-lands) created by EPIC Games and is freely available on the EPIC Games Marketplace.
[/REGION]

The **Stat Initiviews** window is broken up into two sections for `Cycle Counters` and `Counters`. The Cycle Counter's stats focus on the number of cycles in milliseconds it took to process, while the Counter's stats simply
add up the primitives that are processed.

[REGION:tip]
`Visible Static Mesh Elements` is the single biggest contributor to rendering thread time and should be carefully watched and optimized.
[/REGION]

| Stat Initviews |  |
| --- | --- |
| **Cycle Counters** | [INCLUDE:#cyclecounter] |
| **Counters** | [INCLUDE:#counters] |


[COMMENT:none]

[EXCERPT:CycleCounter]
| Stat | Description|
| --- | --- |
| **View Visibility** | The amount of frame time spent to process Actor visibility queries. |
| **Occlusion Cull** | The amount of frame time spent to query the scene for Actors within the view frustum that were occluded by other Actors. |
| **Frustum Cull** | The amount of frame time spent to query if an Actor's bounds were within the view frustum. |
| **Decompress Occlusion** | The amount of frame time it took to load the precomputed visibility. |
[/EXCERPT:CycleCounter]

[EXCERPT:Counters]
| Stat | Description|
| --- | --- |
| **Processed Primitives** | This is the total number of Actors that are being processed in the scene.  |
| **Frustum Culled Primitives** | This is the number of primitives culled when not within the view frustum's FOV. |
| **Occluded Primitives** | The number of Actors that are occluded by other Actors from within the view frustum's FOV. |
| **Occlusion Queries** | This is the number of scene occlusion queries sent to the GPU based on the number of Actors visible within the view frustum. |
| **Visible Dynamic Primitives** | This is the number of dynamic primitives in the scene that have their mobility set to Movable, like Particle Systems and Foliage instances. |
| **Visible Static Mesh Elements** | This is the number of visible meshes that have their mobility set to Static within the scene. |
[/EXCERPT:Counters]

[/COMMENT]

## Useful Console Commands

UE4 provides some [Console Commands](https://docs.unrealengine.com/latest/INT/GettingStarted/RunningUnrealEngine/index.html#usefulin-gamecommands) that can help with occlusion culling.

| Console Variable | Description |
| --- | --- |
| **r.OneFrameThreadLag** | This controls when occlusion queries are rendered. Rendering before the base pass may give worse occlusion (because not all occluders generally render in the earlyzpass). However, it may reduce CPU waiting for query result stalls on some platforms and increase overall performance. 0: After BasePass. 1: After EarlyZPass, but before BasePass. |
| **r.AllowOcclusionQueries** | If zero, occlusion queries will not be used to cull primitives. |
| **r.DownsampledOcclusionQueries** | Whether to issue occlusion queries to a downsampled depth buffer. |
| **r.NumBufferedOcclusionQueries** | Number of frames to buffer occlusion queries (including the current render thread frame). More frames reduce the chance of stalling the CPU waiting for the results, but increases out of date query artifacts. |


