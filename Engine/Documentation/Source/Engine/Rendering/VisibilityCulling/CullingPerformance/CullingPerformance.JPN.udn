INTSourceChangeList:3108692
Availability:Docs
Title:Visibility Culling 設定およびパフォーマンス 
Crumbs: %ROOT%, Engine, 
Description:Visibility Culling 設定およびパフォーマンス
Version:4.13

[VAR:Topic]
[OBJECT:Topic]
	[PARAM:image]
		![%Engine/Rendering/VisibilityCulling:title%]()
	[/PARAM]
	[PARAM:icon]
		![](%ROOT%/light_icon.png)(convert:false)
	[/PARAM]
	[PARAM:title]
		%Engine/Rendering/VisibilityCulling:title%
	[/PARAM]
	[PARAM:description]
		%Engine/Rendering/VisibilityCulling:description%
	[/PARAM]
	[PARAM:path]
		[RELATIVE:Engine/Rendering/VisibilityCulling]
	[/PARAM]
[/OBJECT]
[/VAR]
[VAR:TopicCompact]
[OBJECT:TopicCompact]
	[PARAM:image]
		![%Engine/Rendering/VisibilityCulling:title%]()
	[/PARAM]
	[PARAM:icon]
		![](%ROOT%/light_icon.png)(convert:false)
	[/PARAM]
	[PARAM:title]
		%Engine/Rendering/VisibilityCulling:title%
	[/PARAM]
	[PARAM:description]
		%Engine/Rendering/VisibilityCulling:description%
	[/PARAM]
	[PARAM:path]
		[RELATIVE:Engine/Rendering/VisibilityCulling]
	[/PARAM]
[/OBJECT]
[/VAR]


[TOC(start:2 end:2)]




## Project Settings (プロジェクト設定)

**[Project Settings (プロジェクト設定)]** で、ゲーム内で様々なカリング方法を設定することができます。これらの設定は、まずメイン メニューで **[Edit (編集)]** > **[Project Settings (プロジェクト設定)]**  
を選択します。ウィンドウが開いたら、**[Rendering]** カテゴリの **[Culling]** というセクションを見ると使用可能な設定が表示されます。

![](ProjectSettingsCulling.png)

| 設定 | 説明 |
| --- | --- |
| **Occlusion Culling** | オクルージョン メッシュをレンダリングせずにカリングします。この設定を無効にすると、プロジェクトのすべてのオクルージョン カリングが無効にされ、パフォーマンスへ影響する可能性があります。 |
| **Min Screen Radius for EarlyZPass** | Early-Z pass に対してオブジェクトをカリングする画面半径です。値が大きいとパフォーマンスが良くなりますが、値が非常に大きいとオクルーダがレンダリングされない場合、パフォーマンスが落ちます。 |
| **Warn about no precomputed visibility** | 使用中のカメラ位置に対して利用できる事前計算されたビジビリティ データがない場合に警告を表示します。事前計算されたビジビリティに依存するゲームを作成する場合に便利です。 |

[REGION:tip]
​モバイルゲームを開発中ならば、現在動的オクルージョン カリングを使用しないので、 
レベル デザイナーへのリマインダーとして **[Warn about no precomputed visibility]** オプションを有効にしておくと便利です。
[/REGION]



## パフォーマンス関連の統計

[REGION:warning]
ビジビリティとオクルージョンをテストする際には、以下の点に留意してください。

* **Wireframe** ビューモードではオクルージョン カリングは無効になります。
* PIE またはスタンドアローン ゲームでコンソール コマンド **Stat Initviews** と使うと、ライト、カメラなどを表すエディタ アクタのジオメトリは、ビジビリティとオクルージョン カリングの計算時に含まれるので、結果の精度があがります。
[/REGION]

ゲームをリアルタイムでレンダリングする場合は、シーンに対して作成されるビザビリティとオクルージョン カリング関連の統計を常に確認してシーンの最適化を管理することが重要です。

以下のコンソール コマンドを使って、シーンのビジビリティおよびオクルージョン カリング関連の統計を表示します。 

	統計の初期ビュー


[REGION:lightbox]
![](StatInitViews.png)
[/REGION]
[REGION:caption]
上記は、エピック ゲームズ制作の [Infinity Blade Grasslands](https://www.unrealengine.com/marketplace/infinity-blade-plain-lands) の統計です。エピック ゲームズ マーケットプレイスで無料で利用できます。
[/REGION]

**[Stat Initiviews (統計の初期ビュー)]** ウィンドウは、[Cycle Counters] と [Counters] の 2 つのセクションに分割されています。Cycle Counter の統計情報は、処理にかかるミリ秒での周期数がメインで、
一方、Counter の統計情報は処理されたプリミティブの単純加算です。

[REGION:tip]
`Visible Static Mesh Elements` は、レンダリング スレッド時間を長くする唯一かつ最大の要因です。注意して観察して最適化してください。
[/REGION]

| Stat Initviews |  |
| --- | --- |
| **Cycle Counters** | [INCLUDE:#cyclecounter] |
| **Counters** | [INCLUDE:#counters] |


[COMMENT:none]

[EXCERPT:CycleCounter]
| 統計情報 | 説明 |
| --- | --- |
| **View Visibility** | アクタ ビジビリティ クエリの処理にかかるフレーム時間の合計です。 |
| **Occlusion Cull** | 他のアクタによってオクルードされた表示錐台のアクタに対するシーンのクエリにかかるフレーム時間の合計です。 |
| **Frustum Cull** | 視錐体にアクタの境界があるかどうかのクエリにかかるフレーム時間の合計です。 |
| **Decompress Occlusion** | 事前計算されたビジビリティのロードにかかるフレーム時間の合計です。 |
[/EXCERPT:CycleCounter]

[EXCERPT:Counters]
| 統計情報 | 説明 |
| --- | --- |
| **Processed Primitives** | シーンで処理されるアクタ数の合計です。 |
| **Frustum Culled Primitives** | 視錐体の FOV 外でカリングされたプリミティブ数です。 |
| **Occluded Primitives** | 視錐体の FOV から他のアクタにオクルードされている状態のアクタ数です。 |
| **Occlusion Queries** | 視錐体に表示されているアクタ数に応じて GPU に送るシーン オクルージョン クエリ数です。|
| **Visible Dynamic Primitives** | パーティクル システムとフォリッジ インスタンスなど、可動性が Movable に設定されたシーン内の動的プリミティブ数です。 |
| **Visible Static Mesh Elements** | 可動性が Static に設定された表示メッシュ数です。 |
[/EXCERPT:Counters]

[/COMMENT]

## 便利なコンソール コマンド

UE4 では、オクルージョン カリングしやすくする [コンソール コマンド](https://docs.unrealengine.com/latest/INT/GettingStarted/RunningUnrealEngine/index.html#usefulin-gamecommands) がいくつか付いています。

| コンソール変数 | 説明 |
| --- | --- |
| **r.OneFrameThreadLag** | オクルージョン クエリをレンダリングするタイミングを調節します。レンダリングをベース パス前に行うと、オクルージョンの質が落ちます (一般的にすべてのオクルーダは earlyzpass でレンダリングするため)。ただし、プラットフォームによっては CPU のクエリ結果待ちによる遅延が改善されるため、全体的にパフォーマンスが良くなります。0:BasePass の後1:EarlyZPass の後で BasePass の前 |
| **r.AllowOcclusionQueries** | 0 に設定すると、プリミティブのカリングにオクルージョン クエリを使用しません。 |
| **r.DownsampledOcclusionQueries** | ダウンサンプル深度バッファに対してオクルージョン クエリを発行するか設定します。 |
| **r.NumBufferedOcclusionQueries** | (使用中のレンダリング スレッド フレームを含む) オクルージョン クエリをバッファするフレーム数です。フレーム数を増やすと、結果待ちによる CPU 遅延の可能性が減りますが、無効のクエリ アーティファクトが増加します。 |


