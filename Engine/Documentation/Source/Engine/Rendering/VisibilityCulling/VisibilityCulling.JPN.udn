Availability:Docs
Title:ビジビリティ カリング
Crumbs: %ROOT%, Engine, 
Description:Visibility Culling の機能の説明
Version:4.13

[VAR:Topic]
[OBJECT:Topic]
	[PARAM:image]
		![%Engine/Rendering/VisibilityCulling:title%]()
	[/PARAM]
	[PARAM:icon]
		![](%ROOT%/light_icon.png)(convert:false)
	[/PARAM]
	[PARAM:title]
		%Engine/Rendering/VisibilityCulling:title%
	[/PARAM]
	[PARAM:description]
		%Engine/Rendering/VisibilityCulling:description%
	[/PARAM]
	[PARAM:path]
		[RELATIVE:Engine/Rendering/VisibilityCulling]
	[/PARAM]
[/OBJECT]
[/VAR]
[VAR:TopicCompact]
[OBJECT:TopicCompact]
	[PARAM:image]
		![%Engine/Rendering/VisibilityCulling:title%]()
	[/PARAM]
	[PARAM:icon]
		![](%ROOT%/light_icon.png)(convert:false)
	[/PARAM]
	[PARAM:title]
		%Engine/Rendering/VisibilityCulling:title%
	[/PARAM]
	[PARAM:description]
		%Engine/Rendering/VisibilityCulling:description%
	[/PARAM]
	[PARAM:path]
		[RELATIVE:Engine/Rendering/VisibilityCulling]
	[/PARAM]
[/OBJECT]
[/VAR]


[TOC(start:2 end:2)]

## Visibility Culling とは

ビジビリティ カリングはシーンのすべてのアクタを集めてから、使用できるカリング メソッドの 1 つを使って見えるかどうかをテストします。アクタの可視ステートの確認プロセスは、 
テストのために GPU に送るクエリ数を減らすことでカリングの効率性を上げるために使われます。 

このカリング処理の仕組みを理解するには、まずアクタのバウンディング ボックスと球体がどのように可視ステートのテストに使われるのか、 
視錐台とは何か、そしてオクルーダー アクタとオクルーディー アクタの違いを理解しなければなりません。 

### アクタの境界

アクタにはそれぞれ境界があります。この境界は、メッシュのジオメトリを囲むバウンディング ボックスと球体で構成されています。スタティックメッシュ エディタ、ペルソナ、 
またはシーンの [Details (詳細)] パネルでインスタンスごとに編集することができます。ビジビリティとオクルージョン カリングを行うために、アクタがカメラの視野角内でのアクタの可視ステートのテストに使用されます。


![](BoundsEditorView1.png)(w:350)
[REGION:caption]
アクタのバウンディング ボックスと球体
[/REGION]

Bounds Scale の設定方法

以下のオプションを使って、スタティクメッシュおよびスケルタルメッシュの境界を設定することができます。

[REGION:imagetable]
| ![](BoundScaleSetting.png)(w:400) | ![](BoundsScaleSettingSMEditor.png)(w:400) |
| --- | --- |
| Scene Per-Instance Detail's panel | スタティックメッシュ エディタとスケルタルメッシュ エディタの詳細パネルです。 | 
[/REGION]

[REGION:note]
スタティックメッシュ エディタとペルソナでは特定の XYZ 座標値を設定できますが、**Bounds Scale** ではアクタの境界を均等にスケールする乗数を使ってインスタンスごとに設定します。
[/REGION]

アクタの境界を表示するには、まずビューポートを開いて、**[Show (表示)]** > **[Advanced (詳細)]** > **[Bounds (境界)]** を選択、あるいはコマンド `Show Bounds` を使います。次に、シーンのアクタを選択して、
境界が見えるか確認します。

[OBJECT:ComparisonSlider]
 [PARAM:before]
 ![Bounds Scale: 1.0](Bounds2.png)(w:500)
 [/PARAM]
 [PARAM:after]
 ![Bounds Scale: 1.25](Bounds3.png)(w:500)
 [/PARAM]
[/OBJECT]
[REGION:caption]
_選択したアクタの [Detail (詳細)] パネルで Bounds Scale を設定する_
[/REGION]

[REGION:tip]
アクタの境界は、整数でなくても広げることができます。目指す大きさになるまで、小数点単位で徐々に増やしていくことができます。例えば、 
Bounds Scale を 2.0 ではなく 1.15 にします。 
[/REGION]



### カメラの視錐台について

カメラの視錐台とは、3D で表示される領域のことです。 

[REGION:imagetable]
| [INCLUDE:#cameraview1] |
| ---------------------- |
| カメラの視錐台 (FOV) を 90 度 (デフォルト) に設定 |
[REGION:caption]
_画像をクリックしてフルサイズで表示_
[/REGION]
[/REGION]

このピラミッド型がカメラ ビューから見た **視野角** (FOV) を表します。このビュー内にあるシーンの中の様々なアクタを表示します。
下の画像は、上のシーンを構成するエレメントをすべて含んでいます。視錐台内で見えないスポットライトなどのアクタ、 
あるいは視錐台内で見えないその他のアクタも含むことができます。  

[REGION:imagetable]
| [INCLUDE:#sceneview1]| 
| --- |
| カメラのアトリビュートを付けたシーン ビュー  |
[/REGION]
[REGION:caption]
_画像をクリックしてフルサイズで表示_
[/REGION]

| 番号 | 説明 |
| ------ | ----------- |
| **1**  | **視野角 (FOV):** 度で計測した視野角の幅です。 |
| **2**  | **ニアクリップ プレーン:** カメラに最も近いレンダリング ポイントです。 |
| **3**  | **カメラ視錐台:** ニアクリップ プレーンとファー クリップ プレーンの間の領域です。このビューにあるものはすべてレンダリング対象と見なされます。 |
| **4**  | **ファークリップ プレーン:** カメラから最も遠いレンダリング ポイントです。ビューをクリップする設定距離ではなく、シーン深度によって調節されます。 |

[COMMENT:none]
-
[EXCERPT:CameraView1]
[REGION:lightbox]
[![](CameraView.png)(w:600)](CameraView.png)
[/REGION]
[/EXCERPT:CameraView1]

[EXCERPT:SceneView1]
[REGION:lightbox]
[![](FrustumView.png)(w:600)](FrustumView.png)
[/REGION]
[/EXCERPT:SceneView1]
-
[/COMMENT]

視錐台は **視野角** (FOV) で調整します。値が高いと表示角度が広くなり、値が低いと表示角度が制限されます。

[REGION:note]
カメラの視錐台の可視化はデフォルトでは無効になっています。ビューポートで **[Show (表示)]** > **[Advanced (詳細)]** > **[Camera Frustum (カメラ錐台)]** を選択して、まず有効にしなければなりません。
[/REGION]

[OBJECT:EmbeddedVideo]
 [PARAMLITERAL:width]
 640
 [/PARAMLITERAL]
 [PARAMLITERAL:height]
 360
 [/PARAMLITERAL]
 [PARAMLITERAL:videoid]
 RqTqc0dLKPM
 [/PARAMLITERAL]
[/OBJECT]

詳細は、本ページの [カメラの使用および設定方法](Gameplay/HowTo/UsingCameras) をご覧ください。


### オクルージョンについて

オクルージョンは、別のアクタを隠すことができるアクタ、または別のアクタから隠されるアクタがあると発生します。アクタは、オクルーダー、オクルーディー、あるいはその両方になります。 
 
* オクルーダーは、別のアクタを視錐台に表示されないようにするアクタです。
* オクルーディーは、別のアクタによって視錐台に表示されなくなるアクタのことです。アクタがある程度大きければ、それより小さいアクタを視錐台で隠すオクルーダーとなります。

下の例では、カメラがシーンのビューを表しています。ウォールの後ろには、カメラ ビューで隠されているため表示されていないアクタがあります。彫刻と銃身は、それらをオクルードしている壁によって隠されているので、 
両方ともオクルーディーとなります。さらに、銃身と彫刻は後ろにあるものを隠していればオクルーダーとなることを覚えておいてください。すべてのオクルーダーは、 
他のアクタを隠すことができる大きさがあればオクルーディーになることができます。

[REGION:imagetable]
| [INCLUDE:#OccluderVsOccludee1] | [INCLUDE:#OccluderVsOccludeeCV] |
| --- | --- | 
| Occluder = Wall, Occludee = Barrels and Statue  | カメラの FOV が銃身と彫刻をオクルードする壁を表示します。 |
[/REGION]
[REGION:caption]
_画像をクリックしてフルサイズで表示_
[/REGION]

[COMMENT:none]
-
[EXCERPT:OccluderVsOccludee1]
[REGION:lightbox]
[![](OccluderVsOccludee.png)(w:450)](OccluderVsOccludee.png)
[/REGION]
[/EXCERPT:OccluderVsOccludee1]

[EXCERPT:OccluderVsOccludeeCV]
[REGION:lightbox]
[![](OccluderVsOccludeeCameraView.png)(w:450)](OccluderVsOccludeeCameraView.png)
[/REGION]
[/EXCERPT:OccluderVsOccludeeCV]
-
[/COMMENT]

### ビジビリティ カリング

以下のタイプのカリングは、シーンのアクタの現在の可視ステートの判断に使用します。

|カリングのタイプ|説明|
| ---------------- | ----------- |
| **Distance** | アクタの設定距離を可視ステートの判断に使用します。 |
| **View Frustum** | カメラの視錐台内に境界が一切表示されないアクタを削除するために使用します。この表示領域の外にあるものは、レンダリングの対象にはなりません。 |
| **Occlusion** | カメラ視錐台にありながら、他のアクタに隠されて表示されない余分なアクタを削除するために使用します。アクタがシーンの深度バッファ内にあるかどうかテストして行います。あればレンダリングされ、なければオクルードされているとみなされレンダリングされません。 |


詳細は、[バッファの視覚化](Engine/UI/LevelEditor/Viewports/ViewModes#Bufferの視覚化) でご確認ください。

## ビジビリティ カリング メソッド

データがシーンからカリングされたら、アクタの可視ステートをテストするために実装されているカリング メソッドでテストします。ビジビリティ カリング メソッドは連動しています。
モバイルの場合、動的オクルージョンができない場合の解決方法となります。

以下のカリング メソッドは適用順になっています。同時に、レンダリング スレッド負荷の小さいもの順にもなっています。

* 距離カリング (インスタンスごとのボリュームおよび Cull Distance Volumes)
* 視錐台カリング
* 事前計算オクルージョン カリング
* 動的オクルージョン カリング (ハードウェア オクルージョン クエリ)


#### Distance Culling (インスタンス別)

シーン内の各アクタに対して、レンダリング結果として表示できる最短 / 最長の描画距離を設定することができます。

![](DistanceCullSettings.png)

| **プロパティ** | **説明** |
| ------------ | --------------- |
| **Min Draw Distance** | プリミティブのレンダリング最小距離です。プリミティブのバウンディング球体の中央からカメラ位置までワールド スペース単位で計測されます。 |
| **Desired Max Draw Distance** | レベル デザイナーに公開されている最長描画距離です。実際の最大描画距離は、この Desired Max Draw Distance の値、および、このオブジェクトに影響を与えるボリュームに設定された値のうちで最小の値 (ゼロは無視します) になります。|
| **Current Max Draw Distance** | このプロパティは編集できません。このフィールドには、プリミティブが中に存在する CullDistanceVolume によって設定されたカリング距離が表示されます。0 に設定すると Cull Distance Volume は設定されないので、値は 0 になります。 |

下の例では、キューブに **Min Draw Distance** と **Desired Max Draw Distance** を設定しています。これらの値は、アクタをレンダリングする最短距離、あるいは 
アクタをレンダリングできるカメラのビューからの最長距離を決定します。

* **Min Draw Distance:** 500
* **Desired Max Draw Distance:** 1000

[REGION:note]
ここで、**Desired Max Draw Distance** が Cull Distance Volume に設定された高い値をオーバーライドしていることに注目してください。詳細は、[Cull Distance Volume](1_TimH\2_IN_PROGRESS\VisibilityCulling\CullDistanceVolume) ページを参照してください。
[/REGION]

[OBJECT:EmbeddedVideo]
 [PARAMLITERAL:width]
 640
 [/PARAMLITERAL]
 [PARAMLITERAL:height]
 360
 [/PARAMLITERAL]
 [PARAMLITERAL:videoid]
 LiiJ13LulIU
 [/PARAMLITERAL]
[/OBJECT]


[COMMENT:none]
-
[REGION:imagetable]
| [INCLUDE:#Units1500] | [INCLUDE:#Units1000] | [INCLUDE:#Units500] |
| --- | --- | --- |
| Desired Max Draw Distance より長い | Min と Max Draw Distance の間 | Min Draw Distance 未満 | 
[/REGION]

上の動画での現象を図説しやすいように、この画像はトップダウン ビューを表示し、**Camera** アクタか **Cube** アクタの中央までの距離を示します。 
トップダウン ビューのすぐ下の画像は、カメラのビューです。

-
[/COMMENT]

**Desired Max Draw Distance** が 1000、**Min Draw Distance** が 500 に設定されているので、
キューブ アクタはカメラがアクラのバウンディング ボックスの中央からこの範囲内を移動した時だけみえるようになります。カメラがこのスペース外に移動すると、アクタはレンダリング対象外となります。 

[COMMENT:none]

[EXCERPT:Units1500]
[REGION:lightbox]
[![](1500units.png)(w:300)](1500Units.png)
[/REGION]
[/EXCERPT:Units1500]

[EXCERPT:Units1000]
[REGION:lightbox]
[![](1000units.png)(w:300)](1000Units.png)
[/REGION]
[/EXCERPT:Units1000]

[EXCERPT:Units500]
[REGION:lightbox]
[![](500units.png)(w:300)](500Units.png)
[/REGION]
[/EXCERPT:Units500]

[/COMMENT]


#### Cull Distance Volume

Cull Distance Volumes は、対応する距離の境界のサイズに基づいて、アクタを自動除去する大きさと距離を配列に指定することができるようにします。これらのボリュームは、
大きな屋外シーンに詳細な内部がある場合に便利です。 

使用方法とセットアップに関する情報は、本ページの [Cull Distance Volumes](1_TimH\2_IN_PROGRESS\VisibilityCulling\CullDistanceVolume) をご覧ください。


#### 視錐台カリング

カメラの視錐台は、シーンからカリングされたデータが表示中の領域内にあるかどうかをテストするために使います。この処理は、アクタのバウンディング ボックスと球体を使ってデータがビューの中で見えるか確認します。もしなければ、 
アクタはレンダリングされません。

以下の例は、視錐台が表示中の領域内のアクタの存在の判定方法です。

* 黄色は、視錐台の FOV と他のアクタにオクルードされない領域を表します。
* 赤は、他のアクタ (壁や大きいオブジェクトなど) のためオクルードされて部分的に見えている視錐台です。

[REGION:imagetable]
| [INCLUDE:#Camera1] | [INCLUDE:#Camera2] | [INCLUDE:#Camera3] | [INCLUDE:#Camera4] |
| ------------------ | ------------------ | ------------------ | ------------------ |
|          1         |          2         |          3         |          4         | 
[/REGION]

| **番号** | **説明** |
| ---------- | --------------- |
| **1** | このパースペクティブでは、玄関までのビュー以外すべてを隠すオクルーダとなる大きい壁があります。このため、キューブだけしか見えません。つまり、球体とコーンは壁のオクルーディーなので、レンダリングはされません。 |
| **2** | カメラが前方に動くと、視錐台には映るシーンが広がります。壁が球体とコーンをオクルードしなくなり、壁の隅周辺で球体とコーンが部分的に見えます。見えているのは一部ですが、全体がレンダリングされているということになります。 |
| **3** | 次に、カメラが左を向くと、視錐台内には球体とキューブが見えます。ビューの外にあるコーンと壁はレンダリングされません。 |
| **4** | 今度はカメラが右に向くと、ビューにコーンとキューブが見えるようになり、ビューから外れた壁と球体はレンダリングされなくなります。 |

[REGION:note]
ビジビリティ カリングの仕組みの一般的な例です。レンダリングに関する注意事項と理由はたくさんあるので、ここでは一部のみ説明します。ヒントや方策については、
本ページの [ベスト プラクティスのためのカリング方法](#ベストプラクティスのためのカリング方法) をご覧ください。
[/REGION]

[COMMENT:none]

[EXCERPT:Camera1]
[REGION:lightbox]
[![](Camera1.png)(w:215)](Camera1.png)
[/REGION]
[/EXCERPT:Camera1]

[EXCERPT:Camera2]
[REGION:lightbox]
[![](Camera2.png)(w:215)](Camera2.png)
[/REGION]
[/EXCERPT:Camera2]

[EXCERPT:Camera3]
[REGION:lightbox]
[![](Camera3.png)(w:215)](Camera3.png)
[/REGION]
[/EXCERPT:Camera3]

[EXCERPT:Camera4]
[REGION:lightbox]
[![](Camera4.png)(w:215)](Camera4.png)
[/REGION]
[/EXCERPT:Camera4]

[/COMMENT]


#### Precomputed Visibility Volume

[COMMENT:none]
-![](PrecomputedVisibilityVolume.png)(w:500)-
[/COMMENT]

Precomputed Visibility Volumes は、静的ライティング ビルドの後にサーフェイスに置かれるビジビリティ セルを使います。これらのビジビリティ セルは、カメラ ビューを使ってアクタの可視ステートを変更します。
カリング メソッドは、可視ステートを確認するためのハードウェア オクルージョン クエリを発行できないモバイル デバイス上にビジビリティ カリングを行う際に便利です。 

使用方法とセットアップに関する情報は、[Precomputed Visibility Volumes](1_TimH\2_IN_PROGRESS\VisibilityCulling\PrecomputedVisibilityVolume) をご覧ください。

#### 動的オクルージョン

動的オクルージョン クエリは、カメラの視錐台内にあると判定されたアクタを見るだけでカリング メソッドのチェーンの最後に実施されます。視錐台内にあるアクタ境界は、 
GPU に送られて 1 フレーム遅れで読みとられて、シーン深度バッファに対するビジビリティがテストされます。アクタの境界がシーン深度内に表示されなければ、 
レンダリングはされません。これにより、別のアクタにオクルードされたアクタに対する可視ステートがレンダリングされないようにします。また、ファー クリップ プレーンの距離に特定の値を設定するのではなくて、
おおよその距離に依存しているので、表示距離を遠くにすることができます。

#### Hierarchical Z Buffer

[REGION:warning]
Hierarchical Z-Buffer オクルージョンの実装はまだ実験的と見なされています。不適切にメッシュがカリングされてしまうなど、未対処の既知の問題があります。 
[/REGION]

Hierarchical Z-Buffer オクルージョンの背後にある考え方は、アクタの可視性を決定するために複数の解像度でシーンの深度を表現することです。これは、テスト対象のアクタに対してシーンで深度を特定するテクセルがあるシーン深度に対して、 
レンダー ターゲットのミップマップ版を作成することで実現します。アクタの境界の深度値をキャプチャされたレンダー ターゲットの深度値と比較すれば、
アクタのオクルージョンをテストすることができます。解像度が低めのミップ レベルを使うと、アクタ境界のチェックが慎重になり、
ミップ レベルからサンプリングする際のテクスチャ フェッチが少なくなります。 

[REGION:note]
シーンを実際のシーン解像度より低い解像度でレンダリングすると、表示すべきアクタを不正にカリングする危険があります。  
[/REGION]

Hierarchical Z-Buffer Occlusion Culling は以下のコンソール コマンドで有効にすることができます。 

	r.HZBOcclusion

* 0 で Hierarchical Z-Buffer occlusion を無効にします。
* 1 で Hierarchical Z-Buffer occlusion を有効にします。
* 2 は Hierarchical Z-Buffer システムを強制使用します。これにより、レンダリング プラットフォームの環境設定をオーバーライドします。


## ベスト プラクティスのためのカリング方法

ゲームで Visibility Culling を作成および使用するためのグッドプラクティスをいくつか紹介します。

### GPU クエリによるアクタのポッピング / 遅延現象

GPU から 1 フレーム遅れて読み取られるので、視錐台とハードウェア オクルージョン クエリに Visibility Culling を使うとこの問題がよく発生します。プレイヤー カメラを急速に切り替える、もしくは明るい照明の前の領域を暗く照らそうとすると、 
よく分かります。 

* 別のジオメトリを使って、このアーティファクトを隠します。洞窟や、暗い場所で外が明るい場合、これらの構成要素のちょうど外側に収まる大きなオクルーダ メッシュを使って、ポッピングの部分を隠し、アーティファクトを目立たせるライトをブロックします。
* 問題のビヘイビアを発生させているアクタの Bounds Scale を増やします。 
* 小さい構成要素を組み立てなくて済むような方法でジオメトリをビルドします。ウォール、フロア、天井に特に当てはまります。

### Large View Distances

Large View Distances は、レンダリングが必要なアクタ数のために、パフォーマンスに影響を与える可能性があります。こういった Large View Distances を大きなオクルーダでブロックすれば、レンダリングされてしまう可能性のあるアクタをブロックすることができます。
これによりチェックするアクタ数が少なくなるため、GPU へ送らなければならないクエリ数を減らすことができます。同様に、チェックおよびレンダリングするアクタ数が減れば、パフォーマンスも良くなります。

* 可能な限り、大きいオクルーダを使います。 
* 小さなアクタは、例えビューからオクルードされていても、それが遠くで見えずらい場合は、Cull Distance Volumes を使って取り除きます。
* Translucent アクタから取得したオーバードローはオクルードされないので、量を制限します。

### アセットの構築

ゲームのジオメトリを作成する場合、ジオメトリをモジュラーに分割しておくと、デザインがしやすく、また再利用もできます。ただし、あまりに小さい要素で大きなジオメトリを作ろうとすると、 
デザイン プロセスで非常に多くのモジュラーができてしまう可能性があります。そこで、各アクタの可視性ステートをチェックしておく必要があります。ゲーム デザインにぴったりのバランスを見つけ出し、
ベストパフォーマンスを引き出すような最適化を行うことが重要です。可視性チェックに必要なクエリ数の削減が最適化には必須であり、「ポッピング」が起こる確率も減らしやすくなります。 

* 構造的なサーフェイスに対してレベルを作る時は、小さな構成要素にたくさん分割せずに大きいジオメトリを使います。単一のアクタをテストするよりも、複数の小さなアクタをテストする方が GPU への負荷は大きくなります。
* メッシュ構築を検討する際に、アクタの「ポッピング」を減らします。


### Occlusion Culling と Distance Culling の負荷を考慮する

オクルージョンと Visibility Culling メソッドは GPU クエリを要求するため、Distance Culling よりも高負荷です。従って、そのシーンのある場所から別のアクタでオクルードされていても、 
遠くのものには Cull Distance Volumes を設定すると良いでしょう。

* Cull Distance Volumes を活用して、Occlusion Culling 負荷を削減します。
* Distance Culling または Occlusion Culling に依存するのではなく、できる限りレベルをストリームアウトします。
* `Stat Initviews` コマンドを使って、常にパフォーマンス バランスを確認します。

* セットアップ方法については、以下の [レベル ストリーミング](Engine/LevelStreaming) セクションをご覧ください！

## プロジェクト設定

メイン メニューから **[Edit]** > **[Project Settings]** を選択して **[Project Settings]** ウィンドウを開きます。ウィンドウが開くと **[Rendering]** カテゴリの **[Culling]** セクションに
使用可能な設定が表示されます。


![](ProjectSettingsCulling.png)

| 設定 | 説明 |
| --- | --- |
| **Occlusion Culling** | オクルージョン メッシュをレンダリングせずにカリングします。この設定を無効にすると、プロジェクトのすべてのオクルージョン カリングが無効にされ、パフォーマンスへ影響する可能性があります。 |
| **Min Screen Radius for EarlyZPass** | Early-Z pass に対してオブジェクトをカリングする画面半径です。値が大きいとパフォーマンスが良くなりますが、値が非常に大きいとオクルーダがレンダリングされない場合、パフォーマンスが落ちます。 |
| **Warn about no precomputed visibility** | 使用中のカメラ位置に対して利用できる事前計算されたビジビリティ データがない場合に警告を表示します。事前計算されたビジビリティに依存するゲームを作成する場合に便利です。 |

[REGION:tip]
​モバイルゲームを開発中ならば、現在動的オクルージョン カリングを使用しないので、 
レベル デザイナーへのリマインダーとして **[Warn about no precomputed visibility]** オプションを有効にすることを覚えておくと便利です。
[/REGION]


[COMMENT:none]
-
## コンソール コマンド

| コンソール変数 | 説明 |
| --- | --- |
| **r.OneFrameThreadLag** | オクルージョン クエリをレンダリングするタイミングを調節します。レンダリングをベース パス前に行うと、オクルージョンの質が落ちます (一般的にすべてのオクルーダは earlyzpass でレンダリングするため)。ただし、プラットフォームによっては CPU のクエリ結果待ちによる遅延が改善されるため、全体的にパフォーマンスが良くなります。0:BasePass の後1:EarlyZPass の後で BasePass の前 |
| **r.AllowOcclusionQueries** | 0 に設定すると、プリミティブのカリングにオクルージョン クエリを使用しません。 |
| **r.DownsampledOcclusionQueries** | ダウンサンプル深度バッファに対してオクルージョン クエリを発行するか設定します。 |
| **r.NumBufferedOcclusionQueries** | (使用中のレンダリング スレッド フレームを含む) オクルージョン クエリをバッファするフレーム数です。フレーム数を増やすと、結果待ちによる CPU 遅延の可能性が減りますが、無効のクエリ アーティファクトが増加します。 |

[/COMMENT]

## パフォーマンス関連の統計

ゲームをリアルタイムでレンダリングする場合は、シーンに対して作成されるビジビリティ カリングとオクルージョン カリング関連の統計を常に確認してシーンの最適化を管理することが重要です。

以下のコンソール コマンドを使って、シーンのビジビリティ カリングとオクルージョン カリング関連の統計を表示します。 

	統計の初期ビュー

[REGION:warning]
ビジビリティ カリングとオクルージョン カリングをテストする際には、以下の点に留意してください。

* **Wireframe** ビューモードではオクルージョン カリングは無効になります。
* PIE またはスタンドアローン ゲームでコンソール コマンド **Stat Initviews** と使うと、ライト、カメラなどを表すエディタ アクタのジオメトリは、ビジビリティとオクルージョン カリングの計算時に含まれるので、結果の精度があがります。
[/REGION]


[REGION:lightbox]
![](StatInitViews.png)
[/REGION]
[REGION:caption]
上記は、エピック ゲームズ制作の [Infinity Blade Grasslands](https://www.unrealengine.com/marketplace/infinity-blade-plain-lands) の統計です。エピック ゲームズ マーケットプレイスで無料で利用できます。
[/REGION]

**[Stat Initiviews (統計の初期ビュー)]** ウィンドウは、[Cycle Counters] と [Counters] の 2 つのセクションに分割されています。Cycle Counter の統計情報は、処理にかかるミリ秒での周期数がメインで、
一方、Counter の統計情報は処理されたプリミティブの単純加算です。

[REGION:tip]
`Visible Static Mesh Elements` は、レンダリング スレッド時間を長くする唯一かつ最大の要因です。注意して観察して最適化してください。
[/REGION]

| Stat Initviews |  |
| --- | --- |
| **Cycle Counters** | [INCLUDE:#cyclecounter] |
| **Counters** | [INCLUDE:#counters] |


[COMMENT:none]

[EXCERPT:CycleCounter]
| 統計情報 | 説明 |
| --- | --- |
| **View Visibility** | アクタ ビジビリティ クエリの処理にかかるフレーム時間の合計です。 |
| **Occlusion Cull** | 他のアクタによってオクルードされた視錐台のアクタに対するシーンのクエリにかかるフレーム時間の合計です。 |
| **Frustum Cull** | 視錐体にアクタの境界があるかどうかのクエリにかかるフレーム時間の合計です。 |
| **Decompress Occlusion** | 事前計算されたビジビリティのロードにかかるフレーム時間の合計です。 |
[/EXCERPT:CycleCounter]

[EXCERPT:Counters]
| 統計情報 | 説明 |
| --- | --- |
| **Processed Primitives** | シーンで処理されるアクタ数の合計です。 |
| **Frustum Culled Primitives** | 視錐体の FOV 外でカリングされたプリミティブ数です。 |
| **Occluded Primitives** | 視錐体の FOV から他のアクタにオクルードされている状態のアクタ数です。 |
| **Occlusion Queries** | 視錐体に表示されているアクタ数に応じて GPU に送るシーン オクルージョン クエリ数です。|
| **Visible Dynamic Primitives** | パーティクル システムとフォリッジ インスタンスなど、可動性が Movable に設定されたシーン内の動的プリミティブ数です。 |
| **Visible Static Mesh Elements** | 可動性が Static に設定された表示メッシュ数です。 |
[/EXCERPT:Counters]

[/COMMENT]

## ヒントとコツ

ビジビリティ カリングおよびオクルージョン カリング絡みの問題が発生した場合のシーンのトラブルシューティングおよびテストに、以下のヒントとコツが役立ちます。 

##### オクルードされたプリミティブを可視化する

可視化モードを有効にすると、シーン内でカメラ ビューからオクルードされたすべてのアクタのバウンディングボックスを描画することができます。[Precomputed Visibility Volumes](1_TimH\2_IN_PROGRESS\VisibilityCulling\PrecomputedVisibilityVolume) を使うと、 
緑のバウンディング ボックスは、アクタが動的にオクルードされていること、赤のバウンディングボックスはアクタが静的にオクルードされていることを表します。 

以下のコンソール コマンドを使って、可視化を有効にします。 

	r.VisualizeOccludedPrimitives 1


[REGION:note]
このコンソール コマンドはエディタ内のみでしか使用できません。PIE あるいはスタンドアローン式ゲームでは使用できません。
[/REGION]

以下の例では、壁によってブロックされている、オクルードされたアクタを可視化したものと、壁を取り除いた時のアクタを配置を比べています。 

[OBJECT:ComparisonSlider]
 [PARAM:before]
 ![Visualize Occluded Primitives Enabled (Green Box)](VisOccludedPrimitives1.png)(w:500)
 [/PARAM]
 [PARAM:after]
 ![Actors occluded by the wall](VisOccludedPrimitives2.png)(w:500)
 [/PARAM]
[/OBJECT]


##### レンダリングのフリーズ

ワールド内を自由に移動しながら、現在のカメラ視点からのシーンのレンダリング ステートを切り替えます。

このモードの切り替えには、次のコンソール コマンドを使います。

	FREEZERENDERING


[OBJECT:EmbeddedVideo]
 [PARAMLITERAL:width]
 640
 [/PARAMLITERAL]
 [PARAMLITERAL:height]
 360
 [/PARAMLITERAL]
 [PARAMLITERAL:videoid]
 El127q0lv5s
 [/PARAMLITERAL]
[/OBJECT]


##### Game View Mode

キーボードのショートカット **G** またはメインの **[Viewport Options]** ドロップダウンから **[Game View]** を選ぶと、エディタで作業することができるようになり、ゲームでの表示との切り替えが可能になります。 
PIE での作業やゲームの起動をせずにゲームでの見え方を確認したい場合に便利なモードです。ゲーム内にいるか、Game View を使わない限り動作しないモードなので、 
[Cull Distance Volumes](1_TimH\2_IN_PROGRESS\VisibilityCulling\CullDistanceVolume) および [Precomputed Visibility Volumes](1_TimH\2_IN_PROGRESS\VisibilityCulling\PrecomputedVisibilityVolume) の確認にも理想的なモードです。

詳細は、[Game View](Engine\UI\LevelEditor\Viewports\Basics) モードのセクションをご覧ください。




## 関連リンク

[REGION:buttonlist]

  * [](1_TimH\2_IN_PROGRESS\VisibilityCulling\PrecomputedVisibilityVolume)
  * [](1_TimH\2_IN_PROGRESS\VisibilityCulling\CullDistanceVolume)
 
[/REGION]