Availability: Public
Title:Applying Custom Burn Ins
Crumbs: %ROOT%, Engine, Engine/Sequencer, Engine/Sequencer/HowTo
Description:Shows you to create and apply custom burn ins to rendered movies. 
Version: 4.13
SkillLevel: Advanced
parent:Engine/Sequencer/HowTo
order:1
checkpoint: editorqs
Related: Engine/Sequencer/Overview
Related: Engine\Sequencer\ReferenceEditor\
tags:Sequencer
type:how-to

When rendering out your cinematics, you may want to provide additional information or functionality that extends past the [Default Burn In](Engine\Sequencer\HowTo\BurnIns) settings that include time, shot and frame information. 
With a little bit of [Unreal Motion Graphics](Engine/UMG) and [](Engine/Blueprints) you can create your own custom burn ins and overlay functionality. 

In this example we show what type of assets you will need and the settings to use to get started with custom burn ins. 

[REGION:note]
For this how-to we are using the **Blueprint Third Person Template** project and have created a small sample cinematic.
[/REGION]

## Steps

1.	In the **Content Browser**, click the **View Options** and **Show Engine Content**. This will grant us the ability to see and use Font options that are provided with the Engine Content. 

	![](Custom01.png)

1.	**Right-click** in the **Content Browser** and create a **Blueprint Class** of the **LevelSequenceBurnInInitSettings** type. Name the new Blueprint **CustomSettings** as this will hold all the settings you wish to configure inside the Burn In Options. 

	![](Custom02.png) 

1.	**Right-click** in the **Content Browser** and create a **Blueprint Class** of the **LevelSequenceBurnIn** type. Name the new Blueprint **CustomBurnIn** as this will be the [UMG](Engine/UMG/) widget that we will create our custom burn in content in. 

	![](Custom03.png)

1.	Open the **CustomSettings** Blueprint. 

	![](Custom04.png)

1.	Click the **+** sign next to **Variables** and add the options you want to expose to the Burn In Options. Below we have created two variables, one called **CustomText** of the **Text** variable type and another called **CustomFont** of the **Slate Font Info** type (this will allow us to define the text and font style of burn in we create). We've set both variables to **Editable**, **Compiled** then set their **Default Values** (use any default values you wish). 

	![](Custom05.png)

1.	Open the **CustomSettings** Blueprint, then arrange your burn in content on the **Designer** tab. Below we added a Text widget to the graph and anchored it to the bottom center of the screen. We also changed the name of the widget to **DisplayedText** and made it a **Variable** so that we can access it through script. You can arrange your content here just as you would any UMG Widget Blueprint (apply images, animation, etc.), for this example we are only going to display some custom text. 

	[REGION:lightbox]
	[![](Custom06.png)](Custom06.png)
	[/REGION]

	[REGION:caption]
	Click image for full view. 
	[/REGION]

1.	On the **Graph** tab, in the **My Blueprint** window click the **Function Override** button and select **Get Settings Class**. We are going to point this Blueprint toward our **CustomSettings** Blueprint Class we created that way it knows which settings to use. 

	![](Custom07.png)

1.	In the graph that opens, click the **Return Value** dropdown and select **CustomSettings**. 

	![](Custom08.png)

1.	Return to the **Event Graph** and **Right-click** in the graph window and add the **Event Set Settings** node. 

1.	Drag off the **In Settings** and **Cast To CustomSettings**. This will allow us to access the options we've defined within it. 

	![](Custom09.png)

1.	**Right-click** on the **As Custom Settings** pin and **Promote to Variable** called **Options**. 

	![](Custom10.png)

1.	Hold **Ctrl** and drag in the **Displayed Text** and **Options** variables from the **My Blueprint** panel. 

1.	Drag off **Displayed Text** and **Set Font**, then drag off **Options** and get **Custom Font** and connect as shown below. 

	![](Custom11.png)

1.	Return to the **Designer** tab, then in the **Details** panel for the **Text** widget, click **Create Binding** next to the Text Content. 

	![](Custom12.png)

	This will allow us to bind a function to update the content (text displayed) for the Text Widget. 

1.	In the Graph that opens, **Ctrl** drag in the **Options** then drag off it to get **Custom Text** and connect as shown. 

	![](Custom13.png)

	This will display whatever we enter as the **CustomText** in our burn in. 

1.	Inside your **Level Sequence** that you want to render with a burn in, click the **Render Movie** button. 

1.	In the **Render Movie Settings** under **Burn in Options**, change the **Burn in Class** to **CustomBurnIn**. 

	![](Custom14.png)

	When doing so, the settings section updates to list our customizable options. 

	![](Custom15.png)

1.	Click the **Capture Movie** button to render out the movie. 


## End Result

When the capturing of your movie is complete, upon playing back your movie you will notice the overlays applied to the cinematic. While our example allows us to enter custom text and adjust the font style, you can expose various properties inside the **Level Sequence Burn In Init Settings** class to generate your desired effects. Inside your UMG Widget you can then script the functionality you want your burn ins to take, perhaps even animating them upon **Event Construct**.

[OBJECT:EmbeddedVideo]
[PARAMLITERAL:width]
640
[/PARAMLITERAL]
[PARAMLITERAL:height]
360
[/PARAMLITERAL]
[PARAMLITERAL:videoid]
mZzVTyb0r34
[/PARAMLITERAL]
[/OBJECT]


