Availability:Public
Title:Class Viewer
Crumbs: %ROOT%, Engine, Engine/UI
Description:Tool for examining UE4 classes.
Version: 4.9
topic-imge:Engine/UI/ClassViewer_topic.png


[TOC(start:2)]


[EXCERPT:Intro]
The **Class Viewer** allows the user to examine a hierarchical list of classes used by the editor. Through the tool, Blueprints can be created and opened for modification. You can also open associated C++ Header files or create new C++ classes based on the selected class. 
[/EXCERPT:Intro]

## Opening the Class Viewer
The Class Viewer can be opened from the **Window -> Developer Tools -> Class Viewer** option.

![Opening the class viewer.](Opening.png)(type:png)

## Class Viewer Interface
The Class Viewer is comprised of three areas:

![Class Viewer Interface](ClassViewer.png)(type:png)

1. [Menu Bar](#MenuBar)
1. [Search](#Search)
1. [Class Tree](#ClassTree)


### Menu Bar

#### Filters
* **Actors Only** - Filters the tree to show only children of the Actor class.
* **Placeable Only** - Filters the tree to show only placeable Actor classes.
* **Blueprint Bases Only** - Filters the tree to show only Blueprint Bases, which Blueprints can be created from.


#### View
* **Expand All** - Expands the entire tree, revealing all children.
* **Collapse All** - Collapses the entire tree, hiding all children.


### Search
The search bar allows for filtering classes by name. When a single word is searched, items only need a partial match to pass and will be highlighted. Items that fail the filter will be grayed out if they have children that pass and removed entirely if not.
	
![Highlighting search results.](SearchHighlight.png)(type:png)

Multiple words will allow a partial match on any to pass the filter. Highlighting is not available with multiple search terms.

![Highlighting search results.](SearchMultiple.png)(type:png)

### Class Tree
This area shows the parent-child relationship between classes that pass both filters and search. Each item can be broken down into two pieces.
	
![Item Interface](ItemInterface.png)(type:png)
	
1. [Class Name](#ClassName)
1. [Context Menu](#ContextMenu)


#### Class Name
This is the name of the class. Items colored in blue are Blueprint classes and white items are non-Blueprint classes.
	

#### Context Menu
The context menu is opened by clicking on ![Context Menu Button](ContextMenuButton.png)(type:png) or by **right-clicking** on a Blueprint or code class. Classes must be loaded (**right-click**) to display a ![Context Menu Button](ContextMenuButton.png)(type:png) to bring up the context menu. The options available in the context menu depend on the type of class selected:

|Class Type|Options|Description|
|----------|-------|-----------|
|**Blueprint Class**|[INCLUDE:#bpclassoptions]|[INCLUDE:#bpclassoptiondesc]|
|**Code Class**|[INCLUDE:#codeclassoptions]|[INCLUDE:#codeclassoptiondesc]|

[COMMENT:none]

[EXCERPT:BPClassOptions]
[REGION:plain_list]
* **Create Blueprint...**
* **Edit Blueprint...**
* **Find In Content Browser**
[/REGION]
[/EXCERPT:BPClassOptions]
[EXCERPT:BPClassOptionDesc]
[REGION:plain_list]
* Creates a new Blueprint parented to the selected Blueprint.
* Opens the selected Blueprint in the [Blueprint Editor](Engine/Blueprints).
* Finds the Blueprint Actor in the [Content Browser](Engine/Content/Browser).
[/REGION]
[/EXCERPT:BPClassOptionDesc]
[EXCERPT:CodeClassOptions]
[REGION:plain_list]
* **Create Blueprint...**
* **Open C++ Header File...**
* **Create New C++ Class...**
[/REGION]
[/EXCERPT:CodeClassOptions]
[EXCERPT:CodeClassOptionDesc]
[REGION:plain_list]
* Creates a new Blueprint parented to the selected Blueprint.
* Opens up the class header file in Visual Studio.
* Opens the [](Programming\Development\ManagingGameCode\CppClassWizard) to create a new class with the selected class as the Parent class.
[/REGION]
[/EXCERPT:CodeClassOptionDesc]

[/COMMENT]

## Drag & Dropping
Dropping a Blueprint class Actor into a viewport will add the Actor to the scene. When successfully dragging a Class, the mouse will show what class is in hand. Only one class can be dragged at a time.

![The mouse informs what class is being dragged.](DragDrop.png)(type:png)

Besides dropping into the viewport, classes can be dropped into combo boxes in the details window. Only classes that are children of the class associated with the combo box may be successfully dropped. An example is the World Properties details window and the GameMode Override where dropping any child class of GameMode will work.

![The mouse informs what class is being dragged.](DragDropCombo.png)(type:png)
[REGION:note]
Classes that have not been loaded will not appear in the combo box. Dropping a class into the combo box will force load the class.
[/REGION]

## Utilizing the Class Picker
The Class Picker is a mode that the Class Viewer can be switched to using only code. It is used for displaying a list of available classes such as for converting Static Meshes or selecting a parent for a new Blueprint. There are a number of ways to configure a Class Picker to show the desired results.

[REGION:tip]
When putting a Class Viewer or Class Picker into a location, make sure its height is limited in some manner. Thousands of classes may be in the Viewer/Picker and unconstrained it will stretch off the screen trying to render all of them. It will automatically display a scrollbar if all items cannot be displayed in the available area.
[/REGION]

### Class Picker Options
FClassViewerInitializationOptions, which is used for initializing a Class Picker, has a number of important options to take note of to utilize the Class Picker to its fullest.
	
* **Mode** - Two options for this: ClassPicker and ClassBrowsing. It is set to ClassPicker by default, ClassBrowsing will spawn what amounts to a normal Class Viewer. Most options do not function in a Class Viewer.
* **DisplayMode** - Two options for this: TreeView and ListView. The tree will show parent-child relationships between classes while the list is a simple list of displayed classes. 
	
#### General Filters
* **bIsActorsOnly** - Will limit the classes displayed to being children of AActor.
* **bIsPlaceableOnly** - Will limit the classes displayed to being placeable in the game world. bIsActorsOnly will be assumed _true_ if this value is _true_.
* **bIsBlueprintBaseOnly** - Will limit the classes displayed to Blueprint bases.
* **bShowUnloadedBlueprints** - Will show unloaded Blueprints despite their parents being filtered *out* due to custom filters.
* **bShowNoneOption** - Will display a "None" option in a Class Picker, does nothing with a Class Viewer. When an item is picked, a NULL class is passed.

[REGION:tip]
bIsBlueprintBaseOnly is useful for limiting the list to classes that Blueprints can be created from.
[/REGION]
