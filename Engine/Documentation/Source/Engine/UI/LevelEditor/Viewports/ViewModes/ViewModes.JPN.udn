INTSourceChangelist:3782314
Availability:Public
Title:ビューモード
Crumbs: %ROOT%, Engine, Engine/UI, Engine/UI/LevelEditor/Viewports
Description:ビューポート内で使用できるビューモードに関する説明
Version:4.9
topic-image:ViewModes_Topic.png


[VAR:WireSize]462[/VAR]

[REGION:fullwidth]
![](ViewMode_Header.png)
[/REGION]

[TOC(start:2 end:2)]



[EXCERPT:Intro]
エディタ ビューポートには視覚化モードが数多くあるので、シーンで処理中のデータ タイプを見やすくするだけでなく、エラーや予想外の結果を診断しやすくなっています。使用頻度の高いビュー モードにはそれぞれホットキーがついていますが、 **[View Mode]** メニュー内であればビューポートから全てにアクセスすることができます。

![](ViewModeMenu.png) ![](ViewModes_SubMenu_button.png)(h:273)
[/EXCERPT:Intro]

## Lit （ライティング有り）

[REGION:fullwidth]
![](VM_Lit.png)
[/REGION]

* ビューモードのホットキー：**Alt + 4**
* コンソール コマンド: `viewmode lit`

全てのマテリアルとライティングが適用されると、 **Lit** ビューモードでシーンの最終結果が表示されます。

## Unlit （ライティング無し）

[REGION:fullwidth]
![](VM_Unlit.png)
[/REGION]


* ビューモードのホットキー：**Alt + 3**
* コンソール コマンド: `viewmode unlit`

**Unlit** ビューモードは、ベース カラーのみを表示して、シーンから全てのライティングを取り除きます。


## Wireframe

[REGION:fullwidth]
![](VM_Wireframe.png)
[/REGION]

* ビューモードのホットキー：**Alt + 2**
* コンソール コマンド： `viewmode wireframe`

**Wireframe** ではシーンにポリゴンのエッジが全て表示されます。ブラシの場合、結果となるジオメトリが表示されます。

## Detail Lighting （詳細ライティング）

[REGION:fullwidth]
![](VM_DetailLighting.png)
[/REGION]

* ビューモードのホットキー：**Alt + 5**
* コンソール コマンド： `viewmode lit_detaillighting`

**Detail Lighting** は、オリジナル マテリアルの法線マップを使用して、シーン全体に中間色のマテリアルをアクティベートします。基本色が暗すぎたり、ごちゃごちゃしすぎでライティングが不明瞭になっている場合の分離に有効です。

## Lighting Only （ライティングのみ）

[REGION:fullwidth]
![](VM_LightingOnly.png)
[/REGION]

* ビューモードのホットキー：**Alt + 6**
* コンソール コマンド： `viewmode lightingonly`

**Lighting Only** はライティングにのみ影響を受ける中間色のマテリアルを表示します。法線マップは表示されない _Detail Lighting_ モードとは異なります。

## Light Complexity （ライトの複雑度）

[REGION:fullwidth]
![](VM_LightingComplexity.png)
[/REGION]

* ビューモードのホットキー：**Alt + 7**
* コンソール コマンド： `viewmode lightcomplexity`

Light Complexity はジオメトリに影響を与える非静的ライトの数を表示します。ライティング負荷の監視に有用な機能です。ライトがサーフェスに影響を与えれば与えるほど、描画負荷が高くなります。

|ライトの複雑度の色分け|||||||
|:---|:---:|:---:|:---:|:---:|:---:|:---:|
|**Color**|![](LightComplexity_0.gif)|![](LightComplexity_1.gif)|![](LightComplexity_2.gif)|![](LightComplexity_3.gif)|![](LightComplexity_4.gif)|![](LightComplexity_5.gif)|
|**サーフェスに影響を及ぼす光の数**|**0**|**1**|**2**|**3**|**4**|**5+**|


このカラー スキームは、シェーダー コードで定義されます。

## Shader Complexity （シェーダーの複雑度）


[REGION:fullwidth]
![](VM_ShaderPerf.png)
[/REGION]

* ビューモードのホットキー：**Alt + 8**
* コンソール コマンド： `viewmode shadercomplexity`

**Shader Complexity** モードでは、シーンの各ピクセルの計算に使用しているシェーダ命令数を視覚化します。そのシーンのパフォーマンス効率を知る目安として便利です。通常、ベースシーン全体のパフォーマンステストや、短時間での大量のオーバードローが原因でパフォーマンスのスパイクを引き起こしやすいパーティクル エフェクトの最適化にも使用します。

シェーダーの複雑度の計算には命令カウントのみが使用されます。これは常に正確というわけではありません。例えば、 16 のすべてがテクスチャルックアップ命令であるシェーダーの場合、 演算命令 16 のシェーダーより全てのプラットフォームで遅くなります。また、アンロールされていないループが含まれるシェーダーは、命令カウントでは正確に表されません。これは主に頂点シェーダーで起こる問題です。全体的に、命令カウントはほとんどのケースで便利な測定基準となります。

ビューモードでは、カラースペクトラムを使用してシーンにかかる負荷を表示します。緑から赤は「非常に低い」から「高い」への直線関係を表します。ピンクと白は、ピクセルが非常に高いピクセルになることを表します。白の領域が小さい場合は許容範囲ですが、画面の大部分が明るい赤または白になっている場合、パフォーマンスは下がります。

[REGION:imagetable]
|シェーダーの複雑度の色分け||||||||||
|[REGION:shadercomplexity sc_1][/REGION]|[REGION:shadercomplexity sc_2][/REGION]|[REGION:shadercomplexity sc_3][/REGION]|[REGION:shadercomplexity sc_4][/REGION]|[REGION:shadercomplexity sc_5][/REGION]|[REGION:shadercomplexity sc_6][/REGION]|[REGION:shadercomplexity sc_7][/REGION]|[REGION:shadercomplexity sc_8][/REGION]|[REGION:shadercomplexity sc_9][/REGION]|
|:---:|:---:|:---:|:--:-|:---:|:---:|:---:|:---:|:---:|
|**理想的**| | |**普通** | | |**高い**|**非常に高い**||
[/REGION]

[REGION:code]
+ShaderComplexityColors=(R=0.0,G=1.0,B=0.127,A=1.0)  
+ShaderComplexityColors=(R=0.0,G=1.0,B=0.0,A=1.0)  
+ShaderComplexityColors=(R=0.046,G=0.52,B=0.0,A=1.0)  
+ShaderComplexityColors=(R=0.215,G=0.215,B=0.0,A=1.0)  
+ShaderComplexityColors=(R=0.52,G=0.046,B=0.0,A=1.0)  
+ShaderComplexityColors=(R=0.7,G=0.0,B=0.0,A=1.0)  
+ShaderComplexityColors=(R=1.0,G=0.0,B=0.0,A=1.0)  
+ShaderComplexityColors=(R=1.0,G=0.0,B=0.5,A=1.0)  
+ShaderComplexityColors=(R=1.0,G=0.9,B=0.9,A=1.0)  
[/REGION]

## Stationary Light Overlap （固定ライト オーバーラップ）

[REGION:fullwidth]
![](VM_StationaryLightOverlap.png)
[/REGION]

* ビューモードのホットキー：**なし （デフォルトでメニューのみ）**


## Lightmap Density （ライトマップ密度）

[REGION:fullwidth]
![](VM_LightmapDensity.png)
[/REGION]

ビューモードのホットキー：**Alt + 0**

**Lightmap Density** モードは、テクスチャ マッピングされるオブジェクトのライトマップ密度を表示して、理想的/最大限の密度設定別に色分けして、実際のライトマップ テクセルへマッピングするグリッドを表示します。ライトマップのライティングを一定にするために、シーンのテクセル密度を均等にすることが重要です。

[REGION:imagetable]
|![](LightmapDensityLight.gif)|![](LightmapDensityMedium.gif)|![](LightmapDensityHeavy.gif)|
|---|---|---|
|テクセル密度が理想以下|テクセル密度が理想的|テクセル密度が最大限または理想以上|
[/REGION]

[REGION:note]
スケルタルメッシュが明るい茶色で表示されます。この計算では考慮されません。
[/REGION]
## 反射

[REGION:fullwidth]
![](VM_Reflections.png)
[/REGION]

* ビューモードのホットキー：**なし （デフォルトでメニューのみ）**

**Reflections** ビューモードは、平坦な法線と 0 のラフネスで全てのマテリアルをオーバーライド、つまりミラーリングします。反射の詳細を診断し、より詳細が必要な場所により多くのReflection Capture (反射キャプチャ) アクタを置けるようになります。

## LOD 彩色

[REGION:fullwidth]
![](ViewMode_LODColoration.png)
[/REGION]

* Console command: `viewmode LODColoration`

**LOD Coloration** ビュー モードでは、プリミティブの現在の LOD インデックスを表示します。これは、LOD の問題の診断や、どの距離で LOD が切り替わるかを確認するのに便利です。 

|LOD プリミティブの彩色|||||||||
|:---|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|
|**Color**|![](LODColoration_0.png)|![](LODColoration_1.png)|![](LODColoration_2.png)|![](LODColoration_3.png)|![](LODColoration_4.png)|![](LODColoration_5.png)|![](LODColoration_6.png)|![](LODColoration_7.png)|
|**LOD Primitive Color**|**0**|**1**|**2**|**3**|**4**|**5**|**6**|**7**|

[REGION:code]
+LODColorationColors=(R=1.0,G=1.0,B=1.0,A=1.0)     
+LODColorationColors=(R=1.0,G=0.0,B=0.0,A=1.0)     
+LODColorationColors=(R=0.0,G=1.0,B=0.0,A=1.0)     
+LODColorationColors=(R=0.0,G=0.0,B=1.0,A=1.0)     
+LODColorationColors=(R=1.0,G=1.0,B=0.0,A=1.0)     
+LODColorationColors=(R=1.0,G=0.0,B=1.0,A=1.0)     
+LODColorationColors=(R=0.0,G=1.0,B=1.0,A=1.0)     
+LODColorationColors=(R=0.5,G=0.0,B=0.5,A=1.0)     
[/REGION]

[Region: note]
デフォルトでは、LOD を 4 つだけ使用しますが、これはソース コードで拡張可能です。 
[/Region]

## Buffer の視覚化

![](GBufferMenu.png)

Buffer Visualization 領域では、グラフィック カード内の各バッファへアクセスすることができ、シーンの見た目に関する問題点を診断しやすくなります。[](Engine/Rendering/Materials\MaterialInputs) と [](Engine/Rendering/Materials\MaterialProperties) の基礎を理解しておくと、buffer visualization モードを十分に活用しやすくなると思います。

### Buffer Overview （バッファの概要）

[REGION:fullwidth]
![](Buffer_Overview.png)
[/REGION]

**Buffer Overview** visualization モードによりグラフィック カードの GBuffer から複数の画像を見ることが可能になります。画像の多くはマテリアル上の入力と関連付いています。つまり、たったひとつのマテリアル入力で、シーンの見た目を確認することができるのです。


### Base Color （基本色） 


[REGION:fullwidth]
![](Buffer_BaseColor.png)
[/REGION]

* ビューモードのホットキー：**なし （デフォルトでメニューのみ）**

**Base Color** モードで、シーンのマテリアルの基本色のみを見ることができます。


[COMMENT:none]
-
### Custom Depth （カスタム深度）
Not included until I can get an answer from Daniel 

[/COMMENT]


### Decal Mask （デカールマスク）

[REGION:fullwidth]
![](Buffer_DecalMask.png)
[/REGION]

* ビューモードのホットキー：**なし （デフォルトでメニューのみ）**

**Decal Mask** モードは、ディファード デカールを受けることが可能なサーフェスを全て白で表示します。不可能なオブジェクトは黒で表示されます。

### Diffuse Color （ディフューズ カラー）


[REGION:fullwidth]
![](VM_DiffuseColor.png)
[/REGION]

* ビューモードのホットキー：**なし （デフォルトでメニューのみ）**

**Diffuse Color** は基本色とマテリアルのアンビエントオクルージョン入力の結果を表示します。


[COMMENT:none]

### Final Image
Removed, since DanielW wasn't sure why it's here. 

"final image is the same as Lit
aka no visualization
not sure why it's in there
"

[/COMMENT]

### シェーディング モデル

[REGION:fullwidth]
![](Buffer_LightingModel.png)
[/REGION]


* ビューモードのホットキー：**なし （デフォルトでメニューのみ）**

**Shading Model** モードでは、シーンの各マテリアルの Shading Model プロパティの値が表示されます。 


|ライトの複雑度の色分け|||||
|:---|:---:|:---:|:---:|:---:|
|**Color**|![](LightModel_Lit.gif)|![](LightModel_Unlit.gif)|![](LightModel_Subsurface.gif)|![](LightModel_PreintegratedSkin.gif)|
|**マテリアルの Shading Model**|**Default Lit**|**Unlit**|**Subsurface**|**Preintegrated Skin**|


### Material AO （マテリアル AO）

[OBJECT:ComparisonSlider]
	[PARAM:before]
	![Scene in Lit Mode (Game View On)](Buffer_MaterialAO_1.png)(w:500)
	[/PARAM]
	[PARAM:after]
	![Scene in Buffer Material AO Mode (Game View On)](Buffer_MaterialAO_2.png)(w:500)
	[/PARAM]
[/OBJECT]

* ビューモードのホットキー：**なし （デフォルトでメニューのみ）**

**Material AO** visualization モードは、マテリアルの _Ambient Occlusion_ 入力に接続している全てのテクスチャリングまたは Material Expression ノードの結果を表示します。


### Metallic （メタリック）


[REGION:fullwidth]
![](Buffer_Metallic.png)
[/REGION]

* ビューモードのホットキー：**なし （デフォルトでメニューのみ）**

**Metallic** visualization モードは、マテリアルの _Metallic_ 入力に接続している全てのテクスチャリングまたは Material Expression ノードの結果を表示します。

注意：メタルには、 0 または 1 のメタリック値を使用し、その間の値にはなりません。レイヤー ブレンディングのために 0 と 1 の間の値が発生しますが、物理マテリアルは常にメタルかそうでないかになります。

### Opacity （オパシティ）

[OBJECT:ComparisonSlider]
	[PARAM:before]
	![Scene in Lit Mode](Buffer_Opacity_1.png)(w:500)
	[/PARAM]
	[PARAM:after]
	![Scene in Buffer Material Opacity Mode (Game View On)](Buffer_Opacity_2.png)(w:500)
	[/PARAM]
[/OBJECT]

* ビューモードのホットキー：**なし （デフォルトでメニューのみ）**

**Opacity** visualization モードは、マテリアルの Opacity 入力に接続している全てのテクスチャリングまたは Material Expression ノードの結果を表示します。上図では、キャラクターのドレッドロック (髪) に若干透明性があるのが分かると思います。

Opacity ビューモードは Opacity の使用中に不透明なマテリアルのみを表示します。 Opacity によってどれくらい遠くにライトが差し込むかを制御するので、サブサーフェス スキャタリング マテリアルには重要です。

### Roughness （ラフネス）


[REGION:fullwidth]
![](Buffer_Roughness.png)
[/REGION]


* ビューモードのホットキー：**なし （デフォルトでメニューのみ）**

**Roughness** visualization モードは、マテリアルの Roughness 入力に接続している全てのテクスチャリングまたは Material Expression ノードの結果を表示します。様々な反射が発生するところでラフネスが変化します。

### Scene Color （シーン カラー）

[REGION:fullwidth]
![](Buffer_SceneColor.png)
[/REGION]


* ビューモードのホットキー：**なし （デフォルトでメニューのみ）**

**Scene Color** はポストプロセスが完了する前にシーンの結果を表示します。つまり、露出、ブルーム、色補正、アンチ エイリアスの前という意味です。上図では、露出が明るくされていないため、シーンが非常に暗く表示されています。



### Scene Depth （シーン深度）



[REGION:fullwidth]
![](Buffer_SceneDepth.png)
[/REGION]


* ビューモードのホットキー：**なし （デフォルトでメニューのみ）**

**Scene Depth** は白 (最も遠く) から黒 (最も近く) への一定のグラディエントでのシーン深度を表示します。 

### Separate Translucency RGB


[REGION:fullwidth]
![](Buffer_SeparateTransRGB.png)
[/REGION]


* ビューモードのホットキー：**なし （デフォルトでメニューのみ）**

**Separate Translucency RGB** は、透過マテリアルであり、 Separate Translucency を使用しているすべてのマテリアルの色情報を表示します。


### Separate Translucency A


[REGION:fullwidth]
![](buffer_SeparateTransA.png)
[/REGION]


* ビューモードのホットキー：**なし （デフォルトでメニューのみ）**

**Separate Translucency A** は、透過マテリアルであり、 Separate Translucency を使用しているすべてのマテリアルのアルファ情報のみを表示します。

### Specular Color （スペキュラカラー）


[REGION:fullwidth]
![](Buffer_SpecColor.png)
[/REGION]

* ビューモードのホットキー：**なし （デフォルトでメニューのみ）**

**スペキュラ カラー** はマテリアルのスペキュラ反射に使用される色を表示します。通常は、基本色とメタリックの値の組み合わせから推測されます。

### Specular （スペキュラ）


[REGION:fullwidth]
![](buffer_Specular.png)
[/REGION]

* ビューモードのホットキー：**なし （デフォルトでメニューのみ）**

**Specular** は、マテリアルの Specular 入力に接続された全てのテクスチャリングまたは Material Expression ノードの結果を表示します。

### Subsurface Color （サブサーフェス カラー）


[REGION:fullwidth]
![](buffer_SubsurfColor.png)
[/REGION]

* ビューモードのホットキー：**なし （デフォルトでメニューのみ）**

**Subsurface Color** は、マテリアルの Subsurface Color 入力に接続された全てのテクスチャリングまたは Material Expression ノードの結果を表示します。

### World Normal （ワールド空間の法線）

[REGION:fullwidth]
![](buffer_WorldNormal.png)
[/REGION]

* ビューモードのホットキー：**なし （デフォルトでメニューのみ）**


**World Normal** は不透明なサーフェスのワールド空間法線を表示します。 


### アンビエント オクルージョン （AO）

[REGION:fullwidth]
![](buffer_AO.png)
[/REGION]

* ビューモードのホットキー：**なし （デフォルトでメニューのみ）**

**Ambient Occlusion (AO)** はシーンで行われたアンビエント オクルージョンの計算結果を表示します。この計算はエンジンがサーフェスと法線マップに基づいて行っているので、マテリアルに適用される AO テクスチャとは別のものです。


## Landscape Visualizers

### Normal （法線）

[REGION:fullwidth]
![](Landscape_Normal.png)
[/REGION]


**Normal** Landscape visualization モードは、正常な lit ステートのランドスケープを表示します。


### LOD

[REGION:fullwidth]
![](Landscape_LOD.png)
[/REGION]

**LOD** Landscape visualization モードは、現在の LOD ステートを表す色付けされたパネルにランドスケープを分解します。



### Layer Density （レイヤーの密度）

[REGION:fullwidth]
![](Landscape_LayerDensity.png)
[/REGION]

**Layer Density** Landscape visualization モードは、さらに多くのレイヤーがランドスケープに追加されると、カラーコードモードを緑から赤に変化させてランドスケープを表示します。



[COMMENT:none]

### Layer Debug （レイヤのデバッグ）
TODO

[/COMMENT]

## Exposure （露出）

[REGION:fullwidth]
[OBJECT:EmbeddedVideo]
[PARAMLITERAL:width]
640
[/PARAMLITERAL]
[PARAMLITERAL:height]
360
[/PARAMLITERAL]
[PARAMLITERAL:videoid]
yhjRn9xZUTs
[/PARAMLITERAL]
[/OBJECT]
[/REGION]

露出はシーンの全体的な明るさを制御するポストプロセス エフェクトです。この動作は固定値を設定するか、または自動のままにしておくことができます。


###自動と固定の露出

ポストプロセスで露出をアクティベートさせてゲームを再生する時、ちょうど人間の視覚が異なる明るさに順応していくのと同様に、明るい環境から暗い環境、またはその逆に移る場合にカメラが自動調整を行うことに気付くでしょう。たいていの場合、望んだ結果になります。ただし、絶えず変化を続ける事が妨げになるレベルがあれば、ビューを固定露出に設定することができます。明るい環境から暗い環境、またはその逆に移動する際、所定の露出で固定され自動変更は行われません。ただし、必要とする動作に対してライトが明るすぎたり暗すぎたりする状態も多くなってしまいます。
