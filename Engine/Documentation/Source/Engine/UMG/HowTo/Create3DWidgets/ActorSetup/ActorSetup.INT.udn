Availability:Docs
Title:2. Setting up the Actor Blueprint
Crumbs: %ROOT%, Engine, Engine/UMG, Engine/UMG/HowTo, Engine\UMG\HowTo\Create3DWidgets
Description:Here we use an Actor Blueprint with a Widget Component to display our Widget Blueprint in 3D world space. 
Parent:Engine/UMG/HowTo/Create3DWidgets
Related: Engine/UMG
Related: Engine/UMG/UserGuide
Related: Engine/Blueprints
Version: 4.10
SkillLevel: Intermediate
checkpoint: umg_create_3d_howto
tags:UMG UI Designer
Order: 2

[VAR:Steps]
[OBJECT:Navigation]
	[PARAM:previous]
		[Previous Step](Engine\UMG\HowTo\Create3DWidgets\WidgetSetup "%Engine\UMG\HowTo\Create3DWidgets\WidgetSetup:title%")
	[/PARAM]
	[PARAM:current]
	[/PARAM]
	[PARAM:home]
		[Creating 3D Widgets](Engine\UMG\HowTo\Create3DWidgets)
	[/PARAM]
	[PARAM:next]
	[/PARAM]
[/OBJECT]
[/VAR]



Now that we have created a Widget Blueprint that we want to display, we can create a **Widget Component** inside any Blueprint and place that Blueprint in our level to display in in the game world. 
There are also settings on the Widget Component to determine if we want to display the Widget in World or Screen space (with World being the default option). 

## Steps

1.  In the **Content Browser**, click the **Add New** Button and select **Blueprint Class**. 

	![](Actor_1.png)

1.  Select **Actor** from the pop-up menu that appears, then name it _3D_Menu_ or a similar name. 

	![](Actor_2.png)

1.  **Double-click** on the new Blueprint to open it up in the Blueprint Editor. 

	![](Actor_3.png)

1.	Click the **Add Component** button, then search for and add the **Widget** type component. 

	![](Actor_4.png)

1.	Name the component _MainMenu_, then click the **Compile** and **Save** buttons. 

1.	In the **Details** panel for the Widget component, under **Widget Class**, set it to use the **MainMenu** Widget Blueprint. 

	![](Actor_5.png)

1.	You can adjust the **Draw Size** settings to increase the scale of the widget. 

	![](Actor_6.png)

	Here we have set the **X** to **1200** and left the **Y** value at **500**. 

1.	There is also a **Max Interaction** option which will determine how far away the player can be to interact with the widget. 

	![](Actor_7.png)

	We have increased the **Max Interaction** to **2000**. 

1.	Also in the **Details** panel for the Widget, under **Rendering**, check the **Two Sided** option. 

	![](Actor_8.png)

	This will make the Widget visible from behind instead of invisible. 

1.	Click the **Event Graph** tab. 

	![](Actor_9.png)

1.	**Right-click** in the graph and search for then add the **Get Player Controller** node. 

	![](Actor_10.png)

1.	**Right-click** in the graph and search for then add the **Set Input Mode Game and UI** node. 

	![](Actor_11.png)

1.	Connect each of the nodes to the existing **Event Begin Play** node as shown below. 

	![](Actor_12.png)

1.	Hold **Ctrl** and drag in the **MainMenu** component into the graph window. 

	![](Actor_13.png)

1.	Drag off the **MainMenu** component and **Get User Widget Object** and connect as shown below. 

	![](Actor_14.png)

1.	Drag off the **GetPlayerController** and **Set Show Mouse Cursor** to **True** and connect as shown below. 

	![](Actor_15.png)

	This will cause us to focus on the Widget we have specified and enable the mouse cursor so we can see where we are pointing. 

1.	Click **Compile** and **Save** then close the Blueprint. 
	
1.	In the **Content Browser**, drag the Blueprint into your level. 

	![](Actor_16..png)

	You can use the **Move (W)**, **Rotate (E)**, and **Scale (R)** keys to position the UI where you want in the world. 


## End Result

[OBJECT:EmbeddedVideo]
[PARAMLITERAL:width]
640
[/PARAMLITERAL]
[PARAMLITERAL:height]
360
[/PARAMLITERAL]
[PARAMLITERAL:videoid]
zrYjngjYrEI
[/PARAMLITERAL]
[/OBJECT]

When you play in the editor, you should now see the UI widget you created in UMG appear in 3D world space. You should also be able to move the mouse over the menu items to change which one is currently highlighted. This is an example of how you can set up an interactive 3D menu but you could take the same process for creating other forms of 3D widgets such as health meters, keypads, or other interactive UI elements you want to appear in the game world. 
















