INTSourceChangelist:3782314
Availability:Public
Title:3.アクタのセットアップとテスト
Crumbs: %ROOT%, Engine, Engine/UMG, Engine/UMG/HowTo
Description:UMG で 3D 仮想キーボードを作成し、インタラクションする方法を説明します。 
Related:Engine\UMG\UserGuide\WidgetInteraction\
Related:Engine/UMG
Related:Engine/UMG/UserGuide
SkillLevel:Advanced
tags:UMG UI Designer
Order:3

[VAR:Steps]
[OBJECT:Navigation]
	[PARAM:previous]
		[前のステップ](Engine\UMG\HowTo\VirtualKeyboards\WidgetSetup "%Engine\UMG\HowTo\VirtualKeyboards\WidgetSetup:title%")
	[/PARAM]
	[PARAM:current]
	[/PARAM]
	[PARAM:home]
		[仮想キーボードを作成する](Engine\UMG\HowTo\VirtualKeyboards)
	[/PARAM]
	[PARAM:next]
	[/PARAM]
[/OBJECT]
[/VAR]



この最後のセクションでは、Widget ブループリントを **Widget** コンポーネントとしてアクタに追加し、プレイヤーが **Enter** ボタンをクリックすると何が起こるかを定義し、入力されたテキストが **GoalText** と同じになるかをチェックします。 
何もかも配置した状態で、テストして最終結果を見てみます。コードが正しければ  **Success** と画面に表示され、コードに誤りがあれば **Wrong Code** と表示されます。  


## ステップ

1.	**KeypadDisplay** ブループリントを開き、クラスを **[KeypadDisplayWB]** と **[Draw at Desired Size]** に設定した **Widget** コンポーネントを追加します。 

	![](Keypad15.png)

	[Draw at Desired Size] は、レンダー ターゲットを Widget ブループリント内で必要なサイズに簡単に自動的にマッチさせる方法です。

1.	**Keypad** ブループリントを開き、クラスを **KeypadWB** と **Draw at Desired Size** に設定した **Widget** コンポーネントを追加します。 

1.	この Widget コンポーネントの **[Window Focusable]** オプションのチェックを外します。 

	![](Keypad16.png)

	このコンポーネントによって、Keypad Display ウィジェットからフォーカスが外されないようにするため、チェックを外す必要があります。 

1.	**Keypad** 内で、**Enable Hit Testing** を false に設定した **WidgetInteraction** コンポーネントを追加します。 

	![](Keypad17.png) 

	この WidgetInteraction コンポーネントを追加したのは、プレイヤー キャラクターでこの WidgetInteraction コンポーネントを参照する必要をなくすためです。Hit Testing を無効にしたのは、ホーバー エフェクトを生成しないようにするためです。デフォルトでは、WidgetInteraction コンポーネントは、作成時に **Virtual User Index 0** に設定されており、すべてのコンポーネントは Virtual User Index ID を使用して通信します。プレイヤー キャラクターの WidgetInteraction コンポーネントも、Virtual User Index 0 を使用しているため、それを参照することと同じです。

1.	**Keypad** のグラフで、**Event Begin Play** から、**Widget** コンポーネントと **Get User Widget Object**、そして **Cast to KeypadWB** を取ります。 

	![](Keypad18.png)

1.	**As Keypad WB** ピンから **Widget Interaction を Set** し、ステップ 4 の **WidgetInteraction** コンポーネントを渡します。 

1.	**As Keypad WB** ピンから、**Assign Enter Pressed** を呼び出します。これにより、**Enter Pressed** Custom Event を作ります。 

	![](Keypad19.png)

	Enter ボタンをクリックすると、この Custom Event が呼び出されます。これを使って、正しいコードが入力されたかをチェックすることができます。 

1.	**TargetDisplay** と呼ばれる **Keypad Display** Actor 型の **Variable** を作成して **Editable** に設定します。 

	![](Keypad20.png)

1.	**GoalText** と呼ばれる **Text** 型の **Variable** を作成します。次に **Compile** し、**Default Value** を **1212** に設定します。 

	![](Keypad21.png)

1.	**Ctrl** キーを押しながら、**TargetDisplay** をドラッグして、**Widget** と **User Widget Object** を get し、**Cast to KeypadDisplayWB** につなげます。 

	![](Keypad22.png)

1.	**As Keypad Display WB** ピンから、**Editable Text Box** と **GetText(Text Box)** を get し、**Goal Text** と **Equals (等しい)** かどうかを確認します。 

	![](Keypad23.png)

1.	2 つの **Print String** を持つ **Branch** を追加します。**True** (Success を使用) と **False** (Wrong Code を使用) の 2 つです。 

	![](Keypad24.png)

1.	**Keypad** ブループリントと **KeypadDisplay** ブループリントをレベルにドラッグして、必要に応じて回転/配置します。 

1.	**Keypad** アクタの **[Details]** パネルで、**Target Display** 変数をレベル内の **KeypadDisplay** に設定します。 

	![](Keypad25.png)

1.	レベルでプレイします。 

## 最終結果

キーパッド表示にアプローチし、その中で **右クリック** して、フォーカスします。ボタンを見て、**右クリック** し、**Send Key Char** コマンドを発行し、その値をディスプレイに渡します。 
右マウスボタンを使ってレベル内のこのウィジェットとインタラクションしますが、代わりにゲームパッドやモーション コントローラーのボタンを押すようにすることもできます。 

[OBJECT:EmbeddedVideo]
[PARAMLITERAL:width]
640
[/PARAMLITERAL]
[PARAMLITERAL:height]
360
[/PARAMLITERAL]
[PARAMLITERAL:videoid]
N2Fo4izRgh0
[/PARAMLITERAL]
[/OBJECT]

この例では、正しいコードが入力されたか否かを単に画面に表示していますが、ドアを開く何らかのイベントを発行したり、敵や他のゲームプレイ関連のイベントをスポーンさせることもできます。 



