INTSourceChangelist:3782314
Availability:Public
Title:2.Widget ブループリントの設定
Crumbs: %ROOT%, Engine, Engine/UMG, Engine/UMG/HowTo
Description:レベルに現れるキーパッドとキーパッド表示ウィジェットを作成します。 
SkillLevel:Advanced
tags:UMG UI Designer
Order:2

[VAR:Steps]
[OBJECT:Navigation]
	[PARAM:previous]
		[前のステップ](Engine\UMG\HowTo\VirtualKeyboards\CharacterSetup "%Engine\UMG\HowTo\VirtualKeyboards\CharacterSetup:title%")
	[/PARAM]
	[PARAM:current]
	[/PARAM]
	[PARAM:home]
		[仮想キーボードを作成する](Engine\UMG\HowTo\VirtualKeyboards)
	[/PARAM]
	[PARAM:next]
		[次のステップ](Engine\UMG\HowTo\VirtualKeyboards\ActorSetup "%Engine\UMG\HowTo\VirtualKeyboards\ActorSetup:title%")
	[/PARAM]
[/OBJECT]
[/VAR]



このステップでは、インタラクティブな UI Widget のレイアウトを作成し、ボタンをクリックすると何が起こるかをスクリプティングします。 


## ステップ

1.	**KeypadDisplayWB** を開き、その階層にある **Canvas Panel** を **Size Box** でラップされた **TextBox** と置き換えます。 

	![](Keypad04a.png)

1.	この **Size Box** を、**Desired on Screen** に設定し、**Width** と **Height** を **100x50** にオーバーライドします。 

	![](Keypad04.png)

1.	この **Text Box** の **Hint Text** を **1212** に設定し、**Font Size** を **28** に調整します。 

	![](Keypad05.png)

	例えば、このプレイヤーはキーパッドを使って 1212 というテキストを入力し、エントリが成功したことを示さなければなりませんが、お好きな値を使用することができます。 

1.	**KeypadWB** を開き、この **階層** を設定して以下のように **0**、 **1**、**2** というテキストを持つ 3 つのボタンを作成するようにします。  

	![](Keypad06.png)

	階層の各ボタンで **F2** を押して、どのボタンであるかを示すように名前を変更することができます。 

1.	テキストが上にある 2 つの **Button** を持つ 2 つめの **Horizontal Box** を追加します。テキストのひとつは **Del** でもうひとつは **Ent** に設定されています。 

	![](Keypad07.png)

	キーパッドには 3 つの数字のボタンだけがあります。残りの 2 つは、エントリの削除 (**Del**) またはコミット (**Ent**) です。 

1.	**Ctrl** キーを押しながら、各ボタンを選択し、それぞれに対して **[Is Focusable]** オプションを **False** に設定します。 

	![](Keypad08.png)

	この設定が機能するには、インタラクションする他のウィジェットが Keypad Display ウィジェットからフォーカスを奪わないようにします。これらを true の設定のままにし、あるボタンをクリックすると、Keypad Display からフォーカスが奪われて、そのボタンにシフトし、キー押下と値を Keypad Display に渡さないようになります。 

1.	**グラフ** で、それぞれのボタンに **OnClicked** Events を追加します。 

	![](Keypad09.png)

1.	2 つの **Variable** を作成します。**CharToSend** という **String** 型と、**WidgetInteraction** という **WidgetInteraction コンポーネント** です。 

	![](Keypad10.png)

1.	**Alt** キーを押しながら **CharToSend** をドラッグし、**OnClicked** Events に接続し、変数を以下のように設定します。 

	![](Keypad11.png)

1.	**Ctrl** キーを押しながら **WidgetInteraction** をドラッグし、そこから **Send Key Char** そして、 **CharToSend** Event と **OnClicked** Event を接続します。 

	![](Keypad12.png)

	ここでは、**Send Key Char** 関数を使用します。スレートのテキスト ボックスは、直接送られるキーを取得しないからです。例えば、A キーが押されたことを認識せず、A を送ります。代わりに Send Char をリッスンし、こうすることで下位レベルのシステム オペレーティング コードが、A キーが押されたときに Shift が押されたか、または A キーが押されたときに Caps Lock がオンになっているかを判断することができます。 

1.	**Del** OnClicked Event から、**WidgetInteraction** 変数で **Backspace** に設定された **Press and Release Key** を使用します。 

	![](Keypad13.png)

1.	**EnterPressed** という **Event Dispatcher** を作成し、それを **OnClicked(Ent)** から呼び出します。 

	![](Keypad14.png)


## 最終結果

Widget ブループリントがキーパッドとキーパッドのディスプレイを表示するように設定されました。次に、これらを Widget コンポーネントとして Actor ブループリントに追加し、レベル内で表示させます。 
次のステップの終わりまで到達すると、システムをテストし、ゲームプレイ中に両方のエレメントとインタラクションできるようになります。 




