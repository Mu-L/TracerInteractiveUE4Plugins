Availability:Public
Title:Character
Crumbs:%ROOT%, Gameplay, Gameplay/Framework, Gameplay/Framework/Pawn
Description:A Character is a Pawn which has some basic bipedal movement functionality by default.
Related: Gameplay/Framework/Pawn
Related: Gameplay/Framework/Controller
Related: Gameplay/Framework/GameMode
Related: Engine/Animation/RootMotion
Related: Engine/Animation/CharacterSetupOverview
Related: Gameplay/HowTo/CharacterMovement
Version: 4.9

With the addition of a `CharacterMovementComponent`, a `CapsuleComponent`, and a `SkeletalMeshComponent`, the [Pawn](Gameplay/Framework/Controller) class is extended into the highly-featured **Character** class.
A Character is designed for a vertically-oriented player representation that can walk, run, jump, fly, and swim through the world. This class also contains 
implementations of basic networking and input models.  

### SkeletalMeshComponent
Unlike Pawns, Characters come with a `SkeletalMeshComponent` to enable advanced animations that use a skeleton. It is possible for other Skeletal Meshes to be added to Character-derived classes,
but this is the main Skeletal Mesh associated with the Character. For more on Skeletal Meshes, see: 

## Skeletal Mesh Topics

[REGION:buttonlist]
* [](Engine/Actors/SkeletalMeshActors "%Engine/Actors/SkeletalMeshActors:description%")
* [](Engine/Animation "%Engine/Animation:description%") 
[/REGION]



### CapsuleComponent
The `CapsuleComponent` is used for movement collision. In order to calculate complicated geometries for the `CharacterMovementComponent`, there is an assumption that the collision component in the Character class is a vertically-oriented capsule. For more on Collision, see: 

## Capsule Component Topics

[REGION:buttonlist]
* [](Engine/Physics/Collision "%Engine/Physics/Collision:description%")
* [](Engine/Content/Types/StaticMeshes/HowTo/SettingCollision "%Engine/Content/Types/StaticMeshes/HowTo/SettingCollision:description%")
[/REGION]

### CharacterMovementComponent
The `CharacterMovementComponent` allows avatars not using rigid body physics to move by walking, running, jumping, flying, falling, and swimming. 
It is specific to Characters, and cannot be implemented by any other class. Properties that can be set in the `CharacterMovementComponent` include
values for falling and walking friction, speeds for travel through air and water and across land, buoyancy, gravity scale, and the physics forces the
Character can exert on Physics objects. The `CharacterMovementComponent` also includes root motion parameters that come from the animation and are already
transformed in world space, ready for use by physics. 






