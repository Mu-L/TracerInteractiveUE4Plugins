INTSourceChangelist:3429254
Availability: Public
Title:8.动画蓝图 - 跳跃状态
Crumbs: %ROOT%, Gameplay, Gameplay\HowTo\CharacterMovement, Gameplay\HowTo\CharacterMovement\Blueprints
Description:继续我们的动画蓝图设置，在这里我们设置跳跃的条件。
Version: 4.9
Parent:Gameplay/HowTo/CharacterMovement/Blueprints
SkillLevel:Advanced
type:how-to
type:multi-step
order:8

[NAV]

接下来，我们配置 **State Machine** 内的 **Jump** 状态。我们将有两个跳跃状态，一个是当玩家站立不动并按下跳跃键时，另一个是当玩家活动时（慢跑、蹲走或行走）的状态。我们将使用两个不同的动画，一个用于静止，一个用于活动。 

1.	在状态机图形中，从 **Asset Browser** 拖入 **Jump_From_Jog** 动画。 

	![](AnimBP_Jump1.png)

1.	创建 **Jog_BS** 和 **Jump_From_Jog** 间的到/从 **Transitions**。 

1.	打开从 **Jog_BS** 到 **Jump_From_Jog** 的 **Transition Rule** 并创建以下图形。 

	![](AnimBP_Jump2.png)

1.	返回状态机图形，并打开从 **Jump_From_Jog** 到 **Jog_BS** 的 **Transition Rule**。 

1.	在 **Transition Rule** 图形内，**Right-click** 并添加 **TimeRemaining for 'Jump_From_Jog'** 节点。 

	![](AnimBP_Jump3.png)

1.	重建以下图形，以完成规则​​。 

	![](AnimBP_Jump4.png)

	这使我们能查看从慢跑到跳跃动画的剩余时间是多少，以及它是否小于或等于 0.1，我们将允许从跳跃到慢跑混合空间的过渡。这是确保跳跃动画在过渡到其它状态前已经完成的便利方式。 

1.	返回状态机图形，并创建 **Walk_BS** 和 **Jump_From_Jog** 间的到/从 **Transitions**。 

	![](AnimBP_Jump5.png)

1.	打开从 **Walk_BS** 到 **Jump_From_Jog** 的 **Transition Rule** 并重建以下图形。 

	![](AnimBP_Jump6.png)

1.	返回状态机图形，并打开从 **Jump_From_Jog** 到 **Walk_BS** 的 **Transition Rule**。 

1.	在 **Transition Rule** 内重建以下图形。 

	![](AnimBP_Jump7.png)

1.	返回状态机图形，然后从 **Asset Browser** 拖入 **Jump_From_Stand** 动画。 

	![](AnimBP_JumpStand1.png)

1.	创建 **Idle_Rifle_Hip** 和 **Jump_From_Stand** 间的到/从 **Transitions**。 

1.	打开从 **Idle_Rifle_Hip** 到 **Jump_From_Stand** 的 **Transition Rule**。 

	![](AnimBP_JumpStand2.png)

1.	在 **Transition Rule** 内重建以下图形。 

	![](AnimBP_JumpStand3.png)

	在这里，我们检查玩家是否已按下跳跃键并且他们目前未蹲伏。 

1.	返回状态机图形，然后打开从 **Jump_From_Stand** 到 **Idle_Rifle_Hip** 的 **Transition Rule**。

1.	在 **Transition Rule** 内重建以下图形。 

	![](AnimBP_JumpStand4.png)

	跳跃动画完成后，这将使人物返回闲置。 

1.	**Compile** 并 **Save** 动画蓝图。

[NAV]