Availability: Public
Title:8. Animation Blueprint - Jump States
Crumbs: %ROOT%, Gameplay, Gameplay\HowTo\CharacterMovement, Gameplay\HowTo\CharacterMovement\Blueprints
Description:Moving on in our Animation Blueprint setup, here we set up the conditions for Jumping. 
Version: 4.9
Parent:Gameplay/HowTo/CharacterMovement/Blueprints
SkillLevel:Advanced
type:how-to
type:multi-step
order:8

[NAV]

Next, we configure the **Jump** states inside the **State Machine**. We are going to have two Jump states, one for when the player is standing still and presses the Jump key and another for when the player is moving (Jogging, Crouch Walking, or Walking). We will use two different animations, one for stationary and one for movement. 

1.	In the State Machine graph, drag in the **Jump_From_Jog** animation from the **Asset Browser**. 

	![](AnimBP_Jump1.png)

1.	Create to/from **Transitions** between **Jog_BS** and **Jump_From_Jog**. 

1.	Open the **Transition Rule** for **Jog_BS** to **Jump_From_Jog** and create the graph below. 

	![](AnimBP_Jump2.png)

1.	Return to the State Machine graph and open the **Transition Rule** for **Jump_From_Jog** to **Jog_BS**. 

1.	Inside the **Transition Rule** graph, **Right-click** and add the **TimeRemaining for 'Jump_From_Jog'** node. 

	![](AnimBP_Jump3.png)

1.	Finish the rule by recreating the graph below. 

	![](AnimBP_Jump4.png)

	This allows us to check what the remaining time is on the Jump from Jog animation and if it is less than or equal to 0.1, we will allow the transition from the jump to the Jog Blend Space. This is a handy way of making sure that the jump animation has finished before transitioning to another state. 

1.	Return to the State Machine graph and create to/from **Transitions** between **Walk_BS** and **Jump_From_Jog**. 

	![](AnimBP_Jump5.png)

1.	Open the **Transition Rule** for **Walk_BS** to **Jump_From_Jog** and recreate the graph below. 

	![](AnimBP_Jump6.png)

1.	Return to the State Machine graph and open the **Transition Rule** for **Jump_From_Jog** to **Walk_BS**. 

1.	Inside the **Transition Rule** recreate the graph below. 

	![](AnimBP_Jump7.png)

1.	Return to the State Machine graph, then drag in the **Jump_From_Stand** animation from the **Asset Browser**. 

	![](AnimBP_JumpStand1.png)

1.	Create to/from **Transitions** between **Idle_Rifle_Hip** and **Jump_From_Stand**. 

1.	Open the **Transition Rule** for **Idle_Rifle_Hip** to **Jump_From_Stand**. 

	![](AnimBP_JumpStand2.png)

1.	Inside the **Transition Rule**, recreate the graph below. 

	![](AnimBP_JumpStand3.png)

	Here we are checking to see if the player has pressed the jump key and that they are not currently crouched. 

1.	Return to the State Machine Graph, then open the **Transition Rule** for **Jump_From_Stand** to **Idle_Rifle_Hip**.

1.	Inside the **Transition Rule** recreate the graph below. 

	![](AnimBP_JumpStand4.png)

	This will return the character to idle once the jump animation has finished. 

1.	**Compile** and **Save** the Animation Blueprint.

[NAV]