INTSourceChangelist:2701304
Availability: Public
Title:在蓝图中使用远程调用函数
Crumbs: %ROOT%, Gameplay, Gameplay\HowTo\Networking\ReplicateFunction
Description:在多人游戏中使用蓝图复制函数的指南。 
Related: Engine/Blueprints
Related: Resources/ContentExamples/Networking
Version: 4.9
SkillLevel: Advanced

[TOC (start:2 end:2)]

本页将向您展示如何设置和使用不同形式的 **Replicated Functions**。 

远程调用函数主要包括 3 种类型： **Multicast 广播**、 **Run on Server 在服务端执行** 和 **Run on owning Client 在客户端执行**。
广播函数在服务器上调用和执行，然后自动转发给客户端。 在服务端执行的函数由客户端调用，然后仅在服务器上执行。 在客户端执行的函数由服务器调用，然后仅在自有客户端上执行。

## Multicast 广播

 _在此示例中，我们使用的是 **包含起始资源的第三人称设计模板创建的项目**。_

 以下步骤说明了如何设置 **Multicast** 广播函数。 
 
1.	单击 **Play** 旁边的向下箭头并将 **Number of Players** 更改为 **4** 以增加玩家数量。 

	[REGION:raw]
	![](HowTo2.png)
	[/REGION]
	
	[REGION:tip]
	还可以在 **Advanced Settings** 选项中更改为多玩家生成的窗口的大小。 
	[/REGION]

1.	在**Content Browser** 中， **Content/ThirdPersonBP/Blueprints** 下的打开 **ThirdPersonCharacter** 蓝图。 

1.	在图表中 **右键**，并添加一个 **Space Bar** 按键事件和一个 **Spawn Actor from Class** 节点。 

1.	**右键** 并添加一个 **Get Actor Transform** 节点，然后与设置为 **Blueprint_Effect_Fire** 的 **Class** 连接，如下所示。 

	![](HowTo3.png)

	按下时，将在玩家角色位置生成喷火效果。 

1.	**编译** 并 **保存**，关闭蓝图，然后单击 **运行** 按钮在编辑器中开始游戏。 

1.	在游戏中，定位服务器所在的窗口，然后按 **Space Bar** 跳转。 
		
	![](HowTo4.png)
	
	您将会发现，只有服务器窗口才会生成喷火效果，其他玩家看不到生成的效果。 
	试图与其他玩家一起跳转时，他们都只能在本地生成喷火效果，彼此并不知道已经生成喷火效果。 
	此外，我们未将喷火效果附加给人物，所以只有在按 **Space Bar** 时，人物所在的位置才会喷火。 

	[REGION:tip]
	您可以按 **Shift + F1** 获取鼠标控制权，并在多人测试时在多个游戏窗口中跳转。 
	[/REGION]

1.	在 **ThirdPersonCharacter** 蓝图中，对于 **Space Bar** 节点 **点击右键**，然后断开连接。 

1.	**右键** 并搜索，然后添加 **Custom Event** 并调用 **MulticastSpawn** 事件。 

1.	单击自定义事件，然后在 **Details** 面板中将 **Replicates** 下拉菜单设置为 **Multicast**，并按如下所示连接。 

	![](HowTo5.png)

	最后几步之后就会出现上述设置自定义事件来使用 **Multicast** 复制函数的情况。 

1.	从 **Space Bar** 按键事件连出来，搜索并添加调用函数**MulticastSpawn**。 

	![](HowTo6.png)

	[REGION:note]
	如果未找到创建的自定义事件，则单击 **编译** 按钮并再次搜索。 
	[/REGION]

1.	**编译** 并 **保存**，关闭蓝图，然后单击 **运行** 按钮在编辑器中开始游戏。 

1.	在游戏中，定位服务器所在的窗口，然后按 **Space Bar** 跳转。 

	![](HowTo7.png)

	您现在应该可以看到，当您与服务器上的玩家一起按跳转时，服务器和所有客户端上都将生成喷火效果。试图与其他玩家一起跳转仍只能在本地喷火，
	因为我们并未告知服务器客户端已生成该效果。接下来的 Run on Server 部分将向您展示如何将其设置。 


## Run On Server 在服务器上运行

 _在此示例中，我们继续以上 **Multicast Replication** 示例。_

 以下步骤展示了如何设置 **Run on Server** 复制函数。 
 
1.	在 **Content/ThirdPersonBP/Blueprints** 下的 **Content Browser** 中，打开 **ThirdPersonCharacter** 蓝图。 

1.	选择 **MulticastSpawn** 自定义事件，然后将 **Replicates** 下拉选项更改为 **Run on Server**。 

	![](HowTo8.png)
	
	为了保持一致，我们还将 **Graph Node** 的名称更新为了 **Run On Server**。 

1.	**编译** 并 **保存**，关闭蓝图，然后单击 **运行** 按钮在编辑器中开始游戏。 

1.	在游戏中，定位非服务器的任何游戏窗口，然后按 **Space Bar** 跳转。 

	![](HowTo9.png)

	注意，喷火效果只在服务器上生成，无论哪个玩家跳转，其他玩家都看不到，只有服务器端才能看到。尽管我们说过该脚本应在服务器上执行，而事实也是如此，
	但我们需确保该效果已设置为复制，以便其传递给所有客户端和服务器。 

1.	在 **Content/StarterContent/Blueprints** 文件夹中，打开 **Blueprint_Effect_Fire** 蓝图。 

1.	从主工具栏中选择 **Class Defaults** 后，在 **Details** 面板中，选中 **Replicates** 复选框。 

	![](HowTo10.png)

1.	**编译** 并 **保存**，关闭蓝图，然后单击 **运行** 按钮在编辑器中开始游戏。 

1.	在游戏中，定位非服务器的任何游戏窗口，然后按 **Space Bar** 跳转。 

	![](HowTo11.png)

	我们已经向服务器发送消息，以在服务器运行部分脚本来生成 Actor，由于此 Actor 已设置为复制，因此我们可以在所有客户端上看到它。
	

## Run On Owning Client 在所有权的客户端上运行

_在此示例中，我们继续以上 **Multicast Replication** 示例。_

在此示例中，我们要做到是创建一个发生服务器事件时仅在特定客户端上更新的变量。 

 以下步骤展示了如何设置 **Run on owning Client** 复制函数。 
 
1.	在 **Content/ThirdPersonBP/Blueprints** 文件夹中，打开 **ThirdPersonCharacter** 蓝图。 

1.	在 **MyBlueprint** 窗口中，创建新变量并将其命名为 **Inventory**，然后单击 **Compile**。 

	![](Inventory.png)

1.	在此变量的 **Details** 面板中，将其设置为 **String**、**Editable** 和 **Replicated**，然后为 **Default Value** 输入 **Empty**。 

	![](HowTo12.png)

	将此变量设置为 **Replicated** 可确保其通过网络复制到所连接的机器上。我们将使用此变量模拟人物在多人游戏中进入触发卷时收集道具，退出触发卷时删除道具。 
	
1.	添加一个与 **Print String** 连接的 **P** 按键事件，然后按住 **Control** 并拖入 **Inventory** 变量，并按所示方式连接。 

	![](HowTo13.png)

1.	**Compile** 并 **Save**，然后关闭 **ThirdPersonCharacter** 蓝图。 

1.	从 **Basic** 下的 **Modes** 窗口中，将 **Box Trigger** 拖入您的关卡。 

	![](HowTo14.png)

	当玩家人物进入触发器时，我们将更新创建的变量，但仅在进入触发器盒的客户端上更新。 

1.	在 **Rendering** 下 **Box Trigger** 的 **Details** 面板中，取消选中 **Actor Hidden In Game**。 

	![](UnHideBox.png)

	在编辑器中玩游戏时，这可让我们在关卡中看到此盒，使得测试更加轻松。 

1.	单击 **Box Trigger** 将其选中，然后从主工具栏打开**Level Blueprint**。 

	![](HowTo15.png)

1.	在图表中 **右键** ，然后搜索 **Begin Overlap** 并选择 **Add On Actor Begin Overlap** 事件。 

	![](HowTo16.png)

1.	重复上一步，但搜索并添加 **Add On Actor End Overlap** 事件。 

1.	将每个节点连接到 **Switch Has Authority** 节点。 

	![](HowTo17.png)

	Switch Has Authority 节点用于检查当前正在运行的脚本正在从何处执行，然后基于脚本是在网络授权者（通常为服务器）还是远程机器（客户端）上运行将其分成两个不同的方向。 
	
	通常，您会对只希望在服务器上发生的事情使用授权者（这些通常为游戏关键性事件，例如调整玩家的生命值或赠送奖励或掠夺物品，因为您不想让客户端确定这些更改何时发生，以防作弊）。 

	在此示例中，我们将更新文本变量，此变量也完全可以是包含玩家生命值的变量，或所收集道具的变量。 

1.	在图表中 **右键** 并添加一个称作 **Add Item** 的 **Custom Event** 节点。 

1.	将 Replicates 选项设置为 **Run on owning Client**，并添加称作 **Character** 的输入，将其设置为 **Actor**。 

	![](HowTo18.png)

	[REGION:note]
	创建节点后，如果您看到错误警告，请单击 **Compile** 按钮删除错误。 
	[/REGION]

1.	创建另一个称作 **Remove Item** 的 **Custom Event**，其设置与 **Add Item** 事件的设置相同。 

1.	如下所示，从两个重叠事件连出来，接 **Add Item** 和 Remove Item 节点。 

	![](HowTo19.png)

	这里我们指的是，当重叠触发器时，如果重叠发生在服务器上，在服务器上运行 **Add Item** 事件，并将它复制到自有客户端（即重叠触发器的人物所在的客户端）。“它”是指 **Add Item** 启动并仅在服务器上执行但复制到客户端时所调用的脚本。当人物退出触发器盒时 — 这也由服务器决定，在服务器上运行 **Remove Item** 事件，并将其复制到自有客户端。 

1.	从 **Add Item** 事件连出来，添加 **Print String** （文本设置为 **Item Added** ），然后拖开 **Character** 和 **Cast To ThirdPersonCharacter**。 

	![](HowTo20.png)

1.	从 **As Third Person Character** 针连出来，搜索并添加 **Set Inventory** 节点，将文本设置为 **Has the Item**。 

	![](HowTo21.png)

	此处，我们选取的是在服务器上执行并复制到客户端的事件，此事件将在屏幕上显示“item added”，然后将自有客户端的 **Inventory** 文本变量设置为“Has the item”。 

1.	在 **Add Item** 事件之后复制三个节点，并将其连接到 **Remove Item** 事件。 

1.	将 **Print String** 更改为 **Item Removed**，将 **Inventory** 文本变量更改为 **Empty**。 

	![](HowTo22.png)

	现在，当人物退出触发器时，文本变量将在服务器上更新并复制到自有客户端。 

1.	**编译** 并 **保存**，然后关闭 **Level Blueprint** 并在编辑器中开始游戏。 

	[OBJECT:EmbeddedVideo]
	[PARAMLITERAL:width]
	640
	[/PARAMLITERAL]
	[PARAMLITERAL:height]
	360
	[/PARAMLITERAL]
	[PARAMLITERAL:videoid]
	KiBrcLbXbYQ
	[/PARAMLITERAL]
	[/OBJECT]

	在以上视频中，当游戏启动时，按 P 可将文本变量打印到屏幕上，可对每个角色显示 “empty”。但是，当其中一个角色退出触发器盒时，将显示文本 “item added”。当人物按 P 时，
	文本将更改为 “has the item”，但其他人物仍显示 “empty”。当人物退出触发器盒时，将显示文本 “item removed”，再次按 P 时，文本将更改回 “empty”。 

	此示例说明了如何在服务器上运行事件并将这些事件复制到单个客户端。 





	










	
