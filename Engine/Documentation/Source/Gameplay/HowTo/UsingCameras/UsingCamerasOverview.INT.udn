Availability: Public
Title:Using Cameras
Crumbs: %ROOT%, Gameplay
Description:A How To Guide for Finding Actors in your Scenes in Unreal Engine 4. 
version: 4.9
Parent:Gameplay
skilllevel:Beginner
type:overview
order:12

This "How To" series covers working with and placing **Cameras** in Unreal Engine 4. A Camera can be used by itself and placed directly into a level or it can be a part of a Blueprint (for instance to provide a perspective for the player when flying a plane, driving a car, or controlling a character). 

Placing a Camera Actor can be done by dragging a **Camera** Actor into your level from **Modes** Menu. 

![](camera1.png)(w:820)

You can use the Search Bar to find the Camera Actor or look under the **All Classess** section. 

You can also **Right-click** in the Level Viewport and use the context menu by selecting **Place Actor** then selecting the **Camera Actor**. 

![](camera4.png)

When a Camera is placed in your level, you will notice that a picture-in-picture window is added to the Viewport which represents the viewing angle of the Camera. The name of the Camera is also listed in to center top portion of the window and the option to pin the window (keeping it on screen when clicking off the Camera) is represented by a pin icon in the lower left corner of the window. 

![](camera2.png)(w:820)


With a Camera selected, you will notice that the **Details** panel becomes populated with settings that pertain to the Camera. 

![](camera3.png)

Below is an overview of each section in the **Details** panel for a Camera Actor: 

| Property | Description |
| ----- | ---------- |
| **Transform** | This section represents the location of the Camera in the world. |
| **Camera Settings** | This section allows you to modify the type of projection used by the camera, field of view, aspect ratio, and post process blending.|
| **Auto Player Activation** | Specifies which Player Controller, if any, should automatically use this Camera when the controller is active.|
| **Film** | In this section, you can apply film effects such as Tint, Saturation, or Contrast. See also [Film](Resources/ContentExamples/PostProcessing/1_2).|
| **Scene Color** | Used to apply effects to the camera. See also [Scene Color](Resources/ContentExamples/PostProcessing/1_3).|
| **Bloom** | This simulates the effects the eye perceives when viewing bright objects. See also [Bloom](Resources/ContentExamples/PostProcessing/1_4).|
| **Light Propagation Volume** | Used to achieve Global Illumination (GI) in Real-time. See also [](Engine/Rendering/LightingAndShadows/LightPropagationVolumes).|
| **Ambient Cubemap** | This lights the scene from a provided image. See also [Ambient Cubemap](Resources/ContentExamples/PostProcessing/1_5).|
| **Auto Exposure** | This simulates the human eye adjusting to bright/dark areas. See also [Auto Exposure](Resources/ContentExamples/PostProcessing/1_6).|
| **Lens Flares** | This simulates the scattering of light when viewing bright objects through imperfections found in camera lenses. See also [Lens Flares](Resources/ContentExamples/PostProcessing/1_7).|
| **Ambient Occlusion** | This is an effect that approximates the attenuation of light due to occlusion. See also [Ambient Occlusion](Resources/ContentExamples/PostProcessing/1_8).|
| **Global Illumination** | Used to affect the indirect lighting contribution coming from Lightmass in order to alter a scene's brightness, color, or tint. See also [Global Illumination](Resources/ContentExamples/PostProcessing/1_10).|
| **Depth Of Field** | This is used to apply a blur effect to a scene based on distance in front or behind a focal point. See also [Depth Of Field](Resources/ContentExamples/PostProcessing/1_11).|
| **Motion Blur** | Used to generate a Motion Blur effect that blurs objects based on its motion. See also [Motion Blur](Resources/ContentExamples/PostProcessing/1_12).|
| **Misc** | This is used to apply Blendables (screen overlays), set Anti-Aliasing methods or Screen Percentage options for the Camera. See also [Blendables](Resources/ContentExamples/PostProcessing/1_16), [Screen Percentage](Resources/ContentExamples/PostProcessing/1_13), or [AA Method](Resources/ContentExamples/PostProcessing/1_14).|
| **Screen Space Reflections** | This is an effect which is enabled by default that alters the appearance of objects on the surface of Materials. See also [Screen Space Reflection](Engine/Rendering/PostProcessEffects/ScreenSpaceReflection).|
| **Activation** | This determines whether or not the Camera is automatically enabled or not.|
| **Tags** | This allows you to place Tags on the Actor. |
| **Actor** | This is information pertaining to the Camera Actor itself. |
| **Blueprint** | This allows you to turn the Actor into a Blueprint or add Events to the Level Blueprint for the Actor. |

[REGION:note]
For information on using Cameras for cinematic purposes, refer to [](Engine/Matinee/HowTo) documentation and the Camera sections. The [](Resources/Showcases/MatineeFightScene) is also an excellent resource for a sample cutscene and how it was constructed.
[/REGION]

Now that you have an understanding of how to place a Camera Actor in your level and some of the settings used to alter its look, the examples below provide some ways in which you can use Camera including how to use a Camera as a viewpoint for a player, how to use a Camera Component as part of a Blueprint, how to use a Spring Arm Component with a Camera Component (typically used for creating Third Person perspectives), as well as how to switch between Cameras during gameplay. 


## Implementation Guides

[DIR(output:"role" parent:"Gameplay/HowTo/UsingCameras" org:"hierarchy" end:"1")]






