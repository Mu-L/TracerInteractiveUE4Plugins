INTSourceChangelist:3599948
Availability:Public
Title:游戏性标记
Crumbs: %ROOT%
Description:游戏性标记可用于辨识、分类、匹配和过滤对象。
version:4.15
skilllevel:Intermediate
Parent:Engine/Gameplay
Order:
type:overview
tags:Gameplay

[toc(start:2 end:2)]

**游戏性标记（Gameplay Tags）** 是用户定义命名的概念性层级标记。这些标记可拥有任意数量的层级等级，由“.”字符隔开。举例而言，带三个层级的游戏性标记的形式为“Family.Genus.Species”，“Family”为层级中最广泛的辨识符，而“Species”则是最特定的辨识符。注意“Family.Genus.Species”隐藏式地说明了“Family.Genus”和“Family”游戏性标记同样存在。个体标记很轻量级，使用 `FGameplayTag` 类型。游戏对象通常拥有多个标记，因此提供了 **游戏性标记容器**（使用 `FGameplayTagContainer` 类型），可处理大量额外查询。游戏性标记（或游戏性标记容器）可被添加至任意项目，将对象和概念标记关联起来。这些概念标记即可按需求用于辨识、匹配、分类或过滤项目的对象。

## 创建游戏性标记
游戏性标记必须被添加到中央标记词典，以便引擎了解。此操作可通过编辑器功能以三种方式执行。标记可在 **Project Settings** 菜单中用 .ini 文件或创建数据表资源进行手动添加。 

全部三种方法均在 **Project Settings** 下进行设置，在 **Project** 部分中打开 **Gameplay Tags** 标记即可。
![Gameplay Tags menu in Project Settings](ProjectSettings.png)

### 手动添加标记

添加游戏性标记的最简单方法是在 **Project Settings** 菜单中手动进行输入。勾选 **Import Tags From Config** 选项后将加载 `Config/DefaultGameplayTags.ini`，以及 `Config/Tags` 路径下.ini 文件中的全部游戏性标记。将出现一个标记为 **Add New Gameplay Tag** 的选项，此选项可用于将新游戏性标记添加到现有的任意游戏性标记 .ini 文件中（包括默认文件）。以此法添加的标记也拥有一个输入简单描述的任选域，将作为提示文本出现在编辑器中。

![Manually Adding Tags in Project Settings](AddNewTag.png)

### 直接编辑 .ini 文件
如要添加使用自有 .ini 文件的标记，必须启用 **Import Tags From Config** 选项。游戏性标记将从项目的 `Config/Tags/` 路径中找到的每个 .ini 文件进行加载，十分易于手动编辑。如果这些编辑在编辑器运行时执行，先关闭 **Import Tags From Config** 选项，然后再重新启动则可重新加载文件。这些文件中的格式如下：

	[/Script/GameplayTags.GameplayTagsList]
	GameplayTagList=(Tag="Vehicle.Air.Helicopter",DevComment="This is a custom tooltip!")
	GameplayTagList=(Tag="Movement.Flying",DevComment="")
	GameplayTagList=(Tag="Movement.Hovering",DevComment="")
	GameplayTagList=(Tag="Movement.Landing",DevComment="")

此法便于同事添加其自建的标记。`Config/Tags` 中的 .ini 文件十分易于编辑，可以任意文件命名规则对其命名。

前往 **Project Settings** 中的 **Gameplay Tags Developer** 菜单，在 **Developer Config Name** 中填入所需的文件名后，即可使用“开发者标记”配置文件。启用后将会把添加（由用户添加）至默认 .ini 文件的全部标记保存到一个用户指定的 .ini 文件中。您的 .ini 文件将保存在 `Config/Tags` 文件夹中，无需更多修改便可传给其他开发者或提交到源控制系统。这在拥有数千个标记的大型项目中十分实用，或作为一种区分特定开发者所创建标记的方式，或结合特定的游戏功能使用。这完全为任选，但有助于一些团队和工作流将特定的标记保存在单独的文件中。

### 数据表资源
最后，[数据表](Gameplay/DataDriven/#datatables) 资源结合行类型 `GameplayTagTableRow` 也可添加标记。从外部源（如 Excel 电子表格）中导入游戏性标记时尤为实用，但也可不导入文件自建资源，并在编辑器中使用。资源创建后，将其添加至 **Project Settings** 菜单中的 **GameplayTagTableList**，其中包含的所有标记将被添加至 **Gameplay Tag Manager**。注意：此系统支持多个资源被列出，因此您可以将项目的标记分隔为不同的电子表格（如有助于工作流或组织）。

![Gameplay Tags in a Data Table Asset](DataAsset.png)

[REGION:caption]数据表资源使用虚幻引擎资源而非 .ini 文件，可在编辑器运行时进行查看和修改（与其他游戏资源类似）。[/REGION]

## 管理游戏性标记
添加游戏性标记后，可通过搜索对其的引用、将其删除、对其重命名进行管理。可在 **Project Settings** 中标记旁的插入符下拉菜单中执行这些操作。如果标记通过 .ini 文件添加（手动编辑或通过 **Project Settings** 菜单添加），且未被其他元素所引用，则只能在此菜单中进行删除。重命名标记将在 GameplayTagRedirects 列表中进行添加，被重命名的标记在加载时将被修复（无提醒）。

![Editing Individual Gameplay Tags In Project Settings](ProjectSettingsEditTag.png)

[REGION:caption]可通过插入符下拉菜单在 Project Settings 中编辑游戏性标记。[/REGION]

### 游戏性标记测试运算
存在的大量测试运算均基于将标记和其他标记进行匹配这一概念。可在游戏性标记和游戏性标记容器上执行。这些函数将在游戏性标记或游戏性标记容器上进行调用，将把单个游戏性标记或游戏性标记容器视作参数。

下表详述了标记和标记容器可进行的运算。在此表中，格式“A.1”代表一个单一的游戏性标记，而“{A.1}”则代表作为游戏性标记容器一部分的同一个标记。拥有多个标记的容器格式为“{A.1, B.1}”。

| 源 | 函数/运算 | 输入参数 | 返回值 |
| --- | --- | --- | --- |
| A.1 | MatchesTag | A | true |
| A.1 | MatchesTagExact (or ==) | A | false |
| A.1 | MatchesAny | {A, C} | true |
| A.1 | MatchesAnyExact | {A, C} | false |
| A.1 | MatchesAll | {A} | true |
| A.1 | MatchesAllExact | {A} | false |
| {A.1, B.1} | HasTag | A | true |
| {A.1, B.1} | HasTagExact | A | false |
| {A.1, B.1} | HasAny | {A, C} | true |
| {A.1, B.1} | HasAnyExact | {A, C} | false |
| {A.1, B.1} | HasAll | {A, B} | true |
| {A.1, B.1} | HasAllExact | {A, B} | false |

需要注意的是，将空白或默认游戏性标记容器作为输入参数将导致所有运算返回 false。`HasAll`、`HasAllExact`、`MatchesAll` 和 `MatchesAllExact` 除外。出现此情况的原因是源集中不包含的参数容器中没有标记。

举例而言，以下蓝图将使用部分如上命名的运算，检测一个游戏性标记容器是否拥有 `TestTag.One` 或 `TestTag.Three`，但不检查是否同时拥有这两者，也不检查是否拥有 `TestTag.Two`（测试 Actor 生成到游戏中时）。在此测试中，我们将使用蓝图中的文字容器值进行测试，但对 Actor 的容器使用蓝图（或 C++）变量。

![Sample Gameplay Tag Operations In A Blueprint](TagOperationsInBP.png)

## 游戏性标记查询
游戏性标记容器特定查询类型可保存在一个 **Gameplay Tag Query** 变量中，使其为数据驱动式，无需对多个变量或一部分代码进行编辑即可在多处执行，并调高速度。游戏性标记查询限于三种基础测试：

* 如容器中的查询拥有至少一个标记，则 **Any Tags Match** 成功。

* 如容器中未找到查询，查询中也没有标记，则 **All Tags Match** 成功。_这包括查询中未出现标记的情况。_

* 如容器中有查询，而查询中没有标记，则 **No Tags Match** 成功。_这包括查询中未出现标记的情况。_

然而，这些测试可通过三个较大的表达式组合起来，每个表达式均包含一个额外表达式或测试的阵列：

* 任意子表达式或测试成功，则 **Any Expressions Match** 成功。

* 无子表达式或测试失败，则 **All Expressions Match** 成功。_这包括查询中未出现子表达式或测试的情况。_

* 无子表达式或测试成功，则 **No Expressions Match** 成功。_这包括查询中未出现子表达式或测试的情况。_

[REGION:note]注意：全部三种测试类型均参考上方运算表中的“完全”匹配。[/REGION]

需要 `TestTag.One` 或 `TestTag.Three`（非两者同时）处于源容器中时，要求 `TestTag.Two` 不要位于源容器中，使用单一游戏性标记查询，即可重建之前的测试范例。在此测试中，我们将专门使用蓝图（或 C++）变量，但同时也支持文字值。这是我们的测试查询变量：

![Sample Gameplay Tag Query Variable](TagQuery.png)

设置好这个查询后，我们便可如下在测试 Actor 的蓝图中对游戏性标记容器进行求值：

![Sample Gameplay Tag Query In A Blueprint](TagQueryInBP.png)

## 在游戏中使用游戏性标记
将游戏性标记（C++ 类 `FGameplayTag`）或游戏性标记容器（C++ 类 `FGameplayTagContainer`）属性添加到对象，即可将创建的标记应用到游戏中的对象。也可根据需要将 **游戏性标记查询**（C++ 类 `FGameplayTagQuery`）添加到对象，或直接在蓝图/C++ 代码中使用标记运算。添加这些属性后，即可像其他变量一样在代码或编辑器中对其进行编辑。

## 快速在 C++ 中访问游戏性标记
`IGameplayTagAssetInterface` 可在 C++ 中实现。执行此操作并覆盖 `GetOwnedGameplayTags` 函数将创建一种以蓝图访问的方式，用与对象相关的标记填充游戏性标记容器。在多数情况下，这只意味着从基础类复制标记到新的容器中，但类的实现可从多个容器收集标记，或调用蓝图函数访问蓝图声明的标记（或对象所需的任意内容）。此接口的优势是使用户以标准化的方式和大量不同的对象类型进行交互，因此用户可获得对象的标记，而无需显式计算对象并为获得正确的标记变量而对每种可能的类型编写自定义代码。这在大型项目上尤为实用，有助于避免出现（难以重现）的 bug，使代码更加干净、快捷、易于维护。
