INTSourceChangelist:2716351
Availability:Licensee
Title:アンリアル エンジン 4 で Perforce を使う
Crumbs:%ROOT%, Engine, Programming, Programming/Basics
Description:アンリアル エンジンで Perforce のソース コントロールを使用するためのガイド
version:4.9

[TOC(start:2)]

アンリアル エンジンは Perforce のデポを通じて提供されるため、ライセンシーがエンジンをダウンロードするにはこのデポに接続しなければなりません。ライセンシーがプロジェクト上で作業をすると、アンリアル エンジンは定期的に更新されます。そのため、開発サイクルにおいて、現在のバージョンのエンジンを新しいバージョンに 1 度以上更新できるようにすることができます。最初の段階で Perforce を適切に設定し、エンジンのビルドとの同期した統合をいかに簡単にしておくかが重要になります。

Epic では、 **毎月第2及び第4日曜日の午前8時から正午 (US 東部標準時)** までの時間帯が定期保守となっています。このことを念頭においてスケジュールを組みましょう。この時間帯は、サポートアウトレットのうちいずれか、または、すべて (特にネットワーク / サーバーリソース) が、影響を受ける可能性があります。



## Epic のデポに接続する

Epic のパブリック Perforce デポへ接続するために、まず Epic Games への安全な VPN (バーチャル プライベート ネットワーク) 接続をセットアップする必要があります。これには、 Cisco 社の VPN クライアントのインストール (手動、または、ウェブベースの自動プロセスで)、および VPN / Perforce 認証情報を使用してサインインすることが必要となります。以下は、 VPN 接続を確立するためのプロセスの概要です。

**ウェブベースの接続**


1. ウェブブラウザで [https://vpn.epicgames.com](https://vpn.epicgames.com) を開きます (安定性により IE が推奨されます)。
1. 技術連絡担当者によって与えられたご自分の VPN 認証情報を使用してログインします。
1. スクリーン上の指示および要求に従います。
1. VPN クライアントがインストールされ、接続が確立します。


**手動による接続**


1. Cisco 社の AnyConnect VPN クライアントを、 [AnyConnect VPN Client Download](http://www.cisco.com/cisco/software/navigator.html?mdfid=281268793&i=rm) からダウンロードします。
1. クライアントをインストールして起動します。
1. **vpn.epicgames.com** を接続すべきアドレスとして設定します。
1. 技術連絡担当者によって与えられたご自分の VPN 認証情報を使用してログインします。
1. 接続が確立します。


Epic Games のプライベートネットワークへの VPN 接続のセットアップおよび確立に関しては、 [](GettingStarted/DownloadingUnrealEngine/VPNSetup) においてプロセス全体の詳細を説明しています。

VPN 接続が確立されると、 Perforce クライアントを使用して、ご自分のいる場所から安全にデポにアクセスすることができるようになります。接続するためには、クライアントをインストールして、適切に設定する必要があります。以下は、 P4V クライアントをインストールするとともに、それを使用して接続するプロセスの概要です。 


1. Perforce Windows クライアントを [Perforce Downloads: The Essentials](http://www.perforce.com/downloads/complete_list) からダウンロードします。
1. クライアントをインストールして起動します。
1. **Server**、**User**、**Workspace** に関して適切な情報を **[Connection Dialog]** に入力して **[OK]** をクリックします。
1. クライアントが開き、 Epic のパブリック Perforce デポに接続します。


Perforce クライアントをセットアップして Epic の Perforce デポに接続するための完全なプロセスは、 [Perforce 接続の設定](GettingStarted/DownloadingUnrealEngine/Perforce/Setup) のページで詳細に解説されています。



## ビルドまたはリビジョンをダウンロードする

2 種類のファイルの改訂方法は、ラベルとチェンジリストにて識別されます。概要レベルにおいては、ラベルは QA 承認ビルドのような、エンジンの特定のビルドを構成する全ての変更を識別します。これらの 2 つの概念の実際の違いは Perforce のウェブサイトの [座標とブランチ](http://www.perforce.com/perforce/doc.current/manuals/p4guide/06_codemgmt.html) ページにて詳細に渡って説明されています。Epic の Perforce デポへの同期については、以下の事項を念頭に置いて下さい。


* **ラベル** - 新しい QA 承認ビルドに更新するには、ラベルへ同期します。
* **チェンジリスト** - 特定の変更をエンジンの特定の一部へ更新するには、チェンジリストへ同期します。


これからアンリアル エンジン 4 を扱うに当たり、最新の QA ビルド (Perforce のデポでラベルによって指定されている) と同期させる必要が出てきます。このプロセスは、時間がかかります。特に初回は、エンジン全体を構成している全ファイルをダウンロードしなければならないため、時間が取られます。それ以降の同期については、新たなファイルか変更のあったファイルのみをダウンロードするだけでよいため、もっと速くなります。

Epic の Perforce デポからアンリアル エンジン 4 のビルドまたはリビジョンをダウンロードするプロセスの詳細については、 [Perforce でビルドを同期する](GettingStarted/DownloadingUnrealEngine/Perforce/Syncing) のページを参照してください。

次のセクションでは、 Perforce のデポをセットアップし、ビルドをローカルに維持することによって、できるだけ苦労なく新たなビルドに更新できるようにする方法について解説します。



## ローカルのデポを保守する

自動生成ファイル (例 : .exe、.u) と見なされる新しいファイルをデポに追加する場合、もしそのファイルがまだ masked out fileset (マスクアウトされたファイルセット) に含まれていないならば、各自のクライアント スペックを更新することによってマスクアウトするように、プログラマーは全員指導されています。

基本的にプログラマーは、より複雑なクライアント スペックをとることによって、作成することになる自動生成ファイルを扱います。コンテンツチームは、特殊なマッピングを必要としません。

例：パッケージが新規に追加されました。これによって、.u ファイルが、 Script と ScriptFinalRelease の両方で新規生成されます。クライアント スペックには以下のものがあります。


    
     -//depot/UnrealEngine3.../...Game/Script%%1/....u //localdepot/UnrealEngine3.../...Game/Script%%1/....u
    



これによって、新たなスクリプト パッケージを追加するたびに、クライアント スペックを更新する必要がなくなります。さらに、上記スペックにより、他のブランチでの作業時における更新を心配する必要がなくなります。

ブランチ スペックを作ることによって、上記クライアント スペックのマッピングと同じことを行うことが可能です。つまり、インテグレートのたびに、既知の自動生成ファイルがインテグレートされることがなくなります。新たな追加に気付いた場合、それらの処理方法をインテグレート時にど決めることができます。

同様に、コンテンツ クリエイターは、 Development ディレクトリのコンテンツをマスクアウトすることができます。ビルドおよびリンクのための外部ライブラリー、ツール、ソースはどれも必要がないからです。



## インテグレート、マージ、ブランチ化

チームは、ゲームの生産サイクルの期間中、新しい機能とバグフィクスが含まれたビルドに定期的に更新するように定めてください。このプロセスは、ビルドを Perforce デポから取得している限り、最初の同期のプロセスと変わりません。ただし、エンジンをローカルで維持する方法や、新規ビルドをコードベース中に簡単にインテグレートする能力 (同時にローカルの変更と追加コードすべてを損なうことなく) への影響など、様々な問題を考慮する必要があります。

デポの中でブランチを使用すると、インテグレートとマージのプロセスが容易になります。たとえば、次のようなものです。


* **//depot/Epic** - 各 QA ビルドのバージョン。変更されない。
* **//depot/MergeTest** - マージ / テスト領域。
* **//depot/Devel** - ご自分の開発ツリー。


![Perforce_33.jpg](Perforce_33.jpg)(w:640 h:443)

エンジンのバージョンを新しい QA ビルドに更新するプロセスの概略を示すと、次のようになります。


1. QA 承認ビルドのコンテンツを Epic から入手する。新しい QA ビルドを取得する適切は方法は、次のようになります。
    * Epic ブランチに入っているものをすべて削除します。
    * 新しい QA ビルドをそこにコピーします。
    * P4V の Reconcile Offline Work (オフライン作業の調整) を使用することによって、 Epic による変更を表す CL を実行します。それをチェックインします。現在、 Epic のブランチは、 QA ビルドのコピーですが、インテグレートの履歴を失ってはいません。それによって、正確な変更についてかなり適切な情報がマージツールにもたらされ、コンフリクトの数が減少するはずです。
1. MergeTest ブランチをテスト領域として使用しながら、 Epic ブランチからあなたのメインの開発ブランチにインテグレートします。


以下は、このワークフローの一例です。

![Perforce_34.jpg](Perforce_34.jpg)(w:665 h:443)

更新回数を増やすにしたがって、マージ時に深刻なコンフリクトが生じる可能性が低くなります。コンフリクトが生じた場合は、 Araxis のようなマージプログラムを使用して解消することが極めて有益となります。

以下は、新しい QA ビルドのマージを準備する場合のアドバイスです。


* 「マージ日記」をつけましょう。マージの経緯について、日々記録を付けます。その際、問題のある選択や重要な決定などを際立たせていくのと同時に、時系列に沿って記録していきます。こうすることによって、後に起動して問題が発生した場合に、役に立ちます。
* QA のための完全なテストプランを作成します。また、マージ ブランチおよびトランク (trunk : 幹) を一定期間テストする時間を作るようにするために、部署から協力を得ます。
* エンジンとともに、更新が必要なミドルウェアの記録をとります。すべてのミドルウェアのバージョンについて行います。
* 可能な場合は、メインのトランク プラットフォーム SDK のバージョンを、新たなマージブランチと同じバージョンに更新することによって、作業が楽になるようにします (コンソール)。また、ファームウェアも更新します。
* Perforce のスペースをもっと使用することができないか IT 部署に相談してみます。
* すべてのターゲット プラットフォームについて、現在およびターゲットの QA ビルドのための UDK を使用することによって、パフォーマンスおよびメモリ使用量が同じであるか、向上したかチェックします。パフォーマンスが劣化した場合は、理由を知る必要があります。Epic では、たとえば、あるプラットフォームでのパフォーマンスを抑えて、他のプラットフォームでの品質を高めることがあります。
* 他の部署に更新の必要性について必ず理解してもらってください。また、関心とサポートをチームから得ることがプロジェクトの利益につながるという理由をしっかり用意しておきます。


インテグレートおよびマージ、ブランチ化に関する用語とベストプラクティスについては、 [Perforce 統合に関する FAQ](GettingStarted/DownloadingUnrealEngine/Perforce/Integration) のページを参照してください。

AutoMerge ツールのスクリプトについては、 [Perforce の自動マージツール](GettingStarted/DownloadingUnrealEngine/Perforce/AutoMerge) のページを参照してください。

Unreal Engineのビルドをマージするためのコツと戦略については、 [一般的なマージの問題](GettingStarted/DownloadingUnrealEngine/Perforce/CommonMergeProblems) のページを参照してください。 

 




