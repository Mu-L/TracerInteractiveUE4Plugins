Availability: Licensee
Title:使用Perforce同步版本
Crumbs:%ROOT%, Engine, Programming, Programming/Basics, GettingStarted/DownloadingUnrealEngine/Perforce
Description: 使用Perforce来获取虚幻引擎4版本的指南。

[TOC(start:2)]



## 概述

通过标签和变更列表编号是识别文件修订版本的两个主要方法。从高层次来开，标签标识了构成某个特定引擎版本的所有修改，比如经过QA验证的版本，而变更列表编号标识了一组特定的修改。这两个改变间的真正区别在Perforce网站的[代码行和分支](http://www.perforce.com/perforce/doc.current/manuals/p4guide/06_codemgmt.html) 页面进行了详细的解释。要想同步到Epic的Perforce库，您需要知道以下内容：


* **Labels** - 要想更新到一个新的经过QA验证的版本，那么您应该同步到一个标签。
* **Changelists** - 要想同步到针对引擎某个特定方面的特定修改，那么您将需要同步到一个变更列表。




## P4V和库

P4V中的三个面板包含了您的工作区和Depot（库）树结构。在库树结构视图中，点击Depot节点来展开树并查看可用的目录。

![p4v_depot_tree.jpg](p4v_depot_tree.jpg)(w:374 h:307)


* _CodeDrop_ - 包含了Epic创建的各种游戏的代码包片段，可以用作为示例。
* _PhysX_ - 包含了针对物理中间件的通用文件；根据您的协议的不同，您也可以查看其他的目录和文件。
* _UnrealEngine3_ - 包含了用于编译及运行虚幻引擎3的任何内容。同时包含了ExampleGame和UDKGame示例。
* _UnrealMCP_ - 包含了UnrealMCP的源码文件，它是个SOA（面向服务的架构），主要用于提供具有高度可扩展性的可用资源集，从而提高玩家的在线体验。


要想获得更多信息, 请参照[目录布局](Engine/Basics/DirectoryStructure)页面。

在 _UnrealEngine3_ dir目录中有几个子目录: _Binaries_ 、 _Development_ 和 _Engine_; 及两个游戏目录: _ExampleGame_ 和 _UDKGame_ 。

![p4v_depot_tree_ue3.jpg](p4v_depot_tree_ue3.jpg)(w:374 h:307)

_ExampleGame_ 是Epic提供的最基础的游戏实现，如果您的游戏和 _虚幻竞技场_ 不是是非类似，那么这个游戏便是您创建您自己的游戏项目的很好的入手点。

_UDKGame_ 是Epic的当前虚幻引擎4应用示例，它基于 _Unreal Tournament 3(虚幻竞技场3)_ 。这提供了一个复杂的示例，展示了Epic使用引擎的过程。我们推荐使用 _UDKGame_ 作为示例，而不是扩展 _UDKGame_ 。非常欢迎您在您的游戏中使用 _UDKGame_ 中的C++或UnrealScript代码，但是您不能在您的游戏中发行任何Epic的内容(贴图、网格物体、关卡、声效等)。

对于 _UnrealEngine3_ 来说,Epic的大部分内容都位于特定游戏的目录中，所以如果您想要的仅是引擎源码，那么您可以简单地同步到 //depot/UnrealEngine3/Development 目录。您可以根据需要选中特定的目录，比如，要获得 _ExampleGame_ 的最新内容，而不更新 _UDKGame_ 内容。

![p4v_depot_tree_ue3_examplegame.jpg](p4v_depot_tree_ue3_examplegame.jpg)(w:374 h:307)

当获得了一个修订版本后，将会在日志窗口中显示大量的下载记录。当同步完成时，你所期望出现的是 _Sync completed with no warnings or errors（同步完成，没有警告或错误）_ 。



## 同步到一个QA版本

要想同步到一个经过QA验证的版本，请遵循以下步骤：


1. 运行P4V客户端应用程序。

	![p4v_small.jpg](p4v_small.jpg)(w:800 h:525)

1. 在Depot树结构中， **右击** UnrealEngine3目录，然后从关联菜单中选择 _Get Revision（获得修订版本）..._ 。可替换地，您可以选择 _UnrealEngine3_ 目录，并从 _Actions( 动作)_ 菜单中选择 _Get Revision(获得修订版本)..._ 项。

	![p4v_depot_menu.jpg](p4v_depot_menu.jpg)(w:304 h:650)

1. _Get Revision(获得修订版本)_ 窗口将会打开。

	![p4v_get_revision.jpg](p4v_get_revision.jpg)(w:634 h:488)

	选择 _Specify revision using（指定的版本号）_ 单选按钮来启用组合框和文本域。

	![p4v_specify_revision.jpg](p4v_specify_revision.jpg)(w:513 h:63)

1. 从组合框中选择  _label(标签)_ 。

	![p4v_revision_label.jpg](p4v_revision_label.jpg)(w:100 h:103)

	按下![p4v_browse_button.jpg](p4v_browse_button.jpg)按钮来打开 _Select Label(选择标签)_ 窗口。

	![p4v_select_label.jpg](p4v_select_label.jpg)(w:800 h:526)

1. 选择您想同步到的标签。通常这是最新的经过QA验证的版本，由 _QA_APPROVED_BUILD_[Month]_[Year]_ 形式的标签指定。您可能需要向下滚动几次列表来获得所有要被下载的标签。

	![p4v_label_build.jpg](p4v_label_build.jpg)(w:800 h:526)

	按下 ![p4v_ok_button.jpg](p4v_ok_button.jpg) 按钮来选择标签并关闭窗口。

1. 按下 ![p4v_get_revision_button.jpg](p4v_get_revision_button.jpg) 来关闭 _Get Revision(获取修订版本)_ 窗口并开始同步。日志中开始显示同步过程。

	![p4v_sync_progress.jpg](p4v_sync_progress.jpg)(w:800 h:117)



## 最佳实践及策略

我们推荐您使用可以同步到针对特定版本的所有 二进制文件/文件 的批处理文件来同步到经过测试团队验证的版本。该批处理文件也可以用于同步内容到#head(最新版本)。

您总是可以在支持入口找到最新的版本变更列表说明。

关于游戏内容目录，由于Perfroce没有提供二进制数据差异比较功能，所以当您更新包时，Perforce会再次下载任何更新的文件。几G字节的内容，您一定不想总是执行这个操作。所以，强烈推荐您偶尔地执行该操作，比如通过整个晚上同步一次，来获得内容作为参考，然后根据需要尽可能少地进行更新。

如果您在完全同步到完整的最新经过QA验证的版本过程中遇到问题，那么请尝试同步到部分文件。授权用户或承包人有时候可能在同步过程中失去连接。这不是太大的问题，但是有时候很令人沮丧。为了缓解这个问题，请同步到UnrealEngine3根目录下的每个文件夹： Development、Engine、ExampleGame等。对于UDKGame文件夹,可以进一步细化。分别同步到UDKGame中的每个子文件夹，Content文件夹除外。当您想获得Content文件夹内容时，请分别同步到Content目录中的每个子文件夹。这样做很麻烦; 但是一旦完成就真正完成了，并且可以免去很多令人头疼的问题。

在进行同步过程中，您可能会看到这样的警告您“不能修改可写文件”，似乎在您的客户端工作区中某些文件标记为可写状态。作为保护，任何情况下Perforce都不会覆盖您的客户端上的任何可写文件。如果您认为您需要保留修改，那么您需要决定对哪些文件进行了修改并迁入它们；否则，如果您不需要修改并仅想进行全新同步，那么请执行"force sync(强制同步)"到QA标签，来强制覆盖这些文件。

当您的版本有问题时，请查看最新的版本信息。同时点击Perforce中的 _Check Consistency(检查一致性)_ 功能（在[P4Win](GettingStarted/DownloadingUnrealEngine/Perforce/P4Win)中，它位于 _文件_ 菜单中 _More(更多)_ 子菜单下）也是个好方法；在[P4V](GettingStarted/DownloadingUnrealEngine/Perforce/P4V))中，它位于 _Actions（动作）_ 菜单的   _Reconcile Offline Work（重新协调离线任务）_ 子菜单下)。最后的办法是，使用 _Remove from Client(从客户端删除)_ 功能；然后物理地移动(或删除)整个根文件夹及其内容。然后，进行正常同步。执行库上的 _Remove from Client(从客户端删除)_ 命令是必要，因为它告诉服务器您已经没有任何内容，这将会强制更新所有文件。

 




