Availability: Docs
Title:Syncing Builds with Perforce
Crumbs:%ROOT%, Engine, Programming, Programming/Basics, GettingStarted/DownloadingUnrealEngine/Perforce
Description:Guide to obtaining builds of Unreal Engine 4 using Perforce.
version: 4.9

[TOC(start:2)]

The two main ways sets of file revisions are identified are through labels and changelists. On a high level, a label identifies all the changes that make up a specific build of the engine, e.g. a QA-approved build, while a changelist identifies a specific set of changes. The actual differences between these two concepts is explained in much more detail on the [Codelines and Branching](http://www.perforce.com/perforce/doc.current/manuals/p4guide/06_codemgmt.html) page of the Perforce website. For the purposes of syncing to Epic's Perforce depot, here is what you need to know:


* **Labels** - To update to a new QA-approved build, you will sync to a label.
* **Changelists** - To update to a specific set of changes made to a specific aspect of the engine, you will sync to a changelist.




## P4V and the Depot

The tree pane in P4V contains your Workspace and the Depot Tree. In the Depot Tree view, click the Depot node to expand and see the available directories.

![p4v_depot_tree.jpg](p4v_depot_tree.jpg)(w:374)


* CodeDrop - Contains various snapshots of games created by Epic that can be used as examples.
* PhysX - Contains the common files for the physics middleware; depending on your agreement, you may also see additional directories and files.
* UnrealEngine3 - Contains everything to build and run UnrealEngine3. Also includes the ExampleGame and UDKGame examples.
* UnrealMCP - Contains the source for UnrealMCP, which is a SOA (service-oriented architecture) that focuses on providing highly scalable and available set of services to enhance the online experience of players.


For more information, see the [directory layout](Engine/Basics/DirectoryStructure) page.

In the UnrealEngine3 directory are several subdirectories: Binaries, Development, and Engine; and two game directories: ExampleGame and UDKGame.

![p4v_depot_tree_ue3.jpg](p4v_depot_tree_ue3.jpg)(w:374)

ExampleGame is the most minimal game implementation offered by Epic, and can be a good place for getting started in creating your own game project if your game is not very similar to Unreal Tournament.  

UDKGame is Epic's current Unreal Engine 4 usage demo based off of Unreal Tournament 3. This provides a complex example showing exactly how Epic intends to use the engine. We recommend using UDKGame as an example, rather than extending from UDKGame. You are welcome to use any C++ or UnrealScript code in UDKGame for your game project, but you cannot ship any of Epic's content (textures, meshes, levels, sounds, etc.) in your game.

For UnrealEngine3, most of Epic's content is located in the game-specific directories, so if all you want is the engine source, you can simply sync to the //depot/UnrealEngine3/Development directory. You can highlight specific directories as desired, for example, to grab the latest content for ExampleGame without updating UDKGame content.

![p4v_depot_tree_ue3_examplegame.jpg](p4v_depot_tree_ue3_examplegame.jpg)(w:374)

When getting a revision, lots of downloading will progress in the log window. "Sync completed with no warnings or errors" is what you are looking for when it is done.



## Syncing to a QA-Build

To sync to a QA-approved build, follow the step below:


1. Run the P4V client application.

	![p4v_small.jpg](p4v_small.jpg)(w:800)

1. In the Depot Tree, **right-click** on the UnrealEngine3 directory and then choose **Get Revision...** from the context menu. Alternatively, you can select the UnrealEngine3 directory and choose **Get Revision...** from the **Actions** menu.

	![p4v_depot_menu.jpg](p4v_depot_menu.jpg)(w:304)

1. The **Get Revision** window will open.

	![p4v_get_revision.jpg](p4v_get_revision.jpg)(w:634)

	Select the **Specify revision using** radio button to enable the combobox and text field.

	![p4v_specify_revision.jpg](p4v_specify_revision.jpg)(w:513)

1. Select **label** from the combobox.

	![p4v_revision_label.jpg](p4v_revision_label.jpg)(w:100)

	Press the **Browse...** button to open the **Select Label** window.

	![p4v_select_label.jpg](p4v_select_label.jpg)(w:800)

1. Select the label you want to sync to. Usually this is the latest QA-approved build, designated by a label in the form of **QA_APPROVED_BUILD_[Month]_[Year]**. You may need to scroll down in the list a few times for all the labels to be loaded.

	![p4v_label_build.jpg](p4v_label_build.jpg)(w:800)

	Press the **Ok** button to select the label and close the window.

1. Press the **Get Revision** button to close the **Get Revision** window and begin the sync. The Log should show the progress of the sync.

	![p4v_sync_progress.jpg](p4v_sync_progress.jpg)(w:800)



## Best Practices and Strategies

Rather than use multiple Client Specs, we recommend using a batch file which will sync all of the binaries/files specific to a build that has been approved by the test team. That same batch file can also be used to sync content to #head.

You can always find the most recent build changelist notes on the support portal.

Regarding the game content directories, because Perforce does not provide binary differencing, when you do an update on Packages, Perforce will download any updated files all over again! With several gigabytes of content, this is not something you would want to do more than once. So it is highly recommended you do it on occasion, say, overnight - once, to get the content to use as reference, and then update only rarely as needed.

If you are having problems doing a full sync to the latest QA-Approved Build, try to sync in parts. Licensees and contractors rarely, but sometimes, get disconnected during a sync. This is not too much of a problem, but it can be frustrating. To alleviate this, sync to each folder under the UnrealEngine3 root: Development, Engine, ExampleGame, etc. For UDKGame, break it down even further. Sync to every subfolder of UDKGame individually, except for Content. When you get to Content, sync to every subfolder of Content individually. It is a pain to do; but once it is done, it is done, and can save a lot of headaches.

While doing a sync, you may receive warnings that you  "can't clobber writable file" it is likely that some files in your client workspace were marked writeable. As a safeguard, Perforce will not overwrite any file that is writeable on your client under any circumstance. If you think you have changes you need to keep, you will need to determine what files have changed and either check them in; otherwise, if you do not need any changes and just want a fresh sync, perform a "force sync" to the QA label to force those files to be overwritten.

When you have problems with the build, be sure to check the latest build notes. It is also a good idea to **Check Consistency** in Perforce (from the **File** menu, under the **More** submenu in [P4Win](GettingStarted/DownloadingUnrealEngine/Perforce/P4Win); from the **Actions** menu, under the **Reconcile Offline Work** submenu in [P4V](GettingStarted/DownloadingUnrealEngine/Perforce/P4V)). As a last resort, use **Remove from Client**; and then physically move (or delete) the entire root folder and its contents. From there, sync as normal. The **Remove from Client** on the depot is necessary to tell the server you have nothing, which will force all files to be updated.

 




