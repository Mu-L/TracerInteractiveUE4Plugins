Availability: Docs
Title: 1 - Configuring Qt Creator to Build UE4
Crumbs:%ROOT%
Description:Learn how to configure your IDE to build UE4 in Debug and Release mode.
Version: 4.14
type:how to
parent:Platforms/Linux/BeginnerLinuxDeveloper/SettingUpQtCreator
order: 1
tags:Linux
SkillLevel:Beginner

[NAV]

While some developers like to use text editors and command line debuggers to modify their game's source code, most developers 
prefer to use an Integrated Development Environment (IDE) to edit, debug, and compile their code. If you're a game developer looking to set up 
an IDE to work with Unreal Engine 4 (UE4) in a Linux environment, this guide is for you. 

Although we recognize that chosing an IDE is a matter of individual preference, we've configured UE4 to interface with three IDEs in Linux; 
specifically, Qt Creator, KDevelop, and Codelite. We don't endorse one IDE over another; however, as an example for learning purposes, we've chosen to 
show you how to configure Qt Creator to build and run UE4. By the end of this guide, you'll know how to configure your IDE to build and run UE4. Finally, 
you'll also learn how to set up the IDE to build and run new C++ (CPP) projects that you create from the Unreal Editor.

[REGION:note]
Before we begin, please make sure that you've already set up your workflow using our [](Platforms/Linux/BeginnerLinuxDeveloper/SettingUpAnUnrealWorkflow). Also, please make sure that [Qt Creator](https://wiki.qt.io/Install_Qt_5_on_Ubuntu) is
 installed on your machine.
[/REGION]

1.	Launch Qt Creator, opening the **Qt Welcome** menu.  

	[REGION:lightbox]
		[![](SetupIDE_Step1.png)(w:720)](SetupIDE_Step1.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	Click the **Open Project** button to open the Qt Project file browser.  

	[REGION:lightbox]
		[![](SetupIDE_Step2.png)(w:720)](SetupIDE_Step2.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	Navigate to the directory where you built UE4, select the UE4 Qt Project (**UE4.pro**) file, and click the **Open** button.

	[REGION:lightbox]
		[![](SetupIDE_Step3.png)(w:720)](SetupIDE_Step3.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	At this point, Qt Creator hasn't been configured to build UE4 in Debug and Release Mode. Click the **Configure Project** button located in the **Configure Project** menu.

	[REGION:lightbox]
		[![](SetupIDE_Step4.png)(w:720)](SetupIDE_Step4.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	Now, click the **Projects** button to enter into Projects mode, opening the **Build Settings** menu.

	[REGION:lightbox]
		[![](SetupIDE_Step5.png)(w:720)](SetupIDE_Step5.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

	[REGION:note]
	When you open the **Build Settings** menu, you'll notice that Qt Creator defaults its **Edit build configuration:** to **Debug** mode.
	[region: lightbox]
	[![](SetupIDE_Step5_Note.png)(w:347)](SetupIDE_Step5_Note.png)
	[/region]
	[REGION:caption]
	Click for full image.
	[/REGION]
	[/REGION]

1.	Under the **Build Steps** section, clear the **qmake** build step by clicking on the **X** button next to the **Details** drop down menu.

	[REGION:lightbox]
		[![](SetupIDE_Step6Alt.png)(w:720)](SetupIDE_Step6Alt.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	Now, clear the **Shadow build** checkbox to cancel the selection. 

	[REGION:lightbox]
		[![](SetupIDE_Step7.png)(w:720)](SetupIDE_Step7.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

	[REGION:note]
	Shadow building allows you to build projects in a separate build directory with Qt Creator's qmake utility. Because UE4 is distributed with a custom Make file that makes use of 
	[](Programming/UnrealBuildSystem), you don't need to use Qt Creator's qmake utility.
	[/REGION]

1.	Now, click the **Details** drop down menu to open the input form for the **Make** build step.

	![](SetupIDE_Step8.png)

1.	Enter `UE4Editor-Linux-Debug` into the **Make arguments:** text field.

	![](SetupIDE_Step9.png)

1.	Under the **Clean Steps** section, click the **Details** drop down menu to open the input form for the **Make** clean step.

	![](SetupIDE_Step10.png)

1.	Replace `clean` by entering `UE4Editor-Linux-Debug ARGS="-clean"` into the **Make arguments:** text field.

	![](SetupIDE_Step11.png)

1.	Now, click the **Edit build configuration:** drop down menu and select **Release** to open the **Build Settings** for Release mode.

	[REGION:lightbox]
		[![](SetupIDE_Step12.png)(w:720)](SetupIDE_Step12.png)
	[/REGION]
	
	[REGION:caption]
		Click for full image.
	[/REGION]

1.	Repeat Steps 6 through 11 to edit the build configuration settings for Release mode. Please make sure that your settings match the following image:

	![](SetupIDE_Step13.png)

	[REGION:note]
	If you'd like to set up additional build configurations for your project, please refer to the Qt Creator [Build Settings Documentation](http://doc.qt.io/qtcreator/creator-build-settings.html),
	where they show you how to add as many build configurations as you might need.
	[/REGION]

## End Result

[REGION:lightbox]
	[![](QtBuildSettings_UE4.png)(w:720)](QtBuildSettings_UE4.png)
[/REGION]

[REGION:caption]
	Click for full image.
[/REGION]

At this point, you've configured UE4 to build in both Debug and Release mode. Depending on your system's specifications, you may notice that UE4 runs slower while in Debug mode. For more information 
on the performance characteristics of available build configurations, please read through our [](Programming/Development/BuildConfigurations) page. With this in 
mind, you're ready to configure Qt Creator to run UE4.

[NAV]