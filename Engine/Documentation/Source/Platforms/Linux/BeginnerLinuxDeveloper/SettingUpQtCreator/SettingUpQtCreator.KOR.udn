INTSourceChangelist:6572990
Availability: Public
Title: UE4 용 Qt Creator 구성 방법
Description: Linux에서 UE4 를 빌드하여 실행할 수 있도록 IDE 를 구성하는 방법을 배워봅니다.
Type: how-to
Version: 4.14
Parent: Platforms/Linux
Tags: Linux
topic-image: IDE_HowToTopic.png
SkillLevel: Beginner
Order: 3
Related: Engine/Content/QuickStart
Related: Engine/QuickStart
Related: Programming/QuickStart
Related: GettingStarted


[TOC (start:2 end:2)]

[REGION:imagetable]
![](CompiledEditor_LinuxIDE.png)(w:1280)  
여기서는 언리얼 엔진 4 (UE4) 를 빌드하고 실행할 수 있도록 **통합 개발 환경** (IDE) 환경설정 방법을 살펴봅니다.
[/REGION]

## 1 - UE4 빌드를 위한 Qt Creator 환경설정

게임 소스 코드를 변경하는 데 명령줄 디버거나 텍스트 에디터를 선호하는 개발자도 있지만, 대부분의 경우 통합 개발 환경(IDE)에서 코드를 편집, 디버깅, 컴파일하는 것을 선호합니다. 이 문서는 Linux 환경에서 UE4 작업을 하기 위한 IDE 구성 방법을 찾으시는 분들을 위한 문서입니다.

어떤 IDE 를 선택할 것인지는 개인 취향이라는 것을 알기는 하지만, UE4 에서는 Linux에 세 가지 IDE 인터페이스를 사용하도록 환경설정되어 있습니다. 구체적으로 Qt Creator, KDevelop, Codelite 입니다. 어느 IDE 하나를 특별히 지지하지는 않지만, 여기서는 학습 목적 상, Qt Creator 를 환경설정하여 UE4 를 실행하는 방법을 보여드리도록 하겠습니다. 이 문서가 끝날 즈음이면 IDE 환경설정 방법과 UE4 를 빌드하고 실행하는 방법을 터득하게 되실 것입니다. 마지막으로, 언리얼 에디터에서 생성한 C++ (CPP) 프로젝트를 빌드하고 실행하도록 IDE 를 구성하는 방법도 배우게 될 것입니다.

[REGION:note]
시작하기에 앞서, [](Platforms/Linux/BeginnerLinuxDeveloper/SettingUpAnUnrealWorkflow) 문서를 참고하여 작업방식 구성이 되어있는지 확인해 주세요. 또, 컴퓨터에 [Qt Creator](https://wiki.qt.io/Install_Qt_5_on_Ubuntu) 가 설치되어 있는지도 확인해 주시기 바랍니다.
[/REGION]

1.  Qt Creator 를 실행하면, **Qt Welcome** 메뉴가 뜹니다.
    [REGION:lightbox]
    [![](SetupIDE_Step1.png)(w:720)](SetupIDE_Step1.png)
    [/REGION]
    [REGION:caption]
    클릭하면 이미지 원본을 확인합니다.
    [/REGION]
    
1.  **Open Project** (프로젝트 열기) 버튼을 눌러 Qt Project 파일 브라우저를 엽니다.
    [REGION:lightbox]
    [![](SetupIDE_Step2.png)(w:720)](SetupIDE_Step2.png)
    [/REGION]
    [REGION:caption]
    클릭하면 이미지 원본을 확인합니다.
    [/REGION]
    
1.  UE4 를 빌드한 디렉터리로 이동하여, UE4 Qt Project (**UE4.pro**) 파일을 선택한 뒤 **Open** (열기)버튼을 누릅니다.
    [REGION:lightbox]
    [![](SetupIDE_Step3.png)(w:720)](SetupIDE_Step3.png)
    [/REGION]
    [REGION:caption]
    클릭하면 이미지 원본을 확인합니다.
    [/REGION]
    
1.  아직은 UE4 를 Debug 및 Release 모드로 빌드할 수 있도록 Qt Creator 구성이 완료되지 않았습니다. **Configure Project** (프로젝트 환경설정) 메뉴의 **Configure Project** (프로젝트 환경설정) 버튼을 클릭합니다.
    [REGION:lightbox]
    [![](SetupIDE_Step4.png)(w:720)](SetupIDE_Step4.png)
    [/REGION]
    [REGION:caption]
    클릭하면 이미지 원본을 확인합니다.
    [/REGION]
    
1.  **Projects** (프로젝트) 버튼을 클릭하여 프로젝트 모드로 들어가면 **Build Settings** (빌드 세팅) 메뉴가 열립니다.
    [REGION:lightbox]
    [![](SetupIDE_Step5.png)(w:720)](SetupIDE_Step5.png)
    [/REGION]
    [REGION:caption]
    클릭하면 이미지 원본을 확인합니다.
    [/REGION]
    [REGION:note]
    **Build Settings** (빌드 세팅) 메뉴를 열면, Qt Creator 의 기본 **Edit build configuration:** (빌드 구성 편집)이 **Debug** (디버그) 모드로 된 것이 보일 것입니다.
    [REGION:lightbox]
    [![](SetupIDE_Step5_Note.png)(w:347)](SetupIDE_Step5_Note.png)
    [/REGION]
    [REGION:caption]
    클릭하면 이미지 원본을 확인합니다.
    [/REGION]
    [/REGION]
    
1.  **Build Steps** (빌드 스텝) 섹션에서, **디테일** 드롭 다운 메뉴 옆 **X** 버튼을 클릭하여 **qmake** 빌드 스텝을 지웁니다.
    [REGION:lightbox]
    [![](SetupIDE_Step6Alt.png)(w:720)](SetupIDE_Step6Alt.png)
    [/REGION]
    [REGION:caption]
    클릭하면 이미지 원본을 확인합니다.
    [/REGION]
    
1.  **Shadow build** (섀도 빌드) 박스 체크를 지워 선택을 취소합니다.
    [REGION:lightbox]
    [![](SetupIDE_Step7.png)(w:720)](SetupIDE_Step7.png)
    [/REGION]
    [REGION:caption]
    클릭하면 이미지 원본을 확인합니다.
    [/REGION]
    [REGION:note]
    섀도 빌드란 Qt Creator 의 qmake 유틸리티로 별도의 빌드 디렉터리에 프로젝트를 빌드할 수 있도록 해줍니다. UE4 는 [](Programming/UnrealBuildSystem) 활용을 통해 커스텀 Make 파일과 함께 배포되므로, Qt Creator 의 qmake 유틸리티를 사용할 필요가 없습니다.
    [/REGION]
    
1.  이제 **디테일** 드롭 다운 메뉴를 클릭하여 **Make** 빌드 스텝의 입력 양식을 엽니다.
    
    ![](SetupIDE_Step8.png)

1.  **Make arguments:** 글상자에 `UE4Editor-Linux-Debug` 라 입력합니다.
    
    ![](SetupIDE_Step9.png)

1.  **Clean Steps** 섹션 아래, **디테일** 드롭 다운 메뉴를 클릭하여 **Make** 클린 스텝의 입력 양식을 엽니다.
    
    ![](SetupIDE_Step10.png)

1.  **Make arguments:** 글상자에 `UE4Editor-Linux-Debug ARGS="-clean"` 을 입력하여 `clean` 을 대체합니다.
    
    ![](SetupIDE_Step11.png)

1.  이제 **Edit build configuration:** 드롭 다운 메뉴를 클릭하고 **Release** (릴리즈)를 선택하면 릴리즈 모드의 **Build Settings** (빌드 세팅)이 열립니다.  
    [REGION:lightbox]
    [![](SetupIDE_Step12.png)(w:720)](SetupIDE_Step12.png)
    [/REGION]
    [REGION:caption]
    클릭하면 이미지 원본을 확인합니다.
    [/REGION]
    
1.  6 단계에서 11 단계까지 반복하여 릴리즈 모드의 빌드 구성을 편집합니다. 세팅이 다음 이미지와 같은지 확인합니다:  
    ![](SetupIDE_Step13.png)
    [REGION:note]
    프로젝트에 빌드 구성을 추가로 만들려는 경우, Qt Creator 의 [Build Settings Documentation](http://doc.qt.io/qtcreator/creator-build-settings.html) 을 참고하여 빌드 구성을 필요한 만큼 추가시킬 수 있습니다.
    [/REGION]
    
### 중간 결과

[REGION:lightbox]
[![](QtBuildSettings_UE4.png)(w:720)](QtBuildSettings_UE4.png)
[/REGION]
[REGION:caption]
클릭하면 이미지 원본을 확인합니다.
[/REGION]

이제 UE4 를 Debug 와 Release 모드로 빌드할 수 있도록 구성을 마쳤습니다. 시스템 사양에 따라, UE4 가 Debug 모드에서 더욱 느리게 실행되는 것을 알 수 있습니다. 가능한 빌드 구성에 따른 퍼포먼스 특징 관련해서는 [](Programming/Development/BuildConfigurations) 문서를 참고하세요. 이 점을 염두에 두고, UE4 실행을 위한 Qt Creator 환경설정을 시작해 봅시다.

## 2 - UE4 실행을 위한 Qt Creator 환경설정

현재 UE4 를 Debug 및 Release 모드로 빌드하도록 환경설정했습니다. 이제 UE4 를 실행하도록 Qt Creator 환경설정할 준비가 되었습니다.

1.  **Run** (실행) 버튼을 누르고 **Run Settings** (실행 세팅) 메뉴를 엽니다.
    [REGION:lightbox]
    [![](SetupIDE_Step10.png)(w:720)](SetupIDE_Step10.png)
    [/REGION]
    [REGION:caption]
    클릭하면 이미지 원본을 확인합니다.
    [/REGION]
    
1.  **Run** (실행) 섹션 아래, **Executable:** (실행파일) 글상자 끝에 있는 **Browse** (탐색) 버튼을 클릭합니다.
    [REGION:lightbox]
    [![](SetupIDE_Step11.png)(w:720)](SetupIDE_Step11.png)
    [/REGION]
    [REGION:caption]
    클릭하면 이미지 원본을 확인합니다.
    [/REGION]
    
1.  에디터의 바이너리 경로가 위치한 디렉터리로 이동한 뒤, **UE4Editor** 를 선택하고 **Open** (열기) 버튼을 클릭합니다.
    [REGION:lightbox]
    [![](SetupIDE_Step12.png)(w:720)](SetupIDE_Step12.png)
    [/REGION]
    [REGION:caption]
    클릭하면 이미지 원본을 확인합니다.
    [/REGION]
    
1.  이제, **Working directory:** (작업 디렉터리) 끝에 위치한 **Browse** (탐색) 버튼을 클릭합니다.
    [REGION:lightbox]
    [![](SetupIDE_Step13.png)(w:720)](SetupIDE_Step13.png)
    [/REGION]
    [REGION:caption]
    클릭하면 이미지 원본을 확인합니다.
    [/REGION]
    
1.  에디터의 바이너리 경로가 위치한 디렉터리로 이동하여, `[UE4ROOT]\Engine\Binaries\Linux` 를 선택하고 **Choose** (선택) 버튼을 누릅니다.
    [REGION:lightbox]
    [![](SetupIDE_Step14.png)(w:720)](SetupIDE_Step14.png)
    [/REGION]
    [REGION:caption]
    클릭하면 이미지 원본을 확인합니다.
    [/REGION]
    
### 최종 결과

[REGION:lightbox]
[![](QtRunSettings_UE4.png)(w:720)](QtRunSettings_UE4.png)
[/REGION]
[REGION:caption]
    클릭하면 이미지 원본을 확인합니다.
[/REGION]

Qt Creator 로 UE4 를 Debug 및 Release 모드로 빌드하고 실행할 준비가 되었습니다.

## 3 - Qt Creator 로 빌드

UE4 를 빌드해 실행하도록 Qt Creator 환경설정을 마쳤으니, IDE 에서 UE4 를 실행할 준비가 되었습니다. IDE 에서 UE4 를 실행하기 전, 몇 가지 출력 창을 열어 보면 언리얼 빌드 시스템 작업 상태를 확인할 수 있습니다.

1.  **Edit** (편집) 버튼을 눌러 편집 모드로 들어가, Qt Creator 에디터를 엽니다.
    [REGION:lightbox]
    [![](SetupIDE_Step15.png)(w:720)](SetupIDE_Step15.png)
    [/REGION]
    [REGION:caption]
    클릭하면 이미지 원본을 확인합니다.
    [/REGION]
    [REGION:note]
    편집 모드에서는 UE4 에 탑재된 CPP 소스 코드를 확인, 디버깅, 편집 가능합니다.
    [/REGION]
    
1.  기본적으로 Qt Creator 는 메인 툴바를 숨어있습니다. 마우스 커서를 화면 상단에 올리거나 상단 가장자리를 클릭하면 툴바가 나타납니다.
    
    ![](SetupIDE_Step15A.png)

1.  이제 **Window** (창) 메뉴를 열고, **Output Panes** (출력 패널) 서브 메뉴에 커서를 올린 뒤, **Compile Output** (컴파일 출력)을 선택합니다. 다른 방법으로는 **Alt+4** 키를 누르면 **Compile Output** (컴파일 출력) 창 패널이 열립니다.
    
    ![](SetupIDE_Step15B.png)

    [REGION:note]
    **Compile Output** (컴파일 출력) 창 패널이 열리면 소스에서 UE4 를 빌드하는 도중 발생하는 오류를 감시할 수 있습니다.
    [/REGION]
   
### UE4 빌드

1.  화면 상단에 마우스 커서를 올리거나, 상단 가장자리를 터치하면 툴바가 나타납니다.

    ![](SetupIDE_Step15A.png)

1.  UE4 를 빌드하려면, **Build** (빌드) 메뉴를 열고 **Build Project "UE4"** (UE4 프로젝트 빌드) 버튼을 선택합니다. 다른 방법으로는, **Ctrl+B** 키를 누르면 UE4 가 빌드됩니다.

    ![](SetupIDE_Step15C.png)

### 중간 결과

[REGION:lightbox]
[![](SetupIDE_Step16.png)(w:720)](SetupIDE_Step16.png)
[/REGION]
[REGION:caption]
    클릭하면 이미지 원본을 확인합니다.
[/REGION]

이제, 컴파일러가 IDE 내 **컴파일러 출력** 창에 메시지를 내보내는 것이 보일 것입니다. 시스템 사양에 따라 엔진을 컴파일하는 데 10 분에서 1 시간 이상 걸릴 수도 있습니다. 소스에서 엔진을 컴파일하는 시간을 줄이려면, 램이 최소 8 기가바이트에 코어도 (하이퍼스레드 포함) 8 개 이상 되는 머신에서 컴파일할 것을 추천합니다.

## 4 - Qt Creator 에서 UE4 실행

엔진을 컴파일했으니, 에디터를 실행할 준비가 되었습니다. 이 단계에서는 IDE 를 사용하여 UE4 를 실행하겠습니다.

1.  UE4 실행 도중 어플리케이션 상태를 확인하려면 **Application Output** (어플리케이션 출력) 창을 엽니다. **Alt+3** 키를 누르면 됩니다.
    [REGION:lightbox]
    [![](SetupIDE_Step17a.png)(w:720)](SetupIDE_Step17a.png)
    [/REGION]
    [REGION:caption]
    클릭하면 이미지 원본을 확인합니다.
    [/REGION]
    
1.  IDE 에서 UE4 를 실행하려면, **Run** (실행) 버튼을 누릅니다. 다른 방법으로는 **Ctrl+R** 키를 누르면 됩니다.
    [REGION:lightbox]
    [![](SetupIDE_Step17.png)(w:720)](SetupIDE_Step17.png)
    [/REGION]
    [REGION:caption]
    클릭하면 이미지 원본을 확인합니다.
    [/REGION]

### 중간 결과

[REGION:lightbox]
[![](SetupIDE_Step18.png)(w:720)](SetupIDE_Step18.png)
[/REGION]
[REGION:caption]
    클릭하면 이미지 원본을 확인합니다.
[/REGION]

축하합니다! 이제 IDE 에서 UE4 가 실행되는 것이 보일 것입니다.

## 5 - 블루프린트 프로젝트 만들기

UE4 의 [](Engine/Basics/Projects/Browser) 에서 블루프린트 또는 CPP 프로젝트를 만들 수 있습니다. 여기서는 UE4 에서 새 블루프린트 프로젝트를 만드는 법을 보여드립니다. 이 글의 목적 상, 비행 장치가 있는 블루프린트 게임을 새로 만든다고 가정합시다. 다행히도, UE4 에 딱맞는 템플릿이 포함되어 있습니다!

1.  **새 프로젝트** 메뉴에서 **블루프린트** 메뉴가 열렸는지 확인합니다.
    [REGION:lightbox]
    [![](SetupIDE_Step19.png)(w:720)](SetupIDE_Step19.png)
    [/REGION]
    [REGION:caption]
    클릭하면 이미지 원본을 확인합니다.
    [/REGION]
    
1.  **Flying** (비행) 블루프린트 프로젝트 템플릿을 선택하고 이름을 `FlyingBP_Prj` 라 합니다.
    [REGION:lightbox]
    [![](SetupIDE_Step20.png)(w:720)](SetupIDE_Step20.png)
    [/REGION]
    [REGION:caption]
    클릭하면 이미지 원본을 확인합니다.
    [/REGION]
    
1.  **프로젝트 생성** 버튼을 누르면 Flying (비행) 블루프린트 프로젝트 템플릿을 사용하여 블루프린트 프로젝트를 새로 생성합니다.
    [REGION:lightbox]
    [![](SetupIDE_Step21.png)(w:720)](SetupIDE_Step21.png)
    [/REGION]
    [REGION:caption]
    클릭하면 이미지 원본을 확인합니다.
    [/REGION]
    [REGION:note]
    시스템 사양에 따라, UE4 가 새 블루프린트 프로젝트를 만드는 데 몇 분 걸릴 수 있습니다.
    [/REGION]
    
### 중간 결과

[REGION:lightbox]
[![](SetupIDE_Step22.png)(w:720)](SetupIDE_Step22.png)
[/REGION]
[REGION:caption]
    클릭하면 이미지 원본을 확인합니다.
[/REGION]

별다른 추가 작업 없이 UE4 가 새 블루프린트 프로젝트를 엽니다.

[REGION:lightbox]
[![](SetupIDE_Step23.png)(w:720)](SetupIDE_Step23.png)
[/REGION]
[REGION:caption]
    클릭하면 이미지 원본을 확인합니다.
[/REGION]

축하합니다! 블루프린트 프로젝트 템플릿을 통해 UE4 에서 블루프린트 프로젝트를 새로 만들었습니다. 프로젝트 템플릿이 있든 없든, 이제 어떤 유형의 블루프린트 프로젝트든 새로 만들 수 있습니다. 하지만 게임을 구동시키는 소스 코드를 만들어 변경하고플 수가 있습니다. 다음에는 UE4 에서 CPP 프로젝트를 새로 만드는 법을 보여드립니다.

## 6 - C++ 프로젝트 생성

지금까지 Linux 환경에서 UE4 를 실행할 수 있도록 IDE 를 환경설정하는 법을 배웠습니다. 또 프로젝트 템플릿을 사용하여 블루프린트 프로젝트를 새로 만드는 법도 배웠습니다. 여기서는 UE4 에서 C++ (CPP) 프로젝트를 새로 만드는 법을 보여드립니다. 이 데모 목적 상, 운전 장치가 있는 CPP 게임을 새로 만든다 가정하겠습니다.

1.  **새 프로젝트** 메뉴에서, **C++** 메뉴가 열렸는지 확인합니다.
    [REGION:lightbox]
    [![](SetupIDE_Step24.png)(w:720)](SetupIDE_Step24.png)
    [/REGION]
    [REGION:caption]
    클릭하면 이미지 원본을 확인합니다.
    [/REGION]

1.  **Vehicle** (비히클) CPP 프로젝트 템플릿을 선택하고, 프로젝트 이름을 `DrivingCPP_Prj` 라 합니다.
    [REGION:lightbox]
    [![](SetupIDE_Step25.png)(w:720)](SetupIDE_Step25.png)
    [/REGION]
    [REGION:caption]
    클릭하면 이미지 원본을 확인합니다.
    [/REGION]

1.  **프로젝트 생성** 버튼을 누르면 Vehicle CPP 프로젝트 템를릿을 사용하여 CPP 프로젝트를 새로 만듭니다.
    [REGION:lightbox]
    [![](SetupIDE_Step26.png)(w:720)](SetupIDE_Step26.png)
    [/REGION]
    [REGION:caption]
    클릭하면 이미지 원본을 확인합니다.
    [/REGION]
    [REGION:note]
    시스템 사양에 따라, UE4 가 CPP 프로젝트를 새로 만드는 데 몇 분 걸릴 수 있습니다. UE4 가 새 CPP 프로젝트를 생성한 이후, 그 CPP 프로젝트에 대한 Qt Creator 인스턴스가 실행되며, UE4Editor 는 닫힙니다.
    [/REGION]
    
1.  이제 새로 실행된 Qt Creator 의 **Configure Project** 메뉴가 보일 것입니다. 지금까지 배운 대로 새 CPP 프로젝트의 Build Settings 를 설정합니다. Debug Mode 에 대해서는:

    ![](SetupIDE_Step27a.png) 
    
    Release Mode 에 대해서는:
    
    ![](SetupIDE_Step27.png)

    [REGION:note]
    이 시점에서, 프로젝트 세팅은 원본 UE4 Editor 프로젝트 세팅을 상속하지 않습니다. 즉 UE4 CPP 프로젝트를 Qt Creator 에서 생성하면, 전 단계에서 배웠던 대로 프로젝트 세팅 환경설정을 해줘야 합니다.
    [/REGION]

1.  이제 새로운 CPP 프로젝트의 Run Settings 를 다음과 같이 설정합니다:

    ![](SetupIDE_Step28.png)

1.  IDE 왼쪽 패널의 **Edit** 버튼을 클릭하여 **편집** 모드로 전환합니다. 다른 방법으로는, **Ctrl+2** 키를 누르면 Qt Creator 의 **편집 모드** 가 열립니다.
    [REGION:lightbox]
    [![](SetupIDE_Step29.png)(w:720)](SetupIDE_Step29.png)
    [/REGION]
    [REGION:caption]
    클릭하면 이미지 원본을 확인합니다.
    [/REGION]

1.  이제 **Run** 버튼을 클릭합니다. 또는 **Ctrl** 키를 누르면 IDE 에서 UE4 가 실행됩니다.

    [REGION:lightbox]
    [![](SetupIDE_Step30.png)(w:720)](SetupIDE_Step30.png)
    [/REGION]
    [REGION:caption]
    클릭하면 이미지 원본을 확인합니다.
    [/REGION]
    
1.  **Missing DriveCPP_Prj Modules** 대화창이 뜨면, **예** 버튼을 클릭합니다.

    [REGION:lightbox]
    [![](SetupIDE_Step31.png)(w:720)](SetupIDE_Step31.png)
    [/REGION]
    [REGION:caption]
    클릭하면 이미지 원본을 확인합니다.
    [/REGION]

1.  시스템 사양에 따라, IDE 가 새 CPP 프로젝트를 빌드하고 실행하는 데 몇 분 걸릴 수 있습니다.
    [REGION:lightbox]
    [![](SetupIDE_Step32.png)(w:720)](SetupIDE_Step32.png)
    [/REGION]
    [REGION:caption]
    클릭하면 이미지 원본을 확인합니다.
    [/REGION]
    
### 중간 결과

[REGION:lightbox]
[![](SetupIDE_Step33.png)(w:720)](SetupIDE_Step33.png)
[/REGION]
[REGION:caption]
    클릭하면 이미지 원본을 확인합니다.
[/REGION]

축하합니다! 이제 Qt Creator 안에서 새로운 CPP 프로젝트가 실행되는 것이 보일 것입니다. 새로운 CPP 프로젝트를 만들어 실행했으니, Linux 환경의 IDE 에서 UE4 프로젝트 작업을 하는 데 필요한 모든 것을 배우셨습니다. 

### 언리얼 엔진 시작하기

지금까지 배운 내용은 다음과 같습니다:

✓ UE4 를 Debug 및 Release 모드에서 빌드할 수 있도록 IDE 환경설정하는 법.  
✓ IDE 에서 UE4 로 새 블루프린트 프로젝트를 만들고 환경설정하는 법.  
✓ IDE 에서 UE4 로 새 블루프린트 및 C++ 프로젝트를 만들고 환경설정하는 법.  

[](GettingStarted) 문서에서 언리얼 엔진 사용법을 배워보세요! UE4 빠른 적응을 돕는 튜토리얼은 다음과 같습니다:

*   [](Engine/Content/QuickStart)

*   [](Programming/QuickStart)

*   [](Engine/QuickStart)