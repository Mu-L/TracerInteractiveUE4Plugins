INTSourceChangelist:3877048
Availability:Public
Title:Linux のクロスコンパイル
Crumbs:%ROOT%
Description:Linux プラットフォームをターゲットにして、Windows でクロスコンパイル ツールチェーンを設定してみよう。
Version:4.15
SkillLevel:Advanced
type:overview
parent:Platforms/Linux
tags:Linux
related:Programming/Development/CompilingProjects
related:Programming/Development/BuildConfigurations
related:Engine/Basics/Projects/Packaging
related:Platforms/Linux/AdvancedLinuxDeveloper/LinuxCrossCompileLegacy
related:Programming/Basics/ConfigurationFiles
topic-image:GettingStarted_Topic.png
prereq:Platforms/Linux/BeginnerLinuxDeveloper/SettingUpAnUnrealWorkflow


[TOC(start:2 end:3)]

![](LinuxXC_Banner.png)(w:1200)

クロスコンパイル ツールチェーンの改善に伴い、 
アンリアル エンジン 4 (UE4) デベロッパーは Windows 開発環境においてさまざまなプラットフォームをターゲットにすることができるようになりました。このガイドでは、クロスコンパイル ツールチェーンの使用可能なプラットフォームおよびツールチェーンのダウンロード ページの紹介、 
続いて UE4 プロジェクトを Linux 用にクロスコンパイルする設定方法を説明します。プロジェクト開発にアンリアル エンジン 4.15 をご使用の場合は、 
ターゲット プラットフォーム間の切り替え方法も学習することができます。

[REGION:note]
4.13 より前のエンジンをご使用の場合は、[](Platforms/Linux/AdvancedLinuxDeveloper/LinuxCrossCompileLegacy) を参照してください。
[/REGION]

[INCLUDE:Platforms/Linux/AdvancedLinuxDeveloper/LinuxCrossCompileLegacy#Why_XC]

## ツールチェーンの設定

Windows (ホスト) コンピューターからツールチェーンをセットアップして前述のプラットフォームのいずれかをターゲットにするには、 
ツールチェーンをダウンロードしてシステムの環境変数を設定して、環境に基づいて Linux と ARM 向けにアプリケーションをパッケージ化する必要があります。Linux プラットフォーム向けに UE4 プロジェクトを初めてパッケージ化する場合は、 
Linux 用の Visual Studio を使ってエンジンをビルドする必要もあります。現在サポート対象のプラットフォームのいずれかをターゲットにするようにホスト環境を設定するには、 
以下の手順に従います。 

[REGION:note]
これから説明する手順を開始する前に、インターネット接続が信頼できるものであることを確認してください。ツールチェーンのダウンロード時間は数分から数時間です 
(インターネット接続速度によって異なります)。
[/REGION]

### ツールチェーンのダウンロード

1.	エンジン バージョンに適したクロス ツールチェーンをダウンロードしてください。

1.	そして新規フォルダを作成し、そのフォルダに `Linux_CrossCompileToolChain` と名前を付けます。

	[REGION:lightbox]
		[![](LinuxXC_Step2.png)(w:600)](LinuxXC_Step2.png)
	[/REGION]

	[REGION:caption]
		クリックしてフルサイズで表示
	[/REGION]

	[REGION:note]
	使用している命名規則が異なる場合は、さきほど付けた名前を適切なフォルダ名に変更してください。
	[/REGION]

1.	解凍ファイルの保存先が前のステップで作成したフォルダになっていることを確認して、ツールチェーンを **解凍** します。 

	![](LinuxXC_Step3.png)(w:600)

	[REGION:caption]
		クリックしてフルサイズで表示
	[/REGION]

1.	`[ROOT]/Linux_CrossCompileToolChain/v11_clang-5.0.0-centos7` フォルダを開き、解凍ファイルを表示します。

	[REGION:lightbox]
		[![](LinuxXC_Step4.png)(w:600)](LinuxXC_Step4.png)
	[/REGION]

	[REGION:caption]
		クリックしてフルサイズで表示
	[/REGION]

	#### サポート対象プラットフォーム

	以下の表で適切なツールチェーンを確認してダウンロードしてください。

	| **アーキテクチャ**                                                    | **サブアーキテクチャ** | **メーカー** | **システム** | **Application Binary Interface (abi)** |
	| ------------------------------------------------------------------- | -------------------- | ---------- | ---------- | -------------------------------------- |
	| **[AArch64](https://fedoraproject.org/wiki/Architectures/AArch64)** | N/A                  | 不明    | Linux      | gnueabi                                |
	| **[ARM](https://developer.arm.com/)**                               | N/A                  | 不明    | Linux      | gnueabihf                              |
	| **[i686](https://software.intel.com/en-us/)**                       | N/A                  | 不明    | Linux      | gnu                                    |
	| **[x86_64](http://developer.amd.com/)**                             | N/A                  | 不明    | Linux      | gnu                                    |
	[REGION:note]

	i686 プラットフォーム用のエンジン ライブラリはまだ追加されていません。
	[/REGION]

### 環境変数の設定

1.	`LINUX_MULTIARCH_ROOT` 環境変数を設定する前に、**Setup** バッチファイル (`Setup.bat`) をダブルクリックして、コンピューターに対する適切な変数設定を出力します。 

	[REGION:lightbox]
		[![](LinuxXC_Step5.png)(w:600)](LinuxXC_Step5.png)
	[/REGION]

	[REGION:caption]
		クリックしてフルサイズで表示
	[/REGION]

1.	この時点で新しい **OutputEnvVars** テキスト ファイルが `v11_clang-5.0.0-centos7` フォルダに作成されています。 

	[REGION:lightbox]
		[![](LinuxXC_Step6.png)(w:600)](LinuxXC_Step6.png)
	[/REGION]

	[REGION:caption]
		クリックしてフルサイズで表示
	[/REGION]

	[REGION:tip]
	`OutputEnvVars.txt` ファイルには、システムの環境変数の設定に役立つ情報が含まれています。
	[/REGION]

1.	**[Windows] キー** と **[Pause Break] キー** を一緒に押して **[System Information]** メニューを開きます。 
	**[Advanced System Settings (詳細システム設定)]** からは **[System Properties]** メニューの **[Advanced]** サブメニューが開くようになっています。

	[REGION:lightbox]
		[![](LinuxXC_Step8.png)(w:600)](LinuxXC_Step8.png)
	[/REGION]

	[REGION:caption]
		クリックしてフルサイズで表示
	[/REGION]

1.	**[Environment Variables...(環境変数...)]** ボタンをクリックします

	![](LinuxXC_Step9.png)

1.	**システム変数** を追加するには、**[System variables]** リストの **[New...]** ボタンをクリックします。

	![](LinuxXC_Step10.png)

	[REGION:note]
	次のステップへ進む前に `OutputEnvVars.txt` を開いておきましょう。

	[REGION:lightbox]
		[![](LinuxXC_Step10Note.png)(w:600)](LinuxXC_Step10Note.png)
	[/REGION]

	[REGION:caption]
		クリックしてフルサイズで表示
	[/REGION]

	[/REGION]

1.	**[New System Variable]** ダイアログ メニューが開いたら `LINUX_MULTIARCH_ROOT` 環境変数設定を **[New System Variable]** ダイアログのテキストボックスへコピーします。

	[REGION:lightbox]
		[![](LinuxXC_Step11.png)(w:600)](LinuxXC_Step11.png)
	[/REGION]

	[REGION:caption]
		クリックしてフルサイズで表示
	[/REGION]

1.	**[Evironment Variables]** メニューに戻り、**[Ok]** ボタンを押して `LINUX_MULTIARCH_ROOT` 環境変数を保存します。

	![](LinuxXC_Step14.png)

	[REGION:note]
	パッケージ化の間、エンジンは `LINUX_ROOT` よりも `LINUX_MULTIARCH_ROOT` を優先します。従って `LINUX_ROOT` 環境変数が既に設定されていても削除する必要はありません。
	[/REGION]

1.	**[OK]** ボタンを押して **[System Properties]** メニューを終了します。

	![](LinuxXC_Step15.png)

	[REGION:note]
	環境変数をシステムに新たに追加したので、実行中の **Visual Studio** と **Command Prompt** のインスタンスをすべて再起動する必要があります。
	[/REGION]

### Linux ビルド コンフィギュレーションの設定

初めて Linux のパッケージ化を行う場合は以下の手順に従ってください。

1.	**Command Prompt** を開いて `[UE4 ROOT]/Setup.bat` を実行して、**Visual Studio** から UE4 をビルドするための前提条件の依存性の確認、更新、およびインストールを行います。

	![](LinuxXC_Step17.png)

1.	`[UE4 ROOT]/GenerateProjectFiles.bat` を実行し、プロジェクト ファイルを UE4 向けに設定します。

	![](LinuxXC_Step18.png)

	[REGION:warning]
	`GenerateProjectFiles.bat` は UE4 が入っているルート フォルダ (`[UE4 ROOT]`) 内で実行されなければなりません。[Unreal Game Sync](https://github.com/EpicGames/UnrealEngine/blob/release/Engine/Source/Programs/UnrealGameSync/Deployment.txt) でバッチファイルを実行する場合、**Visual Studio** において Linux は 有効な **Build Configuration** として表示されません。
	[/REGION]

1.	`[UE4 ROOT]` の中の **「UE4.sln」** をダブルクリックして **Visual Studio** の UE4 ソリューションを開きます。

	[REGION:lightbox]
		[![](LinuxXC_Step19.png)(w:600)](LinuxXC_Step19.png)
	[/REGION]

	[REGION:caption]
		クリックしてフルサイズで表示
	[/REGION]

1.	UE4 をビルドしていない場合は、**F5** キーを押して Visual Studio から UE4 をビルドし実行します。

	[REGION:lightbox]
		[![](LinuxXC_Step20.png)(w:600)](LinuxXC_Step20.png)
	[/REGION]

	[REGION:caption]
		クリックしてフルサイズで表示
	[/REGION]

1.	次にエンジンの実行を停止し、**Visual Studio** に戻って Visual Studio で **Linux** ソリューション プラットフォームを選択します。キーボードで **Ctrl+Shift+B** を同時に押すと Linux 向けのビルドになります。

	[REGION:lightbox]
		[![](LinuxXC_Step21.png)(w:600)](LinuxXC_Step21.png)
	[/REGION]

	[REGION:caption]
		クリックしてフルサイズで表示
	[/REGION]

	[REGION:note]
	この時点で、Visual Studio の **[Output] ウィンドウ** でツールチェーンが表示されます。

	[REGION:lightbox]
		[![](LinuxXC_Step21Note.png)(w:600)](LinuxXC_Step21Note.png)
	[/REGION]

	[REGION:caption]
		クリックしてフルサイズで表示
	[/REGION]
	[/REGION]

## 特定プラットフォームのターゲット化

[REGION:note]
バージョン 4.14 は e x86_64 プラットフォームのみをターゲットとしています。次のセクションはバージョン 4.15 を使用するデベロッパー向けの説明となります。
[/REGION]

ターゲット プラットフォームを指定するには、プロジェクトの [Default Engine Configuration File](Programming/Basics/ConfigurationFiles) を編集する必要があります。そのファイルの保存場所 (`[Project Directory]\Config`) で  
`DefaultEngine.ini` を開いて次の行を追加します。

	[/Script/LinuxTargetPlatform.LinuxTargetSettings]
	TargetArchitecture=X86_64UnknownLinuxGnu

`TargetArchitecture` は以下の値を自由に設定してください。

* X86_64UnknownLinuxGnu
* ArmUnknownLinuxGnueabihf
* AArch64UnknownLinuxGnueabi

## 結果

これで終わりです！Linux 用プロジェクトのパッケージ化にクロスコンパイル ツールチェーンが使用されるようになります。

[REGION:lightbox]
	[![](LinuxXC_EndResult.png)(w:600)](LinuxXC_EndResult.png)
[/REGION]

[REGION:caption]
	クリックしてフルサイズで表示
[/REGION]

 これで、Windows (ホスト) コンピューターから各種 Linux プラットフォーム用にプロジェクトを [コンパイル](Programming/Development/CompilingProjects)、[ビルド](Programming/Development/BuildConfigurations)、[パッケージ化](Engine/Basics/Projects/Packaging) することが可能になりました。 
 
