INTSourceChangelist:6622979
Availability: Public
Title: Linux 에서 Android 퀵 스타트
Description: Linux 에서 Android 로 게임을 생성, 디플로이, 패키징하는 법을 배웁니다.
Type: quick start
Version: 4.17
Parent: Platforms/Linux
Tags: Linux
skilllevel:Intermediate
topic-image: androidLinuxQS_topic.png
Order: 5

[TOC (start:2 end:2)]

[REGION:imagetable]
![](DeployedAndroidGame_Linux.png)(w:900)  
*이 글에서는 언리얼 엔진 4 (UE4) 를 사용하여 Linux 에서 Android 디바이스로 게임을 만들어 디플로이하고 패키징해 봅니다.*
[/REGION]

이 글은 Linux 에서 Android 디바이스용 게임을 만들어 배포하려는 개발자를 위한 글입니다. 여기서는 Linux 에서 UE4 로 Android 디바이스를 환경설정하는 법, 궁극적으로는 Linux 에서 Android에 모바일 게임을 디플로이하고 패키징하는 법을 안내해 드립니다.

[REGION:quote]
커뮤니티의 뛰어난 재능 기부 덕에 UE4 에서 Linux 용 Android 지원이 가능했습니다. 감사합니다.
[/REGION]

## 1 - 필수 구성

언리얼 엔진 4 는 특수한 버전의 Android 소프트웨어 개발 키트(SDK), CodeWorks for Android 를 사용합니다. CodeWorks for Android 덕에 언리얼 엔진 4 로 Android 개발을 하는 데 필요한 SDK 및 네이티브 개발 키트 (NDK) 구성을 쉽게 할 수 있습니다. Android SDK( 또는 CodeWorks for Android) 구형 (1R5 이전) 버전이 설치된 경우, 설치를 해제한 뒤 언리얼 엔진 4 와 함께 배포되는 CodeWorks for Android 인스톨러를 사용하여 [CodeWorks for Android](https://developer.nvidia.com/codeworks-android) 를 설치해 주시기 바랍니다.

[REGION:note]
Android SDK 와 엔진의 호환성을 위해 언리얼 엔진 4 에 CodeWorks for Android 인스톨러를 번들로 포함시켰습니다. 참고로 언리얼 엔진 4.16 에는 CodeWorks for Android 1R6u1 이 포함되어 있습니다.
[/REGION]

Linux 에서 Android 작업을 시작하는 방법을 선보이기 위한 목적 상, 언리얼 엔진 4.14 버전에 CodeWorks for Android 1R6u1 버전을 사용하겠습니다. 먼저 엔진을 닫고 CodeWorks for Android 1R6u1 설치를 시작해야 합니다. 또 자바 개발 키트 8 (JDK 8) 이 설치되어 있는지, `JAVA_HOME` 환경 변수는 JDK 올바른 버전으로 설정되어 있는지 확인해야 합니다. `JAVA_HOME` 이 제대로 설정되었는지 확인하기 위해서는, 터미널에 `echo $JAVA_HOME` 이라 입력합니다. JDK 버전이 맞지 않으면, [JDK 8 다운로드](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html) 후 Linux 컴퓨터에 설치한 뒤, `JAVA_HOME` 환경 변수가 새로 설치된 JDK 로 되어있는지 확인합니다.

계속하기 전 참고로, 현재 Linux 에서 Android Vulkan 은 지원하지 않습니다.

1.  우선 Terminal 을 열고 컴파일된 엔진이 들어있는 `[UE4Root]` 폴더로 이동합니다 (`cd` 명령을 사용하여, shell 작업 디렉터리를 변경합니다).

    ![](LinuxAndroid_Step0.png)(w:900)

1.  `[UE4Root]` 폴더 안에서 CodeWorks for Android 1R6u1 바이너리 파일을 (**CodeWorksforAndroid-1R6u1-linux-x64.run**) 찾습니다. 터미널에 다음과 같이 입력하면 됩니다: `cd Engine/Extras/AndroidWorks/Linux`.

    ![](LinuxAndroid_Step1.png)(w:900)

1.  터미널에 `ls -l` 을 치면, 디렉터리 내용이 긴 리스트로 나옵니다.

    ![](LinuxAndroid_Step2.png)(w:900)

    파일 권한 설정을 보면 **CodeWorksforAndroid-1R6u1-linux-x64.run** 실행 준비가 되지 않았습니다. CodeWorks for Android 1R6u1 바이너리를 실행하려면, 파일 접근 권한 중 "실행" 권한을 허용해야 합니다.

1.  `CodeWorksforAndroid-1R6u1-linux-x64.run` 파일 권한 세팅 변경을 위해 일반 실행파일처럼 실행할 수 있도록 해줘야 하니, 터미널에 `chmod +x CodeWorksforAndroid-1R6u1-linux-x64.run` 이라 입력합니다.
    
    ![](LinuxAndroid_Step3.png)(w:900)

    [REGION:tip]
    `chmod` 명령 관련 자세한 내용은 터미널에 `man chmod` 라 입력하면 `chmod` 설명서가 표시됩니다.
    [/REGION]

1.  터미널에 `ls -l` 을 입력합니다.

    ![](LinuxAndroid_Step4.png)(w:900)

    이미지에 강조된 부분이 파일의 권한 설정이며, CodeWorks for Android 1R6u1 바이너리 파일 실행 준비가 되었음을 알 수 있습니다.

1.  CodeWorks for Android 바이너리를 실행하려면, 터미널에 `./CodeWorksforAndroid-1R6u1-linux-x64.run` 이라 입력합니다.

    ![](LinuxAndroid_Step5.png)(w:900)

    [REGION:warning]
    다음 단계로 넘어가기 전 컴퓨터에 인터넷이 연결되어 있는지 확인하세요.
    [/REGION]

1.  CodeWorks for Android 1R6u1 바이너리가 **NVIDIA CodeWorks for Android** 인스톨러 압축을 해제한 후, **Installer Welcome** 창이 뜨며, **Next** 또는 **Cancel** 중에서 선택할 수 있습니다.

    ![](LinuxAndroid_Step6.png)(w:900)

1.  **Installer Welcome** 창에서 **Next** 버튼을 눌러 설치 프로세스를 시작합니다.

    ![](LinuxAndroid_Step7.png)(w:900)

1.  **Android Developer's Welcome Window** 창에서 **Next** 버튼을 눌러 설치 프로세스를 계속합니다.

    ![](LinuxAndroid_Step8.png)(w:900)

1.  CodeWorks for Android 1R6u1 설치 및 다운로드 디렉터리를 지정합니다.

    ![](LinuxAndroid_Step9.png)(w:900)

1.  **Next >** 버튼을 누르면 NVIDIA 에서 CodeWorks for Android 1R6u1 을 다운로드하고, 결국 컴퓨터에 CodeWorks 가 설치됩니다.

    ![](LinuxAndroid_Step10.png)(w:900)

1.  **CodeWorks for Android 1R6u1** 이 설치되고 있는지 확인한 후 **Android Component Manager** 창에서 **Next** 버튼을 클릭합니다.

    ![](LinuxAndroid_Step11.png)(w:900)

1.  **Terms and Conditions** 창이 뜨면, 시간을 조금 들여 조항을 전부 확인한 뒤 **Accept All** 박스를 체크합니다.

    ![](LinuxAndroid_Step12.png)(w:900)

1.  **Accept** 버튼을 클릭하면 설치 프로세스가 시작됩니다.

    ![](LinuxAndroid_Step13.png)(w:900)

1.  인스톨러가 설치 프로세스를 완료하면, **Next >** 버튼을 눌러 계속합니다.

    ![](LinuxAndroid_Step14.png)(w:900)

1.  **Installation Complete** 창이 열리면, **Finish** 버튼을 클릭하여 설치를 마칩니다.

    ![](LinuxAndroid_Step15.png)(w:900)

1.  컴퓨터를 리부팅한 후 다음 단계로 넘어갑니다.

    ![](LinuxAndroid_Note16.png)(w:900)

    [REGION:tip]
    Ubuntu GUI 를 사용하지 않으려면, 터미널에 `sudo reboot` 라 입력하여 컴퓨터를 재시작하면 됩니다.
    [/REGION]

[REGION:lightbox]
[![](Step1_EndResult.png)(w:900)](Step1_EndResult.png)
[/REGION]
[REGION:caption]
이미지를 클릭하면 원본을 확인합니다.
[/REGION]

## 2 - Android 디바이스 구성

Linux 컴퓨터에 Android SDK 를 설치했다면, Android 디바이스용 모바일 게임 개발을 시작할 준비가 거의 다 된 것입니다. 하지만 언리얼 엔진 게임을 Android 디바이스에서 실행하기 위해서는, 먼저 Android의 개별 환경을 활성화시켜야 합니다.

[REGION:note]
다음 단계로 넘어가기 전 USB 케이블이 있는지 확인하세요.
[/REGION]

### Android 개발 옵션 활성화

1.  USB 케이블로 Linux 컴퓨터와 Android 디바이스를 연결합니다.

1.  Android 디바이스에서 **Settings** 어플리케이션을 실행합니다.

    [REGION:lightbox]
        [![](LinuxAndroid_Step17.png)(w:180)](LinuxAndroid_Step17.png)
    [/REGION]
    
    [REGION:caption]
        클릭하면 이미지 원본을 확인합니다.
    [/REGION]

1.  **Developer Options** (개발자 옵션)을 탭하여 개발자 옵션 메뉴를 엽니다.

    [REGION:lightbox]
        [![](LinuxAndroid_Step18.png)(w:180)](LinuxAndroid_Step18.png)
    [/REGION]
    
    [REGION:caption]
        클릭하면 이미지 원본을 확인합니다.
    [/REGION]    

    [REGION:note]
    이 항목이 보이지 않는 경우, 디바이스에서 **Developer Options** (개발자 옵션)을 활성화시켜 줘야 합니다. **Settings** 어플리케이션을 열고, 화면을 아래로 내려 **About phone** 을 선택합니다. **About phone** 을 선택한 후 화면을 아래로 내려 **Build number** 부분을 일곱(7) 번 탭합니다. Android 디바이스에서 개발자 옵션을 활성화시키는 방법 관련 자세한 안내는 [Android's User Guide](https://developer.android.com/studio/debug/dev-options.html) 를 참고하세요.
    [/REGION]

### USB 디버깅 활성화

1.  **개발자 옵션** 메뉴에서 **USB debugging** (USB 디버깅)을 켭니다.

    [REGION:lightbox]
        [![](LinuxAndroid_Step19.png)(w:180)](LinuxAndroid_Step19.png)
    [/REGION]
    
    [REGION:caption]
        클릭하면 이미지 원본을 확인합니다.
    [/REGION]

1.  USB 디버깅 활성화를 확인하는 창이 열립니다. 안내를 읽은 뒤 **OK** 버튼을 탭합니다.

    [REGION:lightbox]
        [![](LinuxAndroid_Step20.png)(w:180)](LinuxAndroid_Step20.png)
    [/REGION]
    
    [REGION:caption]
        클릭하면 이미지 원본을 확인합니다.
    [/REGION]

    USB 디버깅이 활성화되었습니다.
    ![](LinuxAndroid_Step20Note.png)

1.  이제 Android 디바이스에서 USB 케이블을 뽑은 뒤 몇 초 후 다시 연결합니다. Android 4.2.2 이상을 실행중인 디바이스를 연결했다면, RSA 키를 수락해야 Linux 컴퓨터를 통한 디버깅이 가능하다는 창이 뜹니다. **Always allow from this computer** 옆 박스를 체크한 뒤 **OK** 버튼을 탭합니다.

    [REGION:lightbox]
        [![](LinuxAndroid_Step21.png)(w:180)](LinuxAndroid_Step21.png)
    [/REGION]
    
    [REGION:caption]
        클릭하면 이미지 원본을 확인합니다.
    [/REGION]

**중간 결과**

이제 Linux 컴퓨터에서 디바이스 디버깅이 가능한지 확인할 준비가 되었습니다. 디바이스 구성이 잘 되었는지 확인하려면, 터미널을 열고 `adb devices` 라 입력합니다.

![](LinuxAndroid_Step22.png)(w:900)

Linux 컴퓨터에 연결된 디바이스 목록이 보일 것입니다. 언리얼 엔진 게임을 실행할 준비가 된 Android 디바이스가 생겼다는 뜻입니다.

[REGION:note]
    터미널에 `adb devices` 를 입력했는데도 디바이스가 보이지 않는 경우, Linux 컴퓨터에 adb 구성을 해줘야 할 수 있습니다. [Android Debug Bridge User Guide](https://developer.android.com/studio/command-line/adb.html) 에서 adb 관련 상세 정보 및 구성 방법을 참고하세요. 컴퓨터에 이미 adb 가 설치 및 환경설정된 것이 확실한 경우, 다음과 같은 문제해결 방법을 시도해 보세요:

    * 컴퓨터에서 Android 디바이스 연결을 해제한 뒤 다시 연결해야 할 수 있습니다.
    * **Always allow from this computer** 옆의 박스를 체크하지 않은 경우, 체크해 보세요.
    * 디바이스가 허가되지 않은 것으로 나타나는 경우, Linux 컴퓨터에서 해당 Android 디바이스를 USB 디버깅하도록 허가해야 할 수 있습니다.
    * 어떤 경우, 제대로 설정된 디바이스도 미디어 트랜스퍼 프로토콜(MTP)을 사용하는 미디어 디바이스로 연결된 경우 인식되지 않을 수 있습니다.
    * 또한, 제대로 설정된 디바이스도 픽처 트랜스퍼 프로토콜(PTP)을 사용하는 카메라 디바이스로 연결된 경우 인식되지 않을 수 있습니다.
[/REGION]

## 3 - 프로젝트 생성

지금까지 Android SDK 를 설치하고 환경설정, Android 개발 환경 구성을 했고, Linux 컴퓨터에 연결된 모든 디바이스가 Android Debug Bridge 에 나열될 것입니다. UE4 에서 새로운 모바일 프로젝트를 만들 준비가 되었습니다.

### 모바일 프로젝트 생성

1.  **언리얼 프로젝트 브라우저** 를 열고 다음과 같은 옵션으로 새 블루프린트 프로젝트를 생성합니다.

    * **Third Person** (삼인칭) 템플릿을 선택합니다.
    * Target Hardware (타깃 하드웨어)를 **Mobile / Tablet** (모바일 / 태블릿)으로 선택합니다.
    * Graphics Level (그래픽 레벨)을 **Scalable 3D or 2D** (스케일가능 3D 또는 2D)로 설정합니다.
    * **No Starter Content** (시작용 콘텐츠 없음)을 선택합니다.

    [REGION:lightbox]
        [![](LinuxAndroid_Step23.png)(w:720)](LinuxAndroid_Step23.png)
    [/REGION]
    
    [REGION:caption]
        클릭하면 이미지 원본을 확인합니다.
    [/REGION]

1.  프로젝트에 이름을 짓고, 프로젝트의 **Folder** (폴더) 위치를 설정합니다. 이 튜토리얼에서는 이름을 `LinuxAndroidProject` 라 합니다.

    [REGION:lightbox]
        [![](LinuxAndroid_Step24.png)(w:720)](LinuxAndroid_Step24.png)
    [/REGION]
    
    [REGION:caption]
        클릭하면 이미지 원본을 확인합니다.
    [/REGION]

1.  프로젝트 세팅을 구성한 이후, **프로젝트 생성** 버튼을 클릭합니다.

    [REGION:lightbox]
        [![](LinuxAndroid_Step25.png)(w:720)](LinuxAndroid_Step25.png)
    [/REGION]
    
    [REGION:caption]
        클릭하면 이미지 원본을 확인합니다.
    [/REGION]

**중간 결과**

[REGION:lightbox]
    [![](LinuxAndroid_Step3EndResult.png)(w:720)](LinuxAndroid_Step3EndResult.png)
[/REGION]

[REGION:caption]
    클릭하면 이미지 원본을 확인합니다.
[/REGION]

축하합니다! 모바일 디바이스에 사용할 수 있는 새 UE4 프로젝트를 생성하셨습니다.

## 4 - 레벨 디플로이

레벨을 디플로이한다는 것은 Android 디바이스 상에 UE4 에서 레벨을 [쿠킹](Engine/Deployment/Cooking) 및 [실행](Engine/Deployment/Launching) 한다는 뜻입니다. Android 디바이스 상에 모바일 어플리케이션을 디플로이한다는 것은, 고려할 것이 많다는 뜻이기도 합니다. 예를 들면, Linux 컴퓨터의 컴파일 환경, Android 디바이스의 인스트럭션 세트, 디바이스의 렌더링 성능 등입니다. 그러므로 디플로이 전 일반적으로 고려해야 하는 사항을 몇 가지 검토한 후 **ThirdPersonExampleMap** 레벨을 Android 디바이스에 디플로이할 것입니다.

### Linux 에서 디플로이 전 고려할 사항

어플리케이션 디플로이 전, 이 목록을 참고하면 디바이스에 게임을 디플로이하는 도중 발생할 수 있는 일반적인 문제 몇 가지를 피하는 데 도움이 될 것입니다.

* 너무 당연해 보일 수는 있지만, 컴퓨터에 Android 디바이스가 제대로 연결되었는지 확인해 주세요.
* Android Debug Bridge (adb)에 연결된 디바이스가 나오는지 확인하세요. adb 관련 자세한 내용은 터미널에 `adb --help` 라 입력합니다. [Android Debug Bridge User Guide](https://developer.android.com/studio/command-line/adb.html) 에서 adb 관련 자세한 정보는 물론 구성 방법을 확인할 수 있습니다.
* Android에 게임을 제대로 빌드, 쿠킹, 패키징, 디플로이하기 위해서는, JDK 8 이 설치되었는지, `JAVA_HOME` 환경 변수는 올바른 JDK 버전으로 설정되었는지 확인해야 합니다. `JAVA_HOME` 이 제대로 설정되었는지 확인하려면, 터미널에 `echo $JAVA_HOME` 라 입력하면 됩니다. 올바른 JDK 버전이 보이지 않으면, [JDK 8 다운로드](http://www.oracle.com/technetwork/java/javase/downloads/index.html) 후 Linux 컴퓨터에 설치하고, `JAVA_HOME` 환경 변수가 새로 설치된 JDK 로 설정되었는지 확인합니다. `JAVA_HOME` 환경 변수는 [Android SDK Project Settings](https://developer.android.com/studio/command-line/variables.html) 에서 설정할 수 있습니다.
* 적합한 ARM 아키텍처용으로 빌드중인지 확인합니다. 다르면 프로젝트가 제대로 디플로이되지 않습니다. 디바이스에서 정상 작동하는 인스트럭션 세트를 확인한 이후, 에디터 **편집 > 프로젝트 세팅... > Android > Build** 에서 적합한 ARM 아키텍처 지원을 선택하고, **Support arm7** 또는 **Support arm64** 중에서 선택합니다.
* 현재 Linux UE4 에는 **Vulkan** 렌더링 지원이 제공되지 않습니다.
* 여러가지 Android 디바이스가 고유한 방식으로 다양한 텍스처 포맷을 지원합니다. Android 디바이스에 지원되는 텍스처 포맷이 무엇인지 확실치 않은 경우, 타깃 텍스처를 Ericsson Texture Compression 1 (ETC 1) 압축 방식으로 설정해 보세요. 대부분의 Android 디바이스에 지원되는 방식입니다. 다중 텍스처 지원 관련 자세한 내용은, Android의 [Creating Multiple APKs for Different GL Textures](https://developer.android.com/training/multiple-apks/texture.html) 문서를 참고하세요.

#### 사용가능 텍스처 포맷 검토

현재 지원되는 텍스처 관련 자세한 내용은, Android 디바이스에 흔히 지원되는 텍스처에 대한 간략 개요가 제공되는 다음 표를 참고하세요:

[INCLUDE:Platforms/Mobile/Android/Reference#androidformats]

### 레벨 디플로이

Android 디바이스에 게임을 디플로이할 때 가장 중요하게 고려해야 할 사항을 몇 가지 살펴봤으니, 이제 디플로이 프로세시를 시작할 준비가 되었습니다.

1.  먼저 **ThirdPersonExampleMap** 이 열렸는지 확인합니다.

    [REGION:lightbox]
        [![](LinuxAndroid_Step26.png)(w:900)](LinuxAndroid_Step26.png)
    [/REGION]
    
    [REGION:caption]
        클릭하면 이미지 원본을 확인합니다.
    [/REGION]

1.  **Devices** (디바이스) 메뉴를 열기 위해서는, **메인 툴바** 의 **실행** 아이콘 옆 작은 화살표를 클릭합니다.

    [REGION:lightbox]
        [![](LinuxAndroid_Step27.png)(w:900)](LinuxAndroid_Step27.png)
    [/REGION]
    
    [REGION:caption]
        클릭하면 이미지 원본을 확인합니다.
    [/REGION]

1.  **디바이스** 메뉴에서 자신의 Android 디바이스를 선택합니다.

    [REGION:lightbox]
        [![](LinuxAndroid_Step28.png)(w:900)](LinuxAndroid_Step28.png)
    [/REGION]
    
    [REGION:caption]
        클릭하면 이미지 원본을 확인합니다.
    [/REGION]

1.  언리얼 엔진이 레벨을 Android 디바이스에 디플로이할 것입니다.

    [OBJECT:EmbeddedVideo]
        [PARAMLITERAL:width]
        640
        [/PARAMLITERAL]
        [PARAMLITERAL:height]
        360
        [/PARAMLITERAL]
        [PARAMLITERAL:videoid]
        afagQeEvf4Q
        [/PARAMLITERAL]
    [/OBJECT]

    [REGION:note]
    비디오에서 보듯, 에디터 우하단 구석에 어플리케이션 디플로이 프로세스 진행상황이 업데이트됩니다.
    [/REGION]

1.  프로젝트 쿠킹 및 실행이 완료되면, 디바이스에 레벨이 실행될 것입니다. 언리얼 엔진 아이콘도 확인할 수 있는데, Android Applications Drawer 에서 접근할 수 있습니다.

    ![](LinuxAndroid_Step29.png)

### 지원 텍스처 포맷 확인

자신의 Android 디바이스에 지원되는 텍스처 포맷이 무엇인지 아직도 잘 모르겠으면, 다음과 같은 방법을 시도해 보세요:

1.  디바이스에서 게임이 실행중일 때, 화면을 네 (4) 손가락 탭합니다.

    ![](LinuxAndroid_Step30.png)(w:900)

    [REGION:caption]
        대화창이 나타나, Android 디바이스에 지원되는 텍스처 포맷이 표시됩니다.
    [/REGION]

**중간 결과**

축하합니다! 이제 Android 디바이스에 Third Person Example Map 이 실행되고 있는 것이 보일 것입니다.

## 5 - 게임 패키징

튜토리얼 지금까지 모바일 게임 프로젝트를 생성하고 Android 디바이스에 디플로이해 봤는데, 이제 게임을 대포할 수 있도록 만들려면 프로젝트를 패키징해야 합니다. 여기서는 Android 플랫폼에서 배포할 수 있도록 프로젝트를 패키징하는 방법을 단계별로 살펴보도록 하겠습니다. 시작하기에 앞서 한 가지 중요한 점은, 패키지를 **Development** 모드로 패키징한다는 것입니다. 항상 처음에는 게임을 **Development** 모드로 패키징하여 테스트할 수 있도록 하는 것이 좋습니다. 게임이 만족스러운 상태에 도달하면, 게임을 **Shipping** 모드로 패키징합니다. 엔진이 콘솔 명령, 통계, 프로파일링 툴을 벗겨내도록 하는 것입니다.

[REGION:note]
UE4 에서 사용할 수 있는 여러가지 빌드 구성 각각의 차이점은 [](Programming/Development/BuildConfigurations) 문서를 참고하세요.
[/REGION]

### 프로젝트 패키징

1.  **파일** 메뉴를 열고, **Package Project** (프로젝트 패키지)에서 **Android** 에 커서를 올린 뒤 **Android (ETC1)** 을 선택합니다.

    [REGION:lightbox]
        [![](LinuxAndroid_Step31.png)(w:720)](LinuxAndroid_Step31.png)
    [/REGION]
    
    [REGION:caption]
        클릭하면 이미지 원본을 확인합니다.
    [/REGION]

1.  **디렉터리 열기** 메뉴가 뜨면, **새 폴더** 버튼으로 `Android_Builds` 라는 폴더를 새로 만듭니다.

    [REGION:lightbox]
        [![](LinuxAndroid_Step32.png)(w:720)](LinuxAndroid_Step32.png)
    [/REGION]
    
    [REGION:caption]
        클릭하면 이미지 원본을 확인합니다.
    [/REGION]

1.  이제, **열기** 를 클릭하면 패키징 프로세스가 시작됩니다.

    [REGION:lightbox]
        [![](LinuxAndroid_Step33.png)(w:720)](LinuxAndroid_Step33.png)
    [/REGION]
    
    [REGION:caption]
        클릭하면 이미지 원본을 확인합니다.
    [/REGION]

1.  UE4 가 프로젝트를 패키징하면서 화면 우하단 구석에 진행상황이 표시되는 것이 보일 것입니다.

    [REGION:lightbox]
        [![](LinuxAndroid_Step34.png)(w:720)](LinuxAndroid_Step34.png)
    [/REGION]
    
    [REGION:caption]
        클릭하면 이미지 원본을 확인합니다.
    [/REGION]

1.  패키징 프로세스가 끝나면, 완료되었다는 메시지가 보일 것입니다.

    [REGION:lightbox]
        [![](LinuxAndroid_Step35.png)(w:720)](LinuxAndroid_Step35.png)
    [/REGION]
    
    [REGION:caption]
        클릭하면 이미지 원본을 확인합니다.
    [/REGION]

1.  **Android_Builds** 폴더로 이동합니다. **Android_ETC1** 이라는 폴더가 보일 것입니다.

    ![](LinuxAndroid_Step36.png)

1.  **Android_ETC1** 폴더를 엽니다. 패키징 프로세스 도중 생성된 파일이 있을 것입니다.

    ![](LinuxAndroid_Step37.png)

    **Installation** 및 **Uninstallation** 셸 스크립트가 (/*.sh) 보일 것입니다. 그와 함께 Android 어플리케이션 패키지 (/*.apk) 파일도 있는데, 여기에 ETC1 압축 스키마를 지원하는 Android 디바이스에 프로젝트를 설치하는 데 필요한 모든 파일이 들어갑니다.

1.  폴더에 우클릭한 뒤 **Open in Terminal** 을 선택하여 이 위치에서 터미널을 엽니다.

    ![](LinuxAndroid_Step38.png)

1.  터미널에 `./Install_LinuxAndroidProject_Development-arm64.es2.sh` 라 입력하면 프로젝트가 Android 디바이스에 설치됩니다.

    [REGION:lightbox]
        [![](LinuxAndroid_Step39.png)(w:900)](LinuxAndroid_Step39.png)
    [/REGION]
    
    [REGION:caption]
        클릭하면 이미지 원본을 확인합니다.
    [/REGION]

    [REGION:note]
    셸 스크립트를 실행하는 데 어려움이 있는 경우, 터미널에 `adb devices` 라 입력하면 디바이스가 실제로 컴퓨터에 연결되었는지 확인할 수 있습니다.
    [/REGION]

1.  설치 프로세스 도중, 셸 스크립트가 다음과 같은 내용을 터미널에 뿌립니다.

    [REGION:lightbox]
        [![](LinuxAndroid_Step40.png)(w:900)](LinuxAndroid_Step40.png)
    [/REGION]
    
    [REGION:caption]
        클릭하면 이미지 원본을 확인합니다.
    [/REGION]

    [REGION:note]
    셸 스크립트가 설치 프로세스를 완료하면, **Installation successful** (설치 완료) 메시지가 보일 것입니다.
    [/REGION]

**중간 결과**

설치 스크립트가 게임을 Android 디바이스에 설치하는 작업이 완료되었으니, 프로젝트가 디바이스의 어플리케이션 드로어(앱스)에 보일 것입니다.

[REGION:lightbox]
    [![](LinuxAndroid_Step5EndResult.png)(w:180)](LinuxAndroid_Step5EndResult.png)
[/REGION]

[REGION:caption]
    클릭하면 이미지 원본을 확인합니다.
[/REGION]

축하합니다! 지금까지 배운 내용은 다음과 같습니다:

✓ Linux 에서 UE4 로 모바일 게임을 개발하기 위해 Android SDK 를 설치하고 구성하는 법.  
✓ Android의 개발 환경을 활성화시키는 법.  
✓ UE4 에서 Android 모바일 게임 프로젝트를 만드는 법.  
✓ UE4 에서 Android 디바이스에 레벨을 디플로이하는 법.  
✓ 모바일 게임을 release, 배포용으로 패키징하는 법.

다음에는 새로 습득한 지식을 적용하기 위한 몇 가지 제안사항을 살펴보도록 하겠습니다.

## 6 - 직접 해보기!

모바일 게임을 개발하는 것은 높은 수준의 주의가 필요한데, 특히 디바이스 호환성이나 모바일 퍼포먼스, 저장공간 제약과 같은 것을 고려하면 더욱 그렇습니다. 실전 팁을 고려하여 모바일 게임을 디자인하면, 모바일 게임 개발 스킬을 효율적으로 개선하는 데 도움이 될 것입니다. 그 실전 팁을 바탕으로 모바일 콘텐츠를 디자인하고, 대안적인 방법으로 모바일 게임을 미리보고 디플로이하는 방법을 배워봅니다. 마지막으로, 새로 습득한 모바일 개발 지식을 연습하는 데 도움이 될 사례 몇 가지를 추가해 두었습니다.

### 실전 팁 학습

Android 디바이스용 템플릿 모바일 UE4 프로젝트를 생성, 패키징, 디플로이하는 방법을 알았으니, 디바이스 호환성, 모바일 퍼포먼스, APK 실전 팁 등 Linux UE4 에서 모바일 게임을 만드는 능력에 영향을 끼칠 수 있는 것들을 고려할 차례입니다.

#### Android 디바이스 호환성

* [](Platforms/Mobile/Android/DeviceCompatibility) 
* [](Platforms/DeviceProfiles)

#### 모바일 퍼포먼스

* [](Platforms/Mobile/Performance)

#### APK 패키지 크기 감소

타깃 하드웨어 또는 소프트웨어 플랫폼에 따른 제약으로 인해 모바일 게임 크기도 제한할 필요가 있을 수 있습니다. 모바일 게임 크기를 줄여야 하는 상황에 닥치면, **Android Application Package** (APK) 파일 크기를 줄여야 합니다. 이 파일은 Android 운영 체제에서 모바일 어플리케이션의 배포용 패키지를 만드는 데 사용하는 커스텀 파일 포맷입니다. 자세한 내용은 [](Platforms/Mobile/Android/ReducingAPKSize) 문서를 참고하여 패키지 게임 크기를 줄이는 방법을 확인하시기 바랍니다.

### 모바일 콘텐츠 디자인

Linux UE4 로 모바일 게임을 개발하는 데 관련해서 지금까지 배운 내용을 활용하려면, 디바이스에 지원되는 렌더링 피처를 활용할 수 있도록 게임 콘텐츠를 디자인해야 합니다. 다음 문서를 참고해 보세요:

* [](Platforms/Mobile/Meshes) 
* [](Platforms/Mobile/Lighting) 
* [](Platforms/Mobile/Materials) 
* [](Platforms/Mobile/PostProcessEffects) 
* [](Platforms/Mobile/Textures)

### 모바일 게임 프리뷰

모바일 게임을 Android 디바이스에 디플로이하기 전, 먼저 에디터 안에서 게임을 미리볼 수 있으면 좋습니다. [](Platforms/Mobile/Previewer) 문서를 통해 에디터 안에서 모바일 게임을 미리보는 방법을 살펴보시기 바랍니다.

##무선 네트워크를 통한 디플로이

지금까지 모바일 게임 콘텐츠의 실전 팁 몇 가지를 살펴보고, 에디터로 모바일 게임을 미리보는 방법도 알았으니, 무선 네트워크를 통해 Android 디바이스에 게임을 디플로이할 준비가 되었습니다. [](Platforms/VR/GearVR/Debugging) 문서에서 무선 네트워크를 통해 Android 디바이스에 UE4 프로젝트를 디플로이하는 방법 관련 상세 정보를 참고하시기 바랍니다.

### 직접 연습해보기

모바일 게임 개발 스킬을 계속해서 테스트해보려면, 몇 가지 직접 연습해볼 것들이 있습니다:

* 삼인칭 템플릿 이외 무언가를 사용하여 모바일 프로젝트를 새로 만들고, 새로 만든 프로젝트를 Android 디바이스에서 실행되도록 해봅니다.
* 다른 Android 텍스처 포맷으로 프로젝트를 패키징해 보고, 어떤 디바이스에 어떤 포맷이 작동하는지 기록합니다.