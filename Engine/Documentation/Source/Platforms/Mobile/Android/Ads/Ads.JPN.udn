INTSourceChangelist:3782314
Title:Android での Ad Mob (アプリ内広告) の使用方法
Description:Android で Ad Mob (アプリ内広告) を使用する
Crumbs:
Availability:Public
version:4.10
Parent:Platforms/Mobile/Android
tags:Mobile
tags:Android
type:how-to
topic-image:ads_topic.png

![](Platforms/Mobile/Ads/AdMob.png)(w:240)

## コンフィギュレーション

プロジェクトを Android 上で AdMob (アプリ内広告) システムを使用する設定にするステップを説明します。

1. **アンリアル エディタ** の **[Edit (編集)]** メニューで、**[Project Settings (プロジェクト設定)]** を選択してプロジェクトの設定オプションを表示します。

1. 左側の **[Platforms:Android]** タブを選択します。 

1. **[Google Play Services]** セクションで、**[Enable Google Play Support (Google Play Support を有効にする)]** オプションにチェックをいれます。

1. **[Games App ID]** 入力欄にゲームの App ID を入力します。

1. 関連させたい各 AdMob ID の **[Ad Mob Ad Unit IDs]** 配列にエレメントを追加して、テキスト ボックスに ID を入力します。

1. **[Google Play License Key]** 入力フィールドに Google Play 用のライセンスキーを入力します。

	![image alt text](image_0.png)

	これらの値はすべてお持ちの App、Game Service 用の Google Play Developer Console、Google Ad Mob インターフェースで利用できます。

1. 最後に **com.android.vending.BILLING** を **[Android]** 設定の **[Advanced APKPackaging]** セクションの **[Extra Permissions]** 配列に追加します。

	![](extraPermissions.png)

###C++ プロジェクト

プロジェクトが C++ の場合、適切なモジュールを Target.cs ファイルに追加することも必要になります。例えば、

		...
		if (Target.Platform == UnrealTargetPlatform.Android)
		{
		    ModuleNames.Add("OnlineSubsystemGooglePlay");
            ModuleNames.Add("OnlineSubsystem");
            ModuleNames.Add("AndroidAdvertising");
		}

Unreal Match 3 Target.cs ファイルの `Match3\Source\Match3.Target.cs` がファイル全体に対してどのようになっているか見てください。


[INCLUDE:Platforms/Mobile/Ads#usage]
