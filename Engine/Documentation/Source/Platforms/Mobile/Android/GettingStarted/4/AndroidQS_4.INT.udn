Availability:Docs
Title:4. Deploy Your Level
Crumbs:%ROOT%, Platforms, Platforms/Mobile/Android, Platforms/Mobile/Android/GettingStarted
Description:Launch your level with one-click deploying.
Version:4.17
Skilllevel:Intermediate
tags:Android
tags:Mobile
type:multi-step
parent:Platforms/Mobile/Android/GettingStarted
order:4
Checkpoint:AndroidQS



In the following section, we will be taking a look at how you can deploy a single level from the project you are working on your Android device for quick testing. 

[nav]

[region:note]
For this section to work, you will need to make sure that your Android device is plugged into your computer via USB, if you have not done this already, please do this before going any further.
[/region]

To deploy your level to your Android device you need to determine which type of Texture format your Android Device supports,
this is because different types of Android devices require different types of Texture formats to work correctly. 
The chart below shows you which Texture formats work with which Android-based devices.

[INCLUDE:Platforms/Mobile/Android/Reference#androidformats]

## Steps

1.    To test your current level on an Android-based device, you first need to make sure you have the level you want to test open. 
    From this example, we will be using the **ThirdPersonExampleMap** level from the Blueprint based project that was created in the last step.
    
    ![](Correct_Level_Open.png)

    [region:note]
	In UE4.18 the Gradle build system is enabled by default. But, this requires accepting the SDK License agreement in **Project Settings** > **Android** (button is disabled if the agreement has been previously accepted). Press the button, read the agreement, then Accept it. After that, the button should be grayed out. You can still use the Ant build system in 4.18 by clearing the **Enable Gradle instead of Ant** Check box.

    [REGION:lightbox]
    [![](Gradle_418_Update.png)(w:519)](Gradle_418_Update.png)
    [/REGION]

    [REGION:caption]
    Click for full image.
    [/REGION]

    We plan to remove this option and only use Gradle starting in 4.19.

    [/region]

1.    With the **ThirdPersonExampleMap** now open go to the **Main Toolbar** and next to the **Launch** icon click on the small triangle that displays more options.

    ![](Level_Deploy_Options.png)

1. From the **Launch** menu under the **Devices** section select your Android device from the list by clicking on it.

    ![](launch_rightformat.png)

1. While your level is being launched on your device, the progress will be displayed in the bottom right-hand corner of the screen. 
 When the project has been successfully deployed to your device, you will see a message telling you so.
    
    [OBJECT:EmbeddedVideo]
        [PARAMLITERAL:videoid]
        afagQeEvf4Q
        [/PARAMLITERAL]
        [PARAMLITERAL:width]
        640
        [/PARAMLITERAL]
        [PARAMLITERAL:height]
        360
        [/PARAMLITERAL]
        [PARAMLITERAL:units]
        px
        [/PARAMLITERAL]
        [PARAMLITERAL:type]
        simple
        [/PARAMLITERAL]
    [/OBJECT]



[REGION:tip]
    If you are unsure which Texture formats to use or which ones are supported by your device, you can find out by running the game and then doing the following.

    1. Tap the screen with four fingers at once; a dialog will pop up.
    1. This dialog is usually used to enter a console command (like `stat fps`), but it will also display the formats that your device supports. 
    1. Once you have that list, you can use that to choose an ideal type when deploying/packaging.

    ![](Available_Texture_Formats.png)
[/REGION:tip]

## End Result

After the cooking and launching process has completed the game will appear automatically on your device and also be accessible from your Apps drawer. 

[REGION:lightbox]
[![](Deployed_Project_Android.png)(w:500)](Deployed_Project_Android.png)
[/REGION]

[REGION:caption]
Click for full image.
[/REGION]

[nav]

