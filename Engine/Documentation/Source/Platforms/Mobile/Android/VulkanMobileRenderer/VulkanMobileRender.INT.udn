Title: Android Vulkan Mobile Renderer
Description:Setting up your UE4 Android project to work with the Vulkan mobile render
Availability:Public
version:4.12
Parent:Platforms/Mobile/Android
type:overview
tags:Mobile
tags:Android
type:reference

![](Vulkan_500px_Mar15.png)

[TOC(start:2)]

Unreal Engine 4 (UE4) has built in support for the **Vulkan** graphics API. Vulkan is a low-overhead, cross-platform 3D graphics library that gives developers more control over the GPU and lower level CPU usage for their Android base mobile projects. In the following document, we will go over how you can enable and use Vulkan in your UE4 Android projects.

[REGION:warning]
At this time, Vulkan is under development and should be considered an **experimental feature**. If you wish to build and deploy a mobile project using Vulkan, you will need to download and compile UE4, Version 4.12 or later as explained on our [Unreal Engine GitHub](GettingStarted/DownloadingUnrealEngine) page.
[/REGION]

## Vulkan Video Drivers for PC Development

To make sure that you can visualize the rendering options Vulkan has available on your development PC, you will need to make sure you download and install the latest version of video card drivers for your graphics card. Below you will find the minimal driver version you need to use to be able to preview what Vulkan will look like on your development PC.

*   [NVIDIA](http://www.nvidia.com/Download/index.aspx): 390.0 or later
*   [AMD](https://support.amd.com/en-us/download): 17 or later

## Checking Vulkan Device Compatibility

Determining if your smartphone supports the Vulkan rendering API can be challenging due to the wide range of Android smartphones on the market. To help you quickly find out if your smartphone supports the Vulkan API, we recommend installing the following program from Google Play Store: [Hardware Caps Viewer for Vulkan](https://play.google.com/store/apps/details).

The Vulkan Hardware Capability Viewer is a client tool aimed at developers needing to gather hardware implementation details for devices that support the new Vulkan Graphics API.

## Supported Vulkan Devices

Currently, only the following mobile device chipsets have support for the Vulkan API. 

*  **Google Pixel/Pixel XL** or newer
*  **Nexus 6P** (Android N Devices)
*  **Galaxy S7** (Mali & Adreno variants)
*  **Galaxy S8**
*  **Galaxy S9**
*  **Razer Gaming Phone**

[REGION:note]
Please note that the ability to use the Vulkan API depends on if your mobile carrier has released the Vulkain update for your specific device variant. To find if this support has been pushed to your mobile device, you will need to contact your mobile carrier.
[/REGION]

## Building for Vulkan 
To build a UE4 project that has support for the Vulkan API you will need to do the following:

1.  Before you begin, make sure that you have your Android smartphone plugged into your development PC via USB and that your Android smartphone has developer mode enabled. 

1.  Next, download and compile the latest version of UE4 from the UE4 Github branch as the binary version you get from the launcher will not allow you to build for Vulkan.

    [REGION:note]
     If you are unsure how to do this check out the [Download Unreal Engine Source Code](GettingStarted/DownloadingUnrealEngine/) page for detailed instruction on what to do.
    [/REGION]

1.  Once UE4 has finished building, launch the UE4 Editor and create a new project using the following settings:
    
    *   **Blueprint Project**    
    *   **Blank Template**    
    *   **Mobile / Tablet**    
    *   **Maximum Quality**    
    *   **No Starter Content**
    
    [REGION:lightbox]
    [![](VMP_New_Project_Settings.png)(w:555)](VMP_New_Project_Settings.png)
    [/REGION]
    [REGION:caption]
    Click for full image.
    [/REGION]
    When that is completed, press the **Create** button to create and load the new project.

1.  Once the project has loaded, go to **Edit** \> **Project Settings,** then under **Engine,** go to the **Rendering** section and make sure that **Mobile HDR** has been enabled.
    [REGION:lightbox]
    [![](VMP_Android_Settings_04.png)(w:639)](VMP_Android_Settings_04.png)
    [/REGION]
    [REGION:caption]
    Click for full image.
    [/REGION]
    
1.  Next, locate the **Android** section, which is under **Platforms**.
    [REGION:lightbox]
    [![](VMP_Android_Settings_00.png)(w:639)](VMP_Android_Settings_00.png)
    [/REGION]
    [REGION:caption]
    Click for full image.
    [/REGION]
    
1.  In the Android section under **APKPackaging**, set the **Minimum SDK Version** to **19** and set the **Target SDK Version** to **19**.
    [REGION:lightbox]
    [![](VMP_Android_Settings_01.png)(w:639)](VMP_Android_Settings_01.png)
    [/REGION]
    [REGION:caption]
    Click for full image.
    [/REGION]
   
1.  Below the APKPackaging section in the **Build** section, make sure that the following options are enabled:
    
    *   **Support arm7 \[aka armebi-v7a\]**    
    *   **Support OpenGL ES2**    
    *   **Support Vulkan \[Experimental\]**
    
    [REGION:lightbox]
    [![](VMP_Android_Settings_02.png)(w:639)](VMP_Android_Settings_02.png)
    [/REGION]
    [REGION:caption]
    Click for full image.
    [/REGION]
    
1.  In the **Android SDK** section, make sure that **SDKConfig** paths are pointed to the correct SDK on your development PC.
    [REGION:lightbox]
    [![](VMP_Android_Settings_03.png)(w:639)](VMP_Android_Settings_03.png)
    [/REGION]
    [REGION:caption]
    Click for full image.
    [/REGION]
    
1.  From the menu bar, go to **File** \> **Package Project** \> **Android**, and select the **Android(ASTC)** option.
    [REGION:lightbox]
    [![](VMP_Package_Game.png)(w:329)](VMP_Package_Game.png)
    [/REGION]
    [REGION:caption]
    Click for full image.
    [/REGION]
    
1.  Select a location for UE4 to save the Android build and then press the **OK** button to start the packaging process.
    [REGION:lightbox]
    [![](VMP_Save_Build_Location.png)(w:245)](VMP_Save_Build_Location.png)
    [/REGION]
    [REGION:caption]
    Click for full image.
    [/REGION]
    
1.  When the packaging process has been completed, open up the folder that the packaged build was placed in. Inside this folder, you should see two .BAT files. Locate the .BAT file that has the word **Install** in the name and double-click on it to install it to your device.
    [REGION:lightbox]
    [![](VMP_Build_Files.png)(w:439)](VMP_Build_Files.png)
    [/REGION]
    [REGION:caption]
    Click for full image.
    [/REGION]

1.  Once installed on your device, press on the UE4 icon that has your project name under it to launch the project on the device.
    [REGION:lightbox]
    [![](VMP_On_Device.png)(w:818)](VMP_On_Device.png)
    [/REGION]
    [REGION:caption]
    Click for full image.
    [/REGION]

## Enabling Vulkan Preview Rendering in Editor

You can enable Vulkan Render while inside of the UE4 Editor, and to do so, do the following in your project:

[REGION:note]
**Note:** When using the Vulkan Render on PC, what you see in the UE4 Editor Viewport will match one-to-one with what you see on your Vulkan enabled device.
[/REGION]

1.  From the **Main Toolbar**, go to the **Edit** option and then select the **Editor Preferences** option from the menu.

    ![](VMP_00.png)

1.  In the **General** section under the **Experimental** category, expand the **Rendering** section and click on the checkmark box next to the **Enable Metal/Vulkan/High-end mobile Preview Rendering Level in editor**.

    [REGION:lightbox]
    [![](VMP_03.png)(w:447)](VMP_03.png)
    [/REGION]
    
    [REGION:caption]
    Click for full image.
    [/REGION]

    [REGION:note]
    After doing this, the Editor will need to recompile the entire shader cache to include the required Vulkan options. Depending on the size of your project and power of your development computer, this process could take anywhere from a few minutes, to an hour or more to complete.
    [/REGION]

1.  On the **Main Toolbar**, click on the **Settings** button and go to the **Preview Rendering Level** option, selecting **High-End Mobile / Metal** option to enable the OpenGL ES 3.1 preview in the UE4 Viewport.
    [REGION:lightbox]
    [![](VMP_Android_Settings_05.png)(w:447)](VMP_Android_Settings_05.png)
    [/REGION]
    
1.  In the lower right corner of the UE4 Editor Viewport, you should see the text, `Feature Level: ES3_1`. If you see this text, then everything is setup correctly and you are now seeing what your project will look like when viewed on a device that supports the Vulkan API.
    [REGION:lightbox]
    [![](VMP_04.png)(w:447)](VMP_04.png)
    [/REGION]
    [REGION:caption]
    Click for full image.
    [/REGION]

## Enabling the Vulkan Mobile Preview Render

To enable Vulkan Render with the Mobile Preview Render, do the following in your project:

1.  From the **Main Toolbar**, go to the **Edit** option and then select the **Editor Preferences** option from the main menu. 

    ![](VMP_00.png)

1.  In the **General** section under the **Experimental** category, expand the **PIE** section then select the checkmark box next to the **Allow Vulkan Mobile Preview** option.
    [REGION:lightbox]
    [![](VMP_01.png)(w:447)](VMP_01.png)
    [/REGION]
    [REGION:caption]
    Click for full image.
    [/REGION]
    
1.  On the Main Toolbar, change the **Play Mode** from **Play this level in the selected viewport** to the **Vulkan Mobile Preview (PIE)** option by clicking on the small white triangle next to the play button, selecting **Vulkan Mobile Preview (PIE)** from the drop down list.  
    
    ![](VMP_02.png)

1.  Click on the **Play** button that is on the Main Toolbar to launch your UE4 project in a new preview window with Vulkan Render enabled. If everything has been setup successfully, you should see something similar to the image below.
    [REGION:lightbox]
    [![](VMP_05.png)(w:447)](VMP_05.png)
    [/REGION]
    [REGION:caption]
    Click for full image.
    [/REGION]

[REGION:note]
If you do not see **(SF\_VULKAN\_ES31)** at the top of the preview window next to the project name, that means the project is not using the Vulkan API. Should this happen, make sure that your video card drivers are up to date.
[/REGION]
