Availability: Public
Crumbs: %ROOT%
Title:VR Performance Features
Description: Information on different performance optmizations for VR.
Type: Overview
SkillLevel:Advanced
Version:4.17
Parent: Platforms/VR/DevelopVR
Order:4
Tags:VR

[TOC(start:2)]

Due to the demanding rendering requirements Virtual Reality (VR) requires a number of performance optimizations and new rendering modes that are specific to VR have been introduced to Unreal Engine 4 (UE4). In the following document we will take a look at these features and how to use them in your UE4 VR projects.


## VR Instanced Stereo

Instanced Stereo Rendering was introduced to help lessen the performance impact of VR in UE4. The feature can be enabled by checking the **Instanced Stereo** option that can be found under **Edit > Project Settings > Rendering > VR**. 

[REGION:lightbox]
[![](Platforms\VR\DevelopVR\ContentSetup\VR_ISR.png)(w:376)](Platforms\VR\DevelopVR\ContentSetup\VR_ISR.png)
[/REGION]

[REGION:caption]
Click for full image.
[/REGION]

After **Instanced Stereo** rendering has been enabled, it will require an engine restart, and shader recompile.
 The base pass, and early-z pass, works with static meshes, skeletal meshes, sprite particles, and mesh particles with the feature turned on (both serial and parallel rendering paths). 
 **Instanced Stereo** currently works on PC (DirectX) and PS4 with support for other platforms coming after the initial 4.11 release. 
 Here is a video showing Standard Stereo Rendering in VR, versus Instanced Stereo Rendering in VR. 

[OBJECT:EmbeddedVideo]
	[PARAMLITERAL:videoid]
	nmajnglJeyE
	[/PARAMLITERAL]
	[PARAMLITERAL:width]
	100
	[/PARAMLITERAL]
	[PARAMLITERAL:height]
	56.25
	[/PARAMLITERAL]
	[PARAMLITERAL:units]
	%
	[/PARAMLITERAL]
	[PARAMLITERAL:type]
	simple
	[/PARAMLITERAL]
[/OBJECT]

## VR Multiview Support for Mobile

Certain (supported) mobile devices can now support VR Multiview. Mobile Multiview is similar to Instanced Stereo rendering that is available to desktop PC's, and works by providing an optimized path for Stereo Rendering on the mobile device's CPU. To enable this feature, you will need to do the following:

[region:warning]
Due to the experimental nature of this feature, it will only work on modern Mali-based GPUs. As this feature matures, and support for more mobile devices come online, this warning will be removed.
[/region]

1. From the Main Toolbar, go to **Edit** >  **Projects Settings**, to open the Editor's Project Settings.

1. Then, go to **Engine** > **Rendering** > **VR**, and look for the **Mobile Multi-View (Experimental)** option. 

1. Enable the Mobile Multi-View (Experimental) option by click on the checkmark box next to its name, and then restart Editor for the changes to take effect.

	[REGION:lightbox]
	[![](Platforms\VR\DevelopVR\ContentSetup\VR_MobileMultiView.png)(w:379)](Platforms\VR\DevelopVR\ContentSetup\VR_MobileMultiView.png)
	[/REGION]

	[REGION:caption]
	Click for full image.
	[/REGION]

For this feature to work, you will need your Android build settings to be setup like the following:

* Make sure that **Support OpenGL ES2** is enabled in the **Android** > **Build** section. 
* Make sure that both **Mobile HDR** and **Instanced Stereo Rendering** are disabled.
* Currently, Mobile Multiview will only work with modern Mali-based GPU's. 
* If you package a project with this feature on, but don't have a compatible GPU, it will be disabled at runtime. 

## VR Forward Rendering

![](Engine\Performance\ForwardRenderer\ForwardRenderingBanner.png)(w:840)

[INCLUDE:Engine\Performance\ForwardRenderer#intro]

[REGION:note]
Please see the [](Engine\Performance\ForwardRenderer) documentation for more information on this feature. 
[/REGION]

## VR Performance Profiling

To track down assets that are too expensive for VR, you need to profile what your project is doing on the CPU and GPU as much as possible over the lifetime of your project. 

* **GPU Profiling** - To activate the GPU profiler, all you need to do is press  **CTRL + SHIFT + ,(Comma Key)** together, while running your project. After the keys have been pressed, you will see a new window come up that should look similar to the image below. 
	![](Platforms\VR\DevelopVR\ContentSetup\VR_GPU_Profiler.png)

* **CPU Profiler** - Profiling what your project is doing on the CPU is a bit more involved than profiling for the GPU. To find out more on how to do this, please refer to the [Performance Profiler](https://docs.unrealengine.com/latest/INT/Engine/Performance/Profiler/index.html) documents. 

## VR Post Process Settings

Due to the demanding rendering requirements of VR, many of the advanced Post Processing features that are enabled by default should be disabled, or your project could suffer
 from performance problems. To accomplish this in your project, you will need to do the following.

 1. Add a Post Process(PP) volume to your level if there is not one already there.
 1. Select the PP volume, and in the **Post Process Volume** section, enable the **Unbound** option so that the settings in the PP volume will be applied to the entire level. 

	![](Platforms\VR\DevelopVR\ContentSetup\VR_PP_Unbound.png)

 1. Expand the **Settings** of the **Post Process Volume**, and then go through each section to disable any active PP settings by enabling that property; clicking on it, and then setting the value from the default (usually 1.0) to **0**, thus disabling the feature.
	
	![](Platforms\VR\DevelopVR\ContentSetup\VR_Disable_PP_Settings.png)
	[region:note]
	When doing this, you won't need to hit every section and set all of the properties to 0. Instead, first disable the really heavy hitting features like Lens Flares, Screen Space reflections, Temporal AA, SSAO, Bloom and anything else that might have an impact on performance.
	[/region]





















