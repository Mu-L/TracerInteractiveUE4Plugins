INTSourceChangelist:3782314
Availability: Docs
Crumbs: %ROOT%
Title: Core Redirect
Description: Core Redirect可以在加载时间内重新映射类、枚举、函数、包、属性和结构体。
Type: Overview
SkillLevel: Intermediate
Version: 4.18
Parent: Programming
Order: 0
Tags: CoreRedirects
Tags: Assets

[TOC(start:2)]


在开发期间，有时已有的类、属性、函数名称或类似的代码成分需要重命名。如果这些变更影响到的资源数量众多，只是将代码成分重命名并重新编译项目会导致大量数据丢失，因为虚幻引擎将无法再识别已有资源。为了解决此问题，引擎使用了 **Core Redirect**。Core Redirect应配置在项目的 `DefaultEngine.ini` 文件中；如果是插件，则配置在该插件的自命名 `.ini` 文件中（例如Paper2D的 `Paper2D.ini` 文件中）。这些Core Redirect将在资源加载期间自动映射过时数据，防止因为重命名而导致数据丢失。


### 支持的Core Redirect类型

[REGION:note]在Core Redirect中指定类或结构体的名称时，该名称应书写为其在虚幻引擎反射系统中显示的名称，也就是说删除前缀字母。例如，`AMyActor` 应书写为 `MyActor`，`FMyStruct` 应书写为 `MyStruct`。由于虚幻引擎的反射系统不对列举类型使用前缀，列举类型名称在Core Redirect中的显示与其在代码中完全相同。例如，当被Core Redirect引用时，`ESampleEnum` 将仍为 `ESampleEnum`。[/REGION]

目前支持的Core Redirect格式有以下几种：

* `ClassRedirects` - 更改使用过时（或已删除）UCLASS的Object和属性，以引用新的UCLASS。
	| 字段 | 类型 | 用途 |
	| --- | --- | --- |
	| `OldName` | 字符串 | 指定过时（或已删除）UCLASS的名称。|
	| `NewName` | 字符串 | 指定新UCLASS的名称。|
	| `MatchSubstring` | 布尔型 | （可选）如果存在且设置为 `true`，此Core Redirect将应用于包含 `OldName` 值的任何类，而不要求完全匹配。|
	| `OverrideClassName` | 字符串 | （可选）指定对UCLASS的底层类的更改。它通常用于将蓝图类更改为原生类（`/Script/CoreUObject.Class`）。|
	| `InstanceOnly` | 布尔型 | （可选）如果存在且设置为 `true`，则表示原类仍然存在且可以引用，但旧类的任何现有实例（例如放置在关卡中的Actor或组件）应重新映射到新类。当项目在引擎中拥有专用版本的类时，这尤其有用。但关卡中会充满原类的实例，必须将其全部更改为特定于项目的版本。|
	| `ValueChanges` | 字符串对列表 | （可选）重命名与对的首个字符串匹配的旧类实例。新名称将是该对的第二个字符串。|
		[CoreRedirects]
		ClassRedirects=(OldName="Pawn",NewName="MyPawn",InstanceOnly=true)
		ClassRedirects=(OldName="/Script/MyModule.MyOldClass",NewName="/Script/MyModule.MyNewClass")
		ClassRedirects=(OldName="PointLightComponent",NewName="PointLightComponent",ValueChanges=(("PointLightComponent0","LightComponent0")))
		ClassRedirects=(OldName="AnimNotify_PlayParticleEffect_C",NewName="/Script/Engine.AnimNotify_PlayParticleEffect",OverrideClassName="/Script/CoreUObject.Class")
[COMMENT:none]
- CollisionChannelRedirects是否仍被视为当前/受支持/被认可？-
[/COMMENT]
* `EnumRedirects` - 重映射列举类型中过时的UENUM类型和/或过时的值。
	| 字段 | 类型 | 用途 |
	| --- | --- | --- |
	| `OldName` | 字符串 | 指定过时UENUM的名称（若指定了`NewName`）或现有UENUM的名称（若仅重映射值）。|
	| `NewName` | 字符串 | （可选）如果从过时的UENUM重映射到新的UENUM，则指定新UENUM的名称。|
	| `MatchSubstring` | 布尔型 | （可选）如果存在且设置为 `true`，此Core Redirect将应用于包含 `OldName` 值的任何列举类型，而不要求完全匹配。|
	| `ValueChanges` | 字符串对列表 | 对中的第一个字符串是旧的列举值，第二个字符串是新值。如果两个值都属于同一类，则代码中不得再有旧值。|	
		[CoreRedirects]
		EnumRedirects=(OldName="ENumbers",NewName="ELetters",ValueChanges=(("ENumberTwo","ELetterB")))
* `FunctionRedirects` - 将过时的UFUNCTION重映射到新的UFUNCTION。
	| 字段 | 类型 | 用途 |
	| --- | --- | --- |
	| `OldName` | 字符串 | 指定过时（或已删除）UFUNCTION的名称。函数名称以句点分隔，以便包含类名。|
	| `NewName` | 字符串 | 指定新UFUNCTION的名称。函数名称可以使用句点分隔，从而可将函数从一个类重映射到另一个类。|
	| `MatchSubstring` | 布尔型 | （可选）如果存在且设置为 `true`，此Core Redirect将应用于包含 `OldName` 值的任何函数，而不要求完全匹配。|
		[CoreRedirects]
		FunctionRedirects=(OldName="MyOldActor.OldFunction",NewName="MyNewActor.NewFunction")
		FunctionRedirects=(OldName="MyActor.OldFunction",NewName="NewFunction")
* `PackageRedirects` - 从一个包重映射到另一个包，或者抑制关于对已删除包引用的警告（引用将被清除或设置为null）。
	| 字段 | 类型 | 用途 |
	| --- | --- | --- |
	| `OldName` | 字符串 | 指定过时或已删除包的名称。|
	| `NewName` | 字符串 | （可选）如果需要重映射，它可指定替换过时或已删除包的包名称。如果它不存在，则应存在 `Removed` 并将其设置为 `true`。|
	| `MatchSubstring` | 布尔型 | （可选）如果存在并设置为 `true`，此Core Redirect将应用于包含 `OldName` 值的任何包，而不要求完全匹配。|
	| `Removed` | 布尔型 | （可选）如果存在且设置为 `true`，则指定的包已删除。对任何已删除内容的引用将被设置为null，不会生成警告或错误。在此情况下，不应存在 `NewName` 参数。|
		[CoreRedirects]
		PackageRedirects=(OldName="/OldPlugin/", NewName="/NewPlugin/", MatchSubstring=true)
		PackageRedirects=(OldName="/Game/DeletedContentPackage", Removed=true)
* `PropertyRedirects` - 将已删除属性重映射到新属性。
	| 字段 | 类型 | 用途 |
	| --- | --- | --- |
	| `OldName` | 字符串 | 已删除属性的名称。此名称以句点分隔，以便包含类名和任何子变量名，例如 `MyActor.MyStruct.MyProperty`。|
	| `NewName` | 字符串 | 新属性的名称。与 `OldName` 相同，此名称可以完全以句点分隔；或者如果此名称与 `OldName` 在同一名称空间中，它可能只是变量名称。|
	| `MatchSubstring` | 布尔型 | （可选）如果存在且设置为 `true`，此Core Redirect将应用于包含 `OldName` 值的任何属性，而不要求完全匹配。|
		[CoreRedirects]
		PropertyRedirects=(OldName="MyOldActor.OldIntProperty",NewName="MyNewActor.NewIntProperty")
		PropertyRedirects=(OldName="MyActor.OldFloatProperty",NewName="NewFloatProperty")
* `StructRedirects` - 更改使用过时（或已删除）USTRUCT的属性，以引用新的USTRUCT。
	| 字段 | 类型 | 用途 |
	| --- | --- | --- |
	| `OldName` | 字符串 | 指定过时（或已删除）USTRUCT的名称。|
	| `NewName` | 字符串 | 指定新USTRUCT的名称。|
	| `MatchSubstring` | 布尔型 | （可选）如果存在且设置为 `true`，此Core Redirect将应用于包含 `OldName` 值的任何结构体，而不要求完全匹配。|
		[CoreRedirects]
		StructRedirects=(OldName="MyStruct",NewName="MyNewStruct")


### 名称的灵活性和特殊性

描述类、结构体、属性和函数时使用的名称可以不同的特殊性程度编写，而Core Redirect系统将尽可能多（或少）地使用所提供的信息。下表显示了特殊性水平的一些示例。

| 示例格式 | 适用范围 |
| --- | --- |
| `/Script/MyModule.MyActor.MyFunctionOrProperty` | 仅适用于 `MyModule` 模块的 `MyActor` 类中名为 `MyFunctionOrProperty` 的函数或属性。|
| `MyActor.MyFunctionOrProperty` | 适用于 `MyActor` 类中名为 `MyFunctionOrProperty` 的任何函数或属性，与该类和函数在哪个模块中无关。 |
| `MyFunctionOrProperty` | 适用于任何模块的任何类中任何名为 `MyFunctionOrProperty` 的函数或属性。|
		
[REGION:warning]在版本低于4.16的游戏和样本中的某些 `.ini` 文件中可找到一些过时的Core Redirect。虽然由于向后兼容的原因它们使用的格式仍然受支持，但不建议未来在编写Core Redirect时将其用作模板。请仅使用此页面上指定的格式。[/REGION]


### 子字符串匹配

`MatchSubstring` 参数可用于任何Core Redirect类型。如果存在且设置为 `true`，则 `OldName` 和 `NewName` 字段将被视为子字符串，而不要求完全匹配。这样可以让单个Core Redirect有多个匹配项。在以下示例中，我们将从结构体和类开始讲解。

原始代码和值：

		USTRUCT()
		struct FMyStruct
		{
			GENERATED_BODY()

			UPROPERTY(EditAnywhere, Category = "Documentation")
			int32 TestInt;

			UPROPERTY(EditAnywhere, Category = "Documentation")
			int32 TestIntFromStruct;
		};

		UCLASS()
		class REDIRECTORSTEST_API AMyActor : public AActor
		{
			GENERATED_BODY()
			
		public:
			UPROPERTY(EditAnywhere, Category = "Documentation")
			int32 TestInt;

			UPROPERTY(EditAnywhere, Category = "Documentation")
			int32 MainClassTestInt;

			UPROPERTY(EditAnywhere, Category = "Documentation")
			FMyStruct TestStruct;
		};

![原始数值](OriginalValues.png)

[REGION:caption]以上是保存到 `AMyActor` 资源中的原始代码和原始数值集。[/REGION]

创建和保存使用以上所示值的 `AMyActor` 资源后，我们可以关闭编辑器并更改 `.h` 文件中的代码和游戏的 `.ini` 文件中的Core Redirect。我们将代码更改为如下所示，更改 `int32` 属性的名称：

		USTRUCT()
		struct FMyStruct
		{
			GENERATED_BODY()

			UPROPERTY(EditAnywhere, Category = "Documentation")
			int32 TestInteger;

			UPROPERTY(EditAnywhere, Category = "Documentation")
			int32 TestIntegerFromStruct;
		};

		UCLASS()
		class REDIRECTORSTEST_API AMyActor : public AActor
		{
			GENERATED_BODY()
			
		public:
			UPROPERTY(EditAnywhere, Category = "Documentation")
			int32 TestInteger;

			UPROPERTY(EditAnywhere, Category = "Documentation")
			int32 MainClassTestInteger;

			UPROPERTY(EditAnywhere, Category = "Documentation")
			FMyStruct TestStruct;
		};

更改后，我们可以检查Core Redirect的效果，尤其是 `MatchSubstring` 的影响。结果如下：

![](NoCoreRedirect.png)
[REGION:caption]在代码中已重命名属性，但未创建Core Redirect。因此，没有任何数据值迁移到新属性。[/REGION]

![](CoreRedirectWithoutMatchSubstring.png)
[REGION:caption]`PropertyRedirects=(OldName=”TestInt”,NewName=”TestInteger”)` 仅允许具有完全匹配名称的两个属性迁移其数据。[/REGION]

![](CoreRedirectWithMatchSubstring.png)
[REGION:caption]由于子字符串匹配，`PropertyRedirects=(OldName=”TestInt”,NewName=”TestInteger”,MatchSubstring=true)` 允许所有四个属性都迁移。[/REGION]
		
[REGION:tip]`MatchSubtring` 需要更彻底地检查传入的资源，因此会影响启动时间。`MatchSubstring` 旨在临时用作进行彻底更改时的修补。建议立即重新保存这些更改涉及的资源，并将任何相关的代码更改检入项目的源代码管理数据库，在不输入源码管理的情况下删除Core Redirect。[/REGION]
