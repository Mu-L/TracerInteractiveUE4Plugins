Availability: Public
Crumbs: %ROOT%
Title: Automation System Overview
Description: Overview of the automation system used for unit testing, feature testing, and content stress testing. 
Type: Landing
Version:4.17
Parent:Programming
Order:
Tags:Programming
Navigation:topic


[TOC(start:2 end:2)]


The Automation System is built on top of the Functional Testing Framework, which is designed to do gameplay level testing, which works by performing one or more automated tests. Most 
tests that are written will be functional tests, low-level core or Editor tests that need to be written for using the Automation Framework system. These tests that are written 
can be broken down into the following categories depending on their purpose or function:

[REGION:simpletable]
| Test Type | Description |
| --------- | ----------- |
| **Unit** | API level verification tests. See **TimespanTest.cpp** or **DateTimeTest.cpp** for examples of these. | 
| **Feature** | System-level verification tests such as verify PIE works, verify in-game stats works and very changing resolution works. See **EditorAutomationTests.cpp** or **EngineAutomationTests.cpp** for examples of these. | 
| **Smoke** | Smoke tests are just considered a speed promise by the implementer. They are intended to be fast so they can run _everytime_ the Editor, game, or commandlet starts. They are also selected default in the [UI](Programming/Automation/UserGuide#UserInterface). [REGION:warning] All Smoke tests are intended to complete within 1 second.  Only mark Unit Tests or fast Feature Tests as Smoke Tests. [/REGION] | 
| **Content Stress** | More thorough testing of a particular system to avoid crashes, such as loading all maps or loading and compiling all Blueprints. See **EditorAutomationTests.cpp** or **EngineAutomationTests.cpp** for examples of these. | 
| **Screenshot Comparison** | This enables your QA testing to quickly compare screenshots to identify potential rendering issues between versions or builds. | 
[/REGION]


## Automation Tests moved to Plugins

For a long time, automation tests were spread across the Engine and Editor which meant that when you shipped your title, these were included. These have now been moved to their own plugins that
can be individually enabled. This also means that since these tests are located in plugins, you can choose to include them with your packaged builds when you compile. Plugins also can store content 
so that it no longer has to be kept in the Engine Content folder. 

Because of this change, the type of test being created will dictate where it should be stored. Use the table below to look at the test type and which plugin it should be stored with:

[REGION:simpletable]
| Test Type | Plugin to store it in |
| --------- | ----------- |
| **Unit** | These can continue to be stored in the same module as the code. |
| **Project Agnostic Runtime Tests** | RuntimeTests Plugin |
| **Project Agnostic Editor Tests** | EditorTests Plugin |
| **Functional Tests** | EngineTest Game folder | 
[/REGION]

[REGION:note]
Some tests are still in the Engine that has yet to be moved to a Plugin. These will be moved out over time to corresponding Plugins that can be found in the **Plugins Browser** 
listed under **Testing**. 
[/REGION]

### Enabling Automation Test Plugins

To enable the plugins for the different tests available, go to the file menu and select **Window** > **Plugins** to open the Plugin Browser Window. 

![](EnablePlugins.png)(w:350)

In the left panel, select the **Testing** category and enable the test plugins you want to use.  

[REGION:lightbox]
[![](PluginsBrowser.png)(w:625)](PluginsBrowser.png)
[/REGION]
[REGION:caption] Click image for full size. [/REGION]

Once you've selected these, you will be prompted to restart the Editor. Click the **Restart Now** button. 

![](RestartTheEditor.png)


## Test Design Guidelines

When you're testing your games or projects, the following are some general guidelines that Epic follows for its automation testing: 

* Don't assume the state of the game or the Editor. Tests can be run out of order or parallel across machines. 
* Leave the state of the files on disk the way you found them. If a test generates a file, delete it when the test is done. (This may change in the future to opt into a way to automatically delete these types of generated files).
* Assume the test was left in a bad state the last time it was run. A good habit would be to generate files to attempt to delete them before the test starts.

## Running Automation Tests

1. Open any project.
1. Enable the [Plugins](#enablingautomationtestplugins) available to use for testing and restart the Editor.

1. In the Editor, go to **Window** > **Test Automation**. 
	
	[REGION:lightbox]
	[![](TestAutomation.png)(h:300)](TestAutomation.png)
	[/REGION]
	[REGION:caption] Click image for full size. [/REGION]

	[REGION:note]
	For this menu option to be visible, you must first enable at least one [automation tests plugin](#enablingautomationtestplugins). 
	[/REGION]

1. In the Automation tab of the Sessions Frontend under the **Test Name** column, enable the following:
	
	[REGION:lightbox]
	[![](AutomationWindow.png)(w:600)](AutomationWindow.png)
	[/REGION]
	[REGION:caption] Click image for full size. [/REGION]
	
	* Editor
	* Project
	* System

1. In the Automation tab toolbar, click the **Start Tests** button.

	[REGION:lightbox]
	[![](StartTests.png)(w:600)](StartTests.png)
	[/REGION]
	[REGION:caption] Click image for full size. [/REGION]
	
	As the tests complete, you can follow the progress in the Test Name window.

	[REGION:lightbox]
	[![](RunningTests.png)(w:600)](RunningTests.png)
	[/REGION]
	[REGION:caption] Click image for full size. [/REGION]


## Essentials	

The **Automation System** provides the ability to perform Unit Testing, Feature Testing, and Content Stress Testing using the power of the **Unreal Message Bus** to increase stability.

[DIR(output:"topiccompact" parent:"Programming/Automation" org:"hierarchy" tags:"Programming" end:"1")]




[COMMENT:none]
-

[EXCERPT:Intro]
The **Automation System** provides the ability to perform Unit Testing, Feature Testing, and Content 
Stress Testing using the power of the **Unreal Message Bus** in order 
to increase stability.

The Automation system works by performing one or more automation tests. Automation tests can be broken down 
into different categories depending on their purpose or function:
[/EXCERPT:Intro]

$ Unit Test : API level verification tests.  See TimespanTest.cpp or DateTimeTest.cpp for examples.
$ Feature Tests : System level verification tests such as verify PIE works, verify in-game stats work, 
and verify changing resolution works.  See EditorAutomationTests.cpp or EngineAutomationTests.cpp for examples. 
$ Smoke Tests : Smoke Tests are just considered a speed promise by the implementer.  They are intended to 
be fast so they can run _everytime_ the editor, game, or a commandlet starts.  They are also selected by 
default in the [UI](Programming/Automation/UserGuide#UserInterface).
	
	[REGION:warning] All Smoke tests are intended to complete within 1 second.  Only mark Unit Tests or fast Feature Tests as Smoke Tests. [/REGION]

$ Content Stress Tests : More thorough testing of a particular system to avoid crashes, such as loading all maps 
or loading and compiling all blueprints.  See EditorAutomationTests.cpp or EngineAutomationTests.cpp 
for examples.

$ Screen Shot Comparison :The Screen Shot Comparison tool enables QA to quickly compare screenshots to identify potential 
rendering issues. [Screen Shot tool reference](Programming/Automation/ScreenShotComparison).


[DIR(output:"topiccompact" parent:"Programming/Automation" org:"hierarchy" tags:"Programming" end:"1")]

-
[/COMMENT]