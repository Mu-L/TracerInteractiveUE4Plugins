INTSourceChangelist:3150502
Availability:Public
Title:安装版本参考
Crumbs: %ROOT%, Programming, Programming/Development
Description:此页面讲述安装版本流程，包括如何编写安装版本脚本的概览。
version:4.13
parent:Programming/Development
type:Reference
related:Programming/Development/BuildGraph
related:Programming/UnrealBuildSystem
related:Programming/Development/BuildConfigurations
tags:BuildGraph

[TOC (start:1 end:5)]

[VAR:TopicCompact]
[OBJECT:TopicCompact]
	[PARAM:image]
		![%Programming/Development/InstalledBuildReference%](installedbuild_topic.png)
	[/PARAM]
	[PARAM:icon]
		![](%ROOT%/reference_icon.png)(convert:false)
	[/PARAM]
	[PARAM:title]
		%Programming/Development/InstalledBuildReference:title%
	[/PARAM]
	[PARAM:description]
		%Programming/Development/InstalledBuildReference:description%
	[/PARAM]
	[PARAM:path]
		[RELATIVE:Programming/Development/InstalledBuildReference]
	[/PARAM]
[/OBJECT]
[/VAR]

开发者们总是在针对不同硬件配置和操作系统寻找有效交付版本解决方案的方式。**安装版本** 是功能完整的引擎版本，可进行分发，使团队快速开始使用引擎。从技术角度而言，安装版本包含虚幻编辑器的预编译二进制文件，以及开发中每个目标平台和发布配置的静态库。 

安装版本进程自动设置制作虚幻引擎 4 安装版本所需的编译包和工具。概括而言，制作安装版本是设置默认目标平台、使用其工具和编辑器编译 UE4、运行测试、以及将 UE4 安装版本部署到目标平台的一系列过程。 

## 制作安装版本

可结合 `[UE4Root]/Engine/Build/InstalledBuild.xml` 中的安装版本脚本使用 [](Programming/Development/BuildGraph) 脚本系统创建安装版本。

**创建安装版本的步骤：**

1.	使用以下命令行调用 **AutomationTool**，用 `Win64` 或 `Mac` 替代 `[PLATFORM]`，运行安装版本脚本。还可使用可用的 [安装版本脚本选项](#bookmark1) 配置版本。

		BuildGraph -target="Make Installed Build [PLATFORM]" -script=Engine/Build/InstalledEngineBuild.xml -clean

1.	导航到虚幻引擎目录中的 `LocalBuilds/Engine/` 文件夹，查看创建的安装版本。如指定了不同的发布路径，则导航到该目录。

## 安装版本脚本选项

(#bookmark1)

`InstalledEngineBuild.xml` 脚本将制作出启用所有默认选项和平台的安装版本；然而，可使用一套特定选项对其进行配置，以便确定包含哪些平台、向何处发布版本，等等。将 `-listonly` 选项传至脚本即可查看自定义编译过程的可用选项列表（以及将要编译的节点列表）。 

可用选项有： 


| 选项 | 默认 | 描述 |
| ------ | ------- | ----------- |
| `-set:HostPlatformOnly=[true/false]` | false | 仅针对主平台制作安装版本的助手选项，因此无需逐个禁用平台 |
| `-set:WithWin64=[true/false]` | true | 包含 Win64 目标平台 |
| `-set:WithWin32=[true/false]` | true | 包含 Win32 目标平台 |
| `-set:WithMac=[true/false]` | true | 包含 Mac 目标平台 |
| `-set:WithAndroid=[true/false]` | true | 包含 Android 目标平台 |
| `-set:WithIOS=[true/false]` | true | 包含 iOS 目标平台 [REGION:note]启用此项需要带远程编译设置的 Mac。[/REGION]|
| `-set:WithTVOS=[true/false]` | true | 包含 tvOS 目标平台 [REGION:note]启用此项需要带远程编译设置的 Mac。[/REGION]|
| `-set:WithLinux=[true/false]` | true | 包含 Linux 目标平台 |
| `-set:WithHTML5=[true/false]` | true | 包含 HTML5 目标平台 |
| `-set:WithPS4=[true/false]` | false | 包含 PS4 目标平台 [REGION:note]启用此项需要 PS4 SDK。[/REGION]|
| `-set:WithXboxOne=[true/false]` | false | 包含 XboxOne 目标平台 [REGION:note]启用此项需要 Xbox One SDK。[/REGION]|
| `-set:WithDDC=[true/false]` | true | 为引擎内容和模板编译独立派生数据缓存 [REGION:note]为引擎和模板内容编译独立 [派生数据缓存（DDC）](Engine/Basics/DerivedDataCache) 是编译最慢的方面之一。如不需要独立 DDC，可在命令行中附加 `-set:WithDDC=false` 跳过此步骤。[/REGION]|
| `-set:SignExecutables=[true/false]` | false | 如已将机器对可执行文件签名设为编译过程的一部分，则对生成的可执行文件签名。
| `-set:AnalyticsTypeOverride=[ID]` | N/A | 分析事件发送的辨识符 |


### 包含额外文件

RuntimeDependencies（在每个模块的 `build.cs` 文件中设置）自动整理并确定哪些文件将包含在安装版本中。然而无法以此方式添加部分必需文件，因此它们在 `[UE4Root]/Engine/Build/InstalledEngineFilters.xml` 中被定义。`InstalledEngineFilters` XML 文件还列出了应排除在版本之外的文件，确定需要被去除或签名的文件类型，并最终决定为什么项目编译 DDC。如果需要在安装版本中包含额外文件，可从 `InstalledEngineFilters` XML 文件开始。
