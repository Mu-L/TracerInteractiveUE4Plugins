INTSourceChangelist:3808342
Availability:Public
Title:Installed Build のリファレンス
Crumbs: %ROOT%, Programming, Programming/Development
Description:Installed Build のスクリプトの書き方をはじめ、Installed Build プロセスについて説明します。
version:4.13
parent:Programming/BuildTools/AutomationTool/BuildGraph
type:Reference
related:Programming/BuildTools/AutomationTool/BuildGraph
related:Programming/UnrealBuildSystem
related:Programming/Development/BuildConfigurations
tags:Programming
tags:BuildGraph

[TOC (start:1 end:5)]

[VAR:TopicCompact]
[OBJECT:TopicCompact]
	[PARAM:image]
		![%Programming/Development/InstalledBuildReference%](installedbuild_topic.png)
	[/PARAM]
	[PARAM:icon]
		![](%ROOT%/reference_icon.png)(convert:false)
	[/PARAM]
	[PARAM:title]
		%Programming/Development/InstalledBuildReference:title%
	[/PARAM]
	[PARAM:description]
		%Programming/Development/InstalledBuildReference:description%
	[/PARAM]
	[PARAM:path]
		[RELATIVE:Programming/Development/InstalledBuildReference]
	[/PARAM]
[/OBJECT]
[/VAR]

デベロッパーは多様なハードウェア プロファイルとオペレーション システム向けにビルド ソリューションを効率的に提供する方法を常に求めています。 
**Installed Build** は十分な機能を備えたエンジンのビルドであり、チームでエンジンをすぐに使えるように再配布することができます。 
技術的な観点から、Installed ビルドにはアンリアル エディタのプリコンパイルされたバイナリと開発中の各ターゲット プラットフォームの静的ライブラリ、 
シッピングのコンフィギュレーションが含まれます。 

Installed Build プロセスは、UE4 を Installed Build バージョンにするために必要なパッケージやツールのビルドを自動化します。つまり、 
Installed Build を作るということは、デフォルトのターゲット プラットフォームを設定し、 
UE4 をツール、エディタと共にコンパイルし、テストを実行し、ターゲット プラットフォーム向けに UE4 の Installed Build バージョンをデプロイするというプロセスです。 

## Installed Build を作る

[](Programming/BuildTools/AutomationTool/BuildGraph) スクリプティング システムで `[UE4Root]/Engine/Build/InstalledBuild.xml` を使って 
Installed Build を作成することができます。

** Installed Build を作るには**

1.	Installed Build スクリプトを以下のコマンドラインで **AutomationTool** を呼び出して実行します。 `[PLATFORM]` を `Win64` または `Mac` で置き換えます。利用可能な [Installed Build Script Options](#bookmark1) を使ってビルドを設定することもできます。

		BuildGraph -target="Make Installed Build [PLATFORM]" -script=Engine/Build/InstalledEngineBuild.xml -clean

1.	Unreal Engine ディレクトリの `LocalBuilds/Engine/` フォルダに進み作成した Installed Build を表示します。パブリッシュ先として別のディレクトリを指定した場合は、代わりにそのディレクトリに進んでください。

## Installed Build スクリプトのオプション

(#bookmark1)

`InstalledEngineBuild.xml` スクリプトは、Installed Build のすべてのデフォルト オプションとプラットフォームを有効にします。ただし、これは 
オプション一式を指定し、どのプラットフォームを対象にするかを有効にし、ビルドをどこにパブリッシュするかなどを設定します。このビルド プロセスのカスタマイズに使えるオプション リスト (ビルドされるノートのリストも併せて) をご覧になりたい場合は、 
 -listonly オプションをスクリプトに渡します。 

以下は利用可能なオプションです。 


| オプション | デフォルト | 説明 |
| ------ | ------- | ----------- |
| `-set:HostPlatformOnly=[true/false]` | false | インストールしたビルドをホスト プラットフォームのみを対象にするヘルパー オプションです。各プラットフォームを個別に無効にする必要がなくなります。 |
| `-set:WithWin64=[true/false]` | true | Win64 ターゲット プラットフォームを含みます。 |
| `-set:WithWin32=[true/false]` | true | Win32 ターゲット プラットフォームを含みます。 |
| `-set:WithMac=[true/false]` | true |  Mac ターゲット プラットフォームを含みます。 |
| `-set:WithAndroid=[true/false]` | true | Android ターゲット プラットフォームを含みます。 |
| `-set:WithIOS=[true/false]` | true | iOS ターゲット プラットフォームを含みます。 [REGION:note]このオプションを有効にすると、リモート ビルド用に Mac を設定する必要があります。[/REGION] |
| `-set:WithTVOS=[true/false]` | true | tvOS ターゲット プラットフォームを含みます。 [REGION:note]このオプションを有効にすると、リモート ビルド用に Mac を設定する必要があります。[/REGION] |
| `-set:WithLinux=[true/false]` | true | Linux ターゲット プラットフォームを含みます。 |
| `-set:WithHTML5=[true/false]` | true | HTML5 ターゲット プラットフォームを含みます。 |
| `-set:WithPS4=[true/false]` | false | PS4 ターゲット プラットフォームを含みます。 [REGION:note]このオプションを有効にするには、PS4 SDK が必要です。[/REGION] |
| `-set:WithXboxOne=[true/false]` | false | XboxOne ターゲット プラットフォームを含みます。 [REGION:note]このオプションを有効にするには Xbox One SDK が必要です。[/REGION] |
| `-set:WithDDC=[true/false]` | true | エンジンのコンテンツとテンプレート用にスタンドアロンの派生データ キャッシュをビルドします。[REGION:note]エンジンとテンプレートのコンテンツ用のスタンドアロンの [派生データ キャッシュ (DDC)](Engine/Basics/DerivedDataCache) ビルドは、処理に時間がかかります。スタンドアロンの DDC が不要な場合は、コマンドラインに `-set:WithDDC=false` を追加することでこのステップをスキップできます。[/REGION] |
| `-set:WithFullDebugInfo=[true/false]` | false | バイナリ エディタとパッケージ化されたアプリケーションのビルドに対してフル デバッグ情報を生成します。 |
| `-set:SignExecutables=[true/false]` | false | ビルド プロセスの一部として実行ファイルに署名するようにマシンをセットアップしなければならない場合は、署名します。 |
| `-set:AnalyticsTypeOverride=[ID]` | N/A | 送信する分析イベントの識別子です。 |
| `-set:GameConfigurations=[Configurations]` | Development;Shipping | パッケージ化されたアプリケーションのコンフィギュレーションを指定します。 |


### さらにファイルを含める

RuntimeDependencies (各モジュールの `build.cs` ファイルで設定) は自動的に照合し、どのファイルが Installed Build に含まれているかを判断します。 
ただし、このやり方では必要であってもインクルードできないファイルがいくつかあります。そのため、こうしたファイルは `[UE4Root]/Engine/Build/InstalledEngineFilters.xml` で定義されます。 
`InstalledEngineFilters` XML ファイルは、ビルドから除外すべきファイルのパターンを一覧表示し、削除または署名する必要があるファイルのタイプを決めます。 
最後にどのプロジェクトに DDC をビルドするかを決めます。Installed Buildにさらにファイルを追加する必要があれば、 
`InstalledEngineFilters`XML ファイルから始めるとよいでしょう。
