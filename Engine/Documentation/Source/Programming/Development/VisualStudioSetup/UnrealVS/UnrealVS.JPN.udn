INTSourceChangelist:3426963
Availability:Public
Title:UnrealVS 拡張
Crumbs: %ROOT%, GettingStarted, Programming, Programming/Development/VisualStudioSetup
Description:Visual Studio に対応する UnrealVS 拡張のインストール、設定、使用方法
Version:4.16
Parent:Programming/Development/VisualStudioSetup
Order:
Type:overview

[EXCERPT:Overview]
Visual Studio に対応する UnrealVS 拡張により、アンリアル エンジン 4 (UE4) を使った開発では、一般的な操作に簡単にアクセスできるようになりました。

![](unrealvs_toolbar_cmd.png)

以下の機能があります。

* スタートアップ プロジェクトの設定
* スタートアップ プロジェクトをビルドするためのスタートアップ プロジェクトのビルド後に実行するコマンドの設定
* コマンド ライン引数の設定
* プロジェクトのバッチビルド
* クイックビルド プロジェクト メニュー

[REGION:note]
UnrealVS 拡張は Visual Studio Express 版と連動しません。Visual Studio Community と Visual Studio Professional とのみ互換性があります。
[/REGION]
[/EXCERPT:Overview]


## インストールと設定

**UnrealVS 拡張のインストール方法**

1. ご利用 のVisual Studio バージョンの拡張を以下で探してください。

		[UE4RootLocation]/Engine/Extras/UnrealVS/<VS-Version>/UnrealVS.vsix

1. `UnrealVS.vsix` ファイルを **ダブルクリック** して実行しインストールを開始します。

1. UnrealVS 拡張は、特定の Visual Studio バージョンをターゲットにしています。インストーラがご利用のバージョンをターゲットにしていること、およびそのボックスにチェックが入っていることを確認します。次に、**[Install]** ボタンをクリックします。

	![](install_dialog.png)
1. インストールが完了したら、 **[Close]** ボタンをクリックします。

	![Install Complete](install_complete_dialog.png)

1. Visual Studio を実行すると、 **Tools->Extensions and Updates...** で拡張が表示されます。

	![Extension Manager](extension_manager.png)

	[REGION:note]
	Visual Studio が既に実行中の場合、拡張のロードおよび表示前に再起動する必要があります。
	[/REGION]
	[REGION:tip]
	拡張は **Help->About Microsoft Visual Studio** ダイアログの [Installed Products] リストにも表示されます。
	[/REGION]

1. **View->Toolbars** に進むか、または Visual Studio のツールバー エリアで **右クリック** して、**UnrealVS** を選択して拡張のツールバーを表示します。

	![UnrealVS Toolbar](unrealvs_toolbar_cmd.png)

1. デフォルトで、ツールバーは上の図のように表示されますが、その内容は以下の手順でカスタマイズできます。**Tools->Customize...** で、**[コマンド]** タブにある **[UnrealVS]** ツールバーを選択します。

	![UnrealVS Customize Toolbar](toolbar_customize.png)

1. **Customize**	のダイアログで、**[Add Command...]** を選択し、**カテゴリ** リストから **UnrealVS** を選択し、ツールバーに追加可能な UnrealVS コマンドのリストを表示します。

	![UnrealVS Customize Commands](toolbar_customize_commands.png)


## スタートアップ プロジェクトの設定

**[Startup Project]** ドロップダウンはスタートアップ プロジェクトを迅速に設定したり切り替える手段です。 
このソリューションで実行ファイルをビルドする利用可能なすべてのプロジェクトの一覧が自動的に表示されます。
リストで選択したプロジェクトは、現在のスタートアップ プロジェクトとして設定されます。

![](startup_project_menu.png)

UnrealVS オプションにどのプロジェクトをリスト化するかを変更することができます。Game プロジェクトだけを表示するには、 **[ツール] > [オプション]** に進み **UnrealVS** を選択します。 

![](options_screen.png)

### スタートアップ プロジェクトをビルドする

拡張には、現在のスタートアップ プロジェクトをビルドするコマンドも含まれ、 
ホットキーやカスタム コマンドを実行する他の手段に結合することができます。

####コマンドをホットキーに結合するには、以下の手順に従います。

1. **[ツール] > [オプション]** を選択後、**[Environment]** ツリーに表示される **[Keyboard]** を選択します。

1. コマンドリストから **UnrealVS.BuildStartupProject** コマンドを選択します。 

	[REGION:tip]
		検索ボックスに "UnrealVS" と入力してリストをフィルタにかけます。
	[/REGION]

	![Filtered Command List](build_startup_search.png)

1. コマンドを選択後、**[Press Shortcut Keys]** ボックスをクリックして、コマンドの実行に使用するキーの組み合わせを選択します。以下の例では、**Ctrl + Alt + Shift + B** となっています。

	![Shortcut Keys](build_startup_keys.png)

	[REGION:note]
		既に割り当て済みのキーの組み合わせは選択しないでください。 
		**[Shortcut currently used by]** ボックスは、選択したキーの組み合わせが使用済みであることを警告するために 
		表示されます。
	[/REGION]

1. **[Assign]** ボタンを押すと、キーとコマンドが結合されます。キーは、 
	**[Shortcuts for selected command (選択したコマンドのショートカット)]** ボックスに表示されます。

	![Assigned Keys](build_startup_assigned.png)

1. 変更を保存するには、**[OK]** ボタンを押します。これで、次回ショートカットを使用するとスタートアップ プロジェクトとして設定されたプロジェクトが自動的にビルドされます。


## コマンドライン引数

デバッグ セッションの実行時に、現在のプロジェクトの **Command Arguments** 設定に **Command-Line** コントロールが 
使用されます。プロジェクトの **プロパティ** で設定するショートカットです。実際に、 
 ここで加えられた変更は、自動的に **Properties** へ反映されます。逆もまた同様です。

テキストボックスに引数を入力するか、ドロップダウン リストを使用して最近の引数のリストから選択します。この引数は、デバッグセッションが開始すると 
実行ファイルへ渡されます。

![Command Arguments](unrealvs_toolbar_args.png)

[REGION:note]
	アンリアル エディタをビルドするゲーム プロジェクトのプロジェクト config が、コマンドラインにプロジェクト名を自動的に追加し、アンリアル エディタの実行ファイルに対してどのプロジェクトを使用しているかを自動的に知らせます。
	例えば、ビルドの config 'Debug Editor' を使用して QAGame をビルドする場合、コマンドラインには、ボックスで入力する必要なしに、QAGame.uproject がコマンド引数に追加されます。
	QAGame のエディタを起動するには、**Command-Line** コントロールを空のままにしても、アンリアル エディタはどのプロジェクトが実行中であるかを認識します。
[/REGION]

利用可能な全ての引数のリストは、 [コマンドライン引数](Programming/Basics/CommandLineArguments) をご覧ください。

## プロジェクトのリフレッシュ

[](Programming/UnrealBuildSystem/ProjectFileGenerator) を使用して、プロジェクト ファイルを Visual Studio 内で生成することができます。 
`.bat` ファイルへ移動して手動で実行する必要がないため、 
プロジェクトファイルの同期と更新にかかる時間を短縮できます。

**プロジェクトファイルをリフレッシュするには以下の手順に従います。**

1. **[UnrealVS]** ツールバーに表示される Refresh Projects Refresh ボタンを押します。

![Refresh Projects](button_refresh.png)

1. プロセスが開始すると、**[Output]** ウィンドウにプロジェクト生成プロセスが表示されます。

	![Project Generator Output](refresh_output.png)

1. 促されたら必要なプロジェクトを再ロードします。

## Batch Builder

**UnrealVS Batch Builder** は、ビルド ジョブのカスタム セットを作成し、実行する手段を提供します。Visual Studio の **Build->Batch Build...** オプションよりも多用途に使用できます。

**Batch Builder ウィンドウを開くには以下の手順に従います。**

1. **UnrealVS** ツールバー上の [Batch Builder] ボタンを押すか、コマンド UnrealVS.BatchBuilder に割り当てたキーボードのショートカットを使用します。 
(**UnrealVS** コマンドでキーボードのショートカットを設定する手順については、上記の **スタートアップ プロジェクトをビルドする** のセクションを参照してください。)

![Batch Builder](button_batchbuilder.png)

1. **UnrealVS Batch Builder** ウィンドウが表示されます。

	![Batch Builder Window](batchbuilder_window.png)

	* Project、Config、Platform、ジョブ タイプを設定して **Build Job** を作成します。
	* 矢印ボタンでジョブを追加/削除します。
	* 矢印ボタンで選択したジョブをリスト内で上下に移動します。
	* こうしたコントロールでコンボボックスに現在表示されている **ジョブセット** を編集します。
	* 新規のジョブセットを作成するには、新しい名前をコンボボックスに入力します。
	* ドロップダウン リストを使用して既存のジョブセットを選択することができます。
	* **[Delete (削除)]** ボタンで、選択したジョブセットをリストから削除します。
	* **[Start (開始)]** ボタンで現在のジョブセットのバッチ ビルド タスクを開始/終了します。
	* ジョブセットは、ロードされたソリューションについて .suo ファイルに次回のために格納されます。

1. **[開始]** をクリックすると、バッチビルドの進捗を表す**[Output]** タブが表示されます。

	![Batch Builder Window running](batchbuilder_window2.png)

	* 実行しているセットの **Build Jobs** が出力リストに表示されます。
		* ![Queued Build Job](buildjob_lightgrey.png) - 待機中のジョブ
		* ![Succeeded Build Job](buildjob_green.png) - 完了、成功
		* ![Failed Build Job](buildjob_red.png) - 失敗
		* ![Cancelled Build Job](buildjob_orange.png) - キャンセル
		* 現在、実行中のビルド ジョブが太字で表示されます
	* バッチ ビルド実行中にビジーのアニメーションと停止ボタンが表示されます。

1. 各 **Build Jobs** から、**Output タブ** のアイテムを **ダブルクリック** するか、または **右クリック** してコンテキストメニューから **Show Output** を選択して出力を見ることができます。

	![BatchBuild Output Pane](batchbuilder_outputpane.png)

	[REGION:note]
		各アイテムに対する **Batch Builder** 出力の表示は、UnrealVS - BatchBuild という名前のペインにある Visual Studio **Output** ウィンドウに表示されます。
		これを、現在の/最後のビルド ジョブの出力を表示する Build ペインと間違わないようにしてください。
	[/REGION]	

## クイックビルドメニュー

**[Quick Build (クイックビルド)]** メニューは、メインのソリューション ビルド config を変更する必要なく、どの config とプラットフォームの組み合わせでもプロジェクトをビルドする簡単な方法を提供します。

![Quick Build Menu](menu_quickbuild.png)

1. **[Solution Explorer]** でプロジェクト ノードを **右クリック** します。

1. **[UnrealVS Quick Build]** メニューには、アンリアル エンジン ソリューションで利用可能なプラットフォームとビルド config のサブメニューがあります。

1. 選択したプロジェクト、プラットフォーム、config をビルドするためのアイテムを選択します。これは、IDE でソリューションのコンフィギュレーション、ソリューションのプラットフォームを変更し、
ビルドを開始し、次に config とプラットフォームを再度切り替えることに比べるとはるかに迅速です。

[REGION:note]
	IDE でソリューションの config とプラットフォームを変更するよりも迅速です。
[/REGION]	

## UnrealVS ソースコードでの作業

UnrealVS のソースコードは [UE4RootLocation]/Engine/Source/Programs/UnrealVS/ フォルダにあります。  

Visual Studio で UnrealVS プロジェクトファイルをロードするためには、UnrealVS をコンパイルする Visual Studio の適切なバージョンの Visual Studio SDK をインストール済である必要があります。例えば、Visual Studio 2015 までをサポートする場合、[Visual Studio 2015 SDK](https://msdn.microsoft.com/en-us/library/bb166441.aspx) をインストールしてから、UnrealVS プロジェクト ファイルを Visual Studio 2015 にロードする必要があります。

