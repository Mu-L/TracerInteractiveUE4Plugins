INTSourceChangelist:6594279
Availability: Public
Title: UnrealVS 익스텐션
Description: Visual Studio 용 UnrealVS 익스텐션 설치, 셋업, 사용 안내입니다.
Type: overview
Version: 4.22
Parent: Programming/Development/VisualStudioSetup

Visual Studio 용 UnrealVS 익스텐션으로 언리얼 엔진으로 개발할 때 자주 쓰는 기능을 쉽게 접할 수 있습니다. 익스텐션을 설치하고 프로젝트에 사용하는 방법을 설명합니다.

포함된 기능:

*   Startup Project 설정

*   Startup Project 빌드에 바인딩 가능한 명령

*   명령줄 인수 설정

*   프로젝트 배치 빌드

*   '퀵 빌드' 프로젝트 메뉴.

[REGION:note]
UnrealVS 익스텐션은 Visual Studio Express 버전에서 작동하지 않습니다. Visual Studio Community 와 Professional 버전에서만 호환됩니다.
[/REGION]

## 설치와 셋업

**UnrealVS 익스텐션 설치를 위해서는:**

1.  디스크의 `UnrealVS.vsix` 파일을 찾습니다:

    `[UE4RootLocation]/Engine/Extras/UnrealVS/<VS-Version>/UnrealVS.vsix`  

1. `UnrealVS.vsix` 파일을 더블클릭하여 설치를 시작합니다.

1. UnrealVS 익스텐션이 특정 Visual Studio 버전을 대상으로 삼습니다. 인스톨러가 올바른 버전을 대상으로 삼는지, 박스가 체크되어 있는지 확인한 다음 **설치** 버튼을 눌러 계속합니다.

    ![](UnrealVSExtension-InstallSetup-03.png)

1. 설치가 끝나면 **닫기** 버튼을 누릅니다.

    ![Install Complete](UnrealVSExtension-InstallSetup-04.png)

1. Visual Studio 를 실행시키고, **Tools >Extensions and Updates...** 에서 익스텐션을 확인할 수 있을 것입니다

    ![Extension Manager](UnrealVSExtension-InstallSetup-05.png)

    [REGION:note]
    Visual Studio 가 이미 실행중이라면 재시작을 해야 익스텐션이 로드되어 표시될 것입니다. 익스텐션은 **Help > About Microsoft Visual Studio** 대화창의 Installed Products 목록에도 표시됩니다.
    [/REGION]

1. **View > Toolbars** 또는 Visual Studio 툴바 영역에 우클릭한 다음 **UnrealVS** 를 선택하여 익스텐션의 툴바를 표시합니다.

    ![UnrealVS Toolbar](unrealvs_toolbar_cmd.png)

1. 기본적으로 툴바는 위와 같이 나타나나, **Tools > Customize...** 에서 **Commands** 탭의 **UnrealVS** 툴바를 선택하여 입맛대로 맞출 수 있습니다.

    ![UnrealVS Customize Toolbar](UnrealVSExtension-InstallSetup-07.png)

1. Customize 대화창에서 **Add Command...** 를 선택한 다음 Categories 목록에서 **UnrealVS** 를 선택하면 툴바에 추가할 수 있는 UnrealVS 명령 목록이 나타납니다. 명령 추가를 완료하면 **확인** 을 클릭하세요.

    ![UnrealVS Customize Commands](UnrealVSExtension-InstallSetup-08.png)

## 스타트업 프로젝트 설정

**Startup Project** 드롭다운으로 _Startup Project_ 간의 전환이나 세팅을 빠르게 할 수 있습니다. 솔루션에서 실행파일을 빌드하는 데 사용할 수 있는 게임 프로젝트가 자동으로 모두 나열됩니다. 목록에서 프로젝트를 선택하면 그것이 현재 스타트업 프로젝트로 설정됩니다.

![](startup_project_menu.png)

UnrealVS 옵션에서 나열되는 프로젝트를 변경할 수 있습니다. Game 프로젝트만 보이려면, **Tools > Options...** 에서 **UnrealVS** 를 선택하면 됩니다. **Hide Non-Game Startup Projects** (게임이 아닌 시작 프로젝트 숨김) 옆 드롭다운을 클릭하고 **True** 를 선택합니다. 그리고 **확인** 을 클릭합니다..

![Set Startup Project](UnrealVSExtension-SetStartupProject.png)

### 스타트업 프로젝트 빌드

익스텐션에는 현재 _Startup Project_ 빌드 기능을 단축키나 다른 커스텀 실행 방법에 지정하는 명령도 포함되어 있습니다.

####단축키에 지정하는 방법

1. **Tools > Options...** 대화창에서 **Environment** 트리 아래 **Keyboard** 를 선택합니다. **Apply the following additional keyboard mapping scheme** 아래 드롭다운을 클릭하고 **Visual C++ 6** 을 선택합니다.

1. 목록에서 **UnrealVS.BuildStartupProject** 명령을 선택합니다.

	![Filtered Command List](UnrealVSExtension-Build-BindCommand-02.png)

    [REGION:tip]
    검색창에 "UnrealVS" 를 입력하여 걸러낼 수 있습니다.
    [/REGION]

1. 명령을 선택한 상태로 **Press Shortcut Keys** 박스에 클릭한 다음 명령을 실행시키는 데 사용할 키 조합을 입력합니다. 예제에서는 **Ctrl + Alt + Shift + B** 가 표시되어 있습니다.

    ![Shortcut Keys](UnrealVSExtension-Build-BindCommand-03.png)

    [REGION:note]
    이미 다른 명령에 할당되지 않은 키 조합을 선택해야 합니다. 입력한 키 조합이 이미 사용중이면 **Shortcut currently used by** 박스에 경고가 뜹니다.
    [/REGION]

1. **할당** 버튼을 눌러 명령에 키를 지정합니다. 지정된 키는 **Shortcuts for selected command** 박스에 표시됩니다.

    ![Assigned Keys](UnrealVSExtension-Build-BindCommand-04.png)

1. **OK** 버튼을 눌러 변경내용을 저장합니다. 이제 그 단축키를 사용하면 _Startup Project_ 로 설정된 프로젝트가 자동 빌드됩니다.

### 단일 소스 파일 반복처리

Visual Studio 에서 [Ctrl+F7](https://docs.microsoft.com/en-us/visualstudio/ide/default-keyboard-shortcuts-for-frequently-used-commands-in-visual-studio) 을 사용하는 단일 소스 (.cpp) 파일에 대한 업데이트 반복처리에 익숙한 경우 , **Ctrl+F7** 에 **UnrealVS.CompileSingleFile** 명령을 바인딩하면, 현재 솔루션 구성, 플랫폼, `-singlefile = <현재 열려있는 파일의 경로>` 인수를 사용하여 활성 프로젝트를 빌드할 수 있습니다.

## 명령줄 인수

**Command-Line** (명령줄) 컨트롤은 디버깅 세션에서 실행하는 현재 프로젝트에 대한 **Command Arguments** (명령줄 인수)를 설정하는 데 사용됩니다. 프로젝트 **Properties** 를 통해 설정하는 데 대한 단축키 역할을 합니다. 사실상, 여기에 가한 변경은 **Properties** 에도 자동 반영됩니다.

텍스트 박스에 인수를 입력하거나, 드롭다운 목록 중 최근의 인수 목록에서 선택합니다. 그러면 디버깅 세션이 시작될 때 실행파일에 그 인수가 전달됩니다.

![Command Arguments](unrealvs_toolbar_args.png)

[REGION:note]
언리얼 에디터를 빌드하는 게임 프로젝트에 대한 프로젝트 환경설정, 에디터 실행파일이 사용중인 프로젝트를 알 수 있도록 명령줄에 프로젝트 이름이 자동으로 붙습니다. 예를 들어 `Debug Editor` 환경설정을 사용하여 QAGame 을 빌드하는 경우, 명령줄에 인수를 별도로 입력해 주지 않아도 QAGame.uproject 인수가 자동으로 붙습니다. QAGame 에 대한 에디터를 실행하려는 경우, **Command-Line** 컨트롤을 비워둬도 에디터는 어느 프로젝트를 실행중인지 알 것입니다.
[/REGION]

사용가능한 인수 전체 목록은 [](Programming/Basics/CommandLineArguments) 문서를 참고해 주시기 바랍니다.

## 프로젝트 새로고침

프로젝트 파일은 Visual Studio 에서 [](Programming/BuildTools/UnrealBuildTool/ProjectFilesForIDEs) 를 사용하여 생성할 수 있습니다. 모든 프로젝트 파일 동기화와 업데이트 작업이 훨씬 빨라지는데, `.bat` 파일을 수동으로 찾아서 실행해 줄 필요가 없어지기 때문입니다.

**프로젝트 파일을 새로고치려면:**

1. **UnrealVS** 툴바의 **프로젝트 새로고침** 버튼을 누릅니다.

    ![](button_refresh_crop.png)

1. 프로젝트 생성 프로세스 진행과정이 **출력** 창에 표시됩니다.

    ![Project Generator Output](refresh_output.png)

1. 창에 뜬 대로 필요한 프로젝트를 다시 로드합니다.

## 배치 빌더

**UnrealVS Batch Builder** 로 일정한 세트의 빌드 잡을 만들어 실행시킬 수 있습니다. Visual Studio 의 **Build > Batch Build...** 옵션보다 다용도입니다.

**배치 빌더 창을 열려면:**

1. **UnrealVS** 툴바의 배치 빌더 버튼을 누르거나 _UnrealVS.BatchBuilder_ 명령에 할당시킨 키보드 단축키를 누릅니다. (**UnrealVS** 명령에 키보드 단축키를 설정하는 방법은 위의 **스타트업 프로젝트 빌드** 부분을 참고하세요).

    ![Batch Builder](button_batchbuilder_crop.png)

1. **UnrealVS 배치 빌더** 창이 나타납니다.

    ![Batch Builder Window](batchbuilder_window.png)

    *   **Project**, **Config**, **Platform** 을 선택하고 원하는 잡 유형의 동글 버튼을 클릭해서 **Build Job** (빌드 잡)을 생성합니다.
    
    *   **>** 및 **<** 버튼으로 잡을 추가/제거합니다.
    
    *   **Build Jobs** (빌드 잡) 목록에서, 오른쪽 화살표 버튼으로 선택된 잡을 목록에서 위아래 이동합니다.
    
    *   **Build Jobs** (빌드 잡) 목록 아래 드롭다운에서 편집하려는 **Job Set** (잡 세트)를 선택합니다.
    
    *   새 **Job Set** (잡 세트)를 만들려면, 필드에 새 이름을 입력합니다.
    
    *   **Delete** (삭제) 버튼은 목록에서 선택된 **Job Set** (잡 세트)를 삭제합니다.
    
    *   **Start** (시작) 버튼으로 현재 잡 세트에 배치 빌드 작업을 **시작 또는 중지** 합니다.
    
    *   잡 세트는 .suo 파일에 저장되어 다음 번 솔루션을 로드할 때 사용됩니다.

1.  **Start** (시작)을 클릭하면 **Output** (출력) 탬에 배치 빌드 진행률이 표시됩니다. 

    ![Batch Builder Window running](batchbuilder_window2.png) 
    
    실행중인 세트의 **Build Jobs** (빌드 잡)이 출력 목록에 표시됩니다. 현재 실행중인 빌드 잡은 굵게 표시됩니다.
    
    *   ![Queued Build Job](buildjob_lightgrey.png) = 대기중인 잡
    
    *   ![Succeeded Build Job](buildjob_green.png) = 잡 완료, 성공함
    
    *   ![Failed Build Job](buildjob_red.png) = 잡 실패
    
    *   ![Cancelled Build Job](buildjob_orange.png) = 잡 취소
    
    배치 빌드가 실행중일 때는 바쁨 애니메이션과 **Stop** (중지) 버튼이 표시됩니다.

1. **출력** 탭의 항목을 더블클릭하거나 우클릭한 다음 컨텍스트 메뉴에서 **Show Output** 을 선택하면 개별 **Build Jobs** 에서의 출력을 확인할 수 있습니다.

    ![BatchBuild Output Pane](batchbuilder_outputpane.png)

    [REGION:note]
    개별 항목에 대한 **Batch Builder** 출력 표시는 Visual Studio **Output** 창에서 **UnrealVS - BatchBuild** 라는 이름의 패널에 표시됩니다. 현재/지난 빌드 잡의 출력을 표시하는 Build 패널과 혼동을 피하기 위함입니다.
    [/REGION]

## 퀵 빌드 메뉴

**Quick Build** 메뉴에는 메인 솔루션 빌드 환경설정을 바꾸지 않고도 다른 환경설정과 플랫폼 조합으로 프로젝트를 쉽게 빌드할 수 있는 방법이 제공됩니다.

![Quick Build Menu](menu_quickbuild.png)

1. **Solution Explorer** 에서 Project 노드에 우클릭합니다.

1. **UnrealVS Quick Build** 메뉴에는 언리얼 엔진 솔루션에서 사용가능한 플랫폼과 빌드 환경설정에 대한 서브메뉴가 들어있습니다.

1. 항목을 선택하여 선택된 프로젝트, 플랫폼, 환경설정으로 빌드합니다. IDE 에서 Solution Configuration 과 Solution Platform 을 바꾸고 빌드를 시작시킨 다음 원래대로 다시 설정하는 것보다 훨씬 빠릅니다.

## UnrealVS 소스 코드 작업하기

UnrealVS 소스 코드는 [UE4Root위치]/Engine/Source/Programs/UnrealVS/ 폴더에 있습니다.

Visual Studio 로 UnrealVS 프로젝트 파일을 로드하기 위해서는, UnrealVS 를 컴파일할 적합한 버전의 Visual Studio 에 맞는 Visual Studio SDK 가 설치되어 있어야 합니다. 예를 들어 Visual Studio 2015 까지 지원하려면 [Visual Studio 2015 SDK](https://msdn.microsoft.com/en-us/library/bb166441.aspx) 를 설치한 다음, Visual Studio 2015 에 UnrealVS 프로젝트 파일을 로드해 줘야 합니다.