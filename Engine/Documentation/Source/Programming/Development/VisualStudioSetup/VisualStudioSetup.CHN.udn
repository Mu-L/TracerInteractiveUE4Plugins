INTSourceChangelist:3467293
Availability:Public
Title:为UE4设置Visual Studio
Description:如何设置Visual Studio以使用虚幻引擎4进行开发的提示、技巧和技术。
Crumbs: %ROOT%
Parent:Programming/Development
Order:
Version: 4.16
type:overview
tags:Visual Studio
skilllevel:Beginner
topic-image:SettingUpVSForUE4_topic.png

[TOC(start:2 end:3)]

[EXCERPT:Intro]

虚幻引擎4(UE4)设计为可与Visual Studio顺利集成，允许您在项目中快速、轻松地更改代码，以便在编译完成时立即看到结果。 
设置Visual Studio以配合UE4使用可以帮助使用UE4的开发人员提高效率和整体用户体验。

在本文中，我们还将介绍设置UE4到VS2013工作流程的基础知识。
[/EXCERPT:Intro]

(#beforesetting-upyourue4-to-vsworkflow)

## 设置您的UE4到VS工作流程之前

需要注意的是，Visual Studio 2015(VS2015)默认情况下不安装C++工具支持。安装VS2015时，选择 **自定义（Custom）** 安装，然后选择您的工作流程所需的C++组件。
如果您已经安装了Visual Studio 2015，选择 **文件（File）> 新建（New）> 项目（Project）> C++** 来安装C++。

下表列出了Visual Studio的哪些版本可与UE4的二进制版本集成。

| 虚幻引擎版本     | Visual Studio版本 |
| ------------------------- | --------------------- |
| **4.15或更高版本**         | VS2017                |
| **4.10到4.14**          | VS2015                |
| **4.2到4.9**            | VS2013                |

UE4的开源版本（可通过GitHub和P4获得）与VS2013集成。此外，本文档不讨论较早UE4版本与较旧Visual Studio版本的集成。

(#recommendedsettings)

## 推荐设置

以下是对使用Visual Studio和虚幻引擎4的开发人员的推荐设置。

[EXCERPT:BasicVSFormat]

1. 通过执行以下步骤增加解决方案配置下拉菜单的宽度：
	1. 右键单击工具栏并在出现的菜单底部选择 **自定义（Customize）**。
		
		![](SelectingCustomize.png)
	1. 单击 **命令（Commands）** 选项卡。
		
		![](ClickCommandsTab.png)
	1. 选择 **工具栏（Toolbar）** 单选按钮。
		
		![](SelectToolbarRadioButton.png)
	1. 在 **工具栏（Toolbar）** 旁边的下拉菜单中，选择 **标准（Standard）**。
		
		![](SelectStandard.png)
	1. 在底部的 **控件（Controls）** 列表中，选择 **解决方案配置（Solution Configurations）** 控件。
		
		![](SelectSolutionConfigControl.png)
	1. 单击右侧的 **修改选择（Modify Selection）**。
		
		![](ClickModifySelection.png)
	1. 将 **宽度（Width）** 设置为“200”。
		
		![](SetWidth_200.png)
	1. 单击 **关闭（Close）**。您的工具栏应立即更新。
		
		![](ClickClosetoUpdateToolbar.png)
1. 通过执行以下步骤添加解决方案平台（Solution Platforms）下拉菜单。
	1. 在标准工具栏上找到最右边的按钮，它将打开下拉菜单，允许您从工具栏中添加和删除按钮。
		
		![](SelectDropDownButton.png)
	1. 单击下拉按钮，将鼠标悬停在 **添加或删除按钮** 上，然后单击 **解决方案平台（Solution Platform）** 将菜单添加到工具栏中。

		![](SelectSolutionPlatforms.png)
1. 我们建议您关闭 **错误列表（Error List）** 窗口。通常，当代码中出现错误时，**错误列表（Error List）** 窗口会自动弹出。但是，在使用虚幻引擎时，**错误列表（Error List）** 窗口可以显示假的错误信息。在使用虚幻引擎时，最好禁用 **错误列表（Error List）** 窗口，并使用 **输出（Output）** 窗口查看真实的代码错误。下面的步骤向您展示如何关闭 **错误列表（Error List）** 窗口：
	1. 如果 **错误列表（Error List）** 窗口是打开的，关闭它。 
	1. 从 **工具（Tools）** 菜单中，打开 **选项（Options）** 对话框。
		
		![](OpenOptionsDialog.png)
	1. 选择 **项目和解决方案（Projects and Solutions）**，取消勾选 **如果构建完成时出错，总是显示错误列表（Always show Error List if build finishes with error）**。
		
		![](UncheckErrorsListOption.png)
	1. 单击 **确定（OK）**。
		
[/EXCERPT:BasicVSFormat]

[REGION:tip]
您可能会发现的其他有用的配置步骤为：

* 关闭 **显示不活动的代码块（Show Inactive Blocks）**。如果未关闭，许多代码块可能在文本编辑器中显示为灰色。（**工具（Tools）> 选项（Options）> 文本编辑器（Text Editor）> C/C++ > 视图（View）**）。
* 将 **禁用外部依赖性文件夹（Disable External Dependencies Folders）** 设置为True，将不需要的文件夹隐藏在 **解决方案浏览器（Solution Explorer）** 中。（**工具（Tools）> 选项（Options）> 文本编辑器（Text Editor）> C/C++ > 高级（Advanced）** 中的 **禁用外部依赖性文件夹（Disable External Dependencies Folders）**）
* 关闭 **编辑和继续（Edit & Continue）** 功能，您不需要它们。（**工具（Tools）> 选项（Options）> 调试（Debugging）> 编辑和继续（Edit and Continue）**）

* 打开智能感应（IntelliSense）。（请参阅[智能感应、实时错误和Squiggle](#Intellisense)）
[/REGION]

(#visualassistxusers)

###Visual Assist X用户
如果已安装了Visual Assist X：
* 关闭 **粘贴后格式化（Format After Paste）**（**VAssistX > Visual Assist X选项（Visual Assist X Options）> 高级（Advanced）> 纠正（Corrections）**）。如未禁用此选项，Visual Assist X将自动格式化源代码，可能会导致出现格式不佳的文档。

(#visualstudio2017users)

###Visual Studio 2017用户

如果您是第一次安装Visual Studio，您需要确保启用了以下选项。

(#withtheue4installer)

####带UE4安装程序

以下选项将下载UE4安装程序，作为Visual Studio 2017安装的一部分。

![](VS2017_SettingsInstaller.png)

(#withouttheue4installer)

####不带UE4安装程序

以下选项不会将UE4安装程序作为Visual Studio 2017安装的一部分下载。

![](VS2017_SettingsNoInstaller.png)

(#Intellisense)
(#intellisense,liveerrors,andsquiggles)

## 智能感应、实时错误和Squiggle

UE4项目现在有了正确的智能感应支持，包括实时错误列表和squiggle。
（有关如何启用它，请参见下面的内容。）

当您输入时，智能感应会重新编译C++。这比仅仅使用VAX的语法检查功能强大得多， 
因为它使用完整的C++编译器来验证每一行代码。它非常棒， 
可以加快您的工作流程！

![VC++ Intellisense Squiggles](squiggle.png)

除了Squiggle之外，您还将在正在查看的任何文件的错误列表中看到智能感应错误。 
您可以在错误列表中的 **右键菜单** 中打开或关闭它。

![Error List](error_list.png)

您可能已经禁用了Squiggle，因为它们不能用于UE4项目。请确保点击C/C++高级（C/C++ Advanced）选项卡并使用 
与下面类似的设置。

![VC++ Advanced Options](intellisense_options.png)

当您打开一个C++文件，您可以通过寻找以下图标看到智能感应编译器“工作”：

![Intellisense Progress Indicator](intellisense_progress.png)

(#implementationdetails)

### 实施详情

* 在编辑代码时，有时需要几秒钟的时间才会显示Squiggle。
    * 这是因为我们有大量的包含文件，而智能感应目前并不使用PCH。
* 有时您会看到“错误肯定”的智能感应错误。有几个可能的原因。
    * 智能感应编译器(EDG)比MSVC编译器更严格。
    * 有些#定义的智能感应设置与正常构建时的设置不同。
    * 由智能感应编译的C++总是被视为32位。 
* 在绝对必要的情况下，您可以将代码打包到“#ifdef __INTELLISENSE__”以消除Squiggle。
* 智能感应错误的措辞与VC++编译器的错误稍有不同。事实就是如此。
* 标头文件中的Squiggle的工作原理是根据已知的包含该标头文件的“.cpp”编译标头文件。
    * 有时智能感应会搞砸，您会在标头中看到Squiggle。
* 有一个 **Max Cached Translation Units** 设置（如上所示），如果需要可以增加。
    * 它使用了更多内存，但可能会稍微提高响应能力。
* 一些C++文件仍然不兼容智能感应。
* 虚幻构建工具有一个新的“-智能感应（-IntelliSense）”选项。
    * 这将为我们所有的项目文件生成智能感应属性表。
    * 这只需要在添加新模块或更改项目包含内容时重新运行。


(#unrealvsextension)

## UnrealVS扩展

[INCLUDE:Programming/Development/VisualStudioSetup/UnrealVS#Overview]


有关设置和使用扩展的信息，请参阅[](Programming/Development/VisualStudioSetup/UnrealVS) 
页面。


(#debugging)
## 调试

Visual Studio支持使用查看器扩展调试器，这些查看器可以方便地检查常见的虚幻类型，如FName和动态阵列。


(#installingtheue4visualizerforvisualstudio2013)

### 为Visual Studio 2013安装UE4查看器
安装UE4查看器需要两个步骤。

[PUBLISH:Licensee]
1. 定位包含查看器逻辑的文件，该文件是UE4发布版的一部分：

	* //depot/UE4/Engine/Extras/VisualStudioDebugging/UE4.natvis
[/PUBLISH:Licensee]

[PUBLISH:Rocket]
1. 定位包含查看器逻辑的文件，该文件是您的安装的一部分：

    * [UE4Root]/Engine/Extras/VisualStudioDebugging/UE4.natvis
[/PUBLISH:Rocket]

1. 将“UE4.natvis”复制到以下任一位置：

    * [VisualStudioInstallPath]/Common7/Packages/Debugger/Visualizers/UE4.natvis
    * [UserProfile]/My Documents/Visual Studio 2013/Visualizers/UE4.natvis

[REGION:warning]
将文件复制到Visual Studio安装目录可能需要管理员权限。
[/REGION]

