INTSourceChangelist:3467293
Availability:Public
Title:UE4 に Visual Studio を設定する方法
Description:UE4 を使用した開発で Visual Studio を設定するためのヒントやテクニック
Crumbs: %ROOT%
Parent:Programming/Development
Order:
Version: 4.16
type:overview
tags:Visual Studio
skilllevel:Beginner
topic-image:SettingUpVSForUE4_topic.png

[TOC(start:2 end:3)]

[EXCERPT:Intro]

UE4 は、Visual Studio とスムーズな統合ができるように設計されています。プロジェクトで迅速かつ簡単にコード変更を行い、コンパイルしてその結果を直ちに確認することができます。 
Visual Studioを UE4 と連携させるように設定することで、デベロッパーの効率と全体的なユーザー体験を向上させることができます。

このドキュメントでは、UE4 と VS2013 ワークフローの設定の基礎についても取り上げます。
[/EXCERPT:Intro]

## UE4 と VS のワークフローを設定する前に

Visual Studio 2015 (VS2015) は、デフォルトでは C++ ツール サポートをインストールしません。VS2015 をインストールする場合は、**Custom** インストールを選択して、各自のワークフローで必要となる C++ コンポーネントを選んでください。
Visual Studio 2015 をインストール済みの場合は、**File > New > Project > C++** の順に選択して C++ をインストールしてください。

以下の表は、どのバージョンの Visual Studio が UE4 のバイナリ バージョンと統合されているかを一覧表示しています。

| アンリアル エンジンのバージョン | Visual Studio のバージョン |
| ------------------------- | --------------------- |
| **4.15 以降**         | VS2017                |
| **4.10 から 4.14**          | VS2015                |
| **4.2 から 4.9**            | VS2013                |

UE4 のオープン ソース バージョン (GitHub および P4 から入手可能) は、VS2013 と統合されています。Visual Studio のこれより古いバージョンと統合されている、UE4 の古いバージョンについては、このドキュメントでは扱いません。

## 推奨設定

以下は UE4 で Visual Studio を使用するデベロッパーへの推奨設定です。

[EXCERPT:BasicVSFormat]

1. 以下の手順に従い、Solution Configurations ドロップダウン メニューの幅を広げます。
	1. ツールバーを右クリックして、表示されるメニュー下部の **[カスタマイズ]** を選択します。

		![](SelectingCustomize.png)
	1. **[コマンド]** タブをクリックします。

		![](ClickCommandsTab.png)
	1. **[ツールバー]** ラジオボタンを選択します。

		![](SelectToolbarRadioButton.png)
	1. **ツールバー** の横のドロップダウンから、**[Standard]** を選択します。

		![](SelectStandard.png)
	1. 下にある **コントロール** リストから **Solution Configurations** コントロールを選びます。

		![](SelectSolutionConfigControl.png)
	1. 右側の **[Modify Selection]** を選択します。

		![](ClickModifySelection.png)
	1. **幅** を '200' に設定します。

		![](SetWidth_200.png)
	1. **[Close]** をクリックします。ツールバーが直ちに更新されます。

		![](ClickClosetoUpdateToolbar.png)
1. 以下の手順に従い、Solution Platforms ドロップダウンを追加します。
	1. 標準ツールバーの右端のボタンで、ツールバーのボタンを追加 / 削除するドロップダウン メニューが開きます。

		![](SelectDropDownButton.png)
	1. ドロップダウン ボタンをクリックして、**[Add or Remove Buttons]** 上にカーソルを合わせて、**[Solution Platforms]** をクリックしてツールバーにメニューを追加します。

		![](SelectSolutionPlatforms.png)
1. **[Error List]** ウィンドウをオフにすることをお勧めします。通常、コードにエラーがあると自動的に **[Error List]** ウィンドウが表示されます。ただし、アンリアル エンジンでの作業中は、誤ったエラー情報が **[Error List]** ウィンドウに表示されることがあります。この **[Error List]** ウィンドウを無効にして、**[Output]** ウィンドウを使ってアンリアル エンジンで作業する際に実際のコード エラーを表示させると良いでしょう。以下の手順では、**[Error List]** ウィンドウを閉じる方法を説明します。
	1. 開いている場合は **[Error List]** ウィンドウを閉じます。 
	1. **[ツール]** メニューから **[オプション]**ダイアログを開きます。

		![](OpenOptionsDialog.png)
	1. **[Projects and Solutions (プロジェクトとソリューション)]** を選択して **[Always show error list if build finishes with error (ビルドがエラーで終わった場合、常にエラー リストを表示する)]** のチェックを外します。

		![](UncheckErrorsListOption.png)
	1. **[OK]** をクリックします。

[/EXCERPT:BasicVSFormat]

[REGION:tip]
他に役立つ設定手順として以下があります。

* **[Show Inactive Blocks]** をオフにします。このオプションをオンのままにすると、多数のコードチャンクがテキスト エディタでグレーアウトされることがあります。(**Tools > Options > Text Editor > C/C++ > View**).
* **Solution Explorer** で不要なフォルダを非表示にするには、**[Disable External Dependencies Folders]** を True に設定します。(**Disable External Dependencies Folder** in **Tools > Options > Text Editor > C/C++ > Advanced**)
* **Edit & Continue** 機能も必要ないのでオフにします。(**Tools > Options > Debugging > Edit and Continue**)

* インテリセンス (IntelliSense) をオンにします。([Intellisense、 Live Errors、 および Squiggles](#Intellisense) を参照してください。)
[/REGION]

###Visual Assist X ユーザー
Visual Assist X がインストールされている場合は以下を行います。
* **Format After Paste** (**VAssistX > Visual Assist X Options > Advanced > Corrections**) を無効にします。このオプションを無効にしないと 「Visual Assist X 」がソース コードを自動的にフォーマットしてしまいます。その結果、ドキュメントが適切にフォーマットされないおそれがあります。

###Visual Studio 2017 ユーザー

Visual Studio を初めてインストールする場合、以下のオプションを有効にしてください。

####UE4 インストーラーあり

以下のオプションでは、Visual Studio 2017 のインストールの一部として UE4 インストーラーをダウンロードします。

![](VS2017_SettingsInstaller.png)

####UE4 インストーラーなし

以下のオプションでは、Visual Studio 2017 のインストールの一部としてUE4 インストーラーをダウンロードしません。

![](VS2017_SettingsNoInstaller.png)

(#Intellisense)
## Intellisense, Live Errors, and Squiggles

UE4 プロジェクトは、IntelliSense を正式サポートするようになりました。このサポートには、ライブエラーリストと「Squiggles」も含まれます
 (有効にする方法は以下を参照してください)。

IntelliSense は、ユーザーが入力する C++ コードを再コンパイルします。コードの全てのラインを検証するフル C++ コンパイラを使用しているため、 
VAX の構文チェック機能のみよりもより強力な機能です。大変すばらしい機能であり、 
ワークフローの迅速化が図れます！

![VC++ Intellisense Squiggles](squiggle.png)

Squiggles に加えて、閲覧しているファイルのエラー リストに IntelliSense エラーも表示されます。 
このオプションは Error List の **右クリック** メニューで、オンオフを切り替えることが出来ます。

![Error List](error_list.png)

Squiggles は UE4 プロジェクトで動作しなかったため、既に無効に設定されているかもしれません。[C/C++ Advanced] タブを押して、 
下記のような設定を必ずしてください。

![VC++ Advanced Options](intellisense_options.png)

C++ ファイルを開いたとき、以下のアイコンが表示されることで IntelliSense コンパイラーが「実行」されていることがわかります。

![Intellisense Progress Indicator](intellisense_progress.png)

### 実装の詳細

* コード編集時に、Squiggles が表示されるまでに数秒かかる場合があります。
    * 大量のインクルード ファイルが存在し、現状では IntelliSense は PCH を使用しないためです。
* 時々 IntelliSense の「false positive」エラーが発生します。このエラー発生にはいくつかの理由が考えられます。
    * IntelliSense コンパイラー (EDG) は、MSVC コンパイラーよりも厳格です。
    * IntelliSense では、通常のビルド時とは異なる「#defines」の設定がいくつかあります。
    * IntelliSense でコンパイルされる C++ は、常に 32 ビットで生成されます。 
* どうしても必要ならば、コードを「`#ifdef __INTELLISENSE__`」でラップして Squiggle を非表示にすることが出来ます。
* IntelliSense エラーは、VC++ コンパイラーのエラーとは若干異なる表現法が使用されます。単にそのような設定となっています。
* ヘッダファイルの Squiggles は、ヘッダをインクルードする「.cpp」に対して、ヘッダをコンパイルすることによって機能します。
    * 時々 IntelliSense はこれに失敗し、 Squiggles がヘッダに含まれている場合があります。
* 必要に応じて増加することができる **Max Cached Translation Units** 設定 (上記に表示) があります。
    * メモリの消費が多くなりますが、応答性が若干向上することがあります。
* 未だ IntelliSense に対応しない C++ ファイルもいくつかあります。
* アンリアル ビルド ツールに、「`-IntelliSense`」オプションが新規に加わりました。
    * 全てのプロジェクト ファイルに対し、IntelliSense プロパティシートを出力します。
    * 新しいモジュールの追加、またプロジェクトに含まれるものに変更があった時のみ再実行が必要です。


## UnrealVS 拡張機能

[INCLUDE:Programming/Development/VisualStudioSetup/UnrealVS#Overview]


設定と拡張機能の使用に関する情報は、[](Programming/Development/VisualStudioSetup/UnrealVS) ページを参照してください。 　


##デバッグ作業

Visual Studio にはビジュアライザでデバッガを拡張するサポートがあり、FName や動的配列など一般的 Unreal の型の調査を容易にします。


### UE4 Visualizer for Visual Studio 2013 をインストールする
この UE4 Visualizer のインストールには、二段階のプロセスがあります。

[PUBLISH:Licensee]
1. UE4 配布の一部のビジュアライザーロジックを含むファイルを探します。

	* //depot/UE4/Engine/Extras/VisualStudioDebugging/UE4.natvis
[/PUBLISH:Licensee]

[PUBLISH:Rocket]
1. インストールの一部としてビジュアライザーロジックを含むファイルを探します。

    * [UE4Root]/Engine/Extras/VisualStudioDebugging/UE4.natvis
[/PUBLISH:Rocket]

1. `UE4.natvis` を以下のいずれかの場所にコピーします。

    * [VisualStudioInstallPath]/Common7/Packages/Debugger/Visualizers/UE4.natvis
    * [UserProfile]/My Documents/Visual Studio 2013/Visualizers/UE4.natvis

[REGION:warning]
Visual Studio のインストール ディレクトリへコピーするには、管理者からのアクセス許可が必要な場合があります。
[/REGION]

