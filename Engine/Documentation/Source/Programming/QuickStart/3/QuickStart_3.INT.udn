Availability: Docs
Title:3 - Write and Compile C++ Code
Crumbs:%ROOT%, Programming, Programming/QuickStart
Description:Writing a C++ class and compiling it with Unreal Engine
SkillLevel: Beginner
Version: 4.9
parent:Programming/QuickStart
order:3
type:quick start
type:multi-step

[NAV]

1. [INCLUDE:#step1]
[COMMENT:none]

[EXCERPT:Step1]
[OBJECT:ToggleButtonContent]
	[PARAMLITERAL:category]
	OS
	[/PARAMLITERAL]
	[PARAMLITERAL:id]
	windows
	[/PARAMLITERAL]
	[PARAMLITERAL:active]
	active_button_content
	[/PARAMLITERAL]
	[PARAM:content]
	In **Visual Studio**, we'll use the **Solution Explorer** pane to find our newly-created C++ files. In our example, they will be named FloatingActor.cpp and FloatingActor.h and will be inside the QuickStart project.

	[![](SolutionExplorer_Files.png)](SolutionExplorer_Files.png)

	[REGION:note]We're about to write code. All code used in this tutorial will be found at bottom of the page in its current state as of completing that page's instructions.[/REGION]
	[/PARAM]
[/OBJECT]
[OBJECT:ToggleButtonContent]
	[PARAMLITERAL:category]
	OS
	[/PARAMLITERAL]
	[PARAMLITERAL:id]
	mac
	[/PARAMLITERAL]
	[PARAMLITERAL:active]
	[/PARAMLITERAL]
	[PARAM:content]
	In **Xcode**, we'll find our newly-created C++ files. In our example, they will be named FloatingActor.cpp and FloatingActor.h and will be inside the QuickStart project.

	[![](SolutionExplorer_Files_Mac.png)](SolutionExplorer_Files_Mac.png)

	[REGION:note]We're about to write code. All code used in this tutorial will be found at bottom of the page in its current state as of completing that page's instructions.[/REGION]
	[/PARAM]
[/OBJECT]
[/EXCERPT:Step1]

[/COMMENT]
1. In FloatingActor.h, we'll add the following code just before the closing brace and semicolon at the end of the file:

		float RunningTime;

1. Switching to FloatingActor.cpp, we'll add the following code just before the closing brace at the bottom of **AFloatingActor::Tick**:

		FVector NewLocation = GetActorLocation();
		float DeltaHeight = (FMath::Sin(RunningTime + DeltaTime) - FMath::Sin(RunningTime));
		NewLocation.Z += DeltaHeight * 20.0f;       //Scale our height by a factor of 20
		RunningTime += DeltaTime;
		SetActorLocation(NewLocation);

	[REGION:note] The code we've just written will cause **FloatingActors** to bob up and down smoothly, using the _RunningTime_ variable we created to keep track of our movement over time. [/REGION] 

[OBJECT:ToggleButtonContent]
	[PARAMLITERAL:category]
	OS
	[/PARAMLITERAL]
	[PARAMLITERAL:id]
	windows
	[/PARAMLITERAL]
	[PARAMLITERAL:active]
	active_button_content
	[/PARAMLITERAL]
	[PARAM:content]
		*	Now that we're done coding, we can compile by right-clicking our project in the **Solution Browser** and selecting the **Build** command, or by pressing the **Compile** button in the **Unreal Editor**. Once the compile succeeds, **Unreal Editor** will automatically load our changes.

			[![](CompileFromVS.png)](CompileFromVS.png)
	
			[REGION:caption]Compiling from **Visual Studio**.[/REGION]

			[![](CompileFromEditor.png)](CompileFromEditor.png)

			[REGION:caption]Compiling from the **Unreal Editor**.[/REGION]
	[/PARAM]
[/OBJECT]
[OBJECT:ToggleButtonContent]
	[PARAMLITERAL:category]
	OS
	[/PARAMLITERAL]
	[PARAMLITERAL:id]
	mac
	[/PARAMLITERAL]
	[PARAMLITERAL:active]
	active_button_content
	[/PARAMLITERAL]
	[PARAM:content]
		[REGION:tip]
		When building in Xcode, you are only compiling the game project, not the Editor.
		[/REGION]
		
		* Now that we're done coding, we can compile our project using XCode's Debug Configuration by clicking the **Product > Build** option. We can also compile using XCode's Development Configuration by clicking the **Product > Build For > Profiling** option, or by pressing the **Compile** button in the **Unreal Editor**. Once the compile succeeds, **Unreal Editor** will automatically load our changes.

		[![](CompileFromXCode.png)](CompileFromXCode.png)

		[REGION:caption]Location of the build command within XCode.[/REGION]

		![](ProjectBuild_mac.png)
		
		[REGION:caption]Compiling in XCode, using the currently-selected Configuration.[/REGION]

		![](ProjectBuildProfile_mac.png)

		[REGION:caption]Compiling using XCode's Development Configuration.[/REGION]

		[![](CompileFromEditor.png)](CompileFromEditor.png)

		[REGION:caption]Compiling from the **Unreal Editor**.[/REGION]

		[REGION:note]
		When running the binary Editor, it is important to add the -game flag if you rebuilt your project in any **Uncooked** configuration, and the -debug flag if you rebuilt your project in any **Debug** configuration.
		[/REGION]
	[/PARAM]
[/OBJECT]

We're now ready to create objects in **Unreal Editor** based on our code. For reference, all code used on this page is included below.

## Finished Code

**FloatingActor.h**
	// Copyright 1998-2018 Epic Games, Inc. All Rights Reserved.

	#pragma once

	#include "GameFramework/Actor.h"
	#include "FloatingActor.generated.h"

	UCLASS()
	class QUICKSTART_API AFloatingActor : public AActor
	{
		GENERATED_BODY()
	
	public:	
		// Sets default values for this actor's properties
		AFloatingActor();

	protected:
		// Called when the game starts or when spawned
		virtual void BeginPlay() override;
	
	public:
		// Called every frame
		virtual void Tick( float DeltaSeconds ) override;
	
		float RunningTime;
	};

**FloatingActor.cpp**

	// Copyright 1998-2018 Epic Games, Inc. All Rights Reserved.

	#include "QuickStart.h"
	#include "FloatingActor.h"

	// Sets default values
	AFloatingActor::AFloatingActor()
	{
 		// Set this actor to call Tick() every frame.  You can turn this off to improve performance if you don't need it.
		PrimaryActorTick.bCanEverTick = true;

	}

	// Called when the game starts or when spawned
	void AFloatingActor::BeginPlay()
	{
		Super::BeginPlay();
	
	}

	// Called every frame
	void AFloatingActor::Tick( float DeltaTime )
	{
		Super::Tick( DeltaTime );

		FVector NewLocation = GetActorLocation();
		float DeltaHeight = (FMath::Sin(RunningTime + DeltaTime) - FMath::Sin(RunningTime));
		NewLocation.Z += DeltaHeight * 20.0f;       //Scale our height by a factor of 20
		RunningTime += DeltaTime;
		SetActorLocation(NewLocation);
	}

[NAV]
