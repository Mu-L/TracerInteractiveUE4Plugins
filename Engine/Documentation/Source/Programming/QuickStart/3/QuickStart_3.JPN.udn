INTSourceChangelist:3782314
Availability:Public
Title:3 - C++ コードの記述とコンパイル
Crumbs:%ROOT%, Programming, Programming/QuickStart
Description:アンリアル エンジンで C++ クラスを記述しコンパイルする
SkillLevel:Beginner
Version:4.9
parent:Programming/QuickStart
order:3
type:quick start
type:multi-step

[NAV]

1. [INCLUDE:#step1]
[COMMENT:none]

[EXCERPT:Step1]
[OBJECT:ToggleButtonContent]
	[PARAMLITERAL:category]
	OS
	[/PARAMLITERAL]
	[PARAMLITERAL:id]
	windows
	[/PARAMLITERAL]
	[PARAMLITERAL:active]
	active_button_content
	[/PARAMLITERAL]
	[PARAM:content]
	**Visual Studio** では、**[Solution Explorer]** ペインを使って、新規に作成した C++ ファイルを検索します。このサンプルでは、ファイル名を「FloatingActor.cpp」と「FloatingActor.h」にして、「QuickStart」プロジェクトに保存します。

	[![](SolutionExplorer_Files.png)](SolutionExplorer_Files.png)

	[REGION:note] コードを記述していきます。このチュートリアルで使用するすべてのコードは、ページの説明を完了した時点の現在のステートで、ページの下に表示されます。[/REGION]
	[/PARAM]
[/OBJECT]
[OBJECT:ToggleButtonContent]
	[PARAMLITERAL:category]
	OS
	[/PARAMLITERAL]
	[PARAMLITERAL:id]
	mac
	[/PARAMLITERAL]
	[PARAMLITERAL:active]
	[/PARAMLITERAL]
	[PARAM:content]
	**Xcode** で新規作成した C++ ファイルを探します。このサンプルでは、ファイル名を「FloatingActor.cpp」と「FloatingActor.h」にして、「QuickStart」プロジェクトに保存します。

	[![](SolutionExplorer_Files_Mac.png)](SolutionExplorer_Files_Mac.png)

	[REGION:note] コードを記述していきます。このチュートリアルで使用するすべてのコードは、ページの説明を完了した時点の現在のステートで、ページの下に表示されます。[/REGION]
	[/PARAM]
[/OBJECT]
[/EXCERPT:Step1]

[/COMMENT]
1. FloatingActor.h に対して、ファイルの終わりの右中括弧とセミコロンの直前に、以下のコードを追加します。

		float RunningTime;

1. FloatingActor.cpp へ切り替えて、以下のコードを **AFloatingActor::Tick** の右中括弧の直前に追加します。

		FVector NewLocation = GetActorLocation();
		float DeltaHeight = (FMath::Sin(RunningTime + DeltaTime) - FMath::Sin(RunningTime));
		NewLocation.Z += DeltaHeight * 20.0f;       //Scale our height by a factor of 20
		RunningTime += DeltaTime;
		SetActorLocation(NewLocation);

	[REGION:note] 記述したこのコードにより、時間経過に伴う移動の追跡のために作成した _RunningTime_ 変数を使って、**FloatingActors** が現れたり消えたりします。 [/REGION] 

[OBJECT:ToggleButtonContent]
	[PARAMLITERAL:category]
	OS
	[/PARAMLITERAL]
	[PARAMLITERAL:id]
	windows
	[/PARAMLITERAL]
	[PARAMLITERAL:active]
	active_button_content
	[/PARAMLITERAL]
	[PARAM:content]
		*	コーディングが終わったので、**Solution Browser** のプロジェクトを右クリックして **Build** コマンドを選択するか、 **アンリアル エディタ** の**[Compile]** ボタンをクリックします。正常にコンパイルされたら、 **アンリアル エディタ** が自動的に変更をロードします。

			[![](CompileFromVS.png)](CompileFromVS.png)

			[REGION:caption]**Visual Studio** からコンパイル[/REGION]

			[![](CompileFromEditor.png)](CompileFromEditor.png)

			[REGION:caption]**Unreal Editor** からコンパイル[/REGION]
	[/PARAM]
[/OBJECT]
[OBJECT:ToggleButtonContent]
	[PARAMLITERAL:category]
	OS
	[/PARAMLITERAL]
	[PARAMLITERAL:id]
	mac
	[/PARAMLITERAL]
	[PARAMLITERAL:active]
	active_button_content
	[/PARAMLITERAL]
	[PARAM:content]
		[REGION:tip]
		Xcode でビルドする場合、ゲーム プロジェクトだけをコンパイルします。エディタはコンパイルしません。
		[/REGION]

		* コーディングが終わったので、XCode のデバッグ コンフィギュレーションを使ってプロジェクトをコンパイルすることができます。**[Product] > [Build]** オプションをクリックします。**[Product] > [Build For] > [Profiling]** の順にオプションをクリックする、または **アンリアル エディタ** の **[Compile]** ボタンを押して、XCode の開発コンフィギュレーションを使用することでプロジェクトをコンパイルすることもできます。正常にコンパイルされたら、 **アンリアル エディタ** が自動的に変更をロードします。

		[![](CompileFromXCode.png)](CompileFromXCode.png)

		[REGION:caption]XCode 内のビルド コマンドの位置[/REGION]

		![](ProjectBuild_mac.png)

		[REGION:caption]選択中のコンフィギュレーションを用いた XCode 内でのコンパイル[/REGION]

		![](ProjectBuildProfile_mac.png)

		[REGION:caption]XCode の開発コンフィギュレーションを使ってコンパイル[/REGION]

		[![](CompileFromEditor.png)](CompileFromEditor.png)

		[REGION:caption]**Unreal Editor** からコンパイル[/REGION]

		[REGION:note]
		バイナリ エディタを実行する場合、**Uncooked** コンフィギュレーションでプロジェクトをリビルドした場合、-game フラグを付け加えることが重要です。**Debug** コンフィギュレーションでプロジェクトをリビルドした場合は、-debug フラグを付けることが重要です。
		[/REGION]
	[/PARAM]
[/OBJECT]

コードに基づいて **アンリアル エディタ** でオブジェクトを作成する用意ができました。参考までに、このページで使用したコードはすべて以下に含まれています。

## 完成コード

**FloatingActor.h**
	// Copyright 1998-2017 Epic Games, Inc.All Rights Reserved.

	#pragma once

	#include "GameFramework/Actor.h"
	#include "FloatingActor.generated.h"

	UCLASS()
	class QUICKSTART_API AFloatingActor : public AActor
	{
		GENERATED_BODY()

	public:
		// Sets default values for this actor's properties (このアクタのプロパティのデフォルト値を設定)
		AFloatingActor();

	protected:
		// Called when the game starts or when spawned (ゲーム開始時またはスポーン時に呼び出されます)
		virtual void BeginPlay() override;

	public:
		// Called every frame (フレーム毎に呼び出されます)
		virtual void Tick( float DeltaSeconds ) override;

	float RunningTime;
	};

**FloatingActor.cpp**

	// Copyright 1998-2017 Epic Games, Inc.All Rights Reserved.

	#include "QuickStart.h"
	#include "FloatingActor.h"

	// Sets default values (デフォルト値を設定) 
	AFloatingActor::AFloatingActor()
	{
 		// Set this actor to call Tick() every frame. (フレーム毎に Tick() を呼び出すようにこのアクタを設定) You can turn this off to improve performance if you don't need it. (必要がなければパフォーマンスを向上させるためにオフにすることができます) 
		PrimaryActorTick.bCanEverTick = true;

	}

	// Called when the game starts or when spawned (ゲーム開始時またはスポーン時に呼び出されます)
	void AFloatingActor::BeginPlay()
	{
		Super::BeginPlay();

	}

	// Called every frame (フレーム毎に呼び出されます)
	void AFloatingActor::Tick( float DeltaTime )
	{
		Super::Tick( DeltaTime );

		FVector NewLocation = GetActorLocation();
		float DeltaHeight = (FMath::Sin(RunningTime + DeltaTime) - FMath::Sin(RunningTime));
		NewLocation.Z += DeltaHeight * 20.0f;       //Scale our height by a factor of 20
		RunningTime += DeltaTime;
		SetActorLocation(NewLocation);
	}

[NAV]
