INTSourceChangelist:3782314
Availability:Public
Title:3.Pawn Movement コンポーネントの挙動のコーディング
Crumbs:%ROOT%, Programming, Programming/Tutorials, Programming/Tutorials/Components
Description:Pawn Movement コンポーネントが、フレーム毎に制御対象のポーンがどこに行くかの判断の方法を定義するコードを記述します。
version:4.9
[VAR:Steps]
[OBJECT:Navigation]
	[PARAM:previous]
		[前のステップ](Programming\Tutorials\Components\2 "%Programming\Tutorials\Components\2:title%")
	[/PARAM]
	[PARAM:current]
	[/PARAM]
	[PARAM:home]
		[](Programming\Tutorials\Components\)
	[/PARAM]
	[PARAM:next]
		[次のステップ](Programming\Tutorials\Components\4 "%Programming\Tutorials\Components\4:title%")
	[/PARAM]
[/OBJECT]
[/VAR]



1. **Visual Studio** に戻り、カスタマイズした **Pawn Movement コンポーネント** を記述することができます。実際に記述が必要なのは、各フレームでどのように動くかを示す **TickComponent** 関数 (**アクタ** の **Tick** 関数に類似)のみです。CollidingPawnMovementComponent.h で、クラス定義の TickComponent をオーバーライドする必要があります。

		public:
			virtual void TickComponent(float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) override;	

	CollidingPawnMovementComponent.cpp ファイルにこの関数を定義します：

		void UCollidingPawnMovementComponent::TickComponent(float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction)
		{
			Super::TickComponent(DeltaTime, TickType, ThisTickFunction);
			// Make sure that everything is still valid, and that we are allowed to move.
			if (!PawnOwner || !UpdatedComponent || ShouldSkipUpdate(DeltaTime))
			{
				return;
			}

			// Get (and then clear) the movement vector that we set in ACollidingPawn::Tick
			FVector DesiredMovementThisFrame = ConsumeInputVector().GetClampedToMaxSize(1.0f) * DeltaTime * 150.0f;
			if (!DesiredMovementThisFrame.IsNearlyZero())
			{
				FHitResult Hit;
				SafeMoveUpdatedComponent(DesiredMovementThisFrame, UpdatedComponent->GetComponentRotation(), true, Hit);

				// If we bumped into something, try to slide along it
				if (Hit.IsValidBlockingHit())
				{
					SlideAlongSurface(DesiredMovementThisFrame, 1.f - Hit.Time, Hit.Normal, Hit);
				}
			}
		};

	このコードは、適切な箇所でサーフェスをスライドしながら、ワールド内で **ポーン** をスムーズに動かします。重力はポーンに適用されず、ポーンの最大速度は 1 秒当たり 150 の** アンリアル単位** でハードコーディングされています。

	[REGION:note]
	この TickComponent 関数は UPawnMovementComponent クラスのパワフルな機能をいくつか利用します。
	**ConsumeInputVector** は、移動入力値の保存に使用するビルドイン変数の値をレポートしてクリアします。

	**SafeMoveUpdatedComponent** はソリッドなバリアを尊重しながら Pawn Movement コンポーネントの移動に **アンリアルエンジン** の物理を使用します。

	**SlideAlongSurface** は、その場に停止したり壁や斜面にくっつくのではなく、壁や斜面に最終的に衝突した時のコリジョンサーフェスに沿ったスムーズなスライドの計算および物理を処理します。 

	 Pawn Movement コンポーネントは、その他にも検討に値する機能がありますが、このチュートリアルの範囲では必要ありません。**Floating Pawn Movement**、 **Spectator Pawn Movement**、 **Character Movement Component** などその他のクラスもさらなる使用法やアイデアを与えてくれるかもしれません。
	[/REGION]


Pawn Movement Component の挙動を定義したら、カスタマイズした Pawn クラスにすべてをまとめるコードを記述していきます。

## 作業中のコード

**CollidingPawn.h**

	// Copyright 1998-2017 Epic Games, Inc. All Rights Reserved.

	#pragma once

	#include "GameFramework/Pawn.h"
	#include "CollidingPawn.generated.h"

	UCLASS()
	class HOWTO_COMPONENTS_API ACollidingPawn : public APawn
	{
		GENERATED_BODY()

	public:
		// Sets default values for this pawn's properties
		ACollidingPawn();

	protected:
		// Called when the game starts or when spawned
		virtual void BeginPlay() override;
	
	public:
		// Called every frame
		virtual void Tick( float DeltaSeconds ) override;

		// Called to bind functionality to input
		virtual void SetupPlayerInputComponent(class UInputComponent* InputComponent) override;

		UParticleSystemComponent* OurParticleSystem;
	};

**CollidingPawn.cpp**

	// Copyright 1998-2017 Epic Games, Inc. All Rights Reserved.

	#include "HowTo_Components.h"
	#include "CollidingPawn.h"

	// Sets default values
	ACollidingPawn::ACollidingPawn()
	{
 		// Set this pawn to call Tick() every frame.  You can turn this off to improve performance if you don't need it.
		PrimaryActorTick.bCanEverTick = true;

		// Our root component will be a sphere that reacts to physics
		USphereComponent* SphereComponent = CreateDefaultSubobject<USphereComponent>(TEXT("RootComponent"));
		RootComponent = SphereComponent;
		SphereComponent->InitSphereRadius(40.0f);
		SphereComponent->SetCollisionProfileName(TEXT("Pawn"));

		// Create and position a mesh component so we can see where our sphere is
		UStaticMeshComponent* SphereVisual = CreateDefaultSubobject<UStaticMeshComponent>(TEXT("VisualRepresentation"));
		SphereVisual->SetupAttachment(RootComponent);
		static ConstructorHelpers::FObjectFinder<UStaticMesh> SphereVisualAsset(TEXT("/Game/StarterContent/Shapes/Shape_Sphere.Shape_Sphere"));
		if (SphereVisualAsset.Succeeded())
		{
			SphereVisual->SetStaticMesh(SphereVisualAsset.Object);
			SphereVisual->SetRelativeLocation(FVector(0.0f, 0.0f, -40.0f));
			SphereVisual->SetWorldScale3D(FVector(0.8f));
		}

		// Create a particle system that we can activate or deactivate
		OurParticleSystem = CreateDefaultSubobject<UParticleSystemComponent>(TEXT("MovementParticles"));
		OurParticleSystem->SetupAttachment(SphereVisual);
		OurParticleSystem->bAutoActivate = false;
		OurParticleSystem->SetRelativeLocation(FVector(-20.0f, 0.0f, 20.0f));
		static ConstructorHelpers::FObjectFinder<UParticleSystem> ParticleAsset(TEXT("/Game/StarterContent/Particles/P_Fire.P_Fire"));
		if (ParticleAsset.Succeeded())
		{
			OurParticleSystem->SetTemplate(ParticleAsset.Object);
		}

		// Use a spring arm to give the camera smooth, natural-feeling motion.
		USpringArmComponent* SpringArm = CreateDefaultSubobject<USpringArmComponent>(TEXT("CameraAttachmentArm"));
		SpringArm->SetupAttachment(RootComponent);
		SpringArm->RelativeRotation = FRotator(-45.f, 0.f, 0.f);
		SpringArm->TargetArmLength = 400.0f;
		SpringArm->bEnableCameraLag = true;
		SpringArm->CameraLagSpeed = 3.0f;

		// Create a camera and attach to our spring arm
		UCameraComponent* Camera = CreateDefaultSubobject<UCameraComponent>(TEXT("ActualCamera"));
		Camera->SetupAttachment(SpringArm, USpringArmComponent::SocketName);

		// Take control of the default player
		AutoPossessPlayer = EAutoReceiveInput::Player0;
	}

	// Called when the game starts or when spawned
	void ACollidingPawn::BeginPlay()
	{
		Super::BeginPlay();
	
	}

	// Called every frame
	void ACollidingPawn::Tick( float DeltaTime )
	{
		Super::Tick( DeltaTime );

	}

	// Called to bind functionality to input
	void ACollidingPawn::SetupPlayerInputComponent(class UInputComponent* InputComponent)
	{
		Super::SetupPlayerInputComponent(InputComponent);

	}

**CollidingPawnMovementComponent.h**

	// Copyright 1998-2017 Epic Games, Inc. All Rights Reserved.

	#pragma once

	#include "GameFramework/PawnMovementComponent.h"
	#include "CollidingPawnMovementComponent.generated.h"

	/**
		* 
		*/
	UCLASS()
	class HOWTO_COMPONENTS_API UCollidingPawnMovementComponent : public UPawnMovementComponent
	{
		GENERATED_BODY()

	public:
		virtual void TickComponent(float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) override;	
	};

**CollidingPawnMovementComponent.cpp**

	// Copyright 1998-2017 Epic Games, Inc. All Rights Reserved.

	#include "HowTo_Components.h"
	#include "CollidingPawnMovementComponent.h"

	void UCollidingPawnMovementComponent::TickComponent(float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction)
	{
		Super::TickComponent(DeltaTime, TickType, ThisTickFunction);

		// Make sure that everything is still valid, and that we are allowed to move.
		if (!PawnOwner || !UpdatedComponent || ShouldSkipUpdate(DeltaTime))
		{
			return;
		}

		// Get (and then clear) the movement vector that we set in ACollidingPawn::Tick
		FVector DesiredMovementThisFrame = ConsumeInputVector().GetClampedToMaxSize(1.0f) * DeltaTime * 150.0f;
		if (!DesiredMovementThisFrame.IsNearlyZero())
		{
			FHitResult Hit;
			SafeMoveUpdatedComponent(DesiredMovementThisFrame, UpdatedComponent->GetComponentRotation(), true, Hit);

			// If we bumped into something, try to slide along it
			if (Hit.IsValidBlockingHit())
			{
				SlideAlongSurface(DesiredMovementThisFrame, 1.f - Hit.Time, Hit.Normal, Hit);
			}
		}
	};



