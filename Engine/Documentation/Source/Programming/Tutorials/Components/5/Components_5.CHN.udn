INTSourceChangelist:3967023
Availability: Public
Title:5.在编辑器中运行
Crumbs:%ROOT%, Programming, Programming/Tutorials, Programming/Tutorials/Components
Description:通过在编辑器中运行来测试代码。
version:4.9

[VAR:Steps]
[OBJECT:Navigation]
	[PARAM:previous]
		[Previous Step](Programming\Tutorials\Components\4 "%Programming\Tutorials\Components\4:title%")
	[/PARAM]
	[PARAM:current]
	[/PARAM]
	[PARAM:home]
		[](Programming\Tutorials\Components\)
	[/PARAM]
	[PARAM:next]
		[后续步骤](Programming\Tutorials\Components\6 "%Programming\Tutorials\Components\6:title%")
	[/PARAM]
[/OBJECT]
[/VAR]



1. 在 **虚幻编辑器** 中，我们可以按 **编译（Compile）** 按钮来加载代码更改。

	![](CompileFromEditor.png)

1. 我们需要在场景中放入一个 **CollidingPawn** 实例。我们可以在 **内容浏览器** 中的“C++ Classes/HowTo_Components/CollidingPawn”下面找到这个类。

	![](ClassInContentBrowser.png)

	![](LevelEditorBeforePlay.png)

1. 按 **运行（Play）**，我们的球体将通过WASD移动，通过鼠标转动，与场景对象（如桌子、椅子或您想放置在场景中的任何其他物理对象）碰撞并滑动。使用空格还可以让它着火（或熄灭）！

	![](CollidingAndOnFire.png)


**虚幻引擎4** 提供了多种 **组件**——我们仅简要介绍了一些较为常用的组件。您可以试着探索内置组件，或者编写一些您自己的组件！它们使用灵活，功能强大，可以帮助您保持项目代码井然有序并可重复使用。

(#finishedcode)
## 完成的代码
   
**CollidingPawn.h**
			
	// Copyright 1998-2018 Epic Games, Inc. All Rights Reserved.

	#pragma once

	#include "GameFramework/Pawn.h"
	#include "CollidingPawn.generated.h"

	UCLASS()
	class HOWTO_COMPONENTS_API ACollidingPawn : public APawn
	{
		GENERATED_BODY()

	public:
		// 设置该Pawn属性的默认值
		ACollidingPawn();

	protected:
		// 游戏开始或产生时调用
		virtual void BeginPlay() override;
	
	public:
		// 每一帧都调用
		virtual void Updatefloat DeltaSeconds override

		// 调用以将功能与输入绑定
		virtual void SetupPlayerInputComponent(class UInputComponent* InputComponent) override;

		UParticleSystemComponent* OurParticleSystem;
		class UCollidingPawnMovementComponent* OurMovementComponent;

		virtual UPawnMovementComponent* GetMovementComponent() const override;

		void MoveForward(float AxisValue);
		void MoveRight(float AxisValue);
		void Turn(float AxisValue);
		void ParticleToggle();
	};

**CollidingPawn.cpp**

	// Copyright 1998-2018 Epic Games, Inc. All Rights Reserved.

	#include "HowTo_Components.h"
	#include "CollidingPawn.h"
	#include "CollidingPawnMovementComponent.h"

	// 设置默认值
	ACollidingPawn::ACollidingPawn()
	{
 		// 设置该Pawn以在每一帧调用Tick()。如果不需要，可以将此设置关闭来提高性能。
		PrimaryActorTick.bCanEverTick = true;

		// 我们的根组件将是对物理产生反应的球体
		USphereComponent* SphereComponent = CreateDefaultSubobject<USphereComponent>(TEXT("RootComponent"));
		RootComponent = SphereComponent;
		SphereComponent->InitSphereRadius(40.0f);
		SphereComponent->SetCollisionProfileName(TEXT("Pawn"));

		// 创建并放置网格体组件，以便我们能够看到球体位置
		UStaticMeshComponent* SphereVisual = CreateDefaultSubobject<UStaticMeshComponent>(TEXT("VisualRepresentation"));
		SphereVisual->SetupAttachment(RootComponent);
		static ConstructorHelpers::FObjectFinder<UStaticMesh> SphereVisualAsset(TEXT("/Game/StarterContent/Shapes/Shape_Sphere.Shape_Sphere"));
		if (SphereVisualAsset.Succeeded())
		{
			SphereVisual->SetStaticMesh(SphereVisualAsset.Object);
			SphereVisual->SetRelativeLocation(FVector(0.0f, 0.0f, -40.0f));
			SphereVisual->SetWorldScale3D(FVector(0.8f));
		}

		// 创建可以激活或停用的粒子系统
		OurParticleSystem = CreateDefaultSubobject<UParticleSystemComponent>(TEXT("MovementParticles"));
		OurParticleSystem->SetupAttachment(SphereVisual);
		OurParticleSystem->bAutoActivate = false;
		OurParticleSystem->SetRelativeLocation(FVector(-20.0f, 0.0f, 20.0f));
		static ConstructorHelpers::FObjectFinder<UParticleSystem> ParticleAsset(TEXT("/Game/StarterContent/Particles/P_Fire.P_Fire"));
		if (ParticleAsset.Succeeded())
		{
			OurParticleSystem->SetTemplate(ParticleAsset.Object);
		}

		// 使用弹簧臂让摄像机平滑自然地移动。
		USpringArmComponent* SpringArm = CreateDefaultSubobject<USpringArmComponent>(TEXT("CameraAttachmentArm"));
		SpringArm->SetupAttachment(RootComponent);
		SpringArm->RelativeRotation = FRotator(-45.f, 0.f, 0.f);
		SpringArm->TargetArmLength = 400.0f;
		SpringArm->bEnableCameraLag = true;
		SpringArm->CameraLagSpeed = 3.0f;

		// 创建摄像机并连接弹簧臂
		UCameraComponent* Camera = CreateDefaultSubobject<UCameraComponent>(TEXT("ActualCamera"));
		Camera->SetupAttachment(SpringArm, USpringArmComponent::SocketName);

		// 控制默认玩家
		AutoPossessPlayer = EAutoReceiveInput::Player0;

		// 创建移动组件实例，并告诉它更新根组件。
		OurMovementComponent = CreateDefaultSubobject<UCollidingPawnMovementComponent>(TEXT("CustomMovementComponent"));
		OurMovementComponent->UpdatedComponent = RootComponent;
	}

	// 游戏开始或产生时调用
	void ACollidingPawn::BeginPlay()
	{
		Super::BeginPlay();
	
	}

	// 每一帧都调用
	void ACollidingPawn::Tick( float DeltaTime )
	{
		Super::Tick( DeltaTime );

	}

	// 调用以将功能与输入绑定
	void ACollidingPawn::SetupPlayerInputComponent(class UInputComponent* InputComponent)
	{
		Super::SetupPlayerInputComponent(InputComponent);

		InputComponent->BindAction("ParticleToggle", IE_Pressed, this, &ACollidingPawn::ParticleToggle);

		InputComponent->BindAxis("MoveForward", this, &ACollidingPawn::MoveForward);
		InputComponent->BindAxis("MoveRight", this, &ACollidingPawn::MoveRight);
		InputComponent->BindAxis("Turn", this, &ACollidingPawn::Turn);
	}

	UPawnMovementComponent* ACollidingPawn::GetMovementComponent() const
	{
		return OurMovementComponent;
	}

	void ACollidingPawn::MoveForward(float AxisValue)
	{
		if (OurMovementComponent && (OurMovementComponent->UpdatedComponent == RootComponent))
		{
			OurMovementComponent->AddInputVector(GetActorForwardVector() * AxisValue);
		}
	}

	void ACollidingPawn::MoveRight(float AxisValue)
	{
		if (OurMovementComponent && (OurMovementComponent->UpdatedComponent == RootComponent))
		{
			OurMovementComponent->AddInputVector(GetActorRightVector() * AxisValue);
		}
	}

	void ACollidingPawn::Turn(float AxisValue)
	{
		FRotator NewRotation = GetActorRotation();
		NewRotation.Yaw += AxisValue;
		SetActorRotation(NewRotation);
	}

	void ACollidingPawn::ParticleToggle()
	{
		if (OurParticleSystem && OurParticleSystem->Template)
		{
			OurParticleSystem->ToggleActive();
		}
	}

**CollidingPawnMovementComponent.h**

	// Copyright 1998-2018 Epic Games, Inc. All Rights Reserved.

	#pragma once

	#include "GameFramework/PawnMovementComponent.h"
	#include "CollidingPawnMovementComponent.generated.h"

	/**
		* 
		*/
	UCLASS()
	class HOWTO_COMPONENTS_API UCollidingPawnMovementComponent : public UPawnMovementComponent
	{
		GENERATED_BODY()
	
	public:
		virtual void TickComponent(float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) override;	
	};

**CollidingPawnMovementComponent.cpp**

	// Copyright 1998-2018 Epic Games, Inc. All Rights Reserved.

	#include "HowTo_Components.h"
	#include "CollidingPawnMovementComponent.h"

	void UCollidingPawnMovementComponent::TickComponent(float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction)
	{
		Super::TickComponent(DeltaTime, TickType, ThisTickFunction);

		// 确保一切有效，然后我们能够移动。
		if (!PawnOwner || !UpdatedComponent || ShouldSkipUpdate(DeltaTime))
		{
			return;
		}

		// 获取（然后清除）我们在ACollidingPawn::Tick中设置的移动矢量
		FVector DesiredMovementThisFrame = ConsumeInputVector().GetClampedToMaxSize(1.0f) * DeltaTime * 150.0f;
		if (!DesiredMovementThisFrame.IsNearlyZero())
		{
			FHitResult Hit;
			SafeMoveUpdatedComponent(DesiredMovementThisFrame, UpdatedComponent->GetComponentRotation(), true, Hit);

			// 如果撞到某个东西，则尝试沿着滑动
			if (Hit.IsValidBlockingHit())
			{
				SlideAlongSurface(DesiredMovementThisFrame, 1.f - Hit.Time, Hit.Normal, Hit);
			}
		}
	};



