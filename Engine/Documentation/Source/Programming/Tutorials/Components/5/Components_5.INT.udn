Availability: Public
Title:5. Playing in Editor
Crumbs:%ROOT%, Programming, Programming/Tutorials, Programming/Tutorials/Components
Description:Testing our code by playing in the editor.
version:4.9

[VAR:Steps]
[OBJECT:Navigation]
	[PARAM:previous]
		[Previous Step](Programming\Tutorials\Components\4 "%Programming\Tutorials\Components\4:title%")
	[/PARAM]
	[PARAM:current]
	[/PARAM]
	[PARAM:home]
		[](Programming\Tutorials\Components\)
	[/PARAM]
	[PARAM:next]
		[Next Step](Programming\Tutorials\Components\6 "%Programming\Tutorials\Components\6:title%")
	[/PARAM]
[/OBJECT]
[/VAR]



1. In the **Unreal Editor**, we can press the **Compile** button to load our code changes.

	![](CompileFromEditor.png)

1. We need to drop an instance of our **CollidingPawn** into the world. We can find the class in the **Content Browser** under "C++ Classes/HowTo_Components/CollidingPawn".

	![](ClassInContentBrowser.png)

	![](LevelEditorBeforePlay.png)

1. Press **Play** and our sphere will move with WASD, turn with the mouse, and collide-and-slide along world objects, such as our table and chairs, or any other physical objects you might want to place in the world. It can also light itself on fire (or put itself out) with the space bar!

	![](CollidingAndOnFire.png)


**Unreal Engine 4** offers a wide variety of **Components** - we've only scratched the surface with a few of the more common ones. Try exploring the built-in Components, or writing some of your own! They are flexible, powerful, and help to keep your project's code organized and reusable.

## Finished Code
   
**CollidingPawn.h**
			
	// Copyright 1998-2018 Epic Games, Inc. All Rights Reserved.

	#pragma once

	#include "GameFramework/Pawn.h"
	#include "CollidingPawn.generated.h"

	UCLASS()
	class HOWTO_COMPONENTS_API ACollidingPawn : public APawn
	{
		GENERATED_BODY()

	public:
		// Sets default values for this pawn's properties
		ACollidingPawn();

	protected:
		// Called when the game starts or when spawned
		virtual void BeginPlay() override;
	
	public:
		// Called every frame
		virtual void Tick( float DeltaSeconds ) override;

		// Called to bind functionality to input
		virtual void SetupPlayerInputComponent(class UInputComponent* InputComponent) override;

		UParticleSystemComponent* OurParticleSystem;
		class UCollidingPawnMovementComponent* OurMovementComponent;

		virtual UPawnMovementComponent* GetMovementComponent() const override;

		void MoveForward(float AxisValue);
		void MoveRight(float AxisValue);
		void Turn(float AxisValue);
		void ParticleToggle();
	};

**CollidingPawn.cpp**

	// Copyright 1998-2018 Epic Games, Inc. All Rights Reserved.

	#include "HowTo_Components.h"
	#include "CollidingPawn.h"
	#include "CollidingPawnMovementComponent.h"

	// Sets default values
	ACollidingPawn::ACollidingPawn()
	{
 		// Set this pawn to call Tick() every frame.  You can turn this off to improve performance if you don't need it.
		PrimaryActorTick.bCanEverTick = true;

		// Our root component will be a sphere that reacts to physics
		USphereComponent* SphereComponent = CreateDefaultSubobject<USphereComponent>(TEXT("RootComponent"));
		RootComponent = SphereComponent;
		SphereComponent->InitSphereRadius(40.0f);
		SphereComponent->SetCollisionProfileName(TEXT("Pawn"));

		// Create and position a mesh component so we can see where our sphere is
		UStaticMeshComponent* SphereVisual = CreateDefaultSubobject<UStaticMeshComponent>(TEXT("VisualRepresentation"));
		SphereVisual->SetupAttachment(RootComponent);
		static ConstructorHelpers::FObjectFinder<UStaticMesh> SphereVisualAsset(TEXT("/Game/StarterContent/Shapes/Shape_Sphere.Shape_Sphere"));
		if (SphereVisualAsset.Succeeded())
		{
			SphereVisual->SetStaticMesh(SphereVisualAsset.Object);
			SphereVisual->SetRelativeLocation(FVector(0.0f, 0.0f, -40.0f));
			SphereVisual->SetWorldScale3D(FVector(0.8f));
		}

		// Create a particle system that we can activate or deactivate
		OurParticleSystem = CreateDefaultSubobject<UParticleSystemComponent>(TEXT("MovementParticles"));
		OurParticleSystem->SetupAttachment(SphereVisual);
		OurParticleSystem->bAutoActivate = false;
		OurParticleSystem->SetRelativeLocation(FVector(-20.0f, 0.0f, 20.0f));
		static ConstructorHelpers::FObjectFinder<UParticleSystem> ParticleAsset(TEXT("/Game/StarterContent/Particles/P_Fire.P_Fire"));
		if (ParticleAsset.Succeeded())
		{
			OurParticleSystem->SetTemplate(ParticleAsset.Object);
		}

		// Use a spring arm to give the camera smooth, natural-feeling motion.
		USpringArmComponent* SpringArm = CreateDefaultSubobject<USpringArmComponent>(TEXT("CameraAttachmentArm"));
		SpringArm->SetupAttachment(RootComponent);
		SpringArm->RelativeRotation = FRotator(-45.f, 0.f, 0.f);
		SpringArm->TargetArmLength = 400.0f;
		SpringArm->bEnableCameraLag = true;
		SpringArm->CameraLagSpeed = 3.0f;

		// Create a camera and attach to our spring arm
		UCameraComponent* Camera = CreateDefaultSubobject<UCameraComponent>(TEXT("ActualCamera"));
		Camera->SetupAttachment(SpringArm, USpringArmComponent::SocketName);

		// Take control of the default player
		AutoPossessPlayer = EAutoReceiveInput::Player0;

		// Create an instance of our movement component, and tell it to update our root component.
		OurMovementComponent = CreateDefaultSubobject<UCollidingPawnMovementComponent>(TEXT("CustomMovementComponent"));
		OurMovementComponent->UpdatedComponent = RootComponent;
	}

	// Called when the game starts or when spawned
	void ACollidingPawn::BeginPlay()
	{
		Super::BeginPlay();
	
	}

	// Called every frame
	void ACollidingPawn::Tick( float DeltaTime )
	{
		Super::Tick( DeltaTime );

	}

	// Called to bind functionality to input
	void ACollidingPawn::SetupPlayerInputComponent(class UInputComponent* InputComponent)
	{
		Super::SetupPlayerInputComponent(InputComponent);

		InputComponent->BindAction("ParticleToggle", IE_Pressed, this, &ACollidingPawn::ParticleToggle);

		InputComponent->BindAxis("MoveForward", this, &ACollidingPawn::MoveForward);
		InputComponent->BindAxis("MoveRight", this, &ACollidingPawn::MoveRight);
		InputComponent->BindAxis("Turn", this, &ACollidingPawn::Turn);
	}

	UPawnMovementComponent* ACollidingPawn::GetMovementComponent() const
	{
		return OurMovementComponent;
	}

	void ACollidingPawn::MoveForward(float AxisValue)
	{
		if (OurMovementComponent && (OurMovementComponent->UpdatedComponent == RootComponent))
		{
			OurMovementComponent->AddInputVector(GetActorForwardVector() * AxisValue);
		}
	}

	void ACollidingPawn::MoveRight(float AxisValue)
	{
		if (OurMovementComponent && (OurMovementComponent->UpdatedComponent == RootComponent))
		{
			OurMovementComponent->AddInputVector(GetActorRightVector() * AxisValue);
		}
	}

	void ACollidingPawn::Turn(float AxisValue)
	{
		FRotator NewRotation = GetActorRotation();
		NewRotation.Yaw += AxisValue;
		SetActorRotation(NewRotation);
	}

	void ACollidingPawn::ParticleToggle()
	{
		if (OurParticleSystem && OurParticleSystem->Template)
		{
			OurParticleSystem->ToggleActive();
		}
	}

**CollidingPawnMovementComponent.h**

	// Copyright 1998-2018 Epic Games, Inc. All Rights Reserved.

	#pragma once

	#include "GameFramework/PawnMovementComponent.h"
	#include "CollidingPawnMovementComponent.generated.h"

	/**
		* 
		*/
	UCLASS()
	class HOWTO_COMPONENTS_API UCollidingPawnMovementComponent : public UPawnMovementComponent
	{
		GENERATED_BODY()
	
	public:
		virtual void TickComponent(float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) override;	
	};

**CollidingPawnMovementComponent.cpp**

	// Copyright 1998-2018 Epic Games, Inc. All Rights Reserved.

	#include "HowTo_Components.h"
	#include "CollidingPawnMovementComponent.h"

	void UCollidingPawnMovementComponent::TickComponent(float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction)
	{
		Super::TickComponent(DeltaTime, TickType, ThisTickFunction);

		// Make sure that everything is still valid, and that we are allowed to move.
		if (!PawnOwner || !UpdatedComponent || ShouldSkipUpdate(DeltaTime))
		{
			return;
		}

		// Get (and then clear) the movement vector that we set in ACollidingPawn::Tick
		FVector DesiredMovementThisFrame = ConsumeInputVector().GetClampedToMaxSize(1.0f) * DeltaTime * 150.0f;
		if (!DesiredMovementThisFrame.IsNearlyZero())
		{
			FHitResult Hit;
			SafeMoveUpdatedComponent(DesiredMovementThisFrame, UpdatedComponent->GetComponentRotation(), true, Hit);

			// If we bumped into something, try to slide along it
			if (Hit.IsValidBlockingHit())
			{
				SlideAlongSurface(DesiredMovementThisFrame, 1.f - Hit.Time, Hit.Normal, Hit);
			}
		}
	};



