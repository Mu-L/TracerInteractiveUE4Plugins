INTSourceChangelist:3782314
Availability:Public
Title:4.2 - 设置事件图表
Crumbs: %ROOT%, Programming, Programming/Tutorials, Programming/Tutorials/FirstPersonShooter, Programming/Tutorials/FirstPersonShooter/4
Description:学习如何设置第一人称射击游戏角色的事件图表。
SkillLevel:Beginner
Version:4.15

[VAR:Steps]
[OBJECT:Navigation]
	[PARAM:previous]
		[Previous Step](Programming/Tutorials/FirstPersonShooter/4/1)
	[/PARAM]
	[PARAM:current]
	[/PARAM]
	[PARAM:home]
		[Section Home](Programming/Tutorials/FirstPersonShooter/4)
	[/PARAM]
	[PARAM:next]
		[Next Step](Programming/Tutorials/FirstPersonShooter/4/3)
	[/PARAM]
[/OBJECT]
[/VAR]



在这步中，我们将编辑动画的事件图表，确保游戏运行时动画转换变量正确发出。

(#UpdatingyourStateVariables)
## 更新状态变量

1.	双击 **My Blueprint** 标签中的 **EventGraph** 打开事件图表。

	![](OpenEventGraph.png)

1.	在图表中单击右键呼出 **快捷菜单**。

1.	在 **快捷菜单** 搜索域中输入“Update”，然后点击 **Event Blueprint Update Animation** 添加该节点。

	[REGION:note]
	使用 **Event Blueprint Update Animation** 节点可在动画更新时对状态变量进行更新，使它们固定与游戏状态同步。  
	![](EventBlueprintUpdateAnimationNode.png)
	[/REGION]

1.	在图表中单击右键呼出 **快捷菜单**。

1.	在 **快捷菜单** 搜索域中输入“Owner”，然后点击 **Try Get Pawn Owner** 添加该节点。

	![](TryGetPawnOwnerBP_Node.png)

1.	从输出引脚连出引线，并在 **快捷菜单** 中选择 **Cast to Character**。

	![](CastToCharacterContextMenu.png)

1.	将 **Event Blueprint Update Animation** 输出执行引脚和 **Cast to Character** 输入执行引脚用引线连接起来。

	![](ConnectedCastToCharacterNode.png)

1.	从 **As Character** 输出引脚连出引线并选择 **Get Character Movement**。

	![](GetCharacterMovementNode.png)

1.	从 **Character Movement** 输出引脚连出引线并选择 **Get Movement Mode**。

	![](GetMovementMode.png)

(#QueryingCharacterMovement)
## 查询角色移动

1.	从 **Movement Mode** 输出引脚连出引线并选择 **Equal (Enum)**。

	![](EqualEnumNode.png)

(#DeterminingiftheCharacterisFalling)
## 确定角色是否处于下落状态

1.	将 **Equal (Enum)** 节点上的下拉值设为 **Falling**。

	![](ConnectedIsFalling.png)

1.	按住 Alt 键点击 **My Blueprint** 标签中的 **IsFalling**，拖入图表创建一个 **Set Is Falling** 节点。

	![](IsFalling.png)

1.	将 **Cast to Character** 节点未标记的输出执行引脚和 **Set Is Falling** 的输入执行引脚相连；将 **Equal (Enum)** 节点的输出布尔数据引脚和 **Set Is Falling** 节点的输入布尔数据引脚相连。

	![](ConnectedIsFalling.png)

(#DeterminingiftheCharacterisRunning)
## 确定角色是否处于奔跑状态

1.	返回 **Cast To Character** 节点，再次从 **As Character** 引脚连出引线。选择 **Get Velocity** 节点。

	![](GetVelocityNode.png)

1.	如角色不为站立状态，其速度矢量的长度将大于零。因此，从 **Return Value** 矢量输出引脚连出引线并选择 **Vector Length**，将此节点添加到图表。

	![](VectorLength.png)

1.	从 **Return Value** 浮点输出引脚连出引线并选择 **> (float)** 节点。

	![](GreaterThan.png)

1.	按住 Alt 键点击 **My Blueprint** 标签中的 **IsRunning**，拖入图表创建一个 **Set Is Running** 节点。

	![](IsRunning.png)

1.	将 **Set Is Falling** 节点的输出执行引脚和 **Set Is Running** 的输入执行引脚相连；将 **> (float)** 节点的输出布尔数据引脚和 **Set Is Running** 节点的输入布尔数据引脚相连。

	![](ConnectedIsRunning.png)

1.	**事件图表** 应与下图相似：

	[REGION:lightbox]
		[![](CompleteEventGraph.png)(w:750)](CompleteEventGraph.png)
	[/REGION]
	_点击图片放大查看。_


