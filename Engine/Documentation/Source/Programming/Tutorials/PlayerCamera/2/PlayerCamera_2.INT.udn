Availability: Public
Title:2. Configure Input to Control the Camera
Crumbs:%ROOT%, Programming, Programming/Tutorials, Programming/Tutorials/PlayerCamera
Description:Configuring input that will be applied to a pawn and camera.
version:4.9

[VAR:Steps]
[OBJECT:Navigation]
	[PARAM:previous]
		[Previous Step](Programming\Tutorials\PlayerCamera\1 "%Programming\Tutorials\PlayerCamera\1:title%")
	[/PARAM]
	[PARAM:current]
	[/PARAM]
	[PARAM:home]
		[](Programming\Tutorials\PlayerCamera)
	[/PARAM]
	[PARAM:next]
		[Next Step](Programming\Tutorials\PlayerCamera\3 "%Programming\Tutorials\PlayerCamera\3:title%")
	[/PARAM]
[/OBJECT]
[/VAR]



1. We need to decide what our camera controls will do, and then set up inputs accordingly. For this project, let's allow our follow distance to shorten and field of view to zoom in when the right mouse button is held down. Let's also control our viewing angle with the mouse, and our **Pawn**'s movement with the WASD keys. To do this, we'll open the **Project Settings** from the **Edit** dropdown menu in the **Unreal Engine** editor.

	[![](EditProjectSettings.png)](EditProjectSettings.png)

1. We will need to define one **Action Mapping** and four **Axis Mappings** as follows:
	
	| ----- | ----- | ----- |
	| Action Mapping | | |
	| ZoomIn | Right Mouse Button | |

	| ----- | ----- | ----- |
	| Axis Mapping | | |
	| MoveForward | W | 1.0 |
	|  | S | -1.0 |
	| MoveRight | A | -1.0 |
	|  | D | 1.0 |
	| CameraPitch | MouseY | 1.0 |
	| CameraYaw | MouseX | 1.0 |

	[![](InputConfig.png)](InputConfig.png)

	[REGION:note]If you would like to understand more about how input mappings work, you may want to consult the [%Programming\Tutorials\PlayerInput:title%](Programming\Tutorials\PlayerInput) tutorial.[/REGION]


Now that we have defined our input, we need to write some code to react to it. We'll head back to **Visual Studio** to do that next.

## Work-In-Progress Code

**PawnWithCamera.h**

	// Copyright 1998-2018 Epic Games, Inc. All Rights Reserved.

	#pragma once

	#include "CoreMinimal.h"
	#include "GameFramework/Pawn.h"
	#include "PawnWithCamera.generated.h"

	UCLASS()
	class HOWTO_PLAYERCAMERA_API APawnWithCamera : public APawn
	{
		GENERATED_BODY()

	public:
		// Sets default values for this pawn's properties
		APawnWithCamera();

	protected:
		// Called when the game starts or when spawned
		virtual void BeginPlay() override;
			
	public:
		// Called every frame
		virtual void Tick( float DeltaSeconds ) override;

		// Called to bind functionality to input
		virtual void SetupPlayerInputComponent(class UInputComponent* InputComponent) override;
			
	protected:
		UPROPERTY(EditAnywhere)
		USpringArmComponent* OurCameraSpringArm;
		UCameraComponent* OurCamera;
	};

**PawnWithCamera.cpp**

	// Copyright 1998-2018 Epic Games, Inc. All Rights Reserved.

	#include "HowTo_PlayerCamera.h"
	#include "PawnWithCamera.h"

	// Sets default values
	APawnWithCamera::APawnWithCamera()
	{
 		// Set this pawn to call Tick() every frame.  You can turn this off to improve performance if you don't need it.
		PrimaryActorTick.bCanEverTick = true;

		//Create our components
		RootComponent = CreateDefaultSubobject<USceneComponent>(TEXT("RootComponent"));
		OurCameraSpringArm = CreateDefaultSubobject<USpringArmComponent>(TEXT("CameraSpringArm"));
		OurCameraSpringArm->SetupAttachment(RootComponent);
		OurCameraSpringArm->SetRelativeLocationAndRotation(FVector(0.0f, 0.0f, 50.0f), FRotator(-60.0f, 0.0f, 0.0f));
		OurCameraSpringArm->TargetArmLength = 400.f
		OurCameraSpringArm->bEnableCameraLag = true;
		OurCameraSprintArm->CameraLagSpeed = 3.0f
		OurCamera = CreateDefaultSubobject<UCameraComponent>(TEXT("GameCamera"));
		OurCamera->SetupAttachment(OurCameraSpringArm, USpringArmComponent::SocketName);

		//Take control of the default Player
		AutoPossessPlayer = EAutoReceiveInput::Player0;
	}

	// Called when the game starts or when spawned
	void APawnWithCamera::BeginPlay()
	{
		Super::BeginPlay();
	
	}

	// Called every frame
	void APawnWithCamera::Tick( float DeltaTime )
	{
		Super::Tick( DeltaTime );

	}

	// Called to bind functionality to input
	void APawnWithCamera::SetupPlayerInputComponent(class UInputComponent* InputComponent)
	{
		Super::SetupPlayerInputComponent(InputComponent);

	}



