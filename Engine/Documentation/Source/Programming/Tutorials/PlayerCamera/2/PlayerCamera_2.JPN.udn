INTSourceChangelist:3782314
Availability:Public
Title:2.カメラを制御する入力の設定
Crumbs:%ROOT%, Programming, Programming/Tutorials, Programming/Tutorials/PlayerCamera
Description:ポーンとカメラに適用する入力を設定
version:4.9

[VAR:Steps]
[OBJECT:Navigation]
	[PARAM:previous]
		[前のステップ](Programming\Tutorials\PlayerCamera\1 "%Programming\Tutorials\PlayerCamera\1:title%")
	[/PARAM]
	[PARAM:current]
	[/PARAM]
	[PARAM:home]
		[](Programming\Tutorials\PlayerCamera)
	[/PARAM]
	[PARAM:next]
		[次のステップ](Programming\Tutorials\PlayerCamera\3 "%Programming\Tutorials\PlayerCamera\3:title%")
	[/PARAM]
[/OBJECT]
[/VAR]



1. カメラの制御で何を行うかを決めてから、それに応じて入力をセットアップします。このプロジェクトでは、右マウスボタンを押したときに、距離を短くして FOV をズームできるようにします。これに加えてマウス操作による視野角の操作と、 WASD キー操作で **ポーン** の動作もコントロールしましょう。設定を行うために、 **アンリアルエンジン** エディタの **[Edit (編集)]** ドロップダウンメニューから **[Project Settings (プロジェクト設定)]** を開きます。

	[![](EditProjectSettings.png)](EditProjectSettings.png)

1. **Action Mapping** 1 つと **Axis Mapping** を 4 つ追加します。

	| ----- | ----- | ----- |
	| Action Mapping | | |
	| ZoomIn | Right Mouse Button | |

	| ----- | ----- | ----- |
	| Axis Mapping | | |
	| MoveForward | W | 1.0 |
	|  | S | -1.0 |
	| MoveRight | A | -1.0 |
	|  | D | 1.0 |
	| CameraPitch | MouseY | 1.0 |
	| CameraYaw | MouseX | 1.0 |

	[![](InputConfig.png)](InputConfig.png)

	[REGION:note]入力マッピングの仕組みについて理解したい場合、[%Programming\Tutorials\PlayerInput:title%](Programming\Tutorials\PlayerInput) チュートリアルをご覧ください。[/REGION]


これで入力を定義しました。それに反応させるにはコードを記述する必要があります。それを行うには、**Visual Studio** に戻ります。

## 作業中のコード

**PawnWithCamera.h**

	// Copyright 1998-2017 Epic Games, Inc. All Rights Reserved.

	#pragma once

	#include "CoreMinimal.h"
	#include "GameFramework/Pawn.h"
	#include "PawnWithCamera.generated.h"

	UCLASS()
	class HOWTO_PLAYERCAMERA_API APawnWithCamera : public APawn
	{
		GENERATED_BODY()

	public:
		// Sets default values for this pawn's properties (このポーンのプロパティのデフォルト値を設定) 
		APawnWithCamera();

	protected:
		// Called when the game starts or when spawned (ゲーム開始時またはスポーン時に呼び出されます)
		virtual void BeginPlay() override;

	public:
		// Called every frame (フレーム毎に呼び出されます)
		virtual void Tick( float DeltaSeconds ) override;

		// Called to bind functionality to input (機能を入力にバインドするために呼び出されます)
		virtual void SetupPlayerInputComponent(class UInputComponent* InputComponent) override;

	protected:
		UPROPERTY(EditAnywhere)
		USpringArmComponent* OurCameraSpringArm;
		UCameraComponent* OurCamera;
	};

**PawnWithCamera.cpp**

	// Copyright 1998-2017 Epic Games, Inc. All Rights Reserved.

	#include "HowTo_PlayerCamera.h"
	#include "PawnWithCamera.h"

	// Sets default values (デフォルト値を設定) 
	APawnWithCamera::APawnWithCamera()
	{
 		// Set this pawn to call Tick() every frame. (フレーム毎に Tick() を呼び出すようにこのポーンを設定します。) You can turn this off to improve performance if you don't need it. (必要がなければパフォーマンスを向上させるためにオフにすることができます) 
		PrimaryActorTick.bCanEverTick = true;

		//Create our components (コンポーネントを作成)
		RootComponent = CreateDefaultSubobject<USceneComponent>(TEXT("RootComponent"));
		OurCameraSpringArm = CreateDefaultSubobject<USpringArmComponent>(TEXT("CameraSpringArm"));
		OurCameraSpringArm->SetupAttachment(RootComponent);
		OurCameraSpringArm->SetRelativeLocationAndRotation(FVector(0.0f, 0.0f, 50.0f), FRotator(-60.0f, 0.0f, 0.0f));
		OurCameraSpringArm->TargetArmLength = 400.f
		OurCameraSpringArm->bEnableCameraLag = true;
		OurCameraSprintArm->CameraLagSpeed = 3.0f
		OurCamera = CreateDefaultSubobject<UCameraComponent>(TEXT("GameCamera"));
		OurCamera->SetupAttachment(OurCameraSpringArm, USpringArmComponent::SocketName);

		//Take control of the default Player (デフォルトプレイヤーをコントロール)
		AutoPossessPlayer = EAutoReceiveInput::Player0;
	}

	// Called when the game starts or when spawned (ゲーム開始時またはスポーン時に呼び出されます)
	void APawnWithCamera::BeginPlay()
	{
		Super::BeginPlay();

	}

	// Called every frame (フレーム毎に呼び出されます)
	void APawnWithCamera::Tick( float DeltaTime )
	{
		Super::Tick( DeltaTime );

	}

	// Called to bind functionality to input (機能を入力にバインドするために呼び出されます)
	void APawnWithCamera::SetupPlayerInputComponent(class UInputComponent* InputComponent)
	{
		Super::SetupPlayerInputComponent(InputComponent);

	}



