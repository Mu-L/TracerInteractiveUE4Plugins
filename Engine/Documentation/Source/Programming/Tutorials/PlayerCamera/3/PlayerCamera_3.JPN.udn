INTSourceChangelist:3782314
Availability:Public
Title:3.入力に反応する C++ コードの記述
Crumbs:%ROOT%, Programming, Programming/Tutorials, Programming/Tutorials/PlayerCamera
Description:入力でポーンとカメラを制御するコードの実装
version: 4.9

[VAR:Steps]
[OBJECT:Navigation]
	[PARAM:previous]
		[前のステップ](Programming\Tutorials\PlayerCamera\2 "%Programming\Tutorials\PlayerCamera\2:title%")
	[/PARAM]
	[PARAM:current]
	[/PARAM]
	[PARAM:home]
		[](Programming\Tutorials\PlayerCamera)
	[/PARAM]
	[PARAM:next]
		[次のステップ](Programming\Tutorials\PlayerCamera\4 "%Programming\Tutorials\PlayerCamera\4:title%")
	[/PARAM]
[/OBJECT]
[/VAR]



1. 使用可能な入力マッピングを設定したので、受信するデータを格納するメンバー変数をセットアップしましょう。更新中に、移動とマウスルックの軸それぞれの 2D ベクター値が必要です。ズームインまたはズームアウトのビューのどちらへ移動させるべきか、2 つのステートの間隔が現時点でどれくらいあるのかについても知る必要があります。これを行うには、以下のコードを PawnWithCamera.h のクラス定義に追加する必要があります。

		//Input variables
		FVector2D MovementInput;
		FVector2D CameraInput;
		float ZoomFactor;
		bool bZoomingIn;

1. 入力を追跡するための関数を作成する必要があります。PawnWithCamera.h のクラス定義に以下のコードを追加します。

		//Input functions
		void MoveForward(float AxisValue);
		void MoveRight(float AxisValue);
		void PitchCamera(float AxisValue);
		void YawCamera(float AxisValue);
		void ZoomIn();
		void ZoomOut();

	以下のコードを使って PawnWithCamera.cpp にこうした関数を入れることができます。

		//Input functions
		void APawnWithCamera::MoveForward(float AxisValue)
		{
			MovementInput.X = FMath::Clamp<float>(AxisValue, -1.0f, 1.0f);
		}

		void APawnWithCamera::MoveRight(float AxisValue)
		{
			MovementInput.Y = FMath::Clamp<float>(AxisValue, -1.0f, 1.0f);
		}

		void APawnWithCamera::PitchCamera(float AxisValue)
		{
			CameraInput.Y = AxisValue;
		}

		void APawnWithCamera::YawCamera(float AxisValue)
		{
			CameraInput.X = AxisValue;
		}

		void APawnWithCamera::ZoomIn()
		{
			bZoomingIn = true;
		}

		void APawnWithCamera::ZoomOut()
		{
			bZoomingIn = false;
		}

	[REGION:note]ZoomFactor については、まだ何もしていません。この変数はボタンのステートに基づいて時間の経過と共に常に変化するため、**ポーン** の **Tick** 関数実行時に更新されます。[/REGION]

1. 入力データを格納するコードを作成したので、あとは **アンリアル エンジン** にコードを呼び出すタイミングを指示するのみです。ポーンの入力イベントに関数をバインドするには、以下のように **APawnWithCamera::SetupPlayerInputComponent** にバインディングコードを追加するのみのシンプルな作業です。

		//Hook up events for "ZoomIn"
		InputComponent->BindAction("ZoomIn", IE_Pressed, this, &APawnWithCamera::ZoomIn);
		InputComponent->BindAction("ZoomIn", IE_Released, this, &APawnWithCamera::ZoomOut);

		//Hook up every-frame handling for our four axes
		InputComponent->BindAxis("MoveForward", this, &APawnWithCamera::MoveForward);
		InputComponent->BindAxis("MoveRight", this, &APawnWithCamera::MoveRight);
		InputComponent->BindAxis("CameraPitch", this, &APawnWithCamera::PitchCamera);
		InputComponent->BindAxis("CameraYaw", this, &APawnWithCamera::YawCamera);

1. Tick 関数でこれらの値を使用して、ポーンと **カメラ** をフレーム毎に更新することができます。以下のコードブロックのすべてを「PawnWithCamera.cpp」ファイルの **APawnWithCamera::Tick** に追加します。

		//Zoom in if ZoomIn button is down, zoom back out if it's not
		{
			if (bZoomingIn)
			{
				ZoomFactor += DeltaTime / 0.5f;			//Zoom in over half a second
			}
			else
			{
				ZoomFactor -= DeltaTime / 0.25f;		//Zoom out over a quarter of a second
			}
			ZoomFactor = FMath::Clamp<float>(ZoomFactor, 0.0f, 1.0f);
			//Blend our camera's FOV and our SpringArm's length based on ZoomFactor
			OurCamera->FieldOfView = FMath::Lerp<float>(90.0f, 60.0f, ZoomFactor);
			OurCameraSpringArm->TargetArmLength = FMath::Lerp<float>(400.0f, 300.0f, ZoomFactor);
		}
	[REGION:note]このコードはハードコードされた値をいくつか使用します。使用する値は、0.5 秒や 0.25 秒のズーム時間、90 度でズームアウト、60 度でズームインする FOV 値、またはカメラ距離の 400 ズームアウト、300 ズームインの値などです。このような値は、**UPROPERTY(EditAnywhere)** をタグ付けした変数として通常はエディタに公開し、プログラマー以外の人によるコードの変更、コードを再コンパイルしないでプログラマーが変更、またはエディタでゲームを再生中でも変更できるようにします。[/REGION]

		//Rotate our actor's yaw, which will turn our camera because we're attached to it
		{
			FRotator NewRotation = GetActorRotation();
			NewRotation.Yaw += CameraInput.X;
			SetActorRotation(NewRotation);
		}

		//Rotate our camera's pitch, but limit it so we're always looking downward
		{
			FRotator NewRotation = OurCameraSpringArm->GetComponentRotation();
			NewRotation.Pitch = FMath::Clamp(NewRotation.Pitch + CameraInput.Y, -80.0f, -15.0f);
			OurCameraSpringArm->SetWorldRotation(NewRotation);
		}
	このコードブロックはマウスの X 軸でポーンのヨーを直接回転させますが、カメラシステムのみが、マウスの Y 軸からのピッチ変更に反応します。**アクタ** または **アクタ** のサブクラスを回転させると、実質的にルートレベルの **コンポーネント** を回転させます。これが間接的にコンポーネントに親子付けされているものすべてに影響を与えます。

		//Handle movement based on our "MoveX" and "MoveY" axes
		{
			if (!MovementInput.IsZero())
			{
				//Scale our movement input axis values by 100 units per second
				MovementInput = MovementInput.SafeNormal() * 100.0f;
				FVector NewLocation = GetActorLocation();
				NewLocation += GetActorForwardVector() * MovementInput.X * DeltaTime;
				NewLocation += GetActorRightVector() * MovementInput.Y * DeltaTime;
				SetActorLocation(NewLocation);
			}
		}
	**GetActorForwardVector** と **GetActorRightVector** を使用すると、アクタが向いている方向と相対的な動きになります。カメラはアクタと同じ方向を向いていいるため、これでフォワード キーはプレイヤーが見ているものに対して常に相対的に前方向になります。

1. これでコーディングが終わりました。コードをコンパイルして、**コンテンツ ブラウザ** から新規クラスを **アンリアル エンジン** エディタの **レベルエディタ** ウィンドウにドラッグできるようになりました。

	[![](ClassInContentBrowser.png)](ClassInContentBrowser.png)

	**スタティック メッシュ** やその他のビジュアル コンポーネントを自由に追加したり、または何も追加しないでプレイをお楽しみください。カメラが操作に追随してレベル内で滑らかに加速、減速の動きをするのがわかりますが、回転はぎこちなく瞬間的に起こります。Camera Rotation Lag を追加したり Camera Lag を増減させるなど **SpringArmComponent** のプロパティをいくつか変更して、コントロールの操作性の違いを感じてみてください。

	[![](SpringArmValues.png)](SpringArmValues.png)

1. コーン メッシュを回転させると、下図のようになります。

	[![](FinalScreen.png)](FinalScreen.png)

## 完成コード

**PawnWithCamera.h**

	// Copyright 1998-2017 Epic Games, Inc. All Rights Reserved.

	#pragma once

	#include "CoreMinimal.h"
	#include "GameFramework/Pawn.h"
	#include "PawnWithCamera.generated.h"

	UCLASS()
	class HOWTO_PLAYERCAMERA_API APawnWithCamera : public APawn
	{
		GENERATED_BODY()

	public:
		// Sets default values for this pawn's properties
		APawnWithCamera();

	protected:
		// Called when the game starts or when spawned
		virtual void BeginPlay() override;
			
	public:
		// Called every frame
		virtual void Tick( float DeltaSeconds ) override;

		// Called to bind functionality to input
		virtual void SetupPlayerInputComponent(class UInputComponent* InputComponent) override;

	protected:
		UPROPERTY(EditAnywhere)
		USpringArmComponent* OurCameraSpringArm;
		UCameraComponent* OurCamera;

		//Input variables
		FVector2D MovementInput;
		FVector2D CameraInput;
		float ZoomFactor;
		bool bZoomingIn;

		//Input functions
		void MoveForward(float AxisValue);
		void MoveRight(float AxisValue);
		void PitchCamera(float AxisValue);
		void YawCamera(float AxisValue);
		void ZoomIn();
		void ZoomOut();
	};

**PawnWithCamera.cpp**

	// Copyright 1998-2017 Epic Games, Inc. All Rights Reserved.

	#include "HowTo_PlayerCamera.h"
	#include "PawnWithCamera.h"

	// Sets default values
	APawnWithCamera::APawnWithCamera()
	{
 		// Set this pawn to call Tick() every frame.  You can turn this off to improve performance if you don't need it.
		PrimaryActorTick.bCanEverTick = true;

		//Create our components
		RootComponent = CreateDefaultSubobject<USceneComponent>(TEXT("RootComponent"));
		OurCameraSpringArm = CreateDefaultSubobject<USpringArmComponent>(TEXT("CameraSpringArm"));
		OurCameraSpringArm->SetupAttachment(RootComponent);
		OurCameraSpringArm->SetRelativeLocationAndRotation(FVector(0.0f, 0.0f, 50.0f), FRotator(-60.0f, 0.0f, 0.0f));
		OurCameraSpringArm->TargetArmLength = 400.f;
		OurCameraSpringArm->bEnableCameraLag = true;
		OurCameraSpringArm->CameraLagSpeed = 3.0f;
		OurCamera = CreateDefaultSubobject<UCameraComponent>(TEXT("GameCamera"));
		OurCamera->SetupAttachment(OurCameraSpringArm, USpringArmComponent::SocketName);

		//Take control of the default Player
		AutoPossessPlayer = EAutoReceiveInput::Player0;
	}

	// Called when the game starts or when spawned
	void APawnWithCamera::BeginPlay()
	{
		Super::BeginPlay();
	
	}

	// Called every frame
	void APawnWithCamera::Tick( float DeltaTime )
	{
		Super::Tick(DeltaTime);

		//Zoom in if ZoomIn button is down, zoom back out if it's not
		{
			if (bZoomingIn)
			{
				ZoomFactor += DeltaTime / 0.5f;			//Zoom in over half a second
			}
			else
			{
				ZoomFactor -= DeltaTime / 0.25f;		//Zoom out over a quarter of a second
			}
			ZoomFactor = FMath::Clamp<float>(ZoomFactor, 0.0f, 1.0f);
			//Blend our camera's FOV and our SpringArm's length based on ZoomFactor
			OurCamera->FieldOfView = FMath::Lerp<float>(90.0f, 60.0f, ZoomFactor);
			OurCameraSpringArm->TargetArmLength = FMath::Lerp<float>(400.0f, 300.0f, ZoomFactor);
		}

		//Rotate our actor's yaw, which will turn our camera because we're attached to it
		{
			FRotator NewRotation = GetActorRotation();
			NewRotation.Yaw += CameraInput.X;
			SetActorRotation(NewRotation);
		}

		//Rotate our camera's pitch, but limit it so we're always looking downward
		{
			FRotator NewRotation = OurCameraSpringArm->GetComponentRotation();
			NewRotation.Pitch = FMath::Clamp(NewRotation.Pitch + CameraInput.Y, -80.0f, -15.0f);
			OurCameraSpringArm->SetWorldRotation(NewRotation);
		}

		//Handle movement based on our "MoveX" and "MoveY" axes
		{
			if (!MovementInput.IsZero())
			{
				//Scale our movement input axis values by 100 units per second
				MovementInput = MovementInput.SafeNormal() * 100.0f;
				FVector NewLocation = GetActorLocation();
				NewLocation += GetActorForwardVector() * MovementInput.X * DeltaTime;
				NewLocation += GetActorRightVector() * MovementInput.Y * DeltaTime;
				SetActorLocation(NewLocation);
			}
		}
	}

	// Called to bind functionality to input
	void APawnWithCamera::SetupPlayerInputComponent(class UInputComponent* InputComponent)
	{
		Super::SetupPlayerInputComponent(InputComponent);

		//Hook up events for "ZoomIn"
		InputComponent->BindAction("ZoomIn", IE_Pressed, this, &APawnWithCamera::ZoomIn);
		InputComponent->BindAction("ZoomIn", IE_Released, this, &APawnWithCamera::ZoomOut);

		//Hook up every-frame handling for our four axes
		InputComponent->BindAxis("MoveForward", this, &APawnWithCamera::MoveForward);
		InputComponent->BindAxis("MoveRight", this, &APawnWithCamera::MoveRight);
		InputComponent->BindAxis("CameraPitch", this, &APawnWithCamera::PitchCamera);
		InputComponent->BindAxis("CameraYaw", this, &APawnWithCamera::YawCamera);
	}

	//Input functions
	void APawnWithCamera::MoveForward(float AxisValue)
	{
		MovementInput.X = FMath::Clamp<float>(AxisValue, -1.0f, 1.0f);
	}

	void APawnWithCamera::MoveRight(float AxisValue)
	{
		MovementInput.Y = FMath::Clamp<float>(AxisValue, -1.0f, 1.0f);
	}

	void APawnWithCamera::PitchCamera(float AxisValue)
	{
		CameraInput.Y = AxisValue;
	}

	void APawnWithCamera::YawCamera(float AxisValue)
	{
		CameraInput.X = AxisValue;
	}

	void APawnWithCamera::ZoomIn()
	{
		bZoomingIn = true;
	}

	void APawnWithCamera::ZoomOut()
	{
		bZoomingIn = false;
	}



