Availability: Public
Title:1. Customize a Pawn
Crumbs:%ROOT%, Programming, Programming/Tutorials, Programming/Tutorials/PlayerInput
Description:Introduction to Pawns
version:4.9

[VAR:Steps]
[OBJECT:Navigation]
	[PARAM:previous]
	[/PARAM]
	[PARAM:current]
	[/PARAM]
	[PARAM:home]
		[](Programming\Tutorials\PlayerInput)
	[/PARAM]
	[PARAM:next]
		[Next Step](Programming\Tutorials\PlayerInput\2 "%Programming\Tutorials\PlayerInput\2:title%")
	[/PARAM]
[/OBJECT]
[/VAR]



[REGION:tip]If you are new to **Unreal Engine 4**, you might want to read our [%Programming\QuickStart:title% tutorial](Programming\QuickStart) first. For this tutorial, we will assume you are familiar with creating a project, adding C++ code to it, and compiling your code.[/REGION]

1. We will begin by creating a new, Basic Code project, with starter content, named HowTo_PlayerInput. Then, we'll add a customized **Pawn** class, which we will call MyPawn, to the project.

	[REGION:note]A Pawn is a type of **Actor** that is designed to be controlled by human players or AI.[/REGION]

	[![](AddPawn.png)](AddPawn.png)

	[![](NameYourNewPawn.png)](NameYourNewPawn.png)

1. The first thing we're going to do is set our MyPawn to respond to player input automatically upon the game starting. The Pawn class provides a variable we can set during initialization that handles this for us. In MyPawn.cpp, add the following code to **AMyPawn::AMyPawn**:

		// Set this pawn to be controlled by the lowest-numbered player
		AutoPossessPlayer = EAutoReceiveInput::Player0;

1. Next, we'll build a few basic **Components**. If you want to learn more about adding and managing Components in code, as well as some common types of Components you will encounter, try reading our [%Programming\Tutorials\Components:title% tutorial](Programming\Tutorials\Components). In order to keep track of the Component we will create, we should add the following code to MyPawn.h, at the bottom of our class definition:

		UPROPERTY(EditAnywhere)
		USceneComponent* OurVisibleComponent;

	[REGION:note]This variable is tagged as a **UPROPERTY** so that it will be visible to **Unreal Engine**. This is important because it prevents the variable from being reset when the game is launched, or when the project or level is closed and reloaded.[/REGION]

	And back in MyPawn.cpp, we should add the following code to AMyPawn::AMyPawn:

		// Create a dummy root component we can attach things to.
		RootComponent = CreateDefaultSubobject<USceneComponent>(TEXT("RootComponent"));
		// Create a camera and a visible object
		UCameraComponent* OurCamera = CreateDefaultSubobject<UCameraComponent>(TEXT("OurCamera"));
		OurVisibleComponent = CreateDefaultSubobject<UStaticMeshComponent>(TEXT("OurVisibleComponent"));
		// Attach our camera and visible object to our root component. Offset and rotate the camera.
		OurCamera->SetupAttachment(RootComponent);
		OurCamera->SetRelativeLocation(FVector(-250.0f, 0.0f, 250.0f));
		OurCamera->SetRelativeRotation(FRotator(-45.0f, 0.0f, 0.0f));
		OurVisibleComponent->SetupAttachment(RootComponent);

1. We are now ready to save our changes and compile with the **Build** command in **Visual Studio** or the **Compile** button in the **Unreal Edtior**.

----

Now that we have a customized Pawn to react to our game's input, we'll need to define what that input will be. To do this, we'll configure our project's **Input Settings** in the **Unreal Editor**.

## Work-In-Progress Code

**MyPawn.h**

	// Copyright 1998-2018 Epic Games, Inc. All Rights Reserved.

	#pragma once

	#include "GameFramework/Pawn.h"
	#include "MyPawn.generated.h"

	UCLASS()
	class HOWTO_PLAYERINPUT_API AMyPawn : public APawn
	{
		GENERATED_BODY()

	public:
		// Sets default values
		AMyPawn();

	protected:
		// Called when the game starts or when spawned
		virtual void BeginPlay() override;
			
	public:
		// Called every frame
		virtual void Tick( float DeltaSeconds ) override;

		// Called to bind functionality to input
		virtual void SetupPlayerInputComponent(class UInputComponent* InputComponent) override;

		UPROPERTY(EditAnywhere)
		USceneComponent* OurVisibleComponent;
	};

**MyPawn.cpp**

	// Copyright 1998-2018 Epic Games, Inc. All Rights Reserved.

	#include "HowTo_PlayerInput.h"
	#include "MyPawn.h"

	// Sets default values
	AMyPawn::AMyPawn()
	{
 		// Set this pawn to call Tick() every frame.  You can turn this off to improve performance if you don't need it.
		PrimaryActorTick.bCanEverTick = true;

		// Set this pawn to be controlled by the lowest-numbered player
		AutoPossessPlayer = EAutoReceiveInput::Player0;

		// Create a dummy root component we can attach things to.
		RootComponent = CreateDefaultSubobject<USceneComponent>(TEXT("RootComponent"));
		// Create a camera and a visible object
		UCameraComponent* OurCamera = CreateDefaultSubobject<UCameraComponent>(TEXT("OurCamera"));
		OurVisibleComponent = CreateDefaultSubobject<UStaticMeshComponent>(TEXT("OurVisibleComponent"));
		// Attach our camera and visible object to our root component. Offset and rotate the camera.
		OurCamera->SetupAttachment(RootComponent);
		OurCamera->SetRelativeLocation(FVector(-250.0f, 0.0f, 250.0f));
		OurCamera->SetRelativeRotation(FRotator(-45.0f, 0.0f, 0.0f));
		OurVisibleComponent->SetupAttachment(RootComponent);
	}

	// Called when the game starts or when spawned
	void AMyPawn::BeginPlay()
	{
		Super::BeginPlay();

	}

	// Called every frame
	void AMyPawn::Tick( float DeltaTime )
	{
		Super::Tick( DeltaTime );

	}

	// Called to bind functionality to input
	void AMyPawn::SetupPlayerInputComponent(class UInputComponent* InputComponent)
	{
		Super::SetupPlayerInputComponent(InputComponent);

	}


