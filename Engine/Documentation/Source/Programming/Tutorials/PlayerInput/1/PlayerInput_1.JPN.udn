INTSourceChangelist:2620109
Availability:Public
Title:1.ポーンのカスタマイズ
Crumbs:%ROOT%, Programming, Programming/Tutorials, Programming/Tutorials/PlayerInput
Description:ポーン入門
バージョン:4.9

[VAR:Steps]
[OBJECT:Navigation]
	[PARAM:previous]
	[/PARAM]
	[PARAM:current]
	[/PARAM]
	[PARAM:home]
		[プレイヤー入力と Pawn クラス](Programming\Tutorials\PlayerInput)
	[/PARAM]
	[PARAM:next]
		[次の手順](Programming\Tutorials\PlayerInput\2 "%Programming\Tutorials\PlayerInput\2:title%")
	[/PARAM]
[/OBJECT]
[/VAR]



[REGION:tip] **アンリアルエンジン 4** 初心者の人は、最初に [%Programming\QuickStart:title% tutorial](Programming\QuickStart) をお読みください。このチュートリアルの対象者は、プロジェクトの作成、プロジェクトに C++ コードを追加、またコードをコンパイルできる方を想定しています。[/REGION]

1. まず「HowTo_PlayerInput」という名前のスターターコンテンツを使用して、Basic Code プロジェクトを作成します。その後「MyPawn」と名前を付けたカスタマイズした **Pawn** クラスをプロジェクトに追加します。

	[REGION:note] ポーンは人間のプレイヤーまたは AI による制御が設定されている **アクタ** の一種です。[/REGION]

	[![](AddPawn.png)](AddPawn.png)

	[![](NameYourNewPawn.png)](NameYourNewPawn.png)

1. まず、ゲーム開始時に MyPawn がプレイヤー入力に対し自動的に反応するように設定します。Pawn クラスから初期化中に設定できる変数を得ることができます。この変数はプレイヤー入力の自動対応を処理します。「MyPawn.cpp」ファイルの **AMyPawn::AMyPawn** に以下のコードを追加します：

		// Set this pawn to be controlled by the lowest-numbered player (このポーンが最小値のプレイヤーで制御されるように設定)
		AutoPossessPlayer = EAutoReceiveInput::Player0;

1. 次に基本的な **コンポーネント** をいくつか構成します。コードによるコンポーネントの追加や管理に加えて、コンポーネントの共通タイプの詳細を知りたいユーザーは、[%Programming\Tutorials\Components:title% tutorial](Programming\Tutorials\Components) を参照してください。作成するコンポーネントを追跡するには、クラス定義の下にある「 `MyPawn.h` 」へ以下のコードを追加してください。

		UPROPERTY(EditAnywhere)
		USceneComponent* OurVisibleComponent;

	[REGION:note]この変数は **アンリアルエンジン** で表示されるように **UPROPERTY** とタグが付けられます。ゲームの起動時や、プロジェクトまたはレベルが閉じられて再ロードされた時に変数のリセットを防ぐために、これは重要です。[/REGION]

	「MyPawn.cpp」ファイルへ戻って、以下のコードをAMyPawn::AMyPawnに追加します：

		// Create a dummy root component we can attach things to.(親子付け可能なダミーのルートコンポーネントを作成)
		RootComponent = CreateDefaultSubobject<USceneComponent>(TEXT("RootComponent"));
		// Create a camera and a visible object (カメラと可視オブジェクトを作成)
		UCameraComponent* OurCamera = CreateDefaultSubobject<UCameraComponent>(TEXT("OurCamera"));
		OurVisibleComponent = CreateDefaultSubobject<UStaticMeshComponent>(TEXT("OurVisibleComponent"));
		// Attach our camera and visible object to our root component. (カメラと可視オブジェクトをルートコンポーネントに親子付け。カメラをオフセットして回転)
		OurCamera->AttachTo(RootComponent);
		OurCamera->SetRelativeLocation(FVector(-250.0f, 0.0f, 250.0f));
		OurCamera->SetRelativeRotation(FRotator(-45.0f, 0.0f, 0.0f));
		OurVisibleComponent->AttachTo(RootComponent);

1. 変更を保存してコンパイルできる状態になりました。**Visual Studio** の **Build** コマンドか、**アンリアルエンジン** エディタの **[Compile (コンパイル)]** ボタンでコンパイルを実行します。

----

ゲーム入力に対応するカスタマイズ ポーンを作成したので、入力規則を定義しなくてはいけません。入力は **アンリアルエンジン** エディタの **[Input Settings (入力設定)]** で定義します。

[OBJECT:Section]
    [PARAMLITERAL:id]
    コード
    [/PARAMLITERAL]
    [PARAM:heading]
    作業中のコード
    [/PARAM]
    [PARAM:content]
		**MyPawn.h**
			// Copyright 1998-2018 Epic Games, Inc.All Rights Reserved.

			#pragma once

			#include "GameFramework/Pawn.h"
			#include "MyPawn.generated.h"

			UCLASS()
			class HOWTO_PLAYERINPUT_API AMyPawn : public APawn
			{
				GENERATED_BODY()

			public:
				// Sets default values (デフォルト値を設定)
				AMyPawn();

				// Called when the game starts or when spawned (ゲーム開始またはスポーン時に呼ばれます)
				virtual void BeginPlay() override;

				// Called every frame (フレームごとに呼ばれます)
				virtual void Tick( float DeltaSeconds ) override;

				// Called to bind functionality to input (機能と入力をバインドするために呼ばれます)
				virtual void SetupPlayerInputComponent(class UInputComponent* InputComponent) override;

				UPROPERTY(EditAnywhere)
				USceneComponent* OurVisibleComponent;
			};

		**MyPawn.h**
			// Copyright 1998-2018 Epic Games, Inc.All Rights Reserved.

			#include "HowTo_PlayerInput.h"
			#include "MyPawn.h"

			// Sets default values (デフォルト値を設定)
			AMyPawn::AMyPawn()
			{
 				// Set this pawn to call Tick() every frame.(フレームごとに Tick() を呼び出すためこのポーンを設定)必要なければパフォーマンスを向上させるためにオフにできます。
				PrimaryActorTick.bCanEverTick = true;

				// Set this pawn to be controlled by the lowest-numbered player (このポーンが最小値のプレイヤーで制御されるように設定)
				AutoPossessPlayer = EAutoReceiveInput::Player0;

				// Create a dummy root component we can attach things to.(親子付け可能なダミーのルートコンポーネントを作成)
				RootComponent = CreateDefaultSubobject<USceneComponent>(TEXT("RootComponent"));
				// Create a camera and a visible object (カメラと可視オブジェクトを作成)
				UCameraComponent* OurCamera = CreateDefaultSubobject<UCameraComponent>(TEXT("OurCamera"));
				OurVisibleComponent = CreateDefaultSubobject<UStaticMeshComponent>(TEXT("OurVisibleComponent"));
				// Attach our camera and visible object to our root component. (カメラと可視オブジェクトをルートコンポーネントに親子付け。カメラをオフセットして回転)
				OurCamera->AttachTo(RootComponent);
				OurCamera->SetRelativeLocation(FVector(-250.0f, 0.0f, 250.0f));
				OurCamera->SetRelativeRotation(FRotator(-45.0f, 0.0f, 0.0f));
				OurVisibleComponent->AttachTo(RootComponent);
			}

			// Called when the game starts or when spawned (ゲーム開始またはスポーン時に呼ばれます)
			void AMyPawn::BeginPlay()
			{
				Super::BeginPlay();

			}

			// Called every frame (フレームごとに呼ばれます)
			void AMyPawn::Tick( float DeltaTime )
			{
				Super::Tick( DeltaTime );

			}

			// Called to bind functionality to input (機能と入力をバインドするために呼ばれます)
			void AMyPawn::SetupPlayerInputComponent(class UInputComponent* InputComponent)
			{
				Super::SetupPlayerInputComponent(InputComponent);

			}

    [/PARAM]
[/OBJECT]


