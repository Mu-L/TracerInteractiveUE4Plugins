Availability: Public
Title:3. Program and Bind Game Actions
Crumbs:%ROOT%, Programming, Programming/Tutorials, Programming/Tutorials/PlayerInput
Description:Binding input to C++ code
version:4.9

[VAR:Steps]
[OBJECT:Navigation]
	[PARAM:previous]
		[Previous Step](Programming\Tutorials\PlayerInput\2 "%Programming\Tutorials\PlayerInput\2:title%")
	[/PARAM]
	[PARAM:current]
	[/PARAM]
	[PARAM:home]
		[](Programming\Tutorials\PlayerInput)
	[/PARAM]
	[PARAM:next]
		[Next Step](Programming\Tutorials\PlayerInput\4 "%Programming\Tutorials\PlayerInput\4:title%")
	[/PARAM]
[/OBJECT]
[/VAR]



1. In **Visual Studio**, open MyPawn.h and add the following code to the bottom of MyPawn's class definition:

		//Input functions
		void Move_XAxis(float AxisValue);
		void Move_YAxis(float AxisValue);
		void StartGrowing();
		void StopGrowing();

		//Input variables
		FVector CurrentVelocity;
		bool bGrowing;

	[REGION:note]The four input functions are going to be bound to our input events. When they run, they will update the values stored in our new input variables, which MyPawn will use to determine what it should do during in the game.[/REGION]

1. We'll switch over to MyPawn.cpp and program the four functions we just declared. Add the following code:

		void AMyPawn::Move_XAxis(float AxisValue)
		{
			// Move at 100 units per second forward or backward
			CurrentVelocity.X = FMath::Clamp(AxisValue, -1.0f, 1.0f) * 100.0f;
		}

		void AMyPawn::Move_YAxis(float AxisValue)
		{
			// Move at 100 units per second right or left
			CurrentVelocity.Y = FMath::Clamp(AxisValue, -1.0f, 1.0f) * 100.0f;
		}

		void AMyPawn::StartGrowing()
		{
			bGrowing = true;
		}

		void AMyPawn::StopGrowing()
		{
			bGrowing = false;
		}
	We use **FMath::Clamp** to constrain the values we get from our inputs to the range of -1 to +1. Although it's not an issue in this example, if there were multiple keys that could affect an axis in the same way, the values would be added together if a player pressed those inputs at the same time. For example, if both W and Up Arrow were mapped to MoveX with scales of 1.0, pressing both would result in an AxisValue of 2.0, which would let the player move at double speed if we didn't clamp it.
	[REGION:note]You may notice that the two "Move" functions take axis values as floats, while the "Grow" functions do not. This is because they will be mapped to MoveX and MoveY, which are Axis Mappings, and therefore will have a floating-point parameter. Action Mappings do not have this parameter.[/REGION]

1. Now that we have our input functions defined, we'll need to bind them so that they will react to the appropriate inputs. Add the following code inside of **AMyPawn::SetupPlayerInputComponent**:

		// Respond when our "Grow" key is pressed or released.
		InputComponent->BindAction("Grow", IE_Pressed, this, &AMyPawn::StartGrowing);
		InputComponent->BindAction("Grow", IE_Released, this, &AMyPawn::StopGrowing);

		// Respond every frame to the values of our two movement axes, "MoveX" and "MoveY".
		InputComponent->BindAxis("MoveX", this, &AMyPawn::Move_XAxis);
		InputComponent->BindAxis("MoveY", this, &AMyPawn::Move_YAxis);

1. We now have variables that are updated by the inputs we configured. All we have left to do is write code to do something with them. Let's add the following code to **AMyPawn::Tick**:

		// Handle growing and shrinking based on our "Grow" action
		{
			float CurrentScale = OurVisibleComponent->GetComponentScale().X;
			if (bGrowing)
			{
				// Grow to double size over the course of one second
				CurrentScale += DeltaTime;
			}
			else
			{
				// Shrink half as fast as we grow
				CurrentScale -= (DeltaTime * 0.5f);
			}
			// Make sure we never drop below our starting size, or increase past double size.
			CurrentScale = FMath::Clamp(CurrentScale, 1.0f, 2.0f);
			OurVisibleComponent->SetWorldScale3D(FVector(CurrentScale));
		}

		// Handle movement based on our "MoveX" and "MoveY" axes
		{
			if (!CurrentVelocity.IsZero())
			{
				FVector NewLocation = GetActorLocation() + (CurrentVelocity * DeltaTime);
				SetActorLocation(NewLocation);
			}
		}

1. After compling our code, we can return to the **Unreal Editor** and press **Play**. We should have control of our **Pawn** with the WASD keys, and we should be able to make it grow by holding **Space Bar**, and watch it shrink when we let go.

[![](PlayingGame1.png)](PlayingGame1.png)
[![](PlayingGame2.png)](PlayingGame2.png)

## Finished Code

**MyPawn.h**

	// Copyright 1998-2018 Epic Games, Inc. All Rights Reserved.

	#pragma once

	#include "GameFramework/Pawn.h"
	#include "MyPawn.generated.h"

	UCLASS()
	class HOWTO_PLAYERINPUT_API AMyPawn : public APawn
	{
		GENERATED_BODY()

	public:
		// Sets default values
		AMyPawn();

	protected:
		// Called when the game starts or when spawned
		virtual void BeginPlay() override;
			
	public:
		// Called every frame
		virtual void Tick(float DeltaSeconds) override;

		// Called to bind functionality to input
		virtual void SetupPlayerInputComponent(class UInputComponent* InputComponent) override;

		UPROPERTY(EditAnywhere)
		USceneComponent* OurVisibleComponent;

		// Input functions
		void Move_XAxis(float AxisValue);
		void Move_YAxis(float AxisValue);
		void StartGrowing();
		void StopGrowing();

		// Input variables
		FVector CurrentVelocity;
		bool bGrowing;
	};

**MyPawn.cpp**

	// Copyright 1998-2018 Epic Games, Inc. All Rights Reserved.

	#include "HowTo_PlayerInput.h"
	#include "MyPawn.h"

	// Sets default values
	AMyPawn::AMyPawn()
	{
		// Set this pawn to call Tick() every frame.  You can turn this off to improve performance if you don't need it.
		PrimaryActorTick.bCanEverTick = true;

		// Set this pawn to be controlled by the lowest-numbered player
		AutoPossessPlayer = EAutoReceiveInput::Player0;

		// Create a dummy root component we can attach things to.
		RootComponent = CreateDefaultSubobject<USceneComponent>(TEXT("RootComponent"));
		// Create a camera and a visible object
		UCameraComponent* OurCamera = CreateDefaultSubobject<UCameraComponent>(TEXT("OurCamera"));
		OurVisibleComponent = CreateDefaultSubobject<UStaticMeshComponent>(TEXT("OurVisibleComponent"));
		// Attach our camera and visible object to our root component. Offset and rotate the camera.
		OurCamera->SetupAttachment(RootComponent);
		OurCamera->SetRelativeLocation(FVector(-250.0f, 0.0f, 250.0f));
		OurCamera->SetRelativeRotation(FRotator(-45.0f, 0.0f, 0.0f));
		OurVisibleComponent->SetupAttachment(RootComponent);
	}

	// Called when the game starts or when spawned
	void AMyPawn::BeginPlay()
	{
		Super::BeginPlay();

	}

	// Called every frame
	void AMyPawn::Tick(float DeltaTime)
	{
		Super::Tick(DeltaTime);

		// Handle growing and shrinking based on our "Grow" action
		{
			float CurrentScale = OurVisibleComponent->GetComponentScale().X;
			if (bGrowing)
			{
				// Grow to double size over the course of one second
				CurrentScale += DeltaTime;
			}
			else
			{
				// Shrink half as fast as we grow
				CurrentScale -= (DeltaTime * 0.5f);
			}
			// Make sure we never drop below our starting size, or increase past double size.
			CurrentScale = FMath::Clamp(CurrentScale, 1.0f, 2.0f);
			OurVisibleComponent->SetWorldScale3D(FVector(CurrentScale));
		}

		// Handle movement based on our "MoveX" and "MoveY" axes
		{
			if (!CurrentVelocity.IsZero())
			{
				FVector NewLocation = GetActorLocation() + (CurrentVelocity * DeltaTime);
				SetActorLocation(NewLocation);
			}
		}
	}

	// Called to bind functionality to input
	void AMyPawn::SetupPlayerInputComponent(class UInputComponent* InputComponent)
	{
		Super::SetupPlayerInputComponent(InputComponent);

		// Respond when our "Grow" key is pressed or released.
		InputComponent->BindAction("Grow", IE_Pressed, this, &AMyPawn::StartGrowing);
		InputComponent->BindAction("Grow", IE_Released, this, &AMyPawn::StopGrowing);

		// Respond every frame to the values of our two movement axes, "MoveX" and "MoveY".
		InputComponent->BindAxis("MoveX", this, &AMyPawn::Move_XAxis);
		InputComponent->BindAxis("MoveY", this, &AMyPawn::Move_YAxis);
	}

	void AMyPawn::Move_XAxis(float AxisValue)
	{
		// Move at 100 units per second forward or backward
		CurrentVelocity.X = FMath::Clamp(AxisValue, -1.0f, 1.0f) * 100.0f;
	}

	void AMyPawn::Move_YAxis(float AxisValue)
	{
		// Move at 100 units per second right or left
		CurrentVelocity.Y = FMath::Clamp(AxisValue, -1.0f, 1.0f) * 100.0f;
	}

	void AMyPawn::StartGrowing()
	{
		bGrowing = true;
	}

	void AMyPawn::StopGrowing()
	{
		bGrowing = false;
	}



