Availability: Public
Title:1. Set Up Module Dependencies for UMG
Crumbs:%ROOT%, Programming, Programming/Tutorials, Programming/Tutorials/UMG
Description:Modifying our project to include the modules needed to build menus.
version:4.14

[VAR:Steps]
[OBJECT:Navigation]
	[PARAM:previous]
	[/PARAM]
	[PARAM:current]
	[/PARAM]
	[PARAM:home]
		[](Programming\Tutorials\UMG)
	[/PARAM]
	[PARAM:next]
		[Next Step](Programming\Tutorials\UMG\2 "%Programming\Tutorials\UMG\2:title%")
	[/PARAM]
[/OBJECT]
[/VAR]



[REGION:tip]If you are new to **Unreal Engine 4**, you might want to read our [%Programming\QuickStart:title% tutorial](Programming\QuickStart) first. For this tutorial, we will assume you are familiar with creating a project, adding C++ code to it, and compiling your code. We will also expose functions and properties to **Blueprint**. If you would like to learn more about that, the [%Programming\Tutorials\VariablesTimersEvents:title% tutorial](Programming\Tutorials\VariablesTimersEvents) is a good place to start.[/REGION]

1. We will begin by creating a new project:
	* Select the C++ tab.
	* Select Basic Code.
	* Leave the default values of Desktop/Console and With Starter Content.
	* We will use the name HowTo_UMG.

	[![](UMG_ProjectSetup.png)](UMG_ProjectSetup.png)

	[REGION:note]Since we're going to write code that uses **Unreal Motion Graphics (UMG)**, we'll need to go into **Visual Studio** include a few **modules** that aren't available by default.[/REGION]

1. We can get to our project's code by using the **Open Visual Studio** command from the **File** dropdown menu on the main editor screen.

	[![](OpenVisualStudio.png)](OpenVisualStudio.png)

1. UMG is dependent on a few modules, so we'll need to add those modules to HowTo_UMG.Build.cs.

	[![](BuildCS.png)](BuildCS.png)

	In HowTo_UMG.Build.CS, we need to add UMG to the list of included public modules, and Slate and SlateCore to the list of included private modules. We'll need to modify the first line in HowTo_UMG's constructor to read as follows:
		PublicDependencyModuleNames.AddRange(new string[] { "Core", "CoreUObject", "Engine", "InputCore", "UMG" });

	And then we can uncomment the following line:
		PrivateDependencyModuleNames.AddRange(new string[] { "Slate", "SlateCore" });

	As usual, full source code is provided below so you can double-check your code.


----

With UMG set up, we can add code to our project's custom **Game Mode** to create and display our game's menus.

## Work-In-Progress Code

**HowTo_UMG.Build.cs**

	// Copyright 1998-2018 Epic Games, Inc. All Rights Reserved.

	using UnrealBuildTool;

	public class HowTo_UMG : ModuleRules
	{
		public HowTo_UMG(TargetInfo Target)
		{
			PublicDependencyModuleNames.AddRange(new string[] { "Core", "CoreUObject", "Engine", "InputCore", "UMG" });

			//PrivateDependencyModuleNames.AddRange(new string[] {  });

			// Uncomment if you are using Slate UI
			PrivateDependencyModuleNames.AddRange(new string[] { "Slate", "SlateCore" });
		
			// Uncomment if you are using online features
			// PrivateDependencyModuleNames.Add("OnlineSubsystem");
			// if ((Target.Platform == UnrealTargetPlatform.Win32) || (Target.Platform == UnrealTargetPlatform.Win64))
			// {
			//		if (UEBuildConfiguration.bCompileSteamOSS == true)
			//		{
			//			DynamicallyLoadedModuleNames.Add("OnlineSubsystemSteam");
			//		}
			// }
		}
	}


