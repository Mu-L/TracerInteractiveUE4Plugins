Availability: Public
Title:3. Create Menu Widget Blueprints
Crumbs:%ROOT%, Programming, Programming/Tutorials, Programming/Tutorials/UMG
Description:Create widget blueprints to be used as menu screens.
version:4.14

[VAR:Steps]
[OBJECT:Navigation]
	[PARAM:previous]
		[Previous Step](Programming\Tutorials\UMG\2 "%Programming\Tutorials\UMG\2:title%")
	[/PARAM]
	[PARAM:current]
	[/PARAM]
	[PARAM:home]
		[](Programming\Tutorials\UMG)
	[/PARAM]
	[PARAM:next]
		[Next Step](Programming\Tutorials\UMG\4 "%Programming\Tutorials\UMG\4:title%")
	[/PARAM]
[/OBJECT]
[/VAR]




1. In **Unreal Editor**, we can press the **Compile** button to build our new code. This will allow us to use **User Widgets** as menus.

	[![](CompileFromEditor.png)](CompileFromEditor.png)

1. We will now create the User Widgets that our **GameMode** will use as menus. This is done with the **Add New** button in the **Content Browser**. The **Widget Blueprint** class is found in the **User Interface** category. We need to create two of these, one named MainMenu and one named NewGameMenu. Our game will begin at the Main Menu, and will have an option to proceed to the New Game Menu.

	[![](CreateWidgetBP.png)](CreateWidgetBP.png)

1. Double-clicking the MainMenu **Widget** we've just created will take us to the **Blueprint Designer**, where we can create our menu layout.

1. Let's drag a **Button** and a **Text** from the **Common** section of the **Palette Panel** to the **Graph**. This Button will eventually be used to open the New Game Menu.

	[![](AddButtonAndTextBlock.png)](AddButton.png)

1. The first step in making our layout look right is to adjust the location and size of our Button. We should make the following changes:
	* Set the size to 200x200.
	* Set the position to (200, 100).
	* Rename it NewGameButton, just to make it easier to recoginze when we hook up functionality to it later on.

	[![](ButtonDetails.png)](ButtonDetails.png)

1. Since we're not drawing a custom set of images for the Button, we can label it by dragging and dropping the Text Block onto it and making the following changes:
	* Set the text to say New Game.
	* Change the Visibility to Hit Test Invisible. This will prevent the Text Block from intercepting mouse-clicks that are intended for the Button underneath.
	* Set the name to NewGameText. This is not needed, but it's a good habit.

	[![](TextBlockDetails.png)](TextBlockDetails.png)

1. Next, we'll want to make a "Quit" feature with a second Button and Text Block. Set those up in the same way as the New Game Button and Text Block except the following changes.
	* Set the name of the Button to QuitButton
	* Set the position of the button to 600, 100
	* Set the name of the Text Block to QuitText

1. After that, we can add **Events** to our Buttons so that we can run code when a Button is clicked. This is done by locating and pressing the + next to the appropriate Event name in the **Details Panel**. In this case, **OnClicked** is the event we want to use. Create this event for both the NewGameButton amd QuitButton Widgets.

	[![](CreateOnClickedEvent.png)](CreateOnClickedEvent.png)

	[REGION:note]Designers can build functionality with **Blueprint** scripting here, or C++ programmers can connect nodes that call exposed functions.[/REGION]

1. For the Event called **OnClicked(NewGameButton)**, we'll want to:
	* Connect a **ChangeMenuWidget** node to use the function we added to our GameMode earlier.
	* Set the **New Widget Class** field on the **ChangeMenuWidget** node to the NewGameMenu asset.

	[![](OnClicked_NewGame.png)](OnClicked_NewGame.png)

1. For the **OnClicked(QuitButton)** Event, we'll want to:
	* Connect a **Quit Game** node.

	[![](OnClicked_Quit.png)](OnClicked_Quit.png)


----

With our main menu built, we can set up a GameMode asset that will load it as soon as the level starts.

## Finished Code

**HowTo_UMG.Build.cs**

	// Copyright 1998-2018 Epic Games, Inc. All Rights Reserved.

	using UnrealBuildTool;

	public class HowTo_UMG : ModuleRules
	{
		public HowTo_UMG(TargetInfo Target)
		{
			PublicDependencyModuleNames.AddRange(new string[] { "Core", "CoreUObject", "Engine", "InputCore", "UMG" });

			//PrivateDependencyModuleNames.AddRange(new string[] {  });

			// Uncomment if you are using Slate UI
			PrivateDependencyModuleNames.AddRange(new string[] { "Slate", "SlateCore" });
		
			// Uncomment if you are using online features
			// PrivateDependencyModuleNames.Add("OnlineSubsystem");
			// if ((Target.Platform == UnrealTargetPlatform.Win32) || (Target.Platform == UnrealTargetPlatform.Win64))
			// {
			//		if (UEBuildConfiguration.bCompileSteamOSS == true)
			//		{
			//			DynamicallyLoadedModuleNames.Add("OnlineSubsystemSteam");
			//		}
			// }
		}
	}

**HowTo_UMGGameMode.h**

	// Copyright 1998-2018 Epic Games, Inc. All Rights Reserved.

	#pragma once

	#include "Blueprint/UserWidget.h"
	#include "GameFramework/GameModeBase.h"
	#include "HowTo_UMGGameMode.generated.h"

	/**
		* 
		*/
	UCLASS()
	class HOWTO_UMG_API AHowTo_UMGGameMode : public AGameModeBase
	{
		GENERATED_BODY()

	public:
		/** Remove the current menu widget and create a new one from the specified class, if provided. */
		UFUNCTION(BlueprintCallable, Category = "UMG Game")
		void ChangeMenuWidget(TSubclassOf<UUserWidget> NewWidgetClass);

	protected:
		/** Called when the game starts. */
		virtual void BeginPlay() override;

		/** The widget class we will use as our menu when the game starts. */
		UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = "UMG Game")
		TSubclassOf<UUserWidget> StartingWidgetClass;

		/** The widget instance that we are using as our menu. */
		UPROPERTY()
		UUserWidget* CurrentWidget;
	};

**HowTo_UMGGameMode.cpp**

	// Copyright 1998-2018 Epic Games, Inc. All Rights Reserved.

	#include "HowTo_UMG.h"
	#include "HowTo_UMGGameMode.h"

	void AHowTo_UMGGameMode::BeginPlay()
	{
		Super::BeginPlay();
		ChangeMenuWidget(StartingWidgetClass);
	}

	void AHowTo_UMGGameMode::ChangeMenuWidget(TSubclassOf<UUserWidget> NewWidgetClass)
	{
		if (CurrentWidget != nullptr)
		{
			CurrentWidget->RemoveFromViewport();
			CurrentWidget = nullptr;
		}
		if (NewWidgetClass != nullptr)
		{
			CurrentWidget = CreateWidget<UUserWidget>(GetWorld(), NewWidgetClass);
			if (CurrentWidget != nullptr)
			{
				CurrentWidget->AddToViewport();
			}
		}
	}

**HowTo_UMGPlayerController.h**

	// Copyright 1998-2018 Epic Games, Inc. All Rights Reserved.

	#pragma once

	#include "GameFramework/PlayerController.h"
	#include "HowTo_UMGPlayerController.generated.h"

	/**
		* 
		*/
	UCLASS()
	class HOWTO_UMG_API AHowTo_UMGPlayerController : public APlayerController
	{
		GENERATED_BODY()
				
	public:
		virtual void BeginPlay() override;
	};

**HowTo_UMGPlayerController.cpp**

	// Copyright 1998-2018 Epic Games, Inc. All Rights Reserved.

	#include "HowTo_UMG.h"
	#include "HowTo_UMGPlayerController.h"

	void AHowTo_UMGPlayerController::BeginPlay()
	{
		Super::BeginPlay();
		SetInputMode(FInputModeGameAndUI());
	}



