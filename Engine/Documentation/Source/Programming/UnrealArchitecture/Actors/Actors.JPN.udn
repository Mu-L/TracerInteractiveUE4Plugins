INTSourceChangelist:3782314
Availability:Public
Title:アクタ
Crumbs:%ROOT%, Programming, Programming/UnrealArchitecture
Description:基本的なゲームプレイ要素であるアクタとオブジェクトの説明
version:4.11

[TOC (start:2 end:3)]


[COMMENT:none]
 アクタはワールドに配置または [スポーン](Programming\UnrealArchitecture\Actors\Spawning) することができるオブジェクトです。アクタを一言で表現すると、「ティックするコンポーネント コレクション」でしょう。実際、アクタはインクルードされたすべての変数や関数に対し `Actor.h` をチェックアウトして、 
様々な事ができます。 

[/COMMENT]

[EXCERPT:Actors]
[INCLUDE:Shared/Glossary/A#glossary_actor] アクタにトランスフォーム (位置、回転、スケール) データは直接含まれません。アクタのルート コンポーネントのトランスフォーム データがある場合は、それが使われます。

[/EXCERPT:Actors]

##アクタの作成

`AActor` クラスのインスタンスの新規作成を、**スポーンする** といいます。スポーンは、一般的な `SpawnActor()` 関数、あるいは特別にテンプレート化されたものを使って行います。

ゲームプレイ用に `AActor` クラスのインスタンスを作成する様々な方法については、[](Programming/UnrealArchitecture/Actors/Spawning) をご覧ください。


## コンポーネント

**アクタ** はある意味、[コンポーネント](Programming/UnrealArchitecture/Actors/Components) と呼ばれる特別なタイプの **オブジェクト** を保持するコンテナとして考えられます。様々なタイプのコンポーネントを使って、 
アクタの移動、レンダリング方法を制御することができます。アクタのその他の主要な機能は、 
ゲーム中にネットワーク上でプロパティと関数コールを [レプリケーション](#レプリケーション) することです。

コンポーネントは作成されると、それに含まれるアクタと関連づけられます。

コンポーネント タイプをいくつか紹介します。

$ UActorComponent :これは基本のコンポーネントです。アクタの一部として含まれます。必要であれば、[ティック](#Ticking) することもできます。ActorComponents は特定のアクタに関連づいていますが、ワールドでは特定の位置に存在しているわけではありません。一般的には、AI やプレイヤー入力のインタープリットなど、概念的な機能に使われます。

$ USceneComponent :このコンポーネントはトランスフォームをもつ ActorComponents です。トランスフォームとは、位置、回転、スケールで定義されるワールド内の位置のことです。SceneComponents は、階層的にお互いをアタッチすることができます。階層のルートである SceneComponent を元にアクタの位置、回転、スケールを行います。

$ UPrimitiveComponent :このコンポーネントは、何種類かのグラフィックス (メッシュ、パーティクル システムなど) をもつ SceneComponents です。ここで、物理とコリジョンにいろいろな設定ができます。

アクタは SceneComponents の階層をもつようにサポートされています。それぞれのアクタ には、どのコンポーネントが アクタ のルートの役割をするのかを指定する `RootComponent` プロパティがあります。アクタ 自体はトランスフォームを持たないので、 
位置、回転、スケールはありません。その代わり、アクタはコンポーネント、具体的には ルート コンポーネントのトランスフォームに依存します。このコンポーネントが **SceneComponent** の場合、 
アクタにトランスフォーム情報を与えます。これがないと、アクタはトランスフォームを持ちません。その他のアタッチされたコンポーネントは、アタッチ先のコンポーネントに関連しタトランスフォームを持ちます。 

アクタと階層の例は、以下のようになります。

| GoldPickup アクタ | 階層 | 
| ------------------| -----------|
| ![](GoldPickupExampleActor.png)(w:400) | [INCLUDE:#goldhierarchy] | 

[COMMENT:none]

[EXCERPT:GoldHierarchy]
* **Root - SceneComponent**:ワールドにアクタの基本位置を設定するための基本的なシーン コンポーネント
	* **StaticMeshComponent**:金鉱を表すメッシュ 
		* **ParticleSystemComponent**:金鉱にアタッチされたキラキラ光るパーティクル エミッタ
		* **AudioComponent**:金鉱にアタッチされたループするメタルの鐘の音
		* **BoxComponent**:オーバーラップ イベントがゴールドを広いあげるトリガーとして使うコリジョン ボックス 
[/EXCERPT:GoldHierarchy]

詳細は、 [](Programming/UnrealArchitecture/Actors/Components) を参照してください。

[/COMMENT]

## ティック

(#Ticking) [ティック](Programming/UnrealArchitecture/Actors/Ticking) は、アンリアル エンジンでオブジェクトがどのようにアップデートされたかを表します。すべてアクタには、各フレームでティックあるいは最低限、ユーザー定義の間隔でティックする機能があり、必要な更新の計算やアクションを行うことができます。

アクタ はすべて、`TickActor()` 関数を使ってデフォルトでティックされた状態にすることができます。

**ActorComponent** もデフォルトで更新をかけることができます。ただし、これを行うには  `TickComponent()` 関数を使用します。詳細については、 
詳細は、[更新](Programming/UnrealArchitecture/Actors/Components#更新) を参照してください。


## ライフサイクル

アクタの作成方法およびゲームからの削除方法については、[アクタのライフサイクル](Programming/UnrealArchitecture/Actors/ActorLifecycle) をご覧ください。


## レプリケーション

(#Replication) **レプリケーション** は、ネットワーク経由のマルチプレイヤー ゲームを処理する際に、アクタをワールドに同期して維持するために使います。プロパティ値と関数コールは両方ともレプリケートが可能なので、 
全てのクライアント上のゲームのステートを完全に制御することができます。

## アクタを破壊する

ワールド オブジェクトがアクタ リファレンスのリストを保有しているので、アクタは一般的にガーベジ コレクションではありません。アクタは `Destroy()` を呼び出すことにより、明確に破壊することができます。アクタは破壊されると、レベルから削除され、「キルの保留状態」としてマークされます。 
つまり、次のガーベジ コレクション上で整理されるまで、そこに残されることを意味します。

