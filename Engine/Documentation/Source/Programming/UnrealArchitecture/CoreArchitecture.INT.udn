Availability: Public
Title: Unreal Architecture
Description: Explanations of the basic gameplay elements, Actors and Objects.
Version: 4.9
Parent: Programming
Order: 20


[TOC (start:2 end:4)]

The goal of this document is to provide a brief tour of the engine's core features and introduce some of the core architectural concepts to help you get started with the codebase.

## UObjects and Actors

[Actors](Programming/UnrealArchitecture/Actors) are instances of classes that derive from the [](API:AActor) class; the base class of all gameplay objects that can be placed into the world. [Objects](Programming/UnrealArchitecture/Objects) are instances of classes that inherit from the [](API:UObject) class; the base class of all objects in Unreal Engine, including Actors. So, in reality, all instances in Unreal Engine are Objects; however, the term **Actors** is commonly used to refer to instances of classes that derive from [](API:AActor) in their hierarchy, while the term Objects is used to refer to instances of classes that do not inherit from the [](API:AActor) class. The majority of the classes you create will inherit from [](API:AActor) at some point in their hierarchy.

In general, Actors can be thought of as whole items or entities, while Objects are more specialized parts. Actors often make use of [Components](Programming/UnrealArchitecture/Actors/Components), which are specialized Objects, to define certain aspects of their functionality or hold values for a collection of properties. Take a car as an example. The car as a whole is an Actor, whereas the parts of the car, like the wheels and doors, would all be Components of that Actor.

### Gameplay Framework Classes

[INCLUDE:Gameplay/Framework/QuickReference(offset:2)]

To get started with programming in UE4, check out our [Programming Quick Start](Programming/QuickStart) and our other [C++ Programming Tutorials](Programming/Tutorials).
