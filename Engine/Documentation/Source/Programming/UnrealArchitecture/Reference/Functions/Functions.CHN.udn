INTSourceChangelist:2709333
Availability:Public
Title:函数
Crumbs:%ROOT%, Programming, Programming/UnrealArchitecture/Reference
Description:创建和实现游戏性类函数的参考。
Version:4.9

[TOC(start:2)]

## 函数声明

**函数** 可以两种基本形式存在：普通 C++ 函数或 `UFunction`。C++ 函数和 `UFunction` 均在 `.h` 类头文件中进行声明。C++ 函数通过标准 C++ 语法进行声明。`UFunctions` 使用的是一种专用的语法，声明中将使用 [函数说明符](#FunctionSpecifiers) 来说明函数的额外信息。

	UFUNCTION([specifier, specifier, ...], [meta(key=value, key=value, ...)])
	ReturnType FunctionName([Parameter, Parameter, ...])

`UFunctions` 行为与 C++ 函数相同。C++ 函数中拥有一个 C++ 实现，可从 C++ 代码中进行调用，并可包含对其他 C++ 函数的调用或在它们的函数主体中对 `UFunctions` 的调用。然而 `UFunctions` 在一些地方存在不同。例如，它们可从 [蓝图可视化脚本编辑](Engine/Blueprints) 系统中被调用或覆写。任何使用 `BlueprintCallable`、`BlueprintImplementableEvent` 或 `BlueprintPure` 说明符（在下方的 [函数说明符](#FunctionSpecifiers) 中了解更多细节）进行声明的 `UFunction` 均会被公开到蓝图。`UFunctions` 也可在类的默认属性中作为委托进行指定。此技术常用于将输入行为或坐标轴与 `Input` 类中的函数结合起来。`UFunctions` 还用作复制回呼。意味着与其相关的变量发生变化并沿网络复制时，`UFunction` 将被调用。`UFunctions` 还是唯一一种可作为 exec 函数进行声明的函数类型，玩家可在游戏进行时通过游戏内控制台对其进行调用。

(#FunctionSpecifiers)
### 函数说明符

[INCLUDE:Programming/UnrealArchitecture/Reference/Functions/Specifiers#main(offset:2)]

### 函数参数说明符

$ Out : 
声明由引用传递的参数，使函数对其进行修改。		
$ Optional : 
通过任选关键词可使部分函数参数变为任选，便于调用。任选参数的数值（调用方未指定）取决于函数。例如，`SpawnActor` 函数使用任选位置和旋转，默认为生成的 Actor 根组件的位置和旋转。添加 `= [value]` 参数可指定任选参数的默认值。例如：`function myFunc(optional int x = -1)`。在多数情况下，如无数值被传递到任选参数，将使用变量类型的默认值或零（例如 0、false、""、none）。


## 函数实现

类头文件中声明的函数在类源文件中获得定义。 

## 委托

[INCLUDE:Programming/UnrealArchitecture/Delegates#Overview]

在 [](Programming/UnrealArchitecture/Delegates) 页面中查看参考和使用信息。

## 定时器

[INCLUDE:Programming/UnrealArchitecture/Timers#Overview]

在 [](Programming\UnrealArchitecture\Timers) 页面中查看参考和使用信息。
