INTSourceChangelist:3108692
Availability:Public
Title:関数
Parent: Programming/UnrealArchitecture/Reference
Description:ゲームプレイクラスの関数の作成および実装に関するリファレンス
Version:4.9

[TOC(start:2)]

## 関数の宣言

**関数** は、一般的な C++ 関数または `UFunction` という、 2 つの基本的な形式をとります。C++ 関数も `UFunctions` も `.h` クラス ヘッダ ファイルで宣言されます。C++ 関数は、関数の宣言に標準の C++ 記法を使います。 
`UFunctions` は、 [関数指定子](#関数指定子) を使って 
関数に関する追加情報を宣言で指定できるようにする特別な記法を使用します。

	UFUNCTION([specifier, specifier, ...], [meta(key=value, key=value, ...)])
	ReturnType FunctionName([Parameter, Parameter, ...])

`UFunctions` は C++ 実装があり、C++ コード内から呼び出すことができ、関数ボディに他の C++ 関数や `UFunctions` への呼び出しを含むことができるという点では C++ 関数と同じように機能します。 
ただし、 `UFunctions` には異なる部分もあります。例えば、 `UFunctions` は [ブループリント ビジュアル スクリプティング](Engine/Blueprints) システムからの呼び出しやオーバーライドが可能です。`BlueprintCallable` 、 
`BlueprintCallable` 、 `BlueprintImplementableEvent` 、 `BlueprintPure` の指定子 (詳細は後述の [関数指定子](#関数指定子) を参照) を使って宣言された `UFunction` はブループリントに公開されます。 
`UFunction` はクラスのデフォルト プロパティ内のデリゲートとして割り当てることも可能です。この技術は一般的に、入力動作あるいは入力軸を `Input` クラスの関数へバインドするために広く使用されます。
 `UFunction` はレプリケーション コールバックとしても使用されます。つまり、関連している変数が変更すると `UFunction` が呼び出され、ネットワーク全体にレプリケートされます。 
 `UFunction` はまた、実行関数として宣言し、プレイ中にインゲームのコンソールからプレイヤーから呼び出すことができる唯一の関数タイプでもあります。


### 関数指定子

[INCLUDE:Programming/UnrealArchitecture/Reference/Functions/Specifiers#main(offset:2)]

### 関数パラメータ指定子

$ Out : 
パラメータを参照渡しとして宣言することで、関数による修正を可能にします。		
$ Optional : 
任意のキーワードを使えば、呼び出し元が使いやすいように、ある関数パラメータを任意にすることができます。呼び出し元が指定しない任意のパラメータの値は関数によって異なります。 
例えば、 `SpawnActor` 関数は任意の位置と回転を取りますが、デフォルトでそれがスポーンしているアクタのルート コンポーネントの位置と回転になります。任意の引数のデフォルト値は 
`= [value]` を追加することにより指定できます。例えば、 `function myFunc(optional int x = -1)` です。任意のパラメータへ何も値が渡されない場合は、変数タイプのデフォルト値またはゼロ (0 、 false 、 "" 、 none)  
を使用するケースがほとんどです。


## 関数の実装

クラス ヘッダ ファイルで宣言された関数は、クラス ソース ファイルで定義を与えられます。 

## デリゲート

[INCLUDE:Programming/UnrealArchitecture/Delegates#Overview]

リファレンスおよび使用方法に関する情報は [](Programming/UnrealArchitecture/Delegates) をご覧ください。

## タイマー

[INCLUDE:Programming/UnrealArchitecture/Timers#Overview]

リファレンスおよび使用方法に関する情報は [](Programming\UnrealArchitecture\Timers) をご覧ください。
