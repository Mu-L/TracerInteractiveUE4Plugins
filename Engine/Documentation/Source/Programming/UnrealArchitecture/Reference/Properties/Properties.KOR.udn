INTSourceChangelist:6411486
Availability:Public
Title: 프로퍼티
Crumbs:%ROOT%, Programming, Programming/UnrealArchitecture/Reference
Description:게임플레이 클래스에 대한 프로퍼티 생성 및 구현 관련 레퍼런스입니다.
type:reference
skilllevel:beginner
parent:Programming/UnrealArchitecture
Version: 4.16
tags:variable
tags:UPROPERTY
tags:UENUM
tags:enum
tags:bitmask
tags:bitfield

## 프로퍼티 선언

프로퍼티는 표준 C++ 변수 문법, 즉 앞에 UPROPERTY 매크로에 프로퍼티 메타데이터와 변수 지정자를 붙여 선언합니다.

	UPROPERTY([specifier, specifier, ...], [meta(key=value, key=value, ...)])
	Type VariableName;

## 코어 데이터 유형

### 정수형
정수 데이터 유형의 규칙은 "int" 나 "unit" 뒤에 크기를 비트 단위로 붙이는 것입니다.

| 변수 유형 | 설명 |
| ------------| -------------|
| **uint8**	 | 8-bit  unsigned|
| **uint16**	| 16-bit unsigned|
| **uint32**	| 32-bit unsigned|
| **uint64**	| 64-bit unsigned|
| **int8**	| 8-bit  signed|
| **int16**	| 16-bit signed|
| **int32**	| 32-bit signed|
| **int64** | 64-bit signed|

#### 비트마스크로
인티저 프로퍼티는 이제 에디터에 비트마스크로 노출시킬 수 있습니다. 인티저 프로퍼티를 비트마스크로 마킹하려면, 그냥 메타 섹션에 bitmask 를 추가하면 됩니다:

	UPROPERTY(EditAnywhere, Meta = (Bitmask))
	int32 BasicBits;

이 메타 태그를 추가하면 인티저는 일반적인 이름이 붙는 플래그 드롭다운 목록으로 표시되어, 개별적으로 켜고 끄는 식으로 
편집할 수 있습니다.

![](GenericBitmask.png)

비트플래그의 이름을 커스터마이징하기 위해서는 먼저, 반드시 bitflags 메타 태그를 붙여 UENUM 을 생성해야 합니다:

	UENUM(Meta = (Bitflags))
	enum class EColorBits
	{
		ECB_Red,
		ECB_Green,
		ECB_Blue
	};

이 UENUM 을 생성한 이후 BitmaskEnum 메타 태그로 참조할 수 있는데, 이런 식입니다:

	UPROPERTY(EditAnywhere, Meta = (Bitmask, BitmaskEnum = "EColorBits"))
	int32 ColorFlags;

이 변경 이후 드롭다운 박스에 나열되는 비트플래그는 열거된 클래스 항목의 이름과 값을 받습니다.위 예제에서 ECB_Red 
값은 0 으로, 체크하면 (ColorFlags 에 1 을 더해) 비트 0 이 가동된다는 뜻입니다. ECB_Green 은 (ColorFlags 에 2 를 더해) 비트 1 에 해당하며, ECB_Blue 
는 (ColorFlags 에 4 를 더해) 비트 2 가 됩니다.

![](CustomBitmask.png)

[REGION:note]열거된 유형은 32 개 항목 이상의 값을 가질 수 있지만, 처음 32 개의 값만 프로퍼티 에디터 UI 에 연결된 비트마스크에 보입니다. 
비슷하게, 명시된 값 항목을 받기는 하지만, 명시된 값이 0 과 31 사이가 아닌 항목은 드롭다운에 포함되지 않습니다.[/REGION]

### 부동 소수점 유형
언리얼은 표준 C++ 부동 소수점 유형인 float 와 double 을 사용합니다.

### 부울 유형
부울 유형은 C++ bool 키워드 또는 비트 필드로 나타낼 수 있습니다.

	uint32 bIsHungry : 1;
	bool bIsThirsty;

### 스트링
언리얼 엔진 4 는 세 가지 유형의 스트링을 지원합니다.
* FString 은 고정적인 "캐릭터 동적 배열" 스트링 유형입니다.
* FName 은 글로벌 스트링 테이블로 된 변경불능 대소문자 구분 없는 스트링에 대한 레퍼런스입니다. FString 보다 작아 전송에 효율적이나 조작하기가 더 어렵습니다.
* FText 는 현지화 처리를 위해 고안된 보다 탄탄한 스트링 표현입니다.

대부분의 경우, 언리얼은 캐릭터에 대해 TCHAR 유형에 의존합니다. TEXT() 매크로는 TCHAR 리터럴을 나타내는 데 사용할 수 있습니다.

	MyDogPtr->DogName = FName(TEXT("Samson Aloysius"));

세 가지 스트링 유형에 대해서, 언제 사용되고 어떻게 작업하는지 자세한 내용은, [스트링 처리 관련 문서](Programming/UnrealArchitecture/StringHandling) 를 참고해 주시기 바랍니다.

## 프로퍼티 지정자

[INCLUDE:Programming/UnrealArchitecture/Reference/Properties/Specifiers#main(offset:2)]

