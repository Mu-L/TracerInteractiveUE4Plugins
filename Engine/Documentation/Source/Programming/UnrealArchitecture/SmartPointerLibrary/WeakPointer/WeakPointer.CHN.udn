INTSourceChangelist:3681055
Availability:Public
Title:弱指针
Crumbs:%ROOT%, Programming, Programming/UnrealArchitecture/SmartPointerLibrary
Description:存储弱引用且不阻止其对象被销毁的智能指针。
Type:reference
Version: 4.9
Parent:Programming/UnrealArchitecture/SmartPointerLibrary
Order:
Tags:Programming

[TOC(start:2)]

**弱指针** 存储对对象的弱引用。与共享指针不同，弱指针不阻止对象被销毁。无论谁销毁了对象，只要其对象被销毁，弱指针都将自动清空，这使你能够安全缓存指向可变对象的指针。这也意味着，弱指针可能会意外清空，并且，你可以使用弱指针断开引用循环。

当不再存在对对象的共享引用时，弱指针的对象将被销毁。

弱指针有助于表明意图。当你在某个类中看到一个弱指针时，你就会明白该类仅缓存指向对象的指针，它并不控制它的生命周期。

(#declarationandinitialization)
## 声明和初始化

弱指针必定创建自共享指针/引用或其他弱指针。

	// 分配新的树节点。
	TSharedRef<FTreeNode> NodeOwner( new FTreeNode() );

	// 创建指向新树节点的弱指针。
	TWeakPtr<FTreenode> NodeObserver( NodeOwner );

记住，弱指针不阻止对象被销毁。如果NodeOwner在NodeObserver仍然在作用范围内时就被重置，对象将被删除：

	// 销毁节点。
	NodeOwner.Reset();

与共享指针相似，你可以随意复制弱指针。

	TWeakPtr<FTreeNode> NodeObserverB = NodeObserver;

使用完弱指针之后，你可以重置或重新指定它。

	NodeObserver = null;

(#dereferencingandaccessing)
## 取消引用和访问

要访问弱指针的对象，首先需要调用 **Pin()** 方法，将其提升为共享指针。

	// 通过弱指针访问节点。
	TSharedPtr<TFreeNode> LockedObserver( NodeObserver.Pin() );

	// 确保从弱引用成功创建了共享引用。
	If( LockedObserver.IsValid() )
	{
		// 对象仍然存在，可以访问它。
		LockedObserver->ListChildren();
	}

Pin()速度非常快。它之所以被叫做Pin，是因为在弱指针被临时访问时，它阻止对象被销毁。

当其对象被删除时，弱指针将自动获知，因此你可以通过使用IsValid()方法以安全的方式处理这些情况。

	// 请先确保弱指针的对象仍然存在，然后再访问它。
	if( NodeObserver.IsValid() )
	{
		...
	}

(#breakingcycleswithweakpointers)
## 使用弱指针断开循环

你可以使用弱指针断开循环：

	class FTreeNode
	{
		/** 子节点，所有者为此节点。*/
		TArray< TSharedPtr<FTreeNode> > Children;

		/** 指回此节点的父项的弱指针。*/
		TWeakPtr<FTreeNode> Parent;
	}

FTreeNode具有指向它 _拥有_ 的子节点的共享指针。这意味着，子节点将随它一起被销毁。子节点也使用弱指针来缓存对它的父节点的引用。而弱指针永不阻止对象被销毁。通过以这种方式使用共享指针/弱指针，权力链更加明显。

当其对象被删除时，弱指针会自动获知，因此你可以安全地缓存指向树中任意节点的指针。

(#conversion)
## 转换

你必须使用 **Pin()** 方法将弱指针转换为共享指针。没有显式构造函数。
