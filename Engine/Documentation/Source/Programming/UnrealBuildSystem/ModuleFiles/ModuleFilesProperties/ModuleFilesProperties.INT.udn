Availability: NoPublish
Title: Build Configuration Properties Page
Crumbs:
Description: This is a procedurally generated markdown page.
Version: 4.23

### Read/Write Properties
$ Type (ModuleType): Type of module

$ BinariesSubFolder (String): Subfolder of Binaries/PLATFORM folder to put this module in when building DLLs. This should only be used by modules that are found via searching like the TargetPlatform or ShaderFormat modules. If FindModules is not used to track them down, the modules will not be found.

$ OptimizeCode (CodeOptimization): When this module's code should be optimized.

$ PrivatePCHHeaderFile (String): Explicit private PCH for this module. Implies that this module will not use a shared PCH.

$ SharedPCHHeaderFile (String): Header file name for a shared PCH provided by this module.  Must be a valid relative path to a public C++ header file. This should only be set for header files that are included by a significant number of other C++ modules.

$ ShortName (String): Specifies an alternate name for intermediate directories and files for intermediates of this module. Useful when hitting path length limitations.

$ PCHUsage (PCHUsageMode): Precompiled header usage for this module

$ bTreatAsEngineModule (Boolean): Whether this module should be treated as an engine module (eg. using engine definitions, PCHs, compiled with optimizations enabled in DebugGame configurations, etc...). Initialized to a default based on the rules assembly it was created from.

$ bUseBackwardsCompatibleDefaults (Boolean): Whether to use backwards compatible defaults for this module. By default, engine modules always use the latest default settings, while project modules do not (to support an easier migration path).

$ bUseRTTI (Boolean): Use run time type information

$ bUseAVX (Boolean): Use AVX instructions

$ bEnableBufferSecurityChecks (Boolean): Enable buffer security checks.  This should usually be enabled as it prevents severe security risks.

$ bEnableExceptions (Boolean): Enable exception handling

$ bEnableObjCExceptions (Boolean): Enable objective C exception handling

$ bEnableShadowVariableWarnings (Boolean): Enable warnings for shadowed variables

$ bEnableUndefinedIdentifierWarnings (Boolean): Enable warnings for using undefined identifiers in #if expressions

$ bFasterWithoutUnity (Boolean): If true and unity builds are enabled, this module will build without unity.

$ MinSourceFilesForUnityBuildOverride (Int32): The number of source files in this module before unity build will be activated for that module.  If set to anything besides -1, will override the default setting which is controlled by MinGameModuleSourceFilesForUnityBuild

$ MinFilesUsingPrecompiledHeaderOverride (Int32): Overrides BuildConfiguration.MinFilesUsingPrecompiledHeader if non-zero.

$ bBuildLocallyWithSNDBS (Boolean): Module uses a #import so must be built locally when compiling with SN-DBS

$ IsRedistributableOverride (Nullable&lt;Boolean&gt;): Redistribution override flag for this module.

$ bOutputPubliclyDistributable (Boolean): Whether the output from this module can be publicly distributed, even if it has code/ dependencies on modules that are not (i.e. CarefullyRedist, NotForLicensees, NoRedist). This should be used when you plan to release binaries but not source.

$ WhitelistRestrictedFolders (List&lt;String&gt;): List of folders which are whitelisted to be referenced when compiling this binary, without propagating restricted folder names

$ bEnforceIWYU (Boolean): Enforce "include what you use" rules when PCHUsage is set to ExplicitOrSharedPCH; warns when monolithic headers (Engine.h, UnrealEd.h, etc...) are used, and checks that source files include their matching header first.

$ bAddDefaultIncludePaths (Boolean): Whether to add all the default include paths to the module (eg. the Source/Classes folder, subfolders under Source/Public).

$ bIgnoreUnresolvedSymbols (Boolean): Whether to ignore dangling (i.e. unresolved external) symbols in modules

$ bPrecompile (Boolean): Whether this module should be precompiled. Defaults to the bPrecompile flag from the target. Clear this flag to prevent a module being precompiled.

$ bUsePrecompiled (Boolean): Whether this module should use precompiled data. Always true for modules created from installed assemblies.

$ bAllowConfidentialPlatformDefines (Boolean): Whether this module can use PLATFORM_XXXX style defines, where XXXX is a confidential platform name. This is used to ensure engine or other shared code does not reveal confidential information inside an #if PLATFORM_XXXX block. Licensee game code may want to allow for them, however. Note: this is future looking, and previous confidential platforms (like PS4) are unlikely to be restricted

$ PublicIncludePathModuleNames (List&lt;String&gt;): List of modules names (no path needed) with header files that our module's public headers needs access to, but we don't need to "import" or link against.

$ PublicDependencyModuleNames (List&lt;String&gt;): List of public dependency module names (no path needed) (automatically does the private/public include). These are modules that are required by our public source files.

$ PrivateIncludePathModuleNames (List&lt;String&gt;): List of modules name (no path needed) with header files that our module's private code files needs access to, but we don't need to "import" or link against.

$ PrivateDependencyModuleNames (List&lt;String&gt;): List of private dependency module names.  These are modules that our private code depends on but nothing in our public include files depend on.

$ CircularlyReferencedDependentModules (List&lt;String&gt;): Only for legacy reason, should not be used in new code. List of module dependencies that should be treated as circular references.  This modules must have already been added to either the public or private dependent module list.

$ PublicSystemIncludePaths (List&lt;String&gt;): List of system/library include paths - typically used for External (third party) modules.  These are public stable header file directories that are not checked when resolving header dependencies.

$ PublicIncludePaths (List&lt;String&gt;): (This setting is currently not need as we discover all files from the 'Public' folder) List of all paths to include files that are exposed to other modules

$ PrivateIncludePaths (List&lt;String&gt;): List of all paths to this module's internal include files, not exposed to other modules (at least one include to the 'Private' path, more if we want to avoid relative paths)

$ PublicLibraryPaths (List&lt;String&gt;): List of system/library paths (directory of .lib files) - typically used for External (third party) modules

$ PrivateRuntimeLibraryPaths (List&lt;String&gt;): List of search paths for libraries at runtime (eg. .so files)

$ PublicRuntimeLibraryPaths (List&lt;String&gt;): List of search paths for libraries at runtime (eg. .so files)

$ PublicAdditionalLibraries (List&lt;String&gt;): List of additional libraries (names of the .lib files including extension) - typically used for External (third party) modules

$ PublicFrameworks (List&lt;String&gt;): List of XCode frameworks (iOS and MacOS)

$ PublicWeakFrameworks (List&lt;String&gt;): List of weak frameworks (for OS version transitions)

$ PublicAdditionalFrameworks (List&lt;Framework&gt;): List of addition frameworks - typically used for External (third party) modules on Mac and iOS

$ AdditionalBundleResources (List&lt;BundleResource&gt;): List of addition resources that should be copied to the app bundle for Mac or iOS

$ PublicAdditionalShadowFiles (List&lt;String&gt;): For builds that execute on a remote machine (e.g. iOS), this list contains additional files that need to be copied over in order for the app to link successfully.  Source/header files and PCHs are automatically copied.  Usually this is simply a list of precompiled third party library dependencies.

$ PublicDelayLoadDLLs (List&lt;String&gt;): List of delay load DLLs - typically used for External (third party) modules

$ PrivateDefinitions (List&lt;String&gt;): Private compiler definitions for this module

$ PublicDefinitions (List&lt;String&gt;): Public compiler definitions for this module

$ DynamicallyLoadedModuleNames (List&lt;String&gt;): Addition modules this module may require at run-time

$ RuntimeDependencies (RuntimeDependencyList): List of files which this module depends on at runtime. These files will be staged along with the target.

$ AdditionalPropertiesForReceipt (ReceiptPropertyList): List of additional properties to be added to the build receipt

$ PrecompileForTargets (PrecompileTargetsType): Which targets this module should be precompiled for

$ ExternalDependencies (List&lt;String&gt;): External files which invalidate the makefile if modified. Relative paths are resolved relative to the .build.cs file.

$ bRequiresImplementModule (Nullable&lt;Boolean&gt;): Whether this module requires the IMPLEMENT_MODULE macro to be implemented. Most UE4 modules require this, since we use the IMPLEMENT_MODULE macro to do other global overloads (eg. operator new/delete forwarding to GMalloc).

$ bLegacyPublicIncludePaths (Nullable&lt;Boolean&gt;): Whether this module qualifies included headers from other modules relative to the root of their 'Public' folder. This reduces the number of search paths that have to be passed to the compiler, improving performance and reducing the length of the compiler command line.

$ CppStandard (CppStandardVersion): Which stanard to use for compiling this module

$ ModuleSymbolVisibility (SymbolVisibility): Control visibility of symbols


