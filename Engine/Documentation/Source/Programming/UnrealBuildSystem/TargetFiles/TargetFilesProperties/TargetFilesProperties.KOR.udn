INTSourceChangelist:4241091
Availability: NoPublish
Title: 빌드 환경설정 페이지
Crumbs:
Description: 자동 생성되는 마크다운 페이지입니다.
Version: 4.21

### 읽기 전용 프로퍼티

$ Name (String): 이 타깃 이름입니다.

$ Platform (UnrealTargetPlatform): 이 타깃의 빌드 대상 플랫폼입니다.

$ Configuration (UnrealTargetConfiguration): 빌드 중인 구성입니다.

$ Architecture (String): 타깃의 빌드 대상 아키텍처입니다 (빈 스트링이면 기본값입니다).

$ ProjectFile (FileReference): 이 타깃이 들어있는 프로젝트에 대한 프로젝트 파일 경로입니다.

$ Version (ReadOnlyBuildVersion): The current build version


### 읽기/쓰기 프로퍼티
$ Type (TargetType): 타깃 유형입니다.

$ bUsesSteam (Boolean): 타깃의 Steam 사용 여부입니다.

$ bUsesCEF3 (Boolean): 타깃의 CEF3 사용 여부입니다.

$ bUsesSlate (Boolean): 프로젝트의 비주얼 Slate UI 사용 여부입니다 (로우 레벨 윈도잉/메시징과는 달리, 항상 사용 가능합니다).

$ bUseStaticCRT (Boolean): 정적 CRT 에 대해 강제 링크합니다. 전체 엔진에 걸쳐 완전히 지원되지는 않는데 (예로) 얼로케이터 구현을 공유해야 하기 때문입니다. 그리고 TPS 라이브러리가 서로 일관되어야 하지만, 유틸리티 프로그램용으로는 사용할 수 있습니다.

$ bDebugBuildsActuallyUseDebugCRT (Boolean): 디버그 빌드에 디버그 C++ 런타임 (CRT) 기능을 켭니다. 기본적으로는 항상 릴리즈 런타임을 사용하는데, 디버그 버전은 언리얼 엔진 프로젝트 디버깅 시 그다지 유용하지 않기 때문이며, 디버그 CRT 라이브러리에 대한 링크는 써드 파티 라이브러리 디펜던시 역시 디버그 CRT 를 사용하여 강제 컴파일되도록 하기 (그래서 종종 퍼포먼스가 느려지기) 때문입니다. 단순히 프로그램 코드 디버깅을 하기 위해 써드 파티 스태틱 라이브러리의 디버그 버전 사본이 별도로 필요하다면 종종 불편할 수 있습니다.

$ bOutputPubliclyDistributable (Boolean): 이 타깃에서의 출력에 (CarefullyRedist, NotForLicensees, NoRedist 등의) 특별 제한이 걸린 폴더에 있는 모듈의 종속성이 있다 할지라도 공개 배포 가능하도록 할지 여부입니다.

$ UndecoratedConfiguration (UnrealTargetConfiguration): 바이너리에 "-Platform-Configuration" 접미사가 필요치 않은 구성을 지정합니다.

$ bBuildAllPlugins (Boolean): 활성화되지 않았더라도 찾을 수 있는 모든 플러그인을 빌드합니다. UE4Editor 타깃을 빌드하면서 플러그인을 활성화시켜 실행시키는 콘텐츠 전용 프로젝트에 특히 유용합니다.

$ AdditionalPlugins (List&lt;String&gt;): 이 타깃에 포함시켜야 하는 부가 플러그인 목록입니다. 비활성화시킬 수 없는 최적이 아닌 플러그인 모듈 참조이 가능하며, ModuleHostType 범주에 맞지 않는 프로그램 타깃의 특정 모듈에 대해 빌드할 수 있습니다.

$ ExcludePlugins (List&lt;String&gt;): 이 타깃에서 제외시킬 플러그인 목록입니다. 참고로 프로젝트 파일에서 계속 참조할 수도 있으므로, 옵션 마킹해야 실행시간에 검색됩니다.

$ PakSigningKeysFile (String): 실행파일에 삽입할 pak 사이닝 키 세트 경로입니다.

$ SolutionDirectory (String): Program Target 이 자체 솔루션 폴더 경로를 지정할 수 있도록 합니다.

$ bBuildInSolutionByDefault (Nullable&lt;Boolean&gt;): 타깃을 기본 솔루션 빌드 구성에 포함시킬지 여부입니다.

$ bOutputToEngineBinaries (Boolean): 실행파일을 엔진 binaries 폴더에 출력합니다.

$ bShouldCompileAsDLL (Boolean): 이 타깃을 DLL 로 컴파일할지 여부입니다. LinkType 을 TargetLinkType.Monolithic 으로 설정해야 합니다.

$ ExeBinariesSubFolder (String): 실행파일을 넣을 하위 폴더로, 기본 위치 기준 상대 경로입니다.

$ GeneratedCodeVersion (EGeneratedCodeVersion): 타깃 모듈이 UHT 코드 생성 버전을 덮어쓸 수 있도록 합니다.

$ bCompilePhysX (Boolean): PhysX 지원 포함 여부입니다.

$ bCompileAPEX (Boolean): PhysX APEX 지원 포함 여부입니다.

$ bCompileNvCloth (Boolean): NvCloth 포함 여부입니다.

$ bCompileICU (Boolean): Core 의 ICU 유니코드/i18n 지원 여부입니다.

$ bCompileCEF3 (Boolean): CEF3 지원 컴파일 여부입니다.

$ bBuildEditor (Boolean): 에디터 컴파일 여부입니다. 데스크톱 플랫폼만 (Windows 또는 Mac) 이를 사용하며, 다른 플랫폼에서는 강제 false 설정됩니다.

$ bBuildRequiresCookedData (Boolean): 애셋 빌드 관련 코드 컴파일 여부입니다. 콘솔은 보통 애셋을 빌드할 수 없습니다. 데스크톱 플랫폼은 보통 할 수 있습니다.

$ bBuildWithEditorOnlyData (Boolean): WITH_EDITORONLY_DATA 비활성화된 것의 컴파일 여부입니다. Windows에서만 이를 사용하며, 다른 플랫폼에서는 강제로 false 설정됩니다.

$ bBuildDeveloperTools (Boolean): 개발자 툴 컴파일 여부입니다.

$ bForceBuildTargetPlatforms (Boolean): 정상적으로는 빌드되지 않을 타깃 플랫폼 모듈의 강제 컴파일 여부입니다.

$ bForceBuildShaderFormats (Boolean): 정상적으로는 빌드되지 않을 셰이더 포맷 모듈의 강제 컴파일 여부입니다.

$ bCompileSimplygon (Boolean): 심플리곤 지원 컴파일 여부입니다.

$ bCompileSimplygonSSF (Boolean): 심플리곤의 SSF 라이브러리 지원 컴파일 여부입니다.

$ bCompileLeanAndMeanUE (Boolean): UE 의 lean and mean 버전 컴파일 여부입니다.

$ bUseCacheFreedOSAllocs (Boolean): MallocBinned 로 캐시 프리 OS 할당을 활용할지 여부입니다.

$ bCompileAgainstEngine (Boolean): 엔진 프로젝트를 포함하는 모든 빌드에 대해 활성화됩니다. Core 하고만 링크되는 독립형 앱 빌드시에만 비활성화됩니다.

$ bCompileAgainstCoreUObject (Boolean): CoreUObject 프로젝트를 포함하는 모든 빌드에 대해 활성화됩니다. Core 하고만 링크되는 독립형 앱 빌드시에만 비활성화됩니다.

$ bIncludeADO (Boolean): true 면 코어의 ADO 데이터베이스 지원을 포함합니다.

$ bCompileRecast (Boolean): Recast 내비메시 생성 컴파일 여부입니다.

$ bCompileSpeedTree (Boolean): SpeedTree 지원 컴파일 여부입니다.

$ bForceEnableExceptions (Boolean): 모든 모듈에 대한 예외를 활성화시킵니다.

$ bUseInlining (Boolean): 모든 모듈에 대한 인라인을 활성화시킵니다.

$ bForceEnableObjCExceptions (Boolean): 모든 모듈에 대한 예외를 활성화시킵니다.

$ bForceEnableRTTI (Boolean): 모든 모듈에 대한 RTTI 를 활성화시킵니다.

$ bWithServerCode (Boolean): 서버 전용 코드를 컴파일합니다.

$ bCompileWithStatsWithoutEngine (Boolean): 엔진 없이도 통계 지원 포함 여부입니다.

$ bCompileWithPluginSupport (Boolean): 플러그인 지원 포함 여부입니다.

$ bIncludePluginsForTargetPlatforms (Boolean): 모든 타깃 플랫폼을 지원하는 플러그인 허용 여부입니다.

$ bWithPerfCounters (Boolean): PerfCounters 지원 포함 여부입니다.

$ bUseLoggingInShipping (Boolean): test/shipping 빌드에 대한 로그 활성화 여부입니다.

$ bLoggingToMemoryEnabled (Boolean): test/shipping 빌드에 대한 메모리에 로깅 활성화 여부입니다.

$ bUseLauncherChecks (Boolean): 프로세스가 외부 런처를 통해 실행되었나 검사할지 여부입니다.

$ bUseChecksInShipping (Boolean): test/shipping 빌드에 대해 체크 (또는 어서트) 활성화 여부입니다.

$ bCompileFreeType (Boolean): FreeType 지원이 필요한 true 입니다.

$ bCompileForSize (Boolean): 속도보다 크기 최적화가 좋은 경우 true 입니다.

$ bForceCompileDevelopmentAutomationTests (Boolean): 개발 자동화 테스트 컴파일 여부입니다.

$ bForceCompilePerformanceAutomationTests (Boolean): 퍼포먼스 자동화 테스트 컴파일 여부입니다.

$ bEventDrivenLoader (Boolean): true 면 쿠킹된 빌드에 이벤트 주도 로더가 사용됩니다. @todoio 비동기 로딩 리팩터 이후 런타임 솔루션으로 대체시켜 줘야 합니다.

$ bUseXGEController (Boolean): XGE 컨트롤러 워커와 모듈을 엔진 빌드에 포함시킬지 여부입니다. XGE 인터셉션 인터페이스를 사용하는 분산 셰이더 컴파일에 필수입니다.

$ bUseBackwardsCompatibleDefaults (Boolean): 이 모듈에 하위 호환 기본값 사용 여부입니다. 기본적으로, 엔진 모듈은 항상 최신 기본 세팅을 사용하는 반면, 프로젝트 모듈은 그렇지 않습니다 (손쉬운 이주 방식을 지원하기 위해서입니다).

$ bIWYU (Boolean): 이 타깃의 모듈에 대해 "include what you use" (사용한 것만 포함시키는) 기능을 기본 활성화시킵니다. 이 프로젝트 내 모듈의 기본 PCH 모드를 PCHUsageModule.UseExplicitOrSharedPCHs 로 변경합니다.

$ bEnforceIWYU (Boolean): "include what you use" 규칙을 적용합니다. 모노리식 헤더(Engine.h, UnrealEd.h ...)가 사용되면 경고를 내며, 소스 파일이 일치하는 헤더를 먼저 포함하는지 검사합니다.

$ bHasExports (Boolean): 최종 실행파일의 심볼 익스포트 여부입니다.

$ bPrecompile (Boolean): 모든 엔진 모듈에 대한 스태틱 라이브러리를 이 타깃에 대한 중개 파일로 만듭니다.

$ bUsePrecompiled (Boolean): 이 타깃의 모든 엔진 모듈에 대해 기존 스태틱 라이브러리를 사용합니다.

$ bEnableOSX109Support (Boolean): OS X 10.9 Mavericks 에 대한 지원 포함 컴파일 여부입니다. 이 버전의 OS X 와 호환되어야 하는 툴에 사용됩니다.

$ bIsBuildingConsoleApplication (Boolean): 이것이 빌드 대상 콘솔 어플리케이션인 경우 true 입니다.

$ bDisableSymbolCache (Boolean): 생성되지 않아야 하는 플랫폼에 대해 디버그 심볼이 캐시된 경우 true 입니다.

$ bUseUnityBuild (Boolean): 보다 빠른 컴파일을 위해 C++ 코드를 커다란 파일로 통합시킬지 여부입니다.

$ bForceUnityBuild (Boolean): 보다 빠른 컴파일을 위해 C++ 소스 파일을 보다 큰 파일로 강제 합칠지 여부입니다.

$ bUseAdaptiveUnityBuild (Boolean): 휴리스틱 기법을 사용하여 현재 반복처리 대상인 파일을 알아낸 뒤 유니티 블롭에서 제외시켜, 점증적 컴파일 시간을 빠르게 합니다. 현재 구현은 변경중인 파일은 소스 컨트롤 시스템이 쓰기가능으로 만든다 가정하고, 읽기전용 플래그로 작업 세트를 구분합니다. Perforce 에는 맞지만, Git 에는 아닙니다.

$ bAdaptiveUnityDisablesOptimizations (Boolean): 적응형 논-유니티 작업 세트에 있는 파일에 대한 최적화를 비활성화시킵니다.

$ bAdaptiveUnityDisablesPCH (Boolean): 적응형 논-유니티 작업 세트에 있는 파일에 대한 강제 포함 PCH 를 비활성화시킵니다.

$ MinGameModuleSourceFilesForUnityBuild (Int32): 게임 모듈에 소스 파일 수가 이 이상 되면 해당 모듈에 대해 유니티 빌드가 가동됩니다. 작은 게임 모듈의 경우 풀 리빌드 시간이 느려지는 대신 단일 파일에 대한 반복처리형 컴파일 시간이 빨라집니다. 이 세팅은 모듈의 Build.cs 파일에서 bFasterWithoutUnity 옵션으로 덮어쓸 수 있습니다.

$ bShadowVariableErrors (Boolean): 섀도우 변수 경고를 지원하는 플랫폼에서 오류로 강제 취급합니다.

$ bUndefinedIdentifierErrors (Boolean): 조건절에서 미정의 식별자를 사용하는 것을 강제로 오류로 취급합니다.

$ bUseFastMonoCalls (Boolean): 새로운 Monolithic Graphics 드라이버에 옵션 "fast calls" 가 다양한 D3d 함수를 대체하도록 합니다.

$ bUseFastSemanticsRenderContexts (Boolean): 새로운 Xbox 드라이버가 "fast semantics" 컨텍스트 타입을 지원합니다. 이는 즉시 및 디퍼드 컨텍스트에 켜집니다. 렌더링 이슈가 있거나 Xbox RHI 에 크래시가 발생하는 경우 꺼 보세요.

$ NumIncludedBytesPerUnityCPP (Int32): 단일 통합 C++ 파일에 포함용 타깃으로 삼을 C++ 코드 바이트 수 추정치입니다.

$ bStressTestUnity (Boolean): 단일 통합 파일에서 프로젝트의 모든 C++ 파일을 포함시켜 C++ 유니티 빌드 안전성 스트레트 테스트를 할지 여부입니다.

$ bForceDebugInfo (Boolean): 디버그 정보 강제 생성 여부입니다.

$ bDisableDebugInfo (Boolean): 디버그 정보 생성을 글로벌로 비활성화시킬지 여부입니다. 구성별 및 플랫폼별 옵션은 DebugInfoHeuristics.cs 를 참고하세요.

$ bDisableDebugInfoForGeneratedCode (Boolean): generated 파일에 대해 디버그 정보 생성 비활성화 여부입니다. generated glue 코드가 많이 있는 모듈의 링크 시간이 개선됩니다.

$ bOmitPCDebugInfoInDevelopment (Boolean): 개발 빌드의 PC 에서 디버그 정보 비활성화 여부입니다 (개발자의 빠른 반복처리를 위한 옵션으로, 디버그 정보가 비활성화되어 있으면 링크 시간이 매우 빠르기 때문입니다).

$ bUsePDBFiles (Boolean): Visual C++ 빌드에 PDB 파일을 사용 여부입니다.

$ bUsePCHFiles (Boolean): PCH 파일 사용 여부입니다.

$ MinFilesUsingPrecompiledHeader (Int32): 미리 컴파일된 헤더를 사용해야 하는 파일 수가 최소 이 이상 되어야 헤더를 생성 및 사용합니다.

$ bForcePrecompiledHeaderForGameModules (Boolean): 활성화 시, 게임 모듈에 소스 파일이 조금밖에 없다 하더라도 미리 컴파일된 헤더를 항상 생성하도록 합니다. 프로젝트의 소수 파일에 대한 반복처리 변경 시 컴파일 시간이 크게 향상되는 대신, 작은 게임 프로젝트의 풀 리빌드 시간이 느려집니다. 모듈의 Build.cs 파일에 있는 MinFilesUsingPrecompiledHeaderOverride 세팅으로 덮어쓸 수 있습니다.

$ bUseIncrementalLinking (Boolean): 점증적 링크 사용 여부입니다. 점증적 링크는 사소한 변경 시 반복처리 시간이 빨라질 수 있습니다. 현재 기본적으로 꺼져있는데, 일부 컴퓨터에서 버그성 동작을 보이는 경향이 있기 때문입니다 (PDB 관련 컴파일 오류).

$ bAllowLTCG (Boolean): 링크 시간 코드 생성(LTCG) 사용 허용 여부입니다.

$ bPGOProfile (Boolean): 이 빌드에 프로파일 유도 최적화(Profile Guided Optimization, PGO) 인스트루먼트 작업 활성화 여부입니다.

$ bPGOOptimize (Boolean): 이 빌드를 프로파일 유도 최적화(PGO)로 최적화시킬지 여부입니다.

$ bAllowASLRInShipping (Boolean): 주소 스페이스 레이아웃 랜덤화(ASLR) 지원 시 사용 허용 여부입니다. shipping 빌드에만 적용됩니다.

$ bSupportEditAndContinue (Boolean): 편집 및 계속 지원 여부입니다. 32 비트 컴파일의 Microsoft 컴파일러에만 작동합니다.

$ bOmitFramePointers (Boolean): 프레임 포인터 생략 여부입니다. 끄는 것이 PC 에서의 메모리 프로파일링 등에 유용합니다.

$ bStripSymbolsOnIOS (Boolean): iOS 심볼을 벗겨낼지 여부입니다 (bGeneratedSYMFile 에 내포되어 있습니다).

$ bUseMallocProfiler (Boolean): true 면 빌드에서 메모리 프로파일링이 활성화됩니다 (USE_MALLOC_PROFILER=1 정의 및 강제로 bOmitFramePointers=false 가 됩니다).

$ bUseSharedPCHs (Boolean): "Shared PCHs" 기능을 활성화시킵니다. UBT 가 감지한 모듈끼리 특정 PCH 파일을 공유시켜 그 PCH 의 헤더 파일을 포함하도록 시도하여 컴파일 시간을 크게 향상시키는 기능입니다.

$ bUseShippingPhysXLibraries (Boolean): Development 및 Release 빌드가 PhysX/APEX 의 release 구성을 사용해야 하는 경우 true 입니다.

$ bUseCheckedPhysXLibraries (Boolean): Development 및 Release 빌드가 PhysX/APEX 의 checked 구성을 사용해야 하는 경우 true 입니다. bUseShippingPhysXLibraries 가 true 면 이 옵션은 무시됩니다.

$ bCheckLicenseViolations (Boolean): UBT 가 현재 빌드중인 모듈이 EULA 를 침해하는지 여부를 검사하도록 합니다.

$ bBreakBuildOnLicenseViolation (Boolean): UBT 더러 현재 빌드 중인 모듈이 EULA 를 침해하는지 여부를 검사하도록 합니다.

$ bUseFastPDBLinking (Nullable&lt;Boolean&gt;): Windows에서 로컬 PDB 생성을 위해 /DEBUG 로 빌드 시 :FASTLINK 옵션 사용 여부입니다. 빠르지만, 현재 디버거에서 심볼을 찾는 데 문제가 있는 것 같습니다.

$ bCreateMapFile (Boolean): 맵 파일을 빌드의 일부로 출력합니다.

$ BundleVersion (String): Mac 앱의 번들 버전입니다.

$ bDeployAfterCompile (Boolean): 디플로이를 요하는 플랫폼에서 컴파일 이후 실행파일 디플로이 여부입니다.

$ bCreateStubIPA (Boolean): true 면 컴파일 완료시 stub IPA 가 생성됩니다 (유효 IPA 를 위해서는 최소 파일이 필요합니다).

$ bCopyAppBundleBackToDevice (Boolean): true 면 컴파일 완료시 stub IPA 가 생성됩니다 (유효 IPA 를 위해서는 최소 파일이 필요합니다).

$ bAllowRemotelyCompiledPCHs (Boolean): 활성화 시, XGE 가 원격 머신에서 미리 컴파일된 헤더(PCH) 파일을 컴파일할 수 있도록 합니다. 아니면, PCH 는 항상 로컬에서 생성됩니다.

$ bCheckSystemHeadersForModification (Boolean): 시기가 지난 액션을 결정할 때 시스템 경로에 있는 헤더에 대해 변경 검사를 할지 여부입니다.

$ bDisableLinking (Boolean): 이 타깃에 대한 링크 비활성화 여부입니다.

$ bFormalBuild (Boolean): 이 빌드는 공식 빌드이며, 배포용임을 나타냅니다. 이 플래그는 Build.version 에 changelist 가 설정된 경우 자동으로 true 설정됩니다. 현재 이 플래그에 묶인 유일한 작동방식은 OriginalFilename 칸이 올바르게 설정될 수 있도록 각 바이너리에 대해 별도로 기본 리소스 파일을 컴파일하는 것입니다. 기본적으로는 빌드 시간을 줄이기 위해 리소스는 한 번만 컴파일합니다.

$ bFlushBuildDirOnRemoteMac (Boolean): 빌드 전 원격 Mac 의 Builds 디렉터리를 비울지 여부입니다.

$ bPrintToolChainTimingInfo (Boolean): 컴파일러와 링커의 자세한 타이밍 정보를 쓸지 여부입니다.

$ bHideSymbolsByDefault (Boolean): POSIX 플랫폼에서 심폴을 기본으로 숨길지 여부입니다.

$ ToolChainName (String): 툴체인 오버라이드가 이 타깃에 대해 생성할 수 있도록 허용합니다. UnrealBuildTool 어셈블리에 선언된 클래스 이름에 일치해야 합니다.

$ bAllowGeneratedIniWhenCooked (Boolean): 쿠킹된 빌드에서 generated ini 파일을 로드할지 여부입니다.

$ bLegacyPublicIncludePaths (Boolean): 모든 퍼블릭 폴더를 컴파일 환경에 대한 포함 경로로 추가합니다.

$ BuildVersion (String): 빌드 버전 스트링입니다.

$ GlobalDefinitions (List&lt;String&gt;): 전체 타깃에 대한 글로벌 정의를 위한 매크로입니다.

$ ProjectDefinitions (List&lt;String&gt;): 프로젝트의 모든 매크로에 적용되는 정의를 위한 매크로입니다.

$ ExtraModuleNames (List&lt;String&gt;): 타깃에 컴파일시킬 부가 모듈 목록입니다.

$ BuildEnvironment (TargetBuildEnvironment): 이 타깃에 대한 빌드 환경을 지정합니다. 사용 가능 옵션에 대한 상세 정보는 TargetBuildEnvironment 를 참고하세요.

$ PreBuildSteps (List&lt;String&gt;): 이 타깃을 빌드하기 전, 호스트 플랫폼의 셸 컨텍스트에서 실행해야 하는 스텝 목록을 지정합니다. 실행 전 다음 변수가 확장됩니다: $(EngineDir), $(ProjectDir), $(TargetName), $(TargetPlatform), $(TargetConfiguration), $(TargetType), $(ProjectFile).

$ PostBuildSteps (List&lt;String&gt;): 이 타깃을 빌드한 후, 호스트 플랫폼의 셸 컨텍스트에서 실행해야 하는 스텝 목록을 지정합니다. 실행 전 다음 변수가 확장됩니다: $(EngineDir), $(ProjectDir), $(TargetName), $(TargetPlatform), $(TargetConfiguration), $(TargetType), $(ProjectFile).

$ AdditionalCompilerArguments (String): 컴파일러에 전달할 부가 인수입니다.

$ AdditionalLinkerArguments (String): 링커에 전달할 부가 인수입니다.


