INTSourceChangelist:2712719
Availability:Public
Title:1.3 - 変数
Crumbs:%ROOT%, Resources, Resources/ContentExamples, Resources/ContentExamples/Blueprints
Description:ブループリントのサンプルレベルの概要、サンプル 1．3：変数
Related:Engine/Blueprints/Overview 
Related:Engine/Blueprints/UserGuide/Components
Related:Engine/Blueprints/UserGuide/Variables
Related:Engine/Blueprints/UserGuide/BlueprintComms
Related:Engine/Blueprints/UserGuide/Types/MacroLibrary
Related:Engine/Animation/AnimBlueprints/EventGraph
Related:Engine/Blueprints/UserGuide/UserConstructionScript
Related:Gameplay/HowTo/SetUpInput/Blueprints
Version:4.9

[VAR:Steps]
[OBJECT:Navigation]
	[PARAM:previous]
		[前のサンプル](Resources/ContentExamples/Blueprints/1_2 "%Resources/ContentExamples/Blueprints/1_2:title%")
	[/PARAM]
	[PARAM:current]
	[/PARAM]
	[PARAM:home]
		[ブループリントのコンテンツ サンプル ホーム](Resources/ContentExamples/Blueprints)
	[/PARAM]
	[PARAM:next]
		[次のサンプル](Resources/ContentExamples/Blueprints/1_4 "%Resources/ContentExamples/Blueprints/1_4:title%")
	[/PARAM]
[/OBJECT]
[/VAR]



[VAR:TopicCompact]
[OBJECT:TopicCompact]
	[PARAM:image]
		![%Resources\ContentExamples\Blueprints\1_3:title%](blueprint_1_3_topic.png)
	[/PARAM]
	[PARAM:title]
		%Resources\ContentExamples\Blueprints\1_3:title%
	[/PARAM]
	[PARAM:description]
		%Resources\ContentExamples\Blueprints\1_3:description%
	[/PARAM]
	[PARAM:path]
		[RELATIVE:Resources\ContentExamples\Blueprints\1_3]
	[/PARAM]
[/OBJECT]
[/VAR]

[REGION:fullwidth]
![](BPVariablesExample.png)
[/REGION]

[TOC(start:2 end:3)]



このサンプルでは、2 つのスポットライトが設定されたブループリント アクタを使用します。各スポットライトの色は **変数** でコントロールされています。プログラミングにおける変数は、あるデータ量を格納するコンピューターメモリ領域として定義されます。ブループリント スクリプトにおける変数は、バーチャル コンテナと全く同じ方法で使用します。コンテナはある種の情報を配置したり、中にある情報をクエリするために使用します。例題の各ライトは Linear Color 変数を使用しています。この変数はある特定の色の RGB 値を格納しています。この色にデフォルト値を挿入して、さまざまな場所からクエリして使用することができます。新しい色を設定して、設定色をブループリントスクリプトの一部として使用します。


この例では主に Linear Color 変数を使用していますが、ブループリント スクリプト内ではさまざまな変数を利用することができます。変数の各タイプは種類の異なるデータを保持します。ここで、ユーザーが主要データタイプについて最低限の基礎知識を身に付けていることが重要となります。変数の使用に関するタイプのリストや詳細は、[変数] (Engine/Blueprints/UserGuide/Variables) を参照してください。


左側のスポットライトは、 **パブリック** 変数で作成されています。つまり、Blueprint アクタが選択されている間、 **[詳細 (Details)]** パネルで編集が可能です。右側のスポットライトは似たような設定ですが、Linear Color 変数が **プライベート** のままになっています。つまりこの色の値を変更するには、アクタのブループリント スクリプトを開いて、プライベート変数のデフォルト設定を変更するか、スクリプトの機能の一部としてその他の方法で変更しなくてはいけません。

変数をパブリックにすると、ユーザーがその **編集可能な** プロパティをチェックしなくてはいけません。もしくは、 **My Blueprint** ウィンドウで変数名の横にある目のアイコンをクリックします。変数が編集可能になると、その横の目の形状をしたボタンが黄色でハイライトされます。これは変数の編集は公開されていますが、ツールヒントがないため、一部のユーザーには混乱のもととなる可能性があります。これを解決するために、変数の **Tooltip** プロパティに説明を入力します。入力が終了すると、目の形状をしたボタンは緑表示になります。

初心者ユーザーは、使用している変数を常にパブリックにしないことを留意しておいてください。重要な変数に対して変更許可を簡単にユーザーに与えてしまうことにより、時には破損が生じたり、重要な機能にアラートが生じる可能性があります。アーティストやレベル デザイナーが利用する必要がある変数をパブリック、そしてその他の変数全てを必ずプライベートとします。

[REGION:tip]
パブリック変数に用途を説明するツールヒントがあることを常に確認してください！
[/REGION]


## コンポーネント

このサンプルでは、完全に異なる 2 つのライトを使用しているため、このブループリントアクタのコンポーネントは比較的広範囲に及びます。コンポーネントの大部分は、ラベル付けにいくつかの Text Render コンポーネントを使用した Static Mesh コンポーネントです。当然ながら、エフェクトを完成させるには Spot Light コンポーネントもいくらか使用しなくてはいけません。 

![](LightComponentList.png) ![](LightComponentPreview.png)(w:550 h:355)

基本的に同じですが、 2 つの設定方法があります。各ライトのコンポーネント設定方法は以下のとおりです。

[REGION:note]
それぞれのライト設定に対し、**Public** や **Private** というワードはプレフィックスとして名前に追加されることに留意してください。またインデント付けは、コンポーネントリスト内でそうであるように、あるコンポーネントから他のコンポーネントに対し親の関係であることを示すことを意識してください。
[/REGION]

*  **Wall Mount** - 壁に固定されているように見える Static Mesh コンポーネントです。
	* **Bracket** - 壁掛けにアタッチして Light Fixture (照明器具) を支えているように見える Static Mesh コンポーネントです。
		* **Light Fixture** - 照明器具自体の Static Mesh コンポーネントです。プレイヤーには、スポットライトのように見えます。2 番目のマテリアル エレメント (エレメント 1) には、ライトの色とマテリアルの色が一致して更新するように作成された、特別なマテリアルが適用されています。
			* **Spot Light** - エフェクトのイルミネーションを提供する Spot Light コンポーネントです。
	* **Text** - パブリックもしくはプライベートのラベルとして使用する Text Render コンポーネントです。
		* **Description** - エフェクトをもっと詳しく説明するための記述的なテキストです。

## 変数の設定

ブループリント アクタにコンポーネントを追加した時、各コンポーネントに対して変数と一緒に **[My Blueprint]** パネル (Graph モードで表示) が自動的に追加されるのが分かります。コンポーネントのデータが必要な場合、またはコンポーネントのデータを設定する場合に、各コンポーネントへのアクセスが有効になります。この先は、この例のために具体的に設定したいくつかの特別な変数を使用します。 

![](LightVariables.png)

エフェクトに対し具体的に作成したカスタム仕様の変数は以下の通りです。

* **PublicColor** - 左側にある Public ライトに適用した色を格納する Linear Color 変数です。デフォルト値となる緑色はプロパティに設定します。
* **PublicColor** - 右側にある Private ライトに適用した色を格納する Linear Color 変数です。デフォルト値となる赤色はプロパティに設定します。

その他に、照明器具のレンズに適用した Dynamic Material Instance (動的マテリアル インスタンス) を保持するために作成した 2 つの変数があります。この変数は上述の変数から色の値を送信するために設定します。Spot Light コンポーネントの色と一致するようにライトのレンズカラーを変更します。

* **PublicLightLensMaterial** - Public Light Fixture のレンズの動的マテリアル インスタンスを保持します。 
* **PrivateLightLensMaterial** - Private Light Fixture レンズの動的マテリアル インスタンスを保持します。  

### 変数の作成

_**My Blueprint**_ パネル内部で全ての変数を手動で作成しなくてはいけないわけではありません。ノードの出入力値を見ると、変数に格納しなくてはいけないことが分かります。適切なデータピンを **右クリック** して、コンテキスト メニューから **[Promote to variable (変数に昇格)]** を選択します。以下を行います。

* データ入力値を **右クリック** した場合 (変数の左側)
	* 適切なタイプの新規変数の作成
	* 新規変数の名前を直ちに入力

* データ出力値を **右クリック** した場合 (変数の右側)
	* 適切なタイプの新規変数の作成
	* 新規変数用の Set ノードも作成され、新規変数の初期値をピンの出力値と同じに設定します。


## コンストラクション スクリプト

このエフェクト作成作業の大部分は、実際にはコンストラクション スクリプト内で行われます。ゲーム開始後にライトの更新は必要ないため、イベント グラフは使用しません。

この例のコンストラクション スクリプトを簡単に理解するために、一連のコメント ブロックとして以下のように分割しました。

**クリックして画像をフルサイズで表示**
[REGION:lightbox]
[REGION:fullwidth]
[![](LightConstructionScript.png)](LightConstructionScript.png)
[/REGION]
[/REGION]

[REGION:tip]
実際にブループリント エディタを開いてこの例のコンストラクション スクリプトを可視化すると理解しやすいかもしれません！
[/REGION]

実行したタスクは以下の通りです。

* ライト色の設定
* 動的マテリアル インスタンスの作成とこれを変数へ格納
* 新規の動的マテリアル インスタンスを Light Fixture メッシュへ割り当てる
* 動的マテリアル インスタンスの色の設定

### ライト色の設定

[REGION:fullwidth]
![](SetLightColor.png)
[/REGION]

スクリプトのこの部分は、既に適用されているデフォルト値を単に使用し、各ライトの Light Color へ入力します。これはスクリプトで最初に行われる作業であるため、デフォルト値の適用から始まります。プライベート変数は赤、パブリック変数は緑です。ノードを最も簡単に設定する方法は以下のとおりです。

1. ノードをグラフへ **[Ctrl + ドラッグ]** して、各 Sport Light コンポーネントに Get リファレンスを作成します。
1. それぞれからワイヤーをドラッグして、検索欄に「Light Color」と入力します。リストに Set Light Color ノードが表示されます。

![](SetLightColor_node.png)

### 動的マテリアル インスタンスの作成とこれを変数へ格納

[REGION:fullwidth]
![](CreateStoreDMI.png)
[/REGION]

次のネットワーク部分は、各 Light Fixture Static Mesh に対し動的マテリアル インスタンスを作成します。動的マテリアル インスタンスは、マテリアルのインスタンスを作成したもののコピーです。マテリアルはゲームプレイ中に何かしらの方法で更新することができます。この例では、 Spot Light コンポーネントに使用した色と一致させるためにマテリアルのエミッシブ カラーを変更することができます。2 つの全く別の動的マテリアル インスタンスを作成したことに気付かれるかと思います。これは、異なる 2 つの色に対して別のインスタンスが必要なためです。 

それぞれの Create Dynamic Material Instance ノードの後に、新規に作成したマテリアルを変数に格納していることが分かります。これにより後にマテリアルへのアクセスが可能となります。色の調整を行いたいのであれば、これは必要な設定です。ネットワーク上の別の場所へ Return Value 出力を接続することも出来ますが、変数に格納することによりブループリント スクリプトの編成をきれいに保ち、イベント グラフで必要な時にマテリアルへのアクセスが可能となります。

### 新規動的マテリアル インスタンスの割り当て 

[REGION:fullwidth]
![](AssigningDMIs.png)
[/REGION]

独自の動的マテリアル インスタンスの作成のみでは十分とは言えません。これらの新規のマテリアルも、メッシュのサーフェスへ割り当てなければいけません。スクリプトのこのセクションは、 Light Fixture Static Mesh へ動的マテリアル インスタンスを適用します。マテリアル エレメント インデックス 1 を使用していることに留意してください。レンズに配置するために、スタティックメッシュ上に作成しました。つまり、マテリアルは、ライトレンズの色の変更に使用します。



###動的マテリアル インスタンス:

[REGION:fullwidth]
![](SetLensColor.png)
[/REGION]

動的マテリアル インスタンスがサーフェスに割り当てられたので、最後の手順としてこれらのマテリアルに色を割り当てます。2 つの変数を使用してこの作業を行います。まず、一つの変数をパブリック、もう一つの変数をプライベートとして作成します。これは主にチュートリアル目的であることに留意してください。事実上、両方の変数をパブリック変数として作成したほうが実用的であると思われます。

