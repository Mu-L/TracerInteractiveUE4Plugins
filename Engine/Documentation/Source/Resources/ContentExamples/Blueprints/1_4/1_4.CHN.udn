Availability: Public
Title:1.4 -构建脚本
Crumbs:%ROOT%, Resources, Resources/ContentExamples, Resources/ContentExamples/Blueprints
Description:蓝图示例关卡概述，示例1.4： 构建脚本
Related: Engine/Blueprints/Overview 
Related: Engine/Blueprints/UserGuide/Components
Related: Engine/Blueprints/UserGuide/Variables
Related: Engine/Blueprints/UserGuide/BlueprintComms
Related: Engine/Blueprints/UserGuide/Types/MacroLibrary
Related: Engine/Animation/AnimBlueprints/EventGraph
Related: Engine/Blueprints/UserGuide/UserConstructionScript
Related: Gameplay/HowTo/SetUpInput/Blueprints



[VAR:TopicCompact]
[OBJECT:TopicCompact]
	[PARAM:image]
		![%Resources\ContentExamples\Blueprints\1_4:title%](blueprint_1_4_topic.png)
	[/PARAM]
	[PARAM:title]
		%Resources\ContentExamples\Blueprints\1_4:title%
	[/PARAM]
	[PARAM:description]
		%Resources\ContentExamples\Blueprints\1_4:description%
	[/PARAM]
	[PARAM:path]
		[RELATIVE:Resources\ContentExamples\Blueprints\1_4]
	[/PARAM]
[/OBJECT]
[/VAR]

[REGION:fullwidth]
![](ConstructionScript_BP.png)
[/REGION]

## 概述

在这个非常简单的蓝图设置中，我们一起探索构建脚本的本质内容。构建脚本设计的目的是在蓝图对象创建时，并在该对象以某种方式进行更新时执行该脚本。这表示，当对象被移动，旋转，缩放或其任何属性进行了调整后，构建脚本会被再次执行。这对于需要在游戏前进行运算的蓝图Actor元素来说非常有用。

本例中，我们将展示如何通过构建脚本来添加组件到蓝图Actor，可以用来对比手动将它们添加到组件列表的过程。

[REGION:note]
我们要牢记很重要的一点，在游戏开始后，构建脚本停止执行。此时，每个构建脚本正在执行的事件将会被视为完成。同时，我们也应该注意到，关卡蓝图没有构建脚本。
[/REGION]


## 组件列表 对比 构建脚本 

您会注意到，本例中的两个对象看起来完全一样。然而，其中一个对象是使用组件列表来完成的，另一个是通过构建脚本完成的。在这种情况下，本例主要是理论上的探讨，我们要了解每种方法的好处，这点很重要。

当您设置组件列表的蓝图中的组件时，您将可以使用蓝图编辑器的组件标签以调整并放置每个组件。这就使得准确放置组件变得非常容易和直观。一般来说，当您事先了解需要哪种类型的组件时，这种类型的设置是最理想的。

当您需要在蓝图中变更使用的组件时，在构建脚本中设置这些组件就更为有用。在右侧的示例中，我们使用了构建脚本来添加每个组件，并通过勾选布尔值来确定显示或隐藏哪种类型的组件以设置系统。

[REGION:fullwidth]
![](ComponentsDetails.png)
[/REGION]

如果您选择右侧的示例并查看 **细节** 面板，您将会看到每种组件类型的勾选框。通过勾选和取消勾选，您可以控制哪个组件将被添加到蓝图Actor中。



构建脚本使用分支节点，这是一种流程控制的形式。如需获得更多信息，请参阅[流程控制文件](Engine/Blueprints/UserGuide/FlowControl),或查看本关卡的[示例1.7](Resources\ContentExamples\Blueprints\1_7)。

[REGION:fullwidth]
![](ComponentAddition.png)
[/REGION]
