INTSourceChangelist:3782314
Availability: Public
Title:1.2 - 머티리얼 인스턴스
Crumbs:%ROOT%, Resources, Resources/ContentExamples, Resources/ContentExamples/Materials
Description:Material Instances 예제 레벨에 대한 개요로, 예제 1.2: Material Instance 입니다.
Related: Engine/Rendering/Materials/MaterialInstances
Related: Engine/Rendering/Materials/PhysicallyBased
Related: Engine/Rendering/Materials
Related: Engine/Rendering/Materials/ExpressionReference
Related: Engine/Rendering/Materials/MaterialInputs
Related: Engine/Rendering/Materials/LayeredMaterials
Related: Engine/Actors/DecalActor
Version: 4.9


![](MI_1_2_001.png)(w:900)

**Material Instance** (머티리얼 인스턴스)란 머티리얼의 자손으로, **부모 머티리얼** 의 모든 것을 상속받았으나 그 **파라미터** 는 **머티리얼 인스턴스** 별로 변경할 수 있다는 뜻입니다.

인스턴스를 왜 사용할까요? 머티리얼은 매우 유연하여, 상상할 수 있는 거의 모든 것들을 머티리얼 에디터로 실현해 낼 수 있습니다. 가끔은 테크니컬 아티스트가 디자인한 복잡한 셰이더를 가지고 **머티리얼 인스턴스** 를 만들어서 테크니컬 아티스트가 노출시켜 둔 텍스처와 파라미터만 간단히 조절하는 방식도 가능합니다. 그럴 때 **인스턴스** 가 좋아요!

**인스턴스** 의 두 번째 장점은 속도입니다. 머티리얼 수정 작업은 셰이더 컴파일 때문에 시간이 걸립니다. **머티리얼 인스턴스** 의 파라미터 수정 작업은 셰이더는 이미 컴파일된 상태기 때문에 바로 가능합니다 (`StaticSwitchParameter` 는 예외인데, 셰이더 복잡도 변화에 따라 셰이더를 리컴파일해야 하므로 항상 느립니다). 즉 머티리얼 트윅 작업이 필요하다면, 훨씬 빠른 **머티리얼 인스턴스** 로 할 것을 추천합니다.

