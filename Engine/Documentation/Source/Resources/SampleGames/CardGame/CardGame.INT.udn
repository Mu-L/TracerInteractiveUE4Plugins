Availability: Docs
Title:Memory Game 
Crumbs:%ROOT%, Resources
Description:
Related: Gameplay/HowTo/UsingCameras/Blueprints
Related: Engine/Blueprints/Editor
Related: Engine/Animation/AnimBlueprints/EventGraph
Related: Gameplay/Input
Related: Gameplay/Framework
Related: Engine/Content/Types/StaticMeshes
Version: 4.9
topic-image:CardGame_Topic.png


[REGION:fullwidth]
![](CardGame_Board.png)
[/REGION:fullwidth]

[TOC(start:2)]

The Memory Game sample is an example of a simple PC/mobile logic game. It is built only with _Blueprints_, with no additional code support.




## Game Logic

The **BP_LogicMem** _Blueprint_ is derived from the _GameMode_ _Class_.  This _Blueprint_ is where the Default Pawn Class, the HUDClass, the Player Controller Class, the Spectator Class, and the GameReplicationInfo Class
are set.  

There are two _Graphs_ in the BP_LogicMem _Blueprint_ as well.  **EventGraph** contains the initial setup of the game, the logic tests necessary for gameplay, and additional functionality such as moving back to the menu 
and displaying all the cards with the Hint button. **FinishGame** handles whether the player wins or loses, the number of stars awarded to the player, and the necessary end-of-game cleanup. 

**BP_Counter** is called by BP_LogicMem using a _Blueprint Interface_ to change the displayed number of moves, as well as to change the color of the text for the number of moves once there are fewer than 3 moves left.  

## Card Handling

The **BP_DeckMem** and **BP_CardMem** _Blueprints_ are the primary _Blueprints_ that manage how the cards are defined and laid out in the game. One instance of BP_DeckMem is placed in the game level,
and it handles the spawning of BP_CardMem.

BP_DeckMem contains logic for creating and shuffling the card deck, spawning the cards, placing them on the board, and showing all the cards when the Hint button is pressed. The network for shuffling the 
deck is stored in the Shuffle function,  which is called in the main **EventGraph** during new game preparation.  After the deck is shuffled, BP_DeckMem spawns the cards, with different card placement based 
on the total number of cards.  Every location on the board has an index: the **CardDeckObjects** array contains the BP_CardMem _Blueprint_ that is at that index, while the **CardDeckShuffled** array holds 
information about the card type for that index. The Rotate event in BP_DeckMem flips all the cards when the Hint button is pressed.  

BP_CardMem defines the picture on each card, defines the animations for placing, flipping, and removing the cards, and sets the _ParticleEffects_ and sounds used when comparing cards.

[REGION:fullwidth]
![](CardGame_ParticleEffects_Right.png)
[/REGION:fullwidth]

## Click Input

The **BP_PlayerControllerMem** _Blueprint_ enables the Mouse Interface.  Click events are enabled, while mouseover events are not.  The _Blueprints_ that contain click events are BP_MenuMem, BP_CardMem, and BP_Scoreboard.
These Assign OnClicked _Nodes_ are all activated from the ReceivedBeginPlay event, which will fire once the player begins the game. 

Assign OnClicked _Nodes_ create events tied to the delegate OnClicked. Delegates are ways for components of _Blueprints_ to report on their state and trigger events based on their state changes.   For example, once the Hint Button is clicked 
in the game, it reports that it has been clicked, and the Hint Button's OnClicked delegate triggers, activating a sequence of nodes that causes all the placed cards to flip over.

The variable **BlockClick** serves to prevent players from clicking on a card while it is flipped over or while it is in the process of flipping.

## Frozen Camera
The BP_LogicMem _Blueprint_ defines **SpectatorPawn** as the default Pawn Class.  The _Level Blueprint_ for the Memory Game places the SpectatorPawn at the PlayerStart, and the properties
of the SpectatorPawn keeps the camera frozen in place throughout gameplay. 

## Menu
The **Memory Game** start menu is set up in the BP_MenuMem _Blueprint_ using simple _StaticMeshComponents_.  _TextRenderComponents_ are used for the text and numbers, and a Timeline is used to move the menu out of the game window.  
Using the menu, sets variables for the number of cards to use and whether or not to use a pair of black cards that will end the game if paired.  These variables are sent to the BP_LogicMem and the BP_DeckMem _Blueprints_ with
the BPI_Communication _Blueprint Interface_. 

[REGION:fullwidth]
![](CardGameMenu.png)
[/REGION:fullwidth]

The **BP_Scoreboard** _Blueprint_ uses a combination of _StaticMeshComponents_ and _TextRenderComponents_ to create the summary menu that appears at the end of the game.  

[REGION:fullwidth]
![](CardGameEndMenu.png)
[/REGION:fullwidth]

[COMMENT:none]

## Overview

The ShooterGame sample is an example of PC multiplayer first person shooter. It includes basic implementations of 
weapons and gametypes along with a simple front end menu system.

A complete list of the featured concepts:

* Instant hit weapon (ShooterWeapon_Instant)
* Projectile based weapon (ShooterWeapon_Projectile + ShooterProjectile)
* Non-Team game mode (ShooterGame_FreeForAll)
* Team-based game mode (ShooterGame_TeamDeathMatch)
* Pickups (ShooterPickup)
* Main menu (ShooterHUD_Menu)


## Weapon Fire System

The base firing functionality for the weapons - such as ammo management, reloading, and replication - is implemented 
in the `AShooterWeapon` class.

The weapon is switched to its firing state on the local client and server (via RPC calls). `DetermineWeaponState()` 
is called in `StartFire()`/`StopFire()` which performs some logic to decide which state the weapon should be in and then 
calls `SetWeaponState()` to place the weapon into the appropriate state. Once in firing state, the local client will 
repeatedly call `HandleFiring()` which, in turn, calls `FireWeapon()`. Then it updates ammo and calls `ServerHandleFiring()` 
to do the same on the server. The server version is also responsible for notifying remote clients about each fired round via the 
`BurstCounter` variable.

Actions performed on the remote clients are purely cosmetic. Weapon fire is replicated using the `BurstCounter` 
property so that the remote clients can play animations and spawn effects - perform all of the visual aspects of the 
weapon firing.

### Instant-Hit Weapon Fire

Instant-hit detection is used for fast firing weapons, such as rifles or laser guns. The basic concept is that when the player 
fires the weapon, a line check is performed in the direction the weapon is aimed at that instant to see if anything would be hit.

This method allows high precision and works with actors that don't exist on server side (e.g., cosmetic or torn off). The 
local client performs the calculations and informs the server of what was hit. Then, the server verifies the hit and replicates 
it if necessary.

In `FireWeapon()`, the local client does a trace from the camera location to find the first blocking hit under the crosshair 
and passes it to `ProcessInstantHit()`. From there, one of three things happens:

* The hit is sent to the server for verification (`ServerNotifyHit()` - `ProcessInstantHit_Confirmed()`)
* If the hit actor doesn't exist on server, the hit is processed locally (`ProcessInstantHit_Confirmed()`)
* If nothing was hit the server is notified (`ServerNotifyMiss()`)


Confirmed hits apply damage to the hit actors, spawn trail and impact effects, and notify remote clients by setting data 
about the hit in the `HitNotify` variable. Misses just spawn trails and set `HitNotify` for remote clients, which look 
for `HitNotify` changes and perform the same trace as the local client, spawning trails and impacts as needed.

The instant-hit implementation also features weapon spread. For trace/verification consistency, local client picks a random 
seed each time `FireWeapon()` is executed and passes it in every RPC and `HitNotify` pack.

### Projectile Weapon Fire

Projectile fire is used to simulate weapons that fire rounds which are slower moving, explode on impact, affected by gravity, 
etc. These are cases where the outcome of the weapon fire can't be determined at the exact instant the weapon is fired, such 
as launching a grenade. For this type of weapon, an actual physical object, or _projectile_, is spawned and sent moving in the 
direction the weapon is aimed. A hit is determined by the projectile colliding with another object in the world.

For projectile fire, the local client does a trace from camera to check what actor is under the crosshair 
in `FireWeapon()`, similar to the instant-hit implementation. If the player is aiming at something, it adjusts the fire direction 
to hit that spot and calls `ServerFireProjectile()` on the server to spawn a projectile actor in the direction the weapon was aimed.

When the movement component of the projectile detects a hit on the server, it explodes dealing damage, spawning effects, and 
tears off from replication to notify the client about that event. Then, the projectile turns off collision, movement, and visibility 
and destroys itself after one second to give client time for replication update.

On clients, explosion effects are spawned in the `TornOff()` event.

## Player Inventory

The player's inventory is an array of `AShooterWeapon` references stored in the `Inventory` property of the player's 
Pawn (`AShooterCharacter`). The currently equipped weapon is replicated from the server, and additionally, `AShooterCharacter` 
stores its current weapon locally in `LocalCurrentWeapon` property, which allows the previous weapon to be un-equipped 
when a new weapon is equipped.

When the player equips a weapon, the appropriate weapon mesh - first-person for local, third-person for others - is attached
to the Pawn and an animation is played on the weapon. The weapon is switched to the equipping state for duration of the 
animation.

## Player Camera

In first-person mode, the Pawn's mesh is hard-attached to camera so that the arms always appear relative to the player's view. 
The downside of this approach is that it means the legs are not visible in the player's view, since the entire mesh rotates 
to match camera yaw and pitch.

The basic flow of the camera update is:

* `AShooterCamera::UpdateCamera()` is executed each tick
* `APayerCamera::UpdateCamera()` is called to update the camera rotation based on the player's input
* `AShooterCharacter::OnCameraUpdate()` is called to perform the calculations necessary to rotate the first person mesh to match the camera


When the player dies, it switches to a _death_ camera that has fixed location and rotation set in the `AShooterPlayerController::PawnDied()` 
handler. This function calls `AShooterPlayerController::FindDeathCameraSpot()` which cycles through several different 
locations and uses the first one not obstructed by level's geometry.

## Online Multiplayer

Online multiplayer matches are divided into 3 stages: 

* Warm up
* Match play
* Game over


Players join the game via the _login_ process handled by the `PreLogin()`, `Login()`, and `PostLogin()` functions in 
`AShooterGameMode`. `Login()` spawns the PlayerController for each player, sets their starting spot (e.g. the PlayerStart they 
will start at), and also calls `InitNewPlayer()` to allow for customizing the player based on the map URl options or other factors. 
for team-based games, this is where the players are assigned to teams. 

When the first player joins the game, the **warm up** stage begins. This is a short period, marked by a 
countdown timer, that gives other players a chance to join. During this period, the players are in _spectator_ mode allowing them 
to fly around the map. When the countdown timer expires, `StartMatch()` is called to restart all of the players and spawn their 
Pawns. 

Matches are timed, with the game time being calculated on server side in the `AShooterGameMode::DefaultTimer()` function, 
which is executed using a looping timer with a rate equal to the current time dilation that equates to once every _game_ second. 
This is stored in the `RemainingTime` property of the game replication info class (`AShooterGRI`), which is then replicated 
to clients. When the time remaining reaches zero, `FinishMatch()` is called to end the game session. This notifies all players 
the match has ended and disables movement and health.

## Menu System

The menu system is created using the [Slate UI framework](Programming/Slate). It consists of **menus**, **menu widgets**, and **menu items**. 
Each menu has a single menu widget (`SSHooterMenuWidget`) that is responsible for layout, internal even handling, and animations 
for all of the menu items. Menu items (`SSHooterMenuItem`) are compound objects that can perform actions and contain any number 
of other menu items. These can be as simple as a label or button or "tabs" that contain complete submenus made up of other menu items. 
This menu can be operated using keyboard or controller, but there is only limited mouse support at this time.

Each menu is _constructed_ via the `Construct()` function, which adds all of the necessary menu items, including sub-items, 
and attaches delegates to them where necessary. this is done using the helper methods - `AddMenuItem()`, `AddMenuItemSP()`, etc. - 
defined in the `MenuHelper` namespace in the `SShooterMenuWidget.h` file.

Navigation to previous menus is done using an array of shared pointers to menus and is stored in the `MenuHistory` variable of 
the menu widget. `MenuHistory` acts like stack to hold previously entered menus and makes it easy to go back. By using this method, 
no direct relationship is created between menus and the same menu can be reused in different places if necessary.

Animations are performed using interpolation curves defined in `SShooterMenuWidget::SetupAnimations()`. Each curve has start time, 
duration, and interpolation method. Animations can be played forward and in reverse and their attributes can be animated at specific time 
using `GetLerp()`, which returns a value from 0.0f to 1.0f. There are several different interpolation methods available defined in 
`ECurveEaseFunction::Type` in `SlateAnimation.h`.


### Main Menu



The main menu is opened automatically when the game starts by specifying the _ShooterEntry_ map as the default. It loads a special 
GameMode, `AShooterGameMode`, that uses the `AShooterPlayerController_Menu` class which opens the main menu by creating a new 
instance of the `FShooterMainMenu` class in its `PostbeginPlay()` function.

### In-game Menu


The in-game menu is created in the `PostInitializeComponents()` function of the `AShooterPlayerController` class, and opened or closed 
via the `OnToggleInGameMenu()` function.

### Options Menu

The options menu is available as a submenu of both the main menu and in-game menu. The only difference is how changes are applied:

* Accessed from the main menu, changes are applied when the player starts the game. 
* Accessed from the in-game menu, changes are applied immediately when the menu is closed.


The settings in the options menu are saved to `GameUserSettings.ini`, and loaded automatically at startup.


[/COMMENT]
