INTSourceChangelist:6277736
Availability: Docs
Title:메모리 게임
Crumbs:%ROOT%, Resources
Description:
Related: Gameplay/HowTo/UsingCameras/Blueprints
Related: Engine/Blueprints/Editor
Related: Engine/Animation/AnimBlueprints/EventGraph
Related: Gameplay/Input
Related: Gameplay/Framework
Related: Engine/Content/Types/StaticMeshes
Version: 4.9
topic-image:CardGame_Topic.png


[REGION:fullwidth]
![](CardGame_Board.png)
[/REGION:fullwidth]

[TOC(start:2)]

Memory Game 샘플은 간단한 PC/모바일 로직 게임 예제입니다. 별도의 코드 지원 없이 _블루프린트_ 로만 만들어졌습니다.




## 게임 로직

**BP_LogicMem** _블루프린트_ 는 _GameMode_ 클래스에서 파생되었습니다. 바로 Default Pawn, HUDClass, PlayerController, Spectator, GameReplicationInfo 클래스가 설정되는 
블루프린트 입니다.

**BP_LogicMem** _블루프린트_ 에는 _그래프_ 가 둘 있습니다. **EventGraph** 에는 게임의 초기 셋업, 게임플레이에 필수인 로직 테스트, 메뉴 버튼으로 돌아가거나 
**Hint** 버튼으로 모든 카드를 표시하는 등의 부가 함수성이 들어 있습니다. **FinishGame** 은 플레이어의 승패, 플레이어가 얻은 별 수, 필수적인 게임끝 정리 등을 처리합니다.

**BP_Counter** 는 _블루프린트 인터페이스_ 를 사용해서 **BP_LogicMem** 에 의해 호출되는데, 표시된 이동 횟수 변경, 남은 이동 횟수 3 회 이하일 때 이동 횟수 글씨 색 변경 등의 작업을 해 줍니다.

## 카드 처리

**BP_DeckMem**, **BP_CardMem** _블루프린트_ 는 게임에서 카드의 정의 방식과 레이아웃을 관리합니다. **BP_DeckMem** 의 인스턴스 하나가 게임 레벨에 놓이면, 
**BP_CardMem** 스폰을 처리합니다.

**BP_DeckMem** 에는 카드 덱 생성 및 셔플, 카드 스폰 및 보드상에 배치, **Hint** 버튼을 눌렀을 때 모든 카드 표시 등의 로직이 들어있습니다. 덱 셔플 부분에 대한 망은 
**Shuffle** 함수에 저장되어 있으며, 이 함수는 새 게임 준비 도중 메인 **이벤트 그래프** 에서 호출됩니다. 덱 셔플 이후, **BP_DeckMem** 에서는 카드의 총 갯수에 따라 배치를 달리하여 
카드를 스폰합니다. 보드상의 모든 위치에는 인덱스가 있습니다: **CardDeckObjects** 배열에는 해당 인덱스에서의 **BP_CardMem** _블루프린트_ 가 들어있는 반면, **CardDeckShuffled** 배열은 
해당 인덱스에서의 카드 유형에 대한 정보가 들어 있습니다. **BP_DeckMem** 의 **Rotate** 이벤트는 **Hint** 버튼이 눌렸을 때 모든 카드를 뒤집습니다.

**BP_CardMem** 는 각 카드의 그림 정의, 카드 배치와 뒤집기와 제거할 때의 애니메이션 정의, 카드 비교시 사용되는 _파티클 이펙트_ 와 사운드를 설정합니다.

[REGION:fullwidth]
![](CardGame_ParticleEffects_Right.png)
[/REGION:fullwidth]

## 클릭 입력

**BP_PlayerControllerMem** _블루프린트_ 는 마우스 인터페이스를 활성화시킵니다. 클릭 이벤트는 활성화시키는 반면, 마우스오버 이벤트는 활성화시키지 않습니다. 클릭 이벤트가 들어있는 _블루프린트_ 는 **BP_MenuMem**, **BP_CardMem**, **BP_Scoreboard** 입니다.
이 **Assign OnClicked** _노드_ 는 모두 **ReceivedBeginPlay** 이벤트를 통해 실행되는데, 이 이벤트는 플레이어가 게임을 시작할 때 한 번 발동되는 것입니다.

**Assign OnClicked** _노드_ 는 OnClicked 델리게이트에 묶인 이벤트를 생성합니다. 델리게이트란 상태를 보고하고 그 상태 변화에 따라 이벤트를 발동시키기 위해 _블루프린트_ 컴포넌트에서 사용하는 방식입니다. 예를 들어 게임에서 **Hint Button** 이 클릭되면, 
클릭이 되었다고 보고를 하고, **Hint Button** 의 OnClicked 델리게이트가 발동되어 배치된 카드 전부를 뒤집게 만드는 노드 시퀀스를 실행합니다.

**BlockClick** 변수는 뒤집혀 있거나 그 과정에 있는 카드를 클릭하지 못하도록 합니다.

## 고정 카메라
**BP_LogicMem** _블루프린트_ 는 **SpectatorPawn** 을 디폴트 Pawn Class 로 정의합니다. Memory Game 에 대한 _레벨 블루프린트_ 는 PlayerStart 위치에 **SpectatorPawn** 를 배치하며, 
**SpectatorPawn** 의 프로퍼티를 통해 게임플레이 내내 카메라를 그자리에 고정시킵니다.

## 메뉴
**Memory Game** 시작 메뉴는 **BP_MenuMem** _블루프린트_ 에 간단한 _StaticMeshComponents_ 를 사용하여 구성되어 있습니다. 문자와 숫자에는 _TextRenderComponents_ 가 사용되며, 게임 창 밖으로 메뉴를 이동시키는 데는 **Timeline** 이 사용되었습니다.  
메뉴를 사용해서 사용할 카드 갯수, 쌍이 갖춰지면 게임을 끝내게 될 검정 카드 쌍을 사용할지 여부에 대한 변수를 설정합니다. 이러한 변수는 **BP_LogicMem**, **BP_DeckMem** _블루프린트_ 에,
**BPI_Communication** _블루프린트 인터페이스_ 를 통해 전송됩니다.

[REGION:fullwidth]
![](CardGameMenu.png)
[/REGION:fullwidth]

**BP_Scoreboard** _블루프린트_ 는 _StaticMeshComponents_ 와 _TextRenderComponents_ 를 조합시켜 게임 종료시 나타나는 요약 메뉴를 만듭니다.

[REGION:fullwidth]
![](CardGameEndMenu.png)
[/REGION:fullwidth]

[COMMENT:none]

## Overview

The ShooterGame sample is an example of PC multiplayer first person shooter. It includes basic implementations of 
weapons and gametypes along with a simple front end menu system.

A complete list of the featured concepts:

* Instant hit weapon (ShooterWeapon_Instant)
* Projectile based weapon (ShooterWeapon_Projectile + ShooterProjectile)
* Non-Team game mode (ShooterGame_FreeForAll)
* Team-based game mode (ShooterGame_TeamDeathMatch)
* Pickups (ShooterPickup)
* Main menu (ShooterHUD_Menu)


## Weapon Fire System

The base firing functionality for the weapons - such as ammo management, reloading, and replication - is implemented 
in the `AShooterWeapon` class.

The weapon is switched to its firing state on the local client and server (via RPC calls). `DetermineWeaponState()` 
is called in `StartFire()`/`StopFire()` which performs some logic to decide which state the weapon should be in and then 
calls `SetWeaponState()` to place the weapon into the appropriate state. Once in firing state, the local client will 
repeatedly call `HandleFiring()` which, in turn, calls `FireWeapon()`. Then it updates ammo and calls `ServerHandleFiring()` 
to do the same on the server. The server version is also responsible for notifying remote clients about each fired round via the 
`BurstCounter` variable.

Actions performed on the remote clients are purely cosmetic. Weapon fire is replicated using the `BurstCounter` 
property so that the remote clients can play animations and spawn effects - perform all of the visual aspects of the 
weapon firing.

### Instant-Hit Weapon Fire

Instant-hit detection is used for fast firing weapons, such as rifles or laser guns. The basic concept is that when the player 
fires the weapon, a line check is performed in the direction the weapon is aimed at that instant to see if anything would be hit.

This method allows high precision and works with actors that don't exist on server side (e.g., cosmetic or torn off). The 
local client performs the calculations and informs the server of what was hit. Then, the server verifies the hit and replicates 
it if necessary.

In `FireWeapon()`, the local client does a trace from the camera location to find the first blocking hit under the crosshair 
and passes it to `ProcessInstantHit()`. From there, one of three things happens:

* The hit is sent to the server for verification (`ServerNotifyHit()` - `ProcessInstantHit_Confirmed()`)
* If the hit actor doesn't exist on server, the hit is processed locally (`ProcessInstantHit_Confirmed()`)
* If nothing was hit the server is notified (`ServerNotifyMiss()`)


Confirmed hits apply damage to the hit actors, spawn trail and impact effects, and notify remote clients by setting data 
about the hit in the `HitNotify` variable. Misses just spawn trails and set `HitNotify` for remote clients, which look 
for `HitNotify` changes and perform the same trace as the local client, spawning trails and impacts as needed.

The instant-hit implementation also features weapon spread. For trace/verification consistency, local client picks a random 
seed each time `FireWeapon()` is executed and passes it in every RPC and `HitNotify` pack.

### Projectile Weapon Fire

Projectile fire is used to simulate weapons that fire rounds which are slower moving, explode on impact, affected by gravity, 
etc. These are cases where the outcome of the weapon fire can't be determined at the exact instant the weapon is fired, such 
as launching a grenade. For this type of weapon, an actual physical object, or _projectile_, is spawned and sent moving in the 
direction the weapon is aimed. A hit is determined by the projectile colliding with another object in the world.

For projectile fire, the local client does a trace from camera to check what actor is under the crosshair 
in `FireWeapon()`, similar to the instant-hit implementation. If the player is aiming at something, it adjusts the fire direction 
to hit that spot and calls `ServerFireProjectile()` on the server to spawn a projectile actor in the direction the weapon was aimed.

When the movement component of the projectile detects a hit on the server, it explodes dealing damage, spawning effects, and 
tears off from replication to notify the client about that event. Then, the projectile turns off collision, movement, and visibility 
and destroys itself after one second to give client time for replication update.

On clients, explosion effects are spawned in the `TornOff()` event.

## Player Inventory

The player's inventory is an array of `AShooterWeapon` references stored in the `Inventory` property of the player's 
Pawn (`AShooterCharacter`). The currently equipped weapon is replicated from the server, and additionally, `AShooterCharacter` 
stores its current weapon locally in `LocalCurrentWeapon` property, which allows the previous weapon to be un-equipped 
when a new weapon is equipped.

When the player equips a weapon, the appropriate weapon mesh - first-person for local, third-person for others - is attached
to the Pawn and an animation is played on the weapon. The weapon is switched to the equipping state for duration of the 
animation.

## Player Camera

In first-person mode, the Pawn's mesh is hard-attached to camera so that the arms always appear relative to the player's view. 
The downside of this approach is that it means the legs are not visible in the player's view, since the entire mesh rotates 
to match camera yaw and pitch.

The basic flow of the camera update is:

* `AShooterCamera::UpdateCamera()` is executed each tick
* `APayerCamera::UpdateCamera()` is called to update the camera rotation based on the player's input
* `AShooterCharacter::OnCameraUpdate()` is called to perform the calculations necessary to rotate the first person mesh to match the camera


When the player dies, it switches to a _death_ camera that has fixed location and rotation set in the `AShooterPlayerController::PawnDied()` 
handler. This function calls `AShooterPlayerController::FindDeathCameraSpot()` which cycles through several different 
locations and uses the first one not obstructed by level's geometry.

## Online Multiplayer

Online multiplayer matches are divided into 3 stages: 

* Warm up
* Match play
* Game over


Players join the game via the _login_ process handled by the `PreLogin()`, `Login()`, and `PostLogin()` functions in 
`AShooterGameMode`. `Login()` spawns the PlayerController for each player, sets their starting spot (e.g. the PlayerStart they 
will start at), and also calls `InitNewPlayer()` to allow for customizing the player based on the map URl options or other factors. 
for team-based games, this is where the players are assigned to teams. 

When the first player joins the game, the **warm up** stage begins. This is a short period, marked by a 
countdown timer, that gives other players a chance to join. During this period, the players are in _spectator_ mode allowing them 
to fly around the map. When the countdown timer expires, `StartMatch()` is called to restart all of the players and spawn their 
Pawns. 

Matches are timed, with the game time being calculated on server side in the `AShooterGameMode::DefaultTimer()` function, 
which is executed using a looping timer with a rate equal to the current time dilation that equates to once every _game_ second. 
This is stored in the `RemainingTime` property of the game replication info class (`AShooterGRI`), which is then replicated 
to clients. When the time remaining reaches zero, `FinishMatch()` is called to end the game session. This notifies all players 
the match has ended and disables movement and health.

## Menu System

The menu system is created using the [Slate UI framework](Programming/Slate). It consists of **menus**, **menu widgets**, and **menu items**. 
Each menu has a single menu widget (`SSHooterMenuWidget`) that is responsible for layout, internal even handling, and animations 
for all of the menu items. Menu items (`SSHooterMenuItem`) are compound objects that can perform actions and contain any number 
of other menu items. These can be as simple as a label or button or "tabs" that contain complete submenus made up of other menu items. 
This menu can be operated using keyboard or controller, but there is only limited mouse support at this time.

Each menu is _constructed_ via the `Construct()` function, which adds all of the necessary menu items, including sub-items, 
and attaches delegates to them where necessary. this is done using the helper methods - `AddMenuItem()`, `AddMenuItemSP()`, etc. - 
defined in the `MenuHelper` namespace in the `SShooterMenuWidget.h` file.

Navigation to previous menus is done using an array of shared pointers to menus and is stored in the `MenuHistory` variable of 
the menu widget. `MenuHistory` acts like stack to hold previously entered menus and makes it easy to go back. By using this method, 
no direct relationship is created between menus and the same menu can be reused in different places if necessary.

Animations are performed using interpolation curves defined in `SShooterMenuWidget::SetupAnimations()`. Each curve has start time, 
duration, and interpolation method. Animations can be played forward and in reverse and their attributes can be animated at specific time 
using `GetLerp()`, which returns a value from 0.0f to 1.0f. There are several different interpolation methods available defined in 
`ECurveEaseFunction::Type` in `SlateAnimation.h`.


### Main Menu



The main menu is opened automatically when the game starts by specifying the _ShooterEntry_ map as the default. It loads a special 
GameMode, `AShooterGameMode`, that uses the `AShooterPlayerController_Menu` class which opens the main menu by creating a new 
instance of the `FShooterMainMenu` class in its `PostbeginPlay()` function.

### In-game Menu


The in-game menu is created in the `PostInitializeComponents()` function of the `AShooterPlayerController` class, and opened or closed 
via the `OnToggleInGameMenu()` function.

### Options Menu

The options menu is available as a submenu of both the main menu and in-game menu. The only difference is how changes are applied:

* Accessed from the main menu, changes are applied when the player starts the game. 
* Accessed from the in-game menu, changes are applied immediately when the menu is closed.


The settings in the options menu are saved to `GameUserSettings.ini`, and loaded automatically at startup.


[/COMMENT]
