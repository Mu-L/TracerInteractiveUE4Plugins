Availability: Public
Title:Snow Examples
Crumbs:%ROOT%, Resources, Resources/Showcases/Effects
Description:An overview of the Snow Effects that exist as a part of the Particle Effects example included with UE4.
Related: Engine/Rendering/ParticleSystems/Reference/TypeData/GPUSprites
Related: Engine/Rendering/ParticleSystems/Reference/Modules/VectorField
Related: Resources/ContentExamples/EffectsGallery/1_E
Related: Engine/Rendering/ParticleSystems/Optimization
Version: 4.9



[REGION:fullwidth]
![](title_Snow.png)
[/REGION]

[TOC (start:2)]





The following Particle Systems are the snow effects that were created for this example. You are encouraged to open these up in Cascade to see how each effect was assembled.

For more information on Cascade and Particle Systems, please see the [Particle Systems](Engine/Rendering/ParticleSystems) documentation.

## Blizzard

![](section_Blizzard.png)(w:600)

**Content Browser Location:** _Game/Effects/Particles/Snow/P_Blizzard_

The Blizzard effect is a [GPU Sprite Particle System](Engine/Rendering/ParticleSystems\Reference\TypeData\GPUSprites) comprised of a massive amount of small sprites using a Lit Translucent Material. The Material used on these snowflakes makes use of the **Enable Responsive AA** flag, available in the _Translucency_ category of the Material Editor's Properties panel.

![](enableResponsiveAA.png)

This property is useful for small translucent objects (in this case, _snowflakes_), as those will likely lose silhouette quality due to Unreal Engine's Temporal Antialiasing. **Enable Responsive AA** should only be used in these sorts of cases however, as it creates aliasing of the background. 

[OBJECT:ComparisonSlider]
	[PARAM:before]
	![With Enable Responsive AA](WithEnable.png)(w:600)
	[/PARAM]
	[PARAM:after]
	![Without Enable Responsive AA](WithoutEnable.png)(w:600)
	[/PARAM]
[/OBJECT]


Large _unlit_ (i.e. _Emissive_) sprites generate widespread puffs of haze or fog, filling in the effect and adding a more complete sense of atmosphere. 

The Blizzard Particle System also makes use of a Velocity Grid with low velocity vectors in order to slow down the snowflake sprites as they enter the volume. This slowing effect simulates a sense of drag on the particles, and also aids in collisions, keeping them from feeling quite as rigid. Vector Fields can most easily be visualized in Cascade via the Viewport menu, selecting **View > Vector Fields**.

![](ShowVectorFields.png)
[REGION:caption]The yellow box represents the Vector Field, while the red lines within it represent the vectors at each location within the volume.[/REGION]

[REGION:tip]
	If using the _Collision (Scene Depth)_ module, you can boost the **Radius Bias** property to cause particles to appear to "glide around" a surface. This trick was used on the Blizzard Particle System to give the illusion of air influence around a surface.
[/REGION]


## Edge Blown Snow

![](EdgeBlown.png)(w:600)


**Content Browser Location:** _Game/Effects/Particles/Snow/P_Blizzard_EdgeBlow_

The Edge Blown Snow effect is a simple [GPU Sprite Particle System](Engine/Rendering/ParticleSystems\Reference\TypeData\GPUSprites) that simulates snow blowing in through the gaps and crevices of the cavern, as well as around the entrance. It can be found near the holes in the cave ceiling. Collisions are primarily handled via a _Collision (Scene Depth)_ module, which causes GPU particles to collide based on the _Scene Depth_ Geometry Buffer. 

![](EdgeBlownCascade.png) ![](CollisionSettings.png)(h:442)

This module allows the particles to interact with the world such that they collide with surfaces. They can also be made to stick to or slide along the surfaces of the level, depending on the settings of the Collision (Scene Depth) module.


* Use depth based collision to better integrate FX with the world.
* Snow particles collide and stick/slide along surfaces.

## Snow Flare

![](SnowFlare.png)(w:600)

The Snow Flare effect is a [GPU Sprite Particle System](Engine/Rendering/ParticleSystems\Reference\TypeData\GPUSprites) that is a smaller, simplified version of the Blizzard particle system, used specifically in areas where light needs to interact with the snow and mist. You can see this effect around the statue outside the cave.

The key difference is that in the _Blizzard_ effect, the mist particles were **unlit**. This means that they could not absorb the color of any lighting in the level and instead used the _Emissive_ channel for color. In the case of the _Snow Flare_ effect however, the mist particles use _Lit Translucency_ in their Material, meaning they can pick up the color of lights. The reason for the separation is that Lit Translucency has an additional instruction cost in the shader, meaning that if all the snow mist particles used it, the scene would be doing a lot of processing just for the occasional color change, thus causing an inefficiency and quite possibly a performance hit. 

Instead, this Snow Flare particle system is used as a localized version of the Blizzard effect, and is only placed where the mist particles _need_ to respond to lighting. This is far more efficient than having all the mist particles react to lighting at all times.

