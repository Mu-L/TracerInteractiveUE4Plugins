INTSourceChangelist:3108692
Availability: Public
Title:Stylized Rendering 머티리얼
Crumbs:%ROOT%, Resources, Resources/Showcases/Stylized
Description:UE4 에 포함된 Stylized Rendering 쇼케이스에 사용된 특수 머티리얼에 대한 개요입니다.
Related: Engine/Rendering/Materials
Related: Engine/Rendering/Materials/MaterialInstances
Related: Engine/Rendering/PostProcessEffects
Version: 4.9

한 폭의 미술 작품에 생동감을 불어넣었다는 느낌을 내기 위해서 씬의 머티리얼에 특수한 기술이 몇 가지 적용되었습니다. 두 가지 주요 예제는 나무꼭대기 근처에 보이는 "부유필법" 효과와, 다른 한 가지는 항상 플레이어쪽을 향하는 2D 스타일의 폴리지입니다.

[INCLUDE:Resources/Showcases/Stylized#InstanceNote]

### 부유필법 나뭇잎

[REGION:fullwidth]
![](TreeTopMaterial.png)
[/REGION]

[REGION:note]
이 머티리얼 망을 확인하기 위해서는, 콘텐츠 브라우저에서 **M_Tree_Leaf_Base_Solid** 머티리얼을 (더블클릭하여) 열어 주시기 바랍니다.
[/REGION]

씬의 나무 꼭대기 근처에는 떠다니는 붓 획으로 보이는 것이 나뭇잎의 느낌을 냅니다. 이 효과는 마스크드 머티리얼에 템포럴 안티에일리어싱을 합치는 것으로 가능했습니다.



[REGION:lightbox]
[![](FloatingBrushStrokesNetwork.png)(w:900)](FloatingBrushStrokesNetwork.png)
[/REGION]


이 망에서 핵심적인 부분은 DitherTemporalAA Material Function 입니다. 이 함수는 시간의 흐름에 따라 움직이는 점 (스티플) 패턴을 만들어 냅니다. _마스크드 머티리얼_ 의 오파시티 마스크의 일부로 사용되면, 마스크가 너무 거칠어 보이는 것을 방지하여 마스크가 훨씬 부드러워 보이도록 할 수 있습니다.

DitherTemporalAA 노드를 사용하지 않은 나무의 모습은 이렇습니다:

[OBJECT:ComparisonSlider]
	[PARAM:before]
	![With DitherTemporalAA](DitheredStrokes.png)(%Dither%)
	[/PARAM]
	[PARAM:after]
	![Without DitherTemporalAA](NonDitheredStrokes.png)(%Dither%)
	[/PARAM]
[/OBJECT]


[VAR:Dither]
w:600
[/VAR]

그러나 여기서 유념해야 할 것은, 이 기법은 엔진에 _기본적으로 활성화_ 되어있는 엔진 기능 **TemporalAA** 를 사용해야 한다는 점입니다. 포스트 프로세스 볼륨 안에서 _Misc_ 카테고리 아래 찾을 수 있는 **AA Method** 프로퍼티를 통해 덮어쓸 수 있습니다.

![](AAOverride.png)

### 폴리지 머티리얼

![](FoliageExample.png)

[REGION:note]
이 머티리얼 망을 확인하기 위해서는, 콘텐츠 브라우저에서 **M_Grass_Masked Material** 위치를 찾아 (더블클릭하여) 열어 주시기 바랍니다.
[/REGION]


터레인에는 일련의 폴리지가 흩어져 있는데, 평평하긴 해도 항상 플레이어를 향하고 있습니다. 이러한 방식은 머티리얼에서 World Position Offset Material 입력을 통해 정의되어 있습니다. 이 입력은 머티리얼 안의 벡터 연산을 통해 벡터의 버텍스를 편집할 수 있도록 해 줍니다. 오브젝트의 모양이나 크기를 변경할 수도 있고, 이 경우에는 그 지오메트리가 카메라를 향하도록 회전시킬 수도 있습니다.

이 처리를 하는 표현식은 **Face camera on 1 axis** 코멘트 블록 안에서 찾을 수 있습니다.


**클릭하면 확대**
[REGION:lightbox]
[![](FaceCameraNetwork.png)(w:800)](FaceCameraNetwork.png)
[/REGION]


이 망에서 특히나 중요한 부분은 Custom 표현식 노드로, 입력에 HLSL 코드를 작성할 수 있는 것입니다. 현재 다음과 같은 계산식을 처리하고 있습니다:

	float2 output; 
	float2 Input1; 
	output = atan2 (In.y,In.x); 
	return (output);

유용하긴 하지만 조심해서 사용해야 합니다. Custom 노드는 내부 최적화 프로세스인 머티리얼 노드 압축이 되지 않습니다. 실제적으로 이 머티리얼의 퍼포먼스를 약간 떨어뜨리긴 합니다.


