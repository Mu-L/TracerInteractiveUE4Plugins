Availability:NoPublish
Title:Blueprints Overview
Crumbs:
Description: This gives a very quick overview of Blueprint concepts

[EXCERPT:1]

[VAR:StageTitle]
Welcome to Blueprints!
[/VAR]

Blueprints enable you to create entirely new gameplay behavior through the use of visual scripting. This tutorial walks you through the basics of Blueprints and using the Blueprint Editor.

Each Blueprint contains one or more graphs, which hold nodes connected with wires to set up properties and functionality for your Actor.  

![](BP_Overview_small.png)

For example, the above graph changes the color of the rocket from blue to orange once gameplay begins.

![](RocketChange.png)

[/EXCERPT:1]



[EXCERPT:2]

[VAR:StageTitle]
Blueprint Classes and Level Blueprints
[/VAR]

Both Level Blueprints and Blueprint Classes contain graphs, and allow you to set up gameplay logic. 

A Blueprint Class allows you to set up an Actor, or a gameplay object that is placed in your level.  Whether this is the character you control, or an item you pick up, its behavior is set up in graphs contained within the Blueprint Class. The Blueprint Class sets up all the aspects of the Actor, including components and properties.

![](ClassBlueprint.png)

While editing Blueprints Class, in addition to Graph Mode where you can edit graphs, you can add components like Static Meshes and Point Lights in Components Mode, and set default values for properties in Defaults Mode.

![](BPEditorModes.png)

A Level Blueprint is a specialized type of Blueprint that acts as a level-wide global event graph. Events pertaining to the level as a whole, or specific instances of Actors within the level, are set up in the Level Blueprint. Those familiar with Unreal Engine 3 should be familiar with this concept as this is very similar to how Kismet worked in Unreal Engine 3.


[/EXCERPT:2]

[EXCERPT:3]

[VAR:StageTitle]
Adding Nodes
[/VAR]

Nodes are the basic building blocks used when making Blueprint graphs. Each node has a set functionality, as well as input (1) and/or output (2) pins.

![](SpawnActor.png)

There are several ways to add nodes to the graph. Right-click anywhere in the graph, and the context menu will appear, showing all the nodes that can be added to this type of Blueprint.

![](RightClickContextMenu.png)
 
Context menus also appear when you click on a pin, drag a wire from it, and release the wire in an empty spot on the graph. These context menus show nodes that can accept connections from that type of pin.

![](wire_context_menu.png)

[/EXCERPT:3]


[EXCERPT:4]

[VAR:StageTitle]
Wiring Nodes
[/VAR]

The input and output pins on nodes can be connected with execution and data wires to program your desired Blueprint functionality. Execution pins are white arrows, while data pins are circles or array icons with different colors for each variable type.  To connect two pins, left-click and hold on one pin, then drag the wire to the other pin.  

If the pins can be wired together because they are the same type, a green check will appear when your mouse cursor is over the destination pin.

![](CorrectWiring.png)

If the pins can be wired together because they are compatible types, like integers (whole numbers) and floats (numbers with decimal points), a message will appear indicating that a node will be added to automatically convert the input type into the output type.

![](ConvertWiring.png)

If the pins cannot be wired together because they are not the same type and a conversion does not exist between the types, a red circle with a line through it will appear, along with a message about the incompatibility.

![](IncorrectWiring.png)
[/EXCERPT:4]



[EXCERPT:5]

[VAR:StageTitle]
Blueprint Flow
[/VAR]

This diagram shows the order of the flow of execution and data through a Blueprint. 

![](OrderOfExecution.png)
 

1. The Event BeginPlay executes when gameplay begins, and sends an execution signal to the Print String node.

2. The value of the Name variable is obtained, and appended to the string "Hello, ".  This is because the Return Value of the Append node is wired to the In String input value of the Print String node. All input data pins must be calculated before a node can execute.

3. Because it has received an execution signal (1) and had its input values calculated (2), the Print String node can execute, so it prints the "Hello, [Name]" string to the screen.





[/EXCERPT:5]



[EXCERPT:6]

[VAR:StageTitle]
My Blueprint
[/VAR]

![](MyBlueprint.png)

Each Blueprint can contain many elements, including graphs, functions, and variables.  The My Blueprint tab is a directory for your Blueprint, so that you can access each of these elements easily, as well as get an overview of what is included in your Blueprint.

Double-clicking on graphs, functions, or macros in the My Blueprint tab opens their graphs.  Dragging and dropping functions, macros, or variables from the My Blueprint tab into any graph tab adds a reference to that element to the graph.

The My Blueprint tab also allows you to create new variables, functions, macros, graphs, and event dispatchers. 


[/EXCERPT:6]






[EXCERPT:7]

[VAR:StageTitle]
Additional Resources
[/VAR]

For further reading on Blueprints, you can click on the following link:
 
[Blueprints Documentation](DOCLINK:Engine/Blueprints)

You can also click the video below to get started learning about Blueprints with a complete set of video tutorials:

[![](blueprint_video.png)](http://www.youtube.com/playlist?list=PLZlv_N0_O1gaG5BW72It4chjhypxIO9ZB)

[/EXCERPT:7]

