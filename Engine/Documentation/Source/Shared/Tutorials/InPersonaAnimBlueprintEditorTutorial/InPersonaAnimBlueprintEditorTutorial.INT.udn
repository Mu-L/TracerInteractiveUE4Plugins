Availability:NoPublish
Title:Welcome to Persona
Crumbs:
Description: The contents of all introductory tutorials for Unreal Engine 4


[EXCERPT:Animation1]
[VAR:StageTitle]
Welcome to Persona: Animation Blueprint Mode
[/VAR]

Welcome to the Animation Blueprint editor portion of Persona. This quick start guide describes the basic usage of commonly used interface elements. Links to the documentation are provided in most sections, so you can read further on any topic that catches your interest.

![](header.png)

[/EXCERPT:Animation1]


---

[EXCERPT:ABP1]
[VAR:StageTitle]
Animation Blueprints
[/VAR]

An Animation Blueprint is a specialized Blueprint whose graphs control the animation of a SkeletalMesh. It can perform blending of animations, directly control the bones of the skeleton, and output a final pose for a SkeletalMesh each frame.

![](animGraph2.png)

Your Actor can have SkeletalMeshComponents. Each SkeletalMeshComponent references a SkeletalMesh to animate and can be associated with an instance of an Animation Blueprint.

[See the Animation Blueprints documentation for further information.](DOCLINK:Engine/Animation/AnimBlueprints)

[/EXCERPT:ABP1]

---

[EXCERPT:ABP2]
[VAR:StageTitle]
AnimGraphs
[/VAR]

The AnimGraph is used to evaluate a final pose for the SkeletalMesh for the current frame. By default, each Animation Blueprint has an AnimGraph which can have animation nodes placed within it to sample AnimationSequences, perform animation blends, or control bone transforms using SkeletalControls. The resulting pose is then applied to the SkeletalMesh each frame.

![](animBP.png)

[See the AnimGraph documentation for more information.](DOCLINK:Engine/Animation/AnimBlueprints/AnimGraph)

[/EXCERPT:ABP2]

---

[EXCERPT:ABP3]
[VAR:StageTitle]
Event Graphs
[/VAR]

Every Animation Blueprint has at least one EventGraph, which is a standard graph that uses a collection of special animation-related events to initiate sequences of nodes. The most common use of the EventGraph is to update values used by BlendSpaces and other blend nodes to drive animations within the AnimGraph.

![](BP_Overview.png)

[See the EventGraph documentation for more information.](DOCLINK:Engine/Animation/AnimBlueprints/EventGraph)

[/EXCERPT:ABP3]

---

[EXCERPT:3]

[VAR:StageTitle]
Adding Nodes
[/VAR]

Nodes are the basic building blocks used when making Blueprint graphs. Each node has a set functionality, as well as input (1) and/or output (2) pins. Note that AnimGraph nodes use a small human figure to represent the pin for execution flow.

![](SpawnActor.png)

There are several ways to add nodes to the graph. Right-click anywhere in the graph, and the context menu will appear, showing all the nodes that can be added to this type of Blueprint.

![](RightClickContextMenu.png)
 
Context menus also appear when you click on a pin, drag a wire from it, and release the wire in an empty spot on the graph. These context menus show nodes that can accept connections from that type of pin.

![](wire_context_menu.png)

[/EXCERPT:3]

---

[EXCERPT:4]

[VAR:StageTitle]
Wiring Nodes
[/VAR]

The input and output pins on nodes can be connected with execution and data wires to program your desired Blueprint functionality. Execution pins are white arrows, while data pins are circles or array icons with different colors for each variable type.  To connect two pins, left-click and hold on one pin, then drag the wire to the other pin.  

If the pins can be wired together because they are the same type, a green check will appear when your mouse cursor is over the destination pin.

![](CorrectWiring.png)

If the pins can be wired together because they are compatible types, like integers (whole numbers) and floats (numbers with decimal points), a message will appear indicating that a node will be added to automatically convert the input type into the output type.

![](ConvertWiring.png)

If the pins cannot be wired together because they are not the same type and a conversion does not exist between the types, a red circle with a line through it will appear, along with a message about the incompatibility.

![](IncorrectWiring.png)
[/EXCERPT:4]

---

[EXCERPT:ABP4]
[VAR:StageTitle]
State Machines
[/VAR]

State Machines provide a graphical way to break the animation of a Skeletal Mesh into a series of States. These states are then governed by Transition Rules that control how to blend from one state to another. As a tool, they greatly simplify the design process for Skeletal Mesh animation, in that you can create a graph that easily controls how your characters can flow between types of animation without having to create a complex Blueprint network.

![](statMachine02.png)

A great way to think of them is as a way to break all possible animations for your character into an easy-to-read flow chart, in which you can watch the Skeletal Mesh's state move throughout the chart.

[See the State Machines documentation for more information.](DOCLINK:Engine/Animation/StateMachines)

[/EXCERPT:ABP4]

---

[EXCERPT:Conclusion]
[VAR:StageTitle]
Conclusion
[/VAR]

For more information on the topics covered in this overview, see these documents:

[Animation Blueprints](DOCLINK:Engine/Animation/AnimBlueprints)
[AnimGraph](DOCLINK:Engine/Animation/AnimBlueprints/AnimGraph)
[EventGraph](DOCLINK:Engine/Animation/AnimBlueprints/EventGraph)
[Animation Blueprint Interface Reference](DOCLINK:Engine/Animation/AnimBlueprints/Interface)
[State Machines](DOCLINK:Engine/Animation/StateMachines)

![](Stage1.png)

[/EXCERPT:Conclusion]
