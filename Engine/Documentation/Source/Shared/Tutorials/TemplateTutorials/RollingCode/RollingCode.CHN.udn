INTSourceChangelist:3108692
Availability:NoPublish
Title:Rolling 总览
Description:Rolling 模板总览
Crumbs:

[EXCERPT:StageMain]
[VAR:StageTitle]
Rolling 模板。
[/VAR]

![](RollingScreen.png)

这是使用 C++ 的滚球游戏模板。它非常简单，由一个滚球和关卡所组成。 
关卡中有一些平台和方块。其中部分可以被打翻，而部分则不可以。
此模板中几乎所有的实际“工作”均由引擎自带的物理机制完成。

使用键盘的 WASD 键或控制器的左摇杆即可在关卡中移动，按下空格键或控制器的 A 键使球跳出。

此模板中的主要类为：
* MarbleBall - 这是游戏 pawn 类 - 球自身。
* MarbleGameMode - 游戏模式类。 

现在我们来看具体的细节。

[/EXCERPT:StageMain]

[EXCERPT:StageOverview]

[VAR:StageTitle]
滚球游戏 - 总览
[/VAR]

从任意模板创建项目时，虚幻引擎编辑器将在选中的文件夹中创建文件，并使用项目命名创建这些文件。生成的源代码将被放置在一个名为 Source 的文件夹中，此文件夹保存在项目文件夹中。便于教程演示，我们将项目命名为 Marble。因此将拥有一个 Source 文件夹，而该文件夹又包含一个文件夹和两个文件。
Marble [文件夹]
Marble.Target.cs
MarbleEditor.Target.cs

这两个 cs 文件包含虚幻编译系统使用的项目创建规则。以下为详细解释：
[Unreal build system](DOCLINK:Programming/UnrealBuildSystem)

Marble 文件夹包含 3 个文件夹和另一个 cs 文件：
Private [文件夹]
Public [文件夹]
Resources [文件夹]
Marble.build.cs

该 cs 文件用于定义项目拥有的引擎模块依赖性。它也用于指定项目的包含路径 - 在此例中并无包含路径。 
此项目依赖的 4 个模块为：
Core
如名称所示，它是核心引擎模块。 
CoreUObject
Core Uojbect 模块 - 因为该项目使用派生自 UObject 的类，所以需要该模块。
Engine
引擎核心。
InputCore
输入模块因为项目中需要进行交互，所以需要该模块。

Resources 文件夹包含应用程序的一些系统文件（图标和信息文件。可根据需要进行编辑）

Private 包含项目生成的所有 CPP 文件，Public 文件夹包含头文件。
在这些文件夹中（假设项目命名为 Marble）的文件为 Marble.cpp。
这是项目主文件，只包含一个处理游戏模块实现的宏。

MarbleBall.cpp
这是模板的主代码。它负责配置球，并处理用户交互。

MarbleGameMode.cpp
此类指定游戏当前的“模式”。它通常包含“游戏规则”等内容。 


[/EXCERPT:StageOverview]

[EXCERPT:StagePawnSummary]

[VAR:StageTitle]
The Rolling Game Pawn - 概要
[/VAR]

![](MyPawn.png)

此类为 pawn 的实现。此例中，pawn 是一个由球形模型所代表的球。

该类只包含 6 个函数。一起来了解。

已创建 MarbleBall 类派生自引擎的 Pawn 类。如需了解更多内容，请查阅 [Pawn 总览](DOCLINK:Gameplay/Framework/Pawn)。
简而言之，此 pawn 类是所有 actor 的基类，可为玩家或 AI 所拥有。
[/EXCERPT:StagePawnSummary]


[EXCERPT:StagePawnConstruct]

[VAR:StageTitle]
The Rolling Game Pawn - 构造
[/VAR]

此文件中的第一个函数为构造函数。
[Constructor](CODELINK:Private/[PROJECT]Ball.cpp,6,0)
此构造函数的唯一参数是一个 FObjectInitializer 类型。真正的 C++ 构造函数被调用后，此类将用于完成对象的创建。 
我们将在此构建函数中分配模型并创建滚动球所需的组件。

在构建函数中执行的首个操作是找到球的模型。 
[首先要找到模型，](CODELINK:Private/[PROJECT]Ball.cpp,13,13)
代码创建了一个简单的结构体，它将找到指向指定模型的指针。在此例中为 [BallMesh](ASSETLINK:SELECT,BallMesh)
该助手将尝试在应用程序包中找到一个静态模型。如您所见，我们在结构体中传递需要使用的模型名。
然后创建此结构体的一个实例。如模型存在，则使用此实例访问指向所需模型的指针。

下一步，创建一个静态模型组件并对其命名。
[命名模型组件](CODELINK:Private/[PROJECT]Ball.cpp,21,5)
完成此操作后，使用构建函数助手分配搜索的模型。 
[分配找到的模型](CODELINK:Private/[PROJECT]Ball.cpp,22,5)
下一步需要为新建球组件的形体实例分配一个碰撞配置文件。 
[分配碰撞配置文件](CODELINK:Private/[PROJECT]Ball.cpp,23,5)
以下几行均为设置，因此定义球如何移动的基础参数将告知组件进行物理模拟。
[设置一些组件参数](CODELINK:Private/[PROJECT]Ball.cpp,24,5)
最后，告知组件需要获得形体碰撞的通知。
[启用碰撞通知](CODELINK:Private/[PROJECT]Ball.cpp,28,5)
完成对组件的设置后，将其设为 ROOT 
[将组件设为根](CODELINK:Private/[PROJECT]Ball.cpp,29,5)

下一步为弹珠创建一个 SpringArm 组件。 
[创建弹簧臂组件](CODELINK:Private/[PROJECT]Ball.cpp,32,5)
此弹簧臂附加在球上，我们将逐步附加一个摄像机。Spring arm 类尝试使其子项保持和父项之间的固定距离，但也将处理碰撞，按需求收缩并回弹。
此处弹簧臂的作用与摄像机升降臂相似。创建并将其附加到根组件（即为代表球的静态模型）。
然后设置一些基本参数，定义该弹簧臂的行为。在此处<LINK>可查看弹簧臂组件的完整细节。为弹簧臂设置长度，告知其不要随球旋转，设置初始旋转，等等。
[设置弹簧臂组件参数](CODELINK:Private/[PROJECT]Ball.cpp,34,5)

下一步创建一个摄像机，以便查看球。此处完成摄像机的创建即可，将其附加到弹簧臂，并告知其不要旋转。
[创建摄像机组件](CODELINK:Private/[PROJECT]Ball.cpp,42,5)

最后为球设置一些特定参数。 
RollTorque	- 	进行交互并尝试移动球时所应用的扭矩量。
JumpImpulse	- 	需要球跳跃时应用的冲击力。
bCanJump 	- 	用于控制球的跳动 - 在球跳动时进行设置，球击中物体后清除。如为 true，则拒绝其他跳动，否则将重复按下跳动，将跳跃冲击力施加到球上。
[设置一些默认物体参数](CODELINK:Private/[PROJECT]Ball.cpp,47,5)

接下来查看输入。

[/EXCERPT:StagePawnConstruct]


[EXCERPT:StageSetupInput]

[VAR:StageTitle]
The Rolling Game Pawn - SetupPlayerInputComponent
[/VAR]

这部分将说明输入处理器的设置及其实现。
如需了解输入 API 的细节，请查看此处：
[输入总览](DOCLINK:Gameplay/Input)

因此需要首先设置处理器。
[设置 PlayerInput 组件](CODELINK:Private/[PROJECT]Ball.cpp,53,0)
这是一个覆盖函数。它被传至一个 UInputComponent 指针。我们使用它将控制处理器和 3 个控制绑定起来。

[首先绑定一个轴。](CODELINK:Private/[PROJECT]Ball.cpp,56,0)
将 3 个参数传递到：“MoveRight”
这是轴绑定的名称。它与编辑器中定义的输入绑定相关。稍后对此进行讲解。
这是指向物体的指针
&AMarbleBall::MoveRight
该函数调用后用于处理来自 MoveRight 绑定的输入。

下一行几乎相同，唯一的不同点是将“MoveForward”绑定和“MoveForward”函数绑定起来。 
此处传递的两个函数必须匹配定义的委托。对 BindAxis 而言，这是拥有单一浮点的空隙函数。浮点代表范围在 -1 到 1 之间的轴值。

[最后的绑定是一个操作](CODELINK:Private/[PROJECT]Ball.cpp,59,0)
如您所见，它拥有 4 个参数。
首先是绑定的命名。
之后是需要绑定的操作，此例中为按下。最后两个参数几乎一致，因为它们均针对轴绑定。唯一的不同是它的委托不带参数。 
Jumping 只是一个简单的按键事件

[/EXCERPT:StageSetupInput]

[EXCERPT:StageSetupMovement]

[VAR:StageTitle]
The Rolling Game Pawn - 移动函数
[/VAR]


此处有两个移动函数。每根轴各一个。
[MoveRight](CODELINK:Private/[PROJECT]Ball.cpp,62,0)
它拥有范围在 -1 到 1 之间的浮点。摇杆停止移动时，它也将介入，参数为零。
该函数基于 RollTorque 成员变量计算 X 轴上的扭矩矢量，再将其乘以摇杆的运动量。然后使用 AddTorque 函数将其作为扭矩传递到球组件。球组件更新后将更新组件扭矩并做出相应反应。
[MoveForward](CODELINK:Private/[PROJECT]Ball.cpp,68,0)
这和 MoveRight 的功能完全相同，唯一的不同是它会为 Y 轴创建扭矩矢量。

最后的函数将形成球的跳动。
[JumpFunction](CODELINK:Private/[PROJECT]Ball.cpp,74,0)
它将检查是否已进入跳动状态。如否，则使用 JumpImpulse 成员在 Z 轴上创建一个冲击力矢量，并将其作为冲击力传递到球组件。
最后设置标记，说明正在跳动。

[/EXCERPT:StageSetupMovement]

[EXCERPT:StageSetupImpact]
[VAR:StageTitle]
The Rolling Game Pawn - 影响
[/VAR]

[ReceiveHit](CODELINK:Private/[PROJECT]Ball.cpp,84,0)
这是文件中的最后一个函数。物体和世界场景发生碰撞时将调用此函数。它拥有 8 个参数。Actor API 文档有此函数参数的详细说明。然而在此例中我们未用到这些参数，因此不对其进行说明。
首先调用基类。
最后清除按下跳跃键时设置的标记。当然，我们也可以对影响进行精巧复杂的设置，在认定跳动结束之前确定击中的物体。但为保证模板的整洁，我们简单地将影响处理为跳动结束。

[/EXCERPT:StageSetupImpact]

	
[EXCERPT:StageInputBindings]

[VAR:StageTitle]
The Rolling Game Pawn - 输入绑定
[/VAR]

最后的部分说明如何将输入和控制器按钮/键盘按键关联起来。 
此处的文档中有详细说明：
[输入总览](DOCLINK:Gameplay/Input)

设置控制绑定的首推方法是通过编辑器 GUI 进行。打开编辑器，点击 Edit 菜单，然后选择 Project Settings。点击左边面板中名为INPUT 的部分。
此操作将打开输入页面，可在此对输入事件名等进行配置。我们感兴趣的部分是绑定。
![](Bindings.png)

第一部分是操作按钮
![](ActionMap.png)

这些绑定键将生成简单事件。如按下映射中定义的按钮，将触发事件。
点击操作映射旁的箭头，该部分将展开，显示 2 个绑定。如展开 Jump 映射，则会看到绑定。 
![](ActionMapExpanded.png)
因此，按下空格键或手柄按键后将触发一个 Jump 事件。此操作将调用在 SetupPlayerInputComponent 函数 
中绑定的委托函数。

现在点击轴映射旁边的箭头，将出现一个映射列表。这包含 MoveForward 和 MoveRight 的输入。点击 MoveForward 将看到与该绑定相关的 3 个键/按钮。
![](AxisMap.png)

因此，GamePadLeft X、Left 或 Right 被推动/按下后将触发事件，调用委托。
它们之间有一些细微的差别 - 其中一个是控制器绑定，其余两个是按键绑定。 
控制器绑定的标度为 1。这将允许摇杆获得所需的效果，没有问题。如将标度改为 -1，则会出现轴翻转的效果。 
其余两个为按键绑定 - 它们不拥有类似控制器轴摇杆 -1 到 1 的范围 - 它们返回 0-1（因为它们是键盘按键，不是游戏控制器上的类比按键；实时上它们将是 0 或 1）。Left 绑定上的标度意味着它将转换 1 到 -1 - 形成摇杆左移的效果。

[/EXCERPT:StageInputBindings]

[EXCERPT:StageGameMode]

[VAR:StageTitle]
The Rolling Game Mode
[/VAR]

这是个非常简单，但十分重要的类。此类在游戏开始时指定使用的默认类。这就是构造函数执行的全部操作 - 它将 MarbleBall 静态类实例放入 DefaultPawnClass 成员，该成员告知游戏模式在游戏开始时对其进行使用。

我们也会使用此类控制游戏模式 - 控制规则和逻辑等。 

最终生成的文件拥有生成项目的相同命名（EG Marble.cpp），会将游戏简单实现为一个模块，并设置与此相关的诸多内容 - 模块名、类等。同时也会用于虚幻编译。 
带此文件的头文件包含主要核心标头。 

[/EXCERPT:StageGameMode]

