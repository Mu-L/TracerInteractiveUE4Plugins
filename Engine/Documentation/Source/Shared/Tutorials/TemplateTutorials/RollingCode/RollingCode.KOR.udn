INTSourceChangelist:3108692
Availability:NoPublish
Title:굴리기 템플릿
Description:굴리기 템플릿 개요입니다.
Crumbs:

[EXCERPT:StageMain]
[VAR:StageTitle]
굴리기(Rolling) 템플릿입니다.
[/VAR]

![](RollingScreen.png)

C++ 를 사용하여 굴리기(Rolling) 게임을 제작하는 템플릿입니다. 매우 단순하여 구르는 공과 굴러다닐 레벨이 전부입니다.
레벨 자체는 몇 개의 플랫폼과 큐브로 이루어집니다. 그 중 일부는 넘어뜨릴 수 있는 것도 있고 아닌 것도 있습니다.
이 템플릿의 실제 '작업' 거의 대부분이 엔진 내 피직스 엔진으로 처리됩니다.

키보드의 WASD 키나 콘트롤러의 왼쪽 스틱으로 레벨을 돌아다닐 수 있으며, 스페이스 바나 콘트롤러의 A 버튼으로 볼을 점프시킬 수 있습니다.

이 템플릿의 주요 클래스는:
* MarbleBall - 게임의 Pawn 클래스로, 볼 자체입니다.
* MarbleGameMode - Game Mode 클래스입니다.

그러면 더욱 자세히 살펴보겠습니다.

[/EXCERPT:StageMain]

[EXCERPT:StageOverview]

[VAR:StageTitle]
굴리기 게임 - 개요
[/VAR]

아무 템플릿에서 프로젝트를 생성하면 언리얼 엔진 에디터는 선택한 폴더에 파일을 만든 후 프로젝트 이름을 사용하여 파일을 생성합니다. 생성되는 소스 코드는 프로젝트에 선택한 폴더 내 Source 라는 이름의 폴더에 들어갑니다. 이 튜토리얼 목적상 프로젝트 이름을 Marble 이라 지었다 가정하겠습니다. 즉 이 경우 Source 폴더에는 다음과 같은 폴더와 두 개의 파일이 들어갑니다.
Marble [폴더]
Marble.Target.cs
MarbleEditor.Target.cs

두 개의 cs 파일에는 언리얼 빌드 시스템이 사용하는 프로젝트 생성용 규칙이 들어갑니다. 이 부분에 대한 상세 설명은 여기서 확인해 보실 수 있습니다:
[언리얼 빌드 시스템](DOCLINK:Programming/UnrealBuildSystem)

Marble 폴더 안에는 세 개의 폴더와 또하나의 cs 파일이 있습니다:
Private [폴더]
Public [폴더]
Resources [폴더]
Marble.build.cs

여기 있는 CS 파일은 프로젝트에 어떤 엔진 모듈 종속성이 있는지 정의하는 데 사용됩니다. 프로젝트의 include 경로를 지정하는 데도 사용되나, 여기서는 있지 않습니다.
프로젝트의 종속성 모듈은 네 가지입니다:
Core
이름에서 알 수 있듯이 코어 엔진 모듈입니다.
CoreUObject
Core UOjbect 모듈은, 프로젝트가 UObject 에서 파생된 클래스를 사용하고 있기 때문에 이것이 필요합니다.
Engine
일반적인 엔진 코어입니다.
InputCore
Input 모듈입니다. 프로젝트에서 상호작용이 필요하기에 이 모듈이 필요합니다.

Resources 폴더에는 앱에 필요한 (Icon 및 info 파일 등) 시스템 파일이 들어있으며, 필요에 따라 편집할 수 있습니다.

Private 폴더에는 프로젝트가 생성한 모든 CPP 파일이, Public 폴더에는 헤더 파일이 들어있습니다.
여기 있는 파일은 (프로젝트 이름이 Marble 이라 가정한다면):
Marble.cpp
주요 프로젝트 파일로, 게임 모듈 자체의 구현을 담당하는 매크로만 들어있습니다.

MarbleBall.cpp
템플릿의 주요 코드입니다. 공에 대한 환경설정 및 사용자와의 상호작용 처리를 담당합니다.

MarbleGameMode.cpp
게임의 현재 '모드'에 대해 서술하는 클래스입니다. 보통 '게임 규칙' 등이 들어갑니다.


[/EXCERPT:StageOverview]

[EXCERPT:StagePawnSummary]

[VAR:StageTitle]
굴리기 게임 Pawn - 요약
[/VAR]

![](MyPawn.png)

이 클래스는 폰의 구현입니다. 이 경우 폰은 구체 메시로 표현되는 공입니다.

클래스에는 함수가 여섯 개 뿐입니다. 한 번 살펴봅시다.

생성된 MarbleBall 클래스는 엔진의 Pawn 클래스에서 파생됩니다. 이에 대한 세부사항은 
[폰 개요](DOCLINK:Gameplay/Framework/Pawn) 문서를 참고하세요.
간단히 이 폰 클래스는 플레이어나 AI 가 빙의 가능한 모든 액터에 대한 베이스 클래스입니다.
[/EXCERPT:StagePawnSummary]


[EXCERPT:StagePawnConstruct]

[VAR:StageTitle]
굴리기 게임 Pawn - Construction
[/VAR]

파일에 있는 첫 함수는 constructor, 생성자입니다.
[생성자](CODELINK:Private/[PROJECT]Ball.cpp,6,0)
생성자의 유일한 파라미터는 FObjectInitializer 유형입니다. 실제 C++ 생성자 호출 이후 오브젝트 생성을 마무리하는 데 사용되는 클래스입니다.
메시를 할당하고 구르는 공에 필요한 컴포넌트를 생성하는 곳이 바로 여기 생성자입니다.

생성자에서 하는 첫 번째 작업은 볼에 사용하고자 하는 메시를 찾는 것입니다.
[처음 할 작업은 메시 찾기](CODELINK:Private/[PROJECT]Ball.cpp,13,13)
코드에서는 지정한 메시로의 포인터를 찾아주는 간단한 구조체를 생성합니다. 여기서는 
[BallMesh](ASSETLINK:SELECT,BallMesh)
어플리케이션 패키지 안에서 스태틱 메시를 찾아보는 헬퍼입니다. 보시듯이 구조체에 사용하고자 하는 메시의 이름을 전달할 수 있습니다.
그런 다음 이 구조체의 인스턴스를 생성합니다. 메시가 존재한다면 이 인스턴스를 사용하여 필요한 메시로의 포인터에 접근하면 됩니다.

다음 스태틱 메시 컴포넌트를 만들어 이름을 지어줍니다.
[메시 컴포넌트 이름짓기](CODELINK:Private/[PROJECT]Ball.cpp,21,5)
이 작업을 마치고 나면 생성자 헬퍼를 사용하여 검색했던 메시를 할당합니다.
[찾은 메시 할당](CODELINK:Private/[PROJECT]Ball.cpp,22,5)
다음에 할 작업은 새로운 볼 컴포넌트의 바디 인스턴스에 콜리전 프로파일을 할당하는 것입니다.
[콜리전 프로파일 할당](CODELINK:Private/[PROJECT]Ball.cpp,23,5)
다음 몇 줄은 단지 공 이동 방식을 정의하고 컴포넌트에 물리 시뮬레이션을 적용시키는 기본적인 파라미터를 설정합니다.
[컴포넌트 파라미터 셋업](CODELINK:Private/[PROJECT]Ball.cpp,24,5)
마지막으로 컴포넌트에다 우리가 올바른 바디 콜리전에 노티파이를 받고자 한다는 것을 알려줍니다.
[콜리전 노티파이 켜기](CODELINK:Private/[PROJECT]Ball.cpp,28,5)
이제 컴포넌트 셋업을 마쳤으니 루트로 설정합니다.
[컴포넌트를 루트로 설정](CODELINK:Private/[PROJECT]Ball.cpp,29,5)

다음으로 Marble 에 만들어 줄 것은 SpringArm, 스프링 팔 컴포넌트입니다.
[스프링 팔 컴포넌트 생성](CODELINK:Private/[PROJECT]Ball.cpp,32,5)
이 스프링 팔은 공에 붙으며, 결국은 거기에 카메라도 붙이게 됩니다. SpringArm 클래스는 부모에서 일정한 거리에 자손을 유지시키려 하지만, 필요에 따라 수축과 원상회복을 하면서 콜리전 처리를 하기도 합니다.
여기서 스프링 팔은 일종의 카메라 지지대 역할을 합니다. 생성하여 루트 컴포넌트에 붙여주는데, 우리 공인 스태틱 메시를 말합니다.
그 후 이 스프링 팔의 작동방식을 정의하는 기본적인 파라미터를 설정해 줍니다. 스프링 팔 컴포넌트 관련 세부사항은 여기서 찾을 수 있습니다 <LINK>. 팔에 길이를 정해주고, 공과 같이 회전하지 말라고 일러주고, 초기 회전값을 주고, 등등입니다.
[스프링 팔 컴포넌트 파라미터 셋업](CODELINK:Private/[PROJECT]Ball.cpp,34,5)

다음으로 공을 볼 수 있도록 카메라를 생성합니다. 카메라를 생성하고, 스프링 팔에 붙인 다음 회전하지 말라고 해 주는 것 외에 별달리 할 것이 없습니다.
[카메라 컴포넌트 생성](CODELINK:Private/[PROJECT]Ball.cpp,42,5)

마지막으로 공 전용 파라미터를 조금 설정해 줍니다.
RollTorque	- 공과 상호작용하여 움직이도록 할 때 적용할 토크 양입니다.
JumpImpulse	- 볼을 점프시키고자 할 때 적용할 임펄스 양입니다.
bCanJump - 볼의 점프 제어에 사용됩니다. 볼이 점프하면 설정하고, 뭔가에 닿으면 해제합니다. True 면 점프를 다시 하지 못하도록 하여, 점프 키를 계속 눌러 볼에 점프 임펄스가 계속 가해지지 않도록 할 수 있습니다.
[오브젝트 파라미터 기본값 셋업](CODELINK:Private/[PROJECT]Ball.cpp,47,5)

다음으로 입력을 살펴보겠습니다.

[/EXCERPT:StagePawnConstruct]


[EXCERPT:StageSetupInput]

[VAR:StageTitle]
굴리기 게임 Pawn - SetupPlayerInputComponent
[/VAR]

이 섹션에서는 인풋 핸들러와 그 구현 셋업에 대해 다뤄보겠습니다.
인풋 API 관련 세부사항은 링크를 참고하세요:
[인풋 개요](DOCLINK:Gameplay/Input)

먼저 핸들러 셋업이 필요합니다.
[SetupPlayerInputComponent](CODELINK:Private/[PROJECT]Ball.cpp,53,0)
오버라이드된 함수입니다. UInputComponent 포인터를 전달합니다. 이것을 사용해서 세 개의 콘트롤에 콘트롤 핸들러를 바인딩합니다.

[먼저 축을 바인딩합니다.](CODELINK:Private/[PROJECT]Ball.cpp,56,0)
여기에 파라미터 셋을 전달합니다:
"MoveRight"
축 바인딩 이름입니다. 에디터에 정의된 인풋 바인딩에 관련됩니다. 그 방법에 대해서는 나중에 다루겠습니다.
this
우리 오브젝트를 가리키는 this 포인터입니다.
&AMarbleBall::MoveRight
MoveRight 바인딩에서 입력 처리를 위해 호출시키고자 하는 함수입니다.

다음 줄은 거의 똑같은데, "MoveForward" 바인딩을 "MoveForward" 함수에 바인딩한다는 점만 다릅니다.
여기서 전달하는 두 개의 함수는 물론 정의된 델리게이트에 일치해야 합니다. BindAxis 의 경우 single float 를 받는 void 함수입니다. flaot 는 -1 에서 1 범위의 축 값을 나타냅니다.

[여기서 마지막 바인딩은 액션입니다.](CODELINK:Private/[PROJECT]Ball.cpp,59,0)
보시듯이 여기서는 파라미터를 넷 받습니다.
첫째는 역시 바인딩 이름입니다.
다음은 바인딩하고자 하는 액션, 이 경우 pressed, 눌림 입니다. 마지막 파라미터 둘은 축 바인딩과 거의 비슷하지만, 유일한 차이점은 이에 대한 델리게이트가 파라미터를 받지 않는다는 점입니다.
Jumping 은 그저 단순한 키 이벤트일 뿐입니다.

[/EXCERPT:StageSetupInput]

[EXCERPT:StageSetupMovement]

[VAR:StageTitle]
굴리기 게임 Pawn - Movement 함수
[/VAR]


여기에는 각 축마다 하나씩, 두 개의 이동 함수가 있습니다.
[MoveRight](CODELINK:Private/[PROJECT]Ball.cpp,62,0)
여기에서는 -1 에서 1 범위의 float 를 받습니다. 스틱을 이동하지 않은 경우 파라미터로 0 값으로 오기도 합니다.
함수에서는 RollTorque 멤버 변수에 따라 X 축 상의 토크 벡터를 계산하여, 여기에 스틱의 이동량을 곱합니다. 그런 다음 AddTorque 함수를 사용하여 공 컴포넌트에 토크로 전달합니다. 공 컴포넌트가 업데이트될 때 컴포넌트의 토크도 업데이트한 다음 그에 맞게 반응할 것입니다.
[MoveForward](CODELINK:Private/[PROJECT]Ball.cpp,68,0)
Y 축에 대한 토크 벡터를 생성한다는 점을 빼고는 MoveRight 와 똑같습니다.

마지막 함수는 볼을 점프하도록 만듭니다.
[JumpFunction](CODELINK:Private/[PROJECT]Ball.cpp,74,0)
이미 점프 상태가 아닌지 검사하여, 아니라면 JumpImpulse 멤버를 사용하여 Z 축에 임펄스 벡터를 생성하고, 이것을 공 컴포넌트에 임펄스로 전달합니다.
마지막으로 점프중이라는 플래그를 설정하여 알립니다.

[/EXCERPT:StageSetupMovement]

[EXCERPT:StageSetupImpact]
[VAR:StageTitle]
굴리기 게임 Pawn - Impact
[/VAR]

[ReceiveHit](CODELINK:Private/[PROJECT]Ball.cpp,84,0)
파일의 최종 함수입니다. 오브젝트가 월드와 충돌할 때 호출됩니다. 파라미터를 여덟 개 받습니다. Actor API 문서에 이 함수 파라미터의 자세한 설명이 있습니다. 하지만 이 템플릿 목적상 아무것도 필요치 않으니 여기서는 자세히 들어가지 않겠습니다.
먼저 할 작업은 베이스 클래스까지 호출하는 것입니다.
마지막으로 점프 버튼을 눌렀을 때 설정한 플래그를 지워줍니다. 물론 임팩트시 더욱 복잡한 계산을 통해 점프 종료 결정을 내리기 전 무엇에 걸렸나 확인하는 작업을 할 수도 있습니다만, 템플릿의 깔끔함을 위해 그저 어떠한 임팩트가 있어도 점프 종료 시점이라 간주하도록 합니다.

[/EXCERPT:StageSetupImpact]

	
[EXCERPT:StageInputBindings]

[VAR:StageTitle]
굴리기 게임 Pawn - Input 바인딩
[/VAR]

Pawn 에 대해 다루는 마지막 섹션에서는 입력이 콘트롤러 버튼 및/또는 키와 어떻게 관련되는지에 대해 설명하겠습니다.
좀 더 자세한 설명은 문서에서 찾아보실 수 있습니다:
[인풋 개요](DOCLINK:Gameplay/Input)

콘트롤 바인딩 셋업에 선호되는 방식은 에디터 GUI 를 통하는 것입니다. 에디터를 열어둔 상태로 편집 메뉴를 클릭하고 프로젝트 세팅을 선택합니다. 왼쪽의 패널에서 '입력'이라는 섹션을 찾아 클릭합니다.
그러면 인풋 이벤트 이름같은 것들을 설정할 수 있는 입력 페이지가 열립니다. 여기서 관심있는 부분은 바인딩 입니다.
![](Bindings.png)

첫 섹션은 액션 버튼입니다.
![](ActionMap.png)

여기서는 단순한 이벤트를 생성하는 키를 바인딩합니다. 매핑에 정의된 버튼을 누르면 그 이벤트가 발동됩니다.
액션 매핑 옆의 화살표를 클릭하면 섹션이 펼쳐져 두 개의 바인딩이 드러납니다. 그런 다음 Jump 매핑을 확장시키면 바인딩이 보일 것입니다.
![](ActionMapExpanded.png)
즉 스페이스바 또는 게임패드 버튼을 누를 때 Jump 이벤트가 발동됩니다. 그러면 SetupPlayerInputComponent 함수에 바인딩된 델리게이트 함수가 
호출됩니다.

이제 축 매핑 옆의 화살표를 클릭하면 매핑 목록이 나타납니다. 여기에는 MoveForward 와 MoveRight 에 대한 항목이 들어있습니다. 여기서 MoveForward 에 클릭하면 그 바인딩에 세 개의 키/버튼이 할당된 것이 보일 것입니다.
![](AxisMap.png)

즉 (콘트롤러의 왼쪽 스틱을 말하는) GamePadLeft X 를 움직이거나 Left 또는 Right 가 눌린 경우, 이벤트가 발동되어 결국 델리게이트가 호출되게 됩니다.
여기에는 약간 미묘한 차이점이 있습니다. 그 중 하나는 콘트롤러 바인딩이고 나머지 둘은 키 바인딩이기 때문입니다.
콘트롤러 바인딩에는 스케일이 1 입니다. 그래야 스틱이 기대한 대로 작동하도록 해 줄 것입니다. 이것을 -1 로 바꾼다면, 축이 뒤집히게 될 것입니다.
다음 두 바인딩은 키 입니다. 콘트롤러의 축 스틱처럼 -1 에서 1 범위가 아니라 0 에서 1 을 반환합니다 (키보드의 키는 게임 콘트롤러의 버튼처럼 아날로그 방식이 아니라 사실상 0 또는 1 입니다). Left 에 대한 바인딩의 스케일은, 1 을 -1  로 변환한다는 뜻으로, 스틱을 왼쪽으로 움직였을 때처럼 작동한다는 뜻입니다.

[/EXCERPT:StageInputBindings]

[EXCERPT:StageGameMode]

[VAR:StageTitle]
굴리기 게임 모드
[/VAR]

매우 단순하지만 중요한 클래스입니다. 게임 시작시 사용할 기본 클래스를 지정하는 곳이 바로 이 클래스입니다. 생성자가 하는 일은 이게 전부입니다. MarbleBall 스태틱 클래스 인스턴스를 DefaultPawnClass 멤버에 집어넣고, 여기서 게임 시작시 게임 모드더러 그 클래스를 사용하라고 이르는 것입니다.

이 클래스를 사용해서 규칙이나 로직같은 것 등의 게임 모드를 제어하기도 할 것입니다.

생성된 프로젝트와 같은 이름을 가진 것 중 마지막으로 생성되는 파일(EG Marble.cpp)은 단순히 게임을 모듈로 구현하여 이에 관련된 여러가지 것들, Module Name, Class 등을 셋업해 주며, 이 부분은 언리얼 빌드 툴에서 사용되기도 합니다.
여기에 수반된 헤더 파일에는 메인 코어 헤더를 포함합니다.

[/EXCERPT:StageGameMode]

