INTSourceChangelist:6537038
Title: 2013年8月版本说明
Crumbs:%ROOT%, Support/Builds
Description:
Availability:Licensee
Parent:Support/Builds
Order:-6
Order: 50

[TOC(start:2 end:2)]

## 版本信息


[REGION:simpletable]
| 项目| 信息|
| ----| ----|
| **标签**| QA_APPROVED_UE4_BUILD_2013_08|
| **变更列表编号**| 1781093|
| **VISUAL STUDIO 版本**| Microsoft Visual Studio 2010 版 10.0.40219.1 SP1 Rel|
| **DIRECTX**| 2010 年 6 月|
[/REGION]

## 重要信息

 * 当前引擎开发路线图：[UE4 路线图](https://udn.unrealengine.com/questions/topics/roadmap.html)
 * 已修复的错误：[2013 年 8 月 UE4 已修复的错误](UE4_Fixed_2013_August.xlsx)
 * 已知问题：[2013 年 8 月 UE4 突出问题](UE4_Bugs_2013_August.xlsx)
 

## 主要新功能

####编辑器工具
* **永久保留模拟更改**
	* 用户现在可以永久保留模拟时执行的更改。	
	![](Simulation.png)
	* 使用在场景大纲视图中选择的 Actor 可以：
		* 在游戏运行时修改 Actor 属性和变换，并保留更改
		* 翻转刚体并将其最终位置保存到关卡
		* 使用蓝图或 Gameplay 代码修改模拟中的 Actor，然后保存更改
		* 在游戏模式下也适用！

* **工具栏自定义现在位于 EpicLabs 偏好设置中**
	* 现在可在 EpicLabs 中启用工具栏自定义！  
	![](CustomTools_Final.png)
	* 选择 **编辑（Edit）> 编辑工具栏（Edit Toolbars）** 后，您可以从 **键盘快捷键（Keyboard Shortcuts）** 窗口将命令拖到任何兼容工具栏中。

* **导入纹理时检测法线贴图**
	* 引擎现在会在导入时自发检查纹理，以确定纹理贴图是否为法线贴图！	
		![](NormMapDet1.png)
		* 导入时自动设置 LOD、压缩和其他默认设置。  
		![](NormMapDet2.png)
		* 用户甚至可以在导入后使用选项恢复至“标准”纹理默认设置。

* **编辑器用户界面中的 隐藏用户界面（HideUI）、安全框（Safe Frames）和宽高比（Aspect Ratios）**
	* 隐藏用户界面（HideUI）:允许用户从视口中移除 Slate 覆层。		
	![](safe1.png)(w:420)
	* 法线选择在 LMB 中仍然有效，单击 RMB 可返回用户界面。  
	![](safe2.png)(w:420)  ![](safe3.png)(w:420)
		* 您甚至可以同时运用 隐藏用户界面（HideUI）功能与游戏视图（Game View），以完全清除视口（如上所示）
	* 安全框（Safe Frames）：如果已选中 Camera Actor 且符合以下条件，编辑器视口现在会根据摄像机宽高比设置来渲染安全框：
		* 必须关闭游戏视图（Game View）。
		* 打开安全框显示标记（**显示（Show）> 高级（Advanced）**）。
		* 在 _摄像机设置（Camera Settings）_ 中，所选 Camera Actor 的 _限制宽高比（Constrain Aspect Ratio）_ 设置为 _真（True）_。
	![](safe4.png)(w:420)
	* 宽高比（Aspect Ratios）：现在可通过以下方式编辑宽高比属性。
		* 设置成微调框中的浮点值（和以前一样）
		* 单击下拉箭头并从预设比例列表中选择一个值。
		* 以“ _宽 x 高_ ”或“ _宽:高_ ”格式的文本输入分辨率或比例。  
	![](cam1.png)

* **源码控制**
	* 源码控制状态指示器已移至编辑器右上角，不再位于子菜单中。  
	![](SourceControl02.png)
	* 用户还可以从编辑器的不同位置访问（和启用）源码控制。
		* 从文件（File）菜单
		* 内容浏览器的上下文菜单中
		* 关卡浏览器中
	* 新建（和保存）项目时，如果用户没有登录过源码控制，则会提示用户登录。
	* 如果用户需要签出文件，但未连接源码控制，则也可以在签出对话框中登录源码控制。

* **项目浏览器**
	* 添加了项目浏览器，启动编辑器时会将其打开。  
	![](Project-Browser.png)
	* 项目浏览器根据项目位置按确定类别自动列出所有已知项目，但可以被现有类别或新建类别所覆盖。
	* 项目缩略图从项目文件夹中的 `.png` 文件加载。
	* 如果用户没有提供项目的缩略图，则在退出编辑器时自动截取该项目的屏幕截图。该屏幕截图只能在截图机器上使用。
	* 在列表顶部选择 _新建项目（New Project）_ ，打开 **新建项目（New Project）** 向导。


####渲染
* **材质参数集**
	* 材质参数集提供了一种强大的全新方式，可同时驱动大量材质参数！  
	![](GlobalParams1.png)(w:420)
	![](GlobalParams2.png)(w:420)
	* 在上述示例中，以下属性均由材质参数集中的参数驱动：
		* 花卉变形状态
		* 风速和风力强度
		* 玩家位置（由植被动画使用）
		* 太阳角度和颜色（由水波使用）
	* 用户可以在内容浏览器中创建材质参数集，添加新参数并指定其名称。
	* 在任何及所有材质中都可以参考单个参数，甚至可以通过蓝图有效驱动这些参数！

* **支持超过 64K 个顶点的静态网格体**
	* 添加了对导入和渲染超过 64K 个顶点的静态网格体的支持！
	![](dragon.png)


##新增内容

####编辑器工具
* **保留模拟更改！**
	* 在模拟模式下更改 Actor 属性后，您现在可以选择是否永久保留更改！
	* 在模拟模式下右击 Actor，选择保留模拟更改（Keep Simulation Changes）（或按“K”键）
* 添加了启发法，可在导入时识别法线贴图并相应地指定各种设置。
* 在关卡编辑器工具栏中添加了保存（Save）按钮。
* **工具栏自定义** - Epic Labs 功能
	* 可从键盘快捷键菜单中将命令拖放到任何兼容工具栏上
	* 单击红色“X”按钮可删除命令
	* 在偏好设置的 Epic Labs 部分启用，然后通过 **编辑（Edit）> 编辑工具栏（Edit Toolbars）** 调用
* **项目浏览器**
	* 可让您查看现有内容和开始创建新项目
	* 如果游戏文件夹中有匹配游戏名称的 `.png` 文件，则会在浏览器中使用该文件，否则会在每次退出编辑器时自动截取屏幕截图。
* 更新了内容浏览器中 **新资源（New Asset）** 菜单的类别、缩略图和描述性工具提示
* 安全框 - 编辑器视口现在会显示所选 Camera Actor 的宽高比和安全框区域
	* 通过高级（Advanced）类别中的显示标记（Show Flag）启用，默认为关闭
	* 与其他非场景视口信息一样，游戏视图模式会隐藏安全框
* 关卡编辑器视口中的隐藏用户界面（Hide UI）选项可隐藏Slate用户界面覆层
	* 在视口中单击鼠标右键按钮可取消隐藏用户界面模式
	* 只有将所选摄像机的限制宽高比（Constrain Aspect Ratio）设置为真（True）时，才会显示安全框


####蓝图
* **蓝图委托** - 第一个版本
	* 可像变量一样添加组播委托
	* 可将委托绑定到事件，也可从事件取消绑定委托
	* 可广播组播委托
* **蓝图模拟**
	* 现在可在组件模式下切换蓝图模拟
	* 如果已启用，则会运行蓝图的图表和物理
* 将父类信息显示添加到了蓝图编辑器中，位置在菜单栏右侧
* 在组件模式下可打开和关闭蓝图的地面预览几何体
* 添加了蓝图函数 SetPaused、SetTimeDilation、GetMousePosition 和 GetInputMotionState
* 通过蓝图编辑器中的 DestructibleComponent 属性可设置 DestructibleMesh


####Gameplay 和框架
* **摄像机系统**
	* 标准化了摄像机信息流，以便传递传递任意位置的相同结构体，所以任何参与者均可设置任何属性（参数、后期处理覆盖等）
	* 已重构 `ACameraActor`，以便使用 `UCameraComponent`
	* 现在查看时，Actor 会搜索附加的摄像机组件（由 `bFindCameraComponentWhenViewTarget` 控制），从而便于在蓝图中按 pawn 自定义摄像机
	* 添加了对正交 Gameplay 摄像机的有限支持 (WIP)
	* 摄像机组件现在可以选择集成控制器旋转
	* 添加了一个简单的摄像机支架组件，通过跟踪来避免穿透墙壁 (`USpringArmComponent`)
	* 更新了多个模板项目，以便演示摄像机组件的使用方法
	* 现在在 Actor 详细信息中使用可编辑文本框或预设列表可编辑 Camera Actor 的宽高比属性
		* 现有浮点表示法仍可用
		* 以“ _宽 x 高_ ”或“ _宽:高_ ”的格式输入分辨率或比例可将宽高比作为文本编辑
		* 单击下拉箭头并从预设比例列表中选择可编辑宽高比
	* 默认情况下，如果查看目标不是 `CameraActor`，玩家摄像机不会应用修改器（如抖动）；添加了一个标记来修改此行为
	* 新摄像机相对移动模式更容易实现。有关示例，请参阅 ThirdPersonTemplate
* **导航和 AI**
	* 通过将构建流程分割为两个阶段，加快了导航网格物体（寻路网格体）重建：使用动态修改器处理静态几何体（平铺缓存）和创建导航网格体数据
	* 使用 `INavRelevantActorInterface` 定义动态导航网格体修改器，可在资源 `NavCollision` 的属性中修改静态网格体
	* 导航网格体现在可仅加载玩家附近的平铺（`RecastNavMesh` Actor 中的 `UseActiveTileSet` 标记）
	* 使用 `SimpleMoveToActor` 和 `SimpleMoveToLocation` 函数访问基本路径查找并跟踪任何控制器（AI 和玩家）
	* 添加了新的导航统计数据，以便获得每帧导航网格体操作的成本（为了计算专属服务器上的全局导航网格体成本）
* **输入**
	* 添加了输入绑定的属性，以便指示在游戏暂停时是否执行输入绑定
	* 输入轴现在可以绑定为事件，而不是只能绑定为获取值节点
* **物理**
	* 支持 Apex 布料 LOD
	* 简化了玩家控制物理驱动载具时的游戏设置
		* 创建了 `Vehicle` 基类（本质上是具有骨架网格体和 `VehicleMovementComponent` 的 `Pawn`）
		* 在获取输入方面，载具移动属性现在与角色移动相似 - 等待 Pawn 的事件，而不是轮询
		* 车轮现在可自动使用引擎汽缸生成车轮碰撞（默认行为，可在车轮蓝图中更改）
		* 车轮蓝图还允许指定手刹是否可以产生影响（应仅影响后轮）
* 清理了 `BaseEngine.ini` 碰撞描述定义，现在更容易阅读和管理
* 添加了在专属服务器上执行功能测试的能力。从现在开始，我们可以在服务器上执行功能测试，以便获得某些统计数据、日志，或者仅进行测试
* 在 `USceneComponent` 中实现了广泛的插槽支持，从而允许插槽/附件用户界面可使用除 `USkeletalMeshComponent`/`UStaticMeshComponent` 外的其他类
* 移植了设置各种窗口大小的 UE3 命令行参数（对于游戏窗口分辨率，为 ResX/ResY；对于游戏窗口位置，为 WinX/WinY；对于控制台窗口位置，为 ConsoleX/ConsoleY）


####渲染
* 纹理取样限制跟踪现在可通过实际查看编译输出准确完成。
* 世界位置材质表达式现在可在材质后期处理中使用。通过后期处理传递的像素查看时，结果会是场景空间位置。
* 现在可选择世界位置材质表达式的位置是绝对世界位置，或摄像机相对世界位置。
* 现在可导入和渲染顶点超过 65536 个的静态网格体。
* 修复了蓝图中的静态光源
	* 在蓝图中创建网格体或光源时，仍有几个未解决的问题会导致无法构建静态光源


####动画/角色编辑器
* PhAT 现在拥有角色风格动画选择器。
* 现在可在 PhAT 形体上下文菜单中将形体类型设置为默认值，以及固定/非固定。重新整理了菜单，分组更合理，并且会显示形体的最新类型。
* 通过在视口中单击骨骼，现在可以在角色中选择骨骼（如果启用了骨骼渲染）单击空白区可取消选择。
* 在角色中添加了风向


####声音
* 弃用了根声音类。可存在多个独立声音类层级，并且可并行使用。
* 如果达到最大并发声音限制，现在可指定是否阻止新建，停止最旧或停止最远的声音。


####在线
* 添加了 OnlineSubsystemNull，从而在未使用任何实际在线后端时，提供在线功能的子集。目前仅支持会话（通过 LAN 传播）。


####核心
* 现在可注册在控制台变量更改时调用的函数 (RegisterConsoleVariableSink)
* 客户端和烘焙服务器现在可交换游戏和引擎目录，允许其布局不同
* 新关卡统计数据系统
* 添加了 Visual Studio 分析器支持
	* 使用 SCOPE_PROFILE_INCLUDER 封装慢速代码块，然后启动“暂停”状态的外部分析器
* **分析器**
	* 在事件图表中添加了函数细节


####平台
* 添加了高关卡保存游戏系统：`GenericSaveGameSystem`
	* 使用 `GFileManager` 保存到 `GameSaveDir()`
	* 添加了 `IPlatformFeaturesModule`，可返回保存游戏类（还将用于其他目的）
	* 在游戏设置中添加了保存游戏自动测试
* 使用 NDK r9 和 Clang 3.3 构建 Android
* 从 NVIDIA 库更新 `PhysX-3.2_EPIC` 源码


##Upgrade Notes （以下内容仅供参考，不作翻译）

####Editor and Tools
* Removed `GenerateProjectFiles.bat` for uproject files (the `GenerateProjectFiles.bat` in the UE4 root remains and is not generated).
	* This is now done by right clicking on the .uproject file and selecting Generate Visual Studio Files.
	* Use `Engine/Build/BatchFiles/RegisterShellCommands.bat` to associate a build folder with `.uproject` files. Only one build may be associated at a time.
* Perforce dialog no longer pops up on Editor startup. Source control workflow streamlined.
	* Source control login is now accessible by clicking the colored indicator button in the top-right hand corner of the Editor. It can also be accessed 'just-in-time' in various menus throughout the Editor.

####Blueprints
* ACharacter no longer has default movement input bindings.
	* There is a bool `bAddDefaultMovementBindingsForBlueprint` that determines whether a Character Blueprint uses the old default native key bindings for input or not. Default is true, so content should set it to false if they want custom bindings. Well probably remove this after people have a chance to migrate content.
	* Input axis events are exposed to Blueprints, and movement functions are exposed as well. SideScrollerTemplate and ThirdPersonTemplate have been updated as examples.
* Template Default map : changed atmospheric fog altitude number from 32 to 2, to reduce texture data.
* Atmospheric fog - allow Blueprint-created atmospheric fog components to maintain precomputed data
* Blueprints cannot be renamed to include invalid characters as this was breaking the Blueprint execution.
* `SceneComponent::AttachTo`'s attach type changed to enum from bool
	* `KeepRelativeOffset` - Keep current relative transform
	* `KeepWorldPosition` - Keep current world transform
	* `SnapToTarget` - Reset current relative transform
* `Actor::MakeMIDForMaterial` has been deprecated. CreateMID function is added in the Material Library. 
* Instead of using CreateMID, utilize CreateMIDForElement or CreateMIDForElementFromMaterial
* Material parameter collection Blueprint functions are now in a kismet function library
	[REGION:note]
	Note: this breaks the previous material parameter collection Blueprint functions. Existing nodes will have to be replaced.
	[/REGION]
* For shader development, enable `r.ShaderDevelopmentMode` in ConsoleVariables.ini.  LogShaders is no longer the method to get retry on compile error.


####Gameplay and Framework
* Reorganization of source code to put all source for a class in its own file(s)
	* Affects `Actor`, `Controller`, `GameReplicationInfo`, `PlayerReplicationInfo`, `WorldSettings`, `Character`, `Pawn`
	* Added `ActorReplication.cpp`, `ActorEditor.cpp`, `WorldSettings.cpp`
	* Remove `Script.cpp`
* PlayerController input component is no longer created in the constructor.  Bindings should be done, similar to Pawn, in the virtual function SetupInputComponent.
* `PlayerController.GetInputAnalogStickState` now returns game value (after invert and dead zones have been applied) instead of the raw hardware value.
* ConsumeInput removed from `BIND_` macros.  To set `InputAction`/`InputAxis` properties from code after binding the macro can do something similar to:
		
		BIND_ACTION(InputComponent, "Fire", IE_Pressed, &AQAPlayerController::OnTriggerPressed);
		InputComponent->ActionBindings.Last().bConsumeInput = false;

* `MaxDrawDistanceScale` system setting has been replaced by new `r.ViewDistanceScale` console variable.
* `LocalMap` has been removed, `Map` is now the only setting used to specify the DefaultMap 
* BeginPlay refactor
	* `PreBeginPlay`/`BeginPlayComponent`/`PostBeginPlay` renamed to `PreInitializeComponents`/`InitializeComponent`/`PostInitializeComponents`
	* `ReceiveBeginPlay` event in Blueprints now fires after the player has been spawned.
	* `LevelScriptActor.BeginGame` event converted to ReceiveBeginPlay
	* Streamed in sublevels and their placed actors get ReceiveBeginPlay calls
* The signatures of many camera related functions have changed to take a `FMinimalViewInfo`, containing a full view state, instead of loose location/rotation/FOV values.
* The first batch of project, Engine and Editor settings have been refactored to use the new Settings UI framework


####Rendering
* StaticSwitchParameter material expressions now emit an error if either inputs are not connected. This may cause some existing materials to not compile.


####Animation and Persona
* `USkeletalMesh::Sockets` is now private. `GetActiveSocketList()` and `GetMeshOnlySocketList()` have been added to get the list of sockets. This is editor only code.
* `FKSphereElem`/`FKBoxElem`/`FKSphylElem` have been refactored to store minimal position/orientation info, rather than a full FMatrix. Code using these classes will need to be changed.


####Sound
* `ReverbVolumeToggleable` combined with `ReverbVolume`


####Online
* Refactored Online Subsystem OnlineProfileInterface to be combined with OnlineIdentityInterface
	* Deprecated existing OnlineProfileInterface functionality so that it can be deleted
* Http module no longer checks for internet connection at startup 
	* This was a blocking call for WinInet and not necessary since async request would fail anyway without a connection
* Http module has a flag to disable actually making http requests and just calls completion delegates instead
	* In `DefaultEngine.ini`:
		
			[Http]
			bEnableHttp=false

* Http WinInet implementation always downloads from server instead of relying on cached data via INTERNET_FLAG_RELOAD


####Core
* `TPreallocatedArray<Type, Count>` has been removed.  You should instead use `TArray<Type, TFixedAllocator<Count>>`.
* Editor-visible or Blueprint-visible deprecated properties are now an error.  They should be made non-visible.
* First pass of refactoring navigation-related functions out of `AActor`. Now all navigation relevant actors need to implement `INavRelevantActorInterface`
* `TAssetPtr` type has been rebuilt, and can now be used for asynchronous loading of asset data
	* A `FStringAssetReference` is a structure that contains the name of an asset, and can be used to refer to data that is not loaded.
	* A `TAssetPtr` is similar to a `TWeakObjectPointer`, but it can be used to refer to data that is not currently loaded. 
	* Any previous uses of `TAssetPtr` will not work, as it now uses `FStringAssetReference` for serialization. This means that it works properly with cooking and redirects. You can access the `FStringAssetReference` used by a `TAssetPtr` with `.GetUniqueID()`.
	* You can use `FStringAssetReferences` and `TAssetPtrs` as properties, and the editor UI will let you create references to data that is not always loaded. You can convert a
	* `FStreamableManager` now has functions for asynchronously loading `FStringAssetReferences`, with callbacks on completion. You can use this to request loading groups of assets without stalling the main thread
* Plugins may now be toggled enabled/disabled in the plugins UI.
	* If your game uses a plugin, you must add `+EnabledPlugins="YourPluginName"` to the `[Plugins]` section of `DefaultGame.ini`
* Rename tick groups to Pre/During/PostPhysics instead of AsyncWork
	* Remove `bTickBeforePhysics` flag
* `IMPLEMENT_PRIMARY_GAME_MODULE` now depends on the generated UELinkerFixup function existing, which in turn requires all modules to have `IMPLEMENT_MODULE` setup properly. 
* Converting Unreal Enums to strings using `GetEnumString()` can now be used from Core (was in Engine)


####Platform
* Changed/modified some environment variable names used by UnrealBuildTool and IPhonePackager. Search `*.cs` for: `"ue`.
* Added Dangerously Fast mode, which will just recompile the executable, it won't copy provisions, or anything like that. A Rebuild/Clean will perform one slow mode compile.


##Ongoing Efforts and Improvements

####Editor Tools
* **Matinee**
	* A Slate notification now appears to tell the user that they can't add a Static Light to a Matinee track
	* The Matinee Reduce keys menu now displays correctly
	* Gave the Matinee event name text box entry widget a maximum width so it doesn't assert when pasting lots of text
	* Use a check button for the Editing Crosshair action to display on/off state in the menu
* **Play In Editor/Simulate In Editor**
	* When a PIE GameplayViewport is active, UDK remote input will be scaled and routed only to that viewport
	* Play-In-Editor (PIE) settings can now be configured in the Settings UI
	* Actors are no longer unselected when switching from eject to possess while simulating
* **Viewports**
	* Planar wireframe meshes are now visible in orthographic views
	* Visualize Ambient Occlusion is now available via the Visualize Buffer menu rather than via a showflag.
	* **Attach To** option in level viewport content menus now automatically gives text focus to the search field
	* Added an Editor user setting for the visualizing LevelStreamingVolume actions: **Level Streaming Volume Previs**
* **World Browser** 
	* Added snapping by level bounds for non-landscape levels (Hold **Ctrl** to disable it) 	
	* Moved **File > Open World...** command from the Editor main menu to the World Browser main menu 
	* Added custom 'Open world location' dialog instead of OS standard 'Browse for folder' dialog 
* **Scene Outliner**
	* You can undo an Actor rename in the Scene Outliner
	* Changed the Scene Outliner to only scroll the selection into view when it wasn't visible in the outliner
	* SceneOutliner now updates when levels are streamed in/out during SIE/PIE
* **Landscape**
	* Added Undo for Copy and Gizmo operations
	* Disable Gizmo Remove Layer button when there is no layer
	* Added ability to create levels with landscape proxies directly from the world browser. User needs to have at least one loaded level with landscape beforehand
* **Foliage**
	* Hook up to notifications for map rebuilds and migrate foliage instances across BSP components in response to avoid broken/obsolete components crashing PIE
	* Do not delete untargeted foliage instances if rebuilding geometry removes the original target BSP
* **Message Log**
	* Message log API has been streamlined. Message log output is now usable from all modules, not just Editor modules as before
	* Multiple duplicate message logs now don't appear on Editor startup
	* Message logs now don't pop up incorrectly when changing levels, running map check of building lighting
* **Autosave**
	* Now disabled when running without any project loaded. This is to prevent autosave while in the new project screen before loading any projects
	* Suspend opening an autosave notification when interacting with sliders/spinbox/menus not just menus
* **General UI Improvements**
	* Moved the Recent Levels into a submenu
	* Changed the Recent Projects to use regular menu items
	* Icons and mobility indicator no longer turn black when highlighted
	* ScrollBox RMB scrolling now behaves the same as ListView
	* The user can now press the escape key to close the new level dialog box
	* The user can now press the escape key to close the save all dialog box
	* On launch the Editor now has full focus so keyboard shortcuts now work correctly without having to click inside the Editor window
	* The search box field is now in focus by default in the Settings Editor categories
	* Renamed Packages to Files in the Build and Submit window
	* Added a MaxWidth to STextEntryPopup arguments - still unbounded by default
	* When a user's desktop is configured with a right-hand primary monitor, submenus on the left-hand monitor now don't fly in from the far right
	* Cooked content warning dialog explains why its failed to run in more detail
	* Make the Static Meshes and BSP Surfaces items within the **Build > Lighting Info > LightMap Resolution Adjustment** menu use the right check box images so they display correctly
	* Removed the black border on the Collision Profile Reset to Default button in the Blueprint property tab so it looks like the others
	* Created 16x icon for import asset context menu
	* Initial WIP pass of multiple requested class icons for new assets
	* New icon created to replace placeholder 16x icon
	* Created new 40px icons for all menu items currently with a 16x icon
	* Created new icons for the 5 main editor tool icons, along with color change icons for the selected states. Icons require code hook-up
	* New view menu icon for developer tools/modules menu item @ 16x
	* Created new icons for all window menu items @ 16px, also to be used for menu tabs
	* Created placeholder icons for missing NavMeshModifier at 16x & 64x
	* Created 40px icon for generic command & 512px source icon
	* Created new icons at 16px & 64px for multiple volume types (used in content/placement browsers)
	* Created new icons for the various 128px plugin icons & 20px folder icons for use on the plugins pane
	* Created new 16px icons recent levels & recent projects
	* Added icons for a number of editor windows' tabs and their entries in the menu
	* Added icons for volume types in placement browser
	* Added additional icon support in plugins editor
* Continued to implement centralized project and Editor settings UI
* Added details view customization for FGuid properties
* Rebuild model now falls back to using the worlds Current Level when the models Level isn't available (occurs under certain conditions)
* Copy component properties now takes into account index mismatch
* Template maps now show the correct names
* Swarm now runs minimized by default when running level builds
* OutputLog now only snaps to the bottom, when new entries are added, if the user hasn't scrolled away
* DefaultPath is now treated as a full path in the Windows file dialog, which avoids confusion with other branches
* Improve **Alt + drag** Actor duplication performance by registering exporters & improving performance of serializing large UObjects like levels
* Properly tag Brush and Volume classes so that they can be freely converted
* Discard previous actor selection when selecting brush groups, such as Select All Additive Brushes
* Improving usability of destructible mesh editor
* Any files discovered by the asset registry which cannot be converted to a long package name with only valid package characters will now be skipped
* Added a template HitProxyCast for hit proxies.
* Local documentation URLs that have anchors now open in browser correctly


####Blueprints
* In the Blueprint Editor, variables, functions, graphs, macros, and delegates are now renamed inline in the **My Blueprint** window
* Pop-ups and notifications that should not affect focus should no longer.
* Missing actions from the Palette window in the Blueprint Editor should now appear.
* When creating a Blueprint from actor, the resulting Blueprint will not have all the components rotated strangely.
* Many minor improvements to Blueprint thumbnails in the content browser.
* Changes made to native component properties in the Details tab within Components mode of the Blueprint editor will now correctly propagate out to any Actor instances based on the Blueprint.
* Script exceptions (e.g. breakpoints) are no longer triggered for actors/objects in the Blueprint preview scene. Additionally, the Blueprint preview scene is no longer ticked while a PIE/SIE session is active, so it does not pollute the message log during script debugging.
* Variable nodes in a Blueprint graph will now display a warning after compilation if the property no longer exists or was deprecated.
* Removing the Default output pin on a **Switch on Int** node in a Blueprint graph will no longer cause the Blueprint to fail to compile after re-opening the editor.
* Blueprint Diff graph list now scrollable and other misc improvements.
* Blueprint editor no longer crashes when copy/paste/undo/pasting custom event nodes


####Gameplay and Framework
* Hierarchical pathfinding
* Custom navmesh connections (offmesh links): segment to segment
* WorldSettings will be migrated to a new class if the `.ini` file dictates a different class than that which was saved in the map.
* Blueprint PrintString messages flagged bPrintToLog now display in console as well as log.
* Input Key nodes can now have the bound key switched from the property details panel.
* Added DLL export to various skeletal control functions.
* Removed dead UJsonObject class. 
* Got rid of deprecated USkeletalControl parallel hierarchy. 
* Renamed box query parameter from Extents to HalfExtents, indicating that it is the box radius instead of bounds. 
* Added support for arbitrary nesting of Interp properties (e.g., Component.Struct.Prop), and redirection of Matinee track names (in the INI map MatineeTrackRedirects).
* Removed a truncation from camera shake strength (legacy of integer FRotator). 


####Rendering
* When not running with the editor, all scene render targets will be reallocated on resizing the window. This allows memory to be recovered when changing to a lower resolution
* ParticleParameter distributions are now not selectable on GPU emitters for various properties. Previously they would have been selectable but would not have worked.
* Random and Random_Blend interpolation methods are now not selectable for GPU emitters. Previously they would have been selectable but would not have worked.
* Particle emitter's editor LOD value is set to 0 on load.
* **Texture Streaming** - Simpler logic to decide how textures should be streamed (or not), fixes for dynamic textures (including Blueprints)
* StaticSwitchParameter material expressions now emit an error if either inputs are not connected.
* Tessellated materials draw to the velocity buffer.
* Corrected the output mask value for **SceneTexture** material expression.
* A warning message is now displayed in the Material Editor when the user attempts to use _BLEND_MODULATE_ with separate translucency
* Ensure that the static mesh editor rebuilds the physics geometry after any change to the mesh so it doesn't disappear from view
* Static mesh sections with no triangles no longer use up a material slot. Existing content will be fixed on load
* Added stripping of HQ lightmaps and distance field shadows from iOS
* Wider ES2 bloom
* Defer broadcasting material instance property changes while still interacting with them in the material editor, so that editing is much smoother
* Compilation of the shaders for a material are now completed before generating a thumbnail to save to disk


####Animation and Persona
* **PHAT EDITOR**
	* Removed collision settings from PhAT: BodySetup, but added collision response Enabled/Disabled
	* All other settings are derived from OwnerComponent
	* Enabled default pawn collision against destructible
	* Modified PhAT tooltip to be less confusing to the user.
* Skeletal mesh vertices are rearranged during import to be more cache friendly.
* Undo/Redo fixed for adding/deleting sockets from a skeleton.
* Added the axis indicator to the Persona viewport.


####Sound
* Entire SoundClass hierarchy, including parents, will be displayed when opening the Sound Class editor via a child SoundClass.


####Online
* Ongoing efforts to improve the stability and robustness of the online platforms
	* Misc
		* Support for bool FVariantData for key value pairs
      		* Added CreateUniquePlayerId function to Identity interface
      		* UpdateSession API now defaults to updating backend
      		* Made session settings bool instead of bitfield
	* Cloud
		* Additional updates to cloud headers 
      		* Delete local cache files not in the enumerated list 
      		* Update enumerated list after write/delete user file


####Core
* Rewrote external CPU profiler support (AQTime, VTune, VSPerf)
	* Use command-line options to select a specific profiler: `-AQtime`, `-VSPerf` and `-VTune` 
	* The first valid profiler is used by default (usually VSPerf.) Profilers are available only if their DLL is found in a search path. 
* If you have any large functions with a lot of Slate code in them, they can now be wrapped in a BEGIN_/END_SLATE_FUNCTION_BUILD_OPTIMIZATION macro pair to improve Developer build times for the modules containing these functions.
* Added option to SWizard to supply a delegate for when back is clicked on the first page.
* Adjusted Base ini files to help avoid saving additional data to saved ini files. 
* Simplified TemplateMapInfo struct since the config system can directly load a UObject reference.
* Moved some comments around in asset type classes so that they will appear in tooltip metadata. This is where the **New Asset** menu draws its descriptions for classes.
* Build machines no longer load from or save to the EditorGameAgnostic ini. Also, build machines no longer attempt to auto-load project files.
* Updated class validity logic in the c++ class wizard to allow for the extending of classes in the game module.
* Path pickers no longer show a Classes folder. Also, selection is always single, thus deselecting a path is not allowed.
* An option to open visual studio was added to the File menu in the mainframe.
* Hardware survey no longer done in debug builds 
* Started synthetic benchmark (console command `SynthBenchmark`, part of Hardware survey) to base video settings on it
* Added detail mode SceneComponent so lights can be culled by r.DetailMode as well
* Optimized decal state changes 
* JsonReader now ignores trailing and preceding whitespace
* Added functionality that will adjust some of the internationalization gather log output to prevent automated builds from failing when localization strings containing "Error" are encountered
* Forcing internationalization manifest and archive files to be written out using unicode encoding
* Added config files for generating Engine and Editor localization files
* Added streaming install ChunkID info to `FAssetData`, `FPackageFileSummary`, and `FBackgroundAssetData`.
	* In future builds this will be used by the packager for creating streaming install `.pak` files and for determining the install state of individual assets.


####Platform
* Porting the engine and the editor to Mac
* Removed GScreenWidth/Height, and set the default resolution for non-desktop platforms to 0x0, to make it query the device for current resolution

