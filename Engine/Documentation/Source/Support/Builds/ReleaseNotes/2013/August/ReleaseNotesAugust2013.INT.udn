Title: August 2013 Release Notes
Crumbs:%ROOT%, Support/Builds
Description:
Availability:Licensee
Parent:Support/Builds
Order:-6

[TOC(start:2 end:2)]

## Build Info


[REGION:simpletable]
| Item | Info |
| ---- | ---- |
| **Label** | QA_APPROVED_UE4_BUILD_2013_08 |
| **Changelist #** | 1781093 |
| **VISUAL STUDIO VERSION** | Microsoft Visual Studio 2010 version 10.0.40219.1 SP1 Rel |
| **DIRECTX** | June 2010 |
[/REGION]

## Important information

 * Current Engine Development Roadmaps: [UE4 Roadmaps](https://udn.unrealengine.com/questions/topics/roadmap.html)
 * Fixed Bugs: [UE4 Fixed Bugs August 2013](UE4_Fixed_2013_August.xlsx)
 * Known Issues: [UE4 Outstanding Bugs August 2013](UE4_Bugs_2013_August.xlsx)
 

## Major New Features

####Editor Tools
* **Make Simulation Changes Permanent**
	* Users now have the ability to make changes which happen while simulating permanent.	
	![](Simulation.png)
	* With the Actors selected in the Scene Outliner, you can:
		* Modify actor properties and transforms while the game is running and keep those changes
		* Toss around rigid bodies and save their final positions back into the level
		* Use Blueprints or gameplay code to modify actors in the simulation, then save back those changes
		* Also works in Play mode!

* **Toolbar Customization Is Now An EpicLabs Preference**
	* Toolbar customization can now be turned on in EpicLabs!
	![](CustomTools_Final.png)
	* After selecting **Edit > Edit Toolbars**, you can drag commands from the **Keyboard Shortcuts** window to any compatible toolbar.

* **Normal Map Detection During Texture Import**
	* The Engine now attempts to heuristically examine textures on import to determine if a texture map is a normal map!	
		![](NormMapDet1.png)
		* LOD, Compression, and other defaults will be set automatically on import.
		![](NormMapDet2.png)
		* The user even has the option to revert the changes after import for 'standard' texture defaults.

* **HideUI, Safe Frames And Aspect Ratios In Editor UI**
	* HideUI : This allows users to remove the Slate overlay from the viewport.		
	![](safe1.png)(w:420)
	* Normal selection still works with LMB, and click the RMB to bring the UI right back. 
	![](safe2.png)(w:420)  ![](safe3.png)(w:420)
		* You can even combine the HideUI function with Game View to completely clear the viewport, as seen above
	* Safe Frames: If a camera actor is selected and the following criteria are met, the editor viewports now render safe frames based on the camera's aspect ratio setting:
		* Game View must be off.
		* The Safe Frames Show flag is on (**Show > Advanced**).
		* The selected camera actor has _Constrain Aspect Ratio_ set to _True_ in _Camera Settings_.
	![](safe4.png)(w:420)
	* Aspect Ratios: The aspect ratio property can now be edited in the following ways:
		* As a floating point value in the spinbox (as before).
		* By clicking the pull-down arrow and choosing from a list of preset ratios.
		* By entering a resolution or ratio as text in the format _width x height_ or _width:height_.
	![](cam1.png)

* **Source Control**
	* The source control status indicator has moved to the top-right corner of the editor, rather than under a submenu:
	![](SourceControl02.png)
	* Users are also able to access (and enable) source control from various parts of the editor:
		* From the File menu
		* In the context menus of the Content Browser
		* And in the level browser
	* Newly created (and saved) items will prompt users to login to source control if one hasn't already done so. 
	* Users can also login to source control in the Check Out dialog if they happen to need to check out files but source control was disconnected.

* **Project Browser** 
	* A Project Browser has been added that opens on launching the editor.
	![](Project-Browser.png)
	* Lists all known projects organized in categories determined automatically based on project location, but can be overridden to any existing or new category.
	* The thumbnail for a project is loaded from a `.png` file in the project's folder.
	* If users do not supply a thumbnail for a project, a screenshot is automatically taken upon exiting the editor for that project. This screenshot is only used on the machine it was taken.
	* Select the _New Project_ item at the top of the list to open the **New Project** wizard.


####Rendering
* **Material Parameter Collections**
	* Material Parameter Collections offer a powerful new way to drive a large number of materials parameters simultaneously!
	![](GlobalParams1.png)(w:420)
	![](GlobalParams2.png)(w:420)
	* In the example above, the following are all being driven by parameters in Material Parameter Collections:
		* flower morph states
		* wind speed and strength
		* player position (used by foliage animation)
		* sun angle and color (used by water crests)
	* Users can create collections of Material Parameters in the Content Browser, add new parameters, and give them names.
	* You can reference individual parameters in any and all materials, and even drive them efficiently through Blueprints!

* **Support For Static Meshes With >64k Vertices**
	* Support has been added for importing and rendering static meshes with more than 64k vertices!
	![](dragon.png)


##New Additions

####Editor Tools
* **Keep Simulation Changes!**
	* After changing actor properties in Simulate mode, you can now selectively make those changes permanent! 
	* Right click on actors in Simulate mode, and select Keep Simulation Changes (or press the 'K' key) 
* Added heuristic to identify normal maps on import and assign various settings appropriately.
* Added Save button to the Level Editor Toolbar
* **Toolbar Customization** - Epic Labs feature
	* Add commands to any compatible toolbar by dragging from the keyboard shortcuts menu
	* Remove commands by clicking the red 'X' button
	* Enable in the Epic Labs section of the preferences, then invoke via **Edit > Edit Toolbars**
* **Project Browser**
	* Allows you to see existing content and initiate creation of new projects
	* If a `.png` file matching the game name is in the game folder, it will be used in the browser, otherwise an automatic screenshot is taken every time you exit the editor
* **New Asset** menu in the Content Browser updated with categories, thumbnails, and descriptive tooltips
* Safe Frames - editor viewports now show the aspect ratio and safe frame area for selected camera actors
	* Activated by a Show Flag in the Advanced category that defaults to off
	* Safe frames are hidden by Game View mode like other non-scene viewport info
* Hide UI option in level editor viewports hides Slate UI overlay
	* Hide UI mode can be cancelled by click the right mouse button in the viewport
	* Safe frames are only shown when the selected camera has Constrain Aspect Ratio set to true


####Blueprints
* **Blueprint Delegates** - first version
	* Multicast-delegates can be added like variables
	* Delegates can be bound and unbound to and from events
	* Multicast delegates can be broadcast
* **Blueprint Simulation**
	* Can now toggle simulation of Blueprints in Component mode
	* When enabled, the graphs for the Blueprint and physics will run
* Added display of parent class information to the Blueprint editor, situated at the right hand side of the menu bar
* Can toggle floor preview geometry on and off in components mode for Blueprints
* SetPaused, SetTimeDilation, GetMousePosition, GetInputMotionState Blueprint functions added
* DestructibleMesh can now be set via the DestructibleComponent properties in the Blueprint editor


####Gameplay and Framework
* **Camera System**
	* Standardized on the camera information flow to pass the same struct everywhere, so every participant can set any property (parameters, post process overrides, etc...)
	* Refactored `ACameraActor` to use a `UCameraComponent`
	* Actors now search for an attached camera component when being viewed thru (controlled by `bFindCameraComponentWhenViewTarget`), allowing easy camera customization per pawn in Blueprints
	* Added limited support for orthographic gameplay cameras (WIP)
	* Camera components can now optionally inherit controller rotation
	* Added a simple camera boom component that does traces to avoid penetrating walls (`USpringArmComponent`)
	* Several template projects have been updated to demonstrate the use of camera components
	* The Aspect Ratio property of camera actors can now be edited in actor details using an editable text box or presets list
		* Existing floating point representation still available
		* Can be edited as text by entering a resolution or ratio as in the format _width x height_ or _width:height_
		* Can be edited by clicking the pull-down arrow and choosing from a list of preset ratios
	* By default player camera does not apply modifiers (such as shakes) if view target is not a `CameraActor`; added a flag to modify this behavior
	* New camera-relative movement modes have been made easier to implement. See the ThirdPersonTemplate for an example
* **Navigation and AI**
	* Faster navigation mesh (navmesh) rebuilding by splitting build process into two stages: processing static geometry (tile cache) and creating navigation mesh data with dynamic modifiers
	* Dynamic navigation mesh modifiers are defined using `INavRelevantActorInterface`, static meshes can be marked in assets' `NavCollision` property
	* Navigation meshes can now load only a few tiles close to players (`UseActiveTileSet` flag in `RecastNavMesh` actor)
	* Access to basic path finding and following for any Controller (both AI and player) with `SimpleMoveToActor` and `SimpleMoveToLocation` functions
	* Added new stats for navigation, to get information about costs of navigation mesh operations per frame (to calculate global navigation mesh costs on dedicated servers)
* **Input**
	* Added property to input bindings indicating whether it should execute while game is paused
	* Input Axis can now be bound as events, not just as Get Value nodes
* **Physics**
	* Support for Apex clothing LODs
	* Made it easier to set up game where player controls physics driven vehicle
		* Created `Vehicle` base class (essentially a `Pawn` with SkeletalMesh and `VehicleMovementComponent`)
		* Vehicle movement component now behaves similarly to character movement in terms of capturing input - waits for events from pawn instead of polling it 
		* Vehicle wheel now automatically uses engine cylinder to generate collision on wheels (default behavior, can be changed in wheel's Blueprint)
		* Wheel's Blueprint also allows to specify whether handbrake affects it or not (should affect only rear wheels)
* Cleaned up `BaseEngine.ini` collision profile definitions, so they're more readable and manageable
* Added possibility to execute functional tests on dedicated server. From now we can execute them on servers, to get some stats, logs or just test it
* Generalized socket support in `USceneComponent`, allowing socket/attachment UI to work with other classes besides `USkeletalMeshComponent`/`UStaticMeshComponent`
* Ported UE3 command line parameters for setting various window sizes (ResX/ResY for game window resolution, WinX/WinY for game window position, ConsoleX/ConsoleY for console window position)


####Rendering
* Texture sampler limit tracking is now done accurately by actually looking at the compiled output.
* WorldPosition material expressions can now be used in post process materials. The result will be the world-space position as viewed through that pixel of the post process pass.
* WorldPosition material expressions can now select whether the position is absolute world position, or camera-relative.
* Static meshes with more than 65536 vertices may now be imported and rendered.
* Stationary light in Blueprint fixes
	* Still several unresolved issues that cause static lighting to be un-built when either the mesh or the light is created in a Blueprint


####Animation/Persona
* PhAT now has a Persona style animation picker.
* PhAT body context menu now allows a body type to be set to default, as well as fixed/unfixed. Menu has been re-arranged into more sensible grouping, and shows the current type for a body.
* You can now select bones in Persona by clicking on them in the viewport (if bone rendering is on). A click in blank space will deselect.
* Added Wind Direction on Persona 


####Sound
* There is no longer a root sound class.  Multiple independent sound class hierarchies can exist and be used in parallel.
* Can now specify whether to prevent new, stop oldest, or stop furthest when the max concurrent sound limit is reached.


####Online
* OnlineSubsystemNull added to provide a subset of online functionality when not using any real online backend. Only sessions (advertised over LAN) are supported so far.


####Core
* It's now possible to register a function to be called on console variable changes (RegisterConsoleVariableSink)
* Client and cook server now swap game and engine directories to allow their layouts to differ 
* New level stats system
* Added Visual Studio Profiler support 
	* Wrap slow code blocks using SCOPE_PROFILE_INCLUDER, then start the external profiler in a PAUSED state 
* **Profiler**
	* Added function details to the event graph


####Platform
* Added a high level save game system: `GenericSaveGameSystem`
	* Uses `GFileManager` to save to `GameSaveDir()`
	* Added `IPlatformFeaturesModule`, which can return a save game class (and will be used for other things) 
	* Added a SaveGame automation test to the Game set
* Android builds with NDK r9 and Clang 3.3
* Update `PhysX-3.2_EPIC` source from the NVIDIA depot


##Upgrade Notes

####Editor and Tools
* Removed `GenerateProjectFiles.bat` for uproject files (the `GenerateProjectFiles.bat` in the UE4 root remains and is not generated).
	* This is now done by right clicking on the .uproject file and selecting Generate Visual Studio Files.
	* Use `Engine/Build/BatchFiles/RegisterShellCommands.bat` to associate a build folder with `.uproject` files. Only one build may be associated at a time.
* Perforce dialog no longer pops up on Editor startup. Source control workflow streamlined.
	* Source control login is now accessible by clicking the colored indicator button in the top-right hand corner of the Editor. It can also be accessed 'just-in-time' in various menus throughout the Editor.

####Blueprints
* ACharacter no longer has default movement input bindings.
	* There is a bool `bAddDefaultMovementBindingsForBlueprint` that determines whether a Character Blueprint uses the old default native key bindings for input or not. Default is true, so content should set it to false if they want custom bindings. Well probably remove this after people have a chance to migrate content.
	* Input axis events are exposed to Blueprints, and movement functions are exposed as well. SideScrollerTemplate and ThirdPersonTemplate have been updated as examples.
* Template Default map : changed atmospheric fog altitude number from 32 to 2, to reduce texture data.
* Atmospheric fog - allow Blueprint-created atmospheric fog components to maintain precomputed data
* Blueprints cannot be renamed to include invalid characters as this was breaking the Blueprint execution.
* `SceneComponent::AttachTo`'s attach type changed to enum from bool
	* `KeepRelativeOffset` - Keep current relative transform
	* `KeepWorldPosition` - Keep current world transform
	* `SnapToTarget` - Reset current relative transform
* `Actor::MakeMIDForMaterial` has been deprecated. CreateMID function is added in the Material Library. 
* Instead of using CreateMID, utilize CreateMIDForElement or CreateMIDForElementFromMaterial
* Material parameter collection Blueprint functions are now in a kismet function library
	[REGION:note]
	Note: this breaks the previous material parameter collection Blueprint functions. Existing nodes will have to be replaced.
	[/REGION]
* For shader development, enable `r.ShaderDevelopmentMode` in ConsoleVariables.ini.  LogShaders is no longer the method to get retry on compile error.


####Gameplay and Framework
* Reorganization of source code to put all source for a class in its own file(s)
	* Affects `Actor`, `Controller`, `GameReplicationInfo`, `PlayerReplicationInfo`, `WorldSettings`, `Character`, `Pawn`
	* Added `ActorReplication.cpp`, `ActorEditor.cpp`, `WorldSettings.cpp`
	* Remove `Script.cpp`
* PlayerController input component is no longer created in the constructor.  Bindings should be done, similar to Pawn, in the virtual function SetupInputComponent.
* `PlayerController.GetInputAnalogStickState` now returns game value (after invert and dead zones have been applied) instead of the raw hardware value.
* ConsumeInput removed from `BIND_` macros.  To set `InputAction`/`InputAxis` properties from code after binding the macro can do something similar to:
		
		BIND_ACTION(InputComponent, "Fire", IE_Pressed, &AQAPlayerController::OnTriggerPressed);
		InputComponent->ActionBindings.Last().bConsumeInput = false;

* `MaxDrawDistanceScale` system setting has been replaced by new `r.ViewDistanceScale` console variable.
* `LocalMap` has been removed, `Map` is now the only setting used to specify the DefaultMap 
* BeginPlay refactor
	* `PreBeginPlay`/`BeginPlayComponent`/`PostBeginPlay` renamed to `PreInitializeComponents`/`InitializeComponent`/`PostInitializeComponents`
	* `ReceiveBeginPlay` event in Blueprints now fires after the player has been spawned.
	* `LevelScriptActor.BeginGame` event converted to ReceiveBeginPlay
	* Streamed in sublevels and their placed actors get ReceiveBeginPlay calls
* The signatures of many camera related functions have changed to take a `FMinimalViewInfo`, containing a full view state, instead of loose location/rotation/FOV values.
* The first batch of project, Engine and Editor settings have been refactored to use the new Settings UI framework


####Rendering
* StaticSwitchParameter material expressions now emit an error if either inputs are not connected. This may cause some existing materials to not compile.


####Animation and Persona
* `USkeletalMesh::Sockets` is now private. `GetActiveSocketList()` and `GetMeshOnlySocketList()` have been added to get the list of sockets. This is editor only code.
* `FKSphereElem`/`FKBoxElem`/`FKSphylElem` have been refactored to store minimal position/orientation info, rather than a full FMatrix. Code using these classes will need to be changed.


####Sound
* `ReverbVolumeToggleable` combined with `ReverbVolume`


####Online
* Refactored Online Subsystem OnlineProfileInterface to be combined with OnlineIdentityInterface
	* Deprecated existing OnlineProfileInterface functionality so that it can be deleted
* Http module no longer checks for internet connection at startup 
	* This was a blocking call for WinInet and not necessary since async request would fail anyway without a connection
* Http module has a flag to disable actually making http requests and just calls completion delegates instead
	* In `DefaultEngine.ini`:
		
			[Http]
			bEnableHttp=false

* Http WinInet implementation always downloads from server instead of relying on cached data via INTERNET_FLAG_RELOAD


####Core
* `TPreallocatedArray<Type, Count>` has been removed.  You should instead use `TArray<Type, TFixedAllocator<Count>>`.
* Editor-visible or Blueprint-visible deprecated properties are now an error.  They should be made non-visible.
* First pass of refactoring navigation-related functions out of `AActor`. Now all navigation relevant actors need to implement `INavRelevantActorInterface`
* `TAssetPtr` type has been rebuilt, and can now be used for asynchronous loading of asset data
	* A `FStringAssetReference` is a structure that contains the name of an asset, and can be used to refer to data that is not loaded.
	* A `TAssetPtr` is similar to a `TWeakObjectPointer`, but it can be used to refer to data that is not currently loaded. 
	* Any previous uses of `TAssetPtr` will not work, as it now uses `FStringAssetReference` for serialization. This means that it works properly with cooking and redirects. You can access the `FStringAssetReference` used by a `TAssetPtr` with `.GetUniqueID()`.
	* You can use `FStringAssetReferences` and `TAssetPtrs` as properties, and the editor UI will let you create references to data that is not always loaded. You can convert a
	* `FStreamableManager` now has functions for asynchronously loading `FStringAssetReferences`, with callbacks on completion. You can use this to request loading groups of assets without stalling the main thread
* Plugins may now be toggled enabled/disabled in the plugins UI.
	* If your game uses a plugin, you must add `+EnabledPlugins="YourPluginName"` to the `[Plugins]` section of `DefaultGame.ini`
* Rename tick groups to Pre/During/PostPhysics instead of AsyncWork
	* Remove `bTickBeforePhysics` flag
* `IMPLEMENT_PRIMARY_GAME_MODULE` now depends on the generated UELinkerFixup function existing, which in turn requires all modules to have `IMPLEMENT_MODULE` setup properly. 
* Converting Unreal Enums to strings using `GetEnumString()` can now be used from Core (was in Engine)


####Platform
* Changed/modified some environment variable names used by UnrealBuildTool and IPhonePackager. Search `*.cs` for: `"ue`.
* Added Dangerously Fast mode, which will just recompile the executable, it won't copy provisions, or anything like that. A Rebuild/Clean will perform one slow mode compile.


##Ongoing Efforts and Improvements

####Editor Tools
* **Matinee**
	* A Slate notification now appears to tell the user that they can't add a Static Light to a Matinee track
	* The Matinee Reduce keys menu now displays correctly
	* Gave the Matinee event name text box entry widget a maximum width so it doesn't assert when pasting lots of text
	* Use a check button for the Editing Crosshair action to display on/off state in the menu
* **Play In Editor/Simulate In Editor**
	* When a PIE GameplayViewport is active, UDK remote input will be scaled and routed only to that viewport
	* Play-In-Editor (PIE) settings can now be configured in the Settings UI
	* Actors are no longer unselected when switching from eject to possess while simulating
* **Viewports**
	* Planar wireframe meshes are now visible in orthographic views
	* Visualize Ambient Occlusion is now available via the Visualize Buffer menu rather than via a showflag.
	* **Attach To** option in level viewport content menus now automatically gives text focus to the search field
	* Added an Editor user setting for the visualizing LevelStreamingVolume actions: **Level Streaming Volume Previs**
* **World Browser** 
	* Added snapping by level bounds for non-landscape levels (Hold **Ctrl** to disable it) 	
	* Moved **File > Open World...** command from the Editor main menu to the World Browser main menu 
	* Added custom 'Open world location' dialog instead of OS standard 'Browse for folder' dialog 
* **Scene Outliner**
	* You can undo an Actor rename in the Scene Outliner
	* Changed the Scene Outliner to only scroll the selection into view when it wasn't visible in the outliner
	* SceneOutliner now updates when levels are streamed in/out during SIE/PIE
* **Landscape**
	* Added Undo for Copy and Gizmo operations
	* Disable Gizmo Remove Layer button when there is no layer
	* Added ability to create levels with landscape proxies directly from the world browser. User needs to have at least one loaded level with landscape beforehand
* **Foliage**
	* Hook up to notifications for map rebuilds and migrate foliage instances across BSP components in response to avoid broken/obsolete components crashing PIE
	* Do not delete untargeted foliage instances if rebuilding geometry removes the original target BSP
* **Message Log**
	* Message log API has been streamlined. Message log output is now usable from all modules, not just Editor modules as before
	* Multiple duplicate message logs now don't appear on Editor startup
	* Message logs now don't pop up incorrectly when changing levels, running map check of building lighting
* **Autosave**
	* Now disabled when running without any project loaded. This is to prevent autosave while in the new project screen before loading any projects
	* Suspend opening an autosave notification when interacting with sliders/spinbox/menus not just menus
* **General UI Improvements**
	* Moved the Recent Levels into a submenu
	* Changed the Recent Projects to use regular menu items
	* Icons and mobility indicator no longer turn black when highlighted
	* ScrollBox RMB scrolling now behaves the same as ListView
	* The user can now press the escape key to close the new level dialog box
	* The user can now press the escape key to close the save all dialog box
	* On launch the Editor now has full focus so keyboard shortcuts now work correctly without having to click inside the Editor window
	* The search box field is now in focus by default in the Settings Editor categories
	* Renamed Packages to Files in the Build and Submit window
	* Added a MaxWidth to STextEntryPopup arguments - still unbounded by default
	* When a user's desktop is configured with a right-hand primary monitor, submenus on the left-hand monitor now don't fly in from the far right
	* Cooked content warning dialog explains why its failed to run in more detail
	* Make the Static Meshes and BSP Surfaces items within the **Build > Lighting Info > LightMap Resolution Adjustment** menu use the right check box images so they display correctly
	* Removed the black border on the Collision Profile Reset to Default button in the Blueprint property tab so it looks like the others
	* Created 16x icon for import asset context menu
	* Initial WIP pass of multiple requested class icons for new assets
	* New icon created to replace placeholder 16x icon
	* Created new 40px icons for all menu items currently with a 16x icon
	* Created new icons for the 5 main editor tool icons, along with color change icons for the selected states. Icons require code hook-up
	* New view menu icon for developer tools/modules menu item @ 16x
	* Created new icons for all window menu items @ 16px, also to be used for menu tabs
	* Created placeholder icons for missing NavMeshModifier at 16x & 64x
	* Created 40px icon for generic command & 512px source icon
	* Created new icons at 16px & 64px for multiple volume types (used in content/placement browsers)
	* Created new icons for the various 128px plugin icons & 20px folder icons for use on the plugins pane
	* Created new 16px icons recent levels & recent projects
	* Added icons for a number of editor windows' tabs and their entries in the menu
	* Added icons for volume types in placement browser
	* Added additional icon support in plugins editor
* Continued to implement centralized project and Editor settings UI
* Added details view customization for FGuid properties
* Rebuild model now falls back to using the worlds Current Level when the models Level isn't available (occurs under certain conditions)
* Copy component properties now takes into account index mismatch
* Template maps now show the correct names
* Swarm now runs minimized by default when running level builds
* OutputLog now only snaps to the bottom, when new entries are added, if the user hasn't scrolled away
* DefaultPath is now treated as a full path in the Windows file dialog, which avoids confusion with other branches
* Improve **Alt + drag** Actor duplication performance by registering exporters & improving performance of serializing large UObjects like levels
* Properly tag Brush and Volume classes so that they can be freely converted
* Discard previous actor selection when selecting brush groups, such as Select All Additive Brushes
* Improving usability of destructible mesh editor
* Any files discovered by the asset registry which cannot be converted to a long package name with only valid package characters will now be skipped
* Added a template HitProxyCast for hit proxies.
* Local documentation URLs that have anchors now open in browser correctly


####Blueprints
* In the Blueprint Editor, variables, functions, graphs, macros, and delegates are now renamed inline in the **My Blueprint** window
* Pop-ups and notifications that should not affect focus should no longer.
* Missing actions from the Palette window in the Blueprint Editor should now appear.
* When creating a Blueprint from actor, the resulting Blueprint will not have all the components rotated strangely.
* Many minor improvements to Blueprint thumbnails in the content browser.
* Changes made to native component properties in the Details tab within Components mode of the Blueprint editor will now correctly propagate out to any Actor instances based on the Blueprint.
* Script exceptions (e.g. breakpoints) are no longer triggered for actors/objects in the Blueprint preview scene. Additionally, the Blueprint preview scene is no longer ticked while a PIE/SIE session is active, so it does not pollute the message log during script debugging.
* Variable nodes in a Blueprint graph will now display a warning after compilation if the property no longer exists or was deprecated.
* Removing the Default output pin on a **Switch on Int** node in a Blueprint graph will no longer cause the Blueprint to fail to compile after re-opening the editor.
* Blueprint Diff graph list now scrollable and other misc improvements.
* Blueprint editor no longer crashes when copy/paste/undo/pasting custom event nodes


####Gameplay and Framework
* Hierarchical pathfinding
* Custom navmesh connections (offmesh links): segment to segment
* WorldSettings will be migrated to a new class if the `.ini` file dictates a different class than that which was saved in the map.
* Blueprint PrintString messages flagged bPrintToLog now display in console as well as log.
* Input Key nodes can now have the bound key switched from the property details panel.
* Added DLL export to various skeletal control functions.
* Removed dead UJsonObject class. 
* Got rid of deprecated USkeletalControl parallel hierarchy. 
* Renamed box query parameter from Extents to HalfExtents, indicating that it is the box radius instead of bounds. 
* Added support for arbitrary nesting of Interp properties (e.g., Component.Struct.Prop), and redirection of Matinee track names (in the INI map MatineeTrackRedirects).
* Removed a truncation from camera shake strength (legacy of integer FRotator). 


####Rendering
* When not running with the editor, all scene render targets will be reallocated on resizing the window. This allows memory to be recovered when changing to a lower resolution
* ParticleParameter distributions are now not selectable on GPU emitters for various properties. Previously they would have been selectable but would not have worked.
* Random and Random_Blend interpolation methods are now not selectable for GPU emitters. Previously they would have been selectable but would not have worked.
* Particle emitter's editor LOD value is set to 0 on load.
* **Texture Streaming** - Simpler logic to decide how textures should be streamed (or not), fixes for dynamic textures (including Blueprints)
* StaticSwitchParameter material expressions now emit an error if either inputs are not connected.
* Tessellated materials draw to the velocity buffer.
* Corrected the output mask value for **SceneTexture** material expression.
* A warning message is now displayed in the Material Editor when the user attempts to use _BLEND_MODULATE_ with separate translucency
* Ensure that the static mesh editor rebuilds the physics geometry after any change to the mesh so it doesn't disappear from view
* Static mesh sections with no triangles no longer use up a material slot. Existing content will be fixed on load
* Added stripping of HQ lightmaps and distance field shadows from iOS
* Wider ES2 bloom
* Defer broadcasting material instance property changes while still interacting with them in the material editor, so that editing is much smoother
* Compilation of the shaders for a material are now completed before generating a thumbnail to save to disk


####Animation and Persona
* **PHAT EDITOR**
	* Removed collision settings from PhAT: BodySetup, but added collision response Enabled/Disabled
	* All other settings are derived from OwnerComponent
	* Enabled default pawn collision against destructible
	* Modified PhAT tooltip to be less confusing to the user.
* Skeletal mesh vertices are rearranged during import to be more cache friendly.
* Undo/Redo fixed for adding/deleting sockets from a skeleton.
* Added the axis indicator to the Persona viewport.


####Sound
* Entire SoundClass hierarchy, including parents, will be displayed when opening the Sound Class editor via a child SoundClass.


####Online
* Ongoing efforts to improve the stability and robustness of the online platforms
	* Misc
		* Support for bool FVariantData for key value pairs
      		* Added CreateUniquePlayerId function to Identity interface
      		* UpdateSession API now defaults to updating backend
      		* Made session settings bool instead of bitfield
	* Cloud
		* Additional updates to cloud headers 
      		* Delete local cache files not in the enumerated list 
      		* Update enumerated list after write/delete user file


####Core
* Rewrote external CPU profiler support (AQTime, VTune, VSPerf)
	* Use command-line options to select a specific profiler: `-AQtime`, `-VSPerf` and `-VTune` 
	* The first valid profiler is used by default (usually VSPerf.) Profilers are available only if their DLL is found in a search path. 
* If you have any large functions with a lot of Slate code in them, they can now be wrapped in a BEGIN_/END_SLATE_FUNCTION_BUILD_OPTIMIZATION macro pair to improve Developer build times for the modules containing these functions.
* Added option to SWizard to supply a delegate for when back is clicked on the first page.
* Adjusted Base ini files to help avoid saving additional data to saved ini files. 
* Simplified TemplateMapInfo struct since the config system can directly load a UObject reference.
* Moved some comments around in asset type classes so that they will appear in tooltip metadata. This is where the **New Asset** menu draws its descriptions for classes.
* Build machines no longer load from or save to the EditorGameAgnostic ini. Also, build machines no longer attempt to auto-load project files.
* Updated class validity logic in the c++ class wizard to allow for the extending of classes in the game module.
* Path pickers no longer show a Classes folder. Also, selection is always single, thus deselecting a path is not allowed.
* An option to open visual studio was added to the File menu in the mainframe.
* Hardware survey no longer done in debug builds 
* Started synthetic benchmark (console command `SynthBenchmark`, part of Hardware survey) to base video settings on it
* Added detail mode SceneComponent so lights can be culled by r.DetailMode as well
* Optimized decal state changes 
* JsonReader now ignores trailing and preceding whitespace
* Added functionality that will adjust some of the internationalization gather log output to prevent automated builds from failing when localization strings containing "Error" are encountered
* Forcing internationalization manifest and archive files to be written out using unicode encoding
* Added config files for generating Engine and Editor localization files
* Added streaming install ChunkID info to `FAssetData`, `FPackageFileSummary`, and `FBackgroundAssetData`.
	* In future builds this will be used by the packager for creating streaming install `.pak` files and for determining the install state of individual assets.


####Platform
* Porting the engine and the editor to Mac
* Removed GScreenWidth/Height, and set the default resolution for non-desktop platforms to 0x0, to make it query the device for current resolution

