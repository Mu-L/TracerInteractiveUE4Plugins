INTSourceChangelist:3367470
Title:2013 年 8 月リリースノート
Crumbs:%ROOT%, Support/Builds
Description:
Availability:Licensee
Parent:Support/Builds
Order:-6

[TOC(start:2 end:2)]

## ビルド情報


[REGION:simpletable]
| アイテム | 情報 |
| ---- | ---- |
| **ラベル** | QA_APPROVED_UE4_BUILD_2013_08 |
| **チェンジリスト #** | 1781093 |
| **VISUAL STUDIO VERSION** | Microsoft Visual Studio 2010 version 10.0.40219.1 SP1 Rel |
| **DIRECTX** | 2010年6月 |
[/REGION]

## 重要情報

 * 現時点のエンジン開発ロードマップ: [UE4 Roadmaps](https://udn.unrealengine.com/questions/topics/roadmap.html)
 * 修正されたバグ： [UE4 Fixed Bugs August 2013](UE4_Fixed_2013_August.xlsx)
 * 周知のバグ： [UE4 Outstanding Bugs August 2013](UE4_Bugs_2013_August.xlsx)
 

## 主要な新機能

####エディタ ツール
* **シミュレーション変更を永続的なものにする**
	* シミュレーション中に加えた変更を永続的なものにすることができるようになりました。	
	![](Simulation.png)
	* シーン アウトライナーでアクタを選択した状態で以下を行うことができます。
		* ゲーム実行中にアクタのプロパティを修正し、変換し、こうした変更を維持できます。
		* 剛体を動かして最終位置をレベルに保存します。
		* ブループリントまたはゲームプレイのコードを使用してシミュレーションでアクタを修正し、こうした変更を保存します。
		* プレイモードでも機能します。

* **ツールバーのカスタマイズが、EpicLabs Preference にあります**
	* **ツールバーのカスタマイズは EpicLabs でオンにできます。
	![](CustomTools_Final.png)
	* **Edit > Edit Toolbars** の順序で選択し、**Keyboard Shortcuts** ウィンドウからコマンドを互換性のあるツールバーにドラッグできます。

* **テクスチャ インポート中の法線マップ検知**
	* エンジンは、テクスチャ マップが法線マップであるかを判断するためにインポート時にテクスチャを発見的 (ヒューリスティック) に調べるようになりました。	
		![](NormMapDet1.png)
		* LOD、圧縮、その他のデフォルトはインポート時に自動的に設定されます。
		![](NormMapDet2.png)
		* 「標準」のテクスチャのデフォルトをインポート後であっても変更をリバートするオプションがあります。

* **エディタ内の UI の非表示、セーフフレーム、およびアスペクト比**
	* HideUI : (UI を非表示にする)ビューポートからスレートのオーバーレイを取り除くことができます。		
	![](safe1.png)(w:420)
	* 法線選択は左マウスボタンでも機能します。UI を戻すには右マウスボタンをクリックします。 
	![](safe2.png)(w:420)  ![](safe3.png)(w:420)
		* UI を非表示にする機能を Game View と組み合わせて上記のように完全にビューポートをクリアにすることもできます。
	* Safe Frames:カメラ アクタを選択し、以下の基準を満たしたら、エディタ ビューポートはカメラのアスペクト比の設定に基づいてセーフフレームをレンダリングします。
		* ゲームビューは必ずオフにします。
		* Safe Frames Show フラグはオンにします (**Show > Advanced**).
		* 選択したカメラアクタは、_Camera Settings_ で _Constrain Aspect Ratio_ が _True_ に設定されているようにします。
	![](safe4.png)(w:420)
	* アスペクト比：アスペクト比のプロパティは以下の方法で編集できるようになりました。
		* スピンボックス内の浮動小数点値として (以前と同様)
		* プルダウン矢印をクリックして事前設定された比率のリストから選択
		* 以下の形式のテキストで解像度または比率を入力、 _幅 x 高さ_ または _幅 : 高さ_.
	![](cam1.png)

* **ソース コントロール**
	* ソース コントロールのステータス インジケータはサブメニューの下ではなくエディタの右上隅に移動しました。
	![](SourceControl02.png)
	* 以下のようなエディタの様々な部分からソース コントロールにアクセスして有効にすることもできます。
		* ファイル メニューから
		* コンテンツ ブラウザのコンテキスト メニューで
		* レベル ブラウザで
	* 新規作成 (および保存) されたアイテムがあれば、まだユーザーがソース コントロールにログインしていなければログインするように促します。 
	* ファイルをチェックアウトする必要がたまたまあったがソース コントロールに接続していなければ、ユーザーはチェックアウト ダイアログでソース コントロールにログインすることもできます。

* **プロジェクト ブラウザ** 
	* エディタ起動時に開くプロジェクト ブラウザが追加されました。
	![](Project-Browser.png)
	* プロジェクトの位置に基づき自動的にすべての既知のプロジェクトをカテゴリ別に整理してリスト表示しますが、既存カテゴリまたは新規カテゴリがあればオーバーライドされることがあります。
	* プロジェクトのサムネイルは、プロジェクト フォルダにある「`.png`」ファイルからロードされます。
	* プロジェクトのサムネイルを作らないと、プロジェクトのエディタを終了するとスクリーンショットが自動的にとられます。このスクリーンショットは、それをとったマシンでのみ使用されます。
	* リストの一番上にある _New Project_ アイテムを選択し、**New Project** ウィザードを開きます。


#### レンダリング
* **マテリアルのパラメータ コレクション**
	* マテリアルのパラメータ コレクションには大量のマテリアル パラメータを同時に操作する強力な新機能があります。
	![](GlobalParams1.png)(w:420)
	![](GlobalParams2.png)(w:420)
	* 上の例では、以下はマテリアルのパラメータ コレクションのパラメータで操作されています。
		* 花のモーフィングのステート
		* 風の速度と強度
		* プレイヤーの位置：(フォーリッジ アニメーションで使用)
		* 太陽の角度と色 (水位点で使用) 
	* コンテンツ ブラウザでマテリアル パラメータのコレクションを作成し、新規パラメータを追加、名前を付けることができます。
	* どのパラメータでも、またすべてのパラメータで個々のパラメータを参照することが可能であり、ブループリントで効率的に操作することもできます！

* **頂点数が 64 k よりも大きいスタティックメッシュをサポート**
	* 頂点数が 64 k よりも大きいスタティックメッシュのインポート、およびレンダリングのサポートが追加されました！
	![](dragon.png)


## 新機能の追加

####エディタ ツール
* **シミュレーション変更を継続**
	シミュレーション モードでアクタのプロパティを変更後、こうした変更を選択的に永続的なものにできるようになりました! 
	* シミュレーション モードでアクタを右クリックしシミュレーション変更を継続、 Keep Simulation Changes (または 'K' キーを押します) を選択します。 
* ヒューリスティック機能を追加して、インポート時に法線マップを特定し、適宜様々な設定を割り当てるようにしました。
* レベル エディタのツールバーに保存ボタンを追加しました。
* **ツールバーのカスタマイズ** -EpicLabs 機能
	*キーボードのショートカットメニューからドラッグして互換性のあるツールバーへのコマンドを追加しました。
	* 赤い 'X' ボタンをクリックしてコマンドを削除します。
	* 環境設定 (preferences) の Epic Labs セクションで有効にし、**Edit > Edit Toolbars** の順序で呼び出します。
* **プロジェクト ブラウザ**
	* 既存のコンテンツを見て新規プロジェクトの作成を開始できます。
	ゲーム名と一致する `.png` ファイルがゲームフォルダにあればそれがブラウザで使用されます。なければ、エディタを終了するたびにスクリーンショットが自動的にとられます。
* コンテンツ ブラウザの **New Asset** メニューにカテゴリ、サムネイル、説明のツールチップが追加されました。
* セーフフレーム - エディタのビューポートに選択したカメラ アクタのアスペクト比とセーフフレーム領域が表示されるようになりました。
	* デフォルトでオフになっている Advanced カテゴリの Show Flag で有効になります。
	* 他のシーン以外のビューポート情報のようにゲームビューモードではセーフフレームは非表示になっています。
* レベル エディタのビューポートの Hide UI オプションは Slate UI のオーバーレイを非表示にします。
	* Hide UI モードはビューポートで右マウスボタンを押下してキャンセルできます。
	* セーフフレームは選択したカメラの Constrain Aspect Ratio が true に設定されている場合に限り表示されます。


####ブループリント
* **ブループリント デリゲート** -1 st バージョン
	* 変数のようにマルチキャスト デリゲートを追加できます。
	* イベントに、およびイベントからデリゲートを bound および unbound できます。
	* マルチキャスト デリゲートは通達 (broadcast) できます。
* **ブループリント シミュレーション**
	* コンポーネント モードでブループリントのシミュレーションを切り替えることができます。
	* 有効になると、ブループリントと物理のグラフが実行します。
* 親クラスの情報の表示をブループリント エディタのメニューバーの右側に追加しました。
* ブループリントのコンポーネント モードでフロアのプレビュー ジオメトリを切り替えることができます。
* 以下の関数が追加されました。すなわち、SetPaused, SetTimeDilation, GetMousePosition, GetInputMotionState Blueprint functions です。
* ブループリント エディタの DestructibleComponent プロパティで被破壊メッシュを設定できるようになりました。


####ゲームプレイとフレームワーク
* **カメラ システム**
	* すべての参加者がプロパティ (パラメータ、ポストプロセスのオーバーライドなど) を設定できるように、どこでも同じ構造体を渡すカメラ情報フローを標準化しました。
	* `ACameraActor` が `UCameraComponent` を使用するようにリファクタリングしました。
	* アクタは見られているときに アタッチされているカメラ コンポーネントを探すようになり (`bFindCameraComponentWhenViewTarget` で制御)、ブループリントでポーン毎にカメラのカスタマイズを簡単にできるようになりました。
	* 正投影ゲームプレイ カメラ (WIP) に制限付きのサポートを追加しました。
	* カメラ コンポーネントはコントローラの回転をオプションで継承できるようになりました。
	* 壁を突き抜けることを回避するための追跡を行う簡単なカメラ ブーム コンポーネント (`USpringArmComponent`) を追加しました。
	* カメラ コンポーネントの使用をデモするためにいくつかのテンプレート プロジェクトを更新しました。
	* カメラ アクタのアスペクト比プロパティは編集可能なテキスト ボックスまたはプリセット リストを使用してアクタの詳細で編集できるようになりました。
		* 既存の浮動小数点の表示はまだ利用可能です。
		* 以下の形式のテキストで解像度または比率を入力して編集できます。、 _幅 x 高さ_ または _幅 : 高さ_.
		* プルダウン矢印をクリックしてプリセットの比率のリストから選択して編集できます。
	* ビューターゲットがビヘイビアを修正するフラグを追加された `CameraActor` ではない場合、デフォルトでプレイヤーのカメラはモディファイア (例、シェークなど) を適用しません。
	* 新しいカメラの相対移動モードは、一段と簡単に実装できるようになりました。例として ThirdPersonTemplate をご覧ください。
* **ナビゲーションと AI**
	* ナビゲーション メッシュ (navmesh) の再ビルドが一段と高速になりました。これは、ビルド プロセスを 2 つの段階、すなわち静的ジオメトリ (キャッシュのタイル処理) の処理、および動的モディファイアでナビゲーション メッシュ データを作成する処理に分けて行います。
	* 動的ナビゲーション メッシュのモディファイアは、`INavRelevantActorInterface` を使用して定義されます。スタティックメッシュはアセットの`NavCollision` プロパティでマークすることができます。
	* ナビゲーション メッシュはプレイヤーに近いいくつかのタイルのみを読み込むことができます (`RecastNavMesh` アクタの `UseActiveTileSet`フラグ)。
	* `SimpleMoveToActor` 関数および `SimpleMoveToLocation` 関数で基本パスを見つけてコントローラに従うことができるようになりました。
	* ナビゲーション用の新しい統計を追加しました。フレーム単位でのナビゲーション メッシュのオペレーション負荷 (デディケイテッド サーバーのグローバル ナビゲーションメッシュの負荷を計算するためのもの) に関する情報を取得します。
* **入力**
	* ゲーム停止中に実行するか否かを示す入力バインディングのプロパティを追加しました。
	* これで入力軸は単にGet Value ノードではなくイベントとしてバインドできるようになりました。
* **物理**
	* Apex  クロスの LOD (Level of Detail) をサポート
	* プレイヤーが物理駆動のビークルを制御するゲームを簡単にセットアップできるようにしました。
		* `Vehicle` ベースのクラスを作成しました (基本的にスケルタルメッシュと `VehicleMovementComponent` を持つを持つ `Pawn`)
		* ビークル移動コンポーネントは、入力をキャプチャするという点でキャラクターと似た挙動をするようになりました。ポーリングする代わりにポーンからのイベントを待ちます。 
		* ビークルの車輪は自動的にエンジン シリンダを使用して車輪のコリジョンを生成します (デフォルトのビヘイビアは車輪のブループリントで変更できます)。
		* 車輪のブループリントでは、ハンドブレーキが車輪に影響を及ぼすか否かを指定できます (後輪にのみ影響を及ぼすべきです)。
* `BaseEngine.ini` のコリジョン プロファイル定義をクリーンアップし、より読みやすく、管理しやすくなるようにしました。
* デディケイテッド サーバーで機能テストの実行を可能にしました。これからは、サーバーで機能テストを実行し、統計情報、ログを入手したり、単にテストすることができます。
* `USceneComponent` でのソケットのサポートを一般化し、ソケット / アタッチメント UI で `USkeletalMeshComponent`/`UStaticMeshComponent` 以外の他のクラスでも作業できるようにしました。
* 様々なウィンドウ サイズを設定するための UE3 コマンドライン パラメータを移植しました(ゲーム ウィンドウの解像度用に ResX/ResY、ゲームウィンドウの位置用に WinX/WinY、コンソール ウィンドウの位置に ConsoleX/ConsoleY)


#### レンダリング
* テクスチャ サンプリングのリミットのトラックは実際にコンパイルした出力を見ることで正確に行われるようになりました。
* WorldPosition マテリアル式はポストプロセス マテリアルで使用できるようになりました。その結果は、ポストプロセスのパスのピクセルを通して見たワールド空間の位置になります。
* WorldPosition マテリアル式では、位置が絶対的なワールド位置であるか、またはカメラに相対的な位置であるかを選択できるようになりました。
* 頂点数が 65536 を超えるスタティック メッシュをインポートおよびレンダリングできるようになりました。
* ブループリントの Stationary Light (固定ライト) の修正
	* メッシュまたはライトをブループリントで作成した場合に Stationary Light (固定ライト) がビルドされないといういくつかの未解決問題があります。


####アニメーション / ペルソナ
* PhAT にはペルソナ スタイルのアニメーション ピッカーがあります。
* PhAT ボディのコンテキスト メニューでは、ボディタイプをデフォルトに設定したり、固定/固定解除 (fixed/unfixed) に設定できるようになりました。メニューはわかりやすいグループ分けで整理され、ボディの現在のタイプを示すようになりました。
* ペルソナでボーンを選択できるようになりました。これはビューポートでペルソナをクリックして行います (ボーンのレンダリングがオンになっている場合)。ブランク空間でクリックすると選択が解除されます。
* ペルソナに風の方向を追加しました。 


#### サウンド
* ルートのサウンド クラスはなくなりました。複数の独立したサウンド クラスの階層が存在可能であり、並行して使用できます。
* 最大サウンド制限に到達した場合に、新規サウンドを入れない、一番古いものを停止する、または一番遠くのものを止めるなどを指定できるようになりました。


####オンライン
* OnlineSubsystemNull が追加されました。これは、実際のオンライン バックエンドを使用していない場合に、オンライン機能のサブセットを提供します。これまで、セッションのみ (LAN 上で advertised) がサポートされています。


####コア
* コンソール変数の変更で関数を呼び出すように登録することが可能になりました (RegisterConsoleVariableSink)。
* クライアントとクック サーバーは、ゲームとエンジンのディレクトリをスワップし、その2 つで異なるレイアウトを実現します。 
* 新規レベルの統計情報システムです。
* Visual Studio のプロファイラ サポートを追加しました。 
	* SCOPE_PROFILE_INCLUDER を使用して遅いコード ブロックをラップしPAUSED ステートで外部プロファイラを開始します。 
* **プロファイラ**
	* イベントグラフに関数の詳細を追加しました。


####プラットフォーム
* ハイレベルな save game システム、`GenericSaveGameSystem` を追加しました。
	* `GFileManager` を使用して `GameSaveDir()` に保存します。
	* `IPlatformFeaturesModule` を追加しました。これは、save game クラスを戻すことができます (他の用途にも使用します)。 
	* SaveGame 自動化テストを Game set に追加しました。
* アンドロイドは NDK r9 と Clang 3.3 でビルドします。
* NVIDIAs デポから`PhysX-3.2_EPIC` ソースを更新します。


##アップグレード ノート

####Editor and Tools
* Removed `GenerateProjectFiles.bat` for uproject files (the `GenerateProjectFiles.bat` in the UE4 root remains and is not generated).
	* This is now done by right clicking on the .uproject file and selecting Generate Visual Studio Files.
	* Use `Engine/Build/BatchFiles/RegisterShellCommands.bat` to associate a build folder with `.uproject` files.Only one build may be associated at a time.
* Perforce dialog no longer pops up on Editor startup.Source control workflow streamlined.
	* Source control login is now accessible by clicking the colored indicator button in the top-right hand corner of the Editor.It can also be accessed 'just-in-time' in various menus throughout the Editor.

####ブループリント
* ACharacter no longer has default movement input bindings.
	* There is a bool `bAddDefaultMovementBindingsForBlueprint` that determines whether a Character Blueprint uses the old default native key bindings for input or not.Default is true, so content should set it to false if they want custom bindings.Well probably remove this after people have a chance to migrate content.
	* Input axis events are exposed to Blueprints, and movement functions are exposed as well.SideScrollerTemplate and ThirdPersonTemplate have been updated as examples.
* Template Default map : changed atmospheric fog altitude number from 32 to 2, to reduce texture data.
* Atmospheric fog - allow Blueprint-created atmospheric fog components to maintain precomputed data
* Blueprints cannot be renamed to include invalid characters as this was breaking the Blueprint execution.
* `SceneComponent::AttachTo`'s attach type changed to enum from bool
	* `KeepRelativeOffset` - Keep current relative transform
	* `KeepWorldPosition` - Keep current world transform
	* `SnapToTarget` - Reset current relative transform
* `Actor::MakeMIDForMaterial` has been deprecated.CreateMID function is added in the Material Library. 
* Instead of using CreateMID, utilize CreateMIDForElement or CreateMIDForElementFromMaterial
* Material parameter collection Blueprint functions are now in a kismet function library
	[REGION:note]
	Note: this breaks the previous material parameter collection Blueprint functions.Existing nodes will have to be replaced.
	[/REGION]
* For shader development, enable `r.ShaderDevelopmentMode` in ConsoleVariables.ini.LogShaders is no longer the method to get retry on compile error.


####ゲームプレイとフレームワーク
* Reorganization of source code to put all source for a class in its own file(s)
	* Affects `Actor`, `Controller`, `GameReplicationInfo`, `PlayerReplicationInfo`, `WorldSettings`, `Character`, `Pawn`
	* Added `ActorReplication.cpp`, `ActorEditor.cpp`, `WorldSettings.cpp`
	* Remove `Script.cpp`
* PlayerController input component is no longer created in the constructor.Bindings should be done, similar to Pawn, in the virtual function SetupInputComponent.
* `PlayerController.GetInputAnalogStickState` now returns game value (after invert and dead zones have been applied) instead of the raw hardware value.
* ConsumeInput removed from `BIND_` macros.To set `InputAction`/`InputAxis` properties from code after binding the macro can do something similar to:

		BIND_ACTION(InputComponent, "Fire", IE_Pressed, &AQAPlayerController::OnTriggerPressed);
		InputComponent->ActionBindings.Last().bConsumeInput = false;

* `MaxDrawDistanceScale` system setting has been replaced by new `r.ViewDistanceScale` console variable.
* `LocalMap` has been removed, `Map` is now the only setting used to specify the DefaultMap 
* BeginPlay refactor
	* `PreBeginPlay`/`BeginPlayComponent`/`PostBeginPlay` renamed to `PreInitializeComponents`/`InitializeComponent`/`PostInitializeComponents`
	* `ReceiveBeginPlay` event in Blueprints now fires after the player has been spawned.
	* `LevelScriptActor.BeginGame` event converted to ReceiveBeginPlay
	* Streamed in sublevels and their placed actors get ReceiveBeginPlay calls
* The signatures of many camera related functions have changed to take a `FMinimalViewInfo`, containing a full view state, instead of loose location/rotation/FOV values.
* The first batch of project, Engine and Editor settings have been refactored to use the new Settings UI framework


#### レンダリング
* StaticSwitchParameter material expressions now emit an error if either inputs are not connected.This may cause some existing materials to not compile.


####Animation and Persona
* `USkeletalMesh::Sockets` is now private. `GetActiveSocketList()` and `GetMeshOnlySocketList()` have been added to get the list of sockets.This is editor only code.
* `FKSphereElem`/`FKBoxElem`/`FKSphylElem` have been refactored to store minimal position/orientation info, rather than a full FMatrix.Code using these classes will need to be changed.


#### サウンド
* `ReverbVolumeToggleable` combined with `ReverbVolume`


####オンライン
* Refactored Online Subsystem OnlineProfileInterface to be combined with OnlineIdentityInterface
	* Deprecated existing OnlineProfileInterface functionality so that it can be deleted
* Http module no longer checks for internet connection at startup 
	* This was a blocking call for WinInet and not necessary since async request would fail anyway without a connection
* Http module has a flag to disable actually making http requests and just calls completion delegates instead
	* In `DefaultEngine.ini`:

		[Http]
			bEnableHttp=false

* Http WinInet implementation always downloads from server instead of relying on cached data via INTERNET_FLAG_RELOAD


####コア
* `TPreallocatedArray<Type, Count>` has been removed.You should instead use `TArray<Type, TFixedAllocator<Count>>`.
* Editor-visible or Blueprint-visible deprecated properties are now an error.They should be made non-visible.
* First pass of refactoring navigation-related functions out of `AActor`.Now all navigation relevant actors need to implement `INavRelevantActorInterface`
* `TAssetPtr` type has been rebuilt, and can now be used for asynchronous loading of asset data
	* A `FStringAssetReference` is a structure that contains the name of an asset, and can be used to refer to data that is not loaded.
	* A `TAssetPtr` is similar to a `TWeakObjectPointer`, but it can be used to refer to data that is not currently loaded. 
	* Any previous uses of `TAssetPtr` will not work, as it now uses `FStringAssetReference` for serialization.This means that it works properly with cooking and redirects.You can access the `FStringAssetReference` used by a `TAssetPtr` with `.GetUniqueID()`.
	* You can use `FStringAssetReferences` and `TAssetPtrs` as properties, and the editor UI will let you create references to data that is not always loaded.You can convert a
	* `FStreamableManager` now has functions for asynchronously loading `FStringAssetReferences`, with callbacks on completion.You can use this to request loading groups of assets without stalling the main thread
* Plugins may now be toggled enabled/disabled in the plugins UI.
	* If your game uses a plugin, you must add `+EnabledPlugins="YourPluginName"` to the `[Plugins]` section of `DefaultGame.ini`
* Rename tick groups to Pre/During/PostPhysics instead of AsyncWork
	* Remove `bTickBeforePhysics` flag
* `IMPLEMENT_PRIMARY_GAME_MODULE` now depends on the generated UELinkerFixup function existing, which in turn requires all modules to have `IMPLEMENT_MODULE` setup properly. 
* Converting Unreal Enums to strings using `GetEnumString()` can now be used from Core (was in Engine)


####プラットフォーム
* Changed/modified some environment variable names used by UnrealBuildTool and IPhonePackager.Search `*.cs` for: `"ue`.
* Added Dangerously Fast mode, which will just recompile the executable, it won't copy provisions, or anything like that.A Rebuild/Clean will perform one slow mode compile.


## 継続事項と改善

####エディタ ツール
* **Matinee**
	* A Slate notification now appears to tell the user that they can't add a Static Light to a Matinee track
	* The Matinee Reduce keys menu now displays correctly
	* Gave the Matinee event name text box entry widget a maximum width so it doesn't assert when pasting lots of text
	* Use a check button for the Editing Crosshair action to display on/off state in the menu
* **Play In Editor/Simulate In Editor**
	* When a PIE GameplayViewport is active, UDK remote input will be scaled and routed only to that viewport
	* Play-In-Editor (PIE) settings can now be configured in the Settings UI
	* Actors are no longer unselected when switching from eject to possess while simulating
* **Viewports**
	* Planar wireframe meshes are now visible in orthographic views
	* Visualize Ambient Occlusion is now available via the Visualize Buffer menu rather than via a showflag.
	* **Attach To** option in level viewport content menus now automatically gives text focus to the search field
	* Added an Editor user setting for the visualizing LevelStreamingVolume actions:**Level Streaming Volume Previs**
* **World Browser** 
	* Added snapping by level bounds for non-landscape levels (Hold **Ctrl** to disable it) 	
	* Moved **File > Open World...** command from the Editor main menu to the World Browser main menu 
	* Added custom 'Open world location' dialog instead of OS standard 'Browse for folder' dialog 
* **Scene Outliner**
	* You can undo an Actor rename in the Scene Outliner
	* Changed the Scene Outliner to only scroll the selection into view when it wasn't visible in the outliner
	* SceneOutliner now updates when levels are streamed in/out during SIE/PIE
* **Landscape**
	* Added Undo for Copy and Gizmo operations
	* Disable Gizmo Remove Layer button when there is no layer
	* Added ability to create levels with landscape proxies directly from the world browser.User needs to have at least one loaded level with landscape beforehand
* **Foliage**
	* Hook up to notifications for map rebuilds and migrate foliage instances across BSP components in response to avoid broken/obsolete components crashing PIE
	* Do not delete untargeted foliage instances if rebuilding geometry removes the original target BSP
* **Message Log**
	* Message log API has been streamlined.Message log output is now usable from all modules, not just Editor modules as before
	* Multiple duplicate message logs now don't appear on Editor startup
	* Message logs now don't pop up incorrectly when changing levels, running map check of building lighting
* **Autosave**
	* Now disabled when running without any project loaded.This is to prevent autosave while in the new project screen before loading any projects
	* Suspend opening an autosave notification when interacting with sliders/spinbox/menus not just menus
* **General UI Improvements**
	* Moved the Recent Levels into a submenu
	* Changed the Recent Projects to use regular menu items
	* Icons and mobility indicator no longer turn black when highlighted
	* ScrollBox RMB scrolling now behaves the same as ListView
	* The user can now press the escape key to close the new level dialog box
	* The user can now press the escape key to close the save all dialog box
	* On launch the Editor now has full focus so keyboard shortcuts now work correctly without having to click inside the Editor window
	* The search box field is now in focus by default in the Settings Editor categories
	* Renamed Packages to Files in the Build and Submit window
	* Added a MaxWidth to STextEntryPopup arguments - still unbounded by default
	* When a user's desktop is configured with a right-hand primary monitor, submenus on the left-hand monitor now don't fly in from the far right
	* Cooked content warning dialog explains why its failed to run in more detail
	* Make the Static Meshes and BSP Surfaces items within the **Build > Lighting Info > LightMap Resolution Adjustment** menu use the right check box images so they display correctly
	* Removed the black border on the Collision Profile Reset to Default button in the Blueprint property tab so it looks like the others
	* Created 16x icon for import asset context menu
	* Initial WIP pass of multiple requested class icons for new assets
	* New icon created to replace placeholder 16x icon
	* Created new 40px icons for all menu items currently with a 16x icon
	* Created new icons for the 5 main editor tool icons, along with color change icons for the selected states.Icons require code hook-up
	* New view menu icon for developer tools/modules menu item @ 16x
	* Created new icons for all window menu items @ 16px, also to be used for menu tabs
	* Created placeholder icons for missing NavMeshModifier at 16x & 64x
	* Created 40px icon for generic command & 512px source icon
	* Created new icons at 16px & 64px for multiple volume types (used in content/placement browsers)
	* Created new icons for the various 128px plugin icons & 20px folder icons for use on the plugins pane
	* Created new 16px icons recent levels & recent projects
	* Added icons for a number of editor windows' tabs and their entries in the menu
	* Added icons for volume types in placement browser
	* Added additional icon support in plugins editor
* Continued to implement centralized project and Editor settings UI
* Added details view customization for FGuid properties
* Rebuild model now falls back to using the worlds Current Level when the models Level isn't available (occurs under certain conditions)
* Copy component properties now takes into account index mismatch
* Template maps now show the correct names
* Swarm now runs minimized by default when running level builds
* OutputLog now only snaps to the bottom, when new entries are added, if the user hasn't scrolled away
* DefaultPath is now treated as a full path in the Windows file dialog, which avoids confusion with other branches
* Improve **Alt + drag** Actor duplication performance by registering exporters & improving performance of serializing large UObjects like levels
* Properly tag Brush and Volume classes so that they can be freely converted
* Discard previous actor selection when selecting brush groups, such as Select All Additive Brushes
* Improving usability of destructible mesh editor
* Any files discovered by the asset registry which cannot be converted to a long package name with only valid package characters will now be skipped
* Added a template HitProxyCast for hit proxies.
* Local documentation URLs that have anchors now open in browser correctly


####ブループリント
* In the Blueprint Editor, variables, functions, graphs, macros, and delegates are now renamed inline in the **My Blueprint** window
* Pop-ups and notifications that should not affect focus should no longer.
* Missing actions from the Palette window in the Blueprint Editor should now appear.
* When creating a Blueprint from actor, the resulting Blueprint will not have all the components rotated strangely.
* Many minor improvements to Blueprint thumbnails in the content browser.
* Changes made to native component properties in the Details tab within Components mode of the Blueprint editor will now correctly propagate out to any Actor instances based on the Blueprint.
* Script exceptions (e.g. breakpoints) are no longer triggered for actors/objects in the Blueprint preview scene.Additionally, the Blueprint preview scene is no longer ticked while a PIE/SIE session is active, so it does not pollute the message log during script debugging.
* Variable nodes in a Blueprint graph will now display a warning after compilation if the property no longer exists or was deprecated.
* Removing the Default output pin on a **Switch on Int** node in a Blueprint graph will no longer cause the Blueprint to fail to compile after re-opening the editor.
* Blueprint Diff graph list now scrollable and other misc improvements.
* Blueprint editor no longer crashes when copy/paste/undo/pasting custom event nodes


####ゲームプレイとフレームワーク
* Hierarchical pathfinding
* Custom navmesh connections (offmesh links): segment to segment
* WorldSettings will be migrated to a new class if the `.ini` file dictates a different class than that which was saved in the map.
* Blueprint PrintString messages flagged bPrintToLog now display in console as well as log.
* Input Key nodes can now have the bound key switched from the property details panel.
* Added DLL export to various skeletal control functions.
* Removed dead UJsonObject class. 
* Got rid of deprecated USkeletalControl parallel hierarchy. 
* Renamed box query parameter from Extents to HalfExtents, indicating that it is the box radius instead of bounds. 
* Added support for arbitrary nesting of Interp properties (e.g., Component.Struct.Prop), and redirection of Matinee track names (in the INI map MatineeTrackRedirects).
* Removed a truncation from camera shake strength (legacy of integer FRotator). 


#### レンダリング
* When not running with the editor, all scene render targets will be reallocated on resizing the window.This allows memory to be recovered when changing to a lower resolution
* ParticleParameter distributions are now not selectable on GPU emitters for various properties.Previously they would have been selectable but would not have worked.
* Random and Random_Blend interpolation methods are now not selectable for GPU emitters.Previously they would have been selectable but would not have worked.
* Particle emitter's editor LOD value is set to 0 on load.
* **Texture Streaming** - Simpler logic to decide how textures should be streamed (or not), fixes for dynamic textures (including Blueprints)
* StaticSwitchParameter material expressions now emit an error if either inputs are not connected.
* Tessellated materials draw to the velocity buffer.
* Corrected the output mask value for **SceneTexture** material expression.
* A warning message is now displayed in the Material Editor when the user attempts to use _BLEND_MODULATE_ with separate translucency
* Ensure that the static mesh editor rebuilds the physics geometry after any change to the mesh so it doesn't disappear from view
* Static mesh sections with no triangles no longer use up a material slot.Existing content will be fixed on load
* Added stripping of HQ lightmaps and distance field shadows from iOS
* Wider ES2 bloom
* Defer broadcasting material instance property changes while still interacting with them in the material editor, so that editing is much smoother
* Compilation of the shaders for a material are now completed before generating a thumbnail to save to disk


####Animation and Persona
* **PHAT EDITOR**
	* Removed collision settings from PhAT:BodySetup, but added collision response Enabled/Disabled
	* All other settings are derived from OwnerComponent
	* Enabled default pawn collision against destructible
	* Modified PhAT tooltip to be less confusing to the user.
* Skeletal mesh vertices are rearranged during import to be more cache friendly.
* Undo/Redo fixed for adding/deleting sockets from a skeleton.
* Added the axis indicator to the Persona viewport.


#### サウンド
* Entire SoundClass hierarchy, including parents, will be displayed when opening the Sound Class editor via a child SoundClass.


####オンライン
* Ongoing efforts to improve the stability and robustness of the online platforms
	* Misc
		* Support for bool FVariantData for key value pairs
      		* Added CreateUniquePlayerId function to Identity interface
      		* UpdateSession API now defaults to updating backend
      		* Made session settings bool instead of bitfield
	* Cloud
		* Additional updates to cloud headers 
      		* Delete local cache files not in the enumerated list 
      		* Update enumerated list after write/delete user file


####コア
* Rewrote external CPU profiler support (AQTime, VTune, VSPerf)
	* Use command-line options to select a specific profiler: `-AQtime`, `-VSPerf` and `-VTune` 
	* The first valid profiler is used by default (usually VSPerf.)Profilers are available only if their DLL is found in a search path. 
* If you have any large functions with a lot of Slate code in them, they can now be wrapped in a BEGIN_/END_SLATE_FUNCTION_BUILD_OPTIMIZATION macro pair to improve Developer build times for the modules containing these functions.
* Added option to SWizard to supply a delegate for when back is clicked on the first page.
* Adjusted Base ini files to help avoid saving additional data to saved ini files. 
* Simplified TemplateMapInfo struct since the config system can directly load a UObject reference.
* Moved some comments around in asset type classes so that they will appear in tooltip metadata.This is where the **New Asset** menu draws its descriptions for classes.
* Build machines no longer load from or save to the EditorGameAgnostic ini.Also, build machines no longer attempt to auto-load project files.
* Updated class validity logic in the c++ class wizard to allow for the extending of classes in the game module.
* Path pickers no longer show a Classes folder.Also, selection is always single, thus deselecting a path is not allowed.
* An option to open visual studio was added to the File menu in the mainframe.
* Hardware survey no longer done in debug builds 
* Started synthetic benchmark (console command `SynthBenchmark`, part of Hardware survey) to base video settings on it
* Added detail mode SceneComponent so lights can be culled by r.DetailMode as well
* Optimized decal state changes 
* JsonReader now ignores trailing and preceding whitespace
* Added functionality that will adjust some of the internationalization gather log output to prevent automated builds from failing when localization strings containing "Error" are encountered
* Forcing internationalization manifest and archive files to be written out using unicode encoding
* Added config files for generating Engine and Editor localization files
* Added streaming install ChunkID info to `FAssetData`, `FPackageFileSummary`, and `FBackgroundAssetData`.
	* In future builds this will be used by the packager for creating streaming install `.pak` files and for determining the install state of individual assets.


####プラットフォーム
* Porting the engine and the editor to Mac
* Removed GScreenWidth/Height, and set the default resolution for non-desktop platforms to 0x0, to make it query the device for current resolution

