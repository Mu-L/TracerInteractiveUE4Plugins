INTSourceChangelist:6537038
Title: 2013年12月版本说明
Crumbs:%ROOT%, Support/Builds
Description:
Availability:Licensee
Parent:Support/Builds
Order:-3
Order: 47

[TOC(start:2 end:2)]

## 版本信息


[REGION:simpletable]
| 项目| 信息|
| ----| ----|
| **标签**| [INCLUDE:#labels] |
| **根据变更列表编号构建**| 1945305 (//depot/UE4-QA/Promotable-CL-1945305)|
| **根据变更列表编号分支**| 1923033 (//depot/UE4/Promoted-CL-1923033)|
| **Visual Studio 版本**| Microsoft Visual Studio 2012 版本 11.0.60610.01 更新 3|
| **DirectX**| 2010 年 6 月|
[/REGION]

[COMMENT:none]

[EXCERPT:Labels]
QA_APPROVED_UE4_BUILD_2013_12
QA_APPROVED_UE4_BUILD_CURRENT
QA_APPROVED_UE4_BUILD_MINIMUM
[/EXCERPT:Labels]

[/COMMENT]

## 重要信息

 * 当前引擎开发路线图：[虚幻引擎4 路线图](https://udn.unrealengine.com/questions/topics/roadmap.html)
 * 已修复的错误：[2013 年 12 月虚幻引擎4 中已修复的错误](UE4_Fixed_2013_December.xlsx)
 * 已知问题：[2013 年 12 月虚幻引擎4 中的已知问题](UE4_Bugs_2013_December.xlsx)
 

## 主要新功能

####编辑器和工具
* **默认启用新材质编辑器**
	* 新材质编辑器现在默认启用！

		![](NewMaterialEditor2.png)

	* 不管出于什么原因，如果您仍希望使用旧版本，则需要在命令行中添加“-oldme”。

* **缩放对齐：维持非等分缩放**
	* 一个新功能，缩放对齐：维持已添加到视口中缩放的非等分缩放。
	* 您可以在缩放对齐菜单中找到此新选项，从视口的嵌入式工具栏中访问：

		![](ScaleSnapping.png)

	* 激活时，以非等分缩放（即 X、Y 或 Z 组件的缩放系数不同）交互式缩放对象时，缩放对齐的行为略有不同。
	* 通常，当执行缩放对齐时，每个组件会分别对齐到相应的网格增量。如果执行缩放，这会导致对象发生细微形变。在将最大的组件对齐到缩放对齐网格时，如果启用此选项，则可以让各组件保持适当比例，从而防止发生形变。

* **在编辑器中运行：多个场景**
	* 此功能用于更改“在编辑器中运行”联网工作方式：现在，编辑器不会启动新的虚幻引擎4实例来连接到“在编辑器中运行”游戏，而是在已加载的虚幻引擎4实例中生成多个场景。
		* **Shift-Tab 和 Ctrl-Tab**可用于切换获得焦点的“在编辑器中运行”窗口。

	* **调试**	
		* 现在，在多个场景下运行时，蓝图编辑器中增加了一个可选择调试场景的下拉框：

			![](PIENetworking02.png)	

		* 正在运行的对象的最终屏幕截图：		

			![](PIENetworking04.png)

* **内容浏览器文件夹**
	* 现在在内容浏览器的“资源（Asset）”视图中添加了显示文件夹的功能。

		![](ContentBrowserFolders01.png)

	* 请注意，启用文件夹显示意味着启用“只显示选中文件夹中的资源”（Show Only Assets In Selected Folders），所以如果在树视图中选中根节点，则不会显示所有内容。
	* 文件夹按如下方式显示。在内容浏览器的所有视图模式下显示：

		![](ContentBrowserFolders02.png)

	* 文件夹的行为与 Windows 资源管理器非常相似：拖放、重命名 (F2) 和删除操作均适用。
	* 您还可以在“资源视图（Asset View）”中创建新文件夹。
	* 添加了一个新的“向上”（Up）按钮（位于路径“浏览记录”左侧）。单击此按钮可打开一个目录，也可以使用 Alt+Up。	

		![](ContentBrowserFolders03.png)

	* 搜索资源时，不会显示文件夹，且以递归方式显示资源，所以工作流程与以往相同。

	* **文件夹颜色**
		* 您现在可以为内容浏览器文件夹设置颜色编码！	

			![](FolderColors03.png)

* **包自动保存恢复**
	* 您现在可以从之前自动保存的编辑会话恢复包。
	* 如果编辑器检测到关闭时未完成保存，则会在启动时打开一个对话框，让您选择要恢复到哪一个包。

		![](PackageAutoSaveRestoration.png)

	* 此功能仅限于恢复可写入磁盘的包，也就是说，对于未保存到磁盘的任何包（如新创建的未保存场景），将无法通过此方法自动恢复（不过确实会在磁盘上产生自动保存的文件，可手动恢复）。
	* 如果您尝试恢复由于源码控制而设置为只读的包，恢复过程首先会尝试检查包文件，然后尝试恢复。
	* 在调试器中运行编辑器时，或者在自动模式下运行编辑器时，会完全禁用此功能。

* **交互式 Actor 拾取器**
	* 现在可使用交互式拾取器编辑获取 Actor 派生对象的属性。	

		![](InteractiveActorPicker01.png)
			
	* 将鼠标悬停在“可拾取”Actor 上时，光标会变成滴管：	

		![](InteractiveActorPicker02.png)

* **自定义 UV**
	* 添加了一个新材质编辑器功能，可让您在顶点着色器中自定义材质的 UV 通道。
	* 这是一个非常强大的优化工具，因为可将任意计算从开销巨大的像素着色器移到顶点着色器中。
	* 左侧是通过 CustomizedUV 在具有 8x8 顶点网格的网格体上计算出来的“中心距离”，右侧是在像素着色器中执行相同数学结算的结果。

		![](CustomizedUVs.png)


####蓝图
* **蓝图交流**
	* 蓝图现在可访问其他蓝图的函数和变量！
	* 现在，默认情况下，函数的任何公开变量均可供其他蓝图访问，无需接口。
	* 不再区分代码定义的变量和蓝图定义的变量：现在可以直接使用所有这些变量。
	* 下面的蓝图有一个称为 OpenTheDoor 的自定义事件：

		![](BlueprintComms02.png)

	* OpenTheDoor 事件现在使用正则函数调用节点：

		![](BlueprintComms03.png)

	* **从接口迁移**
		* 蓝图接口过去常用于解决蓝图以往无法调用函数或访问其他蓝图的变量的情况。现在既然不需要使用这种方法了，您可能想要从使用接口的方法迁移出来，直接使用蓝图交流。我们添加了一个新功能，可让您从蓝图移除接口，但保留相关函数。
		* 您可以使用“在蓝图中寻找”（在蓝图编辑器中使用 Ctrl + F）找到消息函数的所有使用实例，这样可以简化迁移过程。


####动画
* **动画重定向**
	* 为动画重定向添加了最新支持！
	* 什么是动画重定向？
		* 动画重定向是一种使用为特定角色制作的动画，并为不同比例的角色播放的功能。此功能很重要：角色必须共享公共骨架才能让此功能发挥作用（骨骼名称和层次结构相同）；只有绑定姿势可以不同。
	* 对于骨骼平移重定向，我们提供了 3 种不同的设置，可在角色编辑器的骨架树（Skeleton Tree）窗口中设置：
		* **骨架**：骨骼平移来自目标骨架的绑定姿势。
		* **动画**：骨骼平移来自于没有变动的动画数据。
		* **动画缩放**：骨骼平移来自动画数据，但可按骨架的比例缩放。这是目标骨架（要播放动画的骨架）与源骨架（要创作动画的骨架）的骨骼长度之比。				

			![](AnimationRetargeting01.png)		

		* 在视口的“显示”（Show）菜单中，您可以选中“未重定向动画”（NonRetargeted Animation）和“骨骼”（Bones），从而对比原动画和重定向动画。		
			
			![](AnimationRetargeting02.png)		

		* 该可视化用于单一资源，但也可以用于动画蓝图。	

			![](AnimationRetargeting03.png)



## 新增内容

#### 编辑器和工具
* 添加了一种使用 DragDropEvent.GetOperationAs<FMyDragDrop>(); 来检查 DragDrop 操作类型的简单方式。
* 添加了 OnVisualizeTooltip() 事件，可用于确定作用域以及自定义工具提示处理。
* 在选项中添加了编辑器用户设置，以便在关卡编辑器中为项目名称水印添加前缀，从而在频繁切换分支时消除歧义。
* 为材质缩略图添加了自定义网格体预览。在材质编辑器的详细信息面板中选择预览网格体，然后在内容浏览器中进入缩略图编辑模式，并将材质的预览图元更改为茶壶。
* 火箭用户现在可以从编辑器快速发送反馈。
* 添加了在对齐时保留非等分缩放的选项。
* 烘焙路径现在位于具体游戏的编辑器首选项中。
* 在内容浏览器中添加了文件夹。
* 在 Slate 窗口中添加了细窗口边框。
* 在场景中为 Actor 选取添加了交互式 Actor“滴管”拾取器。
* 单击节点中的“图标”按钮（已显示），现在可让其独立显示在图表视图中。
* 现在，执行复制/剪切时会考虑选中的键，且现在允许将单个键粘贴到现有轨迹中。
* 可设置文件夹颜色的新内容浏览器选项。
* 内容浏览器的列表视图和列视图现在也会显示颜色。
* 在发生崩溃后重新启动编辑器时，您现在可以从自动保存恢复。
* 现已推出材质编辑器的 Slate Graph（@@@）版本。
	* 默认启用，将“-oldme”添加到命令行中可访问旧版编辑器。
	* 临时交换表达式和注释的位置。
	* 静态布尔表达式不再显示预览窗口。
	* 现在可以移动材质输入节点。
	* 现在可以按住 ctrl 并拖动来移动材质连接。
	* 现在按回车键可循环浏览搜索结果。
	* 为材质表达式添加了备选搜索结果，现在可输入“lerp”来搜索线性插值，“1-x”表示用 1 减，“sqrt”表示平方根。
	* 允许从节点的标题栏对参数名称执行蓝图样式编辑。
* 现在可以在蓝图样式编辑器中按住 Shift 并单击图钉来建立连接，不需要拖动线条。
* 现在可以在命令行中添加“-SCCProvider=ProviderPluginName”来覆盖使用的 SCC 提供方插件。
* 在编辑器设置（EditorSettings）-> 常规（General）-> 首选项（Preferences）-> 对齐（Snap）中添加了高级网格对齐设置。
* **UnrealDocTool**
	* 添加了 NoPublish 可用性选项，以便保留不发布的页面。
	* 添加了 `[RELATIVE:path]` 标记，用于渲染到指定 UDN 文档路径的正确相对目录路径。


#### 蓝图
* **蓝图交流**
	* 蓝图现在可以调用函数并访问其他蓝图的公开成员。您可以创建其他蓝图生成的类的变量，并像操作其他任何类一样访问其成员。利用此功能，两个蓝图之间不再需要使用蓝图接口进行交流。为了帮助您删除不必要的蓝图接口，从蓝图的“蓝图属性”（Blueprint Properties）选项卡中删除接口时，您现在可以选择保留与该接口相关联的所有函数和事件。如果要保留，只需从蓝图实现删除接口，选择保留与其相关联的函数和事件的相应选项，然后将该接口的消息节点的使用方法改成直接用函数调用节点。更新所有实例后，您可以删除蓝图接口。为了便于发现消息节点的使用实例，请使用“在蓝图中寻找”功能。
* 为“在蓝图中寻找”添加了快捷键 Ctrl+Shift+F
* 添加了在蓝图组件模式下通过插槽/骨骼将组件附加到原生组件的支持。
* 列举可转换成名称或字符串。
* 添加了“获取 <Enum> 中的条目数量”节点。
* 为 APawn 添加了 BlueprintCallable PawnMakeNoise 函数，以便为行为树蓝图节点制造噪点。
* 为 SceneComponent 添加了蓝图可调用函数：Get Num Children Components()、Get Child Component(索引)、Get Children Components (带“包括所有后代”复选框) 和 Get Parent Components。
* 在蓝图选项卡中添加了类别。
* 为 BlueprintNativeEvents 添加了支持。这与 BlueprintImplementableEvents 相似，只不过它们在调用链中可以有原生实现。请注意，BPNE 在接口中使用时功能会受到限制。后续版本中会解决此问题。


#### Gameplay 和框架
* HUD HitBox 现在有可以绑定的开始/结束鼠标悬停事件。
* 现在可以在事件节点的属性中指定蓝图中的输入事件，不管它是否应覆盖父类中该事件的任何绑定。
* 蓝图变量、函数和宏现在会存储内部 GUID，当包含引用的类未加载时，如果被引用的成员已重命名，则可使用 GUID 来查找该成员。要让基于 GUID 的系统生效，必须重新保存现有内容资源。
* 在编辑器中运行多玩家：一个进程下运行多个场景。
* 在虚幻引擎4 的一个实例中可实现多玩家运行模式（而无需启动单独的实例进行连接）。
* 在“运行于”（Play In）设置的多玩家选项（Multiplayer Options）中，选中“单进程”（Single Process）即可启用。
* 为 Visual Studio 2013 (VC12) 添加了初期支持。
	* 将 WindowsPlatform.Compiler 设置到了 WindowsCompiler.VisualStudio2013，以便使用（试验性功能！）
	* 将“-2013”传递到 GenerateProjectFiles.bat，以获得 VS2013 原生项目（可选）。
	* 为 Visual Studio 2013 编译时将使用 Windows SDK 8.1。
	* 更新了第三方构建脚本中 VS2013 库的路径。
	* Windows XP 仍可作为编译目标，但只是试验性功能 (WindowsPlatform.SupportWindowsXP=true)。
	* 重要：虚幻引擎4 当前仅支持 Visual Studio 2012。您需要先安装该版本才能进行编译。支持 2013 只是初步尝试，仅供早期测试之用。
	* 重要：尚未对 VS2013 编译第三方库，所以无法链接。
* 添加了一个 JsonUtilities 模块，其中包含对 Json 对象和 UStructs 进行相互转换的工具。
* 添加了在 BodySetup 上和逐实例基础覆盖视为“可行走”的地面法线的能力。允许的设置包括：
	* 默认（行为不变）。
	* 提高可行走性（允许比一般情况更陡峭的法线）。
	* 降低可行走性（不允许比一般情况更平缓的法线）。
	*注意：AI 寻路网格体当前会忽略这些设置。
* 自定义 AI 导航链接，可影响路径跟随（门、扶梯等）：USmartNavLinkComponent。
* 在 ANavLinkProxy 中为自定义 AI 导航链接添加了蓝图支持。
* 在 ANavigationTestingActor 中添加了详细路径发现调试功能。
* 添加了一种通用机制，以便锁定表示源锁定的 AI 资源（如运动和大脑）。请查看 IAIResourceInterface 以获取详细信息。
* 动画重定向改进：骨架支持重定向多个基础姿势。
	* 基础姿势参考骨架的不同姿势，即网格体的不同大小。
	* 在系统中使用重定向时，某些动画需要有正确的基础姿势（基于用于为其创作动画的网格体）才能正确重定向。


#### 渲染
* 添加了 HZB 遮蔽剔除。新系统比之前基于 HW 遮蔽查询的系统能更好地处理高对象计数的缩放。当前默认禁用。将 r.HZBOcclusion 设置为 1 即可启用。
* 为提高可延展性，为蓝图添加了函数 GetRenderingDetailMode()。
* 添加了合成/后期处理图表（使用 yWorks）的调试导出，通过 r.CompositionGraphDebug 将文件导出至屏幕截图文件夹。
* **自适应采样 Lightmass GI 解算器**
	* 减少了不良光照情形下的噪点数，同时减少了漏光。
	* 添加了新的 IndirectLightingQuality 场景设置，可用于提高能显示 GI 解算器瑕疵的贴图中解算器的质量。
* **自定义 UV**
	* 新的材质属性 NumCustomizedUVs 公开在顶点着色器中执行的材质输入。
	* 自定义 UV 输入可通过将数学计算移到顶点着色器来优化材质。
* 各可延展性组合的 CVars 现在存储在 INI 文件中 (BaseScalability.ini)。
* 添加了 BL_BeforeTranslucency 作为材质后期处理插入点，以便在应用 DOF 和独立半透明度之前绘制材质。
* 现在可以以场景单位定义 TextComponents 的大小（近似），作为 x 和 y 缩放值的更可靠备选。
* 材质表达式中现在会公开当前 EyeAdaptation 值，以便对材质进行后期处理。Utility->EyeAdaptation。仅 SM5 中支持。
* 现在可在材质实例中覆盖 OpacityClipMaskValue、BlendMode、TwoSided 和 LightingModel 属性。
* 材质表达式中现在会公开 MaterialQualityLevel。
* 渲染细节模式现在可以按离子发射器指定。
* 轴锁定模块现在支持 GPU 粒子发生器。
* 现在可以使用函数“SetEmitterEnable”从蓝图启用和禁用粒子子发射器。
* 添加了 r.UpsampleQuality consolevariable。
	* 从小屏幕放大时范围包括 4 个质量值。
* **自动 Lightmass 重要体积**
	* 如果没有 LightmassImportanceVolumes，将使用绑定场景的合成体积。
	* 目的是为了让用户不必为每个简单场景都放置一个 ALightmassImportanceVolume。
	* “自动体积”范围将限定为 100 米 (MinimumImportanceVolumeExtentWithoutWarning)。
	* 如果没有重要体积，我们仍然会在日志中记录一条警告消息，但如果场景超出此阈值，只会显示 UI 警告。
	* 将 MinimumImportanceVolumeExtentWithoutWarning 的范围值从 50 米提高到了 100 米。


#### 动画
* 为插槽添加了复制粘贴到角色管理器的功能，可使用 Ctrl-C/Ctrl-V 或通过骨架树中的上下文菜单项目进行复制粘贴。一次可将多个插槽复制粘贴到任何骨骼中。
* 在角色管理器的视口菜单中添加了地面高度偏移框，可用于上下移动地面。此设置按网格体保存。


#### 核心
* 添加了从 TAssetPtr -> UObject 加载时自动转换的功能。
* TMap 和 TArray 现在有有限的定位支持，所以不需要复制就可以直接将元素构建到容器中。
	* 使用 Map.Emplace 和 Array.Emplace 代替 .Add，当使用单一参数构造函数处理类时，可避免调用复制构造函数。
* 使用 operator[] 可检索 TMap 值。
	* ValueType& Val = Map[Key];
	* 与 std::map 不同，这可以用于常量容器，如果键不存在，也不会插入新元素。取而代之，它会断言。
* FName 和 FString 现在支持字符串查看对话框，更便于多行字符串的可视化。
* TArray 有基于仿函数的新函数，可与 Lambda 一起使用。
	* IndexOfByPredicate：按断定查找元素的索引。
	* ContainsByPredicate：测试是否有任何元素与断定匹配。
* 调试器查看器通过 GenerateProjectFiles.bat 自动安装。
* 添加了 UDELEGATE，以允许将 UFUNCTION 说明符传递给委托的 UFunction。
	* 仍支持没有 UDELEGATE 的旧形式。
	* 例如：
	* UDELEGATE(<specifiers>)
	* DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam( FDelegate, float, Var );
* DOREPARRAY 不能再与 TArrays 一起使用。
	* 改成使用 DOREPTARRAY。
* 已重命名 FVector::Dot2D。
	* 此函数的名称没有准确体现它的行为。
	* 改成使用 FVector::CosineAngle2D。
* 索引到空 TArray 现在始终会产生错误。
	* 由于 &Array[0] 的解决方法，不会报告某些错误。
	* 此类使用方法应使用 Array.GetTypedArray() 替换。


#### 平台
* 添加了 BuildThirdPartyLibs UAT 脚本，更便于对库进行批处理重新编译（未对所有库启用，查看脚本了解如何设置批处理文件）。
* 将白名单和黑名单添加到了 .uplugin 文件中（参阅 WindowsMoviePlayer.uplugin 中的示例）。
* **Android**
	* 主分支中提供了早期 Android 支持，且支持 DXT 和 PVRTC 设备。
* 为虚幻项目文件添加了 Mac OS X 服务集成，当选中 .uproject 文件时，现在可以从服务菜单或查找器的上下文菜单启动游戏或生成 Xcode 项目文件。
* 为虚幻引擎4 的公共容器和字符串类型实现了 LLDB 数据格式化程序 - 将“command script import UE4/Engine/Extras/LLDBDataFormatters/UE4DataFormatters.py”添加到 ~/.lldbinit。

#### 连接网络
* **网络 Actor 列表**
	* 现在有一个单独的网络 Actor 列表来跟踪与联网相关的 Actor，从而提高性能。
* **复制优化**
	* 为了提高性能和安全性，全面重写了低级属性复制逻辑。
* **工作通过连接共享**
	* 复制逻辑可通过连接共享工作。
* **生命周期属性**
	* 一种注册属性的新方法，可提高性能。
* **生命周期属性条件**
	* 将次要条件应用到生命周期复制属性的功能。
* **属性校验和**
	* 切换属性校验和来诊断不同步的客户端/服务器的能力。


#### 在线
* OnlineSubsystemNULL 是在另一个子系统不可用或有意将其关闭时的退却方案。
	* 游戏代码仍可在没有实际在线通信的情况下调用在线函数和获得回调。
* 在线子系统中添加了新的 OnlineMessage 接口。
	* 允许在用户收件箱中列举消息。
	* 可按 ID 下载消息。
	* 可从一名用户将消息发送到另一名用户。
	* 可删除单条消息。
	* 将消息负载作为字符串键值对编码成变量数据类型，从而允许灵活负载。
	* 当前仅针对 Mcp OSS 进行了实现。
* 在线子系统中重构了 OnlineUser 接口。
	* 添加了 Mcp OSS 实现。
* 在线子系统中重构了 OnlineFriends 接口。
	* 更新了现有 OSS 实现：Steam PC、PS4、Facebook iOS/PC、Gamecenter iOS、Amazon PC。
	* Steam 实现现在可缓存好友列表，以便每次读取。
	* 添加了新 Mcp OSS 实现。
		* 可使用指定好友列表运行。
	* 添加了执行命令“SENDINVITES”，使用用户 ID 列表将邀请发送给默认好友列表。
* 重构了 OnlineSubsystem，从而删除了引擎模块依赖性。
	* 所有引擎依赖性现在都位于 OnlineSubsystemUtils 模块中。
* 在源文件外重构了 Mcp 配置。


## Upgrade Notes （以下内容仅供参考，不作翻译）

#### Editor and Tools
* The World Settings now have their own tab (separate from Details tab).
* **Slate** 
	* Sounds in Slate now use FSlateSound rather than FName; the use of FName to store sound names in Slate is deprecated.
	* You can temporarily fix code using FSlateSound::FromName_DEPRECATED.
	* The correct fix is to use a Slate Widget Style to hold any sounds you want Slate to play.
	* SHyperlink is no longer templated. Simply use delegate payloads for passing user data.
* Slate TAttributes now do a better job of enforcing const-ness. It is never OK to have a side-effect inside a Slate TAttribute. 
* SPropertyEditorNumeric, SSpinBox, SNumericEntryBox are generic now and can be parameterized by any numeric type.
* Changed the icons and colors of the Viewport Transform toolbar.
* Added a Content Browser content menu action to create a Slate Brush Asset from a Texture2D.
* Added WYSIWYG SlateBrush preview to properties editor.
* Content browser filters can now be removed by MMB-clicking on them.
* **UnrealDocTool** 
	* Automatically generated header IDs and bookmark names are now lower case and with '(' and ')' replaced by '_'.
* **Plugins**
	* The list of project plug-ins was moved from Game.ini to Engine.ini


#### Blueprints
* Blueprint macros now check for duplicate variable names.
* Encompassed blueprint nodes now attach to a comment box without having to first deselect the comment.
* Macros can now be dragged from My Blueprint into a Graph.
* Added a call to reset the MyBlueprint search filter before adding any new element, so the new element is visible once created.
* The Vector2D blueprint graph actions were moved into the Vector2D category splitting it out from the standard vector class.
* The Alpha section of the color picker has been enabled on blueprint graph color pins.
* The ability to create a comment around selection has been added to the node context menu in the editors.
* The Details view for the socket component was updated so the category is placed correctly and is always visible in the blueprint editor.
* The ability to locate variable uses for any variable based node was added to the context menu in the blueprint editor.
* The graphs general node culling was changed to be more accurate and take account of node widths/heights.
* The class picker dialog has been made to expand to be larger and the default class selection area is now collapsable.
* Blueprint functions and events now use more descriptive/better formatted names.
* Blueprint node renaming now no longer centers the selected node if its title is already visible.


#### Gameplay and Framework
* Split out some behavior of USpringArmComponent into multiple virtuals to make it easier to override in subclasses.
* New class flag added to allow config writes to NOT compare against the file hierarchy when flushed.
* Removed BlueprintProtected from HUD draw calls, in exchange for a warning when they are used outside of DrawHUD.
* Added BlueprintType and BlueprintReadWrite to a number of properties on FPostProcessSettings.
* UPlayerInput::ExecBindings have been renamed DebugExecBindings and will be compiled out of shipping builds.
* UWorldFromContextGetter::GetWorldFromContextObject now takes a bool reference variable to distinguish between situations where the class of the Object passed in is unsupported and where the supported Object simply is returning a NULL UWorld pointer.
* AActor::CustomTimeDilation is now properly applied to the DeltaTime passed to all Components.  Any Component which was manually applying the CustomTimeDilation will now have it applied twice. 
* **Changes to UEngine functions**
	* Use AActor::GetNetMode() or UWorld::GetNetMode() instead of GEngine->GetNetMode()
	* Use AActor::GetNetDriver() or UWorld::GetNetDriver() instead of GEngine->GetNetDriver()
* **Many other GEngine functions now take a required UWorld**
	* GEngine->GetLocalPlayerIterator( GetWorld() );
	* GEngine->GetGamePlayers( GetWorld() );
	* GEngine->GetGamePlayers( GetWorld() );
	* GEngine->GetGamePlayer( GetWorld(), PlayerIndex );
	* GEngine->GetFirstGamePlayer( GetWorld() ) const;
* Pathfollowing's default behavior improvements. Most importantly default "acceptance radius" is now Agent's radius instead of previously used 0. 0 is still a valid value.


#### Rendering
* Lighting needs to be rebuilt for all maps.
* Lowered LOD scalability restrictions to be more useful. (some defaults might need an update).


#### Animation
* Added another phase ValidateAnimNodePostCompile to anim graph nodes, which is called at the very end of compilation, in case nodes (only ones that contributed to the final class) want to validate something against the final CDO.
* Prevented transition pose evaluator nodes from showing up as a placeable option in the menu and allowed them to be deleted if they were inadvertently placed in the wrong graph (they're autocreated where necessary).
* Added support for object references on togglable anim pins.


#### Core
* Log output has changed to using UTC tags.
	* Any tools which parses log output needs to be aware of this change.
	* The old format is still supported by passing -logtimesincestart at the command line.
* Changes to replicated parameters.
	* Non-const reference TArrays should be passed by const reference to indicate that the results are not replicated back.
	* FStrings should be passed by const-reference, not value.
* 'placeable' specifier on UCLASS declarations has been removed.
	* Classes are now placeable by default.
	* A class can have the 'notplaceable' specifier added it to stop it and its descendants being placeable.
	* A class marked as 'abstract' is also non-placeable, but this doesn't affect the placeability of its descendants.
* Explicit registration of archive custom versions is now needed.
	* If a particular class wishes to use Ar.CustomVer(Guid) in its Serialize function, then it should make a Ar.UsingCustomVersion(Guid) call first to inform the archive that the object depends on that custom version.
	* That Guid must have already been registered via an FCustomVersionRegistration global object.
	
		For example:

			void MyObject::Serialize(FArchive& Ar)
			{
				Ar.UsingCustomVersion(MyGuid);
				Ar << Member;
				if (Ar.CustomVer(MyGuid) >= EMyObjectCustomVer::ThingAdded)
				{
					Ar << Thing;
				}
			} 

* A missing call to Ar.UsingCustomVersion before using CustomVer will cause an assert.
* TArray::SetNum now uses the default constructor when Num is increasing.
	* Types must have default constructors to continue to use this call.
	* The old zeroing behavior can be achieved via the new SetNumZeroed function.
* FCrc::MemCrc, FCrc::StrCrc and FCrc::StrCrcCaps have been deprecated.
	* FCrc::MemCrc32 should be used if possible, as this give the results that would normally be expected from a CRC32 algorithm.
	* FCrc::MemCrc_DEPRECATED and FCrc::StrCrc_DEPRECATED should be used if you are dependent on the old results.
	* FCrc::StrCrc32 still gives a char-type-independent CRC for a string, and so doesn't necessarily give expected results, but it uses the new string tables.
	* FCrc::StrCrcCaps(*Str) can be replaced with FCrc::StrCrc_DEPRECATED(*Str.ToUpper()).
* AVolume has been made abstract.
	* Existing Volume instances within maps will cause ensure-failures at load time.
	* They should be converted to a non-abstract type (e.g. BlockingVolume) using the editor's Convert feature to change an instance's class.
* When using IncrediBuild, the 64-bit version of XGE is expected to be available (back out CL # 1892517 if you are still using 32-bit)
* LTCG is now enabled for shipping/test Windows targets by default.
	* Pass "-noLTCG" to build command-line to disable it, or set BuildConfiguration.bAllowLTCG=false
* UObject C++ headers no longer need to be in a "Classes" subdirectory!
	* Classes directory is no longer needed, but we are backwards compatible.
	* UObject headers outside of "Classes" are never included in *Classes.h generated group headers. 
		* Instead, you should always include these headers yourself!  (We are starting to deprecate *Classes.h files)
	* UObject headers in "Classes" or "Public" folders cannot depend on private UObject classes.
	* You no longer need to include UObject headers manually before including a module's *.generated.inl file.
		* Generated.inl files now auto-include their dependent UObject headers.
	* Private module source files no longer need to be placed under a "Private" folder.
		* Now, all source is assumed Private unless it's under a "Public" folder somewhere!
		* This means you can have all of your game source in a single folder if you want.
* ObjectVersion.cpp and Version.h will no longer be checked into P4 with other build products. Only build.properties will be updated with the latest engine version.
	* This means that GEngineVersion in local builds will always be set to 0. I made sure this is going to work. Packages saved with 0 engine version can be loaded just fine by the engine (although with a warning from the loading code) and are assumed to be compatible with everything (note that we still save packages with the latest package version which we check against when loading).
* Updates to checkAtCompileTime and STRUCT_OFFSET
	* checkAtCompileTime uses static_assert on all platforms.
	* Provides better diagnostic messages on clang and leverages standard support, which is more likely to be stable.
	* STRUCT_OFFSET uses offsetof on all platforms.
	* We should be using standard support when at all possible.
	* -Wno-invalid-offsetof thrown on all gcc/clang platforms.
	* Because we use offsetof on non-POD types all over the engine, and essentially rely on it working.


#### Platforms
* **iOS**
	* Repaired IPP codesigning capabilities (missing intermediate pems) and added a more informative error message in case the pems go missing again.
	* Changed icon discovery to grab everything from Engine/Build/IOS/Resources, and the game can override whatever it needs.
	* Enabled IPhone5 aspect ratio!
	* Added all possible icons to Engine/Build/IOS/Resources and updated Engine/Build/IOS/UE4Game-Info.plist to match - ALL EXISTING WERE RENAMED!
	* If a game doesn't have a .plist file, it will fall back to Engine/Build/IOS/UE4Game-Info.plist, putting the executable name into the Bundle identifier.
* Steam SDK updated to v1.26
* Replaced the cooker's PackagesToAlwaysCook delegate with FCookModificationDelegate (see GameDelegates.h).
* Renamed -onethread to -nothreading (-singlethread remains the same).


## Future Additions and Ongoing Efforts

#### Editor and Tools
* The seconds per cycle stat is now properly being recorded in ue4stats files. Opening a profile on different machines now shows the same numbers.
* uprojects are now properly loaded in non-editor builds.
* The log is now flushed before a crash in Linux.
* Asset discovery time should be slightly faster.
* Removed a placeholder class with an exceptionally long name in a deep path which was causing build problems in some build environments.
* Added support to query for ancestor class names in the asset registry. The list is formed whether or not any of the parent classes are loaded.
* Replaced the PREFETCH and PREFETCH_CONSOLE macros with a new platform function: FPlatformMisc::Prefetch.
* The visual studio debugging visualizer now works with FNames in monolithic builds.
* BuildThirdPartyLib for Recast will now also build linux.
* If a redirector is referenced by an unloaded map while it is being fixed up, the error message will now report which map is referencing it. Same for code packages.
* Async recast navmesh building can now be enabled or disabled on a per-target basis.
* You can now specify multiple client/server targets when using UAT to cook.
* An actor's tick functions are now unregistered immediately upon destroy. Destroyed actors do not tick anyway because they have RF_PendingKill.
* Accounted for unconventional P4 client roots (this prevented diffing & history from working)
* Re-instated auto-population of server & username for Perforce login.
* Added new widget overlay to tutorial system.
* Prevented new assets & folders from being created in the Classes folder.
* Prevented empty preview mesh paths from causing an AutomationTest warning.
* Source control login now correctly denied when specifying an invalid workspace.
* Prevented main window z-order from being affected by notifications.
* Assets checked out by others are now correctly handled by "Submit to Source Control".
* Stopped relying on manual mapping from depot->p4 workspace. (fixes issues with history & diff)
* Migrating files now adds them to source control if possible.
* Prevented source control from spamming file status when using content browser.
* Added background task to properly check for files to submit.
* Made the source control login dialog more friendly.
* Prevented content browser from trying to request SCC state for built-in packages.
* Prevented submit dialog from resizing when scrolling.
* 'Use Selected' now moved to sub-menu for Actor properties.
* Allowed cancellation of Perforce operations at any time.
* **World Browser**
	* World origin shifting now uses PhysX3.3 builtin function to shift physics actors.
	* Added LOD support for a streaming levels.
	* Added details panel for level tiles. Streaming levels view was removed, since details panel provides similar functionality.
	* Added 'Refresh' command (F5) which rescans world folder and updates World Browser cached data.
	* Added ZOrder to a level tile properties which defines tile sorting order.
* Don't display content browser move/copy menu when dragging a class.
* Loading screen message no longer flickers.
* Tooltip for world/local coordinate button now appears.
* Check if circular linked poses by checking against reentry.
* AddEvent now displays the correct actor label.
* Moved FColorTheme implemenation out of header, and cleaned up bad tabs caused by merge from previous checkin.
* Additional Data now has icon in static mesh editor.
* Various minor improvements and tweaks to the texture editor useability.
* Errors that occur due to incorrect editor modes can now specify why and how they are displayed.
* OnResetToDefaultClicked delegate now fires when resetting to base material.
* InteractiveTutorials is null, unless also launching with -interactivetutorials on the commandline.
* Map is no longer marked as dirty if it needs its lighting rebuilt.
* Guard against tabbing when there's no child to tab to.
* Prevent crash when spam spawning static meshesh.
* Editor no longer closes when creating a new code project.
* InsertDocumentTab now spawns a tab if it can't find the one to insert alongside.
* Make sure we're using absolute paths when opening a solution from the editor.
* Suggestion box now disappears on focus loss.
* Emitter color picker is no longer modal.
* Color Theme now displays appropriate text when in dropdown.
* Bad tab/malformed ids no longer crash the editor.
* 'Convert meshes' no longer flags error due source control "error."
* MessageLog now either defaults to the first entry, or the last log the user viewed.
* Added automatic selection and activation of sole or first asset if none is currently selected on pressing Enter to Asset Picker.
* Added check to New Project wizard to make sure that the folder path is validly formatted for the platform.
* Material Selection: Filtering broko when typing quickly so removed the bShouldNotifyNextAssetSync flag which seemed to exist only to cause it to automatically select an asset if it was still loading others.
* The Asset Saving notification when clicking "Choose Files to Save" looked too much like an error, changed to Notification, and modified the text for clarity.
* It was difficult to remove a level from Favorites. Entries in the favorite list could only be added/removed when the level list was open, removed that requirement and moved open/removing to a sub-menu, also fixed inconsistent internal entry naming bug.
* Normal Map Textures automatically reimported were corrupted due to combined use of Defer Compression & compatibility mode DXT5n normal maps, added swizzled XGXR8 mode for uncompressed deferred normal maps.
* Window Management: On creating a new tab, or otherwise updating it by selecting another tab under a window, change the title to that tabs label unless it's the master/root window which always retains the "map - Unreal Editor" naming scheme.
* Add an optional Cancel button to the auto-saving progress widget.
* Content Browser: Could create a Shared or Private collection because the test enabling shared or private collections was only being evaluated after the collections context menu (right-click) was being created.
* Attached grouped actors did not translate properly becuase they were having deltas for translation, rotation & scaling applied multiple times. Added a check to prevent parented actors being modified by the group actor.
* Updated the level editor context menu to add actors from factories which use the bShowInEditorQuickMenu flag on the factory.
* Prevented a crash caused by cross-project migrated levels world settings not existing in the new project, by creating new world settings for it in the current project.
* Changing the visibility of sub-levels from the level browser dirtied the sub-level umap files. Reset the dirty flag if all we're doing is changing the visibility of the level within the Editor.
* Creating a collection from referenced objects in the content browser produced a collection entitled "u_pattern_syntax_error" due to a Null folder in the specified path so corrected the path construction.
* Changed some of the heading sub-categories to be more descriptive.
* Details panel now contains Expand All Categories / Collapse All Categories visibility menu options.
* F1 now behaves context-sensitively on asset editors.
* The scene outliner is now sortable.
* **Slate**
	* SComboBox and SComboButton now use a Slate Widget Style and are no longer dependent on FEditorStyle.
	* Tabs can now flash when they want attention.
* Delegates are now available for when a PIE or SIE session is paused, resumed, or stepped (in addition to the existing ones for start and stop).
* You are now warned of invalid characters when naming a new asset.
* The auto-save now only runs when things have changed since the last auto-save.
* The Content Browser column view has been updated to display asset SCC and dirty states.
* Improvements to non-modal color pickers.
	* Undo/redo fully supported.
	* Changes to color properties are previewed interactively on the object.
* Removing FEditorStyle from all core slate widgets.
	* This is still in progress but several widget classes have been completed.
* New engine analytics to track editor usage in the following areas:
	* Play-in-editor usage.
	* Blueprint creation (parent class, type, creation method).
	* Docking tab and window usage.
	* Pawns added directly to levels.
	* Blueprint context menu usage.
	* BSP brush usage.
* SoundCue Editor's 'Result' Node renamed to 'Output'.
* Double clicking SoundWave will now display its properties.
* Prevented Curve Editor from applying previously selected key's position to newly selected key.
* Warning shown when creating potentially dangerous combinations of Sound Classes and Sound Mixes.
* Sound Nodes added to the input of an existing connection will now auto connect.
* Material Editor nodes now update in realtime when live update is enabled.
* Performance of Slate Material Editor improved.
* Material Editor nodes are now more compact.
* Dragging and dropping into Material Editor can now be undone.
* Material Result node now shows correct inputs.
* Changes to Material Node and Comment positions now prompt the user to apply changes.
* Dynamic Parameter names now update when changed.
* Greyed out pins now have greyed out text on Material Input node.
* Custom settings are retained when reimporting sounds.
* TActorIterator now uses GetObjectsOfClass to find actors to iterate over.
* "Allow Translucent Selection" now defaults to on (based on usability feedback).
* Default "template" maps (available when using File -> New in editor) have been further simplified.
* Added termination logic for internationalization. No longer see a false (meaningless) positive for memory leaks from the system.
* Internationalization system no longer always loads game data.
* Non-Windows platforms now handle graves and apostrophes (` and ') properly in localized formatting pattern strings.
* Localization data gathering from assets features improved reporting of collisions.
* Improved navigation menu in the Settings UI.
* **Play-In-Editor** 
	* Improved window layout algorithm to use screen real estate more efficiently in multiplayer-PIE.


#### Blueprints
* Variable tooltips will appear when mousing over the item in the My Blueprint panel and when mousing over "Get" nodes.
* When dragging off an input array pin, user will be offered to add a "Make Array" node.
* Find in Blueprint will no longer have issues searching due to spaces in the search term vs the results.
* Double clicking on a parent graph in the MyBlueprint window will not collapse it or expand it.
* Adjusted how the navigating Blueprint graphs.
	* Double clicking on a function or macro graph in the graph panel will open a new tab (or focus on an already opened instance) instead of reusing the current tab.
	* Double clicking in the Find Results window will open the graph in a new tab (or focus on an already opened instance) instead of reusing the current tab.
	* Double clicking on a collapsed graph in the graph panel will reuse the current tab.
* Hid a few Make/Break Struct nodes that had native versions.
* Put in more protection to prevent duplicate timeline, member variable, and function graph names between parent and child Blueprints.
* Creating skeletons from skeletal meshes and materials from textures will give the new asset a default unique name.
* When creating a Blueprint from selected actors, the dialog gives the option of inputing a name.
* Added tooltips to all component classes.
* Added Make/Break for struct nodes to blueprint palette.
* Improved blueprint search so comments are searched where possible.
* Revised code that autoselects in blueprint palette/context menu to provide more desirable results.
* Improved keyboard handling of blueprint context menu.
* Find in Blueprint will no longer have issues searching due to spaces in the search term vs the results.
* Add 'open in new tab' to My Blueprint context menu.

#### Gameplay and Framework
* Comment clean up for game framework engine classes.
* Removed obsolete properties and methods from game framework engine classes.
* Removed obsolete UWorld property RealTimeToUnPause.
* Removed obsolete PlayerController property MaxResponseTime.
* Removed obsolete PlayerController method ConditionalPause().
* Removed a  bunch of obsolete networking stats related properties from PlayerState.
* Removed unused HUDCanvasScale property from HUD and HudSettings classes.
* Removed unused FailedSpawnMessage property from UEngineMessage.
* Removed StreamingPauseIcon property from GameMode.  Wrong place for it- client will crash if it tries to use it.
* Removed unused GameMessageClass properties from GameMode and PlayerState.
* **Input system improvements**
	* Input delegates are now guaranteed to execute in the order the keys were pressed/released when occurring within a single frame.
	* An input delegate can now be dispatched multiple times in a single frame if it is pressed and release and re-pressed within a single frame.
	* Paired input actions (these are actions for which both a pressed and released are bound) now manage a down state such that if multiple keys are bound to that action the first one pressed captures it and any press or release events by non-capturing keys will be ignored until the capturing key is released.  So a few examples where A and B are mapped to an action that has both a pressed and released delegate bound. 
		* Example 1:
		* A is pressed and captures the action, pressed delegate IS dispatched. 
		* B is pressed, A has capture so the pressed delegate IS NOT dispatched. 
		* B is released, B did not have capture so the released delegate IS NOT dispatched.
		* A is released, A did have capture so the released delegate IS dispatched.
		* Example 2:
		* A is pressed and captures the action, pressed delegate IS dispatched.
		* B is pressed, A has capture so the pressed delegate IS NOT dispatched.
		* A is released, A has capture so the released delegate IS dispatched.
		* A is pressed again, there is no capture so A captures and the pressed delegate IS dispatched.
		* A is released, as previously released delegate IS dispatched
		* B is released, B did not have capture so the released delegate IS NOT dispatched.
* Load Stream Level and Unload Stream Level can be called from any blueprint, not just level blueprint.
* The Controller for a Pawn placed in a streamed in level will now be spawned in the streamed level, not the persistent level.
* HUD is now initialized before BeginPlay so as to be available for manipulation during BeginPlay.
* **Oculus Rift Integration**  
	* There have been several improvements and bug fixes to Oculus Rift support, including fixes to certain post process and screen-space effects that previously did not render when in stereoscopic view.
* All new game template projects now have a simplified source file layout.
* Moving Platformergame into Samples as a code-based SampleGames directory test.
	* We'll make an effort to move all code-based example games from the main directory down into a new Games subdirectory under Samples. Games will be the current SampleGames folder renamed. (e.g. CURRENTLY  //depot/UE4/PlatformerGame/ ? //depot/UE4/Samples/SampleGames/PlatformerGame/ )  (The final location being something like //depot/UE4/Samples/Games/PlatformerGame/)
* Trying to return a value from a RPC Client/Server function is now detected as a compile error.
* **Component movement optimizations**
	* Repeated calls to MoveComponent can defer most of the work until the sequence of moves is committed, by encapsulating the MoveComponent calls within a FScopedMovementUpdate() object.
	* Moves within this scope will avoid updates such as UpdateBounds(), OnUpdateTransform(), UpdatePhysicsVolume(), UpdateChildTransforms() etc, until the move is committed (which happens when the Scope goes out of context).
	* A stack of scoped updates is supported, and the move is not committed until the final scope is finished.
	* The current scope of moves can be reverted, which will restore the position to the initial position at the start of that scope.
* **CharacterMovementComponent optimizations**
	* Scoped movement updates are enabled for movement performed by UCharacterMovementComponent, for a 2x to 3x performance increase in character movement in most cases.
	* Movement along ramps no longer uses the StepUp() function, but moves parallel to the surface instead, reducing the number of sweeps required. Ramps are the preferred content solution for stairs where practical.
* **CharacterMovementComponent improvements**
	* StepUp() functionality is now more consistent
	* Simulated movement is more in line with actual movement in terms of floor checks.
	* Simulated movement now slides smoothly up walkable ramps instead of treating them as vertical barriers.
	* Allow velocity to exceed max velocity in all movement modes (from external forces), rather than clamping immediately to the max velocity. Friction and braking are now applied when velocity exceeds the max.
	* Added param to control whether ground movement on non-horizontal surfaces maintains the velocity as if it was horizontal, or whether velocity is maintained parallel to the surface.
* Text is now correctly trimmed when using BP blend nodes.
* Changed default bone attachment coord space to local from world.
* Modified the particle anim notify UAsset to support non-attached particle spawning.
* Widget in PHat no longer disappears after editing.
* Notifies now support a dropdown list when editing the attach point.
* Saving in Persona now only attempts to save modified assets.
* Kismet Init and UpdateAnim events now have tool tips.
* Added a new menu entry to manage notifies to allow deletion of custom notifies.
* Behavior Trees core and tools are still WIP.
* Animation System Improvement
	* Physics Animation: Added BlueprintCallable Physics Weight functions SetPhysicsWeight/AccumulatePhysicsWeight
	* BlendSpace Node allows to set Position/Looping via Pin.
	* IK node displays effector/joint location.
* Physics: Default setting has been tweaked to improve ragdoll.
* Optimization: Dedicated server optimization by disabling physics/tick.


#### Rendering
* Added GPUIndex to HardwareSurvey (quick run with lower confidence for faster startup).
* Experimental screen space subsurface scattering using alpha scene color alpha channel to separate out specular, very minor cost for most passes and if using a 32bit format we don't have it enabled.
* Added ECVF_Scalability to document if a cvar can be used as scalability option.
* Added scalability r.TonemapperQuality (noise to fight color quantization only for higher specs).
* Added typed console variable for better performance and thread safety when using in RT and GT.
* Text render actors now have an anchor sprite for easy selection.
* Exposure menu options have been tidied up. Post process exposure controls have been renamed and regrouped under "Auto Exposure".
* The editor now starts up in high detail mode, not medium.
* Added  r.SceneRenderTargetResizeMethod
	* Controls memory usage technique for scene render targets.
* Creating material expression nodes which include textures now have the default texture selected.
* Optimized UIBlur rendering.
	* Renders only the sections requested (instead of whole screen).
* Moved most CVars to a new type specific format, affording much faster access.
 
 
#### Animation
* Persona now detects if you drop an asset onto a mesh socket and attaches to the mesh, rather than the skeleton.
* Descriptive tooltips added for all Skeletal Control and Blend Pose Blueprint nodes.
* When simulating in PhAT, an onscreen message now tells the user they can use Ctrl-RightMouse to interact with objects.
* Unused code removed from skeleton compression functions.


#### Core
* Modified the binary file versioning scheme so that it is based on the engine version.
* UnrealHeaderTool now ignores all unrecognized #pragmas, so it won't baulk when encountering things like #pragma region.
* HeaderGroups are slowly being removed in a move towards removing the feature; the on-going use of headergroups should stop.
* **Build System** 
	* Added new 'bPrintPerformanceInfo' diagnostic variable to UnrealBuildTool.
* Added AssetUserData support to ULevel (allows plugins to extend Levels with their custom payloads).
* "Hot Reload" of C++ code has been improved to be more reliable.


#### Platforms
* Improved Linux support (DWARF is now parsed to get proper callstacks, platform abstraction layer extended to cover process management, HTTP module enhancements).
* Made sure all Editor windows are listed in the Dock menu on Mac OS X.
* Stopped Editor windows disappearing when placed on a secondary monitor in Mac OS X Mavericks new Space per-display multi-monitor mode.
* Improvements to mouse drag handling in some Editor modes to reduce snapping & hyper-acceleration.
* Added support for opening Unreal Projects by double-clicking them on Mac OS X.
* Enabled Subversion support for Mac OS X, using Xcode's copy of Subversion.
* Implemented Mac OS X support for creating movie files in Matinee.
* Tweaked CoreAudio reverb on Mac OS X to sound more like the other implementations.
* Brought the standalone OpenGL renderer for Slate into line with the Direct3D version.
* Early support for simulator, next QA build after this will make it easy to switch between both.


#### Networking
* Security improvements
* Lifetime properties
* Replication performance


#### Online
* Stability improvements to the online beacons code.
* Beacon actors weren't destroyed when no longer needed.
* Fixed potential exploit where beacon communication could spawn infinite actors.
* Stability improvements to the online sessions API.
* Sessions API now includes a "Destroying" state to differentiate itself from ending/ended states.
* General online async task cleanup (templatized functions / code reuse).
* All online interface shared pointers are now thread safe.
* Steam with LAN should now work properly.
* Removed redundant online search keys that have existing online setting keys.
* Added network byte order serialization support for FOnlineKeyValuePairs<FString,VariantType> data.
* Mcp OSS
	* Added mcp account mapping tests.
		* Exec via "QUERYMAPPINGS <list of ids>"
	* Refactored Mcp configs into embedded source files.                                                   
		* Can also still use ini values in defaultengine.ini for development.
		* Games can override configurations using a callback delegate.
* Http
* Fixed http request pointer being destroyed after request completion delegate was triggered.
	* This had broken "chaining" of http requests by not being able to re-use the same request over and over from teh completion delegate.


## Known Issues
* Warnings on Performance Capture test.
* Fracturing an imported .APB destructible mesh causes more than expected number of fractures. 
* FOLIAGE: No visible brush.
* Scaling with the widget stops and sticks at zero.
* ELEMENTAL: Materials on cliff are showing up as black.
* Error Failed import: EdGraph /Engine/EditorBlueprintResources/StandardMacros.StandardMacros:Do N
* PLATFORMERGAME: 2nd elevator jumps when player is halfway through it.
* QAGAME: CRASH: Opening TraceTest.umap
* SHOOTERGAME: Bot AI is causing enemies to run around without firing or stand still for periods of time.
* SHOOTERGAME: ENSURE: Starting a match with bots.
* XboxOne: All TextRenderActors are artifacting.
* ROCKET: Mac: Xcode: Unable to launch Game.app
* ROCKET: Mac: CONTENT EXAMPLES: Spawn outside map on Blueprint_HUD.



