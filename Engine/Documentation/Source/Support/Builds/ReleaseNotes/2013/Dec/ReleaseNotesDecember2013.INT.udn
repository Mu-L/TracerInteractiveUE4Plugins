Title: December 2013 Release Notes
Crumbs:%ROOT%, Support/Builds
Description:
Availability:Licensee
Parent:Support/Builds
Order:-3
Order: 47

[TOC(start:2 end:2)]

## Build Info


[REGION:simpletable]
| Item | Info |
| ---- | ---- |
| **Labels** | [INCLUDE:#labels] |
| **Built from Changelist #** | 1945305 (//depot/UE4-QA/Promotable-CL-1945305) |
| **Branched from Changelist #** | 1923033 (//depot/UE4/Promoted-CL-1923033) |
| **Visual Studio Version** | Microsoft Visual Studio 2012 Version 11.0.60610.01 Update 3 |
| **DirectX** | June 2010 |
[/REGION]

[COMMENT:none]

[EXCERPT:Labels]
QA_APPROVED_UE4_BUILD_2013_12  
QA_APPROVED_UE4_BUILD_CURRENT  
QA_APPROVED_UE4_BUILD_MINIMUM
[/EXCERPT:Labels]

[/COMMENT]

## Important information

 * Current Engine Development Roadmaps: [UE4 Roadmaps](https://udn.unrealengine.com/questions/topics/roadmap.html)
 * Fixed Bugs: [UE4 Fixed Bugs December 2013](UE4_Fixed_2013_December.xlsx)
 * Known Issues: [UE4 Known Issues December 2013](UE4_Bugs_2013_December.xlsx)
 

## Major New Features

####Editor and Tools
* **New Material Editor Enabled by Default**
	* The new Material Editor is now enabled by default!

		![](NewMaterialEditor2.png)

	* If you still wish to use the old version for any reason then you will need to add "-oldme" to your commandline.

* **Scale Snapping: Preserve Non-Uniform Scale** 
	* A new feature, Scale Snapping: Preserve Non Uniform Scale has been added to in-viewport scaling.
	* You can find this new option in the scale snapping menu, accessed from the viewport's embedded toolbar:

		![](ScaleSnapping.png)

	* When activated, scale snapping will behave slightly differently when interactively scaling objects with non-uniform scales (that is, differing scale factors for X, Y or Z components).
	* Normally when snapping scaling, each of the components are snapped individually to the grid increment. This can cause an object to deform slightly when scaling. Enabling this option prevents this deformation by preserving the ratios between each component, while snapping the largest component to the scale snap grid.

* **Play-In-Editor: Multiple Worlds**
	* This feature changes the way Play-In-Editor Networking works: instead of launching new instances of UE4 to connect to your Play-In-Editor game, the editor now spawns multiple worlds within the already loaded instance of UE4.
		* **Shift-Tab and Ctrl-Tab** can be used to cycle which Play-In-Editor window has focus.

	* **Debugging**	
		* When running under a multiple world scenario, there is now an additional drop down box in the blueprint editor to select the world to debug:

			![](PIENetworking02.png)	

		* Final screenshot of it in action:		

			![](PIENetworking04.png)

* **Content Brower Folders**
	* The ability to display folders has now been added to the 'Asset' view of the content browser.

		![](ContentBrowserFolders01.png)

	* Note that enabling the folder display implies enabling "Show Only Assets In Selected Folders", so you won't see all your content displayed any more if you select the root in the tree view.
	* Folders will be displayed as below. They are displayed in all view modes of the Content Browser:

		![](ContentBrowserFolders02.png)

	* Folders behave much as they would do in Windows Explorer. Drag & drop, rename (F2) & delete are all functional.
	* You can create new folders in the 'Asset View' as well.
	* There is a new 'Up' button (to the left of the path 'breadcrumb trail'). Clicking this will take you up a directory, as will using Alt+Up.	

		![](ContentBrowserFolders03.png)

	* When searching assets, folders are not displayed & assets are displayed recursively, so that workflow is the same as before.

	* **Folder Colors**
		* You can now color code Content Browser folders!	

			![](FolderColors03.png)

* **Package Auto-Save Restoration**
	* You can now restore packages from the previous editing session's auto-saves.
	* If the editor detects that it did not shut-down cleanly, it will present you will a dialog on start-up to let you choose which packages you'd like to restore.

		![](PackageAutoSaveRestoration.png)

	* This feature is limited to restoring packages that are writable on disk; meaning that any packages that have not yet been saved to disk, such as newly created un-saved worlds, cannot be automatically restored via this method (however they do still produce auto-save files on disk that can be manually restored).
	* Should you try and restore a package which is read-only due to source control, the restoration process will first attempt to check-out the package file before attempting to restore it.
	* This feature is disabled entirely when running the editor under a debugger, or when running the editor in automation mode.

* **Interactive Actor Picker**
	* Properties that take an Actor-derived object can now be edited using an interactive picker.	

		![](InteractiveActorPicker01.png)
			
	* The cursor will display as an eyedropper when you hover over a 'pickable' actor:	

		![](InteractiveActorPicker02.png)

* **Customized UVs**
	* There's a new material editor feature which allows you to customize a material's UV channels in the vertex shader.  
	* This can be a powerful optimization tool, since arbitrary computations can be moved out of the expensive pixel shader and into the vertex shader.
	* On the left is a 'distance from center' calculation through CustomizedUVs on a mesh that has an 8x8 vertex grid, right is the same math in the pixel shader.  

		![](CustomizedUVs.png)


####Blueprints
* **Blueprint Communications**
	* Blueprints can now access functions and variables on other Blueprints!
	* Any variable of function that is publically exposed can now by default be accessed in any other Blueprint without the need for an interface.  
	* There's no longer a difference between those that are defined by a code and those that are defined by a Blueprint:  They're simply all available now.
	* The Blueprint below has a custom event called OpenTheDoor:

		![](BlueprintComms02.png)

	* The OpenTheDoor event is now called with a regular function call node:

		![](BlueprintComms03.png)

	* **Migrating from Interfaces**
		* Blueprint Interfaces were used to work around the fact that Blueprints couldn't call functions or access variables on other Blueprints previously.  Now that you don't need to use the workaround, you'll probably want to migrate away from using Interfaces in favor of using Blueprint Communications directly.  We've added a new feature that will let you remove an Interface from your Blueprint, but keep the functions around.
		* You can use "Find in Blueprints" (Ctrl + F in the Blueprint Editor) to find all uses of your message functions, which should make migrating easier.


####Animation
* **Animation Retargeting**
	* Recently support has been added for Animation Retargeting! 
	* What is animation retargeting?
		* Animation retargeting is the ability to use animations made for a specific character, and play them on a character of different proportions. This is important: the characters have to share a common Skeleton for this to work (same bone names and hierarchy); only the bind pose can be different.
	* We have 3 different settings for bone translation retargeting which can be set on the Skeleton Tree window in Persona:
		* **Skeleton**: Bone Translation comes from the Target Skeleton's bind pose.
		* **Animation**: Bone Translation comes from the animation data, unchanged.
		* **Animation Scale**: Bone translation comes from the animation data, but is scaled by the Skeleton's proportions. This is the ratio between the bone length of the Target Skeleton (the skeleton the animation is being played on), and the Source Skeleton (the skeleton the animation was authored for).				

			![](AnimationRetargeting01.png)		

		* In the "Show" menu from the viewport, you can check "NonRetargeted Animation" and "Bones" to compare the original with the retargeted animation.		
			
			![](AnimationRetargeting02.png)		

		* This visualization works on single assets but also on Animation Blueprints.	

			![](AnimationRetargeting03.png)



## New Additions

#### Editor and Tools
* Added easier way to check the type of DragDrop operation with DragDropEvent.GetOperationAs<FMyDragDrop>();
* Added the OnVisualizeTooltip() event that allows for scoped, custom tooltip handling.
* Added an editor user settings in option to prefix the project name watermark in the level editor for disambiguation when frequently switching between branches.
* Added custom mesh previews for material thumbnails. Choose your preview mesh in the details panel of the material editor then in the Content Browser, enter thumbnail edit mode and change the material's preview primitive to the teapot.
* Rocket users now have the ability to send quick feedback from the editor.
* Added option to preserve non-uniform scaling when snapping.
* Cooking paths are now in per-game Editor Preferences.
* Added folders to Content Browser.
* Added thin window border to Slate windows.
* Added interactive actor 'eyedropper' picker for picking actors in the scene.
* Clicking on a graph icon on a node, which it's already present, now exclusively shows it in the graph view.
* Selected keys are now taken into account when doing a copy/cut, and pasting individual keys into existing track is now permitted.
* New content browser option to set the color of the folder. 
* ContentBrowser list and column view now also show colors.
* You are now offered to restore from an auto-save when restarting the editor following a crash.
* Slate Graph version of Material Editor now available for use.
	* Enabled by default, old editor accessed by adding "-oldme" to the commandline.
	* Temporarily flips positions of expressions and comments.
	* Static Bool Expressions no longer show preview window.
	* Can now move Material Input node.
	* Can now ctrl+drag to move material connections.
	* Pressing Enter now cycles through search results.
	* Alternate search results for material expressions added, can now type 'lerp' to search for Linear Interpolation, '1-x' for One Minus and 'sqrt' for Square Root.
	* Allow Blueprint style editing of parameter names from the title bar of nodes.
* Can now shift-click pins in any Blueprint style editor to mark them for connection without dragging a line.
* You can now add "-SCCProvider=ProviderPluginName" to the command line to override which SCC provider plugin is used.
* Advanced grid snapping settings were added to EditorSettings->General->Preferences->Snap.
* **UnrealDocTool** 
	* Added NoPublish availability option to keep page from publishing.
	* Added `[RELATIVE:path]` tag which is rendered into proper relative target path for given UDN document path.


#### Blueprints
* **Blueprint Communications**  
	* Blueprints can now call fun ctions on and access public members of other Blueprints.  You can create variables of other Blueprint-generated classes, and access their members just as you would any other class.  With this feature, you are no longer required to use a Blueprint Interface to communicate between two Blueprints.  To help you remove unnecessary Blueprint Interfaces, when you remove the interface from a Blueprint in its "Blueprint Properties" tab, you will now be able to optionally preserve all the functions and events associated with that Interface.  If you do this, you can simply remove the interface from the implementing Blueprint, select the option to keep the functions and events associated with it, and then change your usage of Message nodes to that interface be direct function call nodes.  Once all instances are updated, you can remove the Blueprint Interface.  To make finding uses of the Message nodes easier, please use the "Find in Blueprints" feature.
* Added Ctrl+Shift+F keybinding for 'find in any blueprint'
* Added support for attaching a component via socket/bone to a native component in the Blueprint Components mode.
* Enumeration can be converted to Name or String.
* "Get number of entries in <Enum>" node added.
* Added BlueprintCallable PawnMakeNoise function to APawn so that Behavior Tree blueprint nodes can makes noises.
* Added blueprint-callable functions to SceneComponent: Get Num Children Components(), Get Child Component(Index), Get Children Components (with "Include All Descendants" checkbox), and Get Parent Components.
* Added categories to blueprint tab.
* Added support for BlueprintNativeEvents. These are similar to BlueprintImplementableEvents, except they can have a native implementation in the call chain.  Note that BPNEs are limited in functionality when used in interfaces.  This will be addressed in a future release.


#### Gameplay and Framework
* HUD HitBox now has Begin/End Cusor Over Events that can be bound.
* Input events in blueprints can now specify in the properties for the event node whether it should override any bindings for that event in parent classes.
* Blueprint variables, functions, and macros now store an internal GUID that will be used to find the referenced member if it was renamed while the class containing the reference is not loaded.  For this GUID based system to work on existing content assets must be resaved.
* Play in Editor Multiplayer: Multiple worlds under one process.
* Multiplayer play can take place under one instance of UE4 (instead of launching separate instances to connect).
* Enable by selecting "Single Process" in the Multiplayer Options in Play In Settings.
* Added preliminary support for Visual Studio 2013 (VC12).
	* Set WindowsPlatform.Compiler to WindowsCompiler.VisualStudio2013 to use it (EXPERIMENTAL!).
	* Pass "-2013" to GenerateProjectFiles.bat to get VS2013-native projects (optional).
	* Windows SDK 8.1 will be used when compiling for Visual Studio 2013.
	* Third party build scripts were updated with paths to VS2013 libraries.
	* Windows XP can still be targeted, but this is experimental (WindowsPlatform.SupportWindowsXP=true).
	* IMPORTANT: UE4 currently only supports Visual Studio 2012.  You need to have that installed in order to compile.  2013 support is only preliminary, for early testing.
	* IMPORTANT: Third party libraries have not yet been compiled for VS2013, so you won't be able to link. 
* Added a JsonUtilities module, which has utilities for converting Json objects to and from UStructs.
* Added ability to override what floor normals are considered "walkable" on both the BodySetup and a per-instance basis. Allowable settings are:
	* Default (behavior unchanged).
	* Increase walkability (allow steeper normals than usual).
	* Decrease walkability (disallow shallower normals than usual).
	* Note: AI navmesh currently ignores these settings.
* Custom AI navigation links, that can affect path following (doors, ladders, etc): USmartNavLinkComponent.
* Added blueprint support for custom AI navigation links in ANavLinkProxy.
* Added detailed path finding debug in ANavigationTestingActor.
* Added a generic mechanism for locking AI resources (like movement and brain) indicating source of lock. See IAIResourceInterface for details.
* Animation Retargeting Improvement: Skeleton supports multiple base poses for retargeting.
	* Base pose is different reference poses of the skeleton i.e. from different size of meshes.
	* When retargeting is used in your system, some animations need to have correct base pose (based on what mesh it was animated from) in order to retarget correctly.  


#### Rendering
* Added HZB occlusion culling. The new system scales better to high object counts than the previous HW occlusion query based system. Currently disabled by default. Set r.HZBOcclusion 1 to enable.
* Added function GetRenderingDetailMode() to Blueprints for scalability.
* Added debug export to the compositing/postprocessing graph (using yWorks)  r.CompositionGraphDebug exports the files to the screenshots folder.  
* **Adaptive sampling lightmass GI solver**
	* Reduces noise in difficult lighting cases and reduces leaking.
	* Added new IndirectLightingQuality world setting which can be used to ramp up the solver quality in maps that exibit GI solver artifacts.
* **Customized UVs**
	* New material property NumCustomizedUVs exposes material inputs which are executed in the vertex shader.
	* The Customized UV inputs can be used to optimize materials by moving math to the vertex shader.
* CVars for each scalability group are now held in an INI file (BaseScalability.ini). 
* Added BL_BeforeTranslucency as a post process material insertion point, for drawing materials before DOF and separate translucency are applied.
* TextComponents can now have their (approx) size defined in world units as a more useful alternative to the x and y scale values.
* Current EyeAdaptation value is now exposed in a material expression for post process materials. Utility->EyeAdaptation. Only supported in SM5.
* OpacityClipMaskValue, BlendMode, TwoSided and LightingModel properties can now be override in material instances.
* MaterialQualityLevel is now exposed in a material expression.
* Rendering detail mode can now be specified per particle emitter.
* The axis lock module is now supported for GPU particle emitters.
* Particle sub emitters can now be enabled and disabled from a blueprint using the function 'SetEmitterEnable'.
* Added  r.UpsampleQuality consolevariable.
	* Range of 4 quality values when upscaling from smaller screen.
* **Automatic Lightmass importance volumes**
	* When no LightmassImportanceVolumes exist, a synthetic one that bounds your scene will be used.
	* The intent is for the user to not need to place an ALightmassImportanceVolume for very simple scenes.
	* The 'automatic volume' extent will be clamped to the 100m (MinimumImportanceVolumeExtentWithoutWarning).
	* We still log a warning to the log when no importance volume exists, but only show a UI warning if the scene exceeds this threshold.
	* Increased the extent value for MinimumImportanceVolumeExtentWithoutWarning from 50m to 100m.


#### Animation
* Copy-Paste added to Persona for Sockets via Ctrl-C/Ctrl-V or context menu items in the skeleton tree. Multiple sockets can be copied at once and pasted onto any bone.
* Floor Height Offset box added to Viewport menu in Persona which moves the floor up and down. This is saved per-mesh.


#### Core
* Added automatic conversion on load from TAssetPtr -> UObject.
* TMap and TArray now have limited emplacement support, so you can construct elements directly into the container without a copy.
	* Use Map.Emplace and Array.Emplace instead of .Add to avoid a copy constructor call when dealing with classes with single-argument constructors.
* TMap values can be retrieved using operator[].
	* ValueType& Val = Map[Key];
	* Unlike std::map, this can be used on const containers and will not insert a new element if the key doesn't exist.  Instead, it will assert.
* FName and FString now support the string view dialog, for easier vizualisation of multiline strings.
* New functor-based functions on TArray which can be used with lambdas.
	* IndexOfByPredicate: find the index of an element by predicate.
	* ContainsByPredicate: tests if any element matches a predicate.
* Debugger visualisers are automatically installed by GenerateProjectFiles.bat.
* UDELEGATE added to allow UFUNCTION specifiers to be passed to the delegate's UFunction.
	* The old form without a UDELEGATE is still supported.
	* e.g.:
	* UDELEGATE(<specifiers>)
	* DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam( FDelegate, float, Var );
* DOREPARRAY no longer works with TArrays.
	* Use DOREPTARRAY instead.
* FVector::Dot2D has been renamed.
	* The name of this function did not accurately represent its behavior.
	* Use FVector::CosineAngle2D instead.
* Indexing into an empty TArray is now always an error.
	* Some errors were not being reported due to a workaround for &Array[0].
	* This kind of usage should be replaced with Array.GetTypedArray().


#### Platforms
* Added BuildThirdPartyLibs UAT script to make batch recompiling of libraries easier (not all libraries have been enabled, see the script for how to set up a batch file).
* Added whitelisting and blacklisting to .uplugin files (see WindowsMoviePlayer.uplugin for an example).
* **Android**
	* Early Android support in main branch, supports DXT and PVRTC devices.
* Added Mac OS X Services integration for Unreal Project files, you can now launch the game or generate Xcode project files from the Services Menu or Finder's context menu when a .uproject file is selected. 
* Implemented  LLDB data formatters for UE4's common containers and string types - add "command script import UE4/Engine/Extras/LLDBDataFormatters/UE4DataFormatters.py" to your ~/.lldbinit.

#### Networking
* **Network actor list**                                           
	* A separate network actor list now tracks actors that are relevant for networking for increased performance.
* **Replication optimizations**                           
	* The low level property replication logic has been completely re-written for performance and security in mind.
* **Work shared across connections**              
	* Ability for replication logic to share work across connections.
* **Lifetime properties**                                        
	* A new way to register properties for increased performance.
* **Lifetime property conditions**                     
	* Ability to apply secondary conditions to lifetime replicated properties.
* **Property checksums**                                       
	* Ability to toggle property checksum to diagnose client/server getting out of sync.


#### Online
* OnlineSubsystemNULL is the fallback when another subsystem is unavailable or purposefully turned off.
	* Game code can continue to call online functions and get callbacks without actual online communication.
*  Added new OnlineMessage interface in the Online Subsystem.
	* Allows for enumerating messages in user's inbox.
	* Can download message by id.
	* Can send a message from one user to another.
	* Can delete individual messages.
	* Message payloads are encoded as key value pairs of string to variant data type to allow for flexible payloads.
	* Currenlty only implemented for the Mcp OSS.
* Refactor of OnlineUser interface in the Online Subsystem.
	* Added Mcp OSS implementation.
* Refactored OnlineFriends interface in the Online Subsystem.
	* Updated existing OSS implementations: Steam PC, PS4, Facebook iOS/PC, Gamecenter iOS, Amazon PC.
	* Steam implementaion now caches a friends list for each read.
	* Added new Mcp OSS implementation.
		* Can operate on named friends lists.
	* Added exec command "SENDINVITES" which takes a list of user ids to send invites to the default friends list.
* Refactor OnlineSubsystem to remove Engine module dependency.
	* All engine dependencies are in the OnlineSubsystemUtils module now.
* Refactor Mcp configs out of source files.


## Upgrade Notes

#### Editor and Tools
* The World Settings now have their own tab (separate from Details tab).
* **Slate** 
	* Sounds in Slate now use FSlateSound rather than FName; the use of FName to store sound names in Slate is deprecated.
	* You can temporarily fix code using FSlateSound::FromName_DEPRECATED.
	* The correct fix is to use a Slate Widget Style to hold any sounds you want Slate to play.
	* SHyperlink is no longer templated. Simply use delegate payloads for passing user data.
* Slate TAttributes now do a better job of enforcing const-ness. It is never OK to have a side-effect inside a Slate TAttribute. 
* SPropertyEditorNumeric, SSpinBox, SNumericEntryBox are generic now and can be parameterized by any numeric type.
* Changed the icons and colors of the Viewport Transform toolbar.
* Added a Content Browser content menu action to create a Slate Brush Asset from a Texture2D.
* Added WYSIWYG SlateBrush preview to properties editor.
* Content browser filters can now be removed by MMB-clicking on them.
* **UnrealDocTool** 
	* Automatically generated header IDs and bookmark names are now lower case and with '(' and ')' replaced by '_'.
* **Plugins**
	* The list of project plug-ins was moved from Game.ini to Engine.ini


#### Blueprints
* Blueprint macros now check for duplicate variable names.
* Encompassed blueprint nodes now attach to a comment box without having to first deselect the comment.
* Macros can now be dragged from My Blueprint into a Graph.
* Added a call to reset the MyBlueprint search filter before adding any new element, so the new element is visible once created.
* The Vector2D blueprint graph actions were moved into the Vector2D category splitting it out from the standard vector class.
* The Alpha section of the color picker has been enabled on blueprint graph color pins.
* The ability to create a comment around selection has been added to the node context menu in the editors.
* The Details view for the socket component was updated so the category is placed correctly and is always visible in the blueprint editor.
* The ability to locate variable uses for any variable based node was added to the context menu in the blueprint editor.
* The graphs general node culling was changed to be more accurate and take account of node widths/heights.
* The class picker dialog has been made to expand to be larger and the default class selection area is now collapsable.
* Blueprint functions and events now use more descriptive/better formatted names.
* Blueprint node renaming now no longer centers the selected node if its title is already visible.


#### Gameplay and Framework
* Split out some behavior of USpringArmComponent into multiple virtuals to make it easier to override in subclasses.
* New class flag added to allow config writes to NOT compare against the file hierarchy when flushed.
* Removed BlueprintProtected from HUD draw calls, in exchange for a warning when they are used outside of DrawHUD.
* Added BlueprintType and BlueprintReadWrite to a number of properties on FPostProcessSettings.
* UPlayerInput::ExecBindings have been renamed DebugExecBindings and will be compiled out of shipping builds.
* UWorldFromContextGetter::GetWorldFromContextObject now takes a bool reference variable to distinguish between situations where the class of the Object passed in is unsupported and where the supported Object simply is returning a NULL UWorld pointer.
* AActor::CustomTimeDilation is now properly applied to the DeltaTime passed to all Components.  Any Component which was manually applying the CustomTimeDilation will now have it applied twice. 
* **Changes to UEngine functions**
	* Use AActor::GetNetMode() or UWorld::GetNetMode() instead of GEngine->GetNetMode()
	* Use AActor::GetNetDriver() or UWorld::GetNetDriver() instead of GEngine->GetNetDriver()
* **Many other GEngine functions now take a required UWorld**
	* GEngine->GetLocalPlayerIterator( GetWorld() );
	* GEngine->GetGamePlayers( GetWorld() );
	* GEngine->GetGamePlayers( GetWorld() );
	* GEngine->GetGamePlayer( GetWorld(), PlayerIndex );
	* GEngine->GetFirstGamePlayer( GetWorld() ) const;
* Pathfollowing's default behavior improvements. Most importantly default "acceptance radius" is now Agent's radius instead of previously used 0. 0 is still a valid value.


#### Rendering
* Lighting needs to be rebuilt for all maps.
* Lowered LOD scalability restrictions to be more useful. (some defaults might need an update).


#### Animation
* Added another phase ValidateAnimNodePostCompile to anim graph nodes, which is called at the very end of compilation, in case nodes (only ones that contributed to the final class) want to validate something against the final CDO.
* Prevented transition pose evaluator nodes from showing up as a placeable option in the menu and allowed them to be deleted if they were inadvertently placed in the wrong graph (they're autocreated where necessary).
* Added support for object references on togglable anim pins.


#### Core
* Log output has changed to using UTC tags.
	* Any tools which parses log output needs to be aware of this change.
	* The old format is still supported by passing -logtimesincestart at the command line.
* Changes to replicated parameters.
	* Non-const reference TArrays should be passed by const reference to indicate that the results are not replicated back.
	* FStrings should be passed by const-reference, not value.
* 'placeable' specifier on UCLASS declarations has been removed.
	* Classes are now placeable by default.
	* A class can have the 'notplaceable' specifier added it to stop it and its descendants being placeable.
	* A class marked as 'abstract' is also non-placeable, but this doesn't affect the placeability of its descendants.
* Explicit registration of archive custom versions is now needed.
	* If a particular class wishes to use Ar.CustomVer(Guid) in its Serialize function, then it should make a Ar.UsingCustomVersion(Guid) call first to inform the archive that the object depends on that custom version.
	* That Guid must have already been registered via an FCustomVersionRegistration global object.
	
		For example:

			void MyObject::Serialize(FArchive& Ar)
			{
				Ar.UsingCustomVersion(MyGuid);
				Ar << Member;
				if (Ar.CustomVer(MyGuid) >= EMyObjectCustomVer::ThingAdded)
				{
					Ar << Thing;
				}
			} 

* A missing call to Ar.UsingCustomVersion before using CustomVer will cause an assert.
* TArray::SetNum now uses the default constructor when Num is increasing.
	* Types must have default constructors to continue to use this call.
	* The old zeroing behavior can be achieved via the new SetNumZeroed function.
* FCrc::MemCrc, FCrc::StrCrc and FCrc::StrCrcCaps have been deprecated.
	* FCrc::MemCrc32 should be used if possible, as this give the results that would normally be expected from a CRC32 algorithm.
	* FCrc::MemCrc_DEPRECATED and FCrc::StrCrc_DEPRECATED should be used if you are dependent on the old results.
	* FCrc::StrCrc32 still gives a char-type-independent CRC for a string, and so doesn't necessarily give expected results, but it uses the new string tables.
	* FCrc::StrCrcCaps(*Str) can be replaced with FCrc::StrCrc_DEPRECATED(*Str.ToUpper()).
* AVolume has been made abstract.
	* Existing Volume instances within maps will cause ensure-failures at load time.
	* They should be converted to a non-abstract type (e.g. BlockingVolume) using the editor's Convert feature to change an instance's class.
* When using IncrediBuild, the 64-bit version of XGE is expected to be available (back out CL # 1892517 if you are still using 32-bit)
* LTCG is now enabled for shipping/test Windows targets by default.
	* Pass "-noLTCG" to build command-line to disable it, or set BuildConfiguration.bAllowLTCG=false
* UObject C++ headers no longer need to be in a "Classes" subdirectory!
	* Classes directory is no longer needed, but we are backwards compatible.
	* UObject headers outside of "Classes" are never included in *Classes.h generated group headers. 
		* Instead, you should always include these headers yourself!  (We are starting to deprecate *Classes.h files)
	* UObject headers in "Classes" or "Public" folders cannot depend on private UObject classes.
	* You no longer need to include UObject headers manually before including a module's *.generated.inl file.
		* Generated.inl files now auto-include their dependent UObject headers.
	* Private module source files no longer need to be placed under a "Private" folder.
		* Now, all source is assumed Private unless it's under a "Public" folder somewhere!
		* This means you can have all of your game source in a single folder if you want.
* ObjectVersion.cpp and Version.h will no longer be checked into P4 with other build products. Only build.properties will be updated with the latest engine version.
	* This means that GEngineVersion in local builds will always be set to 0. I made sure this is going to work. Packages saved with 0 engine version can be loaded just fine by the engine (although with a warning from the loading code) and are assumed to be compatible with everything (note that we still save packages with the latest package version which we check against when loading).
* Updates to checkAtCompileTime and STRUCT_OFFSET
	* checkAtCompileTime uses static_assert on all platforms.
	* Provides better diagnostic messages on clang and leverages standard support, which is more likely to be stable.
	* STRUCT_OFFSET uses offsetof on all platforms.
	* We should be using standard support when at all possible.
	* -Wno-invalid-offsetof thrown on all gcc/clang platforms.
	* Because we use offsetof on non-POD types all over the engine, and essentially rely on it working.


#### Platforms
* **iOS**
	* Repaired IPP codesigning capabilities (missing intermediate pems) and added a more informative error message in case the pems go missing again.
	* Changed icon discovery to grab everything from Engine/Build/IOS/Resources, and the game can override whatever it needs.
	* Enabled IPhone5 aspect ratio!
	* Added all possible icons to Engine/Build/IOS/Resources and updated Engine/Build/IOS/UE4Game-Info.plist to match - ALL EXISTING WERE RENAMED!
	* If a game doesn't have a .plist file, it will fall back to Engine/Build/IOS/UE4Game-Info.plist, putting the executable name into the Bundle identifier.
* Steam SDK updated to v1.26
* Replaced the cooker's PackagesToAlwaysCook delegate with FCookModificationDelegate (see GameDelegates.h).
* Renamed -onethread to -nothreading (-singlethread remains the same).


## Future Additions and Ongoing Efforts

#### Editor and Tools
* The seconds per cycle stat is now properly being recorded in ue4stats files. Opening a profile on different machines now shows the same numbers.
* uprojects are now properly loaded in non-editor builds.
* The log is now flushed before a crash in Linux.
* Asset discovery time should be slightly faster.
* Removed a placeholder class with an exceptionally long name in a deep path which was causing build problems in some build environments.
* Added support to query for ancestor class names in the asset registry. The list is formed whether or not any of the parent classes are loaded.
* Replaced the PREFETCH and PREFETCH_CONSOLE macros with a new platform function: FPlatformMisc::Prefetch.
* The visual studio debugging visualizer now works with FNames in monolithic builds.
* BuildThirdPartyLib for Recast will now also build linux.
* If a redirector is referenced by an unloaded map while it is being fixed up, the error message will now report which map is referencing it. Same for code packages.
* Async recast navmesh building can now be enabled or disabled on a per-target basis.
* You can now specify multiple client/server targets when using UAT to cook.
* An actor's tick functions are now unregistered immediately upon destroy. Destroyed actors do not tick anyway because they have RF_PendingKill.
* Accounted for unconventional P4 client roots (this prevented diffing & history from working)
* Re-instated auto-population of server & username for Perforce login.
* Added new widget overlay to tutorial system.
* Prevented new assets & folders from being created in the Classes folder.
* Prevented empty preview mesh paths from causing an AutomationTest warning.
* Source control login now correctly denied when specifying an invalid workspace.
* Prevented main window z-order from being affected by notifications.
* Assets checked out by others are now correctly handled by "Submit to Source Control".
* Stopped relying on manual mapping from depot->p4 workspace. (fixes issues with history & diff)
* Migrating files now adds them to source control if possible.
* Prevented source control from spamming file status when using content browser.
* Added background task to properly check for files to submit.
* Made the source control login dialog more friendly.
* Prevented content browser from trying to request SCC state for built-in packages.
* Prevented submit dialog from resizing when scrolling.
* 'Use Selected' now moved to sub-menu for Actor properties.
* Allowed cancellation of Perforce operations at any time.
* **World Browser**
	* World origin shifting now uses PhysX3.3 builtin function to shift physics actors.
	* Added LOD support for a streaming levels.
	* Added details panel for level tiles. Streaming levels view was removed, since details panel provides similar functionality.
	* Added 'Refresh' command (F5) which rescans world folder and updates World Browser cached data.
	* Added ZOrder to a level tile properties which defines tile sorting order.
* Don't display content browser move/copy menu when dragging a class.
* Loading screen message no longer flickers.
* Tooltip for world/local coordinate button now appears.
* Check if circular linked poses by checking against reentry.
* AddEvent now displays the correct actor label.
* Moved FColorTheme implemenation out of header, and cleaned up bad tabs caused by merge from previous checkin.
* Additional Data now has icon in static mesh editor.
* Various minor improvements and tweaks to the texture editor useability.
* Errors that occur due to incorrect editor modes can now specify why and how they are displayed.
* OnResetToDefaultClicked delegate now fires when resetting to base material.
* InteractiveTutorials is null, unless also launching with -interactivetutorials on the commandline.
* Map is no longer marked as dirty if it needs its lighting rebuilt.
* Guard against tabbing when there's no child to tab to.
* Prevent crash when spam spawning static meshesh.
* Editor no longer closes when creating a new code project.
* InsertDocumentTab now spawns a tab if it can't find the one to insert alongside.
* Make sure we're using absolute paths when opening a solution from the editor.
* Suggestion box now disappears on focus loss.
* Emitter color picker is no longer modal.
* Color Theme now displays appropriate text when in dropdown.
* Bad tab/malformed ids no longer crash the editor.
* 'Convert meshes' no longer flags error due source control "error."
* MessageLog now either defaults to the first entry, or the last log the user viewed.
* Added automatic selection and activation of sole or first asset if none is currently selected on pressing Enter to Asset Picker.
* Added check to New Project wizard to make sure that the folder path is validly formatted for the platform.
* Material Selection: Filtering broko when typing quickly so removed the bShouldNotifyNextAssetSync flag which seemed to exist only to cause it to automatically select an asset if it was still loading others.
* The Asset Saving notification when clicking "Choose Files to Save" looked too much like an error, changed to Notification, and modified the text for clarity.
* It was difficult to remove a level from Favorites. Entries in the favorite list could only be added/removed when the level list was open, removed that requirement and moved open/removing to a sub-menu, also fixed inconsistent internal entry naming bug.
* Normal Map Textures automatically reimported were corrupted due to combined use of Defer Compression & compatibility mode DXT5n normal maps, added swizzled XGXR8 mode for uncompressed deferred normal maps.
* Window Management: On creating a new tab, or otherwise updating it by selecting another tab under a window, change the title to that tabs label unless it's the master/root window which always retains the "map - Unreal Editor" naming scheme.
* Add an optional Cancel button to the auto-saving progress widget.
* Content Browser: Could create a Shared or Private collection because the test enabling shared or private collections was only being evaluated after the collections context menu (right-click) was being created.
* Attached grouped actors did not translate properly becuase they were having deltas for translation, rotation & scaling applied multiple times. Added a check to prevent parented actors being modified by the group actor.
* Updated the level editor context menu to add actors from factories which use the bShowInEditorQuickMenu flag on the factory.
* Prevented a crash caused by cross-project migrated levels world settings not existing in the new project, by creating new world settings for it in the current project.
* Changing the visibility of sub-levels from the level browser dirtied the sub-level umap files. Reset the dirty flag if all we're doing is changing the visibility of the level within the Editor.
* Creating a collection from referenced objects in the content browser produced a collection entitled "u_pattern_syntax_error" due to a Null folder in the specified path so corrected the path construction.
* Changed some of the heading sub-categories to be more descriptive.
* Details panel now contains Expand All Categories / Collapse All Categories visibility menu options.
* F1 now behaves context-sensitively on asset editors.
* The scene outliner is now sortable.
* **Slate**
	* SComboBox and SComboButton now use a Slate Widget Style and are no longer dependent on FEditorStyle.
	* Tabs can now flash when they want attention.
* Delegates are now available for when a PIE or SIE session is paused, resumed, or stepped (in addition to the existing ones for start and stop).
* You are now warned of invalid characters when naming a new asset.
* The auto-save now only runs when things have changed since the last auto-save.
* The Content Browser column view has been updated to display asset SCC and dirty states.
* Improvements to non-modal color pickers.
	* Undo/redo fully supported.
	* Changes to color properties are previewed interactively on the object.
* Removing FEditorStyle from all core slate widgets.
	* This is still in progress but several widget classes have been completed.
* New engine analytics to track editor usage in the following areas:
	* Play-in-editor usage.
	* Blueprint creation (parent class, type, creation method).
	* Docking tab and window usage.
	* Pawns added directly to levels.
	* Blueprint context menu usage.
	* BSP brush usage.
* SoundCue Editor's 'Result' Node renamed to 'Output'.
* Double clicking SoundWave will now display its properties.
* Prevented Curve Editor from applying previously selected key's position to newly selected key.
* Warning shown when creating potentially dangerous combinations of Sound Classes and Sound Mixes.
* Sound Nodes added to the input of an existing connection will now auto connect.
* Material Editor nodes now update in realtime when live update is enabled.
* Performance of Slate Material Editor improved.
* Material Editor nodes are now more compact.
* Dragging and dropping into Material Editor can now be undone.
* Material Result node now shows correct inputs.
* Changes to Material Node and Comment positions now prompt the user to apply changes.
* Dynamic Parameter names now update when changed.
* Greyed out pins now have greyed out text on Material Input node.
* Custom settings are retained when reimporting sounds.
* TActorIterator now uses GetObjectsOfClass to find actors to iterate over.
* "Allow Translucent Selection" now defaults to on (based on usability feedback).
* Default "template" maps (available when using File -> New in editor) have been further simplified.
* Added termination logic for internationalization. No longer see a false (meaningless) positive for memory leaks from the system.
* Internationalization system no longer always loads game data.
* Non-Windows platforms now handle graves and apostrophes (` and ') properly in localized formatting pattern strings.
* Localization data gathering from assets features improved reporting of collisions.
* Improved navigation menu in the Settings UI.
* **Play-In-Editor** 
	* Improved window layout algorithm to use screen real estate more efficiently in multiplayer-PIE.


#### Blueprints
* Variable tooltips will appear when mousing over the item in the My Blueprint panel and when mousing over "Get" nodes.
* When dragging off an input array pin, user will be offered to add a "Make Array" node.
* Find in Blueprint will no longer have issues searching due to spaces in the search term vs the results.
* Double clicking on a parent graph in the MyBlueprint window will not collapse it or expand it.
* Adjusted how the navigating Blueprint graphs.
	* Double clicking on a function or macro graph in the graph panel will open a new tab (or focus on an already opened instance) instead of reusing the current tab.
	* Double clicking in the Find Results window will open the graph in a new tab (or focus on an already opened instance) instead of reusing the current tab.
	* Double clicking on a collapsed graph in the graph panel will reuse the current tab.
* Hid a few Make/Break Struct nodes that had native versions.
* Put in more protection to prevent duplicate timeline, member variable, and function graph names between parent and child Blueprints.
* Creating skeletons from skeletal meshes and materials from textures will give the new asset a default unique name.
* When creating a Blueprint from selected actors, the dialog gives the option of inputing a name.
* Added tooltips to all component classes.
* Added Make/Break for struct nodes to blueprint palette.
* Improved blueprint search so comments are searched where possible.
* Revised code that autoselects in blueprint palette/context menu to provide more desirable results.
* Improved keyboard handling of blueprint context menu.
* Find in Blueprint will no longer have issues searching due to spaces in the search term vs the results.
* Add 'open in new tab' to My Blueprint context menu.

#### Gameplay and Framework
* Comment clean up for game framework engine classes.
* Removed obsolete properties and methods from game framework engine classes.
* Removed obsolete UWorld property RealTimeToUnPause.
* Removed obsolete PlayerController property MaxResponseTime.
* Removed obsolete PlayerController method ConditionalPause().
* Removed a  bunch of obsolete networking stats related properties from PlayerState.
* Removed unused HUDCanvasScale property from HUD and HudSettings classes.
* Removed unused FailedSpawnMessage property from UEngineMessage.
* Removed StreamingPauseIcon property from GameMode.  Wrong place for it- client will crash if it tries to use it.
* Removed unused GameMessageClass properties from GameMode and PlayerState.
* **Input system improvements**
	* Input delegates are now guaranteed to execute in the order the keys were pressed/released when occurring within a single frame.
	* An input delegate can now be dispatched multiple times in a single frame if it is pressed and release and re-pressed within a single frame.
	* Paired input actions (these are actions for which both a pressed and released are bound) now manage a down state such that if multiple keys are bound to that action the first one pressed captures it and any press or release events by non-capturing keys will be ignored until the capturing key is released.  So a few examples where A and B are mapped to an action that has both a pressed and released delegate bound. 
		* Example 1:
		* A is pressed and captures the action, pressed delegate IS dispatched. 
		* B is pressed, A has capture so the pressed delegate IS NOT dispatched. 
		* B is released, B did not have capture so the released delegate IS NOT dispatched.
		* A is released, A did have capture so the released delegate IS dispatched.
		* Example 2:
		* A is pressed and captures the action, pressed delegate IS dispatched.
		* B is pressed, A has capture so the pressed delegate IS NOT dispatched.
		* A is released, A has capture so the released delegate IS dispatched.
		* A is pressed again, there is no capture so A captures and the pressed delegate IS dispatched.
		* A is released, as previously released delegate IS dispatched
		* B is released, B did not have capture so the released delegate IS NOT dispatched.
* Load Stream Level and Unload Stream Level can be called from any blueprint, not just level blueprint.
* The Controller for a Pawn placed in a streamed in level will now be spawned in the streamed level, not the persistent level.
* HUD is now initialized before BeginPlay so as to be available for manipulation during BeginPlay.
* **Oculus Rift Integration**  
	* There have been several improvements and bug fixes to Oculus Rift support, including fixes to certain post process and screen-space effects that previously did not render when in stereoscopic view.
* All new game template projects now have a simplified source file layout.
* Moving Platformergame into Samples as a code-based SampleGames directory test.
	* We'll make an effort to move all code-based example games from the main directory down into a new Games subdirectory under Samples. Games will be the current SampleGames folder renamed. (e.g. CURRENTLY  //depot/UE4/PlatformerGame/ ? //depot/UE4/Samples/SampleGames/PlatformerGame/ )  (The final location being something like //depot/UE4/Samples/Games/PlatformerGame/)
* Trying to return a value from a RPC Client/Server function is now detected as a compile error.
* **Component movement optimizations**
	* Repeated calls to MoveComponent can defer most of the work until the sequence of moves is committed, by encapsulating the MoveComponent calls within a FScopedMovementUpdate() object.
	* Moves within this scope will avoid updates such as UpdateBounds(), OnUpdateTransform(), UpdatePhysicsVolume(), UpdateChildTransforms() etc, until the move is committed (which happens when the Scope goes out of context).
	* A stack of scoped updates is supported, and the move is not committed until the final scope is finished.
	* The current scope of moves can be reverted, which will restore the position to the initial position at the start of that scope.
* **CharacterMovementComponent optimizations**
	* Scoped movement updates are enabled for movement performed by UCharacterMovementComponent, for a 2x to 3x performance increase in character movement in most cases.
	* Movement along ramps no longer uses the StepUp() function, but moves parallel to the surface instead, reducing the number of sweeps required. Ramps are the preferred content solution for stairs where practical.
* **CharacterMovementComponent improvements**
	* StepUp() functionality is now more consistent
	* Simulated movement is more in line with actual movement in terms of floor checks.
	* Simulated movement now slides smoothly up walkable ramps instead of treating them as vertical barriers.
	* Allow velocity to exceed max velocity in all movement modes (from external forces), rather than clamping immediately to the max velocity. Friction and braking are now applied when velocity exceeds the max.
	* Added param to control whether ground movement on non-horizontal surfaces maintains the velocity as if it was horizontal, or whether velocity is maintained parallel to the surface.
* Text is now correctly trimmed when using BP blend nodes.
* Changed default bone attachment coord space to local from world.
* Modified the particle anim notify UAsset to support non-attached particle spawning.
* Widget in PHat no longer disappears after editing.
* Notifies now support a dropdown list when editing the attach point.
* Saving in Persona now only attempts to save modified assets.
* Kismet Init and UpdateAnim events now have tool tips.
* Added a new menu entry to manage notifies to allow deletion of custom notifies.
* Behavior Trees core and tools are still WIP.
* Animation System Improvement
	* Physics Animation: Added BlueprintCallable Physics Weight functions SetPhysicsWeight/AccumulatePhysicsWeight
	* BlendSpace Node allows to set Position/Looping via Pin.
	* IK node displays effector/joint location.
* Physics: Default setting has been tweaked to improve ragdoll.
* Optimization: Dedicated server optimization by disabling physics/tick.


#### Rendering
* Added GPUIndex to HardwareSurvey (quick run with lower confidence for faster startup).
* Experimental screen space subsurface scattering using alpha scene color alpha channel to separate out specular, very minor cost for most passes and if using a 32bit format we don't have it enabled.
* Added ECVF_Scalability to document if a cvar can be used as scalability option.
* Added scalability r.TonemapperQuality (noise to fight color quantization only for higher specs).
* Added typed console variable for better performance and thread safety when using in RT and GT.
* Text render actors now have an anchor sprite for easy selection.
* Exposure menu options have been tidied up. Post process exposure controls have been renamed and regrouped under "Auto Exposure".
* The editor now starts up in high detail mode, not medium.
* Added  r.SceneRenderTargetResizeMethod
	* Controls memory usage technique for scene render targets.
* Creating material expression nodes which include textures now have the default texture selected.
* Optimized UIBlur rendering.
	* Renders only the sections requested (instead of whole screen).
* Moved most CVars to a new type specific format, affording much faster access.
 
 
#### Animation
* Persona now detects if you drop an asset onto a mesh socket and attaches to the mesh, rather than the skeleton.
* Descriptive tooltips added for all Skeletal Control and Blend Pose Blueprint nodes.
* When simulating in PhAT, an onscreen message now tells the user they can use Ctrl-RightMouse to interact with objects.
* Unused code removed from skeleton compression functions.


#### Core
* Modified the binary file versioning scheme so that it is based on the engine version.
* UnrealHeaderTool now ignores all unrecognized #pragmas, so it won't baulk when encountering things like #pragma region.
* HeaderGroups are slowly being removed in a move towards removing the feature; the on-going use of headergroups should stop.
* **Build System** 
	* Added new 'bPrintPerformanceInfo' diagnostic variable to UnrealBuildTool.
* Added AssetUserData support to ULevel (allows plugins to extend Levels with their custom payloads).
* "Hot Reload" of C++ code has been improved to be more reliable.


#### Platforms
* Improved Linux support (DWARF is now parsed to get proper callstacks, platform abstraction layer extended to cover process management, HTTP module enhancements).
* Made sure all Editor windows are listed in the Dock menu on Mac OS X.
* Stopped Editor windows disappearing when placed on a secondary monitor in Mac OS X Mavericks new Space per-display multi-monitor mode.
* Improvements to mouse drag handling in some Editor modes to reduce snapping & hyper-acceleration.
* Added support for opening Unreal Projects by double-clicking them on Mac OS X.
* Enabled Subversion support for Mac OS X, using Xcode's copy of Subversion.
* Implemented Mac OS X support for creating movie files in Matinee.
* Tweaked CoreAudio reverb on Mac OS X to sound more like the other implementations.
* Brought the standalone OpenGL renderer for Slate into line with the Direct3D version.
* Early support for simulator, next QA build after this will make it easy to switch between both.


#### Networking
* Security improvements
* Lifetime properties
* Replication performance


#### Online
* Stability improvements to the online beacons code.
* Beacon actors weren't destroyed when no longer needed.
* Fixed potential exploit where beacon communication could spawn infinite actors.
* Stability improvements to the online sessions API.
* Sessions API now includes a "Destroying" state to differentiate itself from ending/ended states.
* General online async task cleanup (templatized functions / code reuse).
* All online interface shared pointers are now thread safe.
* Steam with LAN should now work properly.
* Removed redundant online search keys that have existing online setting keys.
* Added network byte order serialization support for FOnlineKeyValuePairs<FString,VariantType> data.
* Mcp OSS
	* Added mcp account mapping tests.
		* Exec via "QUERYMAPPINGS <list of ids>"
	* Refactored Mcp configs into embedded source files.                                                   
		* Can also still use ini values in defaultengine.ini for development.
		* Games can override configurations using a callback delegate.
* Http
* Fixed http request pointer being destroyed after request completion delegate was triggered.
	* This had broken "chaining" of http requests by not being able to re-use the same request over and over from teh completion delegate.


## Known Issues
* Warnings on Performance Capture test.
* Fracturing an imported .APB destructible mesh causes more than expected number of fractures. 
* FOLIAGE: No visible brush.
* Scaling with the widget stops and sticks at zero.
* ELEMENTAL: Materials on cliff are showing up as black.
* Error Failed import: EdGraph /Engine/EditorBlueprintResources/StandardMacros.StandardMacros:Do N
* PLATFORMERGAME: 2nd elevator jumps when player is halfway through it.
* QAGAME: CRASH: Opening TraceTest.umap
* SHOOTERGAME: Bot AI is causing enemies to run around without firing or stand still for periods of time.
* SHOOTERGAME: ENSURE: Starting a match with bots.
* XboxOne: All TextRenderActors are artifacting.
* ROCKET: Mac: Xcode: Unable to launch Game.app
* ROCKET: Mac: CONTENT EXAMPLES: Spawn outside map on Blueprint_HUD.



