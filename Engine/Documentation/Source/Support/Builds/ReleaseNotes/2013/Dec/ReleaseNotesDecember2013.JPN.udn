INTSourceChangelist:3367470
Title:2013年12月リリースノート
Crumbs:%ROOT%, Support/Builds
Description:
Availability:Licensee
Parent:Support/Builds
Order:-3

[TOC(start:2 end:2)]

## ビルド情報


[REGION:simpletable]
| アイテム | 情報 |
| ---- | ---- |
| **Labels** | [INCLUDE:#labels] |
| **Built from Changelist #** | 1945305 (//depot/UE4-QA/Promotable-CL-1945305) |
| **Branched from Changelist #** | 1923033 (//depot/UE4/Promoted-CL-1923033) |
| **Visual Studio Version** | Microsoft Visual Studio 2012 Version 11.0.60610.01 Update 3 |
| **DirectX** | June 2010 |
[/REGION]

[COMMENT:none]

[EXCERPT:Labels]
QA_APPROVED_UE4_BUILD_2013_12  
QA_APPROVED_UE4_BUILD_CURRENT  
QA_APPROVED_UE4_BUILD_MINIMUM
[/EXCERPT:Labels]

[/COMMENT]

## 重要情報

 * 現時点のエンジン開発ロードマップ: [UE4 Roadmaps](https://udn.unrealengine.com/questions/topics/roadmap.html)
 * 修正されたバグ： [UE4 Fixed Bugs December 2013](UE4_Fixed_2013_December.xlsx)
 * 周知のバグ： [UE4 Known Issues December 2013](UE4_Bugs_2013_December.xlsx)
 

## 主要な新機能

#### エディタとツール
* **新規マテリアルエディタはデフォルトで有効です**
	* 新規マテリアル エディタはデフォルトで有効になりました！

		![](NewMaterialEditor2.png)

	* 何らかの理由で旧バージョンを使用したい場合、コマンドラインに「-oldme」を追加しなくてはいけません。

* **スケールのスナップ：不均等なスケーリングを維持します** 
	* スケールのスナップの新機能:Preserve Non Uniform Scale がビューポート内のスケーリングに追加されました。
	* この新オプションはスケールのスナップメニューから使用できます。ビューポートに組み込まれたツールバーからアクセスが可能です。

		![](ScaleSnapping.png)

	* このオプションをアクティベートすると、スケールのスナップは、不均等なスケーリングでオブジェクトをインタラクティブにスケーリングした結果と微妙に異なる挙動となります (つまり、X、Y、Z コンポーネントのスケール係数が異なります)。
	* スナップのスケーリングは通常は、各コンポーネントはグリッドのインクリメントに個別にスナップされます。結果としてスケーリング時にオブジェクトに多少変形が生じます。このオプションを有効にすることにより、スケールをスナップするグリッドへ一番大きなコンポーネントをスナップしながら各コンポーネントの割合を保つことによって変形を回避することができます。

* **Play-In-Editor:複数のワールド** 
	* この機能は PIE ネットワークの動作方法を変更します。ユーザーの PIE ゲームへ接続するために UE4 の新規インスタンスを起動する代わりに、既にロードした UE4 のインスタンス内で、エディタが複数のワールドをスポーンするようになりました。
		* **Shift-Tab と Ctrl-Tab** キー操作で PIE が焦点とするウィンドウを循環することができます。

	* **デバッグ作業**	
		* 複数のワールドから成るシナリオを実行時に、デバッグ作業を行うワールドを選択するための追加のドロップダウン ボックスがブループリント エディタに追加されました。

			![](PIENetworking02.png)	

		* 動作中の最終スクリーンショット：		

			![](PIENetworking04.png)

* **コンテンツ ブラウザに表示されるフォルダ**
	* コンテンツ ブラウザの「Asset」ビューにフォルダを表示する機能が追加されました。

		![](ContentBrowserFolders01.png)

	* フォルダ表示を有効にするというこは [Show Only Assets In Selected Folders] を有効にすることを意味します。ツリービューでルートを選択すると全てのコンテンツが表示されなくなることにご注意ください。
	* フォルダは以下のように表示されます。They are displayed in all view modes of the Content Browser:

		![](ContentBrowserFolders02.png)

	* フォルダは、Windows Explorer とほぼ同じ挙動をします。ドラッグ＆ドロップ、名前の変更 (F2) 、削除オプションは全て機能します。
	* [Asset View] へ新規フォルダを作成することもできます。
	* 新しく [Up] ボタンが追加されました ('breadcrumb trail' の左)。このボタンをクリックするとディレクトリへ移動します。 [Alt+Up] キー操作でも移動可能です。	

		![](ContentBrowserFolders03.png)

	* アセットの検索時は、フォルダは非表示となり、アセットは再帰的に表示されるため、以前のワークフローと同じです。

	* **フォルダの色**
		* コンテンツ ブラウザのフォルダの色分けが可能になりました！	

			![](FolderColors03.png)

* **パッケージ自動保存の復元**
	* 前回の編集セッションの自動保存からパッケージが復元できるようになりました。
	* 不適切なシャットダウンをエディタが検知すると、立ち上げ時にダイアログが表示されて、復元するパッケージを選択することができます。

		![](PackageAutoSaveRestoration.png)

	* この機能はディスクに書き込みが可能なパッケージの復元のみに限定されます。つまり、新規に作成された未保存のワールドなど、まだディスクに保存されていないパッケージは、この方法で自動復元を実行することができません (しかし、手動で復元が可能な自動保存ファイルをディスクに作成します)。
	* ソース コントロールが原因で読み取り専用のパッケージを復元する場合、復元処理を開始する前にこのプロセスによりパッケージ ファイルがチェックアウトされます。
	* デバッガを起動しながらエディタの実行時、またはエディタをオートメーション モードで起動している時は、この機能は完全に無効となります。

* **インタラクティブ アクタ ピッカー**
	* アクタから派生したオブジェクトを取り込むプロパティは、インタラクティブ ピッカーを利用した編集が可能になりました	

		![](InteractiveActorPicker01.png)

	* 「ピック可能な」アクタにマウスをかざすと、カーソルがスポイトで表示されます。

		![](InteractiveActorPicker02.png)

* **カスタム仕様の UV**
	* 頂点シェーダーでマテリアルの UV チャンネルのカスタマイズを有効にする新しい機能がマテリアル エディタに追加されました。  
	* 任意の計算をコストが高いピクセル シェーダーから頂点シェーダーへ移動させることができるため、強力な最適化ツールとなります。
	* 左の図は 8x8 頂点グリッドを持つメッシュ上の CustomizeUV を介して計算した「中心からの距離」です。右は、ピクセルシェーダーの同計算です。  

		![](CustomizedUVs.png)


####ブループリント
* **ブループリント通信**
	* ブループリントは別ブループリントの関数および変数へアクセスが出来るようになりました！
	* パブリックへ公開している関数の変数は、インターフェースを使用せずに、デフォルトで別のブループリントでアクセスが可能になりました。  
	* コードで定義された変数と、ブループリントで定義された変数の違いはなくなりました。全ての変数を利用できます。
	* 以下のブループリントには OpenTheDoor という名前のカスタムイベントがあります。

		![](BlueprintComms02.png)

	* OpenTheDoor イベントは、今後正規の関数呼び出しノードと一緒に呼ばれるようになりました。 

		![](BlueprintComms03.png)

	* **インターフェースからの移行**
		* ブループリントは、以前は関数の呼び出しや別のブループリントの変数へアクセスができなかったことへの対処法として、ブループリント インターフェースを使用していました。もうこの回避策を利用する必要はありません。今後はインターフェースを使用せずに、ブループリントの通信を直接利用した移行を選択されるでしょう。ユーザーのブループリントからインターフェースを削除する新しい機能が追加されました。関数はそのまま使用できます。
		* [Find in Blueprints] （ブループリント エディタでは [Ctrl + F] キー）で、移行を簡単にするメッセージ関数の全ての用途を検索することができます。 


####アニメーション
* **アニメーション リターゲット**
	* このたび、アニメーション リターゲットのサポートが追加されました！ 
	* アニメーション リターゲットとは？
		* アニメーション リターゲットとは、特定キャラクター用に作成したアニメーションを使用して、比率の異なるキャラクターでこれを再生する機能です。 重要な点は、正しく機能させるために、共通のスケルトンを使用しなくてはいけないことです (同一ボーン名と階層)。パインド ポーズのみが異なります。
	* ペルソナ (Persona) の [Skeleton Tree] ウィンドウに設定が可能なボーン移動のリターゲットは 3 種類あります。
		* **スケルトン：**ボーンの移動はターゲット スケルトンのバインド ポーズに由来します。
		* **アニメーション**:ボーンの移動は、不変のアニメーション データに由来します。
		* **アニメーションスケーリング**：ボーンの移動はアニメーション データに由来しますが、スケルトンの比率でスケーリングされます。これはターゲット スケルトンのボーンの長さ (アニメーションが再生中のスケルトン) とソース スケルトン (アニメーションが作成されたスケルトン) との間の比率です。				

			![](AnimationRetargeting01.png)		

		* ビューポートの [Snow] メニューから、「NonRetargeted Animation」と「Bones」をチェックすると、オリジナルアニメーションとリターゲット アニメーションの比較ができます。		

			![](AnimationRetargeting02.png)

		* この視覚化は単一アセットに作用するものですが、アニメーション ブループリントにも作用します。	

			![](AnimationRetargeting03.png)



## 新規追加

#### エディタとツール
* DragDropEvent.GetOperationAs<FMyDragDrop>() で、ドラッグ＆ドロップ操作タイプを簡単にチェックする方法が追加されました。
* ツール ヒントのスコープおよびカスタム設定処理を有効にする OnVisualizeTooltip() イベントが追加されました。
* ブランチ間の頻繁な切り替えが発生した際に、レベルエディタへプロジェクト名を明示的に付与するための「ini」オプションがエディタのユーザー設定に追加されました。
* マテリアル サムネイルにカスタム メッシュ プレビューが追加されました。マテリアル エディタの [Details] パネルでプレビューするメッシュを選択してから、コンテンツ　ブラウザをサムネイル編集モードへ切り替えて、マテリアルのプレビュー　プリミティブをティーポットへ変更します。
* Rocket ユーザーは、エディタからすぐにフィードバックの送信が可能になりました。
* スナップ時に不均等なスケーリングを維持するオプションが追加されました。
* クックパスは、ゲームごとのエディタ環境設定に置かれました。
* コンテンツ ブラウザにフォルダが追加されました。
* [Slate] ウィンドウの隣に細いウィンドウ境界を追加しました。
* シーン内のアクタをピックするために、インタラクティブなアクタに「スポイト」ピッカーが追加されました。
* ノード上の既存グラフ アイコンをクリックすると、グラフビューに単独に表示されます。
* 個々のキーを既存トラックへコピー / 切り取り、貼り付けする際に選択キーが考慮されます。
* フォルダの色を設定するための新規のオプションがコンテンツブラウザにあります。 
* ContentBrowser リストとカラムビューは色を表示するようになりました。
* クラッシュ後のエディタの再起動時に、自動保存からの復元オプションが表示されます。
* マテリアル エディタのスレート グラフ バージョンの使用が可能になりました。
	* コマンドラインに「-oldme」と入力して、旧エディタへアクセスするオプションがデフォルトで有効になっています。
	* 表現式とコメントの位置が一時的に入れ替わります。
	* Static Bool 表現式はプレビュー ウィンドウを表示しなくなりました。
	* Material Input ノードを移動できるようになりました。
	* [ctrl+drag] キーでマテリアルの接続を移動できるようになりました。 
	*  [Enter] キーを押すと検索結果を循環します。
	* マテリアル表現式に代替の検索結果が追加されました。「lerp」と入力して線形補間の検索、[One Minus] には「1-x」、 [Square Root] は「sqrt」と入力します。
	* ノードのタイトルバーから、パラメータ名のブループリント スタイルの編集を有効にします。
* ノードの線をドラッグしなくても接続ができるように、ブループリント スタイルのエディタで [Shift-Click] キー操作によるピンの接続が可能になりました。
* SCC Provider プラグインをオーバーライドするために、コマンドラインへ「-SCCProvider=ProviderPluginName」を追加できるようになりました。
* 高度なグリッドスナップ設定が、 [EditorSettings->General->Preferences->Snap] へ追加されました。
* **UnrealDocTool** 
	* Added NoPublish availability option to keep page from publishing.
	* Added `[RELATIVE:path]` tag which is rendered into proper relative target path for given UDN document path.


#### Blueprints
* **ブループリント通信**  
	* ブループリントへ関数を呼び出したり、別のブループリントのパブリックメンバーへのアクセスが可能になりました。別のブループリントで生成されたクラスの変数を作成することができます。また、その他のクラス同様にこれらのメンバーへアクセスすることができます。この機能をもって、2 つのブループリント間の通信にブループリント インターフェースを使用する必要はなくなりました。不要となったブループリント インターフェースの削除を目的に、ブループリントの [Blueprint Properties] タブからインターフェースを削除する時に、インターフェースと関連のある全ての関数およびイベントをオプションで保存できるようになりました。この操作を行うことによって、実装しているブループリントからインターフェースを削除、インターフェースと関連のある関数とイベントの状態を保つためのオプションを選択、そしてインターフェースに使用している Message ノードを直接 Function Call ノードに接続することができます。全てのインスタンスが更新された後に、ブループリント インターフェースを削除してもかまいません。Message ノードを利用した検索を簡単にするために、 [Find in Blueprints] 機能を使用してください。
* [Find In Any Blueprint] に、[Ctrl+Shift+F] キーバインディングが割り当てられました。
* [Blueprint Components] モードで、ソケット / ボーンを通じてコンポーネントをネイティブ コンポーネン トへアタッチするサポートが追加されました。
* Enumeration (列挙型) をName (名前) またはString (文字列) へ変換することができます。 
* Get number of entries in <Enum> ノードが追加されました。
* Behavior Tree ブループリント ノードが音を立てるように、APawn へ BlueprintCallable PawnMakeNoise 関数が追加されました。
* ブループリントで呼び出しが可能な関数を SceneComponent へ追加しました。Get Num Children Components()、 Get Child Component (インデックス)、 Get Children Components ([Include All Descendants] チェックボックスと一緒に)、そして Get Parent Components が追加されました。
* ブループリント タブにカテゴリが追加されました。
* BlueprintNativeEvents にサポートが追加されました。コールチェーンにネイティブ実装される点を除いて、BlueprintImplementableEvents と似ています。インターフェースで使用すると、BPNE の機能は限定されることに留意してください。これについては今後のリリースノートで言及していきます。


#### ゲームプレイとフレームワーク
* 結合が可能な Begin/End Cusor Over Events を HUD HitBox で利用できるようになりました。 
* ブループリントの Input イベントを、イベントノードのプロパティに指定できるようになりました。親クラスのイベントのバインディングをオーバーライドすべきかどうかを指定します。
* ブループリントの変数、関数、マクロは、参照を格納しているクラスが読み込まれていない間に名前変更がされた場合、参照メンバーの検索に使用される内部 GUID に格納出来るようになりました。GUID ベースのシステムを従来のコンテンツに作用させるには、アセットを再保存しなくてはいけません。
* マルチプレイヤー対応 PIE (Play in Editor)：1 つのプロセスに複数のワールド
* UE4 の 1 つのインスタンス下でマルチプレイヤープレイを行うことができます (接続のために別のインスタンスを起動する代わりに)。
* [Play In Settings] の [Multiplayer] オプションで「Single Process」を選択して有効にします。
* Visual Studio 2013 (VC12)に対する仮サポートを追加しました。
	* WindowsCompiler.VisualStudio2013に WindowsPlatform.Compilerを設定しました（実験的です!)
	*  VS2013のネイティブプロジェクトを取得するために、「"-2013"」を「GenerateProjectFiles.bat」へ渡します（オプション）
	* Visual Studio 2013のコンパイル時は、Windows SDK 8.1 を使用します。
	* サードパーティによるビルドスクリプトはVS2013ライブラリのパスへ更新されます。
	* 今でもWindows XPをターゲットにすることができますが、これは実験的な試みです（WindowsPlatform.SupportWindowsXP=true）。
	* 重要：現時点におけるUE4はVisual Studio 2012のみをサポートしています。コンパイルするにはVisual Studio 2012をインストールしなくてはいけません。2013バージョンは初期試験のためのテスト予備段階です。
	* 重要：サードパーティライブラリはまだVS2013へコンパイルされていないのでリンクできません。 
* UStructs から / へ Json オブジェクトを変換するユーティリティ、JsonUtilities モジュールが追加されました。
* BodySetup とインスタンスあたりの基準両方で「歩行可能」と判断されるフロア法線をオーバーライド出来る機能が追加されました。Allowable settings are:
	* Default (デフォルト) (動作に変化はありません)
	* Increase walkability (歩行範囲の拡大) (通常よりも急斜面な法線を有効にします)
	* Decrease walkability (歩行範囲の縮小) (通常よりも緩やかな法線を無効にします)
	* 注記:現時点の AI navmesh はこれらの設定を無視します。 
* カスタム AI ナビゲーションリンクは、次のパスに作用します (ドア、はしごなど):USmartNavLinkComponent.
* ANavLinkProxy のカスタム AI ナビゲーション リンクにブループリント サポートを追加しました。
* 詳細なパス ファインディング デバッグを ANavigationTestingActor へ追加しました。
* AI リソースのロックに、ソースのロックを表示する一般的なメカニズムを追加しました (動作と頭脳のようなものです)詳細は IAIResourceInterface を参照してください。
* アニメーション リターゲットの向上：スケルトンは、リターゲットとなる複数の基本ポーズをサポートします。
	* 基本ポーズは、スケルトンの別の参照ポーズです。 例えばメッシュの異なるサイズからなど。
	* ユーザーのシステムでリターゲットが使用されると、正確なリターゲットを処理するために、一部のアニメーションは正しい基本ポーズが必要となります (アニメートされたメッシュに基づきます)。  


#### レンダリング
* HZB オクルージョン カリングを追加しました。新規のシステム スケーリングは、以前の HW オクルージョン クエリーに基づいたシステムよりも高いオブジェクト数に適しています。現在はデフォルト設定で無効になっています。「r.HZBOcclusion 1」を有効に設定します。
* 拡張性のために GetRenderingDetailMode() 関数をブループリントに追加しました。
* コンポジットおよびポストプロセス グラフの「r.CompositionGraphDebug」へデバッグ エクスポートを追加しました (yWorks を使用)。グラフはファイルをスクリーンショット フォルダへエクスポートします。  
* **適応サンプリングを用いたライトマス GI ソルバ**
	* 困難なライティング状況でノイズとノイズ漏れを削減します。
	* GI ソルバのアーティファクトを示すマップのソルバ品質を強化するために使用可能な、 IndirectLightingQuality ワールド設定を新規に追加しました。
* **カスタム仕様の UV**
	* 新しいマテリアル プロパティ、NumCustomizedUVs は、頂点シェーダーで実行されるマテリアル入力を公開します。 
	* Customized UV 入力は、演算を頂点シェーダーへ移動することによりマテリアルの最適化に使用します。
* 各拡張グループの CVar は、「ini」ファイルに格納されるようになりました (BaseScalability.ini)。 
* DOF (Depth of field: 被写界深度) と別の透過処理を適用前にマテリアルを描画するために、ポストプロセ スマテリアルの切り込み点として BL_BeforeTranslucency を追加しました。
* より実用的な代替 x および y スケール値として、ワールド単位で定義されたおおよその TextComponents サイズが使用できるようになりました。
* 現在の EyeAdaptation 値は、ポストプロセス マテリアルをマテリアル表現式で公開するるようになりました。 Utility->EyeAdaptationSM5 のみでサポートされています。
* マテリアル インスタンスで OpacityClipMaskValue、 BlendMode、 TwoSided そして LightingModel プロパティのオーバーライドが可能になりました。
* MaterialQualityLevel がマテリアル表現式で公開されるようになりました。
* [Rendering Detail] モードをパーティクルごとに指定できるようになりました。
* Axis Lock モジュールが GPU パーティクル エミッタでサポートされるようになりました。
* SetEmitterEnable 関数を使用して、 パーティクル サブエミッタをブループリントから有効または無効にできるようになりました。
* r.UpsampleQuality コンソール変数を追加しました。 
	* より小さなスクリーンからアップスケーリングする時の 4 つの品質値の範囲です。
* **Automatic Lightmass Importance ボリューム**
	* LightmassImportanceVolumes が存在しない場合、ユーザーのシーンと結合する合成ボリュームが使用されます。
	* ユーザーが ALightmassImportanceVolume をごく簡単なシーンへ配置しないことが目的です。
	* 「automatic volume」の範囲は 100m にクランプされます (MinimumImportanceVolumeExtentWithoutWarning)。
	* Importance Volume が存在しない場合は警告の記録をログに取りますが、シーンがこの閾値を超えた場合は UI 警告のみを表示します。
	* MinimumImportanceVolumeExtentWithoutWarning の extent 値を 50m から 100m へ増加しました。


#### アニメーション
* [Ctrl-C/Ctrl-V] キー、またはスケルトン ツリーのコンテクスト メニュー アイテムから、ソケット用のコピーおよび貼り付け機能をペルソナに追加しました。複数のソケットを一度にコピーして、ボーンへ貼り付けることができます。
* フロアを上下に移動させる [Floor Height Offset] ボックスがペルソナの [Viewport] メニューに追加されました。メッシュごとに保存します。


#### コア
* TAssetPtr -> UObject から負荷時に自動変換が追加されました。
* TMap と TArray には設置サポートに制限があるため、コピーせずにコンテナへ直接エレメントを構築することができます。
	* 単一引数コンストラクタと一緒にクラスを処理する際は、コピーのコンストラクタ呼出しを回避するために、「.Add」の代わりに「Map.Emplace」と「Array.Emplace」を使用します。
* TMap 値は演算子を利用して読み出すことができます[]。
	* ValueType& Val = Map[Key];
	* 「std::map」とは異なり、これは const コンテナで使用が可能で、キーが存在しない場合は新しいエレメントを挿入しません。その代りアサートします。
* 複数の文字列を簡単に可視化するために、 FName と FString が [string view] ダイアログをサポートするようになりました。
* ラムダと一緒に使用ができる、新しい関手ベースの関数が TArray に追加されました。
	* IndexOfByPredicate: 述語でエレメントの見出しを検索します。
	* ContainsByPredicate: 述語と一致するエレメントがあるかテストします。
* デバッガビジュアライザは「GenerateProjectFiles.bat」で自動的にインストールされます。
* UFUNCTION 指定子がデリゲートの UFunction へ渡されるように UDELEGATE が追加されました。
	* UDELEGATE がない古いタイプもまだサポートしています。
	* 例:
	* UDELEGATE(<specifiers>)
	* DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam( FDelegate, float, Var );
* DOREPARRAY と TArrays は連携しなくなりました。
	* 代わりに DOREPTARRAY を使用します。
* FVector::Dot2D の名前が変更されました。
	* この関数の名前は、関数の動作を適切に表現していませんでした。
	* FVector::CosineAngle2D を代わりに使用します。
* 空の TArray へインデックスを付けると常にエラーとなります
	* &Array[0] の回避策が原因で一部のエラーは報告されていません。
	* この種の使用法は、Array.GetTypedArray() と置き換えなくてはいけません。


#### プラットフォーム
* ライブラリのバッチの再コンパイルを単純化するために BuildThirdPartyLibs UAT スクリプトが追加されました (全てのライブラリが有効にされたわけではありません。バッチファイルの設定方はスクリプトを参照してください)。
* 「.uplugin」ファイルへホワイトリストとブラックリストを追加しました (WindowsMoviePlayer.upluginから例を確認してください)。
* **Android**
	* メインブランチの初期のAndroidサポートは、DXTと PVRTCデバイスをサポートします。
* アンリアル プロジェクト ファイルに Mac OS X Services インテグレーションを追加しました。 「.uproject」ファイルの選択時に [Service Menu]、もしくは Finder のコンテクスト メニューからゲームまたは生成した Xcode プロジェクト ファイルを起動できるようになりました。  
* UE4 の共有コンテナと文字列タイプに LLDB データフォーマッターを実装しました。ユーザーの「~/.lldbinit」へ「command script import UE4/Engine/Extras/LLDBDataFormatters/UE4DataFormatters.py」を追加します。

#### Networking
* **ネットワーク アクタ リスト**                                           
	* 単独のネットワークアクタリストで、向上したパフォーマンスのネットワークに関連したアクタを追跡するようになりました。.
* **レプリケーションの最適化**                           
	* パフォーマンスとセキュリティを考慮して、下層のプロパティ レプリケーション ロジックを徹底的に書き直しました。
* **接続全域に渡るワークシェアー**              
	*  接続全域に渡って共有するレプリケーション ロジックの能力
* **Lifetime プロパティ **                                        
	* パフォーマンス向上のためにプロパティを登録する新しい方法。
* **ライフタイム プロパティの条件**                     
	* ライフタイムにレプリケートされたプロパティに二次的な条件を適用する能力。
* **プロパティ チェックサム**                                       
	* クライアントとサーバーの非同期状況を診断するためにプロパティ チェックサムをトグルする能力。


#### オンライン
* 別のサブシステムが利用不可、または意図的にオフにされている時は、OnlineSubsystemNULL がフォールバックです。
	* ゲームコードはオンライン関数を継続的に呼出し、実際のオンラインコミュニケーションをせずにコールバックを取得します。
* オンライン サブシステムに新規の OnlineMessage インターフェースを追加しました。
	* ユーザーのインボックスに列挙型のメッセージを有効にします
	* ID でメッセージをダウンロードすることができます。
	* あるユーザーから別のユーザーへメッセージを送信することができます。
	* 個々のメッセージは削除できます。
	* 順応性のあるペイロードを有効にするために、メッセージペイロードはバリアント データ タイプへ文字列のキー値ペアとして符号化されています
	* 現時点では Mcp OSS のみに実装しています。
* オンライン サブシステムの OnlineUser インターフェースのリファクタリングです。
	* Mcp OSS 実装を追加しました。
* オンライ ンサブシステムの OnlineFriends インターフェースをリファクタリングしました。
	* 従来の OSS 実装を更新しました。Steam PC、 PS4、 Facebook iOS/PC、 Gamecenter iOS、 Amazon PC
	* Steam 実装は各読み込み時にフレンズリストをキャッシュするようになりました。
	* 新規の Mcp OSS 実装を追加しました。
		* 名前が付けられたフレンズリスト上で操作が可能です。
	* デフォルト設定のフレンズリストに招待を送信するために、ユーザー ID のリストを受け取る exec コマンド "SENDINVITES" を追加しました。
* Engine モジュールの依存を削除するために OnlineSubsystem をリファクタリングしました。
	* エンジン依存は全て OnlineSubsystemUtils モジュールにあります。
* ソースファイルからMcpコンフィグをリファクタリングしました。


##アップグレード ノート

#### エディタとツール
* The World Settings now have their own tab (separate from Details tab).
* **Slate** 
	* Sounds in Slate now use FSlateSound rather than FName; the use of FName to store sound names in Slate is deprecated.
	* You can temporarily fix code using FSlateSound::FromName_DEPRECATED.
	* The correct fix is to use a Slate Widget Style to hold any sounds you want Slate to play.
	* SHyperlink is no longer templated.Simply use delegate payloads for passing user data.
* Slate TAttributes now do a better job of enforcing const-ness.It is never OK to have a side-effect inside a Slate TAttribute. 
* SPropertyEditorNumeric, SSpinBox, SNumericEntryBox are generic now and can be parameterized by any numeric type.
* Changed the icons and colors of the Viewport Transform toolbar.
* Added a Content Browser content menu action to create a Slate Brush Asset from a Texture2D.
* Added WYSIWYG SlateBrush preview to properties editor.
* Content browser filters can now be removed by MMB-clicking on them.
* **UnrealDocTool** 
	* Automatically generated header IDs and bookmark names are now lower case and with '(' and ')' replaced by '_'.
* **Plugins**
	* The list of project plug-ins was moved from Game.ini to Engine.ini


#### Blueprints
* Blueprint macros now check for duplicate variable names.
* Encompassed blueprint nodes now attach to a comment box without having to first deselect the comment.
* Macros can now be dragged from My Blueprint into a Graph.
* Added a call to reset the MyBlueprint search filter before adding any new element, so the new element is visible once created.
* The Vector2D blueprint graph actions were moved into the Vector2D category splitting it out from the standard vector class.
* The Alpha section of the color picker has been enabled on blueprint graph color pins.
* The ability to create a comment around selection has been added to the node context menu in the editors.
* The Details view for the socket component was updated so the category is placed correctly and is always visible in the blueprint editor.
* The ability to locate variable uses for any variable based node was added to the context menu in the blueprint editor.
* The graphs general node culling was changed to be more accurate and take account of node widths/heights.
* The class picker dialog has been made to expand to be larger and the default class selection area is now collapsable.
* Blueprint functions and events now use more descriptive/better formatted names.
* Blueprint node renaming now no longer centers the selected node if its title is already visible.


#### ゲームプレイとフレームワーク
* Split out some behavior of USpringArmComponent into multiple virtuals to make it easier to override in subclasses.
* New class flag added to allow config writes to NOT compare against the file hierarchy when flushed.
* Removed BlueprintProtected from HUD draw calls, in exchange for a warning when they are used outside of DrawHUD.
* Added BlueprintType and BlueprintReadWrite to a number of properties on FPostProcessSettings.
* UPlayerInput::ExecBindings have been renamed DebugExecBindings and will be compiled out of shipping builds.
* UWorldFromContextGetter::GetWorldFromContextObject now takes a bool reference variable to distinguish between situations where the class of the Object passed in is unsupported and where the supported Object simply is returning a NULL UWorld pointer.
* AActor::CustomTimeDilation is now properly applied to the DeltaTime passed to all Components.Any Component which was manually applying the CustomTimeDilation will now have it applied twice. 
* **Changes to UEngine functions**
	* Use AActor::GetNetMode() or UWorld::GetNetMode() instead of GEngine->GetNetMode()
	* Use AActor::GetNetDriver() or UWorld::GetNetDriver() instead of GEngine->GetNetDriver()
* **Many other GEngine functions now take a required UWorld**
	* GEngine->GetLocalPlayerIterator( GetWorld() );
	* GEngine->GetGamePlayers( GetWorld() );
	* GEngine->GetGamePlayers( GetWorld() );
	* GEngine->GetGamePlayer( GetWorld(), PlayerIndex );
	* GEngine->GetFirstGamePlayer( GetWorld() ) const;
* Pathfollowing's default behavior improvements.Most importantly default "acceptance radius" is now Agent's radius instead of previously used 0. 0 is still a valid value.


#### レンダリング
* Lighting needs to be rebuilt for all maps.
* Lowered LOD scalability restrictions to be more useful. (some defaults might need an update).


#### アニメーション
* Added another phase ValidateAnimNodePostCompile to anim graph nodes, which is called at the very end of compilation, in case nodes (only ones that contributed to the final class) want to validate something against the final CDO.
* Prevented transition pose evaluator nodes from showing up as a placeable option in the menu and allowed them to be deleted if they were inadvertently placed in the wrong graph (they're autocreated where necessary).
* Added support for object references on togglable anim pins.


#### コア
* Log output has changed to using UTC tags.
	* Any tools which parses log output needs to be aware of this change.
	* The old format is still supported by passing -logtimesincestart at the command line.
* Changes to replicated parameters.
	* Non-const reference TArrays should be passed by const reference to indicate that the results are not replicated back.
	* FStrings should be passed by const-reference, not value.
* 'placeable' specifier on UCLASS declarations has been removed.
	* Classes are now placeable by default.
	* A class can have the 'notplaceable' specifier added it to stop it and its descendants being placeable.
	* A class marked as 'abstract' is also non-placeable, but this doesn't affect the placeability of its descendants.
* Explicit registration of archive custom versions is now needed.
	* If a particular class wishes to use Ar.CustomVer(Guid) in its Serialize function, then it should make a Ar.UsingCustomVersion(Guid) call first to inform the archive that the object depends on that custom version.
	* That Guid must have already been registered via an FCustomVersionRegistration global object.

		For example:

			void MyObject::Serialize(FArchive& Ar)
			{
				Ar.UsingCustomVersion(MyGuid);
				Ar << Member;
				if (Ar.CustomVer(MyGuid) >= EMyObjectCustomVer::ThingAdded)
				{
					Ar << Thing;
				}
			} 

* A missing call to Ar.UsingCustomVersion before using CustomVer will cause an assert.
* TArray::SetNum now uses the default constructor when Num is increasing.
	* Types must have default constructors to continue to use this call.
	* The old zeroing behavior can be achieved via the new SetNumZeroed function.
* FCrc::MemCrc, FCrc::StrCrc and FCrc::StrCrcCaps have been deprecated.
	* FCrc::MemCrc32 should be used if possible, as this give the results that would normally be expected from a CRC32 algorithm.
	* FCrc::MemCrc_DEPRECATED and FCrc::StrCrc_DEPRECATED should be used if you are dependent on the old results.
	* FCrc::StrCrc32 still gives a char-type-independent CRC for a string, and so doesn't necessarily give expected results, but it uses the new string tables.
	* FCrc::StrCrcCaps(*Str) can be replaced with FCrc::StrCrc_DEPRECATED(*Str.ToUpper()).
* AVolume has been made abstract.
	* Existing Volume instances within maps will cause ensure-failures at load time.
	* They should be converted to a non-abstract type (e.g. BlockingVolume) using the editor's Convert feature to change an instance's class.
* When using IncrediBuild, the 64-bit version of XGE is expected to be available (back out CL # 1892517 if you are still using 32-bit)
* LTCG is now enabled for shipping/test Windows targets by default.
	* Pass "-noLTCG" to build command-line to disable it, or set BuildConfiguration.bAllowLTCG=false
* UObject C++ headers no longer need to be in a "Classes" subdirectory!
	* Classes directory is no longer needed, but we are backwards compatible.
	* UObject headers outside of "Classes" are never included in *Classes.h generated group headers. 
		* Instead, you should always include these headers yourself!(We are starting to deprecate *Classes.h files)
	* UObject headers in "Classes" or "Public" folders cannot depend on private UObject classes.
	* You no longer need to include UObject headers manually before including a module's *.generated.inl file.
		* Generated.inl files now auto-include their dependent UObject headers.
	* Private module source files no longer need to be placed under a "Private" folder.
		* Now, all source is assumed Private unless it's under a "Public" folder somewhere!
		* This means you can have all of your game source in a single folder if you want.
* ObjectVersion.cpp and Version.h will no longer be checked into P4 with other build products.Only build.properties will be updated with the latest engine version.
	* This means that GEngineVersion in local builds will always be set to 0.I made sure this is going to work.Packages saved with 0 engine version can be loaded just fine by the engine (although with a warning from the loading code) and are assumed to be compatible with everything (note that we still save packages with the latest package version which we check against when loading).
* Updates to checkAtCompileTime and STRUCT_OFFSET
	* checkAtCompileTime uses static_assert on all platforms.
	* Provides better diagnostic messages on clang and leverages standard support, which is more likely to be stable.
	* STRUCT_OFFSET uses offsetof on all platforms.
	* We should be using standard support when at all possible.
	* -Wno-invalid-offsetof thrown on all gcc/clang platforms.
	* Because we use offsetof on non-POD types all over the engine, and essentially rely on it working.


#### プラットフォーム
* **iOS**
	* Repaired IPP codesigning capabilities (missing intermediate pems) and added a more informative error message in case the pems go missing again.
	* Changed icon discovery to grab everything from Engine/Build/IOS/Resources, and the game can override whatever it needs.
	* Enabled IPhone5 aspect ratio!
	* Added all possible icons to Engine/Build/IOS/Resources and updated Engine/Build/IOS/UE4Game-Info.plist to match - ALL EXISTING WERE RENAMED!
	* If a game doesn't have a .plist file, it will fall back to Engine/Build/IOS/UE4Game-Info.plist, putting the executable name into the Bundle identifier.
* Steam SDK updated to v1.26
* Replaced the cooker's PackagesToAlwaysCook delegate with FCookModificationDelegate (see GameDelegates.h).
* Renamed -onethread to -nothreading (-singlethread remains the same).


## 今後の追加事項と継続事項

#### エディタとツール
* The seconds per cycle stat is now properly being recorded in ue4stats files.Opening a profile on different machines now shows the same numbers.
* uprojects are now properly loaded in non-editor builds.
* The log is now flushed before a crash in Linux.
* Asset discovery time should be slightly faster.
* Removed a placeholder class with an exceptionally long name in a deep path which was causing build problems in some build environments.
* Added support to query for ancestor class names in the asset registry.The list is formed whether or not any of the parent classes are loaded.
* Replaced the PREFETCH and PREFETCH_CONSOLE macros with a new platform function:FPlatformMisc::Prefetch.
* The visual studio debugging visualizer now works with FNames in monolithic builds.
* BuildThirdPartyLib for Recast will now also build linux.
* If a redirector is referenced by an unloaded map while it is being fixed up, the error message will now report which map is referencing it.Same for code packages.
* Async recast navmesh building can now be enabled or disabled on a per-target basis.
* You can now specify multiple client/server targets when using UAT to cook.
* An actor's tick functions are now unregistered immediately upon destroy.Destroyed actors do not tick anyway because they have RF_PendingKill.
* Accounted for unconventional P4 client roots (this prevented diffing & history from working)
* Re-instated auto-population of server & username for Perforce login.
* Added new widget overlay to tutorial system.
* Prevented new assets & folders from being created in the Classes folder.
* Prevented empty preview mesh paths from causing an AutomationTest warning.
* Source control login now correctly denied when specifying an invalid workspace.
* Prevented main window z-order from being affected by notifications.
* Assets checked out by others are now correctly handled by "Submit to Source Control".
* Stopped relying on manual mapping from depot->p4 workspace. (fixes issues with history & diff)
* Migrating files now adds them to source control if possible.
* Prevented source control from spamming file status when using content browser.
* Added background task to properly check for files to submit.
* Made the source control login dialog more friendly.
* Prevented content browser from trying to request SCC state for built-in packages.
* Prevented submit dialog from resizing when scrolling.
* 'Use Selected' now moved to sub-menu for Actor properties.
* Allowed cancellation of Perforce operations at any time.
* **World Browser**
	* World origin shifting now uses PhysX3.3 builtin function to shift physics actors.
	* Added LOD support for a streaming levels.
	* Added details panel for level tiles.Streaming levels view was removed, since details panel provides similar functionality.
	* Added 'Refresh' command (F5) which rescans world folder and updates World Browser cached data.
	* Added ZOrder to a level tile properties which defines tile sorting order.
* Don't display content browser move/copy menu when dragging a class.
* Loading screen message no longer flickers.
* Tooltip for world/local coordinate button now appears.
* Check if circular linked poses by checking against reentry.
* AddEvent now displays the correct actor label.
* Moved FColorTheme implemenation out of header, and cleaned up bad tabs caused by merge from previous checkin.
* Additional Data now has icon in static mesh editor.
* Various minor improvements and tweaks to the texture editor useability.
* Errors that occur due to incorrect editor modes can now specify why and how they are displayed.
* OnResetToDefaultClicked delegate now fires when resetting to base material.
* InteractiveTutorials is null, unless also launching with -interactivetutorials on the commandline.
* Map is no longer marked as dirty if it needs its lighting rebuilt.
* Guard against tabbing when there's no child to tab to.
* Prevent crash when spam spawning static meshesh.
* Editor no longer closes when creating a new code project.
* InsertDocumentTab now spawns a tab if it can't find the one to insert alongside.
* Make sure we're using absolute paths when opening a solution from the editor.
* Suggestion box now disappears on focus loss.
* Emitter color picker is no longer modal.
* Color Theme now displays appropriate text when in dropdown.
* Bad tab/malformed ids no longer crash the editor.
* 'Convert meshes' no longer flags error due source control "error."
* MessageLog now either defaults to the first entry, or the last log the user viewed.
* Added automatic selection and activation of sole or first asset if none is currently selected on pressing Enter to Asset Picker.
* Added check to New Project wizard to make sure that the folder path is validly formatted for the platform.
* Material Selection:Filtering broko when typing quickly so removed the bShouldNotifyNextAssetSync flag which seemed to exist only to cause it to automatically select an asset if it was still loading others.
* The Asset Saving notification when clicking "Choose Files to Save" looked too much like an error, changed to Notification, and modified the text for clarity.
* It was difficult to remove a level from Favorites.Entries in the favorite list could only be added/removed when the level list was open, removed that requirement and moved open/removing to a sub-menu, also fixed inconsistent internal entry naming bug.
* Normal Map Textures automatically reimported were corrupted due to combined use of Defer Compression & compatibility mode DXT5n normal maps, added swizzled XGXR8 mode for uncompressed deferred normal maps.
* Window Management:On creating a new tab, or otherwise updating it by selecting another tab under a window, change the title to that tabs label unless it's the master/root window which always retains the "map - Unreal Editor" naming scheme.
* Add an optional Cancel button to the auto-saving progress widget.
* Content Browser:Could create a Shared or Private collection because the test enabling shared or private collections was only being evaluated after the collections context menu (right-click) was being created.
* Attached grouped actors did not translate properly becuase they were having deltas for translation, rotation & scaling applied multiple times.Added a check to prevent parented actors being modified by the group actor.
* Updated the level editor context menu to add actors from factories which use the bShowInEditorQuickMenu flag on the factory.
* Prevented a crash caused by cross-project migrated levels world settings not existing in the new project, by creating new world settings for it in the current project.
* Changing the visibility of sub-levels from the level browser dirtied the sub-level umap files.Reset the dirty flag if all we're doing is changing the visibility of the level within the Editor.
* Creating a collection from referenced objects in the content browser produced a collection entitled "u_pattern_syntax_error" due to a Null folder in the specified path so corrected the path construction.
* Changed some of the heading sub-categories to be more descriptive.
* Details panel now contains Expand All Categories / Collapse All Categories visibility menu options.
* F1 now behaves context-sensitively on asset editors.
* The scene outliner is now sortable.
* **Slate**
	* SComboBox and SComboButton now use a Slate Widget Style and are no longer dependent on FEditorStyle.
	* Tabs can now flash when they want attention.
* Delegates are now available for when a PIE or SIE session is paused, resumed, or stepped (in addition to the existing ones for start and stop).
* You are now warned of invalid characters when naming a new asset.
* The auto-save now only runs when things have changed since the last auto-save.
* The Content Browser column view has been updated to display asset SCC and dirty states.
* Improvements to non-modal color pickers.
	* Undo/redo fully supported.
	* Changes to color properties are previewed interactively on the object.
* Removing FEditorStyle from all core slate widgets.
	* This is still in progress but several widget classes have been completed.
* New engine analytics to track editor usage in the following areas:
	* Play-in-editor usage.
	* Blueprint creation (parent class, type, creation method).
	* Docking tab and window usage.
	* Pawns added directly to levels.
	* Blueprint context menu usage.
	* BSP brush usage.
* SoundCue Editor's 'Result' Node renamed to 'Output'.
* Double clicking SoundWave will now display its properties.
* Prevented Curve Editor from applying previously selected key's position to newly selected key.
* Warning shown when creating potentially dangerous combinations of Sound Classes and Sound Mixes.
* Sound Nodes added to the input of an existing connection will now auto connect.
* Material Editor nodes now update in realtime when live update is enabled.
* Performance of Slate Material Editor improved.
* Material Editor nodes are now more compact.
* Dragging and dropping into Material Editor can now be undone.
* Material Result node now shows correct inputs.
* Changes to Material Node and Comment positions now prompt the user to apply changes.
* Dynamic Parameter names now update when changed.
* Greyed out pins now have greyed out text on Material Input node.
* Custom settings are retained when reimporting sounds.
* TActorIterator now uses GetObjectsOfClass to find actors to iterate over.
* "Allow Translucent Selection" now defaults to on (based on usability feedback).
* Default "template" maps (available when using File -> New in editor) have been further simplified.
* Added termination logic for internationalization.No longer see a false (meaningless) positive for memory leaks from the system.
* Internationalization system no longer always loads game data.
* Non-Windows platforms now handle graves and apostrophes (` and ') properly in localized formatting pattern strings.
* Localization data gathering from assets features improved reporting of collisions.
* Improved navigation menu in the Settings UI.
* **Play-In-Editor** 
	* Improved window layout algorithm to use screen real estate more efficiently in multiplayer-PIE.


#### Blueprints
* Variable tooltips will appear when mousing over the item in the My Blueprint panel and when mousing over "Get" nodes.
* When dragging off an input array pin, user will be offered to add a "Make Array" node.
* Find in Blueprint will no longer have issues searching due to spaces in the search term vs the results.
* Double clicking on a parent graph in the MyBlueprint window will not collapse it or expand it.
* Adjusted how the navigating Blueprint graphs.
	* Double clicking on a function or macro graph in the graph panel will open a new tab (or focus on an already opened instance) instead of reusing the current tab.
	* Double clicking in the Find Results window will open the graph in a new tab (or focus on an already opened instance) instead of reusing the current tab.
	* Double clicking on a collapsed graph in the graph panel will reuse the current tab.
* Hid a few Make/Break Struct nodes that had native versions.
* Put in more protection to prevent duplicate timeline, member variable, and function graph names between parent and child Blueprints.
* Creating skeletons from skeletal meshes and materials from textures will give the new asset a default unique name.
* When creating a Blueprint from selected actors, the dialog gives the option of inputing a name.
* Added tooltips to all component classes.
* Added Make/Break for struct nodes to blueprint palette.
* Improved blueprint search so comments are searched where possible.
* Revised code that autoselects in blueprint palette/context menu to provide more desirable results.
* Improved keyboard handling of blueprint context menu.
* Find in Blueprint will no longer have issues searching due to spaces in the search term vs the results.
* Add 'open in new tab' to My Blueprint context menu.

#### ゲームプレイとフレームワーク
* Comment clean up for game framework engine classes.
* Removed obsolete properties and methods from game framework engine classes.
* Removed obsolete UWorld property RealTimeToUnPause.
* Removed obsolete PlayerController property MaxResponseTime.
* Removed obsolete PlayerController method ConditionalPause().
* Removed a  bunch of obsolete networking stats related properties from PlayerState.
* Removed unused HUDCanvasScale property from HUD and HudSettings classes.
* Removed unused FailedSpawnMessage property from UEngineMessage.
* Removed StreamingPauseIcon property from GameMode.Wrong place for it- client will crash if it tries to use it.
* Removed unused GameMessageClass properties from GameMode and PlayerState.
* **Input system improvements**
	* Input delegates are now guaranteed to execute in the order the keys were pressed/released when occurring within a single frame.
	* An input delegate can now be dispatched multiple times in a single frame if it is pressed and release and re-pressed within a single frame.
	* Paired input actions (these are actions for which both a pressed and released are bound) now manage a down state such that if multiple keys are bound to that action the first one pressed captures it and any press or release events by non-capturing keys will be ignored until the capturing key is released.So a few examples where A and B are mapped to an action that has both a pressed and released delegate bound. 
		* Example 1:
		* A is pressed and captures the action, pressed delegate IS dispatched. 
		* B is pressed, A has capture so the pressed delegate IS NOT dispatched. 
		* B is released, B did not have capture so the released delegate IS NOT dispatched.
		* A is released, A did have capture so the released delegate IS dispatched.
		* Example 2:
		* A is pressed and captures the action, pressed delegate IS dispatched.
		* B is pressed, A has capture so the pressed delegate IS NOT dispatched.
		* A is released, A has capture so the released delegate IS dispatched.
		* A is pressed again, there is no capture so A captures and the pressed delegate IS dispatched.
		* A is released, as previously released delegate IS dispatched
		* B is released, B did not have capture so the released delegate IS NOT dispatched.
* Load Stream Level and Unload Stream Level can be called from any blueprint, not just level blueprint.
* The Controller for a Pawn placed in a streamed in level will now be spawned in the streamed level, not the persistent level.
* HUD is now initialized before BeginPlay so as to be available for manipulation during BeginPlay.
* **Oculus Rift Integration**  
	* There have been several improvements and bug fixes to Oculus Rift support, including fixes to certain post process and screen-space effects that previously did not render when in stereoscopic view.
* All new game template projects now have a simplified source file layout.
* Moving Platformergame into Samples as a code-based SampleGames directory test.
	* We'll make an effort to move all code-based example games from the main directory down into a new Games subdirectory under Samples.Games will be the current SampleGames folder renamed. (e.g. CURRENTLY  //depot/UE4/PlatformerGame/ ? //depot/UE4/Samples/SampleGames/PlatformerGame/ )  (The final location being something like //depot/UE4/Samples/Games/PlatformerGame/)
* Trying to return a value from a RPC Client/Server function is now detected as a compile error.
* **Component movement optimizations**
	* Repeated calls to MoveComponent can defer most of the work until the sequence of moves is committed, by encapsulating the MoveComponent calls within a FScopedMovementUpdate() object.
	* Moves within this scope will avoid updates such as UpdateBounds(), OnUpdateTransform(), UpdatePhysicsVolume(), UpdateChildTransforms() etc, until the move is committed (which happens when the Scope goes out of context).
	* A stack of scoped updates is supported, and the move is not committed until the final scope is finished.
	* The current scope of moves can be reverted, which will restore the position to the initial position at the start of that scope.
* **CharacterMovementComponent optimizations**
	* Scoped movement updates are enabled for movement performed by UCharacterMovementComponent, for a 2x to 3x performance increase in character movement in most cases.
	* Movement along ramps no longer uses the StepUp() function, but moves parallel to the surface instead, reducing the number of sweeps required.Ramps are the preferred content solution for stairs where practical.
* **CharacterMovementComponent improvements**
	* StepUp() functionality is now more consistent
	* Simulated movement is more in line with actual movement in terms of floor checks.
	* Simulated movement now slides smoothly up walkable ramps instead of treating them as vertical barriers.
	* Allow velocity to exceed max velocity in all movement modes (from external forces), rather than clamping immediately to the max velocity.Friction and braking are now applied when velocity exceeds the max.
	* Added param to control whether ground movement on non-horizontal surfaces maintains the velocity as if it was horizontal, or whether velocity is maintained parallel to the surface.
* Text is now correctly trimmed when using BP blend nodes.
* Changed default bone attachment coord space to local from world.
* Modified the particle anim notify UAsset to support non-attached particle spawning.
* Widget in PHat no longer disappears after editing.
* Notifies now support a dropdown list when editing the attach point.
* Saving in Persona now only attempts to save modified assets.
* Kismet Init and UpdateAnim events now have tool tips.
* Added a new menu entry to manage notifies to allow deletion of custom notifies.
* Behavior Trees core and tools are still WIP.
* Animation System Improvement
	* Physics Animation:Added BlueprintCallable Physics Weight functions SetPhysicsWeight/AccumulatePhysicsWeight
	* BlendSpace Node allows to set Position/Looping via Pin.
	* IK node displays effector/joint location.
* Physics:Default setting has been tweaked to improve ragdoll.
* Optimization:Dedicated server optimization by disabling physics/tick.


#### レンダリング
* Added GPUIndex to HardwareSurvey (quick run with lower confidence for faster startup).
* Experimental screen space subsurface scattering using alpha scene color alpha channel to separate out specular, very minor cost for most passes and if using a 32bit format we don't have it enabled.
* Added ECVF_Scalability to document if a cvar can be used as scalability option.
* Added scalability r.TonemapperQuality (noise to fight color quantization only for higher specs).
* Added typed console variable for better performance and thread safety when using in RT and GT.
* Text render actors now have an anchor sprite for easy selection.
* Exposure menu options have been tidied up.Post process exposure controls have been renamed and regrouped under "Auto Exposure".
* The editor now starts up in high detail mode, not medium.
* Added  r.SceneRenderTargetResizeMethod
	* Controls memory usage technique for scene render targets.
* Creating material expression nodes which include textures now have the default texture selected.
* Optimized UIBlur rendering.
	* Renders only the sections requested (instead of whole screen).
* Moved most CVars to a new type specific format, affording much faster access.
 
 
#### アニメーション
* Persona now detects if you drop an asset onto a mesh socket and attaches to the mesh, rather than the skeleton.
* Descriptive tooltips added for all Skeletal Control and Blend Pose Blueprint nodes.
* When simulating in PhAT, an onscreen message now tells the user they can use Ctrl-RightMouse to interact with objects.
* Unused code removed from skeleton compression functions.


#### コア
* Modified the binary file versioning scheme so that it is based on the engine version.
* UnrealHeaderTool now ignores all unrecognized #pragmas, so it won't baulk when encountering things like #pragma region.
* HeaderGroups are slowly being removed in a move towards removing the feature; the on-going use of headergroups should stop.
* **Build System** 
	* Added new 'bPrintPerformanceInfo' diagnostic variable to UnrealBuildTool.
* Added AssetUserData support to ULevel (allows plugins to extend Levels with their custom payloads).
* "Hot Reload" of C++ code has been improved to be more reliable.


#### プラットフォーム
* Improved Linux support (DWARF is now parsed to get proper callstacks, platform abstraction layer extended to cover process management, HTTP module enhancements).
* Made sure all Editor windows are listed in the Dock menu on Mac OS X.
* Stopped Editor windows disappearing when placed on a secondary monitor in Mac OS X Mavericks new Space per-display multi-monitor mode.
* Improvements to mouse drag handling in some Editor modes to reduce snapping & hyper-acceleration.
* Added support for opening Unreal Projects by double-clicking them on Mac OS X.
* Enabled Subversion support for Mac OS X, using Xcode's copy of Subversion.
* Implemented Mac OS X support for creating movie files in Matinee.
* Tweaked CoreAudio reverb on Mac OS X to sound more like the other implementations.
* Brought the standalone OpenGL renderer for Slate into line with the Direct3D version.
* Early support for simulator, next QA build after this will make it easy to switch between both.


#### Networking
* Security improvements
* Lifetime properties
* Replication performance


#### オンライン
* Stability improvements to the online beacons code.
* Beacon actors weren't destroyed when no longer needed.
* Fixed potential exploit where beacon communication could spawn infinite actors.
* Stability improvements to the online sessions API.
* Sessions API now includes a "Destroying" state to differentiate itself from ending/ended states.
* General online async task cleanup (templatized functions / code reuse).
* All online interface shared pointers are now thread safe.
* Steam with LAN should now work properly.
* Removed redundant online search keys that have existing online setting keys.
* Added network byte order serialization support for FOnlineKeyValuePairs<FString,VariantType> data.
* Mcp OSS
	* Added mcp account mapping tests.
		* Exec via "QUERYMAPPINGS <list of ids>"
	* Refactored Mcp configs into embedded source files.                                                   
		* Can also still use ini values in defaultengine.ini for development.
		* Games can override configurations using a callback delegate.
* Http
* Fixed http request pointer being destroyed after request completion delegate was triggered.
	* This had broken "chaining" of http requests by not being able to re-use the same request over and over from teh completion delegate.


## 既知の問題
* Warnings on Performance Capture test.
* Fracturing an imported .APB destructible mesh causes more than expected number of fractures. 
* FOLIAGE:No visible brush.
* Scaling with the widget stops and sticks at zero.
* ELEMENTAL:Materials on cliff are showing up as black.
* Error Failed import:EdGraph /Engine/EditorBlueprintResources/StandardMacros.StandardMacros:Do N
* PLATFORMERGAME:2nd elevator jumps when player is halfway through it.
* QAGAME:CRASH:Opening TraceTest.umap
* SHOOTERGAME:Bot AI is causing enemies to run around without firing or stand still for periods of time.
* SHOOTERGAME:ENSURE:Starting a match with bots.
* XboxOne:All TextRenderActors are artifacting.
* ROCKET:Mac:Xcode:Unable to launch Game.app
* ROCKET:Mac:CONTENT EXAMPLES:Spawn outside map on Blueprint_HUD.



