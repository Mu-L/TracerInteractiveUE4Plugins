INTSourceChangelist:6537038
Title: 2013年7月版本说明
Crumbs:%ROOT%, Support/Builds
Description:
Availability:Licensee
Parent:Support/Builds
Order:-7
Order: 51

[TOC(start:2 end:2)]

## 版本信息


[REGION:simpletable]
| 项目| 信息|
| ----| ----|
| **标签**| QA_APPROVED_UE4_BUILD_2013_07|
| **变更列表编号**| 1735924|
| **VISUAL STUDIO 版本**| Microsoft Visual Studio 2010 版本 10.0.40219.1 SP1 Rel|
| **DIRECTX**| 2010 年 6 月|
[/REGION]

## 重要信息

 * 当前引擎开发路线图：[虚幻引擎4 路线图](https://udn.unrealengine.com/questions/topics/roadmap.html)
 * QA 版本目录更改：[2013 年 7 月 QA 版本目录更改](https://udn.unrealengine.com/questions/170530/qa-build-directory-changes-201307.html)
 * 已修复的错误：[2013 年 7 月虚幻引擎4 已修复的错误](UE4_Fixed_2013_July.xlsx)
 * 已知问题：[2013 年 7 月虚幻引擎4 突出问题](UE4_Bugs_2013_July.xlsx)


## 主要新功能

####编辑器工具
* **插件编辑器**
	* 现在，可以使用新界面查看、浏览和维护插件 —— 内置插件和已安装到游戏项目的插件。  
		![](pluginsEd.png)
	* 可以从此界面浏览类别和搜索/过滤，并启用/禁用或卸载插件。
* **新的玩家控制器和鼠标接口事件**
	* 新的鼠标接口/光标系统通过玩家控制器实现。  
		![](nc1.png)
	* ShowMouseCursor 启用系统，并在玩游戏时开始显示默认鼠标光标。注意：此功能不适用于在视口中运行（Play in Viewport），必须使用在新窗口中运行（Play in New Window）
	* 该界面使用一组非常简单的输入触摸事件和索引以“触摸”对象：  
		![](mc2bpnode.png) ![](mc2bpnode2.png) ![](mc2bpnode3.png)
* **通过放置浏览器添加体积**
	* 现在，可以通过放置浏览器删除不同类型的体积！  
		![](PBVolume.png)(h:480)
* **运行于（Play In）界面改进**
	* 已撤消运行于（Play In）按钮以高亮显示当前活动运行（Play）模式
	* 也已重新组织菜单，将 PlayInNewProcess 从运行在（PlayOn）移动到运行于（Play In）：  
		![](playin.png)

####蓝图
* **蓝图中的骨骼操作**
	* 添加了可直接操作骨骼的蓝图功能的新组件 (PoseableMeshComponent)。  	 
		![](BPbones.png)(h:480)
	* 现在，可以直接在骨骼中获取/设置骨骼，以实现位置/旋转/缩放 + 重置功能


##新增内容

####蓝图
* 如果调用目标无效，则蓝图调用不返回任何值的函数将不再生成“无访问”日志错误。
* 改进了蓝图调试（现在，可以调试执行序列，修复非纯函数断点的回归）
* 重新设置蓝图父项时的新蓝图警告
* 添加了删除 Actor 时的检查，以指示从关卡蓝图或其他 Actor 蓝图引用它们的时间并允许用户采取操作。
* 添加了其他图标以区分蓝图编辑器中的图表类型并简化了渲染


####声音
* 现在，可以指定没有混响音量的混响设置（Reverb Settings）


####核心
* UENUM 及其值现在将在工具提示中显示注释 —— 这些注释必须是前缀注释
* 添加了对可再发布插件的支持
	* 在单块构建中，插件现在生成构建时与主可执行文件链接的静态库
	* 如果这些库的源代码不存在，则假定 lib/dll 文件已经编译且链接
* 添加了 SCOPE_LOAD_TIME 宏，用于输出一段代码运行到日志所需的时间，以监控加载时间
* 移动容器、字符串和分配器的语义，这将优化临时容器的复制（例如，按值返回它们的函数）
	* 可以使用 `MoveTemp` 函数显式触发移动操作（相当于 `std::move`）
* 添加了从另一个类加载对象时的通知函数 `UObject::LoadedFromAnotherClass`（带类重定向）
	* 添加了仅使用一个线程启动引擎的功能（`-singlethread` 命令行参数）
	* 添加了安装任意数量的 DDC pak 文件的功能（`DDC.MountPak` 和 `DDC.UnmountPak` 控制台命令）
	* 删除了对 DDC pak 文件的 2GB 限制


####编辑器工具
* **Slate 和 UI**
	* 为 STextBlock 添加了文本自动换行支持（新 **AutoWrapText** 属性）
		* 这会根据控件的可用空间自动将文本换行
		* 请注意，这会出现重要警告 —— 有关更多信息，请参阅参数注释！
	* 为触摸平台（或带有 `-faketouches`/`-simmobile` 的桌面）添加了 Slate 虚拟摇杆（第一个通道）

* **编辑器**
	* 现在，活动项目名称显示在最右侧的标题区域中
	* 为所有选项卡添加了关闭（Close）按钮，而不仅仅是主要选项卡
	* 右键单击快捷菜单中现在提供“选择所有画刷（Select All Brushes）”选项
	* 添加了场景大纲视图过滤器，用于在 SIE/PIE 中隐藏在运行时生成的临时 Actor
	* 添加了场景大纲视图浏览模式 —— 仅显示选定内容
	* 重构了一些场景大纲视图代码，以确保添加其他过滤器和功能不会产生很大影响
	* 在独立控件模式下，场景大纲视图现在始终显示 Actor 数量
	* 现在，单击滚动条的滚动区域会将视图对齐到该滚动位置，并允许通过拖动继续滚动
	* 现在，重命名 Actor 在场景大纲视图中内联完成
	* 现在，当前流送方法会在与当前关卡选择匹配的这些选项旁边显示 Tick
	* 打开项目（Open Project）对话框现在可取消
	* 在为“转换”操作选择目标类时，为类项目添加了工具提示以便更好地显示目标类
	* 使用将 Actor 替换为（Replace Actor With）时将保留描画网格体顶点颜色，并且新 Actor 具有带兼容资源的网格体组件
	* 添加了检查以确保 Actor 已经成为 Matinee 的一部分，不会添加到后续 Matinee

* 虚幻编译工具：添加了对项目文件生成器的 Visual Studio 2013 支持
	* 使用 `GenerateProjectFiles.bat -2013` 创建这些项目。请注意，还无法使用 VS 2013 进行编译

* **分析器**
	* 添加了对多个实例的初期支持，用户可以一次捕获/预览多个实例
	* 小规模改进了分析器的稳定性

* **地形**
	* `PDI->DrawLine()` 现在支持 DepthBias
	* 现在，如果没有为地形样条选择网格体，则在编辑器中使用简单平面网格体对其渲染以便查看和选择
	* 现在可以将材质拖放到地形


####Gameplay 和框架
* **物理**
	* 现在，PhAT 具有两个适用于形体和约束的不同工作流程。工具栏按钮用于切换模式
	* 支持骨架网格体部分布偶
		* 每个形体在 PhAT 中定义固定/非固定/默认
		* 模拟和混合是单独的操作。您可以停止模拟，但仍然混合到物理
		* 例如，可以为每个 BodyInstance 修改 **PhysicsBlendWeight**

* 添加了 **DisplayAllLocation** 和 **DisplayAllRotation** 命令
	* 像虚幻引擎3 中的 `displayall [actorclass] location` 和 `displayall [actorclass] rotation` 一样使用
* 现在可以为 **AutoPossess** 标记 Pawn，与为 Actor 标记 **AutoReceiveInput** 类似
* **复制** RepNotify：添加了获取复制属性的上一个本地值的功能：[链接](https://udn.unrealengine.com/questions/168304/repnotify-how-can-i-find-the-previous-value-of-a-r.html)


####平台
* 添加了对大多数平台的 APEX 布料支持
* 为通用平台属性添加了新功能：
	* **SupportsFastVRAMMemory** —— 如果平台支持快速 VRAM 路径，则返回 True，否则返回 False（默认为 False）
* 添加了新的 TexCreate 和 BUF 提示标记：`*_FastVRAM`
	* 如果可用于纹理或顶点/常量缓冲区，则提示 RHI 使用 FastVRAM
* 添加了默认 FFastVRAMAllocator 类（默认不执行任何操作）


####渲染
* 图元统一缓冲区现在包含局部空间边界
* 添加了 **ObjectLocalBounds** 引擎材质函数，为材质系统提供对局部空间边界的访问
* 添加了类型为 **Alpha** 的新纹理压缩（单通道，非伽玛校正）
* 现在，根据立方体或 2D 纹理 **创建静态纹理（Create Static Texture）** 支持 HDR (float16) 源纹理
* 默认从 Microsoft 启用新的阴影方法（返回旧值：`r.shadow.method 0`)
	* 更少的绘制调用
	* 更简单的代码
	* 基于 z 距离（径向）
	* 平滑的级联过渡
	* 与阴影偏差同时改进，可显著提高动态阴影质量
* 前向着色 (ES2) 路径现在支持 HDR、曝光和泛光
* 添加了 **MinRoughness** 光源参数（对于辅助光非常有用）


####动画/角色编辑器
* 现在，可以使用内容浏览器中的快捷菜单直接从骨架网格体创建动画蓝图、蒙太奇、混合空间和动画偏移资源
* 动画图表支持导出到动画功能。
	* 可以将当前动画图表导出到动画（对于下边/上边形体分割或弹簧非常有用）。
* 可以在静态网格体编辑器中复制插槽
* 插槽选择现在不适用于任何静态网格体/骨架网格体组件
* 在角色编辑器中，在更改模式之间继续播放当前正在播放的动画
* 确保为模式切换的所有选项都保持视口状态



##Upgrade Notes （以下内容仅供参考，不作翻译）

####Blueprints
* Blueprint inheritance (blueprints of blueprints) has been officially enabled!  You will now be able to create a blueprint of a blueprint, either by selecting the parent class in the class browser when creating a new blueprint, or by right clicking on a blueprint in the Content Browser, and selecting "Create child of this blueprint..."
* Blueprints now properly support TWeakObjectPtrs, and UFUNCTIONS that use them as parameters are now safe for execution
* Blueprints can now set by-reference variables.  This is useful for functions that pass parameters by reference that need to manually manipulate the value of those parameters internally
* Scrollbar added to the asset tree for Creating Blueprints
* Renamed VimBlueprint to AnimBlueprint and VimInstance to AnimInstance. Updated variable names/comments to reflect removal of word "Vim"


####Sound
* Created new Sound Class editor - it's advised that all SoundClasses are loaded and re-saved to ensure that all SoundClasses will only have a single parent
	* Log Warnings are generated for any loaded SoundClasses that have multiple parents, before they are forced to have a single parent
	* Use these warnings to make sure that SoundClasses have the desired parent, as they will just be processed in alphabetical order and may not be what you expect
	* The new editor does not save the positioning of SoundClasses, they are arranged automatically every time one is opened in the editor
* SoundCue actor now has Find in Content Browser option


####Core
* FString has been refactored
* FString does not inherit from TArray any more 
* `InStr` has been replaced by `Find()` and `Contains()` has been added ( **NOTE: Parameters and their defaults have changed!!!** ) 
* Parameters of Split function changed 
* EndsWith, StartsWith, Replace, ReplaceInline and MatchesWildcard take a ESearchCase as second argument instead of a bool now 
* Changed the default behavior of string functions to ignore case 
* Moved all FFilename functions to FPaths and made them static. They work directly on strings now
* Removed FFilename type 
* Added FPaths::Combine() with overloads for up to 5 parameters 
* Replaced path concatenation operator `*` and `*=` with `/` and `/=` 
* Moved FPaths from CoreMisc.h/.cpp to Paths.h/.cpp
* USTRUCTs are no longer allowed to contain UFUNCTIONs
* `TPreallocatedArray<Type, Count>` has been removed as dangerous.  `TArray<Type, TFixedAllocator<Count> >` should be used instead
* `FQuat::operator-` has been removed as its implementation was unintuitive. Licensees will need to change all existing references to `FQuat::Inverse()` which is equivalent
* Deprecated the TemplateMapMetadata asset type
	* Template maps are now configured in the `[/Script/UnrealEd.UnrealEdEngine]` section of DefaultEngine.ini (see BaseEngine.ini for an example)
	* If your game has any TemplateMapMetadata assets, use the text filter in the content browser to find and remove them
* Deprecated CurveEdPresetCurve asset type
	* If any instances of this asset are in your game, use the text filter in the content browser to find and remove them
* Plugins now must be enabled before they are loaded. To enable a plugin, add it to the EnabledPlugins list in the `[Plugins]` section of your DefaultGame.ini file
* TContainerTraits has been renamed to TTypeTraits
	* This is because there is a new TContainerTraits traits class which represents the traits of containers, whereas TTypeTraits represents the traits of container elements
	* If you have any TContainerTraits specializations of your own types, you should change these to specialize TTypeTraits instead
	* The **NeedsConstructor** trait is now called **NeedsCopyConstructor** to distinguish it from **NeedsMoveConstructor**


####Editor Tools
* **Editor**
	* The signature of CalcCamera and some other internal camera methods has changed (switching over to use the FMinimalViewInfo struct instead of loose variables, etc...)
	* Added support to GET_MEMBER_NAME_CHECKED for bitfields
	* Extensibility improvements:
		* Made it possible to register a custom pin factory in addition to a custom node factory 
		* Added UWorld lifecycle delegates 
		* Added a virtual APlayerController::GetAudioListenerPosition
	* Matinee curve track now displays correctly when first added
	* When the Check Out Assets windows appears, the Check Out Selected button is now is focus and pressing enter will select that option
	* Undo/Redo for Matinee keyframe Set Time
	* Level Editor widget now allows negative scaling of an object
	* Cursor is restored to its initial position when scaling or rotating an object with the Level Editor widget
	* Streaming Volumes menu options moved to a sub-menu within the Levels section of the Levels menu
	* Improved error message when a package fails to save
	* Selecting the Actor in the Matinee group now selects the actor in the Scene Outliner
	* An error message is now displayed when attempting to add a Matinee track for an actor that has no properties of that type
	* Scene Outliner now displays a second icon for the Actors Component Mobility variable

* **Landscape**
	* Enabled Retopologize tool + XYOffset
	* Added cooked PhysX data to LandscapeMeshCollision component


####Gameplay and Framework
* **Support for short package names has been removed from ini files, this includes section names**
	* This means that class sections like `[Engine.GameEngine]` will now have to be renamed to `[/Script/Engine.GameEngine]`
* AEnvironmentVolume has been removed
* Input bindings now specify whether the input should been consumed per binding instead of per component.  Instead of the component having ConsumeNone/Bound/All each binding now has a bConsumesInput boolean specifying if it consumes that input and the component has a boolean bBlocksInput indicating that it blocks subsequent components from receiving input (equivalent to ConsumeAll previously)
* FGameWidgetWorldContext renamed to FGameWorldContext
* Renamed various MovementComponents to match naming conventions: 
	* Character
	* Rotating
	* Projectile
	* Vehicle
	* Shooter
* Introduced an option for game-specific code to define custom navigation system class (derived from UNavigationSystem)
* **Collision Profile Refactor**
	* ECC_WorldTrace is gone, use ECC_Static if you're looking for stationary geometry (Movement channel is ECC_Static and Mobility is not Movable)
	* Global default is defined via code and INI file. Global default isn't all block anymore
		* Changed syntax of default channel define to include default response (global default)
				
				+CustomTraceChannel=(Channel=GameTraceChannel1, Name=Interact, Response=Ignore)
		* Removed DefaultResponse from Profile definition but it starts from global default.
	* CollisionResponse data structure has changed to allow only modified channels from global default (note this isn't CDO value but global default)
	* More changes are coming!
* **Deprecated UPhysicalMaterialProperty**. PhysicalMaterial now contains general enum value you can modify in DEFAULT.INI
	* Engine now has EPhysicalSurface enum that can be customized by each project
	* Deprecated UPhysicalMaterialProperty and every child classes  
	* Example in the `DefaultEngine.INI`:

			[PhysicalMaterial.SurfaceTypes]
			SurfaceType1=Asphalt
			SurfaceType2=Dirt
			SurfaceType3=Water
* MeleeRange variable has been removed from APawn.  If you're using it in your local pawns, you need to put it in the derived class for your game
* **Removed PhsyicsWeight in SkeletalMeshComponent**. Use `bBlendPhysics` or define `PhysicsWeight` for each BodyInstance


####Online
* Typo fixed in OnlineSubsystemLive which referenced Steam
* Brought HTTP into the platform layer:
	* Each platform now has its own http request/response
	* Note some platforms are not yet implemented and use GenericPlatformHttp


####Rendering
* Made new console variable flag ECVF_RenderThreadSafe to get the state propagated to the render thread (in order with other render thread commands), does not work for other threads
* Ambient cubes will now lerp instead of add when combining more than one post process volumes
* Removed additive lighting terms for future iteration


####Platform
* Changed PrepTargetForDeployment function to take the TargetRules object rather than just the TargetType 
* Renamed D3D11Drv to D3D11RHI
* Merged all D3D11 RHIs into a single module
	* Deleted WinRTRHI


####Animation and Persona
* Undo/Redo for Static Mesh Editor Socket property changes
* Undo/Redo for Static Mesh Editor Socket deletion



##Ongoing Efforts and Improvements

####Analytics
* Engine analytics improvements:
	* Improved error reporting
	* Tracking which keybindings are remapped
	* Tracking OS language and GPU driver version
	* Tracking new blueprint class creation
	* Tracking "up time" of major sub-editor tools


####Blueprints
* The root component in a blueprint can no longer have a transform applied to it
* New functions can no longer be marked pure when editing Blueprint interfaces
* The DELETE key can now be used to remove selected items from the My Blueprint tab in the Blueprint editor
* Performing undo/redo actions in rapid succession no longer spams the workspace with notification pop-ups
* IsValid node will correctly appear when dragging off a UObject subclass pin
* Can no longer modify categories of variables which are inherited
* Transform widget is now hidden in the Blueprint component editor when the root component is selected
* Floating point values now show less trailing zeros
* Revised results returned from Find Instances for variables so only relevant results are shown
* Added title to the blueprint re-parent menu when accessed via the window menu
* Added an option for promote to variable for dragged pins


####Sound
* Enveloper node now has modulation settings
* Sound is no longer paused when right clicking in the content browser


####Core
* Added command line `AllowStdOutLogVerbosity`. This will print every log with a verbosity >= Log to stdout if you run the `* -Cmd.exe`
* New Plugin Descriptor changes 
	* Many new fields were added to plugin descriptors.  (Documentation update coming soon!)
	* Plugins can now have a Resources sub-folder (for Icon128.png thumbnail)
* Simplygon now compiles into VS 2012 builds
* DLL Version compatibility is now tested before any module is loaded via `FModuleManager::LoadModule`
	* Modules that are discovered in FindModules are now checked for compatibility with the current engine version before they are added to the list
* The VSAccessor can now open solution file paths where there is a space in the path
* After creating a c++ project with the "New Project" dialog, visual studio will open instead of the editor. Also added some stronger testing to make sure you can actually build a c++ project
* When a project fails to auto-load, auto loading is now disabled until the editor is successfully loaded again
* The new project dialog is now a wizard where the first page is selecting a template and the second page is the name and location
* Content Browser filters reset when syncing to an asset only if the filters would prevent that asset from being displayed
* The default location for a project is now in a folder inside of My Documents instead of directly in My Documents
* Added some failsafe code to prevent UAsset files from being added to perforce in text format
* Added collection error handling for working with SCC collections when the server is not available
* General container optimizations


####Editor Tools
* **Slate and UI**
	* Working on improving the Slate style system

* **Editor**
	* Improved performance of starting up Play in Editor and Simulate sessions
	* Most menu and tool-tip animations are now skipped except when framerate is acceptable
	* Removed Scene Outliners border padding when in PIE/SIE mode
	* Color picker's eye-dropper mouse pointer is now shown outside the picker window when active
	* PromptForCheckoutAndSave window remembers which packages were unchecked by the user
	* Point the Consolidate window at the proper radio button style so entries get icons
	* Updated the radio button icons & styles
	* Improved mesh painting performance by reducing time spent calculating the changes and painting into the texture
	* When using **Select Actors Using This Asset** made sure assets are tracked to their actual owner, not the parent of the Actor
	* Suspend the autosave notification & feature while a popup menu is active
	* Made Property Matrix more fault tolerant by sorting entries without a matching enum name to the end of the list
	* Changed the sort in the Property Matrix table to compare enum names alphabetically rather than by byte values
	* Evened out difference between camera speeds 1-3 to provide a smaller jump 4->3 and larger between 2->3
	* Changed the Scene Outliner to maintain selection when renaming & changed the name edit box changed to fully surrender focus to stop highlighting glitches
	* Changed the Scene Outliner to scroll to last selection when fully refreshing the view e.g. after adding an actor
	* Changed the tooltip to state Select Actors will replace the selection not append to it
	* FBX import options are now saved with the asset and reused when importing. This applies to static meshes, skeletal meshes, and animation sequences
	* The Content Browser "New" menu can no longer be larger than half the screen height
	* Converting actors will no longer re-label the actor
	* Map file errors are now a lot more descriptive as to the reason for failure
	* FBX is now listed as the first option (if applicable) when presenting the export dialog to the user
	* RowName no longer gets forcefully modified if multiple assets properties are shown merged
	* Variables Category ComboBox is automatically closed when a category is selected
	* Scene Outliner now selects (in the list) those actors who are selected (in the level) when opened
	* Quit dialog surpressed flag is now saved to the agnostic config
	* Asset naming error messages are now more accurate
	* Modified GenerateFilteredItems to be more accurate with regard to matching the users search term with an action
	* Create Destructible Mesh now guards against the the possibility of failure
	* Modified save package errors so that they refer to either a map or asset depending on what was saved
	* Lower area of the title bar is now selectable for movement
	* Editors Windows list is now listed alphabetically
	* Additional guards against invalid index checks
	* Replaced occurrences of 'exists in package' with 'exists in file'
	* Editor URLs are now data driven
	* Move selected actors code no longer assumes that there are any selected actors
	* GetAttachedActors now checks to see if an actor was NULL before adding it to the list

* **World Browser**
	* Added parent->child relationships between levels
	* Level position in the world stored relative to the parent level
	* List and folders view was replaced with levels hierarchy view
	* Added distance based level streaming
		* Streaming distance can be specified for each world layer
	* Added preview(highlight) of potentially visible streaming levels from a specified world position (**Alt + MousePosition**)
	* Levels positioning now happen at point when level is added to the world instead of post loading stage
	* Levels which are far enough from the world origin get hidden(shelved) instead of forcibly unloaded and automatically shown (unshelved) when close enough to the world origin
	* Added AlwaysLoadedLevel tag for levels. Tagged levels are automatically loaded when user opens a world in the editor
	* Recomposed demolet world using parent->child relationships
	* Tiles with non-editable levels will be shown in disabled state (grey out)
	* Added ability to add/remove streaming levels by drag and drop operations in hierarchy view
	* Added ability to open a world composition in the game  (`/Game/Maps/MyWorldRoot?worldcomposition`)
	* Added ability to specify a world composition as a default map to load in the editor
	* Added ability to move levels by arrow keys
	* World origin shifting now works in SIE too
	* Enabling/disabling WorldBrowser in editor preferences does not require editor restart to take effect

* **Level Streaming**
	* `UWorld::UpdateLevelStreaming` now updates streaming objects in the persistent world and in all visible streamed-in levels.
	* Now it is possible to have several streaming objects referring the same level
	* Level gets unloaded/hidden only if all referring streaming objects command to unload/hide it

* **Landscape**
	* Added callback for a material finishing compiling and use it instead of testing the shader map pointer in the landscape editor mode and landscape layer thumbnails code
	* Optimized Landscape NavMesh generation 
	* Added an offset to the editor grid in the perspective viewport to prevent it Z-fighting with the New Landscape grid and ground floor planes

* **Profiler**

####Gameplay and Framework
* **Physics**
	* PhAT context menu for bodies tidied up - unfix and delete options added for single bodies
	* Added World option to **bShouldSimulatePhysics** - you can enable/disable using this option
	* Exposed simulation tolerance values
	* Editor level viewport has collision on by default for StaticMeshComponent, SkeletalMeshComponent, BrushComponent
		* By default it enables "Query Only" collision

* **Optimization** 
	* Component Attach optimization: **UseAttachParentBound**
 
* Arrays now saved to the config in the same order that they were loaded
* Moved sprite components from ALight actors into ULightComponent


####Online
* Added the stub module for GameCenter OnlineSubsystem
* Added the stub module for Facebook OnlineSubsystem


####Rendering
* GPU sprites now account for emitter origin and rotation
* Texture preview tool displays unwrapped cube textures with correct aspect ratio
* Made Lightmass more tolerant of lightmap overlaps. A tolerance of 1% must be exceeded before it reports an error
* Fog is not rendered in views with an orthographic camera
* Texture preview tool no longer clamps HDR textures. Exposure control now reveals HDR detail
* Reduced memory requirements of DX11's RHIReadSurfaceFloatData by a factor of 8x
* Renamed some properties in directional light to be more clear
* Exposed/renamed settings for cascade shadow maps to tweak fading between dynamic and static
* Added **VisualizeTexture** support for MSAA textures
* Pause in game is now pausing MotionBlur properly (useful for working on MotionBlur quality)
* Some SystemSettings have now been exposed as console variables:
	* `r.UseVSync` 
	* `r.MaxAnisotropy`
	* `r.MaxShadowResolution`
	* `r.ParticleLODBias`
	* `r.SkeletalMeshLODBias`
	* `r.TranslucencyLightingVolumeDim`
	* `r.DetailMode`
* `r.UseTextureStreaming`(Note: got renamed to `r.TextureStreaming`) has also been introduced and texture streaming is now toggleable at runtime
* Improved lightmap mipmap generation
* **bFlipGreenChannel** is now preserved on textures during re-import or overwrite while keeping settings
* **Swapped ClampMin and ClampMax** usage in Material Expressions Clamp
	* **Note:** Any Materials whose 'Clamp' node was modified between CL 1672610 (03/06/2013) and 1706681 (25/06/2013) will need verifying as the ClampMin and ClampMax values were swapped in the earlier changelist, but pre-existing assets weren't guarded against this until the latter


####Platform
* Cooked platforms cannot run project-based (other than themselves) if the binaries is not a GameAgnosticExe
	* This is due to the game potential overriding default classes (ie QAGameInfo) and those classes referencing assets not available to the project file
* Freetype2 update (2.4.12) 
* When you attempt to build a target for an unsupported platform, UBT will throw a build exception w/ a message like this: <Target> does not support the <platform> platform
* Cleaned up creation of DynamicRHI (split code into platform-specific files) 
* Added RHISupportsTessellation(EShaderPlatform) function to replace just checking if SM_PCD3D_SM5
* Porting the engine and the editor to Mac


####Animation and Persona
* LoD settings window now functions correctly after re-importing the mesh
* Persona mesh LoD setting now changes to "Auto" if the currently selected LoD is deleted
* The floor in Persona is now placed at the bottom of the bounding box of the mesh, rather than at the origin, so it no longer intersects the mesh
* Currently selected bone renders in the "selected item" color in the Persona viewport
* Click in empty space in the Persona viewport will deselect any sockets/bones
* Scrubbing the animation timeline slider will now update animations in real time, rather than when the mouse click is released
* FBX is now an export option for AnimSequences in the Content Browser (as well as in Persona as previously)
* Delete key can now be used to delete selected sockets and attached assets in the Persona skeleton tree
* Skeleton sockets can now be attached to in the Scene Outliner
* **Set Mesh Root Translation** option removed from Persona viewport
* **Delete All Bodies** in PhAT now only requires a single action to undo/redo
* **Import LoD** in Persona now functions correctly
* Persona now informs the user when the current action will result in the Skeleton needing to be saved (changing the default mesh)
* Persona will display the error log if there are errors
