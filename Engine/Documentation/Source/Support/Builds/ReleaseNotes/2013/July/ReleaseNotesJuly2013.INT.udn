Title: July 2013 Release Notes
Crumbs:%ROOT%, Support/Builds
Description:
Availability:Licensee
Parent:Support/Builds
Order:-7

[TOC(start:2 end:2)]

## Build Info


[REGION:simpletable]
| Item | Info |
| ---- | ---- |
| **Label** | QA_APPROVED_UE4_BUILD_2013_07 |
| **Changelist #** | 1735924 |
| **VISUAL STUDIO VERSION** | Microsoft Visual Studio 2010 version 10.0.40219.1 SP1 Rel |
| **DIRECTX** | June 2010 |
[/REGION]

## Important information

 * Current Engine Development Roadmaps: [UE4 Roadmaps](https://udn.unrealengine.com/questions/topics/roadmap.html)
 * Changes to QA Build Directory: [July 2013 QA Build Directory Changes](https://udn.unrealengine.com/questions/170530/qa-build-directory-changes-201307.html)
 * Fixed Bugs: [UE4 Fixed Bugs July 2013](UE4_Fixed_2013_July.xlsx)
 * Known Issues: [UE4 Outstanding Bugs July 2013](UE4_Bugs_2013_July.xlsx)


## Major New Features

####Editor Tools
* **Plugins Editor**
	* There is now a new interface that lets you see, browse and maintain Plugins -  both built-in plugins as well as plugins installed into your game project     
		![](pluginsEd.png)
	* You can browse categories and search/filter, and enable/disable or uninstall plugins, all from this interface
* **New PlayerController and Mouse Interface Events**
	* The new mouse interface /cursor system is implemented through the PlayerController.  
		![](nc1.png)
	* ShowMouseCursor enables the system and will begin displaying the default mouse cursor when in-game.  NOTE: this does not work with Play in Viewport, you must use Play in New Window
	* The interface uses a very simple set of input touch events and index in order to "touch" an object:  
		![](mc2bpnode.png) ![](mc2bpnode2.png) ![](mc2bpnode3.png)
* **Add Volumes Through Placement Browser**
	* Different types of volumes can now be dropped in through the Placement Browser!  
		![](PBVolume.png)(h:480)
* **Play In Interface Improvements**
	* The Play In button has been retreated to highlight the currently active Play mode
	* The menus have also been reorganized, PlayInNewProcess being moved from PlayOn to Play In:  
		![](playin.png)

####Blueprints
* **Bone Manipulation in Blueprints**
	* Added new component (PoseableMeshComponent) that has blueprint functions for manipulating bones directly.  	 
		![](BPbones.png)(h:480)
	* You can now directly get/set bones in a skeleton for location/rotation/scale + a reset function


##New Additions

####Blueprints
* Blueprint calls to functions that return no values will no longer generate an 'Access None' log error if called on an invalid target
* Improved Blueprint debugging (execution sequences can now be debugged, fixed a regression on breakpoints of impure functions)
* New blueprint warning when re-parenting a blueprint
* Added a check when deleting actors to indicate when they are referenced from the level Blueprint or another actor's Blueprint and allow the user to take action
* Added additional icons to differentiate graph types in the Blueprint editor and simplified rendering


####Sound
* Can now specify Reverb Settings without a reverb volume


####Core
* UENUMs and their values will now display comments in tooltips - These need to be prefix comments
* Added support for redistributable plugins
	* In Monolithic builds, plugins now produce static libs that are linked into the main executable at build time
	* If source code for these libs does not exist, it is assumed that the lib/dll file was already compiled and is linked in anyway
* Added SCOPE_LOAD_TIME macro, which outputs how long a block of code takes to run to the log, to be used for monitoring load times
* Move semantics on containers, strings and allocators, which will optimize the copying of temporary containers (e.g. functions returning them by value)
	* There's also a `MoveTemp` function to explicitly trigger a move operation (equivalent to `std::move`)
* Added notify function `UObject::LoadedFromAnotherClass` when an object is being loaded from another class (with class redirects)
	* Added the ability to launch the engine with just one thread (`-singlethread` command line param)
	* Added the ability to mount an arbitrary number of DDC paks (`DDC.MountPak` and `DDC.UnmountPak` console command)
	* Removed 2GB limitation on DDC pak files


####Editor Tools
* **Slate and UI**
	* Added text auto wrapping support to STextBlock (new **AutoWrapText** attribute) 
		* This wraps the text to fit the available space for the widget automatically 
		* Note that it has important caveats -- see the parameter comments for more info!
	* Added Slate virtual joysticks (first pass) for touch screen platforms (or desktop with `-faketouches`/`-simmobile`)

* **Editor**
	* Active project name is now displayed in the title area, to the far right
	* Added Close buttons to all tabs, not just major tabs
	* "Select All Brushes" is now available in right click context menu
	* Added a Scene Outliner filter to hide temporary Actors that are spawned at run-time in SIE/PIE 
	* Added Scene Outliner view mode -- Show Only Selected 
	* Refactored some Scene Outliner code to make the addition of other filters and features less intrusive 
	* Scene Outliner now always displays Actor count when in standalone widget mode
	* Clicking on a scrollbar's scroll area will now snap the view to that scroll location and allow you to continue to scroll by dragging
	* Renaming actors is now done inline in the Scene Outliner
	* Current streaming method now displays a tick next to those options that match the current level selection
	* Open Project dialog is now suppressible
	* Added a tooltip to class items when choosing the target class for "Convert" operation to better show which class is targeted
	* Painted mesh vertex colors are preserved when using Replace Actor With and new actor has a mesh component with a compatible asset
	* Added checks to ensure actors already part of a Matinee aren't added to subsequent Matinees

* UnrealBuildTool: Added support for Visual Studio 2013 to project file generator 
	* Use `GenerateProjectFiles.bat -2013` to create these projects.  Note that you cannot compile using VS 2013 yet

* **Profiler**
	* Added initial support for multiple instances, user can capture/preview several instances at once
	* Minor improvement of the profiler's stability

* **Landscape**
	* `PDI->DrawLine()` now supports DepthBias
	* Landscape Splines are now rendered with a simple plane mesh in the editor if no mesh is selected for them, to make them easier to see and select
	* Can now drag/drop materials onto landscape


####Gameplay and Framework
* **Physics**
	* PhAT now has two distinct workflows for Bodies and Constraints. Toolbar buttons are used to switch modes
	* SkeletalMesh Partial ragdoll is supported
		* Each body defines Fixed/Unfixed/Default in the PhAT
		* Simulation and Blending is a separate operation. You can stop simulate but still blending to physics
		* For instances, you can modify **PhysicsBlendWeight** for each BodyInstance

* **DisplayAllLocation** and **DisplayAllRotation** commands added 
	* Used like `displayall [actorclass] location` and `displayall [actorclass] rotation` in UE3
* Pawns can now be flagged for **AutoPossess** similar to the **AutoReceiveInput** for Actors
* **Replication** RepNotify: Added ability to obtain previous local value of replicated properties:[link](https://udn.unrealengine.com/questions/168304/repnotify-how-can-i-find-the-previous-value-of-a-r.html)


####Platform
* Added APEX Clothing support for most platforms
* Added new function to Generic PlatformProperties:
	* **SupportsFastVRAMMemory** - return true if the platform supports a fast VRAM path, false if not (default is false)
* Added new TexCreate and BUF hint flags: `*_FastVRAM`
	* Hint for the RHI to utilize FastVRAM if available for the Texture or Vertex/Constant buffer
* Added default FFastVRAMAllocator class (Does nothing by default)


####Rendering
* Primitive uniform buffer now contains local space bounds
* Added **ObjectLocalBounds** engine material function to provide Material system with access to local-space bounds
* Added new Texture compression type of **Alpha**. (Single channel, not gamma corrected)
* **Create Static Texture** from cube or 2D texture now supports HDR (float16) source textures
* Enabled new shadow method from Microsoft by default (get back old: `r.shadow.method 0`)
	* less draw calls 
	* simpler code
	* z-distance based (was radial) 
	* smooth cascade transitions 
	* Together with shadow bias improvements it improves the dynamic shadow quality quite a bit
* Forward shading (ES2) path now supports HDR, exposure, and bloom
* Added **MinRoughness** light parameter (very useful for fill lights)


####Animation/Persona
* Can now create Animation Blueprint, Montage, Blendspace and AnimOffset assets directly from a Skeletal Mesh using the context menu in the Content Browser
* AnimGraph support Export to Animation feature.
	* You can export current anim graph to animation (Useful for lower/upper body split or spring).
* Can duplicate sockets in the Static Mesh Editor
* Socket selection now available for none StaticMesh/SkeletalMesh components
* Carry over current playing animation between mode changes in Persona
* Made sure viewport state is maintained for all options across mode switches



##Upgrade Notes

####Blueprints
* Blueprint inheritance (blueprints of blueprints) has been officially enabled!  You will now be able to create a blueprint of a blueprint, either by selecting the parent class in the class browser when creating a new blueprint, or by right clicking on a blueprint in the Content Browser, and selecting "Create child of this blueprint..."
* Blueprints now properly support TWeakObjectPtrs, and UFUNCTIONS that use them as parameters are now safe for execution
* Blueprints can now set by-reference variables.  This is useful for functions that pass parameters by reference that need to manually manipulate the value of those parameters internally
* Scrollbar added to the asset tree for Creating Blueprints
* Renamed VimBlueprint to AnimBlueprint and VimInstance to AnimInstance. Updated variable names/comments to reflect removal of word "Vim"


####Sound
* Created new Sound Class editor - it's advised that all SoundClasses are loaded and re-saved to ensure that all SoundClasses will only have a single parent
	* Log Warnings are generated for any loaded SoundClasses that have multiple parents, before they are forced to have a single parent
	* Use these warnings to make sure that SoundClasses have the desired parent, as they will just be processed in alphabetical order and may not be what you expect
	* The new editor does not save the positioning of SoundClasses, they are arranged automatically every time one is opened in the editor
* SoundCue actor now has Find in Content Browser option


####Core
* FString has been refactored
* FString does not inherit from TArray any more 
* `InStr` has been replaced by `Find()` and `Contains()` has been added ( **NOTE: Parameters and their defaults have changed!!!** ) 
* Parameters of Split function changed 
* EndsWith, StartsWith, Replace, ReplaceInline and MatchesWildcard take a ESearchCase as second argument instead of a bool now 
* Changed the default behavior of string functions to ignore case 
* Moved all FFilename functions to FPaths and made them static. They work directly on strings now
* Removed FFilename type 
* Added FPaths::Combine() with overloads for up to 5 parameters 
* Replaced path concatenation operator `*` and `*=` with `/` and `/=` 
* Moved FPaths from CoreMisc.h/.cpp to Paths.h/.cpp
* USTRUCTs are no longer allowed to contain UFUNCTIONs
* `TPreallocatedArray<Type, Count>` has been removed as dangerous.  `TArray<Type, TFixedAllocator<Count> >` should be used instead
* `FQuat::operator-` has been removed as its implementation was unintuitive. Licensees will need to change all existing references to `FQuat::Inverse()` which is equivalent
* Deprecated the TemplateMapMetadata asset type
	* Template maps are now configured in the `[/Script/UnrealEd.UnrealEdEngine]` section of DefaultEngine.ini (see BaseEngine.ini for an example)
	* If your game has any TemplateMapMetadata assets, use the text filter in the content browser to find and remove them
* Deprecated CurveEdPresetCurve asset type
	* If any instances of this asset are in your game, use the text filter in the content browser to find and remove them
* Plugins now must be enabled before they are loaded. To enable a plugin, add it to the EnabledPlugins list in the `[Plugins]` section of your DefaultGame.ini file
* TContainerTraits has been renamed to TTypeTraits
	* This is because there is a new TContainerTraits traits class which represents the traits of containers, whereas TTypeTraits represents the traits of container elements
	* If you have any TContainerTraits specializations of your own types, you should change these to specialize TTypeTraits instead
	* The **NeedsConstructor** trait is now called **NeedsCopyConstructor** to distinguish it from **NeedsMoveConstructor**


####Editor Tools
* **Editor**
	* The signature of CalcCamera and some other internal camera methods has changed (switching over to use the FMinimalViewInfo struct instead of loose variables, etc...)
	* Added support to GET_MEMBER_NAME_CHECKED for bitfields
	* Extensibility improvements:
		* Made it possible to register a custom pin factory in addition to a custom node factory 
		* Added UWorld lifecycle delegates 
		* Added a virtual APlayerController::GetAudioListenerPosition
	* Matinee curve track now displays correctly when first added
	* When the Check Out Assets windows appears, the Check Out Selected button is now is focus and pressing enter will select that option
	* Undo/Redo for Matinee keyframe Set Time
	* Level Editor widget now allows negative scaling of an object
	* Cursor is restored to its initial position when scaling or rotating an object with the Level Editor widget
	* Streaming Volumes menu options moved to a sub-menu within the Levels section of the Levels menu
	* Improved error message when a package fails to save
	* Selecting the Actor in the Matinee group now selects the actor in the Scene Outliner
	* An error message is now displayed when attempting to add a Matinee track for an actor that has no properties of that type
	* Scene Outliner now displays a second icon for the Actors Component Mobility variable

* **Landscape**
	* Enabled Retopologize tool + XYOffset
	* Added cooked PhysX data to LandscapeMeshCollision component


####Gameplay and Framework
* **Support for short package names has been removed from ini files, this includes section names**
	* This means that class sections like `[Engine.GameEngine]` will now have to be renamed to `[/Script/Engine.GameEngine]`
* AEnvironmentVolume has been removed
* Input bindings now specify whether the input should been consumed per binding instead of per component.  Instead of the component having ConsumeNone/Bound/All each binding now has a bConsumesInput boolean specifying if it consumes that input and the component has a boolean bBlocksInput indicating that it blocks subsequent components from receiving input (equivalent to ConsumeAll previously)
* FGameWidgetWorldContext renamed to FGameWorldContext
* Renamed various MovementComponents to match naming conventions: 
	* Character
	* Rotating
	* Projectile
	* Vehicle
	* Shooter
* Introduced an option for game-specific code to define custom navigation system class (derived from UNavigationSystem)
* **Collision Profile Refactor**
	* ECC_WorldTrace is gone, use ECC_Static if you're looking for stationary geometry (Movement channel is ECC_Static and Mobility is not Movable)
	* Global default is defined via code and INI file. Global default isn't all block anymore
		* Changed syntax of default channel define to include default response (global default)
				
				+CustomTraceChannel=(Channel=GameTraceChannel1, Name=Interact, Response=Ignore)
		* Removed DefaultResponse from Profile definition but it starts from global default.
	* CollisionResponse data structure has changed to allow only modified channels from global default (note this isn't CDO value but global default)
	* More changes are coming!
* **Deprecated UPhysicalMaterialProperty**. PhysicalMaterial now contains general enum value you can modify in DEFAULT.INI
	* Engine now has EPhysicalSurface enum that can be customized by each project
	* Deprecated UPhysicalMaterialProperty and every child classes  
	* Example in the `DefaultEngine.INI`:

			[PhysicalMaterial.SurfaceTypes]
			SurfaceType1=Asphalt
			SurfaceType2=Dirt
			SurfaceType3=Water
* MeleeRange variable has been removed from APawn.  If you're using it in your local pawns, you need to put it in the derived class for your game
* **Removed PhsyicsWeight in SkeletalMeshComponent**. Use `bBlendPhysics` or define `PhysicsWeight` for each BodyInstance


####Online
* Typo fixed in OnlineSubsystemLive which referenced Steam
* Brought HTTP into the platform layer:
	* Each platform now has its own http request/response
	* Note some platforms are not yet implemented and use GenericPlatformHttp


####Rendering
* Made new console variable flag ECVF_RenderThreadSafe to get the state propagated to the render thread (in order with other render thread commands), does not work for other threads
* Ambient cubes will now lerp instead of add when combining more than one post process volumes
* Removed additive lighting terms for future iteration


####Platform
* Changed PrepTargetForDeployment function to take the TargetRules object rather than just the TargetType 
* Renamed D3D11Drv to D3D11RHI
* Merged all D3D11 RHIs into a single module
	* Deleted WinRTRHI


####Animation and Persona
* Undo/Redo for Static Mesh Editor Socket property changes
* Undo/Redo for Static Mesh Editor Socket deletion



##Ongoing Efforts and Improvements

####Analytics
* Engine analytics improvements:
	* Improved error reporting
	* Tracking which keybindings are remapped
	* Tracking OS language and GPU driver version
	* Tracking new blueprint class creation
	* Tracking "up time" of major sub-editor tools


####Blueprints
* The root component in a blueprint can no longer have a transform applied to it
* New functions can no longer be marked pure when editing Blueprint interfaces
* The DELETE key can now be used to remove selected items from the My Blueprint tab in the Blueprint editor
* Performing undo/redo actions in rapid succession no longer spams the workspace with notification pop-ups
* IsValid node will correctly appear when dragging off a UObject subclass pin
* Can no longer modify categories of variables which are inherited
* Transform widget is now hidden in the Blueprint component editor when the root component is selected
* Floating point values now show less trailing zeros
* Revised results returned from Find Instances for variables so only relevant results are shown
* Added title to the blueprint re-parent menu when accessed via the window menu
* Added an option for promote to variable for dragged pins


####Sound
* Enveloper node now has modulation settings
* Sound is no longer paused when right clicking in the content browser


####Core
* Added command line `AllowStdOutLogVerbosity`. This will print every log with a verbosity >= Log to stdout if you run the `* -Cmd.exe`
* New Plugin Descriptor changes 
	* Many new fields were added to plugin descriptors.  (Documentation update coming soon!)
	* Plugins can now have a Resources sub-folder (for Icon128.png thumbnail)
* Simplygon now compiles into VS 2012 builds
* DLL Version compatibility is now tested before any module is loaded via `FModuleManager::LoadModule`
	* Modules that are discovered in FindModules are now checked for compatibility with the current engine version before they are added to the list
* The VSAccessor can now open solution file paths where there is a space in the path
* After creating a c++ project with the "New Project" dialog, visual studio will open instead of the editor. Also added some stronger testing to make sure you can actually build a c++ project
* When a project fails to auto-load, auto loading is now disabled until the editor is successfully loaded again
* The new project dialog is now a wizard where the first page is selecting a template and the second page is the name and location
* Content Browser filters reset when syncing to an asset only if the filters would prevent that asset from being displayed
* The default location for a project is now in a folder inside of My Documents instead of directly in My Documents
* Added some failsafe code to prevent UAsset files from being added to perforce in text format
* Added collection error handling for working with SCC collections when the server is not available
* General container optimizations


####Editor Tools
* **Slate and UI**
	* Working on improving the Slate style system

* **Editor**
	* Improved performance of starting up Play in Editor and Simulate sessions
	* Most menu and tool-tip animations are now skipped except when framerate is acceptable
	* Removed Scene Outliners border padding when in PIE/SIE mode
	* Color picker's eye-dropper mouse pointer is now shown outside the picker window when active
	* PromptForCheckoutAndSave window remembers which packages were unchecked by the user
	* Point the Consolidate window at the proper radio button style so entries get icons
	* Updated the radio button icons & styles
	* Improved mesh painting performance by reducing time spent calculating the changes and painting into the texture
	* When using **Select Actors Using This Asset** made sure assets are tracked to their actual owner, not the parent of the Actor
	* Suspend the autosave notification & feature while a popup menu is active
	* Made Property Matrix more fault tolerant by sorting entries without a matching enum name to the end of the list
	* Changed the sort in the Property Matrix table to compare enum names alphabetically rather than by byte values
	* Evened out difference between camera speeds 1-3 to provide a smaller jump 4->3 and larger between 2->3
	* Changed the Scene Outliner to maintain selection when renaming & changed the name edit box changed to fully surrender focus to stop highlighting glitches
	* Changed the Scene Outliner to scroll to last selection when fully refreshing the view e.g. after adding an actor
	* Changed the tooltip to state Select Actors will replace the selection not append to it
	* FBX import options are now saved with the asset and reused when importing. This applies to static meshes, skeletal meshes, and animation sequences
	* The Content Browser "New" menu can no longer be larger than half the screen height
	* Converting actors will no longer re-label the actor
	* Map file errors are now a lot more descriptive as to the reason for failure
	* FBX is now listed as the first option (if applicable) when presenting the export dialog to the user
	* RowName no longer gets forcefully modified if multiple assets properties are shown merged
	* Variables Category ComboBox is automatically closed when a category is selected
	* Scene Outliner now selects (in the list) those actors who are selected (in the level) when opened
	* Quit dialog surpressed flag is now saved to the agnostic config
	* Asset naming error messages are now more accurate
	* Modified GenerateFilteredItems to be more accurate with regard to matching the users search term with an action
	* Create Destructible Mesh now guards against the the possibility of failure
	* Modified save package errors so that they refer to either a map or asset depending on what was saved
	* Lower area of the title bar is now selectable for movement
	* Editors Windows list is now listed alphabetically
	* Additional guards against invalid index checks
	* Replaced occurrences of 'exists in package' with 'exists in file'
	* Editor URLs are now data driven
	* Move selected actors code no longer assumes that there are any selected actors
	* GetAttachedActors now checks to see if an actor was NULL before adding it to the list

* **World Browser**
	* Added parent->child relationships between levels
	* Level position in the world stored relative to the parent level
	* List and folders view was replaced with levels hierarchy view
	* Added distance based level streaming
		* Streaming distance can be specified for each world layer
	* Added preview(highlight) of potentially visible streaming levels from a specified world position (**Alt + MousePosition**)
	* Levels positioning now happen at point when level is added to the world instead of post loading stage
	* Levels which are far enough from the world origin get hidden(shelved) instead of forcibly unloaded and automatically shown (unshelved) when close enough to the world origin
	* Added AlwaysLoadedLevel tag for levels. Tagged levels are automatically loaded when user opens a world in the editor
	* Recomposed demolet world using parent->child relationships
	* Tiles with non-editable levels will be shown in disabled state (grey out)
	* Added ability to add/remove streaming levels by drag and drop operations in hierarchy view
	* Added ability to open a world composition in the game  (`/Game/Maps/MyWorldRoot?worldcomposition`)
	* Added ability to specify a world composition as a default map to load in the editor
	* Added ability to move levels by arrow keys
	* World origin shifting now works in SIE too
	* Enabling/disabling WorldBrowser in editor preferences does not require editor restart to take effect

* **Level Streaming**
	* `UWorld::UpdateLevelStreaming` now updates streaming objects in the persistent world and in all visible streamed-in levels.
	* Now it is possible to have several streaming objects referring the same level
	* Level gets unloaded/hidden only if all referring streaming objects command to unload/hide it

* **Landscape**
	* Added callback for a material finishing compiling and use it instead of testing the shader map pointer in the landscape editor mode and landscape layer thumbnails code
	* Optimized Landscape NavMesh generation 
	* Added an offset to the editor grid in the perspective viewport to prevent it Z-fighting with the New Landscape grid and ground floor planes

* **Profiler**

####Gameplay and Framework
* **Physics**
	* PhAT context menu for bodies tidied up - unfix and delete options added for single bodies
	* Added World option to **bShouldSimulatePhysics** - you can enable/disable using this option
	* Exposed simulation tolerance values
	* Editor level viewport has collision on by default for StaticMeshComponent, SkeletalMeshComponent, BrushComponent
		* By default it enables "Query Only" collision

* **Optimization** 
	* Component Attach optimization: **UseAttachParentBound**
 
* Arrays now saved to the config in the same order that they were loaded
* Moved sprite components from ALight actors into ULightComponent


####Online
* Added the stub module for GameCenter OnlineSubsystem
* Added the stub module for Facebook OnlineSubsystem


####Rendering
* GPU sprites now account for emitter origin and rotation
* Texture preview tool displays unwrapped cube textures with correct aspect ratio
* Made Lightmass more tolerant of lightmap overlaps. A tolerance of 1% must be exceeded before it reports an error
* Fog is not rendered in views with an orthographic camera
* Texture preview tool no longer clamps HDR textures. Exposure control now reveals HDR detail
* Reduced memory requirements of DX11's RHIReadSurfaceFloatData by a factor of 8x
* Renamed some properties in directional light to be more clear
* Exposed/renamed settings for cascade shadow maps to tweak fading between dynamic and static
* Added **VisualizeTexture** support for MSAA textures
* Pause in game is now pausing MotionBlur properly (useful for working on MotionBlur quality)
* Some SystemSettings have now been exposed as console variables:
	* `r.UseVSync` 
	* `r.MaxAnisotropy`
	* `r.MaxShadowResolution`
	* `r.ParticleLODBias`
	* `r.SkeletalMeshLODBias`
	* `r.TranslucencyLightingVolumeDim`
	* `r.DetailMode`
* `r.UseTextureStreaming`(Note: got renamed to `r.TextureStreaming`) has also been introduced and texture streaming is now toggleable at runtime
* Improved lightmap mipmap generation
* **bFlipGreenChannel** is now preserved on textures during re-import or overwrite while keeping settings
* **Swapped ClampMin and ClampMax** usage in Material Expressions Clamp
	* **Note:** Any Materials whose 'Clamp' node was modified between CL 1672610 (03/06/2013) and 1706681 (25/06/2013) will need verifying as the ClampMin and ClampMax values were swapped in the earlier changelist, but pre-existing assets weren't guarded against this until the latter


####Platform
* Cooked platforms cannot run project-based (other than themselves) if the binaries is not a GameAgnosticExe
	* This is due to the game potential overriding default classes (ie QAGameInfo) and those classes referencing assets not available to the project file
* Freetype2 update (2.4.12) 
* When you attempt to build a target for an unsupported platform, UBT will throw a build exception w/ a message like this: <Target> does not support the <platform> platform
* Cleaned up creation of DynamicRHI (split code into platform-specific files) 
* Added RHISupportsTessellation(EShaderPlatform) function to replace just checking if SM_PCD3D_SM5
* Porting the engine and the editor to Mac


####Animation and Persona
* LoD settings window now functions correctly after re-importing the mesh
* Persona mesh LoD setting now changes to "Auto" if the currently selected LoD is deleted
* The floor in Persona is now placed at the bottom of the bounding box of the mesh, rather than at the origin, so it no longer intersects the mesh
* Currently selected bone renders in the "selected item" color in the Persona viewport
* Click in empty space in the Persona viewport will deselect any sockets/bones
* Scrubbing the animation timeline slider will now update animations in real time, rather than when the mouse click is released
* FBX is now an export option for AnimSequences in the Content Browser (as well as in Persona as previously)
* Delete key can now be used to delete selected sockets and attached assets in the Persona skeleton tree
* Skeleton sockets can now be attached to in the Scene Outliner
* **Set Mesh Root Translation** option removed from Persona viewport
* **Delete All Bodies** in PhAT now only requires a single action to undo/redo
* **Import LoD** in Persona now functions correctly
* Persona now informs the user when the current action will result in the Skeleton needing to be saved (changing the default mesh)
* Persona will display the error log if there are errors
