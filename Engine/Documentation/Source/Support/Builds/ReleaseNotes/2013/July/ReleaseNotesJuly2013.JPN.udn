INTSourceChangelist:3367470
Title:2013 年 7 月リリースノート
Crumbs:%ROOT%, Support/Builds
Description:
Availability:Licensee
Parent:Support/Builds
Order:-7

[TOC(start:2 end:2)]

## ビルド情報


[REGION:simpletable]
| アイテム | 情報 |
| ---- | ---- |
| **ラベル** | QA_APPROVED_UE4_BUILD_2013_07 |
| **チェンジリスト #** | 1735924 |
| **VISUAL STUDIO VERSION** | Microsoft Visual Studio 2010 version 10.0.40219.1 SP1 Rel |
| **DIRECTX** | June 2010 |
[/REGION]

## 重要情報

 * 現時点のエンジン開発ロードマップ: [UE4 Roadmaps](https://udn.unrealengine.com/questions/topics/roadmap.html)
 * QA ビルド ディレクトリへの変更: [July 2013 QA Build Directory Changes](https://udn.unrealengine.com/questions/170530/qa-build-directory-changes-201307.html)
 * 修正されたバグ： [UE4 Fixed Bugs July 2013](UE4_Fixed_2013_July.xlsx)
 * 周知のバグ： [UE4 Outstanding Bugs July 2013](UE4_Bugs_2013_July.xlsx)


## 主要な新機能

####エディタ ツール
* **プラグイン エディタ**
	* プラグインの表示、ブラウズ、管理を可能にするインターフェースが新登場しました。ビルトインされたタイプとゲーム プロジェクトにインストール済みのタイプの両方です。     
		![](pluginsEd.png)
	* カテゴリのブラウズ、検索 / フィルタ、プラグインの有効化 / 無効化、アンインストールをすべてこのインターフェースで行うことができます。
* **New PlayerController と Mouse Interface Events**
	* 新しいマウス インターフェース / カーソル システムが、PlayerController によって実装されました。  
		![](nc1.png)
	* ShowMouseCursor はシステムを有効化し、インゲームの場合にデフォルトのマウス カーソル表示を開始します。注記: Play in Viewport では動作しません。Play in New Window を使う必要があります。
	* オブジェクトに "触る" ために、インターフェースは非常にシンプルな入力タッチ イベントとインデックスを使用します。  
		![](mc2bpnode.png) ![](mc2bpnode2.png) ![](mc2bpnode3.png)
* **プレースメントブラウザでボリュームを追加する**
	* プレースメントブラウザで様々な種類のボリュームを置くことができるようになりました！  
		![](PBVolume.png)(h:480)
* **Play In Interface の改善点**
	* [Play In] ボタンの表示を薄くして、現在アクティブな Play モードが強調されるようにしました。
	* PlayInNewProcess を PlayOn to Play In から移動させて、メニューの構成も変更しました。  
		![](playin.png)

####ブループリント
* **ブループリントでのボーン操作**
	* ボーンを直接操作するブループリント関数する新しいコンポーネント (PoseableMeshComponent) が追加されました。  	 
		![](BPbones.png)(h:480)
	* スケルトンのボーンの位置/回転/スケーリング + リセット関数を、直接ゲット / セットできるようになりました。


## 新機能の追加

####ブループリント
* ブループリントが何も値を返さない関数を呼び出した場合、呼び出しが無効のターゲットであれば 'Access None' ログが生成されなくなりました。
* ブループリントのデバッグ処理が改善されました (実行シーケンスがデバッグ可能になり、 非純粋関数のブレークポイントで再発したバグが修正されました)。
* ブループリントの親の変更をすると、ブループリントから新たに警告が出されるようになりました。
* Level ブループリントまたはアクタのブループリントからの参照状態を表示してユーザーが対処できるように、アクタの削除時のチェックを追加しました。
* グラフの種類を区別してレンダリングを簡素化するために、ブループリント エディタにアイコンが追加されました。


#### サウンド
* Reverb 設定をリバーブ ボリュームなしに指定できるようになりました。


####コア
* UENUM とその値がツールチップにコメントを表示するようになりました。これらはプレフィックス付きのコメントである必要があります。
* Redistributable (再配布が可能な) プラグインへのサポートを追加しました。
	* モノリシック (単一) ビルドの場合、プラグインがメインの実行ファイルとリンクしている静的なライブラリをビルド時に生成するようになりました。
	* これらのライブラリのソースコードが存在しない場合、 lib/dll ファイルはコンパイル済みで、何かしらリンクがあると見なされます。
*コードブロックがログを実行し、モニタリングロードに使われる時間を出力する SCOPE_LOAD_TIME マクロを追加しました。
* コンテナ、文字列、アロケーター上のセマンティクスを移動することで、一時的なコンテナのコピー (値でそれらを返す関数) が最適化されます。
	* 移動操作を明示的にトリガーする `MoveTemp` (`std::move` と同等) もあります。
* 他のクラスからオブジェクトが (クラス リダイレクトで) ロードされている時の Notify 関数 `UObject::LoadedFromAnotherClass` を追加しました。
	* 1 スレッド (`-singlethread` コマンドライン パラメータ) だけでエンジンを起動する機能を追加しました。
	* DDC pak を任意の数だけマウントする機能を追加しました (`DDC.MountPak` および `DDC.UnmountPak` コンソール コマンド)。
	* DDC pak ファイルの 2GB の制限を取り除きました。


####エディタ ツール
* **スレートと UI**
	* テキスト自動ラップ サポートを STextBlock (新しい **AutoWrapText** 属性) に追加しました。 
		* テキストをラップして、ウィジェットが利用できるスペースを自動調整する機能です。 
		* 重要な注意事項があります。詳細はパラメータのコメントを見てください。
	* タッチスクリーン プラットフォーム用 (`-faketouches`/`-simmobile` を付ければデスクトップ用) にスレート バーチャル ジョイスティック (初回パス) を追加しました。

* **エディタ**
	* アクティブになっているプロジェクトの名前が、タイトル領域の一番右側に表示されるようになりました。
	* 主要なタブだけではなく、すべてのタブに [Close (終了)] ボタンを追加しました。
	* "Select All Brushes" を右クリックのコンテキスト メニューに追加しました。
	* 実行時に SIE/PIE にスポーンされた一時的なアクタを隠すために、 Scene Outliner フィルタを追加しました。 
	* シーン アウトライナーのビューモードに [Show Only Selected (選択項目のみを表示)] を追加しました。 
	* 他のフィルタと機能をもう少し控えめにするために、 Scene Outliner コードの幾つかをリファクタリングしました。 
	* シーン アウトライナーに、常にアクタ数が表示されるようにしました。
	* スクロールバーのスクロール領域をクリックすると、ビューがスクロール位置にスナップし、ドラッグでそのままスクロールが継続できるようになりました。
	* アクタの名前変更を、シーン アウトライナーの中でインラインで行えるようになりました。
	* 現在のストリーミング方法では、現在選択中のレベルと一致するオプションの横にチックが表示されます。
	* [Open Project] ダイアログの表示が抑制可能になりました。
	* 「変換」操作をするターゲット クラスの選択時に、どのクラスがターゲットなのか分かりやすくするために、ツールチップをクラス アイテムに追加しました。
	* Replace Actor With を使う時にペイントされたメッシュ頂点カラーが保存され、新規アクタに互換性のあるアセットのメッシュ コンポーネントが含まれるようになりました。
	* 既にマチネの一部となっているアクタが、次に続くマチネに追加されないようにするチェックを追加しました。

* UnrealBuildTool:* Visual Studio 2013 のサポートをプロジェクト ファイル ジェネレータに追加しました。 
	* これらのプロジェクトの作成には `GenerateProjectFiles.bat -2013` を使います。VS 2013 をコンパイルにはまだ使用できません。ご注意ください。

* **プロファイラ**
	* 複数のインスタンスの初期サポートを追加しました。ユーザーは一度に複数のインスタンスをキャプチャ/ プレビューすることができます。
	* プロファイラの安定性が若干改善されました。

* **ランドスケープ**
	* `PDI->DrawLine()` が DepthBias をサポートするようになりました。
	* メッシュが何も選択されていない場合、分かりやすくて選択しやすいように、ランドスケープ スプラインがエディタ内のシンプルな平面メッシュでレンダリングされるようになりました。
	* マテリアルをランドスケープ上にドラッグ / ドロップできるようにしました。


####ゲームプレイとフレームワーク
* **物理**
	* PhAT に、Bodies と Constraints 用に 2 つの異なるワークフローができました。ツールバー ボタンでモードを切り替えます。
	* SkeletalMesh Partial ラグドールがサポートされるようになりました。
		* それぞれのボディが PhAT の Fixed/Unfixed/Default を定義します。
		* シミュレーションとブレンディングが別々の操作になりました。シミュレーションを停止しても、なお物理へのブレンディングは行われます。
		* インスタンスに対しては、 BodyInstance ごとに **PhysicsBlendWeight** を修正することができます。

* **DisplayAllLocation** コマンドと **DisplayAllRotation** コマンドを追加しました。 
	* UE3 の `displayall [actorclass] location` および `displayall [actorclass] rotation` のように使用します。
* アクタに対する **AutoReceiveInput** のように、ポーンが **AutoPossess** に対してフラグを立てられるようにしました。
* **Replication** RepNotify:レプリケートされたプロパティの以前のローカル値を取得できるようになりました。[link](https://udn.unrealengine.com/questions/168304/repnotify-how-can-i-find-the-previous-value-of-a-r.html)


####プラットフォーム
* ほとんどのプラットフォームに対して APEX Clothing サポートを追加しました。
* 次の関数を Generic PlatformProperties に追加しました。
	* **SupportsFastVRAMMemory** - プラットフォームが高速の VRAM パスをサポートしていれば true、いなければ false を返します (デフォルトは false です)。
* TexCreate と BUF ヒント フラグ `*_FastVRAM` を追加しました。
	* テクスチャまたは頂点 / コンスタント バッファに利用できる場合、FastVRAM を使用するための RHI に対するヒント
* デフォルトの FFastVRAMAllocator クラスを追加しました (デフォルト状態では何もしません)。


#### レンダリング
* プリミティブのユニフォーム バッファに、ローカル空間領域が含まれるようになりました。
* マテリアル システムがローカル空間領域へアクセスできるように、 **ObjectLocalBounds** エンジン マテリアル関数を追加しました。
* **Alpha** の新しい Texture 圧縮タイプを追加しました。(単一チャンネルです。ガンマ補正ではありません。)
* キューブまたは 2D テクスチャからの **Create Static Texture** が HDR (float16) ソース テクスチャをサポートします。
* Microsoft の新しいシャドウ手法がデフォルトで有効になりました (前の `r.shadow.method 0` に戻る)
	* 少なめのドローコール 
	* よりシンプルなコード
	* z-距離ベース (以前は放射状でした) 
	* カスケードのスムーズな切り替え 
	* シャドウ バイアスの改善と併せて、動的シャドウの品質もかなり改善されました。
* 前方レンダリング (ES2) パスが、 HDR、露出、ブルームをサポートするようになりました。
* **MinRoughness** ライト パラメータ (フィルライトに非常に便利) を追加しました。


####アニメーション / ペルソナ
* Animation ブループリント、 モンタージュ、 ブレンドスペース、AnimOffset アセットを、コンテンツ ブラウザのコンテキストメニューを使って、スケルタルメッシュから直接作成できるようになりました。
* AnimGraph で Export to Animation 機能がサポートされるようになりました。
	* 現在の anim graph をアニメーションへエクスポートできます (下体 / 上体の分割またはスプリングの場合に便利です)。
* スタティック メッシュ エディタでソケットを複製することができます。
* StaticMesh/SkeletalMesh 以外のコンポーネントに対して、ソケットが選択できるようになりました。
* ペルソナでのモード変更の間、現在再生中のアニメーションを繰り越します。
* モード スイッチの全オプションに対して、ビューポート ステートが確実に更新されるようになりました。



##アップグレード ノート

####ブループリント
* Blueprint inheritance (blueprints of blueprints) has been officially enabled!You will now be able to create a blueprint of a blueprint, either by selecting the parent class in the class browser when creating a new blueprint, or by right clicking on a blueprint in the Content Browser, and selecting "Create child of this blueprint..."
* Blueprints now properly support TWeakObjectPtrs, and UFUNCTIONS that use them as parameters are now safe for execution
* Blueprints can now set by-reference variables.This is useful for functions that pass parameters by reference that need to manually manipulate the value of those parameters internally
* Scrollbar added to the asset tree for Creating Blueprints
* Renamed VimBlueprint to AnimBlueprint and VimInstance to AnimInstance.Updated variable names/comments to reflect removal of word "Vim"


#### サウンド
* Created new Sound Class editor - it's advised that all SoundClasses are loaded and re-saved to ensure that all SoundClasses will only have a single parent
	* Log Warnings are generated for any loaded SoundClasses that have multiple parents, before they are forced to have a single parent
	* Use these warnings to make sure that SoundClasses have the desired parent, as they will just be processed in alphabetical order and may not be what you expect
	* The new editor does not save the positioning of SoundClasses, they are arranged automatically every time one is opened in the editor
* SoundCue actor now has Find in Content Browser option


####コア
* FString has been refactored
* FString does not inherit from TArray any more 
* `InStr` has been replaced by `Find()` and `Contains()` has been added ( **NOTE:Parameters and their defaults have changed!!!** ) 
* Parameters of Split function changed 
* EndsWith, StartsWith, Replace, ReplaceInline and MatchesWildcard take a ESearchCase as second argument instead of a bool now 
* Changed the default behavior of string functions to ignore case 
* Moved all FFilename functions to FPaths and made them static.They work directly on strings now
* Removed FFilename type 
* Added FPaths::Combine() with overloads for up to 5 parameters 
* Replaced path concatenation operator `*` and `*=` with `/` and `/=` 
* Moved FPaths from CoreMisc.h/.cpp to Paths.h/.cpp
* USTRUCTs are no longer allowed to contain UFUNCTIONs
* `TPreallocatedArray<Type, Count>` has been removed as dangerous.  `TArray<Type, TFixedAllocator<Count> >` should be used instead
* `FQuat::operator-` has been removed as its implementation was unintuitive.Licensees will need to change all existing references to `FQuat::Inverse()` which is equivalent
* Deprecated the TemplateMapMetadata asset type
	* Template maps are now configured in the `[/Script/UnrealEd.UnrealEdEngine]` section of DefaultEngine.ini (see BaseEngine.ini for an example)
	* If your game has any TemplateMapMetadata assets, use the text filter in the content browser to find and remove them
* Deprecated CurveEdPresetCurve asset type
	* If any instances of this asset are in your game, use the text filter in the content browser to find and remove them
* Plugins now must be enabled before they are loaded.To enable a plugin, add it to the EnabledPlugins list in the `[Plugins]` section of your DefaultGame.ini file
* TContainerTraits has been renamed to TTypeTraits
	* This is because there is a new TContainerTraits traits class which represents the traits of containers, whereas TTypeTraits represents the traits of container elements
	* If you have any TContainerTraits specializations of your own types, you should change these to specialize TTypeTraits instead
	* The **NeedsConstructor** trait is now called **NeedsCopyConstructor** to distinguish it from **NeedsMoveConstructor**


####エディタ ツール
* **エディタ**
	* The signature of CalcCamera and some other internal camera methods has changed (switching over to use the FMinimalViewInfo struct instead of loose variables, etc...)
	* Added support to GET_MEMBER_NAME_CHECKED for bitfields
	* Extensibility improvements:
		* Made it possible to register a custom pin factory in addition to a custom node factory 
		* Added UWorld lifecycle delegates 
		* Added a virtual APlayerController::GetAudioListenerPosition
	* Matinee curve track now displays correctly when first added
	* When the Check Out Assets windows appears, the Check Out Selected button is now is focus and pressing enter will select that option
	* Undo/Redo for Matinee keyframe Set Time
	* Level Editor widget now allows negative scaling of an object
	* Cursor is restored to its initial position when scaling or rotating an object with the Level Editor widget
	* Streaming Volumes menu options moved to a sub-menu within the Levels section of the Levels menu
	* Improved error message when a package fails to save
	* Selecting the Actor in the Matinee group now selects the actor in the Scene Outliner
	* An error message is now displayed when attempting to add a Matinee track for an actor that has no properties of that type
	* Scene Outliner now displays a second icon for the Actors Component Mobility variable

* **ランドスケープ**
	* Enabled Retopologize tool + XYOffset
	* Added cooked PhysX data to LandscapeMeshCollision component


####ゲームプレイとフレームワーク
* **Support for short package names has been removed from ini files, this includes section names**
	* This means that class sections like `[Engine.GameEngine]` will now have to be renamed to `[/Script/Engine.GameEngine]`
* AEnvironmentVolume has been removed
* Input bindings now specify whether the input should been consumed per binding instead of per component.Instead of the component having ConsumeNone/Bound/All each binding now has a bConsumesInput boolean specifying if it consumes that input and the component has a boolean bBlocksInput indicating that it blocks subsequent components from receiving input (equivalent to ConsumeAll previously)
* FGameWidgetWorldContext renamed to FGameWorldContext
* Renamed various MovementComponents to match naming conventions: 
	* Character
	* Rotating
	* Projectile
	* Vehicle
	* Shooter
* Introduced an option for game-specific code to define custom navigation system class (derived from UNavigationSystem)
* **Collision Profile Refactor**
	* ECC_WorldTrace is gone, use ECC_Static if you're looking for stationary geometry (Movement channel is ECC_Static and Mobility is not Movable)
	* Global default is defined via code and INI file.Global default isn't all block anymore
		* Changed syntax of default channel define to include default response (global default)

				+CustomTraceChannel=(Channel=GameTraceChannel1, Name=Interact, Response=Ignore)
		* Removed DefaultResponse from Profile definition but it starts from global default.
	* CollisionResponse data structure has changed to allow only modified channels from global default (note this isn't CDO value but global default)
	* More changes are coming!
* **Deprecated UPhysicalMaterialProperty**.PhysicalMaterial now contains general enum value you can modify in DEFAULT.INI
	* Engine now has EPhysicalSurface enum that can be customized by each project
	* Deprecated UPhysicalMaterialProperty and every child classes  
	* Example in the `DefaultEngine.INI`:

			[PhysicalMaterial.SurfaceTypes]
			SurfaceType1=Asphalt
			SurfaceType2=Dirt
			SurfaceType3=Water
* MeleeRange variable has been removed from APawn.If you're using it in your local pawns, you need to put it in the derived class for your game
* **Removed PhsyicsWeight in SkeletalMeshComponent**.Use `bBlendPhysics` or define `PhysicsWeight` for each BodyInstance


####Online
* Typo fixed in OnlineSubsystemLive which referenced Steam
* Brought HTTP into the platform layer:
	* Each platform now has its own http request/response
	* Note some platforms are not yet implemented and use GenericPlatformHttp


#### レンダリング
* Made new console variable flag ECVF_RenderThreadSafe to get the state propagated to the render thread (in order with other render thread commands), does not work for other threads
* Ambient cubes will now lerp instead of add when combining more than one post process volumes
* Removed additive lighting terms for future iteration


####プラットフォーム
* Changed PrepTargetForDeployment function to take the TargetRules object rather than just the TargetType 
* Renamed D3D11Drv to D3D11RHI
* Merged all D3D11 RHIs into a single module
	* Deleted WinRTRHI


####Animation and Persona
* Undo/Redo for Static Mesh Editor Socket property changes
* Undo/Redo for Static Mesh Editor Socket deletion



## 継続事項と改善

####Analytics
* Engine analytics improvements:
	* Improved error reporting
	* Tracking which keybindings are remapped
	* Tracking OS language and GPU driver version
	* Tracking new blueprint class creation
	* Tracking "up time" of major sub-editor tools


####ブループリント
* The root component in a blueprint can no longer have a transform applied to it
* New functions can no longer be marked pure when editing Blueprint interfaces
* The DELETE key can now be used to remove selected items from the My Blueprint tab in the Blueprint editor
* Performing undo/redo actions in rapid succession no longer spams the workspace with notification pop-ups
* IsValid node will correctly appear when dragging off a UObject subclass pin
* Can no longer modify categories of variables which are inherited
* Transform widget is now hidden in the Blueprint component editor when the root component is selected
* Floating point values now show less trailing zeros
* Revised results returned from Find Instances for variables so only relevant results are shown
* Added title to the blueprint re-parent menu when accessed via the window menu
* Added an option for promote to variable for dragged pins


#### サウンド
* Enveloper node now has modulation settings
* Sound is no longer paused when right clicking in the content browser


####コア
* Added command line `AllowStdOutLogVerbosity`.This will print every log with a verbosity >= Log to stdout if you run the `* -Cmd.exe`
* New Plugin Descriptor changes 
	* Many new fields were added to plugin descriptors.(Documentation update coming soon!)
	* Plugins can now have a Resources sub-folder (for Icon128.png thumbnail)
* Simplygon now compiles into VS 2012 builds
* DLL Version compatibility is now tested before any module is loaded via `FModuleManager::LoadModule`
	* Modules that are discovered in FindModules are now checked for compatibility with the current engine version before they are added to the list
* The VSAccessor can now open solution file paths where there is a space in the path
* After creating a c++ project with the "New Project" dialog, visual studio will open instead of the editor.Also added some stronger testing to make sure you can actually build a c++ project
* When a project fails to auto-load, auto loading is now disabled until the editor is successfully loaded again
* The new project dialog is now a wizard where the first page is selecting a template and the second page is the name and location
* Content Browser filters reset when syncing to an asset only if the filters would prevent that asset from being displayed
* The default location for a project is now in a folder inside of My Documents instead of directly in My Documents
* Added some failsafe code to prevent UAsset files from being added to perforce in text format
* Added collection error handling for working with SCC collections when the server is not available
* General container optimizations


####エディタ ツール
* **スレートと UI**
	* Working on improving the Slate style system

* **エディタ**
	* Improved performance of starting up Play in Editor and Simulate sessions
	* Most menu and tool-tip animations are now skipped except when framerate is acceptable
	* Removed Scene Outliners border padding when in PIE/SIE mode
	* Color picker's eye-dropper mouse pointer is now shown outside the picker window when active
	* PromptForCheckoutAndSave window remembers which packages were unchecked by the user
	* Point the Consolidate window at the proper radio button style so entries get icons
	* Updated the radio button icons & styles
	* Improved mesh painting performance by reducing time spent calculating the changes and painting into the texture
	* When using **Select Actors Using This Asset** made sure assets are tracked to their actual owner, not the parent of the Actor
	* Suspend the autosave notification & feature while a popup menu is active
	* Made Property Matrix more fault tolerant by sorting entries without a matching enum name to the end of the list
	* Changed the sort in the Property Matrix table to compare enum names alphabetically rather than by byte values
	* Evened out difference between camera speeds 1-3 to provide a smaller jump 4->3 and larger between 2->3
	* Changed the Scene Outliner to maintain selection when renaming & changed the name edit box changed to fully surrender focus to stop highlighting glitches
	* Changed the Scene Outliner to scroll to last selection when fully refreshing the view e.g. after adding an actor
	* Changed the tooltip to state Select Actors will replace the selection not append to it
	* FBX import options are now saved with the asset and reused when importing.This applies to static meshes, skeletal meshes, and animation sequences
	* The Content Browser "New" menu can no longer be larger than half the screen height
	* Converting actors will no longer re-label the actor
	* Map file errors are now a lot more descriptive as to the reason for failure
	* FBX is now listed as the first option (if applicable) when presenting the export dialog to the user
	* RowName no longer gets forcefully modified if multiple assets properties are shown merged
	* Variables Category ComboBox is automatically closed when a category is selected
	* Scene Outliner now selects (in the list) those actors who are selected (in the level) when opened
	* Quit dialog surpressed flag is now saved to the agnostic config
	* Asset naming error messages are now more accurate
	* Modified GenerateFilteredItems to be more accurate with regard to matching the users search term with an action
	* Create Destructible Mesh now guards against the the possibility of failure
	* Modified save package errors so that they refer to either a map or asset depending on what was saved
	* Lower area of the title bar is now selectable for movement
	* Editors Windows list is now listed alphabetically
	* Additional guards against invalid index checks
	* Replaced occurrences of 'exists in package' with 'exists in file'
	* Editor URLs are now data driven
	* Move selected actors code no longer assumes that there are any selected actors
	* GetAttachedActors now checks to see if an actor was NULL before adding it to the list

* **World Browser**
	* Added parent->child relationships between levels
	* Level position in the world stored relative to the parent level
	* List and folders view was replaced with levels hierarchy view
	* Added distance based level streaming
		* Streaming distance can be specified for each world layer
	* Added preview(highlight) of potentially visible streaming levels from a specified world position (**Alt + MousePosition**)
	* Levels positioning now happen at point when level is added to the world instead of post loading stage
	* Levels which are far enough from the world origin get hidden(shelved) instead of forcibly unloaded and automatically shown (unshelved) when close enough to the world origin
	* Added AlwaysLoadedLevel tag for levels.Tagged levels are automatically loaded when user opens a world in the editor
	* Recomposed demolet world using parent->child relationships
	* Tiles with non-editable levels will be shown in disabled state (grey out)
	* Added ability to add/remove streaming levels by drag and drop operations in hierarchy view
	* Added ability to open a world composition in the game  (`/Game/Maps/MyWorldRoot?worldcomposition`)
	* Added ability to specify a world composition as a default map to load in the editor
	* Added ability to move levels by arrow keys
	* World origin shifting now works in SIE too
	* Enabling/disabling WorldBrowser in editor preferences does not require editor restart to take effect

* **Level Streaming**
	* `UWorld::UpdateLevelStreaming` now updates streaming objects in the persistent world and in all visible streamed-in levels.
	* Now it is possible to have several streaming objects referring the same level
	* Level gets unloaded/hidden only if all referring streaming objects command to unload/hide it

* **ランドスケープ**
	* Added callback for a material finishing compiling and use it instead of testing the shader map pointer in the landscape editor mode and landscape layer thumbnails code
	* Optimized Landscape NavMesh generation 
	* Added an offset to the editor grid in the perspective viewport to prevent it Z-fighting with the New Landscape grid and ground floor planes

* **プロファイラ**

####ゲームプレイとフレームワーク
* **物理**
	* PhAT context menu for bodies tidied up - unfix and delete options added for single bodies
	* Added World option to **bShouldSimulatePhysics** - you can enable/disable using this option
	* Exposed simulation tolerance values
	* Editor level viewport has collision on by default for StaticMeshComponent, SkeletalMeshComponent, BrushComponent
		* By default it enables "Query Only" collision

* **Optimization** 
	* Component Attach optimization:**UseAttachParentBound**
 
* Arrays now saved to the config in the same order that they were loaded
* Moved sprite components from ALight actors into ULightComponent


####Online
* Added the stub module for GameCenter OnlineSubsystem
* Added the stub module for Facebook OnlineSubsystem


#### レンダリング
* GPU sprites now account for emitter origin and rotation
* Texture preview tool displays unwrapped cube textures with correct aspect ratio
* Made Lightmass more tolerant of lightmap overlaps.A tolerance of 1% must be exceeded before it reports an error
* Fog is not rendered in views with an orthographic camera
* Texture preview tool no longer clamps HDR textures.Exposure control now reveals HDR detail
* Reduced memory requirements of DX11's RHIReadSurfaceFloatData by a factor of 8x
* Renamed some properties in directional light to be more clear
* Exposed/renamed settings for cascade shadow maps to tweak fading between dynamic and static
* Added **VisualizeTexture** support for MSAA textures
* Pause in game is now pausing MotionBlur properly (useful for working on MotionBlur quality)
* Some SystemSettings have now been exposed as console variables:
	* `r.UseVSync` 
	* `r.MaxAnisotropy`
	* `r.MaxShadowResolution`
	* `r.ParticleLODBias`
	* `r.SkeletalMeshLODBias`
	* `r.TranslucencyLightingVolumeDim`
	* `r.DetailMode`
* `r.UseTextureStreaming`(Note: got renamed to `r.TextureStreaming`) has also been introduced and texture streaming is now toggleable at runtime
* Improved lightmap mipmap generation
* **bFlipGreenChannel** is now preserved on textures during re-import or overwrite while keeping settings
* **Swapped ClampMin and ClampMax** usage in Material Expressions Clamp
	* **Note:** Any Materials whose 'Clamp' node was modified between CL 1672610 (03/06/2013) and 1706681 (25/06/2013) will need verifying as the ClampMin and ClampMax values were swapped in the earlier changelist, but pre-existing assets weren't guarded against this until the latter


####プラットフォーム
* Cooked platforms cannot run project-based (other than themselves) if the binaries is not a GameAgnosticExe
	* This is due to the game potential overriding default classes (ie QAGameInfo) and those classes referencing assets not available to the project file
* Freetype2 update (2.4.12) 
* When you attempt to build a target for an unsupported platform, UBT will throw a build exception w/ a message like this: <Target> does not support the <platform> platform
* Cleaned up creation of DynamicRHI (split code into platform-specific files) 
* Added RHISupportsTessellation(EShaderPlatform) function to replace just checking if SM_PCD3D_SM5
* Porting the engine and the editor to Mac


####Animation and Persona
* LoD settings window now functions correctly after re-importing the mesh
* Persona mesh LoD setting now changes to "Auto" if the currently selected LoD is deleted
* The floor in Persona is now placed at the bottom of the bounding box of the mesh, rather than at the origin, so it no longer intersects the mesh
* Currently selected bone renders in the "selected item" color in the Persona viewport
* Click in empty space in the Persona viewport will deselect any sockets/bones
* Scrubbing the animation timeline slider will now update animations in real time, rather than when the mouse click is released
* FBX is now an export option for AnimSequences in the Content Browser (as well as in Persona as previously)
* Delete key can now be used to delete selected sockets and attached assets in the Persona skeleton tree
* Skeleton sockets can now be attached to in the Scene Outliner
* **Set Mesh Root Translation** option removed from Persona viewport
* **Delete All Bodies** in PhAT now only requires a single action to undo/redo
* **Import LoD** in Persona now functions correctly
* Persona now informs the user when the current action will result in the Skeleton needing to be saved (changing the default mesh)
* Persona will display the error log if there are errors
