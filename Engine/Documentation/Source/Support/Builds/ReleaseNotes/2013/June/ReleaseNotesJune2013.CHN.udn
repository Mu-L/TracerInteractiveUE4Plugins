INTSourceChangelist:6537038
Title: 2013年6月版本说明
Crumbs:%ROOT%, Support/Builds
Description:
Availability:Licensee
Parent:Support/Builds
Order:-8
Order: 52

[TOC(start:2 end:2)]

## 版本信息


[REGION:simpletable]
| 项目| 信息|
| ----| ----|
| **标签**| QA_APPROVED_UE4_BUILD_2013_06|
| **变更列表编号**| 1687979|
| **VISUAL STUDIO 版本**| Microsoft Visual Studio 2010 版本 10.0.40219.1 SP1 Rel|
| **DIRECTX**| 2010 年 6 月|
[/REGION]

## 重要信息

 * 当前引擎开发路线图：[UE4 路线图](https://udn.unrealengine.com/questions/topics/roadmap.html)
 * UE4 并行渲染路线图：[UE4 的并行渲染计划](https://udn.unrealengine.com/questions/168240/parallel-rendering-plans-for-ue4.html)


## 主要新功能

####蓝图
* **新的用户定义的列举资源**
	* 我的蓝图（MyBlueprint）控件中已添加新的“用户定义的列举”类别，包含当前蓝图中使用的所有用户定义列举。  
		![](UDEnumb.png)(h:360)  ![](UDEnuma.png)(h:360)

* **蓝图中的新物理关节和约束**
	* 现在可以将物理关节（约束）添加到蓝图！  
		![](constraints1.png)(w:480)
	* 通过蓝图编辑器中的组件（Components）菜单可向现有组件添加多种类型的组件，并且可通过详细信息（Details）面板中的组件变量创建“关节”或“约束”。  
		![](constraints2.png)


####编辑器工具
* **放置浏览器**
	* 使用此新组合浏览器，只能看到可以放置关卡的内容。  	
		![](PlacementBrowser.png)(w:640)
	* 扩展了控制方案，使资源放置更流畅，也更显眼！
	* 只需单击要放置的内容，然后在视口中单击要放置内容的位置，或按住 [CTRL] 键以快速放置多个相同对象。

* **新资源和 Actor 拾取器**
	* 添加的新控件对可以使用的资源类型按颜色编码；双击缩略图将打开显示资源的编辑器。  
		![](widget1.png)
		* 默认情况下，并非所有资源都显示缩略图，但可以使用新的 UPROPERTY 元数据标签 ShowThumbnail="true" 启用此功能。  
	* 新拾取器允许从内容浏览器拖放资源，还允许在内容浏览器和控件之间复制和粘贴资源。  
		![](widget3.png)
	* 拾取器甚至允许通过箭头和菜单底部的其他选项访问内容浏览器（Content Browser）菜单。  
		![](widget5.png)
	* 可以在主控件中复制“浏览（Browse）”，以便于访问。
	* 它甚至支持 Actor 属性的专用化，在单击组合按钮箭头时显示场景大纲视图。菜单中的“显示（Show）”项将视口聚集在相关的 Actor 上。

* **FBX 重新导入改进**
	* 已重构 FBX 代码，以便为静态网格体、骨架网格体和动画序列创建 UAssetImportData 派生类。  	
		![](FBXimport.png)(w:480)
	* 现在，从 FBX 导入资源时，创建时配置的导入选项已存储且可在每次重新导入时重复使用。
	* 这些选项可以在“资源导入数据（Asset Import Data）”属性的资源属性中进行编辑

####Gameplay 和框架
* **C++ 类向导**
	* 此功能允许添加新的父类，以便在游戏中推出新的 Pawn、角色、玩家控制器和其他游戏功能。  
		![](NCW.png)(w:640)
	* 已通过 **“文件（File）->将代码添加到项目...（Add Code to Project...）”** 调用。
		* 生成代码中的版权信息现在可在 ini 文件中配置。


####角色编辑器和动画工具
* **在角色编辑器中将 AnimSequence 转换为 AnimMontage 和 AnimComposite**
	* 现在，在角色编辑器中使用 AnimSequence 创建 AnimComposite 和 AnimMontage 时，可以使用上下文菜单选项。  
		![](Anim.png)(convert:false)
	* 只需选择 AnimSequence 并在内容浏览器中右键单击它，用户现在可以通过从菜单中单击鼠标创建 AnimMontage 和 AnimComposite 类型！


##新增内容

####蓝图
* 私有 UPROPERTY 上的 BlueprintReadWrite 或 BlueprintReadOnly 现在无效。请将其公开或保护起来。


####声音
* 已通过新的混响效果（Reverb Effect）资源类型公开混响设置。


####核心
* DisplayName 和 FriendlyName 现在是说明符关键字，不需要在 meta=(...) 块内指定。
* 仅包含 UENUM 的标头不会再导致编译错误。
* 如果提供空字符串，FFileHelper::SaveStringToFile 现在可以写入零字节文件。
* 不能在标头中使用 DEFINE_LOG_CATEGORY_STATIC。
	* 现在应在标头中指定 DECLARE_LOG_CATEGORY_EXTERN，并将相应的 DEFINE_LOG_CATEGORY 放置在相关的 .cpp 文件中。
* 添加了对 CrashDebugHelper 的 DepotName 访问权限。
	* 这允许用户指定库名，从而允许从任何分支调试小型转储。
* 在项目生成时为没有同步的用户正确处理缺少的文档文件夹。



####编辑器工具
* **地形：**
	* 添加了对 TerrainLayerSwitch、TerrainLayerBlend 和 LandscapeLayerBlend 材质属性类型的支持。
	* 已将地形添加到图元统计数据窗口中。
* 添加了与游戏无关的设置，以切换加载最近加载的项目。此功能现在也可供新用户使用，但默认为禁用状态。
* HighResShot 现在可以通过 OutputLog 在编辑器视口中工作。
	* 以“HighResShot 1920x1080”格式输入将按 1920×1080 像素创建每个关卡编辑器视口的屏幕截图。
	* 以 HighResShot 2 形式输入将以视口分辨率乘以 2 的像素创建屏幕截图。
	* 为生成的 UE4 解决方案文件“编译并运行”项目。
	* 现在，可以编译和运行的所有文件都位于新的“编译并运行”文件夹中解决方案的顶部。
* 添加了新的（与游戏无关）UE4Editor 和 UE4Game 目标。这些功能在您只想加载示例时非常有用。
* 添加了即时子菜单：
	* 已更改子菜单行为，现在可在鼠标悬停时立即打开。
	* 离开项目时子菜单不消失，但指向菜单时会消失。
	* 改进了打开子菜单时的响应能力。
* **Slate 和 UI：**
	* 改进了可编辑文本“界面外观”。
	* 添加了 Slate 工具提示缓存（消除了鼠标悬停在 UI 上时故障）。
* 内容浏览器中添加了新菜单选项，以允许用户从 AnimSequence 创建 AnimComposite 和 AnimMontage。
* 关闭选项卡后，左侧选项卡获得焦点。


####Gameplay 和框架
* 添加了将源代码文件添加到现有项目的向导。
	* 已通过文件（File）->将代码添加到项目...（Add Code to Project...）调用
	* 生成代码中的版权信息可以在 ini 文件中配置。
* 在 PlayerInput 中添加了新的反转系统。
	* 现在，可以调用 InvertAxis <AxisName> 以将所有输入反转为已定义的轴（例如，“InvertAxis 查找”将替换旧的 InvertMouse）。
	* 还可以使用 InvertAxisKey 反转特定轴按键（例如，如果只想反转鼠标查找，而不是摇杆，则可以执行“InvertAxisKey MouseY”）。
* 添加了新 Pawn：SpectatorPawn。PlayerController 玩家控制器使用 SpectatorPawn。
	* 已修复 DebugCameraController、LogVisualizer 和多个游戏控制器，以使用新的旁观者模型。
* 添加了刚体复制组件：StaticMeshReplicatedComponent 和 SkeletalMeshReplicatedComponent。
* 添加了可选择性将预定义标记烘焙到重新构建脱离网格体连接的功能，以实现快速过滤。
	* 添加了一种使用 RecastNavMesh 在路径距离控制中查询多边形的方法。
	* 推出了查询 RecastNavMesh 时要使用的命名过滤器。
* 推出了游戏特定代码的选项，以定义自定义导航系统类（从 UNavigationSystem 派生）。
* MatineeActor：bHidePlayer、bDisableMovementInput、bDisableLookatInput。
* 寻路网格体生成从任务图切换到 FAsynTask（在构建大型寻路网格体时不再拦截游戏线程）。


####在线
* 已通过 Mcp 服务实现按用户云存储。
	* 列举用户的可用文件列表。
	* 下载单个文件。
	* 将文件缓存到磁盘且仅在散列不匹配时下载。


####平台
* 为 IOS 添加/改进了对程序（如 SlateViewer）的支持。


####渲染
* 已合并灵活的深度/模具读/写访问权限（低级渲染功能）。
* 添加了 Speedtree 集成。
* 添加了立方体贴图场景捕获 Actor。
* 添加了立方体渲染目标的 HDR 导出。
* **材质和纹理：**
	* MaterialParameterCollection：
	* 定义参数集及其默认值的资源。
	* 材质可以通过 CollectonParameter 节点引用这些参数。
	* 蓝图随后可以在运行时有效地设置这些参数的值，且所有材质都会获得新值。
	* 可以用于实现全局材质参数或各级关卡参数，或仅用于在编辑器中便于预览大量材质更改。
	* 从集合中删除参数可能会同时破坏许多蓝图和材质，因此必须小心。
* **光照和阴影：**
	* Lightmass 解算器质量改进。
	* 平滑法线与其三角形法线匹配不佳的几何体不会再导致斑点明显的光照和冗长的构建时间。
	* 改成了为辐射缓存使用最小距离启发法，因为这样能够更好地实现干净的建筑光照，也可以消除导致瑕疵的无效最小半径。
	* 现在，通过光源的显式采样而非光子密度估计来计算最终聚集光线看到的直接光照，减少泄露并提高阴影过渡附近的第一次反射光照的准确度。
	* 现在，在多个线程上处理单个映射的辐射缓存填充和插值，如果有足够的线程，则可以大大减少在具有单个大映射的贴图中的构建时间。
		* 使用单个 512 光照贴图将构建时间缩短 5 倍。
	* 添加了低质量 HDR 定向光照贴图。删除了简单光照贴图。
	* 添加了 r.DumpShaderDebugInfo，当设置其为 1 时，将为编译的任何着色器转储调试信息。
	* 对于 D3D11，这是指源码预处理版本，如果已安装，则为调用 fxc 以编译为 D3D 程序集的批处理文件，以及调用 AMD GPUShaderAnalyzer 的批处理文件。


####动画/角色编辑器
* **角色编辑器：**
	* 已将“Additive 基础”（Additive Base）选项添加到角色编辑器视口中的显示（Show）菜单，以允许用户查看动画 Additive 基础姿势。
	* 现在可通过快捷菜单处理顶点变形目标删除。


	
##Upgrade Notes （以下内容仅供参考，不作翻译）

####Blueprints
* Blueprint classes that do cannot provide a world context from self can now be flagged in UCLASS metadata as "ShowHiddenSelfPins".  
	* This will show the WorldContextObject pin on nodes placed in the Blueprint graph where the class of the Blueprint is derived from the flagged class.  
	* Currently AnimNotify is the only Engine class flagged as such and any AnimNotify Blueprints will need to connect Component to the WorldContextObject input.
* Blueprint SkeletonGeneratedClasses are now transient.  
	* While this does not require any action on the user's part, if you have modified the blueprint system, make sure you do not save any references to the skeleton class.  
	* All serialized references should now point to the GeneratedClass, or they will be lost during save.


####Sound
* SoundModes renamed to SoundMix, now have the option to set a single Base SoundMix and push multiple SoundMix modifiers.
	* All SoundModes will need re-saving so that they will show up as SoundMixes in the Content Browser before they are fully loaded.


####Core
* Updated the config system in UE4 so that saved configs generated do not contain entries for those which match the coalesced entry from the source files hierarchy.
* Existing Visual Studio command-lines will not be preserved when generating new project files.
	* Remember to save them off before regenerating projects for this version of UE4.
	* This is because the folder that generated .vcxproj files are saved to has changed.
* The meta(...) syntax for metadata specifiers are no longer supported.  meta=(...) should be used exclusively.
* Comments on the end of a property (e.g. "float Property; // My float property") are no longer scraped for tooltip metadata and should be changed to be a comment before the UPROPERTY declaration.
* Multiple metadata keys with different values now causes an error.  Before this change, successive values would overwrite previous ones.
* Improved the filename checking when saving a map.


####Editor Tools
* UInterfaces are now more robust, and safely allow for both blueprint implementable events, as well as native functions. 
	* As a result, UInterfaces that are implemented in purely in blueprints (i.e. through the blueprint property's "Interfaces" section), can now only contain BlueprintImplementableEvents.  
	* UInterfaces that are blueprint accessible, but added in a native class (e.g. class UMyClass : public UObject, public IMyInterface), can have both BlueprintImplementable events and BlueprintCallable functions.  
	* The header generator will ensure that you can't create an interface that violates these criteria.
* **Landscape:**
	* Enabled PN-AEN and Flat crack-free tessellation.
	* Added LandscapeComponent vs CollisionComponent cross reference using lazy object pointer.
	* Prevented Gizmo deletion in Landscape EdMode.


####Gameplay and Framework
* BugIt implementation has moved from PlayerController to CheatManager.
* bInvertMouse and bInvertTurn as well as InvertMouse and InvertTurn exec functions have been removed from PlayerController (See New Feature for details on new invert system).
* bIsControllerConnected removed from PlayerController.
* Removed bCheck param from SetActorLocation. Use Teleport instead if you care about checking for overlaps at the destination when not sweeping.
* SpawnActor calls will need to be refactored because of change to the SpawnActor function.
* Anything accessing GamePlayers should instead either access a LocalPlayer via a GetWorld function. 
* **Physics:**
	* Big refactor of physics constraint system;
		* Moved all settings out of ConstraintSetup into ConstriantInstance.
		* Removed constraint setup classes.
	* Many classes that started with RB_.. are now Physics..
		* Moved a lot of classes into their own cpp files (PhysicsHandleComponent, PhysicsThruster, PhysicsContraintTemplate, PhysicsConstraintComponent, PhysicsConstraintActor, RadialForceComponent)
	* PhysicsHandleComponent has been refactored, has built-in smoothing.
	* Removed StallZ.
* DestructibleComponents now respond to damage outside a DestructibleActor.


####Online
* Extended support for FVector net quantization: [矢量网络量化](https://udn.unrealengine.com/questions/166428/vector-network-quantization.html)
* Merged the simple and streaming file server code into one. Updated the clientside code so that a streaming server extends the simple network server.


####Rendering
* **Post Process Effects:**
	* Atmospheric fog : handled situations when more than one fog layer exists.
* Reverted multiline TextRenderActor because of remaining issues - will be fixed later.
* Enabled SeparateTransluceny by default for all projects. More consistent, gives more control to the designer, slightly slower but allows scenecolor to be lower precision, translucency is no longer affected by Depth of Field unless feature is disabled in material setting.
* **Lighting & Shadows:**
	* Lightmass EnvironmentColor is now upper hemisphere only.


####Platform
* UnrealBuildTool now passes the name of the Mac that compiled the code to IPhonePackager, so you don't have to (and can't) set an IPP environment variable or change IPP code.
* Changed mobile provision files to go to ~/Library, not /Library, so no weird permissions are needed on Mac.



##Future Additions and Ongoing Efforts

####Blueprints
* Removing the last visible primitive component from a blueprint now reverts the blueprint back to a generic thumbnail.
* Newly-created Blueprints now open in Components mode instead of Graph mode.
* Made searching for Blueprint terms more robust... especially for functions in the math library.
* Split the Hide Unused Pins toggle option in the Blueprint editor into three options and moved it out of the toolbar and into the menubar (under the View option).
* Made FortPathFollowingComponent a BlueprintType.
	* Added blueprint exposed functions to PathFollowingComponent: GetPathActionType() and GetPathDestination().
		* The new functions allow the user to determine whether the path in question is full, partial, etc. and where the end-point of the path is.
* Blueprint Editor: Increased likelihood of finding a match for users Asset search by automatically handling camel case to sanitized variants. 
* Relabeled KISMET SCRIPTING ERROR to LEVEL BLUEPRINT ERROR. 
* Renamed EPET_Kismet to EPET_Blueprint. 
* Timeline missing error now clears once the timeline has been successfully added.
* Blueprints created via the class viewer now mark their packages as dirty again.
* Added support for per-node comments on state machine nodes.


####Sound
* Reverb volumes with extruded brush areas will now work correctly.
* Sound nodes in the SoundCue context menu are no longer prefixed with SoundNode.
* ClampMin and ClampMax meta tags are now used in the appropriate numerical format.


####Core
* MinimalAPI and RequiredAPI class flags are now copied to compiled-in classes so they can be queried at runtime.
* Working continues on new "AutomationTool" program that will be used to assist build system development and CIS testing.
* AActor::bNoDelete has been fully removed from the code base.
* WIP of the new system settings "Device Profile" system for UE4 along with appropriate tools.
* Unreal Build Tool is now built before it is invoked in the editor (For operations like recompile, generating project files, etc).


####Editor Tools
* **Landscape:**
	* Made landscape spline selection undo/redo-able, and fixed selection state of landscape splines outside the spline editor.
	* Disabled landscape editor in PIE/Simulate.
	* Landscape tool rendering performance improvements to improve interactivity in the editor
* **Slate & UI:**
	* Added FSlateApplication::GotoLineInSource. The format is FullFilePath|Line:Column.
	* Decreased the thumbnail size in the new project dialog and adjusted description wrapping.
	* Updated classes 40x & 256x icons, cropping & tweaks. PNG updates only, non-destructive check-in. 
	* Created new icons for BlueprintEditor functions @ 16px. Require further code hook-up to be used in editor. 
	* Created icons for multiple class types at 256px - require code hook-up, non-destructive check-in. 
	* Initial icon for BSP modes created @ 40px (assume 20px version will be code scale) . 
		* Requires additional code support to hook these up. Non-destructive checking - Change List is PNG assets only. 
	* First pass icons for placement mode created. Requires additional code support to hook these up. 
		* Non-destructive checking - Change List is PNG assets only. 
	* 16px icons for all the AtmosphericFog, SphereReflectionCapture, BoxReflectionCapture, DestructibleActor, Note, Pawn, Character, DefaultPawn actor classes. 
		* PNG assets only. Non-destructive check-in (requires code hook-up). 
* SCC state is no longer displayed in the content browser if source control is disabled.
* **World Browser:**
	* More zoom levels in World browser.
	* Fit levels selection to view (Home button) in World browser.
* Editor main menu arrangement has been improved!
* Only add the Asset menu to the menubar, if were editing an actual asset. 
* Updated World Props button to say World Settings, along with its tooltip 
* Error message popup for local collection creation failure is now parented to the collection view, rather than the collection list.
* Scene Outliner now supports selection and modification of PIE actors.
* Editor viewport grid size increment and decrement controls are now key-bindable.
* 'log list' in the console window is now sorted.
* When a project fails to auto-load, auto loading is now disabled until the editor is successfully loaded again.
* Solution files generated for uproject files are named after the .uproject file instead of the folder containing it.


####Gameplay and Framework
* Running generatedistillfilesets with no map tokens on the command line now assumes you want to use all map files.
* The new project dialog now produces an error if you do not have a compiler installed/available and you have a c++ template selected.  
* Input events/axis can be bound in PlayerControllers.
* ShapeComponent properties (SphereRadius, CapsuleRadius, etc) are now protected. Use Set/Get methods to access.
	* ShapeComponent GetScaled* and GetUnscaled* accessors added. In general most places should read the scaled values.
	* Many bugs related to using unscaled versions of ShapeComponents were fixed as a result. Character movement now works correctly for scaled capsules.
* Changed GetAxis to GetScaledAxis on FMatrix and FTransform.
* Small Optimization to code looping over AnimationNotifies on USkeleton.
* Removed several more GWorld references including the refactoring of a number of functions to significantly reduce the number of GWorld references where no obvious alternative context was available.
	* Also added a GetWorld to a number of classes that currently returns GWorld (this will make it simpler to remove the GWorld references in due course). 
* Revised SpawnActor and the associated templates. 
	* Most all of the parameters for these are now in a struct that can be passed to the SpawnActor function/template Made GamePlayers private and added accessors. 
	* Replaced many instances that previously used the players array to get a local player via a world.
* **Physics:**
	* Improved physics simulation by increasing solver iteration count.
	* Refactoring: Removed bCreatePhysicsState flag;
		* It only creates physics state if collision is on. 
		* If you need to create physics state without collision for query, please set bAlwaysCreatePhysicsState to true.
* Character movement improvements
	* Refactored lots of duplicate code for sliding along surfaces to use common SlideAlongSurface() or SlideAlongVerticalSurface() functions.
	* Changed sliding code to use smooth capsule normal, not the normal of the surface upon which we impact. 
		* Most notably improves sliding along corners of geometry.
	* We actually enforce MaxStepHeight now, based on the actual floor, not the floating base of the character. 
		* StepUp also used to allow steps up higher surfaces on the smoothed portion of the capsule, and we now check the height of the impact point when stepping up. 
		* Games will probably want to increase the default value to reflect the previous behavior.
	* StepUp code avoids placing the character on unwalkable (bad floor normal) surfaces. In the future we'll improve behavior when moving over low objects with unwalkable normals.
	* Floor sweep tests now avoid adjacent vertical surfaces to prevent false floor normals reported from hits with those surfaces. See ComputeFloorHeight().
	* Added SafeMoveUpdatedComponent() to MoveComponent that handles starting in penetration. 
		* If penetration is detected that blocks the move, it tries to move out and retry the original move.


####Online
* Dedicated server support updates
	* Fixed various code to support Steam's standalone dedicated server APIs
	* Made sure sound and audio devices are off for dedicated servers.
* Improvements to Windows platform hardware survey.
	* Survey is performed on first run and once per month thereafter.
	* Sustained editor performance (Programming/Slate framerate) is measured and recorded every time to editor is started.
	* Improved CPU, operating system and RAM stats.
	* Exposed hardware survey features if the engine for game-specific customization.


####Rendering
* **Materials and Textures:**
	* Visualizetexture now maps depth buffer to a more readable color range.
	* Cube textures are now correctly centered in the texture editor.
* **Lighting & Shadows:** 
	* Renamed multiple shadow cvars.
	* Added r.Shadows.FreezeCamera for shadow rendering investigations, colored shadow cascades.
* **Post Process Effects:**
	* Added r.exposureoffset to test if postprocessing features works as expected.
	* Added TemporalAA test materials to RenderTestMap (high frequency dithering using with TemporalAA enables some rendering tricks).
	* Manual setting of exposure in PostProcessVolumes etc now works in DX10. 
* Added random dither to HDR export to eliminate some banding issues.


####Platform
* Continued work on porting the engine and the editor to Mac.
* UnrealBuildTool can now copy the app bundle back to the PC if requested (only really useful for build machines checking in Mac executables).

