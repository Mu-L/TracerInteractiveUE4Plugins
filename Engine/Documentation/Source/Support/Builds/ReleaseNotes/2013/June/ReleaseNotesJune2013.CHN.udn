INTSourceChangelist:0
Title: 2013年6月份版本信息
Crumbs:%ROOT%, Support/Builds
Description:
Availability:Licensee
Template:ReleaseNotes.html

[TOC(start:2 end:2)]

## Build Info


[REGION:simpletable]
| Item | Info |
| ---- | ---- |
| **Label** | QA_APPROVED_UE4_BUILD_2013_06 |
| **Changelist #** | 1687979 |
| **VISUAL STUDIO VERSION** | Microsoft Visual Studio 2010 version 10.0.40219.1 SP1 Rel |
| **DIRECTX** | June 2010 |
[/REGION]

## Important information

 * Current Engine Development Roadmaps: [UE4 Roadmaps](https://udn.unrealengine.com/questions/topics/roadmap.html)
 * UE4 Parallel Rendering Roadmap: [Parallel Rendering Plans for UE4](https://udn.unrealengine.com/questions/168240/parallel-rendering-plans-for-ue4.html)


## Major New Features

####Blueprints
* **New User-Defined Enumeration Asset**
	* A new "User defined enums" category has been added in the MyBlueprint widget, containing all user-defined enums used in the current blueprint.  
		![](UDEnumb.png)(h:360)  ![](UDEnuma.png)(h:360)  

* **New Physics Joints and Constraints in Blueprints**
	* You can now add physics joints (constraints) to Blueprints!  
		![](constraints1.png)(w:480)
	* The Components menu in the Blueprint Editor allows the addition of many types of components to existing components with a new ability to create a "joint" or "constraint" through a component variable in the Details panel.  
		![](constraints2.png)


####Editor Tools
* **Placement Browser**
	* With this new combined browser, you can see only the content which can be placed your level.	
		![](PlacementBrowser.png)(w:640)
	* Extended control scheme makes asset placement smoother and more discoverable!
	* Just click the piece of content you want to place, and click in the viewport where you want to place it, or hold [CTRL] when placing to stamp down multiples quickly.

* **New Asset & Actor Picker**
	* New widgets have been added which are color-coded to the asset type that can be used; double clicking on the thumbnail will open an editor for the displayed asset.  
		![](widget1.png)
		* Not all assets display a thumbnail by default, but this can be enabled using the new UPROPERTY metadata tag ShowThumbnail="true".
	* The new picker allows drag-n'-drop of assets from the content browser, and also allows you to copy  & paste assets between the Content Browser and the widget.  
		![](widget3.png)
	* The Picker even gives you access to the Content Browser menu via the arrow, with additional options at the bottom of the menu.  
		![](widget5.png)
	* 'Browse' is replicated in the main widget for easy access.
	* It even supports a specialization for Actor properties, displaying a Scene Outliner when the combo-button arrow is clicked. The 'Show' item in the menu focuses the viewport on the Actor in question.

* **FBX Reimporting Improvement**
	* FBX code has been refactored to create UAssetImportData-derived classes for static meshes, skeletal meshes, and animation sequences!	
		![](FBXimport.png)(w:480)
	* When assets are imported from FBX, the import options configured when they were created are now stored and reused every time they are reimported.
	* These options can be edited in the asset's properties in a property called "Asset Import Data"

####Gameplay and Framework
* **C++ Class Wizard**
	* This function allows the addition of new Parent Classes in order to introduce new Pawns, Characters, PlayerControllers, and other game features into your game.  
		![](NCW.png)(w:640)
	* Invoked via **"File->Add Code to Project..."**.
		* The copyright line in the generated code is now configurable in ini files.


####Persona and Animation Tools
* **Convert AnimSequences to AnimMontages and AnimComposites in Persona**
	* There is now a context menu option when using AnimSequences in Persona to create AnimComposites and AnimMontages.  
		![](Anim.png)(convert:false)
	* By simply selecting an AnimSequence and right-clicking on it in the Content Browser, the user has the ability to now create both the AnimMontage and AnimComposite types with a mouse click from the menus!


##New Additions

####Blueprints
* BlueprintReadWrite or BlueprintReadOnly on private UPROPERTYs are now illegal.  Please make these public or protected instead.


####Sound
* Exposed Reverb Settings via a new Reverb Effect asset type.


####Core
* DisplayName and FriendlyName are now specifier keywords and do not have to be specified inside a meta=(...) block.
* Headers containing only UENUMs no longer cause a compile error.
* FFileHelper::SaveStringToFile can now write a zero byte file if you supply an empty string.
* DEFINE_LOG_CATEGORY_STATIC should not be used in headers.
	* Instead, DECLARE_LOG_CATEGORY_EXTERN should be specified in a header and a corresponding DEFINE_LOG_CATEGORY should be placed in a related .cpp file.
* Added DepotName access to CrashDebugHelper. 
	* This lets the user specify the depot name, allowing you to debug minidumps from any branch.
* Properly handle missing documentation folder in project generation for people who do not sync it. 



####Editor Tools
* **Landscape:**
	* Added support for Material Attributes type to TerrainLayerSwitch, TerrainLayerBlend, and LandscapeLayerBlend.
	* Added landscape to the primitive stats window.
* Added a game-agnostic setting to toggle loading the most recently loaded project. This feature is now also available to non-rocket users but is disabled by default.
* HighResShot now works in the editor viewport via the OutputLog. 
	* Input in the form "HighResShot 1920x1080" will create a screenshot of each level editor viewport 1920 by 1080 pixels. 
	* Input in the form HighResShot 2 will create shots at the viewport resolution multiplied by 2.
	* "Build and Run" projects for generated UE4 solution files.
	* Now, everything that you can compile and run is at the top of the solution in a new Build and Run folder. 
* Added new (game-agnostic) UE4Editor and UE4Game targets. These are great if you just want to load up a sample. 
* Added instant sub-menus: 
	* Changed submenus to open instantly when hovering! 
	* Made submenus not dismiss when moving off the item, but TOWARD the menu. 
	* Improved responsiveness when opening sub-menus as well. 
* **Slate & UI:**
	* Improved editable text "look & feel".
	* Added Slate tool-tip caching (eliminates hitching when mousing over UI). 
* Added new menu options to the Content Browser to allow the user to create AnimComposites and AnimMontages from AnimSequences.
* On closing a tab, the tab to the left of it then gains focus.


####Gameplay and Framework
* Added wizard to add source code files to an existing project.
	* Invoked via File->Add Code to Project...
	* The copyright line in generated code is configurable in ini files.
* New invert system added in PlayerInput. 
	* You can now call InvertAxis <AxisName> to invert all input to a defined Axis (for example "InvertAxis Lookup" would replace old InvertMouse).
	* You can also invert a specific Axis key with InvertAxisKey (for example if you wanted to invert just mouse lookup, but not joystick, you could do "InvertAxisKey MouseY").
* Added a new Pawn: SpectatorPawn. PlayerController spectating state uses a SpectatorPawn. 
	* Fixed up DebugCameraController, LogVisualizer, and a couple game Controllers to use the new spectator model.
* Added components with rigid body replication: StaticMeshReplicatedComponent and SkeletalMeshReplicatedComponent.
* Added functionality to optionally bake a predefined flag into recasts off-mesh connections for faster filtering.
	* Added a way to query polys in pathing distance with RecastNavMesh. 
	* Introduced named filters to be used while querying RecastNavMesh.
* Introduced an option for game-specific code to define custom navigation system class (derived from UNavigationSystem).
* MatineeActor: bHidePlayer, bDisableMovementInput, bDisableLookatInput.
* Navmesh generation switched over from task graph to FAsynTasks (no more blocking game thread when building a big navmesh).


####Online
* Implemented per-user cloud storage via Mcp services.
	* Enumerates list of files available for a user.
	* Download individual files.
	* Caches files to disk and only downloads if hash doesn't match.


####Platform
* Support for programs (like SlateViewer) has been added/improved for IOS.


####Rendering
* Merged in flexible depth/stencil read/write access for dx11 (low level rendering feature). 
* Added Speedtree integration.
* Added cube map scene capture actor.
* Added HDR export for cube render targets.
* **Materials & Textures:**
	* MaterialParameterCollections: 
	* Asset that defines a collection of parameters and their default values.  
	* Materials can reference these parameters with a CollectonParameter node. 
	* Blueprint can then set values for these parameters efficiently at runtime, and all materials will get the new value.
	* Can be used to implement global material parameters, or per-level parameters, or just convenient previews of mass material changes in the editor. 
	* Removing parameters from the collection can break many blueprints and materials at once, so care must be taken.
* **Lighting & Shadows:**
	* Lightmass solver quality improvements.
	* Geometry whose smoothed normal does not match its triangle normal very well no longer causes extremely splotchy lighting and poor build times.
	* Switched to using min distance heuristic for the irradiance cache as it works better for clean architectural lighting, also got rid of the invalid min radius which was causing artifacts.
	* Direct lighting as seen by final gather rays is now computed with explicit sampling of lights instead of photon density estimation, which reduces leaking and improves accuracy in first bounce lighting near a shadow transition.
	* Irradiance cache population and interpolation for a single mapping are now processed on multiple threads, greatly reducing build times in maps with a single large mapping, if there are enough threads. 
		* Buid time with a single 512 lightmap is 5x faster.
	* Added low quality HDR directional lightmaps. Removed simple lightmaps.
	* Added r.DumpShaderDebugInfo, which will cause debug info to be dumped for any shaders compiled while it is set to 1. 
	* For D3D11 this means a preprocessed version of the source, a batch file to call fxc to compile to D3D assembly, a batch file to call AMD GPUShaderAnalyzer if installed.


####Animation/Persona
* **Persona:**
	* Added " Additive Base" option to Show menu in Persona's viewport to allow the user to see the animations additive base pose.
	* Morph Target deletion is now handled via context menu.



##Upgrade Notes

####Blueprints
* Blueprint classes that do cannot provide a world context from self can now be flagged in UCLASS metadata as "ShowHiddenSelfPins".  
	* This will show the WorldContextObject pin on nodes placed in the Blueprint graph where the class of the Blueprint is derived from the flagged class.  
	* Currently AnimNotify is the only Engine class flagged as such and any AnimNotify Blueprints will need to connect Component to the WorldContextObject input.
* Blueprint SkeletonGeneratedClasses are now transient.  
	* While this does not require any action on the user's part, if you have modified the blueprint system, make sure you do not save any references to the skeleton class.  
	* All serialized references should now point to the GeneratedClass, or they will be lost during save.


####Sound
* SoundModes renamed to SoundMix, now have the option to set a single Base SoundMix and push multiple SoundMix modifiers.
	* All SoundModes will need re-saving so that they will show up as SoundMixes in the Content Browser before they are fully loaded.


####Core
* Updated the config system in UE4 so that saved configs generated do not contain entries for those which match the coalesced entry from the source files hierarchy.
* Existing Visual Studio command-lines will not be preserved when generating new project files.
	* Remember to save them off before regenerating projects for this version of UE4.
	* This is because the folder that generated .vcxproj files are saved to has changed.
* The meta(...) syntax for metadata specifiers are no longer supported.  meta=(...) should be used exclusively.
* Comments on the end of a property (e.g. "float Property; // My float property") are no longer scraped for tooltip metadata and should be changed to be a comment before the UPROPERTY declaration.
* Multiple metadata keys with different values now causes an error.  Before this change, successive values would overwrite previous ones.
* Improved the filename checking when saving a map.


####Editor Tools
* UInterfaces are now more robust, and safely allow for both blueprint implementable events, as well as native functions. 
	* As a result, UInterfaces that are implemented in purely in blueprints (i.e. through the blueprint property's "Interfaces" section), can now only contain BlueprintImplementableEvents.  
	* UInterfaces that are blueprint accessible, but added in a native class (e.g. class UMyClass : public UObject, public IMyInterface), can have both BlueprintImplementable events and BlueprintCallable functions.  
	* The header generator will ensure that you can't create an interface that violates these criteria.
* **Landscape:**
	* Enabled PN-AEN and Flat crack-free tessellation.
	* Added LandscapeComponent vs CollisionComponent cross reference using lazy object pointer.
	* Prevented Gizmo deletion in Landscape EdMode.


####Gameplay and Framework
* BugIt implementation has moved from PlayerController to CheatManager.
* bInvertMouse and bInvertTurn as well as InvertMouse and InvertTurn exec functions have been removed from PlayerController (See New Feature for details on new invert system).
* bIsControllerConnected removed from PlayerController.
* Removed bCheck param from SetActorLocation. Use Teleport instead if you care about checking for overlaps at the destination when not sweeping.
* SpawnActor calls will need to be refactored because of change to the SpawnActor function.
* Anything accessing GamePlayers should instead either access a LocalPlayer via a GetWorld function. 
* **Physics:**
	* Big refactor of physics constraint system;
		* Moved all settings out of ConstraintSetup into ConstriantInstance.
		* Removed constraint setup classes.
	* Many classes that started with RB_.. are now Physics..
		* Moved a lot of classes into their own cpp files (PhysicsHandleComponent, PhysicsThruster, PhysicsContraintTemplate, PhysicsConstraintComponent, PhysicsConstraintActor, RadialForceComponent)
	* PhysicsHandleComponent has been refactored, has built-in smoothing.
	* Removed StallZ.
* DestructibleComponents now respond to damage outside a DestructibleActor.


####Online
* Extended support for FVector net quantization: [Vector Network Quantization](https://udn.unrealengine.com/questions/166428/vector-network-quantization.html)
* Merged the simple and streaming file server code into one. Updated the clientside code so that a streaming server extends the simple network server.


####Rendering
* **Post Process Effects:**
	* Atmospheric fog : handled situations when more than one fog layer exists.
* Reverted multiline TextRenderActor because of remaining issues - will be fixed later.
* Enabled SeparateTransluceny by default for all projects. More consistent, gives more control to the designer, slightly slower but allows scenecolor to be lower precision, translucency is no longer affected by Depth of Field unless feature is disabled in material setting.
* **Lighting & Shadows:**
	* Lightmass EnvironmentColor is now upper hemisphere only.


####Platform
* UnrealBuildTool now passes the name of the Mac that compiled the code to IPhonePackager, so you don't have to (and can't) set an IPP environment variable or change IPP code.
* Changed mobile provision files to go to ~/Library, not /Library, so no weird permissions are needed on Mac.



##Future Additions and Ongoing Efforts

####Blueprints
* Removing the last visible primitive component from a blueprint now reverts the blueprint back to a generic thumbnail.
* Newly-created Blueprints now open in Components mode instead of Graph mode.
* Made searching for Blueprint terms more robust... especially for functions in the math library.
* Split the Hide Unused Pins toggle option in the Blueprint editor into three options and moved it out of the toolbar and into the menubar (under the View option).
* Made FortPathFollowingComponent a BlueprintType.
	* Added blueprint exposed functions to PathFollowingComponent: GetPathActionType() and GetPathDestination().
		* The new functions allow the user to determine whether the path in question is full, partial, etc. and where the end-point of the path is.
* Blueprint Editor: Increased likelihood of finding a match for users Asset search by automatically handling camel case to sanitized variants. 
* Relabeled KISMET SCRIPTING ERROR to LEVEL BLUEPRINT ERROR. 
* Renamed EPET_Kismet to EPET_Blueprint. 
* Timeline missing error now clears once the timeline has been successfully added.
* Blueprints created via the class viewer now mark their packages as dirty again.
* Added support for per-node comments on state machine nodes.


####Sound
* Reverb volumes with extruded brush areas will now work correctly.
* Sound nodes in the SoundCue context menu are no longer prefixed with SoundNode.
* ClampMin and ClampMax meta tags are now used in the appropriate numerical format.


####Core
* MinimalAPI and RequiredAPI class flags are now copied to compiled-in classes so they can be queried at runtime.
* Working continues on new "AutomationTool" program that will be used to assist build system development and CIS testing.
* AActor::bNoDelete has been fully removed from the code base.
* WIP of the new system settings "Device Profile" system for UE4 along with appropriate tools.
* Unreal Build Tool is now built before it is invoked in the editor (For operations like recompile, generating project files, etc).


####Editor Tools
* **Landscape:**
	* Made landscape spline selection undo/redo-able, and fixed selection state of landscape splines outside the spline editor.
	* Disabled landscape editor in PIE/Simulate.
	* Landscape tool rendering performance improvements to improve interactivity in the editor
* **Slate & UI:**
	* Added FSlateApplication::GotoLineInSource. The format is FullFilePath|Line:Column.
	* Decreased the thumbnail size in the new project dialog and adjusted description wrapping.
	* Updated classes 40x & 256x icons, cropping & tweaks. PNG updates only, non-destructive check-in. 
	* Created new icons for BlueprintEditor functions @ 16px. Require further code hook-up to be used in editor. 
	* Created icons for multiple class types at 256px - require code hook-up, non-destructive check-in. 
	* Initial icon for BSP modes created @ 40px (assume 20px version will be code scale) . 
		* Requires additional code support to hook these up. Non-destructive checking - Change List is PNG assets only. 
	* First pass icons for placement mode created. Requires additional code support to hook these up. 
		* Non-destructive checking - Change List is PNG assets only. 
	* 16px icons for all the AtmosphericFog, SphereReflectionCapture, BoxReflectionCapture, DestructibleActor, Note, Pawn, Character, DefaultPawn actor classes. 
		* PNG assets only. Non-destructive check-in (requires code hook-up). 
* SCC state is no longer displayed in the content browser if source control is disabled.
* **World Browser:**
	* More zoom levels in World browser.
	* Fit levels selection to view (Home button) in World browser.
* Editor main menu arrangement has been improved!
* Only add the Asset menu to the menubar, if were editing an actual asset. 
* Updated World Props button to say World Settings, along with its tooltip 
* Error message popup for local collection creation failure is now parented to the collection view, rather than the collection list.
* Scene Outliner now supports selection and modification of PIE actors.
* Editor viewport grid size increment and decrement controls are now key-bindable.
* 'log list' in the console window is now sorted.
* When a project fails to auto-load, auto loading is now disabled until the editor is successfully loaded again.
* Solution files generated for uproject files are named after the .uproject file instead of the folder containing it.


####Gameplay and Framework
* Running generatedistillfilesets with no map tokens on the command line now assumes you want to use all map files.
* The new project dialog now produces an error if you do not have a compiler installed/available and you have a c++ template selected.  
* Input events/axis can be bound in PlayerControllers.
* ShapeComponent properties (SphereRadius, CapsuleRadius, etc) are now protected. Use Set/Get methods to access.
	* ShapeComponent GetScaled* and GetUnscaled* accessors added. In general most places should read the scaled values.
	* Many bugs related to using unscaled versions of ShapeComponents were fixed as a result. Character movement now works correctly for scaled capsules.
* Changed GetAxis to GetScaledAxis on FMatrix and FTransform.
* Small Optimization to code looping over AnimationNotifies on USkeleton.
* Removed several more GWorld references including the refactoring of a number of functions to significantly reduce the number of GWorld references where no obvious alternative context was available.
	* Also added a GetWorld to a number of classes that currently returns GWorld (this will make it simpler to remove the GWorld references in due course). 
* Revised SpawnActor and the associated templates. 
	* Most all of the parameters for these are now in a struct that can be passed to the SpawnActor function/template Made GamePlayers private and added accessors. 
	* Replaced many instances that previously used the players array to get a local player via a world.
* **Physics:**
	* Improved physics simulation by increasing solver iteration count.
	* Refactoring: Removed bCreatePhysicsState flag;
		* It only creates physics state if collision is on. 
		* If you need to create physics state without collision for query, please set bAlwaysCreatePhysicsState to true.
* Character movement improvements
	* Refactored lots of duplicate code for sliding along surfaces to use common SlideAlongSurface() or SlideAlongVerticalSurface() functions.
	* Changed sliding code to use smooth capsule normal, not the normal of the surface upon which we impact. 
		* Most notably improves sliding along corners of geometry.
	* We actually enforce MaxStepHeight now, based on the actual floor, not the floating base of the character. 
		* StepUp also used to allow steps up higher surfaces on the smoothed portion of the capsule, and we now check the height of the impact point when stepping up. 
		* Games will probably want to increase the default value to reflect the previous behavior.
	* StepUp code avoids placing the character on unwalkable (bad floor normal) surfaces. In the future we'll improve behavior when moving over low objects with unwalkable normals.
	* Floor sweep tests now avoid adjacent vertical surfaces to prevent false floor normals reported from hits with those surfaces. See ComputeFloorHeight().
	* Added SafeMoveUpdatedComponent() to MoveComponent that handles starting in penetration. 
		* If penetration is detected that blocks the move, it tries to move out and retry the original move.


####Online
* Dedicated server support updates
	* Fixed various code to support Steam's standalone dedicated server APIs
	* Made sure sound and audio devices are off for dedicated servers.
* Improvements to Windows platform hardware survey.
	* Survey is performed on first run and once per month thereafter.
	* Sustained editor performance (Programming/Slate framerate) is measured and recorded every time to editor is started.
	* Improved CPU, operating system and RAM stats.
	* Exposed hardware survey features if the engine for game-specific customization.


####Rendering
* **Materials and Textures:**
	* Visualizetexture now maps depth buffer to a more readable color range.
	* Cube textures are now correctly centered in the texture editor.
* **Lighting & Shadows:** 
	* Renamed multiple shadow cvars.
	* Added r.Shadows.FreezeCamera for shadow rendering investigations, colored shadow cascades.
* **Post Process Effects:**
	* Added r.exposureoffset to test if postprocessing features works as expected.
	* Added TemporalAA test materials to RenderTestMap (high frequency dithering using with TemporalAA enables some rendering tricks).
	* Manual setting of exposure in PostProcessVolumes etc now works in DX10. 
* Added random dither to HDR export to eliminate some banding issues.


####Platform
* Continued work on porting the engine and the editor to Mac.
* UnrealBuildTool can now copy the app bundle back to the PC if requested (only really useful for build machines checking in Mac executables).

