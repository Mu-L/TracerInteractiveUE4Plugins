INTSourceChangelist:3367470
Title:2013 年 6 月リリースノート
Crumbs:%ROOT%, Support/Builds
Description:
Availability:Licensee
Parent:Support/Builds
Order:-8

[TOC(start:2 end:2)]

## ビルド情報


[REGION:simpletable]
| アイテム | 情報 |
| ---- | ---- |
| **ラベル** | QA_APPROVED_UE4_BUILD_2013_06 |
| **チェンジリスト#** | 1687979 |
| **VISUAL STUDIO VERSION** | Microsoft Visual Studio 2010 version 10.0.40219.1 SP1 Rel |
| **DIRECTX** | 2010年6月 |
[/REGION]

## 重要情報

 * 現時点のエンジン開発ロードマップ: [UE4 Roadmaps](https://udn.unrealengine.com/questions/topics/roadmap.html)
 * UE4 パラレル レンダリング ロードマップ:  [Parallel Rendering Plans for UE4](https://udn.unrealengine.com/questions/168240/parallel-rendering-plans-for-ue4.html)


## 主要な新機能

####ブループリント
* **新たなユーザー定義の列挙型アセット**
	* 現在のブループリントで使用しているユーザー定義の列挙型変数がすべて含めた「ユーザー定義の列挙型変数」カテゴリを新しく MyBlueprint ウィジェットに追加しました。  
		![](UDEnumb.png)(h:360)  ![](UDEnuma.png)(h:360)  

* **ブループリントに新しい物理ジョイントとコンストレイントが登場**
	* ブループリントに物理ジョイント (コンストレイント) を追加できるようにしました！  
		![](constraints1.png)(w:480)
	* ブループリント エディタの [Components] メニューの [Details (詳細)] パネルにあるコンポーネント変数で「ジョイント」や「コンストレイント」を作成する新規機能を用いて、様々な種類のコンポネントを既存のコンポネントへ追加することができます。  
		![](constraints2.png)


####エディタ ツール
* **プレースメント ブラウザ**
	* 新しく結合したブラウザでは、自分のレベルに配置可能なコンテンツのみ見ることができます。	
		![](PlacementBrowser.png)(w:640)
	* コントロール スキームが拡張され、よりスムーズで、さらに発見しやすいアセット配置が可能になります。
	* 配置したいコンテンツをクリックし、ビューポートの配置したい場所をクリック、あるいは [CTRL] を押しながら素早く印を付けて配置します。

* **追加されたアセット、アクタ ピッカー**
	* 使用可能なアセットタイプが色分けされたウィジェットが新しく追加されました。サムネイルをダブルクリックすると、表示中のアセットのエディタが開きます。  
		![](widget1.png)
		* すべてのアセットにサムネイルがデフォルト表示されるわけではありませんが、新しい UPROPERTY metadata tag ShowThumbnail="true" を使って有効化することができます。
	* 今回のピッカーは、アセットを [コンテンツ ブラウザ] からドラッグ＆ドロップし、さらに [コンテンツ ブラウザ] とウィジェットの間でもコピー＆ペーストすることができます。  
		![](widget3.png)
	* ピッカーにより、矢印とメニュー下部にあるオプションを使った [コンテンツ ブラウザ] メニューへのアクセスが可能になります。  
		![](widget5.png)
	* 「Browse」がアクセスしやすいようにメイン ウィジェットにレプリケートされます。
	* コンボボタンの矢印をクリックすると、シーン アウトライナーを表示して、アクタ プロパティの特殊化も対応します。メニューの「表示」で、問題となっているアクタ上でビューポイントをフォーカスします。

* **FBX 再インポートの改善**
	* スタティックメッシュ、スケルタルメッシュ、アニメーション シーケンス用に UAssetImportData の派生クラスを作成する FBX コードをリファクタリングしました！	
		![](FBXimport.png)(w:480)
	* FBX からアセットをインポートする場合、作成時の設定インポート オプションがインポート時に保存され、再インポートされるたび再利用されます。
	* これらのオプションは、[Asset Import Data] と呼ばれるプロパティのアセットのプロパティで編集可能です。

####ゲームプレイとフレームワーク
* **C++ クラス ウィザード**
	* ポーン、キャラクター、PlayerController、その他のゲーム機能を自分のゲームに新規導入する親クラスを追加する機能です。  
		![](NCW.png)(w:640)
	* **[File (ファイル)] から [Add Code to Project... (プロジェクトへコードを追加)]** で呼び出します。
		* 生成されたコードの著作権行を ini ファイルで設定できるようにしました。


####ペルソナ ツールとアニメーション ツール
* **ペルソナで AnimSequences を AnimMontages と AnimComposites に変換する**
	* ペルソナで AnimSequences を使用してAnimComposites と AnimMontages を作成するために、コンテキスト メニュー オプションを用意しました。  
		![](Anim.png)(convert:false)
	* [コンテンツ ブラウザ] の AnimSequence を選んで右クリックするだけで、ユーザはメニューからマウスをクリックすれば AnimMontage と AnimCompositehe の両方が作成できるようにしました !


## 新機能の追加

####ブループリント
* プライベートな UPROPERTY での BlueprintReadWrite あるいは BlueprintReadOnly の使用が違法となりました。公開または保護の対応をお願いします。


#### サウンド
* Reverb 設定を新規 Reverb Effect アセット タイプ経由で公開しました。


####コア
* DisplayName と FriendlyName が指定子キーワードになり、 meta=(...) ブロック内で指定する必要がなくなりました。
* UENUM のみを含むヘッダーのコンパイルエラーを解消しました。
* 空の文字列の場合、FFileHelper::SaveStringToFile でゼロバイトファイルを書けるようにしました。
* DEFINE_LOG_CATEGORY_STATIC をヘッダーで使用しないことになりました。
	* 逆に、DECLARE_LOG_CATEGORY_EXTERN をヘッダで指定し、対応する DEFINE_LOG_CATEGORY は関連する.cpp ファイルに置きます。
* DepotName アクセスを CrashDebugHelper に追加しました。 
	* ユーザーにデポ名を指定させ、どのブランチからもミニダンプのデバグが出来ようにしました。
* 同期を行わないユーザーがプロジェクト生成中になくしてしまったドキュメントフォルダーに対し適切な処理を行うようにしました。 



####エディタ ツール
* **ランドスケープ：**
	* TerrainLayerSwitch、TerrainLayerBlend、LandscapeLayerBlend に Material Attributes タイプへのサポートを追加しました。
	* プリミティブ スタッツ ウィンドウにランドスケープを追加しました。
* 直前に読み込んだプロジェクトの読み込みを切り替えるための、ゲームに依存しない設定を追加しました。この動作はロケットを使用しないユーザーも利用可能となりましたが、デフォルトでは無効になっています。
* HighResShot が OutputLog 経由でエディタ ビューポートで機能するようにしました。 
	* 「HighResShot 1920x1080 」フォームへ入力すると、各レベルのエディタビューポートのスクリーンショットが 1920 X 1080 ピクセルで作成されます。 
	* 「HighResShot 2 」フォームへ入力すると、ビューポート解像度が 2 倍のショットが作成されます。
	* プロジェクトで生成された UE4 ソリューションファイルに対してプロジェクトの「ビルドと実行」を行います。
	* コンパイルおよび実行できるものはすべて新規の「Build and Run」フォルダのソリューションの上部にあります。 
* (ゲームに依存しない) UE4Editor と UE4Game のターゲットが新しく追加されました。サンプルをロードしたいだけの場合に適しています。 
* 追加されたインスタント サブメニュー： 
	* カーソルを重ねた瞬間に開くようにサブメニューが変更されました！ 
	* 項目自体の選択に失敗しても、選択の動作方向がサブメニューに向かっている限り、サブメニューが消えないようにしました。 
	* サブメニューを開いた時の応答性も改善しました。 
* **スレート & UI:**
	* 編集可能なテキストの look & feel (ルック・アンド・フィール) を改善しました。
	* (UI 上にマウスを当てた時の引きつりを取り除くために) スレート ツールチップ キャッシュを追加しました。 
* コンテンツ ブラウザに新規メニューオプションが追加され、AnimSequences から AnimComposites と AnimMontages を作成できるようにしました。
* タブを閉じると、閉じたタブの左側のタブにフォーカスが移ります。


####ゲームプレイとフレームワーク
* 既存のプロジェクトへのソースコードファイル追加ウィザードが追加されました。
	* [File (ファイル)] から [Add Code to Project... (プロジェクトへコードを追加)] で呼び出します。
	* 生成されたコードの著作権行を ini ファイルで設定できるようにしました。
* 新たに反転システムを PlayerInput に追加しました。 
	* InvertAxis <AxisName> を呼び出して、定義した Axis に対する全ての入力の反転 (古い InvertMouse を InvertAxis Lookup に置き換える) を可能にしました。
	* 特定の Axis キーを InvertAxisKey で反転することも可能です (joystick ではなく mouse lookup だけを反転させたい場合は InvertAxisKey MouseY を使用できます)。
* 新たに SpectatorPawn ポーンを追加しました。PlayerController のスペクテーターステートは SpectatorPawn を使用します。 
	* DebugCameraController、LogVisualizer、他いくつかのゲームのコントローラーを修正し、新たなスペクテータモデルを使用できるようにしました。
* 以下の剛健なレプリケーションをコンポーネントに追加しました：StaticMeshReplicatedComponent と SkeletalMeshReplicatedComponent
* フィルタリングを早めるリキャスト オフメッシュ接続に定義済みフラグをオプションで焼き付ける機能を追加しました。
	* RecastNavMesh で距離をパスする際にポリゴンを検索する方法を追加しました。 
	* RecastNavMesh へのクエリに使用する指定フィルタを実装しました。
* (UNavigationSystem から派生した) カスタムナビゲーション システムクラスを定義するゲーム専用オプションを実装しました。
* MatineeActor: bHidePlayer, bDisableMovementInput, bDisableLookatInput.
* Navmesh 生成を task graph から FAsynTask に切り替えました (大きな navmesh のビルド時にゲームスレッドがブロックされなくなります)。


####オンライン
* MCP サービス経由でユーザー別クラウドストレージを実装しました。
	* ユーザーが利用できるファイルのリストを列挙しました。
	* 個別にファイルをダウンロードできます。
	* ハッシュが一致しない場合のみ、ファイルをディスクにキャッシュしダウンロードを行います。


####プラットフォーム
* (SlateViewer などの) プログラムへのサポートを IOS に対して追加 / 改善しました。


####レンダリング
* dx11 の柔軟性のある深度ステンシルの読み取りおよび書き込みアクセス (ローレベルレンダリング機能) をマージしました 。 
* Speedtree を統合しました。
* キューブマップ シーンキャプチャ アクタを追加しました。
* キューブレンダー ターゲットが HDR 形式でエクスポートできるようにしました。
* **マテリアル & テクスチャ:**
	* MaterialParameterCollections: 
	* パラメータのコレクションとそれらのデフォルト値を定義するアセットです。  
	* CollectonParameter ノードでマテリアルはパラメータを参照できます。 
	* その後ブループリントはこれらのパラメータに対してランタイム時に効率的に値を設定することができ、すべてのマテリアルに新しい値が付きます。
	* グローバルマテリアル パラメータ、レベルごとのパラメータ、またはエディタにおいてマテリアルの大幅な変更に便利なプレビューの実行に使用することができます。 
	* コレクションからパラメータを削除すると一度に多くのブループリントとマテリアルが破損することがあります。ご注意ください。
* **ライティング＆シャドウ：**
	* ライトマス ソルバの品質が向上しました。
	* トライアングルの法線にうまく一致しない滑らかな法線を持つジオメトリの非常に汚いライティングやビルド回数の少なさという問題点を解決しました。
	* きれいな建築ライティングに最適な、放射照度キャッシュに最短距離のヒューリスティックを使用することにしました。また、アーチファクトの原因となる無効な最小半径もクリーンアップしました。
	* ファイナル ギャザーの光線で見られる直接ライティングの計算に、光子 (photon) の距離ではなくサイトの明示的なサンプルを使うようにしました。これにより、シャドー変遷付近の最初のバウンスライトの漏れを減らし、精度を高めます。
	* シングルマッピングの放射照度キャッシュの入力と補正をマルチスレッド処理にしました。スレッド数が十分であれば、大きなマップ 1 つをビルドする時間が大幅に削減されます。 
		* 512 のライトマップ 1 つのビルド速度が 5 倍になりました。
	* 低品質の HDR 指向性ライトマップを追加しました。シンプルライトマップを削除しました。
	* 設定が 1 の時にコンパイルされたシェーダーに対してデバッグ情報をダンプする r.DumpShaderDebugInfo を追加しました。 
	* D3D11とは、D3D アセンブリをコンパイルする fxc を呼び出すバッチファイル、インストールされている場合は AMD GPUShaderAnalyzer を呼び出すバッチファイルであるソースのプリプロセスバージョンであることを表します。


####アニメーション / ペルソナ
* **ペルソナ：**
	* ユーザーがアニメーションの付加的な基本ポーズを見ることができるようにペルソナのビューポートの [Show (表示)] メニューに [Additive Base (加算ベース)] オプションを追加しました。
	* モーフ ターゲットの削除はコンテクストメニューで処理するようになりました。



##アップグレード ノート

####ブループリント
* Blueprint classes that do cannot provide a world context from self can now be flagged in UCLASS metadata as "ShowHiddenSelfPins".  
	* This will show the WorldContextObject pin on nodes placed in the Blueprint graph where the class of the Blueprint is derived from the flagged class.  
	* Currently AnimNotify is the only Engine class flagged as such and any AnimNotify Blueprints will need to connect Component to the WorldContextObject input.
* Blueprint SkeletonGeneratedClasses are now transient.  
	* While this does not require any action on the user's part, if you have modified the blueprint system, make sure you do not save any references to the skeleton class.  
	* All serialized references should now point to the GeneratedClass, or they will be lost during save.


#### サウンド
* SoundModes renamed to SoundMix, now have the option to set a single Base SoundMix and push multiple SoundMix modifiers.
	* All SoundModes will need re-saving so that they will show up as SoundMixes in the Content Browser before they are fully loaded.


####コア
* Updated the config system in UE4 so that saved configs generated do not contain entries for those which match the coalesced entry from the source files hierarchy.
* Existing Visual Studio command-lines will not be preserved when generating new project files.
	* Remember to save them off before regenerating projects for this version of UE4.
	* This is because the folder that generated .vcxproj files are saved to has changed.
* The meta(...) syntax for metadata specifiers are no longer supported.  meta=(...) should be used exclusively.
* Comments on the end of a property (e.g. "float Property; // My float property") are no longer scraped for tooltip metadata and should be changed to be a comment before the UPROPERTY declaration.
* Multiple metadata keys with different values now causes an error.Before this change, successive values would overwrite previous ones.
* Improved the filename checking when saving a map.


####エディタ ツール
* UInterfaces are now more robust, and safely allow for both blueprint implementable events, as well as native functions. 
	* As a result, UInterfaces that are implemented in purely in blueprints (i.e. through the blueprint property's "Interfaces" section), can now only contain BlueprintImplementableEvents.  
	* UInterfaces that are blueprint accessible, but added in a native class (e.g. class UMyClass : public UObject, public IMyInterface), can have both BlueprintImplementable events and BlueprintCallable functions.  
	* The header generator will ensure that you can't create an interface that violates these criteria.
* **ランドスケープ：**
	* Enabled PN-AEN and Flat crack-free tessellation.
	* Added LandscapeComponent vs CollisionComponent cross reference using lazy object pointer.
	* Prevented Gizmo deletion in Landscape EdMode.


####ゲームプレイとフレームワーク
* BugIt implementation has moved from PlayerController to CheatManager.
* bInvertMouse and bInvertTurn as well as InvertMouse and InvertTurn exec functions have been removed from PlayerController (See New Feature for details on new invert system).
* bIsControllerConnected removed from PlayerController.
* Removed bCheck param from SetActorLocation.Use Teleport instead if you care about checking for overlaps at the destination when not sweeping.
* SpawnActor calls will need to be refactored because of change to the SpawnActor function.
* Anything accessing GamePlayers should instead either access a LocalPlayer via a GetWorld function. 
* **Physics:**
	* Big refactor of physics constraint system;
		* Moved all settings out of ConstraintSetup into ConstriantInstance.
		* Removed constraint setup classes.
	* Many classes that started with RB_.. are now Physics..
		* Moved a lot of classes into their own cpp files (PhysicsHandleComponent, PhysicsThruster, PhysicsContraintTemplate, PhysicsConstraintComponent, PhysicsConstraintActor, RadialForceComponent)
	* PhysicsHandleComponent has been refactored, has built-in smoothing.
	* Removed StallZ.
* DestructibleComponents now respond to damage outside a DestructibleActor.


####オンライン
* Extended support for FVector net quantization: [Vector Network Quantization](https://udn.unrealengine.com/questions/166428/vector-network-quantization.html)
* Merged the simple and streaming file server code into one.Updated the clientside code so that a streaming server extends the simple network server.


####レンダリング
* **Post Process Effects:**
	* Atmospheric fog : handled situations when more than one fog layer exists.
* Reverted multiline TextRenderActor because of remaining issues - will be fixed later.
* Enabled SeparateTransluceny by default for all projects.More consistent, gives more control to the designer, slightly slower but allows scenecolor to be lower precision, translucency is no longer affected by Depth of Field unless feature is disabled in material setting.
* **ライティング＆シャドウ：**
	* Lightmass EnvironmentColor is now upper hemisphere only.


####プラットフォーム
* UnrealBuildTool now passes the name of the Mac that compiled the code to IPhonePackager, so you don't have to (and can't) set an IPP environment variable or change IPP code.
* Changed mobile provision files to go to ~/Library, not /Library, so no weird permissions are needed on Mac.



## 今後の追加事項と継続的な努力

####ブループリント
* Removing the last visible primitive component from a blueprint now reverts the blueprint back to a generic thumbnail.
* Newly-created Blueprints now open in Components mode instead of Graph mode.
* Made searching for Blueprint terms more robust... especially for functions in the math library.
* Split the Hide Unused Pins toggle option in the Blueprint editor into three options and moved it out of the toolbar and into the menubar (under the View option).
* Made FortPathFollowingComponent a BlueprintType.
	* Added blueprint exposed functions to PathFollowingComponent:GetPathActionType() and GetPathDestination().
		* The new functions allow the user to determine whether the path in question is full, partial, etc. and where the end-point of the path is.
* Blueprint Editor:Increased likelihood of finding a match for users Asset search by automatically handling camel case to sanitized variants. 
* Relabeled KISMET SCRIPTING ERROR to LEVEL BLUEPRINT ERROR. 
* Renamed EPET_Kismet to EPET_Blueprint. 
* Timeline missing error now clears once the timeline has been successfully added.
* Blueprints created via the class viewer now mark their packages as dirty again.
* Added support for per-node comments on state machine nodes.


#### サウンド
* Reverb volumes with extruded brush areas will now work correctly.
* Sound nodes in the SoundCue context menu are no longer prefixed with SoundNode.
* ClampMin and ClampMax meta tags are now used in the appropriate numerical format.


####コア
* MinimalAPI and RequiredAPI class flags are now copied to compiled-in classes so they can be queried at runtime.
* Working continues on new "AutomationTool" program that will be used to assist build system development and CIS testing.
* AActor::bNoDelete has been fully removed from the code base.
* WIP of the new system settings "Device Profile" system for UE4 along with appropriate tools.
* Unreal Build Tool is now built before it is invoked in the editor (For operations like recompile, generating project files, etc).


####エディタ ツール
* **ランドスケープ：**
	* Made landscape spline selection undo/redo-able, and fixed selection state of landscape splines outside the spline editor.
	* Disabled landscape editor in PIE/Simulate.
	* Landscape tool rendering performance improvements to improve interactivity in the editor
* **スレート & UI:**
	* Added FSlateApplication::GotoLineInSource.The format is FullFilePath|Line:Column.
	* Decreased the thumbnail size in the new project dialog and adjusted description wrapping.
	* Updated classes 40x & 256x icons, cropping & tweaks.PNG updates only, non-destructive check-in. 
	* Created new icons for BlueprintEditor functions @ 16px.Require further code hook-up to be used in editor. 
	* Created icons for multiple class types at 256px - require code hook-up, non-destructive check-in. 
	* Initial icon for BSP modes created @ 40px (assume 20px version will be code scale) . 
		* Requires additional code support to hook these up.Non-destructive checking - Change List is PNG assets only. 
	* First pass icons for placement mode created.Requires additional code support to hook these up. 
		* Non-destructive checking - Change List is PNG assets only. 
	* 16px icons for all the AtmosphericFog, SphereReflectionCapture, BoxReflectionCapture, DestructibleActor, Note, Pawn, Character, DefaultPawn actor classes. 
		* PNG assets only.Non-destructive check-in (requires code hook-up). 
* SCC state is no longer displayed in the content browser if source control is disabled.
* **World Browser:**
	* More zoom levels in World browser.
	* Fit levels selection to view (Home button) in World browser.
* Editor main menu arrangement has been improved!
* Only add the Asset menu to the menubar, if were editing an actual asset. 
* Updated World Props button to say World Settings, along with its tooltip 
* Error message popup for local collection creation failure is now parented to the collection view, rather than the collection list.
* Scene Outliner now supports selection and modification of PIE actors.
* Editor viewport grid size increment and decrement controls are now key-bindable.
* 'log list' in the console window is now sorted.
* When a project fails to auto-load, auto loading is now disabled until the editor is successfully loaded again.
* Solution files generated for uproject files are named after the .uproject file instead of the folder containing it.


####ゲームプレイとフレームワーク
* Running generatedistillfilesets with no map tokens on the command line now assumes you want to use all map files.
* The new project dialog now produces an error if you do not have a compiler installed/available and you have a c++ template selected.  
* Input events/axis can be bound in PlayerControllers.
* ShapeComponent properties (SphereRadius, CapsuleRadius, etc) are now protected.Use Set/Get methods to access.
	* ShapeComponent GetScaled* and GetUnscaled* accessors added.In general most places should read the scaled values.
	* Many bugs related to using unscaled versions of ShapeComponents were fixed as a result.Character movement now works correctly for scaled capsules.
* Changed GetAxis to GetScaledAxis on FMatrix and FTransform.
* Small Optimization to code looping over AnimationNotifies on USkeleton.
* Removed several more GWorld references including the refactoring of a number of functions to significantly reduce the number of GWorld references where no obvious alternative context was available.
	* Also added a GetWorld to a number of classes that currently returns GWorld (this will make it simpler to remove the GWorld references in due course). 
* Revised SpawnActor and the associated templates. 
	* Most all of the parameters for these are now in a struct that can be passed to the SpawnActor function/template Made GamePlayers private and added accessors. 
	* Replaced many instances that previously used the players array to get a local player via a world.
* **Physics:**
	* Improved physics simulation by increasing solver iteration count.
	* Refactoring:Removed bCreatePhysicsState flag;
		* It only creates physics state if collision is on. 
		* If you need to create physics state without collision for query, please set bAlwaysCreatePhysicsState to true.
* Character movement improvements
	* Refactored lots of duplicate code for sliding along surfaces to use common SlideAlongSurface() or SlideAlongVerticalSurface() functions.
	* Changed sliding code to use smooth capsule normal, not the normal of the surface upon which we impact. 
		* Most notably improves sliding along corners of geometry.
	* We actually enforce MaxStepHeight now, based on the actual floor, not the floating base of the character. 
		* StepUp also used to allow steps up higher surfaces on the smoothed portion of the capsule, and we now check the height of the impact point when stepping up. 
		* Games will probably want to increase the default value to reflect the previous behavior.
	* StepUp code avoids placing the character on unwalkable (bad floor normal) surfaces.In the future we'll improve behavior when moving over low objects with unwalkable normals.
	* Floor sweep tests now avoid adjacent vertical surfaces to prevent false floor normals reported from hits with those surfaces.See ComputeFloorHeight().
	* Added SafeMoveUpdatedComponent() to MoveComponent that handles starting in penetration. 
		* If penetration is detected that blocks the move, it tries to move out and retry the original move.


####オンライン
* Dedicated server support updates
	* Fixed various code to support Steam's standalone dedicated server APIs
	* Made sure sound and audio devices are off for dedicated servers.
* Improvements to Windows platform hardware survey.
	* Survey is performed on first run and once per month thereafter.
	* Sustained editor performance (Programming/Slate framerate) is measured and recorded every time to editor is started.
	* Improved CPU, operating system and RAM stats.
	* Exposed hardware survey features if the engine for game-specific customization.


####レンダリング
* **Materials and Textures:**
	* Visualizetexture now maps depth buffer to a more readable color range.
	* Cube textures are now correctly centered in the texture editor.
* **ライティング＆シャドウ：** 
	* Renamed multiple shadow cvars.
	* Added r.Shadows.FreezeCamera for shadow rendering investigations, colored shadow cascades.
* **Post Process Effects:**
	* Added r.exposureoffset to test if postprocessing features works as expected.
	* Added TemporalAA test materials to RenderTestMap (high frequency dithering using with TemporalAA enables some rendering tricks).
	* Manual setting of exposure in PostProcessVolumes etc now works in DX10. 
* Added random dither to HDR export to eliminate some banding issues.


####プラットフォーム
* Continued work on porting the engine and the editor to Mac.
* UnrealBuildTool can now copy the app bundle back to the PC if requested (only really useful for build machines checking in Mac executables).

