INTSourceChangelist:6537038
Title: 2013年5月版本说明
Availability:Licensee
Crumbs:%ROOT%, Support/Builds
Description:
Parent:Support/Builds
Order:-9
Order: 53

[TOC(start:2 end:2)]

## 版本信息


[REGION:simpletable]
| 项目| 信息|
| ----| ----|
| **标签**| QA_APPROVED_UE4_BUILD_2013_05|
| **变更列表编号**| 1652795|
| **VISUAL STUDIO 版本**| Microsoft Visual Studio 2010 版本 10.0.40219.1 SP1 Rel|
| **DIRECTX**| 2010 年 6 月|
[/REGION]

## 重要信息

 * 当前引擎开发路线图：[虚幻引擎4 路线图](https://udn.unrealengine.com/questions/topics/roadmap.html)
 * GDC 被许可人会议视频可用：[被许可人视频](https://udn.unrealengine.com/questions/166995/gdc-2013-licensee-session-videos.html)
 * 虚幻引擎4 构建目标更改：[虚幻引擎4 目标更改](https://udn.unrealengine.com/questions/166994/ue4-target-changes.html)


## 主要新功能


#### 编辑器系统

* **骨架网格体导入现在创建物理资源**
	* 导入对话框现在可以选择自动为骨架网格体创建物理资源。
	* 默认情况下，它可以在导入过程中使用以下三种方法之一：
	* 它可以为新的网格体创建新的资源，
	* 用户可以选择与其他骨架网格体共享物理资源，或者
	* 用户可以选择退出，不选择任何内容并取消设置 **CreatePhysicsAsset**。
 	
		![](importSkM1.png) ![](importSkM2.png)
* **碰撞系统界面改进**
	* 添加了包含界面改进的碰撞配置文件系统。
	* 当前设置包括 NavigationTestingActor、BlockingVolume、角色、InterpActor、StaticMeshComonent 和 SkeletalMeshActor；可以在 BaseEngine.ini 中找到可用配置文件列表。
	* 自定义编辑 UI（下面屏幕截图）现在包含新通道映射功能。
	* 可以在 BaseEngine.ini 中重命名自定义引擎/游戏通道。
* **取色器**
	* 取色器现在具有滴管功能，可在屏幕上任何位置更快实现颜色拾取。  
		![](dropper1.png) ![](picker1.png)
* **关卡浏览器中的源码控制**
	* 用户现在可以从关卡浏览器中访问源码控制功能。
		
		![](source.png)
	* 对于经常必须在源码控制应用程序和 UE4 编辑器之间反复切换的任何用户，这具有强大的整合和加速工作流程的潜力。


#### 蓝图

* **输入绑定更改**
	* 不再将输入组件显式添加到蓝图；相反，可以从输入（Input）子菜单将绑定添加到任何 Actor 蓝图。
	* 可以创建动作事件和按键事件，或为轴值放置取值器。按键事件可以指定要从详细信息面板中使用的 Ctrl、Alt 和 Shift 键组合。

		![](bindings2.png) ![](bindings3.png)
	* 动作事件和轴已在 Base/DefaultInput.ini 中定义，并且每个动作都可以映射到多个按键。
	* Actor 不再受控制；他们可以作为 Pawn 拥有，或者对他们启用输入。
	* 关卡蓝图中的绑定始终处于活动状态，Pawn 中的绑定在已拥有时处于活动状态，并且 Actor 中的绑定通过调用启用/禁用输入以激活/停用，输入堆栈按如下顺序排序：
		
		1.已启用输入的 Actor
		1.关卡蓝图
		1.已拥有的 Pawn


#### 动画

* **扩展插槽编辑**
	* 现在默认已将插槽添加到骨架，甚至可以自定义！
	* 现在也可以仅将网格体插槽提升为骨架。
	* 还添加了过滤器以显示插槽的不同视图，可通过视口的“显示插槽（Show Sockets）”模式访问。
	* 可选择使用骨架树中的“活动插槽（Active Sockets）”过滤器查看灰色显示的骨架插槽或在屏幕上显示为红色命中点的网格体插槽。


#### 渲染

* **后期处理材质**
	* 现在可以在材质编辑器中创建自定义后期处理效果！
	* 可以将多个效果添加到后期处理体积。
	* 如果使用相同的基础材质，后期处理体积将与材质参数混合。
	* 后期处理材质可以从自定义渲染通道访问深度，例如掩盖屏幕上的某些对象。  
		![](Teaser3.png) ![](Teaser1.png)
		![](Teaser0.png) ![](Teaser2.png)
	* 有关更多信息，请参阅 UDN 中的 [后期处理材质](Engine/Rendering\PostProcessEffects\PostProcessMaterials)。


#### 音频

* **Sound Cue 编辑器**
	* 在编辑器中预览 Sound Cue 时，它现在将显示通过 Cue 的路径，类似于通过蓝图的脉冲，无论 Cue 是简单、复杂还是超出想像都会很有用。
		
		![](Car_Impact_Cue.jpg)(w:640)
* **衰减形状**
	* 现在可以选择球体（默认）、盒体、胶囊体或圆锥体，其中每个形体都有自己的形状属性。  
		![](attenuation1.png)(w:425)
	* 每个衰减体积现在可以拥有自己的尺寸和衰减距离。


#### 虚幻前端

* **虚幻控制台快捷键**
	* 虚幻控制台/前端现在可以将常用命令保存到快捷键浏览器以便参考和使用。
		
		![](console4.png)(w:800)


## 新增内容

#### 编辑器和工具

* **Slate 和 UI**
	* 所有菜单都支持垂直包装。
		* 大菜单的大小仅限于工作区域的高度。
		* 需要时菜单中会出现垂直滚动条。
	* 在下列组件中添加了特定快捷菜单 (x17) 的可扩展性挂钩：内容浏览器、图层、关卡、关卡编辑器、材质编辑器、材质实例编辑器、关卡蓝图。
* 内容浏览器现在是“Nomad Tab”，最多可以呼出 4 个。Nomad Tab 可以停靠在任何停靠区域或选项卡中。
	* 已使用内容浏览器 1 和内容浏览器 2 分别替换快速浏览器和主要选项卡内容浏览器。
	* 添加了内容浏览器 3 和内容浏览器 4。
* MakeEditWidget 元数据（矢量控件编辑）现在适用于在 Actor 类的结构体/数组数据成员中定义的矢量。
* 新建项目（New Project）对话框现在可以用于非火箭版本。启动不带参数的 UE4Editor.exe（或双击它）将显示此对话框。
	* 还可以通过文件（File）->新建项目（New Project）在编辑器中访问此对话框。
	* 目前无法使用代码模板创建项目。请在后续版本中再次尝试。
* 添加了“内容迁移”。此功能允许将资源及其所有依赖关系复制到另一个游戏。
	* 右键单击关卡浏览器中的关卡、内容浏览器中的文件夹或内容浏览器中的单个资源，然后选择迁移（Migrate）。
* 添加了右键单击重定向器并手动修复的功能。该功能附带一系列警告。
	* 将不会修复卸载地图引用的重定向器，但是可能会修复对它的任何引用。
	* 将不会完全修复代码引用的重定向器。
	* 将不会完全修复不是最新版本或由其他用户签出的重定向器。
	* 将不会完全修复引用者不是最新版本、由其他用户签出或拒绝签出的重定向器。
* **大世界场景支持**
	* 添加了场景浏览器功能（开发中）。
	* 要启用，使用 **编辑（Edit）>首选项（Preferences）> EpicLabs >场景浏览器（WorldBrowser）**。
	* 场景可以通过 **文件（File）>打开场景（Open World）** 命令打开。这将打开存储所有子关卡的文件夹。
	* 场景浏览器允许直观地在场景中放置子关卡，并管理这些子关卡之间的流送行为。
	* 要在游戏中运行场景，使用以下命令模式：`MyGame /Game/MyWorld/MyWorldPersistentMap?addmaps=Map01`
	* 在游戏过程中加载的场景可转移到新的原点（通常为零原点），现在不会自动工作，但以后可通过 `SetWorldOrigin` 控制台命令进行测试。
* **地形**
	* 现在可以为地形样条网格体选择“向前”轴，而非只有 Z 轴可用。
	* 在样条编辑模式下单击地形样条网格体现在将会选择该样条段。
	* 现在可以将地形导出为 FBX 格式。
	* 现在可以按在地形 Actor 属性中设置的减少 LOD 导出地形。
	* 已为地形高度图和图层添加“重新导入”功能，从该图层的原始导入文件或最近将图层导出到的文件重新导入。
	* 新的“交互式”属性更改类型，用于通过延迟碰撞数据重建在以交互方式编辑地形样条属性时修复停转。
	* 地形样条现在生成高细节碰撞，例如可以拦截子弹痕迹。
	* 如果地形编辑器处于打开状态且没有要编辑的地形，则“新建地形（New Landscape）”面板现在默认展开。
	* 已将工具提示添加到地形工具/笔刷按钮和设置。
* **关卡编辑器视口菜单打磨**
	* 将视口视图（View）菜单拆分成两个单独的菜单。
	* 相机类型和视图模式。
	* 已清理各种菜单标签和项目排列。
	* 已将图标添加到关卡视口菜单按钮标签！
	* 已显示相机类型和视图模式类型。
	* 工具栏菜单项控件现在支持可选标签图标。
* 模块 UI 现在包含重新加载（Reload）按钮。
* 关卡编辑器现在包含重新编译关卡编辑器（Recompile Level Editor）选项。
* 当用户单击其他窗口时编辑器的模态窗口会闪烁（目前仅限 Windows）。
	* 当另一个 Slate 窗口尝试激活时活动模态窗口（仅限编程/Slate 窗口，而非 OS 本机）会闪烁。
	* 已从 Windows 任务栏删除模态窗口。
	* 当模态窗口显示时后台窗口现在会完全禁用。
* 类注释现在编辑器中显示为工具提示。
* **分析器**
	* 添加了新事件图表控件（第一次迭代）。
	* 用户每次单击数据图表时，新事件图表将作为新分页式文档打开。
	* 添加了对以下视图模式的支持：
		* 层级
		* 基于包含时间的扁平（合并）
		* 基于独占时间的扁平（合并）
	* 已实现基本“展开热路径”和热路径的颜色编码。
	* 添加了事件图表的快捷菜单（未完全实现）。
	* 添加了统计数据聚合（第一次迭代）。
	* 数据图表摘要显示聚合统计信息和当前统计值。
* **静态网格体编辑器**
	* 可在静态网格体编辑器中对插槽进行重命名。
	* 现在按 Delete 键可删除静态网格体编辑器中的选定插槽。


#### 蓝图

* 用户现在可以双击蓝图图表中注释框的标题区域以编辑注释。
* 已为具有可见图元组件的所有基于 Actor 的蓝图添加蓝图缩略图渲染。
* 蓝图窗口中的变量和函数现在应遵循隐藏类别。
* 蓝图组件现在将使用合适的类图标。
* 添加了 GameplayStatics 函数以便在蓝图中使用 Push、Pop 和 Clear 函数。
* 蓝图现在支持非唯一潜在动作，例如在循环中加载关卡地图。
* 蓝图编辑器现在提供区分按钮，能让用户对源码控制持有蓝图的早前版本进行区分。
* 已为从我的蓝图（My Blueprints）选项卡中选择的属性添加在详细信息面板中直接编辑默认值的支持（实验性；由 Epic Labs 标记选通）。
* 蓝图编辑器调试工具栏现在包含 PIE 按钮。
* 其中包含无限循环的蓝图现在将抛出蓝图异常，将会记录该异常，并在蓝图调试器中中断（如果处于活动状态）。
* 现在，新创建的蓝图会在组件模式下打开，而非图表模式。
* 蓝图模式取色器已成为 SColorBlock 的父级，因此它不会显示为顶层窗口。
* 编辑器现在允许用户将暂停模拟向前推进一帧。


#### 分析

* 如果事件率超过设定限制，SwrveAnalytics 现在会发出警告。
	* Swrve 定义 60/分钟，但这是聚合衡量标准。如果超过 70/分钟，我们建议限制事件。
* 当 UE_BUILD_SHIPPING 构建设置或 -RELEASEANALYTICS cmdline 时，分析现在选择发布帐户。


#### Gameplay 和框架
  
* 已将 `OnActorHit` 委托添加到 Actor。
* **复制**
	* 组件复制：[](https://udn.unrealengine.com/questions/165062/component-replication.html)
	* 快速 TArray 复制：[](https://udn.unrealengine.com/questions/164217/how-can-i-improve-performance-of-tarray-replicatio.html)
* **导航网格体**
	* 添加了可配置 ini 机制以控制是否应在正在生成寻路网格体时执行体素过滤 (RecastNavMesh::bPerformVoxelFiltering)。
	* 已实现通用机制以便在构建寻路网格体时将导航链接端对齐到静态几何体。
	* 可通过 ini 文件配置最大导航查询搜索节点数 (RecastNavMesh::DefaultMaxSearchNodes)。
* 结构体现在可以包含受保护或私有反射成员变量。
* 新“dumpticks”控制台命令可将所有 Tick 函数转储到日志中。
	* 它可以采用可选“启用”和“禁用”参数，从而分别仅转储启用或禁用的 Tick 函数。
* 添加了“stats tree threadname (optional statname)”控制台命令，以切换 HUD 中统计信息的层级树显示。
	*“stats treeup (optional number of lines)”控制台命令将树向上移动。
	*“stats treedown (optional number of lines)”控制台命令将树向下移动。
* IsRunningGame() 和 IsRunningServer() 函数检查可执行文件是 MyGame.exe、MyGameServer.exe 还是正在游戏或服务器模式下运行的编辑器。
* 首次支持将瞬态输出写入“我的文档”中的用户保存位置。使用 -SaveToUserDir 启用。
* 已从 Actor 中删除多个 GetNetOwner 类型函数，并已使用 GetNetConnection 替换。
	* 已将 NetConnection 变量添加到 PlayerController，并已路由所有 GetNetConnection 调用。
	* 在服务器上为空 -> 本地玩家。
	* 在客户端上为空 -> 非拥有者。
	* 在服务器上不为空 -> 复制连接到客户端。
	* 在客户端上不为空 -> 复制拥有者。
	* 有望简化各种代码区域中的许多复制拥有者检查。
	* 允许没有玩家控制器的 Actor 重载 GetNetConnection 并使用 RPC/复制。
* 控制台自动完成
	* 允许控制台按照地图路径的游戏配置自动完成搜索。
	* 还可以在当前用户的开发者文件夹中搜索自动完成地图名称。


#### 核心

* **插件**
	* 初始 UE4 插件支持！（正在进行中，但可以使用）。
		* 可以创建 .uplugin 文件并声明要加载的模块。这些 uplugin 文件采用 JSon 格式。
		* `.uplugin` 文件由 UBT 和 UE4 自动发现。
		* 插件模块和 C++ 代码已自动添加到生成的项目文件中。
		* 已从 /Engine/Plugins 目录中发现并加载引擎插件。
		* 插件可以包含内容（Content）子文件夹。将会自动仔细检测这些内容。
		* 支持项目特定插件！可以创建 <GameName>/Plugins 目录。
		* 单块构建当前在该项目的所有插件中编译。
		* 插件支持多个模块；每个模块可以分类为编辑器、运行时或开发。
		* 支持多个插件加载阶段（PreEngineInit、PreGameInit、Default）。
		* 插件文件支持基本版本控制检查（引擎版本、文件版本）。
* 糟糕的情况（通常在从电子邮件粘贴命令行时）现在将会警告用户并退出。
* 已将 PhysX3Common* 从 Engine/Binaries/Win<32/64> 文件夹移动到相应的 Engine/Binaries/ThirdParty/PhysX 文件夹。
* 自动化窗口、控制器和工作人员模块现在是可重新加载 DLL。
* 在序列化为存档时，现在可以使用模块特定版本号。
	* 可以将类型为 FCustomVersionRegistration 的全局变量放置在模块中，以便在加载模块时注册模块版本。
* 子对象重定向器现在可以用于删除子对象。为此，需要将子对象重定向器添加到 .ini 文件，并将 NewSubobjName 设置为空字符串。
* 添加了对结构体重定向的支持。可以将结构体重定向添加到 .ini 文件，格式为 +ActiveStructRedirects=(OldStructName="Foo",NewStructName="Bar")。


#### 平台

* DependencyCache.bin 现在是按平台解决一些多平台构建问题。
* 平台特定 DLL（如 IOSTargetPlatform）现在将进入 Binaries/Win<32/64> 文件夹的子目录。
	* 模块规则现在可以在构建 DLL 时指定使用的 BinariesSubFolder。
* 新 WindowsServer 平台的烘焙更改
	* WindowsServer 忽略 SM4 着色器、SM5 着色器和所有纹理格式处理。
	* 已为渲染线程命令禁用 **ENQUEUE*** 宏。正在运行 UE_SERVER=1 时始终为 NOOP
* 专属服务器的初始工作是（NULLRHI，强制没有渲染线程等）。
* 专属服务器的自动登录（命令行中的 -login/-pass 将尝试登录在线服务，然后调用 RegisterServer()）。
* 大型 IOS 更新（音频、Slate、虚幻控制台支持）
* 添加了 PushDllDirectoty/PopDllDirectory 以便安全修改 DLL 搜索路径。
* 已添加在加载之前检查有效平台 DLL 的支持（因此，在 Win64 支持 DLL 中进行检查，如果未安装 PS4 SDK，则 PS4 不会加载，这可能会导致崩溃）。


#### 动画

* **角色编辑器视口**
	* 添加了视角之外的其他视口类型（正交顶部、侧面和左侧）
	* 已在角色编辑器视口为“F”添加键处理程序，以专注于预览网格体（或已选择的骨骼或插槽）。
	* 已从角色编辑器视口菜单删除“骨骼厚度（Bone Thickness）”选项。
	* 添加了新功能以指定骨骼轴显示模式，可通过角色编辑器视口显示（Show）菜单进行控制。
	* 添加了在角色编辑器中隐藏预览网格体的功能。
	* 已在角色编辑器中添加附加动画渲染模式。
	* 已在角色编辑器中更改骨骼渲染以绘制线框骨骼和球体，并根据选定骨骼进行着色。
* 添加了对使用 AnimComposite 在角色编辑器中创建和编辑，以及在 Vim 蓝图中使用它们的支持。
* 已在角色编辑器中将相机锁定和相机跟随的目标点更改为预览网格体边界的中心，而非 Actor 位置。
* **同步组**
	* 可以将序列播放器和混合空间声明为同步组的成员，同步组领导者控制所有其他成员的时间推进和通知生成
	* 每个同步组成员都拥有一个角色：最高总混合权重（默认）的领导者始终既是领导者，也永远不是领导者。
* 已将“导出 FBX”功能从角色编辑器视口菜单移动到资源浏览器，并添加了对一次导出多个动画的支持。
* 现在可通过快捷菜单处理顶点变形目标删除。


#### 渲染

* **粒子系统**
	* 全局矢量场厚度可以从全局矢量场级联模块中覆盖。
	* 粒度材质节点现在可用。此节点返回世界场景空间中粒子的 xy 大小。
* **材质**
	* TextureObject 表达式在创建时自动分配选定纹理。
	* TextureObject 表达式现在包含使用当前纹理（Use Current Texture）菜单选项。
	* TextureObject 和 TextureSample 可以与新菜单选项互换。
	* WorldPosition 材质表达式现在包含新设置，用于确定是否希望场景位置包含任何着色器偏移。着色器偏移包含场景位置偏移和任何曲面细分。
* **后期处理效果**
	* 已使用新的动态模糊算法替换现有的动态模糊算法，类似于 [](http://graphics.cs.williams.edu/papers/MotionBlurI3D12/McGuire12Blur.pdf)，但仍然保持一半分辨率，将进行进一步的细微改进。
	* 可以在网格体/图元组件或游戏代码的编辑器复选框中，启用自定义深度通道渲染的第一次迭代和图元组件的复选框，然后启用需要拾取以使它可见的后期处理（对于轮廓渲染很有用）。
	* 通过材质进行后期处理的第一次迭代可用（可指定要在全屏通道中渲染的 PostProcessVolume 中的材质，使用 SceneTexture 材质表达式输入 Postprocess0 或 GBuffer 属性），需要改进 TemporalAA，支持多个通道和其他更改。
	* TemporalAA 现在是默认抗锯齿解决方案。这可以生成比 FXAA 更平滑且品质更高的图像。
* 已将 **ShadowSharpen** 属性添加到光源。
* 已通过 r.CompositionGraphDebug 添加合成图表调试转储。
* 使用分辨率和乘数值时，HighResShot 命令现在可以正常使用。用法示例：HighResShot 1920x1080。


#### 音频

* 添加了 SoundNodeBranch。可以在 AudioComponent 上使用命名布尔参数更改 SoundCue 行为。
* 已将 SoundMode 重命名为 SoundMix。
* 现在可以选择设置单个 Base SoundMix 并推送多个 SoundMix 修改器。
* 已使用活动 SoundMix 列表及其当前状态替换单个 CurrentMode 及其淡出量，以及 BaseSoundMode 的概念。
	*“STAT SOUNDMIXES”命令现在显示处于活动状态的 SoundMix（有效替换 ListSoundMode 命令），及其淡入级别和控制 EQ 的模式。
	* 音频效果管理器现在会在应用 EQ 更改之前检查声音模式的优先级。
	* EQ 控制可以通过 EQ 优先级（EQ Priority）属性进一步指定，并且可以使用新功能在禁用所有声音模式后清除 EQ 效果。
* 已通过新的混响效果资源类型公开混响设置。


## Upgrade Notes （以下内容仅供参考，不作翻译）

#### Editor and Tools
 
* Game, Editor, GameUncooked and Server now have their own target types - used in the Target.cs files 'Type' property. 
	* TargetType.Game:         Builds a UEBuildGame target. 
	* TargetType.Editor:       Builds a UEBuildEditor target. 
	* TargetType.Server:       Builds a UEBuildServer target (dedicated server). 
	* TargetType.GameUncooked: Builds a UEBuildEditor target that defaults to running the game (via the `-game` argument). 
	* See [Target Changes](https://udn.unrealengine.com/questions/166994/ue4-target-changes.html) for complete details and upgrade info
* As the UE4Editor.exe Example will no longer work, you must use UE4Editor.exe QAGame instead.
* TFieldIterator constructor params have been changed from boolean to enum types in order to improve readability. Existing uses of TFieldIterator will require updating.
	* All components can now be activated or deactivated.
	* bIsActive moved from SceneComponent to ActorComponent.  
	* Inactive components will disable their tick.
	* Existing ActorComponents that require a tick will either need to Activate at the appropriate time or specify bAutoActivate = true in the constructor.
* Send PhysicsTransform is no longer virtual. OnUpdateTransform should be used instead.
* Input bindings system restructured.
* Steam SDK upgraded to 1.23a.
* Refactored named net drivers into definitions and active driver list.
	* NamedNetDrivers parameter in DefaultEngine.ini is now named NetDriverDefinitions.
		* GetNetMode now looks at state of net driver for determining server/client/standalone.
		* NetMode variable is still around but is deprecated.
* The Messaging system has been upgraded to use strongly typed messages (UStructs).
* Semi-colons on the end of GENERATED_UCLASS_BODY() declarations are no longer supported.
* Refactored actor factories to be able to determine if they can create an actor from a piece of content without requiring the content be loaded.
* This in preparation for features involving filtering content out which actors can't be created from and will require that such content be resaved when the feature comes online in the future for them to be interact properly.
* All 'unofficial' (ie you don't get it from perforce or the ArtistSync) shortcuts, bat files, etc. that people utilize will need to be updated. 
	* Removed code that was forcing Win32 builds to be monolithic/requirescookeddata. 
		* **NOTE:** Win32 editor builds still wont work due to the aligned parameter issue in the compiler (this happens in both VS2010 and VS2012). 
		* **NOTE:** If you build the 'Uncooked' version of your game, all old commandlines will still work... with the exception of running commandlets. These require "-run=" to work in either exe now.
* Any code that was calling the previously global canvas functions (EG. ) must now call the same functions from the canvas context rather than passing the context as a parameter.
* GIsGame has been replaced with FApp::IsGame(). 


#### Blueprints

* Blueprints now respect LifeSpan.  If LifeSpan is non-zero, blueprints will now be set to tick, and destroy themselves after they expire.  Please be aware that this may increase the number of ticked actors in your scenes.
* Category hiding is now respected for variables in Blueprint editor. 
	* Removed blueprint access from a number of properties where it did not make sense. 
	* Hide nonsensical categories for lots of classes (mainly components) e.g. physics on an arrow component.
* Made Canvas property of HUD protected.
	* Required changing signature of DisplayDebug take a canvas and not a HUD.   
* Blueprint function Actor.DestroyComponent has been deprecated.  ActorComponent.DestroyComponent should be used instead.
* Many 'BlueprintCallable' functions on Actor classes are now deprecated. This may result in warnings in existing level blueprints.
	* Affects AmbientSound, DecalActor, DynamicSMActor, RadialForceActor, physics functions on Actor, Emitter, Light.
	* Can now call the Component functions more easily on Actors that contain one, using the ExposeFunctionCategories metadata.
* If you drag off an Actor reference, it will offer exposed Component functions, and will place a 'call function on member' node (which combines 'get' and 'call' nodes).
* If you try and connect an Actor to a component function, it will try and insert a 'Get' node if that Actor contains a Component of the correct type.
* Removed NativeConstructionScript, IsRootComponentSimulatingPhysics, CheckHitInfo, GetActorMetrics, SetActorAndComponentsTickEnabled from Actor.
* Removed AlwaysRelevantDistanceSquared, SetViewRotation, TickSimulated, SetMaxLandingVelocity, HurtByDamageType from Pawn. 
* Removed PreRender , GetPartyMapName, GetPartyGameTypeName from PC. 
* Renamed URB_BodySetup to UBodySetup. 
* Removed WillHurt, ModifyPlayer, NotifyPawnBecameViewTarget from PhysicsVolume. 
* FEdGraphSchemaAction_K2NewNode::InstantSpawn has been renamed to SpawnNodeFromTemplate.
* Any custom blueprint node templates created for graph schema menu / palette building must now be created with an outer that can trace back to the blueprint.  See the changes made in UEdGraphSchema_K2 for examples if you have a custom schema derived from it.
* Renamed WorldInfo to WorldSettings.
	* Make sure to get redirector in BaseEngine.ini.
* AActor::VerifyNoUnreachableReferences has been removed.
* AActor::TickSpecial has been renamed ::Tick.
* AActor::TickAuthoritative and TickSimulated have been removed.


#### Gameplay and Framework

* PhysicsActor and PhysicalMaterial now no longer have direct support for sounds/effects.
	* Now you create a game-specific PhysicsCollisionHandler, which is given all physics collisions each frame, and can do what it wants with them.
* Removed virtuals NotifyHitActor/NotifyHitByActor from Actor.
	* Now override ReceiveHit now for a blocking collision.
* Removed virtuals NotifyActorTouch, NotifyActorUnTouch, NotifyComponentTouch, NotifyComponentUnTouch from Actor.
	* Now override ReceiveActorBeginOverlap and ReceiveActorEndOverlap, or overlap delegates on PrimtiveComponent.
* **Physics: Collision:** 
	* CollisionProfileSystem redone - check BaseEngine.ini for new sets.
	* Channels Renamed : Pawn->PawnMovement, Vehicle->VehicleMovement, RigidBody->PhysicsBody.
	* Channels Removed : Mover(->Default), RigidBodyInteractable(->PhysicsBody), Cloth, DeadPawn.
	* Channels moved out of engine: TraceWeapon, Projectile, Pickup (check QAGame's DefaultEngine).
	* Setting a collision profile after instantiated for the one that didn't have before can override collision settings.


#### Rendering

* Added AA Method to post process settings.
* Removed MotionBlurPerObjectDistance from post process settings.
* **Atmospheric fog:** 
	* Added Altitude layer control property.
	* Added Altitude scale change which only affects Z location.
	* Added r.Atmosphere (0 or 1) console command, which enable/disable atmospheric fog + reload/remove related resources.
	* Added show flag for atmosphere, separate from fog.
	* Reduced view uniform buffer variables to be half-resolution to reduce size.
	* Removed artifacts for fog rendering for levels that doesn't have a skybox.
* LightShaft : Added LightShaft CVar r.LightShaftDownSampleFactor (Scale lightshaft downsampling).
* Landscape : Improved smooth tool, added smooth filter size adjustment.
* New IBL shading model approximation using preintegrated GF. The new solution is more accurate but can change the look of existing materials.


#### Audio

* SoundNode::Parse API changed to correctly track the path through SoundCue when the graph isn't a tree.  
	* Each visited node applies itself to a hash using GetNodeWaveInstanceHash.  
	* This is handled in SoundNode::ParseNodes automatically, however, any node that calls ParseNodes on its ChildNodes directly must apply this (see USoundNodeMixer::ParseNodes for example).


## Future Additions and Ongoing Efforts

#### Blueprints

* It is no longer necessary to compile a Blueprint in order to edit components after adding them in Components mode in the Blueprint editor.
* Clicking on entry/exit/collapsed nodes in a Blueprint graph now allows you to add inputs and outputs from the Details tab.
* Moved Blueprint settings into global user settings; they are now accessible through the Preferences Editor tab instead. Also removed the Settings menu from the Blueprint editor.
* Moved Blueprint Global Settings into the Details panel accessible via a new Blueprint Props toolbar button in the Blueprint Editor.
	* Also relocated the Reparent feature from the Blueprint Editor toolbar into the Details panel (it is no longer present in the editor toolbar).
* Changing component properties in the Details panel of the Blueprint editor now properly updates any Actor instances based on the Blueprint being edited.
* The Break Links submenu no longer appears in a Blueprint graph if there is only one subitem; only the subitem itself is shown.
* The Components toggle button is now enabled when reparenting from a non-Actor to an Actor-based Blueprint in the Blueprint editor.
* The Blueprint is now dirtied after moving its components around in Components mode of the Blueprint editor.
* The Blueprint preview viewport now includes a postprocess volume with an ambient cube map.
* Component editing mode can no longer be activated for non Actor-based Blueprints in the Blueprint editor.
* Components mode can no longer be activated in the Blueprint editor when editing macro Blueprints.
* Blueprint stability work to improve refactoring and deprecating code.
* Added GetPlayerCharacter() blueprint function to UGameplayStatics; it's just like GetPlayerPawn(), but returns an ACharacter instead of an APawn for those who need access to character and character movement.
* When a Select Node has a compilation error due to receiving an input index value higher than the number of options it supports (such as when an enum has values added to it in code after being used in a graph), it now outputs a message with much more information to track down the particular problem.  It now lists the full path of the blueprint in which the error occurred and the name of the select node's index type (i.e. bool, int, or the specific name of the enum).
* Deprecated blueprint functions can supply a helpful message using DeprecationMessage in the UFUNCTION meta section.
* Extensive UI and workflow polish for the Blueprint Editor.
* The delete button has been updated for Blueprint Macros details view inputs and outputs.
* New button artwork for the Replication State of Blueprint variables.
* Tidied up the Create and Harvest Blueprint buttons in the Details view.
* Message now shown when there are no results in the Find in Blueprints dialog.
* Blueprint functions are now checked that they exist when fetched by name. 
* Blueprint editor windows now close first when exiting the editor.
* New icon for hide pins in blueprint editor, replaced existing placeholder icon hide_unusedpins.png - non-destructive art only update.
* New clearer icons required for the various Blueprint compile states.  Replaced existing placeholder icon with new approved versions. Art change only - non-destructive. 
* Created icon for Create Blueprint from Actor and Harvest Blueprint (replaced existing placeholder icons) - non-destructive update.
* Created new icons for 'Find in current Blueprint', 'Blueprint Options' & 'Diff against previous revision', sizes available - 40px & 512px. PNG assets only. Non-destructive check-in (requires code hook-up).
* External (ThirdParty) modules now add their include paths the PublicInclude paths. 
* ThirdParty or system file include paths are not checked for forward vs back slashes.
* Re-adding interface FortInteractInterface to the blueprint (after removing) no longer results in an error.
* Blueprint functions can now be searched for by keywords
* LoadStreamlevel and UnloadStreamLevel blueprint actions will now do a partial match on the name provided and try to find a streaming level that ends with that string, not requiring full path.
* Blueprints are now preferred over other asset types when using find in content browser on an actor.
* Blueprint Compiling: Autogenerated variable names now include node GUIDs for disambiguation
* Improved workflow of Create Blueprint in the details panel.
* Ongoing UI polish to the blueprint editor.
	* Blueprint Explorer and Variables tabs have been fully deprecated and replaced with the MyBlueprint tab.
	* Blueprint Searching refactored. 
	* Blueprint Interface UI refactored
	* Added in ability to toggle context sensitivity in the graph action menu.
* Added a keyboard shortcut to edit the node title of any nodes that support it (F2)
* Made it possible to add node title renaming support to any node without engine modifications
* Various improvements to how node templates are created in graph schemas
* Various improvements to comment boxes (in-place editing, better hit testing when zoomed out or overlapping, etc...)
* Needs to be recompiled icon updated existing icons with more colour saturation & a change of color for Compiled - Dirty icon. Art change only - non-destructive.
* Created new icons for Add Variable, Function, Macro, and Event Graph. Sizes available at 16px, 40px, and 512px. New art assets - none destructive check-in. 
* Exposed MovementComp_Projectile::StopMovement to Blueprints. 
* Filter for CallFunction is now based on friendly name and, if applicable, will also use compact name

 
#### Framework

* Improvements to ACharacter::BaseChange() and JumpOff():
	* ACharacter::BaseChange() now checks the ACTUAL actor the character is based on even if it is World Geometry to see if it CanBeBaseForCharacter(). Specific types of actors that are WorldGeometry for other purposes (and so would return the WorldInfo as the base) can now correctly direct characters to JumpOff(). 
	* MovementComp_Character::JumpOff() now takes the movement base as an argument so that derived classes can override handling (such as choosing the direction to jump) based on the actual actor they're standing on.
	* Wrote a new function UMovementComp_Character::GetBestDirectionOffActor(...) which can be overridden to choose to jump based on character velocity, base actor dimensions, etc.
	* Exposed a magic number in code (0.5 z value) as JumpOffJumpZFactor.  This parameter can be used to tweak the height of a jump when jumping off something that can't be a base for a character.
* **Collision**
	* Disabled default pawn to interact with physics object until they turned to ragdoll
	* Renamed channels from ECC_Touch to ECC_Overlap
* Physx memory footprint is now reported by GetResourceSize.
* GameVer in addition to Engine Version, will also return Branch Name, Build Configuration and Command Arguments.  Will also copy this to the clipboard for easy pasting in TTP. 
* load/unload/reload exec functions now utilized pre/post callbacks for module cleanup. 
* General reduction of GWorlds.
* Exec functions refactored and command functionality moved into per-command functions.
* Removed UMovementComponent::SetPlayerDefaults(). Not needed in engine, plus what you might want to reset to is game specific.
* Modifier keys are now processed when the player controller is in a paused state. This means that the GPU profiler can be accessed or shaders can be recompiled while the game is paused.
* Get/SetOrigin renamed to Get/SetLocation on FTransform
* Revised lifespan implementation 
* Some canvas functions that were global and were passed a canvas context have been moved into canvas class.
* Moved editor specific actor labeling functions out of actor class.


#### Engine and Core

* UnrealBuildTool startup times have been greatly improved.
* "Plugin" support is now partially implemented.  We're still working on making this more robust for a future release.
	* Two example plugins were added for testing purposes.
* Fully eliminated `bAllowManagedCode` and `WITH_MANAGED_CODE`
* `LoadANSITextFileToStrings` now preserves empty lines.
* `FCoreDelegates::LevelAddedToWorld`, `FCoreDelegates::LevelRemovedFromWorld` now called in game and editor
* Moved `GetCategory` and `GetCategoryFName` out of UProperty - these are now utility functions in the `FObjectEditorUtils` namespace 
* Engine now gathers hardware stats on first run for analysis (currently Windows only).
* All icons recreated for Live Preview, Stats Profiler, & Memory Profiler. replaced existing placeholder icons. Non-destructive checking - Change List is PNG assets only. 
* The bad command line '-' case is now caught and informs the user before exiting the app. 
* Messaging: ongoing improvements for message de-/serialization and transport
* UObject native base classes no longer have to start with 'F'.
* Remote debugging setup 
	* Engine.ini has the following settings:
			
			[Engine.ErrorHandling] 
			bPromptForRemoteDebugging=false
			bPromptForRemoteDebugOnEnsure=false
		* If either is set to true, then the user will be prompted to get a programmer when a crash occurs so they can remotely debug the issue. 
		* If the latter is true, the prompt will also occur on ensures. 
		* They can also be set via the command line with `-PROMPTREMOTEDEBUG` and `-PROMPTREMOVEDEBUGENSURE` respectively. 


#### Platforms

* Porting the engine and the editor to Mac
* **Unreal Frontend**
	* The Launcher is being upgraded to use the new Unreal Project files; currently defunct 
	* Toolbar icons for Device Manager, created new icons for power on/off/reset. Require code hook-up.
	* Screen shots are now sent to directly to the FrontEnd app that requested them
	* Coded new layout for the Device Manager - **Power On**, **Power Off**, and **Reboot**.
* DependencyCache.bin files now exist per-platform.
* Module rules can now specify a `BinariesSubFolder` that is used when building DLLs. For example:
	
	If `BinariesSubFolder=IOS`, the resulting DLL for Win64 builds would be placed in `Engine/Binaries/Win64/IOS` 
* If Game or Server target for Desktop platforms, the Sandbox directory will be inferred if not specified.
* Moved `PhysX3Common` to the `Engine/Binaries/ThirdParty` folder as it is no longer required to load as part of Engine 


#### Online

* Steam lobbies auto set join-ability when it is determined the lobby is full


#### Audio

* Can now play and stop the current Sound Cue in the Editor by hitting the spacebar.
* Surround right speaker is no longer muffled when using 6 channel ogg files.
* Graph Nodes will now be deleted if associated Sound Node is removed.
* Now able to re-import multichannel sounds.
* Can now undo the breaking of connections in Sound Cue Editor.
* SoundModes can now be activated via SoundClasses when sounds are playing.
* SoundWave assets now display a wave form in their thumbnail.
* More greedy VOIP data transmission 
	* send all voice data up to 1k in one bunch immediately 
	* no longer buffering data at all over multiple frames


#### Editor and Tools

* **Slate**
	* Working on MultiLineEditableText feature for SlateUI
	* Changed SColorBlock to not use disabled styling
	* Empty MultiBoxs no longer take up additional room when constructing their widget. 
* **User Interface**
	* The editor no longer pops up behind previous windows when opening.
	* Renamed AutonomousTabPanel to NomadTab. Fixed up associated function names, comments, and variables.
	* Nomad tab spawners no longer spawn their tab when restoring layout if the tab has already been spawned.
	* Nomad tabs can now be docked in major tab wells. Nomad tabs are now styled like Major tabs when floating or docked in major tabwells.
	* TabSpawnerEntries now have the ability to opt-out of menu placement.
	* Added support for legacy tab types, which allows legacy tab names to be registered to auto-change IDs at spawn time.
	* Removed all uses of AddHeader and most uses of AddMenuSeparator throughout the engine. 
	* Lots of polish to main editor menus (visuals, arrangement, etc.)
	* Updated the Property Matrix button in the Details view.
	* Updated the Vertex Density mode menu item with new artwork.
	* Updated the immersive mode's Restore button.
	* Updated icon artwork for Foliage Mode save/load settings.
	* An expansion button is displayed when toolbar and menu bar buttons get clipped which, when clicked, generates a context menu containing the clipped items
	* Undo/Redo menu options have icons again.
	* WorkflowTabs now appear listed under the Asset Editor category of the Windows menu.
	* Created new ' x' (delete button) with less alpha. Non-destructive check-in - art asset only  
	* Created new 16px icon for Property Matrix button & related windows/menu items. Requires code hook-up. 
	* Restore from Immersive button icon - created new 16px icon, requires code hook-up. Non-destructive check-in, art asset only. 
	* New icon for Replication icon for editor, to be hooked up in code for state changes. Non-destructive check-in, art asset only.
	* Created new icon for Viewport: Vertex Density. requires additional code hook-up. Art asset replacement only, non-destructive update. 
	* Created new icons for the Foliage Mode. Art asset replacement only, non-destructive update. 
	* created new 16px icons for all the following actor classes, ArrowComponent, AtmosphericFogComponent, BoxComponent, CapsuleComponent, DestructibleMeshActor/Component, InstancedStaticMeshComponent, MaterialSpriteComponent, RadialBlurComponent, SceneCapture(Component), SceneCapture2D(Component), SceneComponent, SphereComponent, SpriteComponent, TextRenderActor/Component. PNG assets only. Non-destructive check-in (requires code hook-up). 
	* All main Editor toolbar icons recreated & updated (additional icons for alternative play options are covered in another TTP). Non-destructive check-in - Change List is only adding higher resolution assets at 512px. 
	* Created new 16px icons for the Level Browser menu. New PNG files, none destructive checking - requires code hook-up. 
	* Created new icon for deleted actors. size: 16px. - non-destructive update. 
* Added _explore to directory_ and _launch in external editor_ support for data and curve table assets.
* Improvements to navmesh generation performance
* **Scene Outliner**
	* Now has a yellow border when in SIE mode
	* Correctly refreshes content when new level added or removed
	* Scene Outliner now displays nested actors correctly in the search results.
* Refactored Layers implementation to simplify and consolidate code paths
* **Project Workflow**
	* Visual improvements for the new project dialog.
	* Switching projects now preserves the command line arguments used to launch the editor.
	* Quit dialog no longer appears when switching projects.
	* '^' characters are no longer allowed in project file paths since it confuses visual studio.
* **Content Browser**
	* Packages that get re-scanned for dependencies after the initial asset search will now properly update.
	* Folders are now created on demand if explore is chosen in the Content Browser.
	* Added better asset name checking early in the rename process in the Content Browser so we can trigger the friendly enter a new name code path.
* Added GetLabels to FSourceControl, which returns all labels in source control matching the supplied pattern string
* CrashReporter: web site is mostly done for all browsers, everything is working as intended. Major item left is documentation.
* **Landscape**
	* Added ability to edit landscape proxies without loading LandscapeActor
	* Landscape proxies now can have own origins not necessarily at the same location as landscape actor position
	* Landscape splines are now considered to be static components
	* Landscape static lighting is now invalidated when altering the heightmap
	* Cancel button on the** Are you sure?** button for deleting end control points of a landscape spline actually cancels the delete again.
	* Landscape editor now forces all viewports to real-time, not just the active perspective viewport, making it easier to see changes being made
	* Newly created layer info objects now show up in the content browser and want to be saved when saving / quitting.
	* Replaced the "new layer info" path text box with a folder picker.
* **Matinee**
	* Matinee drop down menu now spawns at the correct size to avoid popping.
	* Reworded matinee dialog text to not mention tab position (as it can be moved).
	* Matinee now closes when that actors level is remove via the level browser.
	* Camera actor mesh updated, created new mesh consistent with new camera icons, added material & texture. 
	* Refactored interp-related utilities code - it is now in the FMatineeUtils namespace
	* Subtitles now shown for first sound in a matinee track. 
* **Level Editor**
	* Level editor tab again shows truncated level name.
	* Added a new config setting (DefaultMapName) for specifying what map the editor should load on startup 
		* This differs from the SimpleMapName pipeline and, instead, resembles the behavior of when the map name is specified via the command line
	* Viewports now update their camera position if their locked actor is moved in another viewport.
	* Duplicating numbered actors, labels the new actor with the next logical number.
	* Auto-naming now preserved preceding 0s when duplicating actors.
	* Attachments
		* Actor Transformations no longer stack up if dragging a parent and its child.
		* Copy and Pasting actors will now maintain the parenting hierarchy.
		* Attaching multiple actors to another actor which is also selected now produces and error.
		* Prevent parents becoming assigned as the children of their descendants.
	* Keyboard shortcut now appears in the possess/eject button tooltips.
* BuildingWall toggling now possible when BrushEdit is active. 
* Reworded LOD group popup to be clearer.
* Removed usage of package from asset migration dialog.
* Creating Destructible Mesh now also opens for edit and syncs to asset in Content Browser.
* PlayOn instances are killed when the editor closes.
* Any error generated by generating unique UVs in the static mesh editor is now displayed as a notification.
* Socket Manager widget now updates correctly when toggled from the level editor toolbar.
* Dragged assets now snap more accurately to the hit proxy actor.
* Toggling the override flag on a MIC param now updates the material.
* Automated Screen Shot capture test and browser update
* Added function name context info to warning message. To help tracking down where it comes from. 	Warning: BoneIndex for Bone (b_MF_Hand) is not found in the Skeleton (M_Avg_Base_AnimSkeleton) 
* Debugging: Added Cyan and Magenta default FColors. Added DrawDebugCircle. 
* Static Meshes with Material slots that are not referenced by any LOD are now NULLed on load. Extraneous indices are now trimmed as well.
* The ReferenceViewer is now a Nomad Tab.
* Creating a material with an initial texture now properly hooks up the texture to the base color.
* **Event Viewer:**
	* Updated Event Viewer to better sort the events by time.
	* More information provided for each event in the hierarchy.
* Static Mesh Editor: Showing/hiding sockets now refreshes the Static Mesh Editors viewport.
* Workflow for converting actors has been improved.
* The World Properties button has been updated to say World Settings, along with its tooltip.
* Blutility is now an Epic Labs preference.
* An Editor-only offset for streaming levels has been implemented, and a new optional column added to the Level Browser that allows setting of an Editor-only offset for each streaming level.
* Creating a new placement browser mode/toolset which will aid new users and level designers in their workflow
* Added a warning dialog for when the user modifies a package that is in a folder that they do not have permission to write to.
* When you are migrating assets and a package does not exist on disk, the user is prompted about it.


#### Rendering

* Reduced the number of shader permutations created by the spline mesh shader to one (parameterized) vertex factory, and optimized.
* Spline-deformed static meshes now support LODs.
* Spline-deformed static meshes can now be lit by static lighting
* Material Editor clean up now only dirties the material if its changed.
* Cascade color picker now registered as a child of the cascade viewport.
* Cascade layout now loads correctly.
* Current LOD dropdown now starts at 0, to conform with properties array.
* Swap Lowest/Highest LOD button functionality in Cascade.
* removed unnecessary confirmation dialog in Cascade when setting fixed bounds.
* ConditionalProcessCommandBindings now passed held/repeat state of key/mouse button, and ignores any commands if its true.
* Reparent option is now disabled when simulating.
* Autosave notification no longer says %d instead of the time. 
* Cascade emitter categories now only appear if there are valid children to display.
* SkeletalMesh Editor no longer displays the hierarchy of the last skeletal mesh when opening the current one.
* Improvements to banding on subsurface scattering colors.
* Destructible objects which have been fractured will now no longer receive decals
* When a light has been assigned an IES light profile, it will use the calculated texture multiplier whether you choose to use the IES brightness or not.
* Particle emitters now correctly orient the local z-axis towards the camera when this feature is enabled from Cascade
* Actor scaling is taken now into account for GPU particle systems.
* Added pause keeping Motion Blur, still needs some work
* There is now experimental support for SM5 rendering features via OpenGL 4.3.
* Removed check for static mesh in the material thumbnail scenes GetViewMatrixParameters as it is not technically required to determine the view matrix.
* Added more Gbuffer visualize modes
* Static mesh primitives with multiple parts using different materials which had mixtures of translucency modes (normal and separate) will now render correctly
* When a culling volume is deleted from the scene in the editor, all static mesh primitives will have their draw distances updated to reflect this change.
* "Visible In Game" flag on the atmospheric fog component is now respected


#### Animation

* Changed "Preview Mesh" item on Persona viewport show menu to "Mesh"
* Improved layout of pin-exposable properties on animation nodes
* Added UAnimMontage::GetSectionTimeLeftFromPos(). 
* Fixed and refactored Azimuth and Elevation math code. 
* Moved GetClosestCollidingBoneLocation from SkinnedMeshComponent to SkeletalMeshComponent, and made it actually check against colliding rigidbodies! It could return a non colliding one, and traces would fail. 

