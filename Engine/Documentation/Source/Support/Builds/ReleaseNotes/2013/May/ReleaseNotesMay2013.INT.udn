Title: May 2013 Release Notes
Availability:Licensee
Crumbs:%ROOT%, Support/Builds
Description:
Parent:Support/Builds
Order:-9
Order: 53

[TOC(start:2 end:2)]

## Build Info


[REGION:simpletable]
| Item | Info |
| ---- | ---- |
| **Label** | QA_APPROVED_UE4_BUILD_2013_05 |
| **Changelist #** | 1652795 |
| **VISUAL STUDIO VERSION** | Microsoft Visual Studio 2010 version 10.0.40219.1 SP1 Rel |
| **DIRECTX** | June 2010 |
[/REGION]

## Important information

 * Current Engine Development Roadmaps: [UE4 Roadmaps](https://udn.unrealengine.com/questions/topics/roadmap.html)
 * GDC Licensee Session Videos Available: [Licensee Videos](https://udn.unrealengine.com/questions/166995/gdc-2013-licensee-session-videos.html)
 * Changes to UE4 Build Targets: [UE4 Target Changes](https://udn.unrealengine.com/questions/166994/ue4-target-changes.html)


## Major New Features


#### Editor Systems

* **SkeletalMesh Importing Now Creates Physics Assets**
	* Import Dialogue now has an option to create a physics asset for a Skeletal Mesh automatically. 
	* On by default, it can work one of three ways during the import process:
	* It can create new assets for new meshes, 
	* The user can choose to share the physics asset with other Skeletal Meshes, or
	* The user can opt out, select nothing and unset **CreatePhysicsAsset**.
 	
		![](importSkM1.png) ![](importSkM2.png)
* **Collision System Interface Improvements**
	* Collision Profile System with interface improvements has been added.  
	* Current setup includes NavigationTestingActor, BlockingVolume, Character, InterpActor, StaticMeshComonent, and SkeletalMeshActor; a list of available profiles can be found in BaseEngine.ini.
	* Custom editing UI  (below screenshot) now has new channel mapping feature.
	* Custom engine/game channels can be renamed in the BaseEngine.ini.
* **Color Picker**
	* The Color picker now has eye-dropper functionality, allowing for faster color pickups from anywhere onscreen.
		![](dropper1.png) ![](picker1.png)
* **Source Control in Level Browser**
	* The user is now able to access source control functionality from the Level Browser.
		
		![](source.png)
	* This has great potential for consolidating and speeding up workflow for anyone who regularly must switch back and forth between their source control application and the UE4 Editor.


#### Blueprints

* **Input Binding Changes** 
	* You no longer explicitly add an input component to the blueprint; instead, you can add bindings to any actor blueprint from the Input submenu.
	* FYou can create Action and Key Events or place getters for the value of an Axis.  Key Events can specify the combination of Control, Alt, and Shift to use from the details panel.

		![](bindings2.png) ![](bindings3.png)
	* Actions and Axis are defined in Base/DefaultInput.ini, and each action can be mapped to multiple keys.
	* Actors are no longer controlled; they can be possessed as a Pawn, or have inputs enabled upon them.
	* Bindings in the Level Blueprint are always active, bindings in a Pawn are active whenever it is Possessed, and bindings in an Actor are activated/deactivated by calling Enable/Disable Input, with input stacks being ordered as follows:
		
		1. Actors with Enabled Input
		1. Level Blueprint
		1. Possessed Pawn


#### Animation

* **Extended Socket Editing**
	* Sockets are now added to the skeleton by default, and are even customizable!
	* Mesh-only sockets can now be promoted to the skeleton as well.
	* A filter has also been added to show different views of sockets, accessible via the viewport's "Show Sockets" mode.
	* You can choose to view Skeleton Sockets, which appear in grey, or Mesh Sockets, which appear as red hit points onscreen, using the "Active Sockets" filter in the Skeleton Tree.


#### Rendering

* **Post Process Materials**
	* Custom post process effects can now be authored in the material editor!
	* Multiple effects can be added to postprocess volumes.
	* Postprocess volumes will blend material parameters if the same base material is used.
	* Postprocess materials can access depth from a custom rendering pass, e.g. to mask off certain objects onscreen.
		![](Teaser3.png) ![](Teaser1.png)
		![](Teaser0.png) ![](Teaser2.png)
	* For more information, see [Post Process Materials](Engine/Rendering\PostProcessEffects\PostProcessMaterials) on UDN.


#### Audio

* **Sound Cue Editor**
	* When previewing a sound cue in the editor it will now display the path through the cue similarly to the impulses through a blueprint, useful whether your cues are simple, complex, or beyond.
		
		![](Car_Impact_Cue.jpg)(w:640)
* **Attentuation Shapes**
	* You may now choose from sphere (default), box, capsule or cone, each with its own shape properties.  
		![](attenuation1.png)(w:425)
	* Each attenuation volume can now have its own dimensions and falloff distances.


#### Unreal Frontend

* **Unreal Console Shortcuts**
	* Unreal Console/FrontEnd can now save often-used commands to a shortcut browser for easy reference and usage.
		
		![](console4.png)(w:800)


## New Additions

#### Editor and Tools

* **Slate and UI**
	* All menus support vertical wrapping.
		* Size of large menus is limited to fit inside the height of the work area.
		* Vertical scrollbars appear on menus when needed.
	* Added extensibility hooks to specific context menus (x17) in: Content Browser, Layers, Levels, LevelEditor, MaterialEditor, MaterialInstanceEditor, LevelBlueprint.
* The Content Browser is now a "Nomad Tab" and up to 4 can be summoned. Nomad Tabs can be docked in any dock area or tab well.
	* The Quick Browser and major tab Content Browser have been replaced with Content Browser 1 and Content Browser 2, respectively.
	* Content Browser 3 and Content Browser 4 have been added.
* MakeEditWidget metadata (vector widget editing) now works with vectors defined within struct/array data members of an Actor class.
* The New Project dialog can now be used in non-rocket builds. Launching UE4Editor.exe (or double clicking it) with no arguments will show you this dialog.
	* You can also access this dialog in the editor via File->New Project.
	* You currently cannot create projects with code templates. Try again in a future release.
* Added "Content Migration". This feature allows you to copy assets and all of their dependencies to another game.
	* Right click a level in the Level Browser, a folder in the Content Browser, or an individual asset in the Content Browser and choose Migrate.
* Added the ability to right click on a redirector and fix it up manually. This comes with a series of caveats.
	* Redirectors referenced by unloaded maps will not be fixed up, but any references to it that can be fixed up will.
	* Redirectors referenced by code will not be completely fixed up.
	* Redirectors that are not at head revision or checked out by another user will not be completely fixed up. 
	* Redirectors whose referencers are not at head revision, are checked out by another user, or are refused to be checked out will not be completely fixed up.
* **Large Worlds Support**
	* Added World browser feature (in development).
	* To enable, use **Edit > Preferences > EpicLabs > WorldBrowser**.
	* World can be opened by **File > Open World** command. Which opens a folder where all sublevels are stored.
	* World browser allows you visually place sublevels in the world and manage streaming behavior between those sublevels.
	* To run a world in a game use this command pattern:  `MyGame /Game/MyWorld/MyWorldPersistentMap?addmaps=Map01`
	* Loaded world can shifted to the new origin (usually zero origin) during gameplay, not working automatically now but will be in the future, can be tested via `SetWorldOrigin` console command.
* **Landscape**
	* The "forward" axis can now be chosen for Landscape Spline Meshes, instead of only Z being available.
	* Clicking on a Landscape Spline Mesh when in spline edit mode will now select that spline segment.
	* Landscapes can now be exported to FBX format.
	* Landscapes can now be exported at a reduced LOD, set in the Landscape actor's properties
	* Added "reimport" feature for landscape heightmaps and layers, reimporting either from the originally imported file for that layer or the file the layer was most recently exported to.
	* New "Interactive" property change type, used to fixed stalls when interactively editing landscape spline properties by deferring the collision data rebuild.
	* Landscape splines now generate high-detail collision, so can now e.g. block bullet traces.
	* "New Landscape" panel is now expanded by default if the landscape editor is open and there are no landscapes to edit.
	* Added tooltips to the landscape tool/brush buttons and settings.
* **Level editor viewport menu polish**
	* Split up viewport View menu into two separate menus. 
	* Camera types and View modes. 
	* Cleaned up various menu labels and arrangement of items. 
	* Added icons to the level viewport menu button labels! 
	* Both camera type and view mode types are displayed.
	* Toolbar menu item widgets now support optional label icons.
* Module UI now has a Reload button.
* Level Editor now has a Recompile Level Editor option.
* Editor's modal windows flash when the user clicks other windows (currently Windows only).
	* The active modal window (Programming/Slate windows only, not OS native) will flash when another Slate window attempts to activate.
	* Removed modal windows from Windows taskbar.
	* Background windows are now fully disabled background windows when a modal is shown.
* Class comments are now visible as tooltips in the editor.
* **Profiler**
	* Added a new event graph widget (first iteration).
	* Every time the user clicks on a data graph a new event graph will be opened as a new tabbed document.
	* Added suport for the following view modes: 
		* hierarchical
		* flat based on inclusive time (coalesced)
		* flat based on exlusive time (coalesced)
	* Implemented basic "expand hot path" and color coding for hot path.
	* Added context menu for the event graph (not fully implemented).  
	* Added stats aggregates (first iteration).
	* Data graph summary displays aggregated stat information along with the current stat value.
* **Static mesh Editor**
	* Sockets can be renamed in the Static Mesh Editor.
	* Pressing Delete key now deletes the selected socket in the static mesh editor.


#### Blueprints

* Users can now double-click on the title area of a comment box in a Blueprint graph to edit comments.
* Added Blueprint thumbnail rendering for all actor based blueprints that have visible primitive components.
* Variables and functions in blueprint windows should now obey hidden categories.
* Blueprint components will now use appropriate class icons.
* GameplayStatics functions have been added to enable use of Push, Pop and Clear functions in Blueprints.
* Blueprints now support non-unique latent actions such as loading level maps in a loop.
* The Blueprint Editor now offers a diff button which enables users to diff against previous revision of the Blueprint held by source control.
* Added support for editing defaults values directly in the details panel for properties selected from the My Blueprints tab (experimental; gated by an Epic Labs flag)
* The Blueprint editor debugging toolbar now includes a PIE button.
* Blueprints with infinite loops in them will now throw a blueprint exception, which will log, as well as break in the blueprint debugger, if active.
* Newly-created Blueprints now open in Components mode instead of Graph mode.
* Blueprint modal color picker has been parented to its SColorBlock so it doesn't appear as a top-level window.
* Editor now allows users to advance paused simulations by one frame.


#### Analytics

* SwrveAnalytics now warns if event rate exceeds a set limit. 
	* Swrve defines 60/minute, but that's an aggregate measure. We'll suggest you limit events if you exceed 70/minute. 
* Analytics now select Release accounts when UE_BUILD_SHIPPING build setting or -RELEASEANALYTICS cmdline.


#### Gameplay and Framework
  
* `OnActorHit` delegate has been added to Actor.
* **Replication**
	* Component Replication: [](https://udn.unrealengine.com/questions/165062/component-replication.html)
	* Fast TArray Replication: [](https://udn.unrealengine.com/questions/164217/how-can-i-improve-performance-of-tarray-replicatio.html)
* **Navigation Mesh**
	* Added a ini-configurable mechanism to control whether voxel filtering should be performed while generating navmesh (RecastNavMesh::bPerformVoxelFiltering). 
	* Implemented generic mechanism to snap navigation links end to static geometry at navmesh build-time.
	* Made max navigation query search nodes configurable via ini file (RecastNavMesh::DefaultMaxSearchNodes).
* Structs can now contain protected or private reflected member variables.
* New 'dumpticks' console command which dumps all tick functions to log.
	* It can take optional 'enabled' and 'disabled' parameters which make it dump only enabled or disabled tick functions, respectively.
* Added 'stats tree threadname (optional statname)' console command which toggles display of hierarchical tree of stats in the HUD.
	* 'stats treeup' (optional number of lines)' console command moves the tree up.
	* 'stats treedown' (optional number of lines)' console command moves the tree down.
* IsRunningGame() and IsRunningServer() functions check to see if the executable is either MyGame.exe, MyGameServer.exe, or the editor running in game or server mode.
* First pass support for writing transient output to a user save location, inside My Documents. Enable with -SaveToUserDir.
* Removed multiple GetNetOwner type functions from Actor and replaced with GetNetConnection. 
	* Added NetConnection variable to PlayerController and routed all GetNetConnection calls to it.
	* NULL on SERVER -> LocalPlayer. 
	* NULL on CLIENT -> Non Owner. 
	* NOT NULL ON SERVER -> replication connection to client. 
	* NOT NULL ON CLIENT -> replication owner. 
	* hopefully simplifies a lot of the repowner checks in various code areas. 
	* allows for actors without playercontrollers to overload GetNetConnection and use RPC/replication.
* Console autocomplete
	* Allow per-game configuration of map paths for console autocomplete searching. 
	* Also search the current user's developer folders for autocomplete map names.


#### Core

* **Plugins**
	* Initial UE4 plugin support!  (work in progress, but usable.).
		* You can create .uplugin files and declare modules to load. These uplugin files are in JSon format. 
		* `.uplugin` files are discovered automatically by UBT and UE4.
		* Plugin modules and C++ code is automatically added to generated project files.
		* Engine plugins are discovered and loaded from the /Engine/Plugins directory. 
		* Plugins can have Content sub-folders. Well detect these automatically. 
		* Project-specific plugins are supported! You can create a <GameName>/Plugins directory. 
		* Monolithic builds currently compile in all plugins for that project. 
		* Plugins support multiple modules; each module can be categorized as either Editor, Runtime or Development. 
		* Multiple plugin loading phases are supported (PreEngineInit, PreGameInit, Default). 
		* Plugin files support basic versioning checks (engine version, file version). 
* The bad '-' case (usually when pasting a command-line from an email) will now warn the user and exit.
* Moved PhysX3Common* from the Engine/Binaries/Win<32/64> folder to the appropriate Engine/Binaries/ThirdParty/PhysX folder. 
* Automation Window, Controller, and Worker modules are now reloadable DLLs. 
* Module-specific version numbers can now be used when serializing to archives.
	* A global variable of type FCustomVersionRegistration can be placed in the module to register the module's version when it's loaded.
* Subobject redirectors can now be used to delete a subobject. For this, you need to add an subobj redirector to the .ini file and set the NewSubobjName to an empty string.
* Support for struct redirects added. A struct redirect can be added to the .ini file in the format +ActiveStructRedirects=(OldStructName="Foo",NewStructName="Bar").


#### Platforms

* DependencyCache.bin is now per-platform to resolve some multiple platform build issues.
* Platform-specific dlls suchs are IOSTargetPlatform will now go into subdirectories of the Binaries/Win<32/64> folder.
	* Module rules can now specify a BinariesSubFolder that is used when building DLLs. 
* Changes for cooking for new WindowsServer platform
	* WindowsServer ignores SM4,SM5 shaders and all texture format handling. 
	* Disabled **ENQUEUE*** macros for render thread commands. Always NOOPs when running UE_SERVER=1
* Initial efforts for dedicated servers are in (NULLRHI, Forcing no render thread, etc).
* Autologin for dedicated servers (-login/-pass on commandline will attempt to login to online service then call RegisterServer()).
* Large IOS  update (Audio, Slate, UnrealConsole support)
* Added PushDllDirectoty/PopDllDirectory to modify DLL search paths safely.
* Added support for checking for valid platform DLLs before loading them (so checked in Win64 support DLLs, for say PS4 don't load if PS4 SDK is not installed, which could crash).


#### Animation

* **Persona Viewport**
	* Added other viewport types beyond Perspective (Ortho top, side and left)
	* Added a key handler for 'F' in Persona viewports that focus on the preview mesh (or a bone or socket if one is selected).
	* Removed 'Bone Thickness' option from Persona viewport menu.
	* Added a new feature to specify bone axis display mode, controlled via the Persona viewport Show menu.
	* Added ability to hide the preview mesh in Persona.
	* Additive animation render mode has been added in Persona.
	* Changed bone rendering in Persona to draw wireframe cones and spheres, colored based on the selected bone(s).
* Added support for using AnimComposite both creating and editing in Persona and their use in Vim blueprints.
* Changed target points for Camera lock and camera follow in Persona to be the centre of the preview mesh bounds, not actor location.
* **Sync Groups**
	* Sequence players and blend spaces can be declared as a member of a sync group, with the group leader controlling time advancement and notification generation for all other members
	* Each group member has a role: leader when highest total blend weight (default), always the leader, never the leader.
* Moved "Export FBX" functionality from Persona viewport menu to Asset Browser and added support for exporting multiple animations at a time.
* Morph Target deletion is now handled via context menu.


#### Rendering 

* **Particle Systems**
	* Global Vector Field tightness can be overriden from the Global Vector Field cascade module.
	* ParticleSize material node is now available. This node returns the xy size of the particle in world space. 
* **Materials**
	* TextureObject expressions autoassign selected texture on creation.
	* TextureObject expressions now have Use Current Texture menu option.
	* TextureObjects and TextureSamples can be interchange with new menu option.
	* The WorldPosition material expression now has a new setting which determines whether you want the world position to include any shader offsets or not. Shader offsets include the world position offset, and any tessellation.
* **Post Process Effects**
	* Replaced existing Motion Blur with new Motion Blur algorithm, similar to [](http://graphics.cs.williams.edu/papers/MotionBlurI3D12/McGuire12Blur.pdf) but still half res, minor further improvements upcoming.
	* First Iteration of CustomDepth pass rendering, checkbox at primitive component, following Post Process needs to pick it up to make it visible (useful for silhouette rendering) can be enabled in editor checkbox on Mesh/PrimitiveComponent or game code.
	* First Iteration of post processing through materials is available (can specify material in PostProcessVolume to be rendered in full screen pass, use SceneTexture material expression to input Postprocess0 or GBuffer properties), needs improvements for TemporalAA, support for multiple passes  and other changes.
	* Temporal AA is now the default anti-aliasing solution. This produces far smoother, higher quality, images than FXAA.
* Added **ShadowSharpen** property to lights.
* Added compositing graph debug dump through r.CompositionGraphDebug.
* The HighResShot command now works when using a resolution as well as a multiplier value. Example usage: HighResShot 1920x1080.


#### Audio

* A SoundNodeBranch has been added.  You can use named Boolean parameters on an AudioComponent to change SoundCue behavior.
* SoundModes renamed to SoundMix.
* Now have option to set a single Base SoundMix and push multiple SoundMix modifiers.
* The singular CurrentMode and its fading amounts, as well as the idea of a BaseSoundMode, has been replaced with list of active SoundMixes and their current state.
	* The 'STAT SOUNDMIXES' command now shows which SoundMixess are active (effectively replacing the ListSoundModes command), their fade-in levels, and which Mode is in control of EQ. 
	* Audio Effect manager now checks priority of Sound Modes before applying EQ changes.
	* EQ control can further be specified by the EQ Priority property, and there is a new function to clear the EQ effects when all Sound Modes are disabled. 
* Exposed Reverb Settings via a new Reverb Effect asset type.


## Upgrade Notes

#### Editor and Tools
 
* Game, Editor, GameUncooked and Server now have their own target types - used in the Target.cs files 'Type' property. 
	* TargetType.Game:         Builds a UEBuildGame target. 
	* TargetType.Editor:       Builds a UEBuildEditor target. 
	* TargetType.Server:       Builds a UEBuildServer target (dedicated server). 
	* TargetType.GameUncooked: Builds a UEBuildEditor target that defaults to running the game (via the `-game` argument). 
	* See [Target Changes](https://udn.unrealengine.com/questions/166994/ue4-target-changes.html) for complete details and upgrade info
* As the UE4Editor.exe Example will no longer work, you must use UE4Editor.exe QAGame instead.
* TFieldIterator constructor params have been changed from boolean to enum types in order to improve readability. Existing uses of TFieldIterator will require updating.
	* All components can now be activated or deactivated.
	* bIsActive moved from SceneComponent to ActorComponent.  
	* Inactive components will disable their tick.
	* Existing ActorComponents that require a tick will either need to Activate at the appropriate time or specify bAutoActivate = true in the constructor.
* Send PhysicsTransform is no longer virtual. OnUpdateTransform should be used instead.
* Input bindings system restructured.
* Steam SDK upgraded to 1.23a.
* Refactored named net drivers into definitions and active driver list.
	* NamedNetDrivers parameter in DefaultEngine.ini is now named NetDriverDefinitions.
		* GetNetMode now looks at state of net driver for determining server/client/standalone.
		* NetMode variable is still around but is deprecated.
* The Messaging system has been upgraded to use strongly typed messages (UStructs).
* Semi-colons on the end of GENERATED_UCLASS_BODY() declarations are no longer supported.
* Refactored actor factories to be able to determine if they can create an actor from a piece of content without requiring the content be loaded.
* This in preparation for features involving filtering content out which actors can't be created from and will require that such content be resaved when the feature comes online in the future for them to be interact properly.
* All 'unofficial' (ie you don't get it from perforce or the ArtistSync) shortcuts, bat files, etc. that people utilize will need to be updated. 
	* Removed code that was forcing Win32 builds to be monolithic/requirescookeddata. 
		* **NOTE:** Win32 editor builds still wont work due to the aligned parameter issue in the compiler (this happens in both VS2010 and VS2012). 
		* **NOTE:** If you build the 'Uncooked' version of your game, all old commandlines will still work... with the exception of running commandlets. These require "-run=" to work in either exe now.
* Any code that was calling the previously global canvas functions (EG. ) must now call the same functions from the canvas context rather than passing the context as a parameter.
* GIsGame has been replaced with FApp::IsGame(). 


#### Blueprints

* Blueprints now respect LifeSpan.  If LifeSpan is non-zero, blueprints will now be set to tick, and destroy themselves after they expire.  Please be aware that this may increase the number of ticked actors in your scenes.
* Category hiding is now respected for variables in Blueprint editor. 
	* Removed blueprint access from a number of properties where it did not make sense. 
	* Hide nonsensical categories for lots of classes (mainly components) e.g. physics on an arrow component.
* Made Canvas property of HUD protected.
	* Required changing signature of DisplayDebug take a canvas and not a HUD.   
* Blueprint function Actor.DestroyComponent has been deprecated.  ActorComponent.DestroyComponent should be used instead.
* Many 'BlueprintCallable' functions on Actor classes are now deprecated. This may result in warnings in existing level blueprints.
	* Affects AmbientSound, DecalActor, DynamicSMActor, RadialForceActor, physics functions on Actor, Emitter, Light.
	* Can now call the Component functions more easily on Actors that contain one, using the ExposeFunctionCategories metadata.
* If you drag off an Actor reference, it will offer exposed Component functions, and will place a 'call function on member' node (which combines 'get' and 'call' nodes).
* If you try and connect an Actor to a component function, it will try and insert a 'Get' node if that Actor contains a Component of the correct type.
* Removed NativeConstructionScript, IsRootComponentSimulatingPhysics, CheckHitInfo, GetActorMetrics, SetActorAndComponentsTickEnabled from Actor.
* Removed AlwaysRelevantDistanceSquared, SetViewRotation, TickSimulated, SetMaxLandingVelocity, HurtByDamageType from Pawn. 
* Removed PreRender , GetPartyMapName, GetPartyGameTypeName from PC. 
* Renamed URB_BodySetup to UBodySetup. 
* Removed WillHurt, ModifyPlayer, NotifyPawnBecameViewTarget from PhysicsVolume. 
* FEdGraphSchemaAction_K2NewNode::InstantSpawn has been renamed to SpawnNodeFromTemplate.
* Any custom blueprint node templates created for graph schema menu / palette building must now be created with an outer that can trace back to the blueprint.  See the changes made in UEdGraphSchema_K2 for examples if you have a custom schema derived from it.
* Renamed WorldInfo to WorldSettings.
	* Make sure to get redirector in BaseEngine.ini.
* AActor::VerifyNoUnreachableReferences has been removed.
* AActor::TickSpecial has been renamed ::Tick.
* AActor::TickAuthoritative and TickSimulated have been removed.


#### Gameplay and Framework

* PhysicsActor and PhysicalMaterial now no longer have direct support for sounds/effects.
	* Now you create a game-specific PhysicsCollisionHandler, which is given all physics collisions each frame, and can do what it wants with them.
* Removed virtuals NotifyHitActor/NotifyHitByActor from Actor.
	* Now override ReceiveHit now for a blocking collision.
* Removed virtuals NotifyActorTouch, NotifyActorUnTouch, NotifyComponentTouch, NotifyComponentUnTouch from Actor.
	* Now override ReceiveActorBeginOverlap and ReceiveActorEndOverlap, or overlap delegates on PrimtiveComponent.
* **Physics: Collision:** 
	* CollisionProfileSystem redone - check BaseEngine.ini for new sets.
	* Channels Renamed : Pawn->PawnMovement, Vehicle->VehicleMovement, RigidBody->PhysicsBody.
	* Channels Removed : Mover(->Default), RigidBodyInteractable(->PhysicsBody), Cloth, DeadPawn.
	* Channels moved out of engine: TraceWeapon, Projectile, Pickup (check QAGame's DefaultEngine).
	* Setting a collision profile after instantiated for the one that didn't have before can override collision settings.


#### Rendering

* Added AA Method to post process settings.
* Removed MotionBlurPerObjectDistance from post process settings.
* **Atmospheric fog:** 
	* Added Altitude layer control property.
	* Added Altitude scale change which only affects Z location.
	* Added r.Atmosphere (0 or 1) console command, which enable/disable atmospheric fog + reload/remove related resources.
	* Added show flag for atmosphere, separate from fog.
	* Reduced view uniform buffer variables to be half-resolution to reduce size.
	* Removed artifacts for fog rendering for levels that doesn't have a skybox.
* LightShaft : Added LightShaft CVar r.LightShaftDownSampleFactor (Scale lightshaft downsampling).
* Landscape : Improved smooth tool, added smooth filter size adjustment.
* New IBL shading model approximation using preintegrated GF. The new solution is more accurate but can change the look of existing materials.


#### Audio

* SoundNode::Parse API changed to correctly track the path through SoundCue when the graph isn't a tree.  
	* Each visited node applies itself to a hash using GetNodeWaveInstanceHash.  
	* This is handled in SoundNode::ParseNodes automatically, however, any node that calls ParseNodes on its ChildNodes directly must apply this (see USoundNodeMixer::ParseNodes for example).


## Future Additions and Ongoing Efforts

#### Blueprints

* It is no longer necessary to compile a Blueprint in order to edit components after adding them in Components mode in the Blueprint editor.
* Clicking on entry/exit/collapsed nodes in a Blueprint graph now allows you to add inputs and outputs from the Details tab.
* Moved Blueprint settings into global user settings; they are now accessible through the Preferences Editor tab instead. Also removed the Settings menu from the Blueprint editor.
* Moved Blueprint Global Settings into the Details panel accessible via a new Blueprint Props toolbar button in the Blueprint Editor.
	* Also relocated the Reparent feature from the Blueprint Editor toolbar into the Details panel (it is no longer present in the editor toolbar).
* Changing component properties in the Details panel of the Blueprint editor now properly updates any Actor instances based on the Blueprint being edited.
* The Break Links submenu no longer appears in a Blueprint graph if there is only one subitem; only the subitem itself is shown.
* The Components toggle button is now enabled when reparenting from a non-Actor to an Actor-based Blueprint in the Blueprint editor.
* The Blueprint is now dirtied after moving its components around in Components mode of the Blueprint editor.
* The Blueprint preview viewport now includes a postprocess volume with an ambient cube map.
* Component editing mode can no longer be activated for non Actor-based Blueprints in the Blueprint editor.
* Components mode can no longer be activated in the Blueprint editor when editing macro Blueprints.
* Blueprint stability work to improve refactoring and deprecating code.
* Added GetPlayerCharacter() blueprint function to UGameplayStatics; it's just like GetPlayerPawn(), but returns an ACharacter instead of an APawn for those who need access to character and character movement.
* When a Select Node has a compilation error due to receiving an input index value higher than the number of options it supports (such as when an enum has values added to it in code after being used in a graph), it now outputs a message with much more information to track down the particular problem.  It now lists the full path of the blueprint in which the error occurred and the name of the select node's index type (i.e. bool, int, or the specific name of the enum).
* Deprecated blueprint functions can supply a helpful message using DeprecationMessage in the UFUNCTION meta section.
* Extensive UI and workflow polish for the Blueprint Editor.
* The delete button has been updated for Blueprint Macros details view inputs and outputs.
* New button artwork for the Replication State of Blueprint variables.
* Tidied up the Create and Harvest Blueprint buttons in the Details view.
* Message now shown when there are no results in the Find in Blueprints dialog.
* Blueprint functions are now checked that they exist when fetched by name. 
* Blueprint editor windows now close first when exiting the editor.
* New icon for hide pins in blueprint editor, replaced existing placeholder icon hide_unusedpins.png - non-destructive art only update.
* New clearer icons required for the various Blueprint compile states.  Replaced existing placeholder icon with new approved versions. Art change only - non-destructive. 
* Created icon for Create Blueprint from Actor and Harvest Blueprint (replaced existing placeholder icons) - non-destructive update.
* Created new icons for 'Find in current Blueprint', 'Blueprint Options' & 'Diff against previous revision', sizes available - 40px & 512px. PNG assets only. Non-destructive check-in (requires code hook-up).
* External (ThirdParty) modules now add their include paths the PublicInclude paths. 
* ThirdParty or system file include paths are not checked for forward vs back slashes.
* Re-adding interface FortInteractInterface to the blueprint (after removing) no longer results in an error.
* Blueprint functions can now be searched for by keywords
* LoadStreamlevel and UnloadStreamLevel blueprint actions will now do a partial match on the name provided and try to find a streaming level that ends with that string, not requiring full path.
* Blueprints are now preferred over other asset types when using find in content browser on an actor.
* Blueprint Compiling: Autogenerated variable names now include node GUIDs for disambiguation
* Improved workflow of Create Blueprint in the details panel.
* Ongoing UI polish to the blueprint editor.
	* Blueprint Explorer and Variables tabs have been fully deprecated and replaced with the MyBlueprint tab.
	* Blueprint Searching refactored. 
	* Blueprint Interface UI refactored
	* Added in ability to toggle context sensitivity in the graph action menu.
* Added a keyboard shortcut to edit the node title of any nodes that support it (F2)
* Made it possible to add node title renaming support to any node without engine modifications
* Various improvements to how node templates are created in graph schemas
* Various improvements to comment boxes (in-place editing, better hit testing when zoomed out or overlapping, etc...)
* Needs to be recompiled icon updated existing icons with more colour saturation & a change of color for Compiled - Dirty icon. Art change only - non-destructive.
* Created new icons for Add Variable, Function, Macro, and Event Graph. Sizes available at 16px, 40px, and 512px. New art assets - none destructive check-in. 
* Exposed MovementComp_Projectile::StopMovement to Blueprints. 
* Filter for CallFunction is now based on friendly name and, if applicable, will also use compact name

 
#### Framework

* Improvements to ACharacter::BaseChange() and JumpOff():
	* ACharacter::BaseChange() now checks the ACTUAL actor the character is based on even if it is World Geometry to see if it CanBeBaseForCharacter(). Specific types of actors that are WorldGeometry for other purposes (and so would return the WorldInfo as the base) can now correctly direct characters to JumpOff(). 
	* MovementComp_Character::JumpOff() now takes the movement base as an argument so that derived classes can override handling (such as choosing the direction to jump) based on the actual actor they're standing on.
	* Wrote a new function UMovementComp_Character::GetBestDirectionOffActor(...) which can be overridden to choose to jump based on character velocity, base actor dimensions, etc.
	* Exposed a magic number in code (0.5 z value) as JumpOffJumpZFactor.  This parameter can be used to tweak the height of a jump when jumping off something that can't be a base for a character.
* **Collision**
	* Disabled default pawn to interact with physics object until they turned to ragdoll
	* Renamed channels from ECC_Touch to ECC_Overlap
* Physx memory footprint is now reported by GetResourceSize.
* GameVer in addition to Engine Version, will also return Branch Name, Build Configuration and Command Arguments.  Will also copy this to the clipboard for easy pasting in TTP. 
* load/unload/reload exec functions now utilized pre/post callbacks for module cleanup. 
* General reduction of GWorlds.
* Exec functions refactored and command functionality moved into per-command functions.
* Removed UMovementComponent::SetPlayerDefaults(). Not needed in engine, plus what you might want to reset to is game specific.
* Modifier keys are now processed when the player controller is in a paused state. This means that the GPU profiler can be accessed or shaders can be recompiled while the game is paused.
* Get/SetOrigin renamed to Get/SetLocation on FTransform
* Revised lifespan implementation 
* Some canvas functions that were global and were passed a canvas context have been moved into canvas class.
* Moved editor specific actor labeling functions out of actor class.


#### Engine and Core

* UnrealBuildTool startup times have been greatly improved.
* "Plugin" support is now partially implemented.  We're still working on making this more robust for a future release.
	* Two example plugins were added for testing purposes.
* Fully eliminated `bAllowManagedCode` and `WITH_MANAGED_CODE`
* `LoadANSITextFileToStrings` now preserves empty lines.
* `FCoreDelegates::LevelAddedToWorld`, `FCoreDelegates::LevelRemovedFromWorld` now called in game and editor
* Moved `GetCategory` and `GetCategoryFName` out of UProperty - these are now utility functions in the `FObjectEditorUtils` namespace 
* Engine now gathers hardware stats on first run for analysis (currently Windows only).
* All icons recreated for Live Preview, Stats Profiler, & Memory Profiler. replaced existing placeholder icons. Non-destructive checking - Change List is PNG assets only. 
* The bad command line '-' case is now caught and informs the user before exiting the app. 
* Messaging: ongoing improvements for message de-/serialization and transport
* UObject native base classes no longer have to start with 'F'.
* Remote debugging setup 
	* Engine.ini has the following settings:
			
			[Engine.ErrorHandling] 
			bPromptForRemoteDebugging=false
			bPromptForRemoteDebugOnEnsure=false
		* If either is set to true, then the user will be prompted to get a programmer when a crash occurs so they can remotely debug the issue. 
		* If the latter is true, the prompt will also occur on ensures. 
		* They can also be set via the command line with `-PROMPTREMOTEDEBUG` and `-PROMPTREMOVEDEBUGENSURE` respectively. 


#### Platforms

* Porting the engine and the editor to Mac
* **Unreal Frontend**
	* The Launcher is being upgraded to use the new Unreal Project files; currently defunct 
	* Toolbar icons for Device Manager, created new icons for power on/off/reset. Require code hook-up.
	* Screen shots are now sent to directly to the FrontEnd app that requested them
	* Coded new layout for the Device Manager - **Power On**, **Power Off**, and **Reboot**.
* DependencyCache.bin files now exist per-platform.
* Module rules can now specify a `BinariesSubFolder` that is used when building DLLs. For example:
	
	If `BinariesSubFolder=IOS`, the resulting DLL for Win64 builds would be placed in `Engine/Binaries/Win64/IOS` 
* If Game or Server target for Desktop platforms, the Sandbox directory will be inferred if not specified.
* Moved `PhysX3Common` to the `Engine/Binaries/ThirdParty` folder as it is no longer required to load as part of Engine 


#### Online

* Steam lobbies auto set join-ability when it is determined the lobby is full


#### Audio

* Can now play and stop the current Sound Cue in the Editor by hitting the spacebar.
* Surround right speaker is no longer muffled when using 6 channel ogg files.
* Graph Nodes will now be deleted if associated Sound Node is removed.
* Now able to re-import multichannel sounds.
* Can now undo the breaking of connections in Sound Cue Editor.
* SoundModes can now be activated via SoundClasses when sounds are playing.
* SoundWave assets now display a wave form in their thumbnail.
* More greedy VOIP data transmission 
	* send all voice data up to 1k in one bunch immediately 
	* no longer buffering data at all over multiple frames


#### Editor and Tools

* **Slate**
	* Working on MultiLineEditableText feature for SlateUI
	* Changed SColorBlock to not use disabled styling
	* Empty MultiBoxs no longer take up additional room when constructing their widget. 
* **User Interface**
	* The editor no longer pops up behind previous windows when opening.
	* Renamed AutonomousTabPanel to NomadTab. Fixed up associated function names, comments, and variables.
	* Nomad tab spawners no longer spawn their tab when restoring layout if the tab has already been spawned.
	* Nomad tabs can now be docked in major tab wells. Nomad tabs are now styled like Major tabs when floating or docked in major tabwells.
	* TabSpawnerEntries now have the ability to opt-out of menu placement.
	* Added support for legacy tab types, which allows legacy tab names to be registered to auto-change IDs at spawn time.
	* Removed all uses of AddHeader and most uses of AddMenuSeparator throughout the engine. 
	* Lots of polish to main editor menus (visuals, arrangement, etc.)
	* Updated the Property Matrix button in the Details view.
	* Updated the Vertex Density mode menu item with new artwork.
	* Updated the immersive mode's Restore button.
	* Updated icon artwork for Foliage Mode save/load settings.
	* An expansion button is displayed when toolbar and menu bar buttons get clipped which, when clicked, generates a context menu containing the clipped items
	* Undo/Redo menu options have icons again.
	* WorkflowTabs now appear listed under the Asset Editor category of the Windows menu.
	* Created new ' x' (delete button) with less alpha. Non-destructive check-in - art asset only  
	* Created new 16px icon for Property Matrix button & related windows/menu items. Requires code hook-up. 
	* Restore from Immersive button icon - created new 16px icon, requires code hook-up. Non-destructive check-in, art asset only. 
	* New icon for Replication icon for editor, to be hooked up in code for state changes. Non-destructive check-in, art asset only.
	* Created new icon for Viewport: Vertex Density. requires additional code hook-up. Art asset replacement only, non-destructive update. 
	* Created new icons for the Foliage Mode. Art asset replacement only, non-destructive update. 
	* created new 16px icons for all the following actor classes, ArrowComponent, AtmosphericFogComponent, BoxComponent, CapsuleComponent, DestructibleMeshActor/Component, InstancedStaticMeshComponent, MaterialSpriteComponent, RadialBlurComponent, SceneCapture(Component), SceneCapture2D(Component), SceneComponent, SphereComponent, SpriteComponent, TextRenderActor/Component. PNG assets only. Non-destructive check-in (requires code hook-up). 
	* All main Editor toolbar icons recreated & updated (additional icons for alternative play options are covered in another TTP). Non-destructive check-in - Change List is only adding higher resolution assets at 512px. 
	* Created new 16px icons for the Level Browser menu. New PNG files, none destructive checking - requires code hook-up. 
	* Created new icon for deleted actors. size: 16px. - non-destructive update. 
* Added _explore to directory_ and _launch in external editor_ support for data and curve table assets.
* Improvements to navmesh generation performance
* **Scene Outliner**
	* Now has a yellow border when in SIE mode
	* Correctly refreshes content when new level added or removed
	* Scene Outliner now displays nested actors correctly in the search results.
* Refactored Layers implementation to simplify and consolidate code paths
* **Project Workflow**
	* Visual improvements for the new project dialog.
	* Switching projects now preserves the command line arguments used to launch the editor.
	* Quit dialog no longer appears when switching projects.
	* '^' characters are no longer allowed in project file paths since it confuses visual studio.
* **Content Browser**
	* Packages that get re-scanned for dependencies after the initial asset search will now properly update.
	* Folders are now created on demand if explore is chosen in the Content Browser.
	* Added better asset name checking early in the rename process in the Content Browser so we can trigger the friendly enter a new name code path.
* Added GetLabels to FSourceControl, which returns all labels in source control matching the supplied pattern string
* CrashReporter: web site is mostly done for all browsers, everything is working as intended. Major item left is documentation.
* **Landscape**
	* Added ability to edit landscape proxies without loading LandscapeActor
	* Landscape proxies now can have own origins not necessarily at the same location as landscape actor position
	* Landscape splines are now considered to be static components
	* Landscape static lighting is now invalidated when altering the heightmap
	* Cancel button on the** Are you sure?** button for deleting end control points of a landscape spline actually cancels the delete again.
	* Landscape editor now forces all viewports to real-time, not just the active perspective viewport, making it easier to see changes being made
	* Newly created layer info objects now show up in the content browser and want to be saved when saving / quitting.
	* Replaced the "new layer info" path text box with a folder picker.
* **Matinee**
	* Matinee drop down menu now spawns at the correct size to avoid popping.
	* Reworded matinee dialog text to not mention tab position (as it can be moved).
	* Matinee now closes when that actors level is remove via the level browser.
	* Camera actor mesh updated, created new mesh consistent with new camera icons, added material & texture. 
	* Refactored interp-related utilities code - it is now in the FMatineeUtils namespace
	* Subtitles now shown for first sound in a matinee track. 
* **Level Editor**
	* Level editor tab again shows truncated level name.
	* Added a new config setting (DefaultMapName) for specifying what map the editor should load on startup 
		* This differs from the SimpleMapName pipeline and, instead, resembles the behavior of when the map name is specified via the command line
	* Viewports now update their camera position if their locked actor is moved in another viewport.
	* Duplicating numbered actors, labels the new actor with the next logical number.
	* Auto-naming now preserved preceding 0s when duplicating actors.
	* Attachments
		* Actor Transformations no longer stack up if dragging a parent and its child.
		* Copy and Pasting actors will now maintain the parenting hierarchy.
		* Attaching multiple actors to another actor which is also selected now produces and error.
		* Prevent parents becoming assigned as the children of their descendants.
	* Keyboard shortcut now appears in the possess/eject button tooltips.
* BuildingWall toggling now possible when BrushEdit is active. 
* Reworded LOD group popup to be clearer.
* Removed usage of package from asset migration dialog.
* Creating Destructible Mesh now also opens for edit and syncs to asset in Content Browser.
* PlayOn instances are killed when the editor closes.
* Any error generated by generating unique UVs in the static mesh editor is now displayed as a notification.
* Socket Manager widget now updates correctly when toggled from the level editor toolbar.
* Dragged assets now snap more accurately to the hit proxy actor.
* Toggling the override flag on a MIC param now updates the material.
* Automated Screen Shot capture test and browser update
* Added function name context info to warning message. To help tracking down where it comes from. 	Warning: BoneIndex for Bone (b_MF_Hand) is not found in the Skeleton (M_Avg_Base_AnimSkeleton) 
* Debugging: Added Cyan and Magenta default FColors. Added DrawDebugCircle. 
* Static Meshes with Material slots that are not referenced by any LOD are now NULLed on load. Extraneous indices are now trimmed as well.
* The ReferenceViewer is now a Nomad Tab.
* Creating a material with an initial texture now properly hooks up the texture to the base color.
* **Event Viewer:**
	* Updated Event Viewer to better sort the events by time.
	* More information provided for each event in the hierarchy.
* Static Mesh Editor: Showing/hiding sockets now refreshes the Static Mesh Editors viewport.
* Workflow for converting actors has been improved.
* The World Properties button has been updated to say World Settings, along with its tooltip.
* Blutility is now an Epic Labs preference.
* An Editor-only offset for streaming levels has been implemented, and a new optional column added to the Level Browser that allows setting of an Editor-only offset for each streaming level.
* Creating a new placement browser mode/toolset which will aid new users and level designers in their workflow
* Added a warning dialog for when the user modifies a package that is in a folder that they do not have permission to write to.
* When you are migrating assets and a package does not exist on disk, the user is prompted about it.


#### Rendering

* Reduced the number of shader permutations created by the spline mesh shader to one (parameterized) vertex factory, and optimized.
* Spline-deformed static meshes now support LODs.
* Spline-deformed static meshes can now be lit by static lighting
* Material Editor clean up now only dirties the material if its changed.
* Cascade color picker now registered as a child of the cascade viewport.
* Cascade layout now loads correctly.
* Current LOD dropdown now starts at 0, to conform with properties array.
* Swap Lowest/Highest LOD button functionality in Cascade.
* removed unnecessary confirmation dialog in Cascade when setting fixed bounds.
* ConditionalProcessCommandBindings now passed held/repeat state of key/mouse button, and ignores any commands if its true.
* Reparent option is now disabled when simulating.
* Autosave notification no longer says %d instead of the time. 
* Cascade emitter categories now only appear if there are valid children to display.
* SkeletalMesh Editor no longer displays the hierarchy of the last skeletal mesh when opening the current one.
* Improvements to banding on subsurface scattering colors.
* Destructible objects which have been fractured will now no longer receive decals
* When a light has been assigned an IES light profile, it will use the calculated texture multiplier whether you choose to use the IES brightness or not.
* Particle emitters now correctly orient the local z-axis towards the camera when this feature is enabled from Cascade
* Actor scaling is taken now into account for GPU particle systems.
* Added pause keeping Motion Blur, still needs some work
* There is now experimental support for SM5 rendering features via OpenGL 4.3.
* Removed check for static mesh in the material thumbnail scenes GetViewMatrixParameters as it is not technically required to determine the view matrix.
* Added more Gbuffer visualize modes
* Static mesh primitives with multiple parts using different materials which had mixtures of translucency modes (normal and separate) will now render correctly
* When a culling volume is deleted from the scene in the editor, all static mesh primitives will have their draw distances updated to reflect this change.
* "Visible In Game" flag on the atmospheric fog component is now respected


#### Animation

* Changed "Preview Mesh" item on Persona viewport show menu to "Mesh"
* Improved layout of pin-exposable properties on animation nodes
* Added UAnimMontage::GetSectionTimeLeftFromPos(). 
* Fixed and refactored Azimuth and Elevation math code. 
* Moved GetClosestCollidingBoneLocation from SkinnedMeshComponent to SkeletalMeshComponent, and made it actually check against colliding rigidbodies! It could return a non colliding one, and traces would fail. 

