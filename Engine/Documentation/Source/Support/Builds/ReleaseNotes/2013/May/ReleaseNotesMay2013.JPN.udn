INTSourceChangelist:3367470
Title:2013 年 5 月リリースノート
Availability:Licensee
Crumbs:%ROOT%, Support/Builds
Description:
Parent:Support/Builds
Order:-9

[TOC(start:2 end:2)]

## ビルド情報


[REGION:simpletable]
| アイテム | 情報 |
| ---- | ---- |
| **ラベル** | QA_APPROVED_UE4_BUILD_2013_05 |
| **チェンジリスト#** | 1652795 |
| **VISUAL STUDIO VERSION** | Microsoft Visual Studio 2010 version 10.0.40219.1 SP1 Rel |
| **DIRECTX** | 2010年6月 |
[/REGION]

## 重要情報

 * 現時点のエンジン開発ロードマップ: [UE4 Roadmaps](https://udn.unrealengine.com/questions/topics/roadmap.html)
 * GDC ライセンシーセッションの動画をこちらでご覧いただけます。: [Licensee Videos](https://udn.unrealengine.com/questions/166995/gdc-2013-licensee-session-videos.html)
 * UE4 ビルドターゲットの変更: [UE4 Target Changes](https://udn.unrealengine.com/questions/166994/ue4-target-changes.html)


## 主要な新機能


#### エディタ システム

* **スケルタルメッシュのインポートで物理アセットを作成するようになりました**
	* Import Dialogue にスケルタルメッシュの物理アセットを自動的に作成するオプションが追加されました。 
	* デフォルト設定で、インポート処理中に以下の 3 つのうちいずれかの処理ができます。
	* 新メッシュに新規のアセットを作成することができます。 
	* ユーザーは別のスケルタルメッシュと物理アセットを共有する選択ができます。もしくは、
	* ユーザーは適用を除外し、何も選択せずに **CreatePhysicsAsset** を非設定にすることができます。
 	
		![](importSkM1.png) ![](importSkM2.png)
* **コリジョン システム インターフェースの改善**
	* インターフェースが改善されたコリジョン プロファイル システムが追加されました。  
	* 現在の設定には、NavigationTestingActor、 BlockingVolume、 Character、 InterpActor、 StaticMeshComonent、そして SkeletalMeshActor が含まれます。利用可能なプロファイル リストは「BaseEngine.ini」ファイルにあります。
	* カスタム編集 UI (以下のスクリーンショット) に新規のチャンネル マッピング機能が追加されました。
	* カスタム エンジンおよびゲーム チャンネルは、「BaseEngine.ini」ファイルで名前を変更することができます。
* **カラー ピッカー**
	* カラーピッカーにスポイトツールが追加されました。オンスクリーンのどこからでもすばやく色をピックアップすることができます。
		![](dropper1.png) ![](picker1.png)
* **レベル ブラウザでのソース制御**
	* ユーザーはレベル ブラウザからソース制御機能へアクセスが可能になりました。

		![](source.png)
	* ソース制御アプリケーションと UE4 エディタ間を頻繁に切り替えが必要なユーザーにとって、ワークフローの統合及び迅速化の大いなる可能性があります。


#### ブループリント

* **入力バインディングの変更** 
	* 入力コンポーネントはもはや明示的にブループリントへ追加しません。代わりに、入力サブメニューからバインディングをアクタブループリントへ追加することができます。
	* アクションやキーイベントを作成したり、軸の値に対してゲッターを配置することができます。キーイベントは、[詳細] パネルでControl、Alt、Shift キーの組み合わせを指定します。

		![](bindings2.png) ![](bindings3.png)
	* アクションと軸は、「Base/DefaultInput.ini」ファイルで定義され、各アクションは複数のキーとマッピングすることができます。
	* アクタはもはや制御されません。ポーンとして所有されるか、アクタで入力を有効にします。
	アクタ * Bindings in the Level Blueprint are always active, bindings in a Pawn are active whenever it is Possessed, and bindings in an Actor are activated/deactivated by calling Enable/Disable Input, with input stacks being ordered as follows:

		1. 有効な入力を持つアクタ
		1. Level ブループリント
		1. 所有するポーン


#### アニメーション

* **拡張ソケットの編集**
	* ソケットがスケルトンへデフォルト設定で追加されました。カスタマイズも可能です！
	* メッシュのみのソケットもスケルトンに昇格できるようになりました。
	* ソケットの異なるビューを表示するためにフィルターも追加されました。ビューポートの 「Show Sockets」 モードからアクセスできます。
	* スケルトンツリーで「Active Sockets」フィルタを使用してグレイ表示されるスケルトンソケットや画面上で赤いヒットポイントとして表示されるメッシュ ソケットを見ることを選択できます。


#### レンダリング

* ** ポストプロセス マテリアル**
	* ソケットがスケルトンへデフォルト設定で追加されました。カスタマイズも可能です！
	* メッシュのみのソケットもスケルトンに昇格できるようになりました。
	* 同一のベースマテリアルが使用されるとポストプロセス ボリュームはマテリアル パラメータをブレンドします。
	* ポストプロセス マテリアルはカスタムのレンダリング パスからデプスに、例えば画面上のオブジェクトからマスクを取るためにアクセスできます。
		![](Teaser3.png) ![](Teaser1.png)
		![](Teaser0.png) ![](Teaser2.png)
	* 詳細はUDNサイトから [ポストプロセス マテリアル](Engine/Rendering\PostProcessEffects\PostProcessMaterials) を参照してください。


#### オーディオ

* **サウンドキュー エディタ**
	* エディタでサウンド キューをプレビューする場合、ブループリントでインパルスが表示されるのと同様にキューを通してパスが表示されます。これはキューが、単純、複雑、またはそれ以外でも役立ちます。

		![](Car_Impact_Cue.jpg)(w:640)
* **減衰の形状**
	* それぞれが独自の形状プロパティを持つ、球 (デフォルト)、ボックス、カプセル、またはコーン形状から選択が可能になりました。  
		![](attenuation1.png)(w:425)
	* 各減衰ボリュームは独自のディメンションとフォールオフの距離を持つようになりました。


#### Unreal Frontend

* **アンリアルコンソールのショートカット**
	* Unreal Console/FrontEnd は頻繁に使用するコマンドをショートカット ブラウザに保存できるようになりました。これにより、簡単に参照と使用ができるようになります。

		![](console4.png)(w:800)


## 新規追加

#### エディタとツール

* **スレートと UI**
	* 全てのメニューは垂直ラッピングをサポートしています。
		* 大きなメニューのサイズは、作業領域の高さに収まるように制限されています。
		* 必要に応じてメニューに垂直スクロールバーが表示されます。
	* 以下の特定のコンテクストメニュー (x17) に拡張性のあるフックが追加されました：コンテンツブラウザ、レイヤー、レベルエディタ、マテリアルエディタ、マテリアルインスタンスエディタ、レベルブループリント
* コンテンツ ブラウザは「ノマド タブ」で、最高 4 つまで開くことができます。ノマドタブをドックエリアやタブにドッキングできます。
	* Quick Browserと主要タブのコンテンツブラウザは、それぞれがコンテンツ ブラウザ 1 とコンテンツ ブラウザ 2 に置き換えられました。
	* コンテンツ ブラウザ 3 とコンテンツ ブラウザ 4 が追加されました。
* MakeEditWidget メタデータ (ベクター ウィジェット編集) は、アクタクラスの構造体/配列データメンバー内で定義されたベクターと作業が可能になりました。
* [New Project] ダイアログは、ロケットビルド以外でも使用が可能になりました。引数なしにUE4Editor.exe (またはダブルクリック) を起動すると、このダイアログが表示されます。
	* エディタの File->New Project オプションからもこのダイアログへアクセスできます。
	* 現時点ではコードテンプレートでプロジェクトを作成することはできません。今後のリリースで再度試してみてください。
* [Content Migration] が追加されました。この機能でアセットおよびアセット全ての依存関連物を別のゲームへコピーすることができます。
	* レベルブラウザでレベルを右クリックして、コンテンツブラウザのフォルダまたはコンテンツブラウザの個々のアセットから [Migrate] を選択します。
* リダイレクタを右クリックする機能が追加され、手動修正が可能になりました。一連の警告を伴います。
	* ロードされていないマップによって参照されるリダイレクタは修正されませんが、それに対する参照は修正されます。
	* コードに参照されるリダイレクタは完全には修正されません。
	* ヘッドリビジョンまたは別のユーザーにチェックアウトされていないリダイレクタは完全には修正されません。 
	* 参照がヘッドリビジョンに存在しないリダイレクタ、参照が別のユーザーにチェックアウトされたリダイレクタ、そして参照のチェックアウトを拒否されたリダイレクタは完全には修正されません。
**大規模ワールドのサポート**
	* ワールドブラウザ機能 (開発中) が追加されました。
	* 有効にする手順は **[Edit] > [Preferences] > [EpicLabs] > [WorldBrowser]** です。
	* ワールドは **File > Open World** コマンドで開きます。このコマンドは全てのサブレベルが格納されているフォルダを開きます。
	* ワールド ブラウザはサブレベルを視覚的にワールドへ配置し、サブレベル間のストリーミング動作を管理します。
	* ゲームでワールドを実行するにはこのコマンド パターンを使用します： `MyGame /Game/MyWorld/MyWorldPersistentMap?addmaps=Map01`
	* ゲームプレイ中に読み込まれたワールドは、新しいオリジン (通常はゼロ基点) へ移動します。現時点では自動機能しませんが、将来的には自動で機能する予定です。`SetWorldOrigin`コンソールコマンドでテストが出来ます。
* **ランドスケープ**
	* ランドスケープ スプラインメッシュに対して Z のみが有効であった代わりに、「前方」軸が選択できるようになりました。
	* スプライン編集モード時にランドスケープ スプラインメッシュをクリックすると、スプライン セグメントが選択されるようになりました。
	* ランドスケープは FBX 形式でエクスポートが可能になりました。
	* ランドスケープは LOD の縮小版としてエクスポートが可能になりました。ランドスケープ アクタのプロパティに設定されます。
	* ランドスケープのハイトマップとレイヤーに "reimport (再インポート)" 機能が追加されました。レイヤーのために元々インポートされたファイル、またはレイヤが直前にエクスポートされたファイルから再インポートします。
	* 新しい"Interactive" プロパティの変更タイプは、ランドスケープ スプライン プロパティをインタラクティブに編集時に、コリジョンデータの再ビルドを遅延させるこで遅延を修正するために使用します。
	* ランドスケープ スプラインは緻密なコリジョンを生成できるようになりました。例えば弾痕跡をブロックすることが可能になりました。
	* ランドスケープ エディタが開いていて編集するランドスケープが無い場合、デフォルト設定で [New Landscape] パネルを拡張することができます。
	* ランドスケープのツールとブラシのボタンおよび設定にツールヒントが追加されました。
* **レベル エディタのビューポート メニューの改良**
	* ビューポートのビュー メニューが以下の 2 つのメニューへ分割されました。 
	* カメラ タイプとビュー モードです。 
	* さまざまなメニューのラベルとアイテムの配列が整理されました。 
	* レベル ビューポート メニューのボタンラベルへアイコンが追加されました！ 
	* カメラ タイプとビューモードのタイプの両方が表示されます。
	* ツールバーメニューのアイテムウィジットは、オプションのラベルアイコンをサポートするようになりました。
* モジュール UI に [Reload（再読み込み）] ボタンが追加されました。
* レベルエディタに [Recompile Level Editor] オプションが追加されました。
* エディタのモーダル ウィンドウは、ユーザーが別のウィンドウをクリックするとフラッシュします (現時点では Windows のみです)。
	* アクティブなモーダル ウィンドウ (Programming / Slate ウィンドウのみです。OS ネイティブなウィンドウではありません) は、別のスレートウィンドウがアクティブになるとフラッシュします。
	* Windows タスクバーからモーダル ウィンドウを削除しました。
	* モーダル ウィンドウが表示されている時、バックグラウンド ウィンドウは完全に無効化されます。
* クラス コメントがエディタのツールヒントとして表示されるようになりました。
* **プロファイラ**
	* 新イベントグラフ ウィジットが追加されました (初回イタレーション)。
	* ユーザーがデータグラフをクリックするたびに、新イベントグラフは新規のタブからドキュメントを開きます。
	* 以下のビューモードのサポートが追加されました： 
		* 階層
		* フラットで包括的
		* フラットで排他的
	* ホットパスに基本的な「"expand hot path" (ホットパスの展開)」とカラーコーディングが実装されました。
	* イベントグラフにコンテクストメニューが追加されました (完全には実装されていません)。  
	* 統計の集計が追加されました (初回イタレーション)。
	* データグラフのサマリーは、現スタッツ値と一緒に統計集計情報を表示します。
* **スタティックメッシュ エディタ**
	* ソケットはスタティックメッシュ エディタで名前を変更することができます。
	* スタティックメッシュ エディタで [Delete] キーを押すと、選択したソケットを削除するようになりました。


#### ブループリント

* ユーザーはブループリントグラフのコメントタイトル領域をダブルクリックしてコメントを編集できるようになりました。
* 表示されるプリミティブ コンポーネントを持つ全てのアクタベースのブループリントにブループリント サムネイル レンダリングが追加されました。
* ブループリント ウィンドウの変数と関数が隠れたカテゴリの要求を満たすようになりました。
* ブループリント コンポーネントは適切なクラス アイコンを使用するようになりました。
* ブループリントの Push、Pop、Clear の関数の使用を有効にするためにGameplayStatics 関数が追加されました。
* ブループリントはループにレベルマップを読み込むなど、一意ではない潜在的なアクションをサポートするようになりました。
* ブループリント エディタに、ソース制御が保持するブループリントの前バージョンに対する diff 機能を有効にする [diff] ボタンが追加されました。
* [My Blueprints] タブから選択したプロパティは [詳細] パネルで直接デフォルト値を編集できるサポート機能が追加されました（実験的）。
* ブループリントエディタ デバッグツールバーに [PIE] ボタンが追加されました。
* 無限ループを持つブループリントが例外を発生させるようになりました。アクティブな場合、ログを取りブループリント デバッガをブレーク (停止) します。
* 新規に作成したブループリントがグラフモードの代わりにコンポーネントモードで開くようになりました。
* ブループリントのモーダル カラーピッカーがトップレベルウィンドウに表示されないように SColorBlock を親に持つようになりました。
* エディタでは、一時停止したシミュレーションを 1 フレーム毎に進めることができるようになりました。


#### 分析

* イベント率が設定制限を超えると SwrveAnalytics が警告を出すようになりました。 
	* Swrve は一分間あたり 60 のイベントを定義しますが、これは総計の測定です。一分間あたり 70 のイベントを超える場合、イベントの制限をお勧めします。 
* 統計は、UE_BUILD_SHIPPING build setting または-RELEASEANALYTICS cmdline の場合に、Release アカウントを選択するようになりました。


#### ゲームプレイとフレームワーク
  
* `OnActorHit` デリゲートがアクタに追加されました。
* **レプリケーション**
	* コンポーネントレプリケーション: [](https://udn.unrealengine.com/questions/165062/component-replication.html)
	* [](https://udn.unrealengine.com/questions/164217/how-can-i-improve-performance-of-tarray-replicatio.html)
* **ナビゲーション メッシュ**
	* navmesh（RecastNavMesh::bPerformVoxelFiltering）の生成中にボクセルフィルタを実行するかどうかを制御するための初期設定可能なメカニズムが追加されました。 
	* navmesh ビルド時にスタティックジオメトリにナビゲーションリンクの先をスナップする汎用メカニズムが実装されました。
	* 最大ナビゲーションクエリー検索ノードを「ini」ファイル経由で設定可能にしました(RecastNavMesh::DefaultMaxSearchNodes)。
* 構造体に Protected と Private が反映されたメンバー変数が含まれるようになりました。
* 全てのティック関数をログへ書き込むためにダンプする 'dumpticks' コンソール コマンドが新規で追加されました。
	* 有効または無効にしたTick関数のみをダンプする、 'enabled' と 'disabled' パラメータをそれぞれオプションで使用できます。
* HUD の統計の階層ツリーの表示をトグルする 'stats tree threadname (optional statname)' コンソール コマンドを追加しました。
	* 'stats treeup (任意の行数)' コンソール コマンドでツリーの上層へ移動します。
	* 'stats treedown (任意の行数)' コンソール コマンドでツリーの下層へ移動します。
* IsRunningGame() と IsRunningServer() 関数は、実行ファイルが「MyGame.exe」、 「MyGameServer.exe」、またはゲームで実行しているエディタもしくはサーバーモードであるかをチェックします。
* 一過性の出力を My Documents 内のユーザー保存場所に書き込むためのファーストパス サポート「-SaveToUserDir」で有効にします。
* アクタから複数のGetNetOwnerタイプ関数を削除し、GetNetConnection関数に置き換えました。 
	* NetConnection 変数をプレイヤー コントローラに追加し、それに対するすべてのGetNetConnection 呼び出しをルーティングしました。
	* NULL on SERVER -> LocalPlayer. 
	* NULL on CLIENT -> Non Owner. 
	* NOT NULL ON SERVER -> replication connection to client. 
	* NOT NULL ON CLIENT -> replication owner. 
	* さまざまなコード領域でレプリケーション オーナーチェックを簡素化することを期待します。  
	* プレイヤー コントローラなしのアクタが GetNetConnection をオーバーロードし、 RPC/レプリケーションを使用することができます。
* コンソールオートコンプリート
	* コンソール オートコンプリート検索のためにゲームごとにマップパスの設定が可能です。  
	* オート コンプリートのマップ名に対して現在のユーザーのデベロッパ フォルダを検索します。


#### コア

* **プラグイン**
	* 最初の UE4 プラグインサポート！(作業中ですが利用可能です)
		* 「.uplugin」ファイルを作成してモジュールを読み込むことができます。これらのプラグインファイルは「 JSon」形式です。 
		* UBT と UE4 は自動で`.uplugin` ファイルを検知します。
		* プラグイン モジュールと C++コード は自動的に生成されたプロジェク トファイルへ追加されます。
		* エンジンプラグインは検知されて「/Engine/Plugins」ディレクトリから読み込まれます。 
		* プラグインにはコンテンツ サブフォルダがあります。これらのファイルは自動検知されます。 
		* プロジェクト指定プラグインがサポートされました！「<GameName>/Plugins 」ディレクトリを作成できます。 
		* モノリシックビルドは現時点でプロジェクトの全てのプラグインをコンパイルします。 
		* プラグインは複数のモジュールをサポートします。それぞれのモジュールは、Editor、Runtime、または Development のいずれかに分類されます。 
		* 複数のプラグインのローディング フェーズがサポートされます (PreEngineInit, PreGameInit, Default)。 
		* プラグインファイルは基本的なバージョンチェックをサポートします (エンジンおよびファイルのバージョン)。 
* 不正な '-' ケース (通常、電子メールからコマンドラインを張り付ける場合) は、ユーザーに警告し、終了するようにします。
* PhysX3Common* を Engine/Binaries/Win<32/64> フォルダから適切な Engine/Binaries/ThirdParty/PhysX フォルダに移動しました。 
* Automation Window、Controller および Worker のモジュールが再ロード可能な DLL になりました。 
* モジュール固有のバージョン番号がアーカイブにシリアル化する場合に使用できるようになりました。
	* FCustomVersionRegistration 型のグローバル変数をモジュールに配置し、ロード時にモジュール番号を登録できるようになりました。
* サブオブジェクト リダイレクタを使用してサブオブジェクトを削除できるようになりました。これを行うためには、subobj リダイレクタを .ini ファイルに追加し、NewSubobjName を空の文字列に設定します。
* 構造体のリダイレクトのサポートが追加されました。構造体のリダイレクトは、+ActiveStructRedirects=(OldStructName="Foo",NewStructName="Bar") のフォーマットで .ini ファイルに追加することができます。


#### プラットフォーム

* DependencyCache.bin はプラットフォーム毎にあり、複数のプラットフォームのビルド問題を解決します。
* IOSTargetPlatform などのプラットフォーム固有の dll は、Binaries/Win<32/64> フォルダのサブディレクトリにあります。
	* モジュール ルールでは、DLL のビルド時に使用する BinariesSubFolder を指定することができます。 
* 新しい WindowsServer プラットフォームのクッキングを変更しました。
	* WindowsServer は SM4 および SM5 シェーダーと全てのテクスチャフォーマット処理を無視します。  
	* render thread コマンドのために **ENQUEUE*** マクロを無効にしました。UE_SERVER=1 実行時は常に NOOP になります。
* デディケイテッド サーバーの最初の作業があります (NULLRHI、レンダリング スレッドを強制しないなど)。
* デディケイテッド サーバーへの自動ログイン(コマンドラインの -login/-pass はオンライン サービスにログインしようとし、RegisterServer() を呼び出します)。
* 大きな IOS アップデート (Audio、Slate、UnrealConsole サポート)
* DLL 検索パスを安全に修正するために PushDllDirectoty/PopDllDirectory が追加されました。
* ロード前に有効なプラットフォーム DLL をチェックするサポートを追加しました (Win64 サポートの DLL を例えば、PS4 にチェックインすると、PS4 SDK をインストールしていなければクラッシュにつながるため PS4 はロードされません)。


#### アニメーション

* **ペルソナ ビューポート**
	* Perspective (透視図法) (平行投影の上、横、左) を超えた他のビューポート タイプを追加しました。
	* ペルソナ ビューポートにプレビュー メッシュ (選択されている場合はボーンまたはソケット) をフォーカスする 'F' のキーハンドラを追加しました。
	* ペルソナ ビューポートメニューから 'Bone Thickness' オプションを削除しました。
	* ボーン軸の表示モードを指定する新機能を追加しました。これは、ペルソナ ビューポートの [Show] メニューで制御できます。
	* ペルソナでプレビュー メッシュを非表示にする機能を追加しました。
	* ペルソナに加算的なアニメーション レンダリング モードを追加しました。
	* ペルソナのボーンのレンダリングを変更し、選択したボーンに基づく色のワイヤーフレームのコーンと球体を描画するようにしました。
* ペルソナでの作成と編集の両方における AnimComposite の使用と Vim ブループリントでの使用のサポートを追加しました。
* ペルソナのカメラ ロックとカメラ フォローのターゲット ポイントを変更し、アクタの位置ではなく、プレビュー メッシュの境界の中央になるようにしました。
* **グループの同期**
	* シーケンスのプレイヤーとブレンド空間を同期グループのメンバーとし宣言できます。グループ リーダーが他のすべてのメンバーの時間進行と通知生成を制御します。
	* 各グループ メンバーには役割があります。最も高いブレンド ウェイト合計 (デフォルト) を持つ場合にリーダー、常にリーダー、決してリーダーにならないメンバーがあります。
* Export FBX 機能をペルソナ ビューポート メニューからアセット ブラウザに移動し、複数のアニメーションを一回でエクスポートする機能を追加しました。
* モーフ ターゲットの削除はコンテクスト メニューで処理するようになりました。


#### レンダリング 

* パーティクル システム
	* グローバル ベクターフィールドのタイトネスは、グローバルベクターフィールドのカスケード モジュールからオーバーライドできます。
	* ParticleSizeマテリアルノードが利用可能になりました。このノードはワールド空間にあるパーティクルの XY サイズを返します。 
* **マテリアル**
	* TextureObject式は作成時に選択したテクスチャを自動で割り当てます。
	* TextureObject 式に [Use Current Texture] メニュ ーオプションが加わりました。
	* TextureObjects と TextureSamples は新規のメニュー オプションで交換できるようになりました。
	* WorldPosition material 式に、ワールド位置にシェーダー オフセットを含むか否かを決定する新設定が追加されました。シェーダー オフセットには World Position Offset といくつかのテッセレーション (細分化処理) が含まれます。
* **ポストプロセス エフェクト：**
	* 既存のモーション ブラーを以下のような新規のモーション ブラー アルゴリズムで置き換えましたが [](http://graphics.cs.williams.edu/papers/MotionBlurI3D12/McGuire12Blur.pdf) まだ半分の解像度であり、小規模な改善を予定しています。
	* ポスト プロセス後のカスタム デプス パスのレンダリング、プリミティブ コンポーネントのチェックボックスの最初のイタレーションは、可視状態にする (シルエットのレンダリングで役立ちます) ために処理を速くする必要性があり、エディタ チェックボックスのメッシュ / プリミティブ コンポーネントまたはゲーム コードで有効にすることができます。
	* マテリアルのポスト プロセスの最初のイタレーションが利用できます (PostProcessVolume で全画面パスでレンダリングするマテリアルを指定できます。Postprocess0 または GBuffer のプロパティを入力するにはSceneTexture マテリアル式を使用します)。TemporalAA については改善が必要で複数のパスとその他の変更をサポートします。
	* Temporal AA がデフォルトのアンチエイリアス ソリューションになりました。これは FXAA よりも滑らかで高品質な画像を生成します。
* **ShadowSharpen** プロパティをライトに追加しました。
* r.CompositionGraphDebug による合成グラフ デバッグ ダンプを追加しました。
* 解像度や乗数値を使用する場合に HighResShot コマンドが機能するようになりました。使用例：HighResShot 1920x1080.


#### オーディオ

* SoundNodeBranch が追加されました。名前付けしたブール パラメータを AudioComponent で使用してサウンド キューのビヘイビアを変更することができます。
* SoundModes は SoundMix へ名前が変更されました。
* Base SoundMix を 1 つ設定し、複数の SoundMix モディファイアーをプッシュするオプションを付けました。
* 単一の CurrentMode とそのフェード量、および iBaseSoundMode の考え方は、アクティブな SoundMixes のリストとそれらの現在の状態で置き換えられました。
	* 'STAT SOUNDMIXES' コマンドはどの SoundMixess が現在アクティブであるか (ListSoundModes を効果的に置き換えます)、そのフェードイン レベル、およびどのモードが EQ を制御しているかを示すようになりました。 
	* Audio Effect マネージャは EQ の変更を適用する前にサウンド モードのプライオリティをチェックするようになりました。
	* EQ の制御は EQ Priority プロパティによってさらに指定可能であり、すべてのサウンド モードが無効になった場合に EQ エフェクトをクリアする新しい関数があります。 
* Reverb 設定を新規 Reverb Effect アセット タイプ経由で公開しました。


## アップグレード ノート

#### エディタとツール
 
* Game, Editor, GameUncooked および Server は、Target.cs ファイル'Type' プロパティで使用する独自のターゲット タイプを持ちます。 
	* TargetType.Game:         Builds a UEBuildGame target. 
	* TargetType.Editor:       Builds a UEBuildEditor target. 
	* TargetType.Server:       Builds a UEBuildServer target (dedicated server). 
	* TargetType.GameUncooked:Builds a UEBuildEditor target that defaults to running the game (via the `-game` argument). 
	* See [Target Changes](https://udn.unrealengine.com/questions/166994/ue4-target-changes.html) for complete details and upgrade info
* As the UE4Editor.exe Example will no longer work, you must use UE4Editor.exe QAGame instead.
* TFieldIterator constructor params have been changed from boolean to enum types in order to improve readability.Existing uses of TFieldIterator will require updating.
	* All components can now be activated or deactivated.
	* bIsActive moved from SceneComponent to ActorComponent.  
	* Inactive components will disable their tick.
	* Existing ActorComponents that require a tick will either need to Activate at the appropriate time or specify bAutoActivate = true in the constructor.
* Send PhysicsTransform is no longer virtual.OnUpdateTransform should be used instead.
* Input bindings system restructured.
* Steam SDK upgraded to 1.23a.
* Refactored named net drivers into definitions and active driver list.
	* NamedNetDrivers parameter in DefaultEngine.ini is now named NetDriverDefinitions.
		* GetNetMode now looks at state of net driver for determining server/client/standalone.
		* NetMode variable is still around but is deprecated.
* The Messaging system has been upgraded to use strongly typed messages (UStructs).
* Semi-colons on the end of GENERATED_UCLASS_BODY() declarations are no longer supported.
* Refactored actor factories to be able to determine if they can create an actor from a piece of content without requiring the content be loaded.
* This in preparation for features involving filtering content out which actors can't be created from and will require that such content be resaved when the feature comes online in the future for them to be interact properly.
* All 'unofficial' (ie you don't get it from perforce or the ArtistSync) shortcuts, bat files, etc. that people utilize will need to be updated. 
	* Removed code that was forcing Win32 builds to be monolithic/requirescookeddata. 
		* **NOTE:** Win32 editor builds still wont work due to the aligned parameter issue in the compiler (this happens in both VS2010 and VS2012). 
		* **NOTE:** If you build the 'Uncooked' version of your game, all old commandlines will still work... with the exception of running commandlets.These require "-run=" to work in either exe now.
* Any code that was calling the previously global canvas functions (EG. ) must now call the same functions from the canvas context rather than passing the context as a parameter.
* GIsGame has been replaced with FApp::IsGame(). 


#### ブループリント

* Blueprints now respect LifeSpan.If LifeSpan is non-zero, blueprints will now be set to tick, and destroy themselves after they expire.Please be aware that this may increase the number of ticked actors in your scenes.
* Category hiding is now respected for variables in Blueprint editor. 
	* Removed blueprint access from a number of properties where it did not make sense. 
	* Hide nonsensical categories for lots of classes (mainly components) e.g. physics on an arrow component.
* Made Canvas property of HUD protected.
	* Required changing signature of DisplayDebug take a canvas and not a HUD.   
* Blueprint function Actor.DestroyComponent has been deprecated.ActorComponent.DestroyComponent should be used instead.
* Many 'BlueprintCallable' functions on Actor classes are now deprecated.This may result in warnings in existing level blueprints.
	* Affects AmbientSound, DecalActor, DynamicSMActor, RadialForceActor, physics functions on Actor, Emitter, Light.
	* Can now call the Component functions more easily on Actors that contain one, using the ExposeFunctionCategories metadata.
* If you drag off an Actor reference, it will offer exposed Component functions, and will place a 'call function on member' node (which combines 'get' and 'call' nodes).
* If you try and connect an Actor to a component function, it will try and insert a 'Get' node if that Actor contains a Component of the correct type.
* Removed NativeConstructionScript, IsRootComponentSimulatingPhysics, CheckHitInfo, GetActorMetrics, SetActorAndComponentsTickEnabled from Actor.
* Removed AlwaysRelevantDistanceSquared, SetViewRotation, TickSimulated, SetMaxLandingVelocity, HurtByDamageType from Pawn. 
* Removed PreRender , GetPartyMapName, GetPartyGameTypeName from PC. 
* Renamed URB_BodySetup to UBodySetup. 
* Removed WillHurt, ModifyPlayer, NotifyPawnBecameViewTarget from PhysicsVolume. 
* FEdGraphSchemaAction_K2NewNode::InstantSpawn has been renamed to SpawnNodeFromTemplate.
* Any custom blueprint node templates created for graph schema menu / palette building must now be created with an outer that can trace back to the blueprint.See the changes made in UEdGraphSchema_K2 for examples if you have a custom schema derived from it.
* Renamed WorldInfo to WorldSettings.
	* Make sure to get redirector in BaseEngine.ini.
* AActor::VerifyNoUnreachableReferences has been removed.
* AActor::TickSpecial has been renamed ::Tick.
* AActor::TickAuthoritative and TickSimulated have been removed.


#### ゲームプレイとフレームワーク

* PhysicsActor and PhysicalMaterial now no longer have direct support for sounds/effects.
	* Now you create a game-specific PhysicsCollisionHandler, which is given all physics collisions each frame, and can do what it wants with them.
* Removed virtuals NotifyHitActor/NotifyHitByActor from Actor.
	* Now override ReceiveHit now for a blocking collision.
* Removed virtuals NotifyActorTouch, NotifyActorUnTouch, NotifyComponentTouch, NotifyComponentUnTouch from Actor.
	* Now override ReceiveActorBeginOverlap and ReceiveActorEndOverlap, or overlap delegates on PrimtiveComponent.
* **Physics:Collision:** 
	* CollisionProfileSystem redone - check BaseEngine.ini for new sets.
	* Channels Renamed :Pawn->PawnMovement, Vehicle->VehicleMovement, RigidBody->PhysicsBody.
	* Channels Removed :Mover(->Default), RigidBodyInteractable(->PhysicsBody), Cloth, DeadPawn.
	* Channels moved out of engine:TraceWeapon, Projectile, Pickup (check QAGame's DefaultEngine).
	* Setting a collision profile after instantiated for the one that didn't have before can override collision settings.


#### レンダリング

* Added AA Method to post process settings.
* Removed MotionBlurPerObjectDistance from post process settings.
* **Atmospheric fog:** 
	* Added Altitude layer control property.
	* Added Altitude scale change which only affects Z location.
	* Added r.Atmosphere (0 or 1) console command, which enable/disable atmospheric fog + reload/remove related resources.
	* Added show flag for atmosphere, separate from fog.
	* Reduced view uniform buffer variables to be half-resolution to reduce size.
	* Removed artifacts for fog rendering for levels that doesn't have a skybox.
* LightShaft :Added LightShaft CVar r.LightShaftDownSampleFactor (Scale lightshaft downsampling).
* Landscape :Improved smooth tool, added smooth filter size adjustment.
* New IBL shading model approximation using preintegrated GF.The new solution is more accurate but can change the look of existing materials.


#### オーディオ

* SoundNode::Parse API changed to correctly track the path through SoundCue when the graph isn't a tree.  
	* Each visited node applies itself to a hash using GetNodeWaveInstanceHash.  
	* This is handled in SoundNode::ParseNodes automatically, however, any node that calls ParseNodes on its ChildNodes directly must apply this (see USoundNodeMixer::ParseNodes for example).


## 今後の追加事項と継続事項

#### ブループリント

* It is no longer necessary to compile a Blueprint in order to edit components after adding them in Components mode in the Blueprint editor.
* Clicking on entry/exit/collapsed nodes in a Blueprint graph now allows you to add inputs and outputs from the Details tab.
* Moved Blueprint settings into global user settings; they are now accessible through the Preferences Editor tab instead.Also removed the Settings menu from the Blueprint editor.
* Moved Blueprint Global Settings into the Details panel accessible via a new Blueprint Props toolbar button in the Blueprint Editor.
	* Also relocated the Reparent feature from the Blueprint Editor toolbar into the Details panel (it is no longer present in the editor toolbar).
* Changing component properties in the Details panel of the Blueprint editor now properly updates any Actor instances based on the Blueprint being edited.
* The Break Links submenu no longer appears in a Blueprint graph if there is only one subitem; only the subitem itself is shown.
* The Components toggle button is now enabled when reparenting from a non-Actor to an Actor-based Blueprint in the Blueprint editor.
* The Blueprint is now dirtied after moving its components around in Components mode of the Blueprint editor.
* The Blueprint preview viewport now includes a postprocess volume with an ambient cube map.
* Component editing mode can no longer be activated for non Actor-based Blueprints in the Blueprint editor.
* Components mode can no longer be activated in the Blueprint editor when editing macro Blueprints.
* Blueprint stability work to improve refactoring and deprecating code.
* Added GetPlayerCharacter() blueprint function to UGameplayStatics; it's just like GetPlayerPawn(), but returns an ACharacter instead of an APawn for those who need access to character and character movement.
* When a Select Node has a compilation error due to receiving an input index value higher than the number of options it supports (such as when an enum has values added to it in code after being used in a graph), it now outputs a message with much more information to track down the particular problem.It now lists the full path of the blueprint in which the error occurred and the name of the select node's index type (i.e. bool, int, or the specific name of the enum).
* Deprecated blueprint functions can supply a helpful message using DeprecationMessage in the UFUNCTION meta section.
* Extensive UI and workflow polish for the Blueprint Editor.
* The delete button has been updated for Blueprint Macros details view inputs and outputs.
* New button artwork for the Replication State of Blueprint variables.
* Tidied up the Create and Harvest Blueprint buttons in the Details view.
* Message now shown when there are no results in the Find in Blueprints dialog.
* Blueprint functions are now checked that they exist when fetched by name. 
* Blueprint editor windows now close first when exiting the editor.
* New icon for hide pins in blueprint editor, replaced existing placeholder icon hide_unusedpins.png - non-destructive art only update.
* New clearer icons required for the various Blueprint compile states.Replaced existing placeholder icon with new approved versions.Art change only - non-destructive. 
* Created icon for Create Blueprint from Actor and Harvest Blueprint (replaced existing placeholder icons) - non-destructive update.
* Created new icons for 'Find in current Blueprint', 'Blueprint Options' & 'Diff against previous revision', sizes available - 40px & 512px.PNG assets only.Non-destructive check-in (requires code hook-up).
* External (ThirdParty) modules now add their include paths the PublicInclude paths. 
* ThirdParty or system file include paths are not checked for forward vs back slashes.
* Re-adding interface FortInteractInterface to the blueprint (after removing) no longer results in an error.
* Blueprint functions can now be searched for by keywords
* LoadStreamlevel and UnloadStreamLevel blueprint actions will now do a partial match on the name provided and try to find a streaming level that ends with that string, not requiring full path.
* Blueprints are now preferred over other asset types when using find in content browser on an actor.
* Blueprint Compiling:Autogenerated variable names now include node GUIDs for disambiguation
* Improved workflow of Create Blueprint in the details panel.
* Ongoing UI polish to the blueprint editor.
	* Blueprint Explorer and Variables tabs have been fully deprecated and replaced with the MyBlueprint tab.
	* Blueprint Searching refactored. 
	* Blueprint Interface UI refactored
	* Added in ability to toggle context sensitivity in the graph action menu.
* Added a keyboard shortcut to edit the node title of any nodes that support it (F2)
* Made it possible to add node title renaming support to any node without engine modifications
* Various improvements to how node templates are created in graph schemas
* Various improvements to comment boxes (in-place editing, better hit testing when zoomed out or overlapping, etc...)
* Needs to be recompiled icon updated existing icons with more colour saturation & a change of color for Compiled - Dirty icon.Art change only - non-destructive.
* Created new icons for Add Variable, Function, Macro, and Event Graph.Sizes available at 16px, 40px, and 512px.New art assets - none destructive check-in. 
* Exposed MovementComp_Projectile::StopMovement to Blueprints. 
* Filter for CallFunction is now based on friendly name and, if applicable, will also use compact name

 
#### Framework

* Improvements to ACharacter::BaseChange() and JumpOff():
	* ACharacter::BaseChange() now checks the ACTUAL actor the character is based on even if it is World Geometry to see if it CanBeBaseForCharacter().Specific types of actors that are WorldGeometry for other purposes (and so would return the WorldInfo as the base) can now correctly direct characters to JumpOff(). 
	* MovementComp_Character::JumpOff() now takes the movement base as an argument so that derived classes can override handling (such as choosing the direction to jump) based on the actual actor they're standing on.
	* Wrote a new function UMovementComp_Character::GetBestDirectionOffActor(...) which can be overridden to choose to jump based on character velocity, base actor dimensions, etc.
	* Exposed a magic number in code (0.5 z value) as JumpOffJumpZFactor.This parameter can be used to tweak the height of a jump when jumping off something that can't be a base for a character.
* **Collision**
	* Disabled default pawn to interact with physics object until they turned to ragdoll
	* Renamed channels from ECC_Touch to ECC_Overlap
* Physx memory footprint is now reported by GetResourceSize.
* GameVer in addition to Engine Version, will also return Branch Name, Build Configuration and Command Arguments.Will also copy this to the clipboard for easy pasting in TTP. 
* load/unload/reload exec functions now utilized pre/post callbacks for module cleanup. 
* General reduction of GWorlds.
* Exec functions refactored and command functionality moved into per-command functions.
* Removed UMovementComponent::SetPlayerDefaults().Not needed in engine, plus what you might want to reset to is game specific.
* Modifier keys are now processed when the player controller is in a paused state.This means that the GPU profiler can be accessed or shaders can be recompiled while the game is paused.
* Get/SetOrigin renamed to Get/SetLocation on FTransform
* Revised lifespan implementation 
* Some canvas functions that were global and were passed a canvas context have been moved into canvas class.
* Moved editor specific actor labeling functions out of actor class.


#### Engine and Core

* UnrealBuildTool startup times have been greatly improved.
* "Plugin" support is now partially implemented.We're still working on making this more robust for a future release.
	* Two example plugins were added for testing purposes.
* Fully eliminated `bAllowManagedCode` and `WITH_MANAGED_CODE`
* `LoadANSITextFileToStrings` now preserves empty lines.
* `FCoreDelegates::LevelAddedToWorld`, `FCoreDelegates::LevelRemovedFromWorld` now called in game and editor
* Moved `GetCategory` and `GetCategoryFName` out of UProperty - these are now utility functions in the `FObjectEditorUtils` namespace 
* Engine now gathers hardware stats on first run for analysis (currently Windows only).
* All icons recreated for Live Preview, Stats Profiler, & Memory Profiler. replaced existing placeholder icons.Non-destructive checking - Change List is PNG assets only. 
* The bad command line '-' case is now caught and informs the user before exiting the app. 
* Messaging: ongoing improvements for message de-/serialization and transport
* UObject native base classes no longer have to start with 'F'.
* Remote debugging setup 
	* Engine.ini has the following settings:

			[Engine.ErrorHandling] 
			bPromptForRemoteDebugging=false
			bPromptForRemoteDebugOnEnsure=false
		* If either is set to true, then the user will be prompted to get a programmer when a crash occurs so they can remotely debug the issue. 
		* If the latter is true, the prompt will also occur on ensures. 
		* They can also be set via the command line with `-PROMPTREMOTEDEBUG` and `-PROMPTREMOVEDEBUGENSURE` respectively. 


#### プラットフォーム

* Porting the engine and the editor to Mac
* **Unreal Frontend**
	* The Launcher is being upgraded to use the new Unreal Project files; currently defunct 
	* Toolbar icons for Device Manager, created new icons for power on/off/reset.Require code hook-up.
	* Screen shots are now sent to directly to the FrontEnd app that requested them
	* Coded new layout for the Device Manager - **Power On**, **Power Off**, and **Reboot**.
* DependencyCache.bin files now exist per-platform.
* Module rules can now specify a `BinariesSubFolder` that is used when building DLLs.For example:

	If `BinariesSubFolder=IOS`, the resulting DLL for Win64 builds would be placed in `Engine/Binaries/Win64/IOS` 
* If Game or Server target for Desktop platforms, the Sandbox directory will be inferred if not specified.
* Moved `PhysX3Common` to the `Engine/Binaries/ThirdParty` folder as it is no longer required to load as part of Engine 


#### Online

* Steam lobbies auto set join-ability when it is determined the lobby is full


#### オーディオ

* Can now play and stop the current Sound Cue in the Editor by hitting the spacebar.
* Surround right speaker is no longer muffled when using 6 channel ogg files.
* Graph Nodes will now be deleted if associated Sound Node is removed.
* Now able to re-import multichannel sounds.
* Can now undo the breaking of connections in Sound Cue Editor.
* SoundModes can now be activated via SoundClasses when sounds are playing.
* SoundWave assets now display a wave form in their thumbnail.
* More greedy VOIP data transmission 
	* send all voice data up to 1k in one bunch immediately 
	* no longer buffering data at all over multiple frames


#### エディタとツール

* **Slate**
	* Working on MultiLineEditableText feature for SlateUI
	* Changed SColorBlock to not use disabled styling
	* Empty MultiBoxs no longer take up additional room when constructing their widget. 
* **User Interface**
	* The editor no longer pops up behind previous windows when opening.
	* Renamed AutonomousTabPanel to NomadTab.Fixed up associated function names, comments, and variables.
	* Nomad tab spawners no longer spawn their tab when restoring layout if the tab has already been spawned.
	* Nomad tabs can now be docked in major tab wells.Nomad tabs are now styled like Major tabs when floating or docked in major tabwells.
	* TabSpawnerEntries now have the ability to opt-out of menu placement.
	* Added support for legacy tab types, which allows legacy tab names to be registered to auto-change IDs at spawn time.
	* Removed all uses of AddHeader and most uses of AddMenuSeparator throughout the engine. 
	* Lots of polish to main editor menus (visuals, arrangement, etc.)
	* Updated the Property Matrix button in the Details view.
	* Updated the Vertex Density mode menu item with new artwork.
	* Updated the immersive mode's Restore button.
	* Updated icon artwork for Foliage Mode save/load settings.
	* An expansion button is displayed when toolbar and menu bar buttons get clipped which, when clicked, generates a context menu containing the clipped items
	* Undo/Redo menu options have icons again.
	* WorkflowTabs now appear listed under the Asset Editor category of the Windows menu.
	* Created new ' x' (delete button) with less alpha.Non-destructive check-in - art asset only  
	* Created new 16px icon for Property Matrix button & related windows/menu items.Requires code hook-up. 
	* Restore from Immersive button icon - created new 16px icon, requires code hook-up.Non-destructive check-in, art asset only. 
	* New icon for Replication icon for editor, to be hooked up in code for state changes.Non-destructive check-in, art asset only.
	* Created new icon for Viewport:Vertex Density. requires additional code hook-up.Art asset replacement only, non-destructive update. 
	* Created new icons for the Foliage Mode.Art asset replacement only, non-destructive update. 
	* created new 16px icons for all the following actor classes, ArrowComponent, AtmosphericFogComponent, BoxComponent, CapsuleComponent, DestructibleMeshActor/Component, InstancedStaticMeshComponent, MaterialSpriteComponent, RadialBlurComponent, SceneCapture(Component), SceneCapture2D(Component), SceneComponent, SphereComponent, SpriteComponent, TextRenderActor/Component.PNG assets only.Non-destructive check-in (requires code hook-up). 
	* All main Editor toolbar icons recreated & updated (additional icons for alternative play options are covered in another TTP).Non-destructive check-in - Change List is only adding higher resolution assets at 512px. 
	* Created new 16px icons for the Level Browser menu.New PNG files, none destructive checking - requires code hook-up. 
	* Created new icon for deleted actors. size:16px. - non-destructive update. 
* Added _explore to directory_ and _launch in external editor_ support for data and curve table assets.
* Improvements to navmesh generation performance
* **Scene Outliner**
	* Now has a yellow border when in SIE mode
	* Correctly refreshes content when new level added or removed
	* Scene Outliner now displays nested actors correctly in the search results.
* Refactored Layers implementation to simplify and consolidate code paths
* **Project Workflow**
	* Visual improvements for the new project dialog.
	* Switching projects now preserves the command line arguments used to launch the editor.
	* Quit dialog no longer appears when switching projects.
	* '^' characters are no longer allowed in project file paths since it confuses visual studio.
* **Content Browser**
	* Packages that get re-scanned for dependencies after the initial asset search will now properly update.
	* Folders are now created on demand if explore is chosen in the Content Browser.
	* Added better asset name checking early in the rename process in the Content Browser so we can trigger the friendly enter a new name code path.
* Added GetLabels to FSourceControl, which returns all labels in source control matching the supplied pattern string
* CrashReporter: web site is mostly done for all browsers, everything is working as intended.Major item left is documentation.
* **ランドスケープ**
	* Added ability to edit landscape proxies without loading LandscapeActor
	* Landscape proxies now can have own origins not necessarily at the same location as landscape actor position
	* Landscape splines are now considered to be static components
	* Landscape static lighting is now invalidated when altering the heightmap
	* Cancel button on the** Are you sure?** button for deleting end control points of a landscape spline actually cancels the delete again.
	* Landscape editor now forces all viewports to real-time, not just the active perspective viewport, making it easier to see changes being made
	* Newly created layer info objects now show up in the content browser and want to be saved when saving / quitting.
	* Replaced the "new layer info" path text box with a folder picker.
* **Matinee**
	* Matinee drop down menu now spawns at the correct size to avoid popping.
	* Reworded matinee dialog text to not mention tab position (as it can be moved).
	* Matinee now closes when that actors level is remove via the level browser.
	* Camera actor mesh updated, created new mesh consistent with new camera icons, added material & texture. 
	* Refactored interp-related utilities code - it is now in the FMatineeUtils namespace
	* Subtitles now shown for first sound in a matinee track. 
* **Level Editor**
	* Level editor tab again shows truncated level name.
	* Added a new config setting (DefaultMapName) for specifying what map the editor should load on startup 
		* This differs from the SimpleMapName pipeline and, instead, resembles the behavior of when the map name is specified via the command line
	* Viewports now update their camera position if their locked actor is moved in another viewport.
	* Duplicating numbered actors, labels the new actor with the next logical number.
	* Auto-naming now preserved preceding 0s when duplicating actors.
	* Attachments
		* Actor Transformations no longer stack up if dragging a parent and its child.
		* Copy and Pasting actors will now maintain the parenting hierarchy.
		* Attaching multiple actors to another actor which is also selected now produces and error.
		* Prevent parents becoming assigned as the children of their descendants.
	* Keyboard shortcut now appears in the possess/eject button tooltips.
* BuildingWall toggling now possible when BrushEdit is active. 
* Reworded LOD group popup to be clearer.
* Removed usage of package from asset migration dialog.
* Creating Destructible Mesh now also opens for edit and syncs to asset in Content Browser.
* PlayOn instances are killed when the editor closes.
* Any error generated by generating unique UVs in the static mesh editor is now displayed as a notification.
* Socket Manager widget now updates correctly when toggled from the level editor toolbar.
* Dragged assets now snap more accurately to the hit proxy actor.
* Toggling the override flag on a MIC param now updates the material.
* Automated Screen Shot capture test and browser update
* Added function name context info to warning message.To help tracking down where it comes from.	Warning:BoneIndex for Bone (b_MF_Hand) is not found in the Skeleton (M_Avg_Base_AnimSkeleton) 
* Debugging:Added Cyan and Magenta default FColors.Added DrawDebugCircle. 
* Static Meshes with Material slots that are not referenced by any LOD are now NULLed on load.Extraneous indices are now trimmed as well.
* The ReferenceViewer is now a Nomad Tab.
* Creating a material with an initial texture now properly hooks up the texture to the base color.
* **Event Viewer:**
	* Updated Event Viewer to better sort the events by time.
	* More information provided for each event in the hierarchy.
* Static Mesh Editor:Showing/hiding sockets now refreshes the Static Mesh Editors viewport.
* Workflow for converting actors has been improved.
* The World Properties button has been updated to say World Settings, along with its tooltip.
* Blutility is now an Epic Labs preference.
* An Editor-only offset for streaming levels has been implemented, and a new optional column added to the Level Browser that allows setting of an Editor-only offset for each streaming level.
* Creating a new placement browser mode/toolset which will aid new users and level designers in their workflow
* Added a warning dialog for when the user modifies a package that is in a folder that they do not have permission to write to.
* When you are migrating assets and a package does not exist on disk, the user is prompted about it.


#### レンダリング

* Reduced the number of shader permutations created by the spline mesh shader to one (parameterized) vertex factory, and optimized.
* Spline-deformed static meshes now support LODs.
* Spline-deformed static meshes can now be lit by static lighting
* Material Editor clean up now only dirties the material if its changed.
* Cascade color picker now registered as a child of the cascade viewport.
* Cascade layout now loads correctly.
* Current LOD dropdown now starts at 0, to conform with properties array.
* Swap Lowest/Highest LOD button functionality in Cascade.
* removed unnecessary confirmation dialog in Cascade when setting fixed bounds.
* ConditionalProcessCommandBindings now passed held/repeat state of key/mouse button, and ignores any commands if its true.
* Reparent option is now disabled when simulating.
* Autosave notification no longer says %d instead of the time. 
* Cascade emitter categories now only appear if there are valid children to display.
* SkeletalMesh Editor no longer displays the hierarchy of the last skeletal mesh when opening the current one.
* Improvements to banding on subsurface scattering colors.
* Destructible objects which have been fractured will now no longer receive decals
* When a light has been assigned an IES light profile, it will use the calculated texture multiplier whether you choose to use the IES brightness or not.
* Particle emitters now correctly orient the local z-axis towards the camera when this feature is enabled from Cascade
* Actor scaling is taken now into account for GPU particle systems.
* Added pause keeping Motion Blur, still needs some work
* There is now experimental support for SM5 rendering features via OpenGL 4.3.
* Removed check for static mesh in the material thumbnail scenes GetViewMatrixParameters as it is not technically required to determine the view matrix.
* Added more Gbuffer visualize modes
* Static mesh primitives with multiple parts using different materials which had mixtures of translucency modes (normal and separate) will now render correctly
* When a culling volume is deleted from the scene in the editor, all static mesh primitives will have their draw distances updated to reflect this change.
* "Visible In Game" flag on the atmospheric fog component is now respected


#### アニメーション

* Changed "Preview Mesh" item on Persona viewport show menu to "Mesh"
* Improved layout of pin-exposable properties on animation nodes
* Added UAnimMontage::GetSectionTimeLeftFromPos(). 
* Fixed and refactored Azimuth and Elevation math code. 
* Moved GetClosestCollidingBoneLocation from SkinnedMeshComponent to SkeletalMeshComponent, and made it actually check against colliding rigidbodies!It could return a non colliding one, and traces would fail. 

