INTSourceChangelist:6537038
Title: 2013年10月版本说明
Crumbs:%ROOT%, Support/Builds
Description:
Availability:Licensee
Parent:Support/Builds
Order:-4
Order: 48

[TOC(start:2 end:2)]

## 版本信息


[REGION:simpletable]
| 项目| 信息|
| ----| ----|
| **标签**| QA_APPROVED_UE4_BUILD_2013_10|
| **变更列表编号**| 1897729|
| **VISUAL STUDIO 版本**| Microsoft Visual Studio 2012 版本 11.0.60610.01 更新 3|
| **DIRECTX**| 2010 年 6 月|
[/REGION]

## 重要信息

 * 当前引擎开发路线图：[虚幻引擎4 路线图](https://udn.unrealengine.com/questions/topics/roadmap.html)
 * 已修复的错误：[2013 年 10 月虚幻引擎4 已修复的错误](UE4_Fixed_2013_October.xlsx)
 * 已知问题：[2013 年 10 月虚幻引擎4 突出问题](UE4_Bugs_2013_October.xlsx)
 

## 主要新功能

####编辑器和工具
* **新地形编辑器**
	* **地形编辑器** UI 最近已完成重建，且有一些改进：

		![](LandScapeEditor01.png)

	* 现在，工具根据用途分为三种不同的模式。
		* **管理（Manage）** 模式包含 **新建地形（New Landscape）**、**组件（Component）** 和 **样条（Spline）** 工具。
		* **造型（Sculpt）** 模式包含所有造型（高度图）工具，以及区域选择和复制/粘贴。
		* **描画（Paint）** 模式包含描画（权重图）工具。
	* UI 更加紧凑，不再是支持简单下拉选择器的窗口填充工具选择器。
	* 地形编辑器现在基于详细信息（Details）面板。这使得它与编辑器的其余部分保持一致，并添加新功能，例如在设置名称及其值之间新增的可调节分隔条。
	* 造型现在使用名为 **造型（Sculpt）** 的工具完成，而不是 _描画（Paint）_ 工具。	 

		![](LandScapeEditor02.png)

	* 目标图层选择器现在仅在图层描画模式下可见，并且现在它使用与编辑器其他部分相同的下拉资源选择器。		

		![](LandScapeEditor03.png)

	* 改进了 **新建地形（New Landscape）** 窗口，现在允许在 **新建（New）** 模式和 **导入（Import）** 模式下设置 **地形（Landscape）** _材质_和图层信息。
	
		该窗口还会记住最后一次选择的地形材质！
			
	* 现在，_材质_ 选择器可显示缩略图并使用在编辑器其他部分中显示的资源选择器。
	* 改进了图层信息列表以匹配目标图层列表，并且还使用新的下拉资源选择器和样式。

		![](LandScapeEditor004.png)

	* 已将 **地形（Landscape）** 视图模式移出地形编辑器，并且现在可通过视口视图模式下拉列表使用。

* **视口布局**
	* 关卡视口现在支持不同的布局，可在每个视口的主菜单中访问。
		
		![](ViewportLayouts.png)

	* 选择布局会更改当前选项卡中的视口排列。当前活动布局以橙色高亮显示。
	* 在 **关卡视口（Level Viewports）** 下的 **键盘快捷键（Keyboard Shortcuts）** 窗口中，也可以将布局用作命令。
	* 使用键盘切换布局时，该命令将影响具有键盘输入焦点的视口选项卡。如果视口没有焦点，则不会执行任何操作。

* **新增首选项：显示帧率和内存**
	* 添加了新的编辑器首选项，可切换主编辑器 UI 中的帧率显示。
	* 此选项位于：**编辑器首选项（Editor Preferences）> 开发者工具（Developer Tools）> 显示帧率和内存（Show Frame Rate and Memory）** 下方（默认为开启）

		![](ShowFrameRateandMemory01.png)

	* 切换此选项：		

		![](ShowFrameRateandMemory02.png)

	* 启用此选项：	
		
		![](ShowFrameRateandMemory03.png)

* **Subversion 源码控制支持**
	* 已将对 Subversion 的支持添加到 UE4 作为源码控制（Source Control）选项！
	* 单击编辑器右上角的 **源码控制（Source Control）** 指示器以启用：

		![](Subversion01.png)

	* 从提供方（Provider）菜单中选择 Subversion：

		![](Subversion002.png)

	* 输入登录信息：

		![](Subversion03.png)

	* Subversion 会将您的密码安全存储在编辑器之外的位置。
	* 在虚幻引擎4 中，Subversion 支持使用与 Perforce 大致相同的工作流程。细微区别是：
		* 由于所有资源都是二进制，因此在 _签出_ 时会锁定它们（Subversion 实际上没有 _签出_ 内置的概念）。
		* 磁盘上的文件未标记为只读。
		* Subversion 元库的 _工作副本_ 应在 UE4 中开始使用 Subversion 之前到位。目前，我们没有在编辑器中设置此选项，因此必须通过某些其他第三方工具（例如 TortoiseSVN）进行设置。
	* 有关更多信息，请参阅 Subversion 文档，该文档可在网站 http://subversion.apache.org/docs/ 上找到。


#### 蓝图
* **在详细信息（Details）面板中编辑变量默认值**
	* 现在，用户可以在图表（Graph）模式的 **详细信息（Details）** 面板中编辑变量默认值；其他变量属性也在此编辑。
	
		在图表中选择变量获取/设置节点：

		![](EditingVariableDefaultValues01.png)		
		或在 **我的蓝图（My Blueprint）** 列表中选择变量：	

		![](EditingVariableDefaultValues02.png)

* **蓝图宏和 ForEach 节点中的通配符**
	* 编辑宏的输入和输出时，用户现在可以选择创建 _通配符_ 引脚（或 _通配符数组_ 引脚）。
		
		这是会自动转换为连接类型的灰色引脚。

		![](WildcardBlueprint01.png)	
	
	* 以前，此功能用于将 **ForEachLoop** 和 **ForEachLoopWithBreak** 节点添加到 **StandardMacro** 库。	
	
		[REGION:caption]
		**之前**
		[/REGION]
		![](WildcardBlueprint02.png) 
		[REGION:caption]
		**之后**
		[/REGION]
		![](WildcardBlueprint03.png)

* **蓝图编辑器 UI 更新**
	* 已将 **[ROOT]** 条目合并到 **组件（Components）** 模式中的实际场景根组件节点。	 
	也已在拖放过程中更新工具提示以使其更具描述性。

		![](BlueprintEditorUpdates01.png)

	* 已从 **组件（Components）** 和 **图表（Graph）** 模式中的 **详细信息（Details）** 选项卡删除对象类型描述。
	* 现在，**搜索（Search）** 框对于 **图表（Graph）** 模式下的变量选择已隐藏。	 

		![](BlueprintEditorUpdates02.png)

	* 现在，选择后会清除 **组件（Components）** 模式下的 **添加组件（Add Component）** 下拉过滤器文本，以便下次打开下拉列表时再次显示完整列表。

* **蓝图编辑器中的“Web 浏览器”导航**
	* 现在，不再从新选项卡中打开每个新图表，而是在用户关注的最后一个选项卡中打开每个新图表，并且像 Web 浏览器中的链接一样导航到每个新图表。	
		
		![](WebBrowserNav01.png) 

	* **简单历史记录导航**
		* 可以使用左上角的按钮或鼠标进行导航（按钮 **4** 和 **5**，与 Web 浏览器相同）。
		* 导航时将会始终保留您的位置和图表的放大比例，从而可以轻松地前后跳转。
	* **完整历史记录导航**
		* **右键单击** 后退（Back）或前进（Forward）按钮可查看选项卡历史记录列表，因此可以随意跳转到任意点。
		
			![](WebBrowserNav02.png)

	* **打开新选项卡**
		* 最后，要打开新选项卡，可以按 **Ctrl + 双击** 图表在新选项卡中打开。
		* 使用此功能，还可以在两个单独的选项卡中打开同一图表，以及平移并分别导航。


#### 渲染
* **在虚幻引擎4 中支持 Oculus Rift**
	* 虚幻引擎4 现在支持 Oculus Rift！
	* 要使用它，只需插入 Rift，然后启动游戏。
	
		自动检测到 Rift 后，便会看到立体渲染的游戏，且附带镜头扭曲变形效果。
		
		![](OculusSupportUE4_01.png)

	* 启用后，会将玩家摄像机的旋转锁定到 Rift 的方向。建议将此设置保留为 **锁定**。
	* 目前，唯一测试的 VR 体验主要是 **ElementalVR** 示例项目。这是我们在 GDC 上展示的演示，并且已调整达到 60 FPS。推荐作为用户的第一次 VR 体验！
	* 最佳体验注意事项：
		* 如果显卡正在以固态 60 FPS 运行演示，则建议 **开启 Vsync**。如果使用高清套件，尤其需要开启该功能，因为屏幕方向会使撕裂变得非常明显！
		* **关闭帧缓冲**。此选项在 NVIDIA 控制面板中可用。将此值设置为 1 可减少设备的延迟。

			![](OculusSupportUE4_02.png)

	* 一些值得注意的正在进行中的项目：
		* **自动全屏检测**：目前，如果 Rift 不是主显示器，则必须手动将窗口移动到 Rift，然后在控制台切换全屏（键入“fullscreen”）。
		* **某些渲染功能与立体渲染不兼容**：目前，环境反射与立体渲染不兼容，但可能还有其他功能无法渲染！如果右眼显示为黑色方块，则表示可能发现不兼容的功能。
		* **已改进延迟**：目前，我们正在进行双重更新，一次更新是在游戏线程上进行，并且在渲染之前立即进行另一次更新，以将摄像机位置定向到 Rift 的当前方向，但仍然可以进行一些优化。一般也可以使用 Rift 插件在渲染线程上用于最后更新的界面，因此如果游戏要在不使用 Rift 的情况下减少明显的延迟，可以使用相同的界面进行另一次输入读取和调整。

* **PC 和控制台的屏幕空间光束**
	* 可以选择两种不同的光束功能：**遮挡雾气方法** 和 **加色/泛光方法**。两种方法的成本是独立的，因此最好只启用所需的其中一种。
	* **遮蔽**
		* 遮蔽方法根据屏幕上对象的深度创建遮罩，将它远离光源变模糊，并用它来遮挡雾气和大气。
		* 可以将太阳稍微偏离屏幕，仍然可以获得遮蔽光束，但目前接近太阳角度达到 90 度时它们会淡出。只有 _定向光源_ 才可以使用遮蔽方法。

			![](Occlusion.png)

	* **泛光**
		* 泛光方法在场景空间中的光源周围捕捉场景的颜色（包括半透明度和雾气散射），并使它径向远离光源变模糊。
		* 可以在任何类型的 _光源_（_点光源_、_聚光源_ 和 _定向光源_）上启用光束泛光，但很难让它在点光源和 _聚光源_ 上工作。它只会从明亮且光源附近的不透明表面拾取要泛光的颜色。

			![](Bloom.png)

* **移动渲染：距离场阴影**
	* 现在，太阳的光照是通过距离场阴影以像素为单位进行计算。	 
	
		![](DistanceFieldShadows01.png)	![](DistanceFieldShadows02.png)

* **Lightmass 质量改进**
	* 现在，使用自适应采样提高质量，而不会大幅增加构建时间。
	* 现在，艺术家可以通过更改 **间接光照质量（Indirect Lighting Quality）** 设置平衡质量与构建时间！
	
		[REGION:imagetable]
		| ![](LightmassQuality01.png) | ![](LightmassQuality02.png) |
		| ---| ---|
		| 改进之前| 改进之后|
		[/REGION]

#### 动画

* **AnimNotifyState 通知**
	* 与 AnimNotifyEvent 类似，但它可以定义时间范围，即拥有持续时间。它可以在 AnimNotifyClass 蓝图中触发 NotifyBegin、NotityTick、NotifyEnd。

		![](AnimNotifyState01.png)

	* tick 动画时将会调度事件。
		
		![](AnimNotifyState02.png)(convert:false)


## 新增内容

#### 编辑器和工具
* **打开项目（Open Project）** 现在使用 **项目浏览器**。
* 已实现基于代码和非代码游戏项目的打包（**主菜单（Main Menu）> 文件（File）> 打包项目（Package Project）**）。
* 编辑器子窗口现在列在 Windows 任务栏中，且可以最小化。
* **新地形编辑器 UI**
* 现在，可以使用插槽作为连接点将静态网格体指定到 _地形_ 样条控制点。
* 已实现基于 _Slate_ 的加载屏幕。
* 已在编辑器中实现色盲过滤器以进行可用性测试。
* 添加了新的首选项，可在编辑器 UI HUD 中切换帧率和内存显示。
	* **编辑器首选项（Editor Preference）> 开发者工具（Developer Tools）> 显示帧率和内存（Show Frame Rate and Memory）**（默认为开启）。
* **视口布局**
	* 除现有的四个窗格，2x2 布局之外，新布局还包含两个、三个和四个视口窗格。
	* 关卡视口现在支持不同的布局，可在每个视口的主菜单中访问。
	* 选择布局会更改当前选项卡中的视口排列。
	* 在关卡视口（Level Viewports）下的 **键盘快捷键（Keyboard Shortcuts）** 窗口中，也可以将布局作为命令输入。
* 导入密集静态网格体时，新的三阶优化算法 (Forsyth) 可用于提高速度。
	* 仍然可以通过将控制台变量 `r.TriangleOrderOptimization` 设置为 `0` 以使用 NVTriStrip。
* 添加了将新 LOD 导入或将现有 LOD 放置到静态网格体的功能。
* **分析器**
	* 已改进事件图表（添加了用于选择平均事件图表和最大事件图表的选项）。
	* 添加了将 ue4stats 文件从资源管理器拖放到分析器的功能。
	* 已改进分析器性能（主要与缩短捕获统计数据文件的加载时间有关）。


#### 蓝图
* 在 **我的蓝图（My Blueprint）** 面板中选择变量或选择以它为目标的获取/设置节点时，添加了在 **详细信息（Details）** 面板中编辑变量默认值的功能。
* 现在，可以在蓝图中设置光源的 IES 配置文件纹理。
* 已将模式/对齐视口控件添加到 **蓝图编辑器（Blueprint Editor）** 中的蓝图预览视口。
* 在 **蓝图编辑器（Blueprint Editor）** 中，现在可以在 **图表（Graph）** 模式下将在 **组件（Components）** 模式下创建的变量指定到类别。
* 在 **蓝图编辑器（Blueprint Editor）** 中，已在 **组件（Components）** 模式下将变量名称、工具提示和类别编辑功能添加到 **详细信息（Details）** 选项卡。也已在 **图表（Graph）** 模式下将变量名称编辑功能恢复到 **详细信息（Details）** 选项卡。
* _蓝图_ 中的 _宏_ 现在可以采用通配符参数类型。任意数量的引脚都可以使用通配符表示，但当前限制是一个 _宏_ 实例只能使用一个通配符类型。
* StandardMacro 库中的 **ForEachLoop** 节点用于简化 _蓝图_ 中的数组迭代。
* 已为所有 _蓝图_ Actor 添加 **已接收销毁（Received Destroyed）** 事件。
* **蓝图编辑器（Blueprint Editor）** 现在支持类似 Web 浏览器的体验。
	* 向后导航，显示所有历史记录并重新使用选项卡打开图表。
* 添加了使用拖放功能在 **我的蓝图（My Blueprint）** 选项卡中对变量/类别进行重新排序的功能。
* 添加了 **通过接口获取所有 Actor（Get All Actors With Interface）**。


#### Gameplay 和框架
* **Oculus Rift 支持**
	* 此版本包括在支持平台上对 Oculus Rift 硬件的初期支持。如果在引擎启动时插入设备，插件会检测设备，并启用立体渲染、HMD 失真和读取传感器数据。请注意，该功能正在开发中，因此仍然可以使用适当监控检测等功能。
* 现在，可以在运行时更改 `r.MaterialQualityLevel` （使用材质表达式 **QualitySwitch** 时更容易进行艺术迭代）。
* 已使用一半分辨率媒介添加对高斯模糊后期处理的优化，可以使用 `r.FastBlurThreshold` 进行调整，默认仅与较大的泛光结合使用。
* 已将 `ApplyRadialDamageWithFalloff()` 函数添加到 `GameplayStatics`，包含内半径和外半径、衰减指数和最小伤害的参数。
* 添加了 Subversion 支持。
* 现在通过插件管理源码控制。
* 现在可通过键盘控制组合框（及其内容）。
* 已将摄像机组件的最大宽高比从 10 增加到 100。
* 已将 **在主通道中渲染（Render in main pass）** 选项添加到图元。
	* 这可以防止图元在主场景中绘制，但仍然可在其他通道中绘制（例如自定义深度通道）。
* 已将 HDR 导出添加到纹理立方体资源。
* 已将 `FQuat::Vector()` 重命名为 `FQuat::GetRotationAxis()`，不要与返回方向矢量的 `FRotator::Vector()` 混淆。
* 添加了 **AnimNotifyState**。与 AnimNotifyEvent 不同，它可以定义时间范围，也就是它拥有持续时间。它可以在 AnimNotifyClass 蓝图中触发 NotifyBegin、NotityTick、NotifyEnd。
* 已在编辑器中改进 AnimNotify 绘制。高亮显示活动通知。
* 如果动画蒙太奇无法在当前骨架上播放，则会改进日志警告。
* `FText` 数字/百分比/货币格式现在可提供控制地点和标牌的改进格式。
* **PhAT** —— 将凸包从选定静态网格体复制到选定形体。


#### 渲染
* 管道光源已公开。使用光源的 **源长度（SourceLength）** 属性。
* 已为 PC 后期处理添加精细胶片颗粒。
* **Lightmass 质量改进**
	* 使用新的自适应 GI 解算器可显著提高质量。
	* 可以使用 **场景设置（WorldSettings）** 中的 **间接光照质量（Indirect Lighting Quality）** 选择性提高所需关卡的解算器质量。
	* 已减少对象相交位置的暗纹素瑕疵。
* **正在渲染针对多个正在移动对象的线程优化**
	* 使用 1400 个正在移动的对象可将测试场景中的整体 RT 时间缩短约 40%
* **屏幕空间光束**
	* 使用临时抗锯齿保持稳定性。
	* 可选择两个独立的功能：更真实的遮蔽雾气方法和更可控的泛光/加色方法。
* **移动平台**
	* 添加了距离场阴影。
* 已将 **最小（Min）** 和 **最大（Max）** 材质表达式添加到“数学（Math）”类别。


#### 平台
* 现在，PC 使用与控制台相同的缓存纹理流送（具有优先缓存启发法的纹理池）。默认池大小为 VRAM 的 `50%`，但可以随时更改。
* 在 **虚幻自动化工具** (UAT) 中支持部署到 Linux 机器。
* **IOS**
	* 添加了对 IPhone5S 的支持（包括通过胖二进制添加 64 位）和一些 IOS7 修复
* **Mac**
	* 添加了对 **虚幻自动化工具** (RunUAT.command) 的支持
* 已将 Facebook IOS 支持添加到引擎。
* 已为 OSS 添加用于共享状态更新等的在线共享接口。
* 正在将 Facebook IOS SDK 添加到第三方源。


## Upgrade Notes （以下内容仅供参考，不作翻译）

#### Editor and Tools
* **Landscape**
	* Merged heightmap normal to weightmap, to save texture sampler.
* **Edit properties** command for a streaming level now shows ULevelStreaming object properties instead of AWorldSettings properties.
* Can now delete assets in the **Content Browser** using the **Delete** key.
* **Content Browser** now displays message _"Nothing to show; check your filter"_ message when the asset view has no items to show.
* **Content Browser** thumbnail scaling now disabled when in columns view.
* Texture import notification now fades off immediately after clicking OK or Revert buttons.
* Moved the bookmark menu entries into a single **Active Bookmark** category.
* Materials no longer generate code for properties that have been disabled (i.e. opacity properties when the _Material_ is opaque).
	* Previously it would have been possible to have expressions attached to disabled properties which would generate code that could be sneakily used in some way by the shader. This will no longer work and will need fixed up.
* Changed actor animation detail panel building to allow property visibility to be control with delegates. This fixes an issue where dragging an animation onto an actor caused the panel to be left in an inconsistent state.
* Corrected tooltip for **Create Dynamic Material** _Blueprint_ node.
* Changed behavior of viewport creation so that **Enable**/**Disable** of realtime during **Play In Editor** is honored.
* Added extra text and tool tip to asset display to the **Skeleton Tree** in Persona signifying that it is _Preview Only_
* Deleting the original function output no longer causes an error to be displayed. 
* Localized the Viewport Visualize Buffer menu options.
* Localized the Import FBX options window header and menu.
* Localized the Viewport Show menu options.
* Localized the Splash screen version and loading information.
* Localized the SoundCue editor menu options.
* Localized Blueprint Editing Defaults.
* Localized Editor Settings Keybinding override notification.
* Localized PhAT Editor Animation toolbar text.
* Localized Viewport: Preview: Recent section header.
* Localized the Matinee Group context menu Rename Group.
* Integrated Forsyth triangle order optimization algorithm (as third party library) into mesh import pipeline.


#### Blueprints
* **Acceleration** property of _CharacterMovementComponent_ has been made protected, and is accessible in _Blueprints_ only by `GetCurrentAcceleration()`.
	* Blueprints that were moving by modifying **Acceleration** should be converted to use the **InputVector** instead.
* Added analytics to track project resource statistics for number of source files, modules, Object Classes, Blueprint Classes, Asset Packages, Maps and the instance counts of objects per class type.
* Added functionality in the **Blueprint Editor** to add events for _Components_ from the **Details** panel and the **Components** context menu.
* Changed all super call reference in the _Blueprints_ to be _Parent_ instead of _Super_ in both code and user facing naming.
* Replaced the map check icon so it is more readily distinguishable as the map check function rather than just a tick box.
* Added analytic that records project usage.
* Added missing icon display in the _Blueprint_ context menu for the call function on _foo_ entries.
* Blueprint array **RemoveItem** function now removes all instances, to match TArray behavior.


#### Gameplay and Framework
* `UGameEngine::UserSettings` renamed GameUserSettings and moved to UEngine.
* `UEditorEngine::UserSettings` renamed EditorUserSettings.
* Move `PreInitializeComponents` to be in `PostActorConstruction` so that order is consistent for spawned and loaded actors. 
* Rename `AActor::Spawned` to `AActor::PostActorCreated`. 
* Move `AActor::PostActorCreated` to occur before `OnConstruction` to be analogous to `PostLoad` for spawned actors.
* The `GameMode` pointer in UWorld is now private. Use GetAuthGameMode() accessors.
* **Vehicle classes renamed**:
	
	[REGION:simpletable]
	| Old | New |
	| --- | --- |
	| Vehicle | WheeledVehicle |
	| VehicleMovementComponent | WheeledVehicleMovementComponent |
	| VehicleMovementComponent4W | WheeledVehicleMovementComponent4W |
	[/REGION]

* _NoDrive_ vehicle model support removed. 
* Change up-axis from **Y-up** to **Z-up** automatically on the APEX Clothing asset which has Y-up axis.
* Message formatting pattern strings now use \` instead of ' to escape.
	* If a message formatting pattern string uses { or }, wrap the { and } between \`s - individually or collectively both work.
	* Use double \` (\`\`) to print a \` without escaping a { or } after it.
* Disabled motion blur while performing high res screenshot pass. 
* `LoadPackageAsync` now accepts a delegate instead of pointer to a function.


#### Core
* Various types named "Arithmatic" were renamed to "Numeric"
* The custom versioning scheme which was added to allow branches to define their own entries in archives has been changed from being enum-based to GUID-based.
	* Previously, enums were used to identify a custom version.  These were placed in `EUnrealEngineObjectCustomTag` in `ObjectVersion.h`.
	* Now a custom version is identified by a GUID.
	* Existing packages containing enum-based custom versions are backward compatible with a GUID of `00000000-00000000-00000000-<enum value>`, so a GUID of this value should be used to load these packages.
	* Any `FCustomVersionRegistration` variables should be defined with a GUID instead of an enum and a string which describes what the custom version is for, so this:
		
			FCustomVersionRegistration GMyModule((EUnrealEngineObjectCustomTag::Type)0x12345678, MyLatestVersion);

		would become:

			FCustomVersionRegistration GMyModule(FGuid(0, 0, 0, 0x12345678), MyLatestVersion, TEXT("My module"));
 
* The computed `TangentToWorld` in `FMaterialVertexParameters` now removes scaling and matches `TangentToWorld` passed to the pixel shader. 
* UnrealBuildTool (and the Engine in modular builds) will now use `*.uprojectdirs` files in the root to indicate the folders it should search 1 level deep for `uproject` files. 
	* This feature can be disabled in UnrealBuildTool by simply setting `bUseUProjectDirs` to false. 


#### Platforms
* Eliminated Uncooked UE4 and game binaries. 
	* You now always run `UE4Editor.exe` to test uncooked games, or to execute commandlets. 
	* The Uncooked option no longer exists in generated project files. Use the Editor instead. 
	* Pass the `-game` option on the command-line of the editor to run the game instead. 
	* Or, you can run the game from the editor using **Play in Standalone** Process. 
	
		[REGION:note]
		Existing projects should delete their Uncooked target. GameUncooked is no longer a valid TargetType. For now, UnrealBuildTool will automatically SKIP these files.
		[/REGION]

* Updated a number of `*.mm` files to `*.cpp`
 

#### Networking
* Added default map / game info ini options for dedicated servers. 
* Allows dedicated servers to launch with less commandline parameters. 
* Removed StartupMap concept as DefaultMap is functionally the same.


#### Online
* Consistent `IsEnabled()` functions across all online subsystems.
* Added `LogOnlineGame` and `LogBeacon` as new possible log options.   
* Renamed `IsRunningServer` to `IsRunningDedicatedServer` for clarity.
* Renamed `JoinFriendSession` to `FindFriendSession` to be more clear about its purpose. 
	* `FindFriendSession` only returns a single search result for where the friend is. 
	* `JoinSession` must still be called afterward with the result to complete the flow.
* Added a Facebook Identity for IOS
* Added Facebook Friends access for IOS. Uses the OnlineSubsystem Sharing interface to request permissions.
* Added the initial implementation of `OnlineSubsystem::GetUserInterface` which hosts data about an OSS user.
* Updated the OnlineSubsystem Facebook so that IOS and windows builds could live side by side.
* Moved MCP configuration of service keys and permissions to NoRedist source files instead of config files
      * Still maintained the `DefaultEngine.ini` method of getting these values for development convenience
      * Games can override configurations using a callback delegate
* Http
	* Exposed http module timeouts for wininet:
		* HttpConnectionTimeout=60 
		* HttpReceiveTimeout=30 
		* HttpSendTimeout=30
	* Request will fail faster instead of waiting for the timeout


## Future Additions and Ongoing Efforts

#### Editor and Tools
* **World Browser**
	* Changed blank persistent level from a runtime package to an actual package on a disk. **Open World** command now requires a map file instead of folder. 
	* **Right-click** now properly selects hovered tiles.
* View mode names displayed in active viewport are now the same as the menu listing.
* Disabled the menu option to make a level the current level when it is locked.
* The same icon is now used for "data only" and regular _Blueprints_, only the color differs to distinguish between them.
* The scene texture node now has an optional clamp of it's UV to the viewport size.
* Editor no longer crashes when dragging asset into newly created collection.
* Prevent crash if user exits game the same frame it begin it.
* Added missing tooltips to _Matinee_ actions.
* Editor no longer crashes if **Content Browser** asset is selected when creating a new _Matinee_.
* **Placement Browser** - Collections view no longer tries to create an entry with invalid parameters.
* **Content Browser** now uses icons instead of text to denote collection type.
* **Matinee** dropdown now has an option for **Add Matinee**.
* No longer a warning when right-clicking or creating a new collection when source control is disconnected.
* Zoom and _Blueprint_ headings are now localized (where possible).
* **Blueprint Editor**/**Persona** mode headings now appear localized.
* Dropdown **Add Float Track** now appears localized.
* BSP Pan now appears localized.
* _Matinee Actor_ details section now appears below **Transform**.
* Duplicate, via **Ctrl + W**, only requires 1 undo step again.
* _SoundCue_ and _SoundWave_ no longer play when double clicked, instead opens **SoundCue Editor**.
* _DecalActors_ marked as **Hidden In Game** will now draw properly in the editor.
* Optimizations for Gaussian DOF effect. If **Near Blur Size** is less than the threshold defined by the console variable `r.DepthOfField.NearBlurSizeThreshold`, the near blur effect will be disabled and cheaper shaders used instead.
* Buffer visualization system now works correctly in orthographic view modes.
* New _Landscape_ doesn't try to resize during alt-drag view rotation any more.
* Optimized _Landscape_ spline rendering in editor by reducing complexity of the lines and optimizing `DrawDashedLine()`.
* General  UI Improvements:
	* Added new additional ViewMode icons at 40x pixels PNG only.
	* Created new Icons added for Local, Shared & Private - will require hookup.
	* Created new Profiler Icons and  Added to the build - Wired up.
	* Updated Icon - Colorblind Solution Should automatically work  Red - No Go sign - non-destructive PNG replace.
	* Adjust existing Content Browsers folder icons to lighten them. requires code to tint default icons back to look of previous versions. 
	* Revised existing icons & created new icons for translation toolbar options. PNG assets replaced, new translation icons require code hook-up. 
	* Created new icons for both the main Add Event Caller blueprint button (40x size) and the context menu (16x size). 
	* Created a new icon for Import FBX Chunks @ 40x. Requires code to hook-up in edior. Change is PNG asset only. 
	* Created new icons for 'Standalone Game at Camera Location' & 'Standalone Game at Player Start', at both 16x & 40x resolutions. PNG assets only, require code to hook-up. 
	* Created new icons for Enum, Bluprint Delegate (16 & 24x), and Delegate Pins connected & disconnected. PNG assets only, replaces existing PNG files. 
* New engine analytics - Editor tracks source control provider changes.
* Viewport toolbar buttons now act like regular toolbar buttons and close any open menus when clicked.
* Added branching support for the EpicSurvey plugin.
* Changed EpicSurvey notification mechanics to display a toast when a new survey is available, and added definable time delays and duration for the notification icon.
* Deselecting package when using **Save All** in the Editor now remembers you ignored it for the lifetime of the application.
* Added a new editor setting to separate the middle-mouse scroll speed when using it to zoom in the viewport.
* The **Content Browser**'s search box now includes all the contents of successful search results, allowing a user to search for an entire folder rather than specific items. 
* Added option to automatically delete physics bodies with no corresponding bone when opening physics bodies in PhAT.
* Content Cooking & Project Packaging from the Editor's File menu now works; there are still some issues with plug-ins 
* 'Open Project' tools are now hidden when creating new project.
* Centered "Nothing to show; check your filter" text in _Content Browser_.
* _Cube Texture_ thumbnails are now draw with 2:1 aspect ratio.
* Project file generator improvements.
	* Generated projects now include .uproject files, .uplugin files and plugin resource files.
* Allow the Play In Window mode to take mouse control on start up.
* Change PIE viewports to only surrender mouse control when the user explicitly returns it to the editor, so that using an in-game console won't cause the viewport to lose control.
* Correctly disambiguate right & left shift so that right-shift doesn't get stuck in the down position.
* Prevent infinite recursion in some Content Browser actions by preventing the task pop-up progress dialog from stealing keyboard focus.
* In Matinee give the "Editing Crosshair" menu option a permanently visible tick-box.


#### Blueprints
* **MakeArray** nodes can now be placed in front of any node, not just impure function calls. 
* Added support for `FName` _Blueprint_ spawn parameters.
* The search filter box is now cleared after making a selection to add a new component in **Components** mode within the **Blueprint Editor**.
* Removed the search bar and property grid button from the Details tab when variables are selected in **Graph** mode within the **Blueprint Editor**.
* Child _Blueprint_ Component variable names can no longer collide with _Component_ variable names in the parent _Blueprint_.
* **BeginPlay**, and the _Blueprint_ version **ReceiveBeginPlay** should now be called _after_ the initial replicated properties are received on clients, for dynamically spawned actors.
* Converting selected actors to _Blueprint_ will only use the selected actors and not all attached actors for the _Blueprint_.
* Promote to variable in drag context menu new automatically edits the now variables' name in the _Blueprint_ pane.


#### Gameplay and Framework
* `TObjectIterator` is now much faster as it only iterates over objects of the given class and derived classes.
	* You can now also only iterate over objects explicitly of the specified class, excluding derived classes. See `TObjectIterator`'s constructor.
* Modified localization word count report generation commandlet so that it can properly handle windows format new line characters.
* Minor optimization to get more efficient clears on some hardware.
* Added scalability to `SynthBenchmark` (run it faster but less precise when needed), added debugoutput to judge quality better.
* `Enable`/`DisableInput` can now be called on Pawn, PlayerController, and LevelScriptActor.
* **Collision** 
	* CollisionProfile `ObjectTypeName` allows `DisplayName` of the channel, not code defined channel (i.e. `ECC_GameTraceChannel1`).
	* UI improvement: Split trace type vs object type, Renamed Collision Profile to be Collision Preset. 
	* Get Hit Result Under Cursor also supports trace type and object type.
	* Added tool tip support for collision profile. Use HelpMessage.  
* Actor names are now limited to `NAME_SIZE` in length.
* Preloaded compilation audio assets to prevent them loading on the fly.
* Prevented message log from showing until a level editor-based mainframe is displayed.
* Prevented crash because of concurrent access to debug draw delegates array.
* Auto find selection improved.
* `GetTextSize` now const - so it no longer needs execution running through it.
* Warning added when loading assets with FText properties that lack a key.
* **Unreal Front Launcher**
	* This is a WIP feature.  The launcher has been re-enabled in this QA build and utilizes Unreal Automation Tool to build, cook, and launch games.  Not all of the features have been implemented, but it has been tested with most Windows configurations as well as building and packaging iOS ipas.
* **Dedicated server optimizations**
	* Disallow spawning Actors with `NeedsLoadForClient/Server == false` in those contexts. 
	* Add `bAllowTickOnDedicatedServer` to `FTickFunction`.
	* ParticleSystemComponents no longer register ticks on DS, and skip `PSC.ActivateSystem`. 
	* Add `bAllowReceiveTickEventOnDedicatedServer` to `AActor`, to disable all Blueprint ticking on DS if desired.
* Vehicle improvements


#### Rendering
* Shadow casting is now per-material for _Skeletal Meshes_ (was previously per LoD).
* Improved normal to roughness composite texture feature. This helps with specular aliasing.
* **Mobile**
	* Improved HDR encoding for cubemaps. 


#### Audio
* Creating SoundCues from SoundWaves will create the SoundCue with a unique and valid name.


#### Core
* Refactoring the Slate module to no longer be dependent on `EditorStyle`.
	* Renamed `SlateStyle` to `EditorStyle`
	* Large refactor of the style system to be less dependent on statics. Introduced a new asset type, Slate Widget Style, that can be used to drive a widgets styling through content.
	* Removing the factories for the old button and checkbox style assets so people stop creating new ones (will be DEPRECATED soon)
* Updated core slate widgets to use a new `SLATE_TEXT_ARGUMENT` or `SLATE_TEXT_ATTRIBUTE` macro when defining their display text variables. This allows users to pass either FStrings or FText for values. This is an attempt to do a multi-step conversion of the slate widgets over to supporting entirely FText. First well be able to remove many .ToString() for FText which are currently being passed. Then we can remove support for ANSI* and TCHAR*, then once a sufficient number of places are switched to using FText we can invert the macro logic to convert FStrings into FText, instead of FText into FStrings, at which point we can convert the core widgets to use FText internally and finally phase out FString support entirely.
	* Removed Support for `ANSI*` and `TCHAR*` in core Slate widget text fields.
* Various improvements and fixes to UnrealAutomationTool & UnrealBuildTool build infrastructure.
* Adding code to a non-code project now updates the uproject file accordingly.
* Guard against grid panel with no rows or columns.
* TabManager no longer holds references to objects that have been unloaded.
* Uppercase article words in properties are now forced to lowercase.
* Cleanup unapproved usage of FindText.
* Text elements no longer have double spaced newlines.
* Toolbar Click to Expand Toolbar now appears localized.
* Material Editor expression categories are now localized.
* Improved consistency with Reflections naming convention.
* Improved consistency with Buffer Visualization naming convention.
* Toggling Sounds sprites no longer toggles light sprites.
* Added UDoubleProperty for UObject properties of type double.
* Added `FText::AsMemory()` to format byte sizes to human readable strings.
* UHT can now process empty header files without producing errors.


#### Platforms
* Added static lib support to the Android toolchain.
* **Mac** 
	* Porting the engine and the editor to Mac.
	* Use a vertex buffer and Vertex Texture Fetch rather than a large uniform buffer for skeletal mesh bone matrices to avoid a software fallback on Intel HD 4000 cards under Mac OS X.
	* The buffer always exists and is bound and is at least size of(FVector4) to ensure correct cross-platform behaviour.
	* The OpenGL ES2 renderer still uses uniform buffers.
	* On Mac OS X, always manually update the mouse cursor position during high-precision mouse operations to ensure that editor tools work.
	* Added Forsyth Xcode project & libraries for Mac OS X.






	