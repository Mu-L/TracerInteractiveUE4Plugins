INTSourceChangelist:0
Title: 2013年10月份版本信息
Crumbs:%ROOT%, Support/Builds
Description:
Availability:Licensee

[TOC(start:2 end:2)]

## Build Info


[REGION:simpletable]
| Item | Info |
| ---- | ---- |
| **Label** | QA_APPROVED_UE4_BUILD_2013_10 |
| **Changelist #** | 1897729 |
| **VISUAL STUDIO VERSION** | Microsoft Visual Studio 2012 Version 11.0.60610.01 Update 3 |
| **DIRECTX** | June 2010 |
[/REGION]

## Important information

 * Current Engine Development Roadmaps: [UE4 Roadmaps](https://udn.unrealengine.com/questions/topics/roadmap.html)
 * Fixed Bugs: [UE4 Fixed Bugs October 2013](UE4_Fixed_2013_October.xlsx)
 * Known Issues: [UE4 Outstanding Bugs October 2013](UE4_Bugs_2013_October.xlsx)
 

## Major New Features

####Editor and Tools
* **New Landscape Editor**
	* The **Landscape Editor** UI has recently been completely rebuilt, with a number of improvements:

		![](LandScapeEditor01.png)

	* Tools are now divided between three distinct modes, based on use.
		* **Manage** mode contains **New Landscape**, **Component** and **Spline** tools.
		* **Sculpt** mode contains all the sculpting (heightmap) tools, along with region selection and copy/paste.
		* **Paint** mode contains the painting (weightmap) tools.
	* The UI is much more compact, gone is the window-filling tool selector in favor of a simple dropdown selector.
	* The Landscape editor is now based on a details panel. This makes it consistent with the rest of the editor, and adds new features such as an adjustable splitter between settings' names and their values.
	* Sculpting is now done with a tool called **Sculpt**, rather than _Paint_.	 

		![](LandScapeEditor02.png)

	* The target layer selector is now only visible when in layer painting mode and it now uses the same dropdown asset selector as from other parts of the editor.		

		![](LandScapeEditor03.png)

	* The **New Landscape** window has been improved, and now allows you to set the **Landscape** _Material_ and layer info's in **New** mode, as well as **Import** mode. 
	
		It will also remember your last chosen landscape material!
			
	* The _Material_ selector now shows a thumbnail and uses the asset selector seen in other parts of the editor.
	* The layer info list has been improved to match the target layers list, and also uses the new dropdown asset selector and styling.

		![](LandScapeEditor004.png)

	* The **Landscape** view modes have moved out of the landscape editor, and are now available via the viewport viewmode dropdown instead.

* **Viewport Layouts**
	* The level viewports now support different layouts, accessible in the main menu of each viewport. 
		
		![](ViewportLayouts.png)

	* Selecting a layout changes the viewport arrangement in the current tab. The current active layout is highlighted in orange.
	* Layouts are also available as commands in the **Keyboard Shortcuts** window under **Level Viewports**.
	* When switching layouts using the keyboard, the command will affect the tab of the viewport with keyboard input focus. If a viewport doesn't have focus it won't do anything.

* **New Preference: Show Frame Rate and Memory**
	* A new editor preference has been added that toggles the frame rate display in the main editor UI.
	* This is under: **Editor Preferences > Developer Tools > Show Frame Rate and Memory** (defaults to on)

		![](ShowFrameRateandMemory01.png)

	* Toggles this:		

		![](ShowFrameRateandMemory02.png)

	* To this:	
		
		![](ShowFrameRateandMemory03.png)

* **Subversion Source Control Support**
	* Support for Subversion has been added to UE4 as a Source Control option!
	* To enable it, click on the **Source Control** indicator in the top-right corner of the editor:

		![](Subversion01.png)

	* Select Subversion from the Provider menu:

		![](Subversion002.png)

	* And enter your login information:

		![](Subversion03.png)

	* Your password will be stored securely outside of the Editor by Subversion.
	* Subversion support in UE4 uses much the same workflow as Perforce. Slight differences are:
		* As all assets are Binary, they are locked when _checking out_ (Subversion doesn't really have a concept of _checking out_ built-in).
		* Files are not marked as read-only on disk.
		* A _working copy_ of a Subversion repository should be in place before you start working with Subversion in UE4. Currently we don't set this up in-editor, so it has to be done via some other 3rd party tool (such as TortoiseSVN).
	* For more information, consult the Subversion documentation, which can be found on the web at http://subversion.apache.org/docs/ .


#### Blueprints
* **Editing Variable Default Values in the Details Panel**
	* Users can now edit default values for variables in the **Details** panel of the Graph mode; the same place where other variable properties are edited.
	
		Either select a variable get/set node in the graph:

		![](EditingVariableDefaultValues01.png)		
		Or select the variable in the **My Blueprint** list:	

		![](EditingVariableDefaultValues02.png)

* **Wildcards in Blueprint Macros and the ForEach Node**
	* When editing the inputs and outputs of a macro, users will now have the option to create a _wildcard_ pin (or a _wildcard array_ pin).  
		
		This is a gray pin that will automatically convert to the type you connect to it.

		![](WildcardBlueprint01.png)	
	
	* Previously, this feature was used to add the **ForEachLoop** and **ForEachLoopWithBreak** nodes to the **StandardMacros** library.	
	
		[REGION:caption]
		**Before**
		[/REGION]
		![](WildcardBlueprint02.png) 
		[REGION:caption]
		**After**
		[/REGION]
		![](WildcardBlueprint03.png)

* **Blueprint Editor UI Updates**
	* The **[ROOT]** entry has now been consolidated into the actual scene root component node in **Components** mode.	 
	Tooltips have also been updated during drag-and-drop to be a little more descriptive.

		![](BlueprintEditorUpdates01.png)

	* Object type description have been removed from the **Details** tab in **Components** and **Graph** modes. 
	* The **Search** box is now hidden for variable selections in **Graph** mode.	 

		![](BlueprintEditorUpdates02.png)

	* The **Add Component** drop-down filter text in **Components** mode is now cleared after making a selection, so that the next time the drop-down is opened the full list is once again visible.

* **"Web Browser" Navigation in the Blueprint Editor**
	* Instead of opening each new graph in a new tab, they now open in the last tab a user had focus on and navigates to the new graph like a link in a web browser does.	
		
		![](WebBrowserNav01.png) 

	* **Simple History Navigation**
		* You can navigate using the buttons in the upper left or your mouse (buttons **4** and **5**, same as a web browser). 
		* Your place and zoom in a graph will always be preserved when navigating, making it easy to jump back and forward.
	* **Full History Navigation**
		* **Right-click** on the back or forward button to view a list of the tab history, so you can jump to any point in it at your whim.
		
			![](WebBrowserNav02.png)

	* **Opening New Tabs**
		* Finally, to open a new tab, you can press **Ctrl + Double-click** a graph to open it in a new tab. 
		* With this feature, you can also open the same graph in two separate tabs and pan around and navigate them separately. 


#### Rendering
* **Oculus Rift Support in UE4**
	* UE4 now supports the Oculus Rift!  
	* To use it, simply plug in your Rift, and launch the game.  
	
		The Rift should be detected automatically, and you'll see the game rendered in stereoscopic, with the lens distortions enabled:
		
		![](OculusSupportUE4_01.png)

	* When enabled, the player camera's rotation will be locked to the orientation of the Rift. It is suggested to leave this setting **locked**.
	* The only tested VR experience currently in main is the **ElementalVR** sample project.  This is the demo that we showed at GDC, and is tuned to hit 60 FPS. Recommended as a user's first VR experience !
	* Notes for the best experience:
		* If your card is running the demo at a solid 60FPS, it is suggested to **turn on vsync**.  This is especially true if you use the HD kit, as the screen orientation makes tearing very noticeable!
		* **Turn off frame buffering**.  This option is available in the nVidia control panel.  Set this to 1 to decrease the latency of the device.

			![](OculusSupportUE4_02.png)

	* A few in-progress items that are worth mentioning:
		* **Automatic full screen detection**:  Currently, if the Rift is not your primary monitor, you have to move the window manually to the Rift, and then toggle fullscreen in the console (type "fullscreen").
		* **Some rendering features are not compatible with stereoscopic rendering**:  Currently, Environmental Reflections are not compatible with stereoscopic rendering, but there may be other features that fail to render as well!  If the right eye appears as a black square, then you've probably found an incompatible feature.  
		* **Improved latency**:  We currently do a dual update, once on the game thread, and once again immediately before rendering, to orient the camera position to the Rift's current orientation, but there's still some optimizations that can be done.  The interface that the Rift plugin uses for last-minute updating on the render thread can also be used generically, so if games want to decrease their apparent latency even without the Rift, they can potentially do another input read and adjustment using the same interface.

* **Screen Space Light Shafts for PC and Console**
	* There are two different light shaft features � a **fog-occluding method** and an **additive/bloom method**. These cost separately, so it's best to only enable the one you want.
	* **Occlusion**
		* The occlusion method creates a mask from the depths of the objects on the screen, blurs it away from the light, and uses it to mask fog and atmosphere.  
		* The sun can be slightly off the screen and still get occlusion light shafts, however they currently fade out as you approach a 90 degree angle from the sun.  Only _Directional Lights_ can use the occlusion method.

			![](Occlusion.png)

	* **Bloom**
		* The bloom method captures the scene's color (including translucency and fog inscattering) right around the light source in world space, and blurs it radially away from the light.  
		* Light shaft bloom can be enabled on any type of _Light_ (_Point_, _Spot_, and _Directional_), however it can be tricky to get it to work on point and _Spot Lights_.  It only picks up color to bloom from opaque surfaces that are bright and near the light source.

			![](Bloom.png)

* **Mobile Rendering: Distance Field Shadows**
	* The sun's lighting is now computed per-pixel with distance field shadows.	 
	
		![](DistanceFieldShadows01.png)	![](DistanceFieldShadows02.png)

* **Lightmass Quality Improvements**
	* Adaptive sampling is now used to increase quality without a large increase in build time.
	* Artists may now balance quality vs. build time by changing the **Indirect Lighting Quality** setting!  
	
		[REGION:imagetable]
		| ![](LightmassQuality01.png) | ![](LightmassQuality02.png) |
		| --- | --- |
		| Before Improvements | After Improvements |
		[/REGION]

#### Animation

* **AnimNotifyState Notification**
	* Similar to AnimNotifyEvents except this one defines a range of time, i.e. it has a duration. It triggers NotifyBegin, NotityTick, NotifyEnd in the AnimNotifyClass blueprint.

		![](AnimNotifyState01.png)

	* Events will be dispatched as the animation is ticked.
		
		![](AnimNotifyState02.png)(convert:false)


## New Additions

#### Editor and Tools
* **Open Project** now uses **Project Browser**.
* Implemented packaging of code-based and non-code game projects (**Main Menu > File > Package Project**).
* Editor child windows are now listed in the Windows task bar and can be minimized.
* **New Landscape Editor UI**
* Can now assign a static mesh to a _Landscape_ spline control point, using its sockets as connection points.
* Implemented _Slate_ based loading screens.
* Implemented color blindness filters in the editor for usability testing.
* Added new preference to toggle frame rate and memory display in the editor UI HUD. 
	* **Editor Preference > Developer Tools > Show Frame Rate and Memory** (defaults to on). 
* **Viewport Layouts**
	* New layouts with two, three and four viewport panes in addition to the existing four pane, 2x2 layout.
	* Level viewports now support different layouts, accessible in the main menu of each viewport.
	* Selecting a layout changes the viewport arrangement in the current tab.
	* Layouts are also entered as commands in the **Keyboard Shortcuts** window under Level Viewports.
* New triangle order optimization algorithm (Forsyth) for improved speeds when importing dense static meshes.
	* NVTriStrip can still be used by setting the console variable `r.TriangleOrderOptimization` to `0`.
* Added ability to import new LODs or replace existing LODs into StaticMeshes.
* **Profiler**
	* Improved event graph (added options to choose between Average and Maximum event graph).
	* Added functionality to drag and drop ue4stats file from the explorer into the profiler.
	* Improved profiler performance (mostly related to faster loading times of the captured stat files).


#### Blueprints
* Added editing of variable defaults in the **Details** panel when the variable is selected in the **My Blueprint** panel or a Get/Set node targeting it is selected. 
* The IES profile texture for a light can now be set in a blueprint.
* Added the mode/snap viewport widget into the Blueprint preview viewport in the **Blueprint Editor**.
* Variables created in **Components** mode can now be assigned to a category in **Graph** mode within the **Blueprint Editor**.
* Added variable name, tooltip and category editing features to the **Components** mode **Details** tab within the **Blueprint Editor**. Also restored variable name editing to the **Details** tab in **Graph** mode.
* _Macros_ in _Blueprints_ can now take wildcard parameter types.  Any number of pins can be wildcards, but the current limitation is one wildcard type per _Macro_ instance.
* **For Each Loop** node in the StandardMacros library to simplify array iteration in _Blueprints_.
* Added **Received Destroyed** event for all _Blueprinted_ actors.
* **Blueprint Editor** now supports a web-browser like experience.
	* Navigate back, show all history, re-using tabs to open graphs.
* Added ability to re-order variables/categories in **My Blueprint** tab using drag and drop.
* Added **Get All Actors With Interface**.


#### Gameplay and Framework
* **Oculus Rift Support**  
	* This build includes preliminary support for Oculus Rift hardware on supported platforms. If a device is plugged in on engine startup, the plugin should detect it, and enable stereoscopic rendering, HMD distortion, and read sensor data.  Note that this is in-development feature, so features like proper monitor detection are still being worked on.
* `r.MaterialQualityLevel` can now be changed at runtime (easier art iteration when using material expression **QualitySwitch**). 
* Added optimization for Gaussian blurring postprocessing passes using half res intermediate, can be adjusted with `r.FastBlurThreshold`, by default only used with larger blooms.
* Added `ApplyRadialDamageWithFalloff()` function to `GameplayStatics`, with arguments for inner and outer radius, falloff exponent, and minimum damage.
* Subversion support added.
* Source control is now managed via plugins.
* Combo boxes (and their contents) can now be controlled via the keyboard.
* Increased camera component's maximum aspect ratio from 10 to 100.
* Added **Render in main pass** option to primitives.
	* This can prevent primitives from drawing in the main scene but still drawn in other passes (such as custom depth pass).
* Added HDR exporting to texture cube assets.
* Renamed `FQuat::Vector()` to `FQuat::GetRotationAxis()`, to not be confused with `FRotator::Vector()` which returns the direction vector. 
* Added **AnimNotifyState**. Unlike AnimNotifyEvents, this one defines a range of time, it has a duration. It triggers NotifyBegin, NotityTick, NotifyEnd in the AnimNotifyClass blueprint. 
* Improved AnimNotify drawing in editor. Highlight active Notify.  
* Improved log warning if AnimMontage can't be played on current Skeleton. 
* `FText` number/percent/currency formatting now offer improved formatting control over places and signage.
* **PhAT** - Copy convex from selected static mesh to selected body.


#### Rendering
* Tube lights exposed. Use the **SourceLength** property on lights. 
* Added fine film grain to post processing for PC. 
* **Lightmass quality improvements**
	* Significant quality improvement from using a new adaptive GI solver.
	* Can selectively increase solver quality in levels that need it with **IndirectLightingQuality** in **WorldSettings**.
	* Reduced dark texel artifacts where objects intersect.
* **Rendering thread optimizations targeted around many moving objects**
	* Overall RT time in a test scene with 1400 moving objects was reduced by ~40%
* **Screen space light shafts**
	* Uses Temporal AA for stability.
	* Two separate features: more realistic fog occluding method and more controllable bloom / additive method.
* **Mobile**
	* Added distance field shadows.
* Added **Min** and **Max** material expressions to the "Math" category.


#### Platforms
* PC now use the same cached texture streaming as consoles (texture pool with prioritized caching heuristics). Default pool size is `50%` of VRAM, but can be changed at any time.
* Deployment to Linux machine is supported in **Unreal Automation Tool** (UAT).
* **IOS**
	* Added support for IPhone5S (including 64-bit via fat binary), and some IOS7 fixes
* **Mac**
	* Added support for **Unreal Automation Tool** (RunUAT.command)
* Added Facebook IOS support to the engine.
* Added an online sharing interface for OSS to use for sharing status updates etc.
* Adding Facebook IOS SDK to Third Party source.


## Upgrade Notes

#### Editor and Tools
* **Landscape**
	* Merged heightmap normal to weightmap, to save texture sampler.
* **Edit properties** command for a streaming level now shows ULevelStreaming object properties instead of AWorldSettings properties.
* Can now delete assets in the **Content Browser** using the **Delete** key.
* **Content Browser** now displays message _"Nothing to show; check your filter"_ message when the asset view has no items to show.
* **Content Browser** thumbnail scaling now disabled when in columns view.
* Texture import notification now fades off immediately after clicking OK or Revert buttons.
* Moved the bookmark menu entries into a single **Active Bookmark** category.
* Materials no longer generate code for properties that have been disabled (i.e. opacity properties when the _Material_ is opaque).
	* Previously it would have been possible to have expressions attached to disabled properties which would generate code that could be sneakily used in some way by the shader. This will no longer work and will need fixed up.
* Changed actor animation detail panel building to allow property visibility to be control with delegates. This fixes an issue where dragging an animation onto an actor caused the panel to be left in an inconsistent state.
* Corrected tooltip for **Create Dynamic Material** _Blueprint_ node.
* Changed behavior of viewport creation so that **Enable**/**Disable** of realtime during **Play In Editor** is honored.
* Added extra text and tool tip to asset display to the **Skeleton Tree** in Persona signifying that it is _Preview Only_
* Deleting the original function output no longer causes an error to be displayed. 
* Localized the Viewport Visualize Buffer menu options.
* Localized the Import FBX options window header and menu.
* Localized the Viewport Show menu options.
* Localized the Splash screen version and loading information.
* Localized the SoundCue editor menu options.
* Localized Blueprint Editing Defaults.
* Localized Editor Settings Keybinding override notification.
* Localized PhAT Editor Animation toolbar text.
* Localized Viewport: Preview: Recent section header.
* Localized the Matinee Group context menu Rename Group.
* Integrated Forsyth triangle order optimization algorithm (as third party library) into mesh import pipeline.


#### Blueprints
* **Acceleration** property of _CharacterMovementComponent_ has been made protected, and is accessible in _Blueprints_ only by `GetCurrentAcceleration()`.
	* Blueprints that were moving by modifying **Acceleration** should be converted to use the **InputVector** instead.
* Added analytics to track project resource statistics for number of source files, modules, Object Classes, Blueprint Classes, Asset Packages, Maps and the instance counts of objects per class type.
* Added functionality in the **Blueprint Editor** to add events for _Components_ from the **Details** panel and the **Components** context menu.
* Changed all super call reference in the _Blueprints_ to be _Parent_ instead of _Super_ in both code and user facing naming.
* Replaced the map check icon so it is more readily distinguishable as the map check function rather than just a tick box.
* Added analytic that records project usage.
* Added missing icon display in the _Blueprint_ context menu for the call function on _foo_ entries.
* Blueprint array **RemoveItem** function now removes all instances, to match TArray behavior.


#### Gameplay and Framework
* `UGameEngine::UserSettings` renamed GameUserSettings and moved to UEngine.
* `UEditorEngine::UserSettings` renamed EditorUserSettings.
* Move `PreInitializeComponents` to be in `PostActorConstruction` so that order is consistent for spawned and loaded actors. 
* Rename `AActor::Spawned` to `AActor::PostActorCreated`. 
* Move `AActor::PostActorCreated` to occur before `OnConstruction` to be analogous to `PostLoad` for spawned actors.
* The `GameMode` pointer in UWorld is now private. Use GetAuthGameMode() accessors.
* **Vehicle classes renamed**:
	
	[REGION:simpletable]
	| Old | New |
	| --- | --- |
	| Vehicle | WheeledVehicle |
	| VehicleMovementComponent | WheeledVehicleMovementComponent |
	| VehicleMovementComponent4W | WheeledVehicleMovementComponent4W |
	[/REGION]

* _NoDrive_ vehicle model support removed. 
* Change up-axis from **Y-up** to **Z-up** automatically on the APEX Clothing asset which has Y-up axis.
* Message formatting pattern strings now use \` instead of ' to escape.
	* If a message formatting pattern string uses { or }, wrap the { and } between \`s - individually or collectively both work.
	* Use double \` (\`\`) to print a \` without escaping a { or } after it.
* Disabled motion blur while performing high res screenshot pass. 
* `LoadPackageAsync` now accepts a delegate instead of pointer to a function.


#### Core
* Various types named "Arithmatic" were renamed to "Numeric"
* The custom versioning scheme which was added to allow branches to define their own entries in archives has been changed from being enum-based to GUID-based.
	* Previously, enums were used to identify a custom version.  These were placed in `EUnrealEngineObjectCustomTag` in `ObjectVersion.h`.
	* Now a custom version is identified by a GUID.
	* Existing packages containing enum-based custom versions are backward compatible with a GUID of `00000000-00000000-00000000-<enum value>`, so a GUID of this value should be used to load these packages.
	* Any `FCustomVersionRegistration` variables should be defined with a GUID instead of an enum and a string which describes what the custom version is for, so this:
		
			FCustomVersionRegistration GMyModule((EUnrealEngineObjectCustomTag::Type)0x12345678, MyLatestVersion);

		would become:

			FCustomVersionRegistration GMyModule(FGuid(0, 0, 0, 0x12345678), MyLatestVersion, TEXT("My module"));
 
* The computed `TangentToWorld` in `FMaterialVertexParameters` now removes scaling and matches `TangentToWorld` passed to the pixel shader. 
* UnrealBuildTool (and the Engine in modular builds) will now use `*.uprojectdirs` files in the root to indicate the folders it should search 1 level deep for `uproject` files. 
	* This feature can be disabled in UnrealBuildTool by simply setting `bUseUProjectDirs` to false. 


#### Platforms
* Eliminated Uncooked UE4 and game binaries. 
	* You now always run `UE4Editor.exe` to test uncooked games, or to execute commandlets. 
	* The Uncooked option no longer exists in generated project files. Use the Editor instead. 
	* Pass the `-game` option on the command-line of the editor to run the game instead. 
	* Or, you can run the game from the editor using **Play in Standalone** Process. 
	
		[REGION:note]
		Existing projects should delete their Uncooked target. GameUncooked is no longer a valid TargetType. For now, UnrealBuildTool will automatically SKIP these files.
		[/REGION]

* Updated a number of `*.mm` files to `*.cpp`
 

#### Networking
* Added default map / game info ini options for dedicated servers. 
* Allows dedicated servers to launch with less commandline parameters. 
* Removed StartupMap concept as DefaultMap is functionally the same.


#### Online
* Consistent `IsEnabled()` functions across all online subsystems.
* Added `LogOnlineGame` and `LogBeacon` as new possible log options.   
* Renamed `IsRunningServer` to `IsRunningDedicatedServer` for clarity.
* Renamed `JoinFriendSession` to `FindFriendSession` to be more clear about its purpose. 
	* `FindFriendSession` only returns a single search result for where the friend is. 
	* `JoinSession` must still be called afterward with the result to complete the flow.
* Added a Facebook Identity for IOS
* Added Facebook Friends access for IOS. Uses the OnlineSubsystem Sharing interface to request permissions.
* Added the initial implementation of `OnlineSubsystem::GetUserInterface` which hosts data about an OSS user.
* Updated the OnlineSubsystem Facebook so that IOS and windows builds could live side by side.
* Moved MCP configuration of service keys and permissions to NoRedist source files instead of config files
      * Still maintained the `DefaultEngine.ini` method of getting these values for development convenience
      * Games can override configurations using a callback delegate
* Http
	* Exposed http module timeouts for wininet:
		* HttpConnectionTimeout=60 
		* HttpReceiveTimeout=30 
		* HttpSendTimeout=30
	* Request will fail faster instead of waiting for the timeout


## Future Additions and Ongoing Efforts

#### Editor and Tools
* **World Browser**
	* Changed blank persistent level from a runtime package to an actual package on a disk. **Open World** command now requires a map file instead of folder. 
	* **Right-click** now properly selects hovered tiles.
* View mode names displayed in active viewport are now the same as the menu listing.
* Disabled the menu option to make a level the current level when it is locked.
* The same icon is now used for "data only" and regular _Blueprints_, only the color differs to distinguish between them.
* The scene texture node now has an optional clamp of it's UV to the viewport size.
* Editor no longer crashes when dragging asset into newly created collection.
* Prevent crash if user exits game the same frame it begin it.
* Added missing tooltips to _Matinee_ actions.
* Editor no longer crashes if **Content Browser** asset is selected when creating a new _Matinee_.
* **Placement Browser** - Collections view no longer tries to create an entry with invalid parameters.
* **Content Browser** now uses icons instead of text to denote collection type.
* **Matinee** dropdown now has an option for **Add Matinee**.
* No longer a warning when right-clicking or creating a new collection when source control is disconnected.
* Zoom and _Blueprint_ headings are now localized (where possible).
* **Blueprint Editor**/**Persona** mode headings now appear localized.
* Dropdown **Add Float Track** now appears localized.
* BSP Pan now appears localized.
* _Matinee Actor_ details section now appears below **Transform**.
* Duplicate, via **Ctrl + W**, only requires 1 undo step again.
* _SoundCue_ and _SoundWave_ no longer play when double clicked, instead opens **SoundCue Editor**.
* _DecalActors_ marked as **Hidden In Game** will now draw properly in the editor.
* Optimizations for Gaussian DOF effect. If **Near Blur Size** is less than the threshold defined by the console variable `r.DepthOfFieldNearBlurSizeThreshold`, the near blur effect will be disabled and cheaper shaders used instead.
* Buffer visualization system now works correctly in orthographic view modes.
* New _Landscape_ doesn't try to resize during alt-drag view rotation any more.
* Optimized _Landscape_ spline rendering in editor by reducing complexity of the lines and optimizing `DrawDashedLine()`.
* General  UI Improvements:
	* Added new additional ViewMode icons at 40x pixels PNG only.
	* Created new Icons added for Local, Shared & Private - will require hookup.
	* Created new Profiler Icons and  Added to the build - Wired up.
	* Updated Icon - Colorblind Solution Should automatically work  Red - No Go sign - non-destructive PNG replace.
	* Adjust existing Content Browsers folder icons to lighten them. requires code to tint default icons back to look of previous versions. 
	* Revised existing icons & created new icons for translation toolbar options. PNG assets replaced, new translation icons require code hook-up. 
	* Created new icons for both the main Add Event Caller blueprint button (40x size) and the context menu (16x size). 
	* Created a new icon for Import FBX Chunks @ 40x. Requires code to hook-up in edior. Change is PNG asset only. 
	* Created new icons for 'Standalone Game at Camera Location' & 'Standalone Game at Player Start', at both 16x & 40x resolutions. PNG assets only, require code to hook-up. 
	* Created new icons for Enum, Bluprint Delegate (16 & 24x), and Delegate Pins connected & disconnected. PNG assets only, replaces existing PNG files. 
* New engine analytics - Editor tracks source control provider changes.
* Viewport toolbar buttons now act like regular toolbar buttons and close any open menus when clicked.
* Added branching support for the EpicSurvey plugin.
* Changed EpicSurvey notification mechanics to display a toast when a new survey is available, and added definable time delays and duration for the notification icon.
* Deselecting package when using **Save All** in the Editor now remembers you ignored it for the lifetime of the application.
* Added a new editor setting to separate the middle-mouse scroll speed when using it to zoom in the viewport.
* The **Content Browser**'s search box now includes all the contents of successful search results, allowing a user to search for an entire folder rather than specific items. 
* Added option to automatically delete physics bodies with no corresponding bone when opening physics bodies in PhAT.
* Content Cooking & Project Packaging from the Editor's File menu now works; there are still some issues with plug-ins 
* 'Open Project' tools are now hidden when creating new project.
* Centered "Nothing to show; check your filter" text in _Content Browser_.
* _Cube Texture_ thumbnails are now draw with 2:1 aspect ratio.
* Project file generator improvements.
	* Generated projects now include .uproject files, .uplugin files and plugin resource files.
* Allow the Play In Window mode to take mouse control on start up.
* Change PIE viewports to only surrender mouse control when the user explicitly returns it to the editor, so that using an in-game console won't cause the viewport to lose control.
* Correctly disambiguate right & left shift so that right-shift doesn't get stuck in the down position.
* Prevent infinite recursion in some Content Browser actions by preventing the task pop-up progress dialog from stealing keyboard focus.
* In Matinee give the "Editing Crosshair" menu option a permanently visible tick-box.


#### Blueprints
* **MakeArray** nodes can now be placed in front of any node, not just impure function calls. 
* Added support for `FName` _Blueprint_ spawn parameters.
* The search filter box is now cleared after making a selection to add a new component in **Components** mode within the **Blueprint Editor**.
* Removed the search bar and property grid button from the Details tab when variables are selected in **Graph** mode within the **Blueprint Editor**.
* Child _Blueprint_ Component variable names can no longer collide with _Component_ variable names in the parent _Blueprint_.
* **BeginPlay**, and the _Blueprint_ version **ReceiveBeginPlay** should now be called _after_ the initial replicated properties are received on clients, for dynamically spawned actors.
* Converting selected actors to _Blueprint_ will only use the selected actors and not all attached actors for the _Blueprint_.
* Promote to variable in drag context menu new automatically edits the now variables' name in the _Blueprint_ pane.


#### Gameplay and Framework
* `TObjectIterator` is now much faster as it only iterates over objects of the given class and derived classes.
	* You can now also only iterate over objects explicitly of the specified class, excluding derived classes. See `TObjectIterator`'s constructor.
* Modified localization word count report generation commandlet so that it can properly handle windows format new line characters.
* Minor optimization to get more efficient clears on some hardware.
* Added scalability to `SynthBenchmark` (run it faster but less precise when needed), added debugoutput to judge quality better.
* `Enable`/`DisableInput` can now be called on Pawn, PlayerController, and LevelScriptActor.
* **Collision** 
	* CollisionProfile `ObjectTypeName` allows `DisplayName` of the channel, not code defined channel (i.e. `ECC_GameTraceChannel1`).
	* UI improvement: Split trace type vs object type, Renamed Collision Profile to be Collision Preset. 
	* Get Hit Result Under Cursor also supports trace type and object type.
	* Added tool tip support for collision profile. Use HelpMessage.  
* Actor names are now limited to `NAME_SIZE` in length.
* Preloaded compilation audio assets to prevent them loading on the fly.
* Prevented message log from showing until a level editor-based mainframe is displayed.
* Prevented crash because of concurrent access to debug draw delegates array.
* Auto find selection improved.
* `GetTextSize` now const - so it no longer needs execution running through it.
* Warning added when loading assets with FText properties that lack a key.
* **Unreal Front Launcher**
	* This is a WIP feature.  The launcher has been re-enabled in this QA build and utilizes Unreal Automation Tool to build, cook, and launch games.  Not all of the features have been implemented, but it has been tested with most Windows configurations as well as building and packaging iOS ipas.
* **Dedicated server optimizations**
	* Disallow spawning Actors with `NeedsLoadForClient/Server == false` in those contexts. 
	* Add `bAllowTickOnDedicatedServer` to `FTickFunction`.
	* ParticleSystemComponents no longer register ticks on DS, and skip `PSC.ActivateSystem`. 
	* Add `bAllowReceiveTickEventOnDedicatedServer` to `AActor`, to disable all Blueprint ticking on DS if desired.
* Vehicle improvements


#### Rendering
* Shadow casting is now per-material for _Skeletal Meshes_ (was previously per LoD).
* Improved normal to roughness composite texture feature. This helps with specular aliasing.
* **Mobile**
	* Improved HDR encoding for cubemaps. 


#### Audio
* Creating SoundCues from SoundWaves will create the SoundCue with a unique and valid name.


#### Core
* Refactoring the Slate module to no longer be dependent on `EditorStyle`.
	* Renamed `SlateStyle` to `EditorStyle`
	* Large refactor of the style system to be less dependent on statics. Introduced a new asset type, Slate Widget Style, that can be used to drive a widgets styling through content.
	* Removing the factories for the old button and checkbox style assets so people stop creating new ones (will be DEPRECATED soon)
* Updated core slate widgets to use a new `SLATE_TEXT_ARGUMENT` or `SLATE_TEXT_ATTRIBUTE` macro when defining their display text variables. This allows users to pass either FStrings or FText for values. This is an attempt to do a multi-step conversion of the slate widgets over to supporting entirely FText. First well be able to remove many .ToString() for FText which are currently being passed. Then we can remove support for ANSI* and TCHAR*, then once a sufficient number of places are switched to using FText we can invert the macro logic to convert FStrings into FText, instead of FText into FStrings, at which point we can convert the core widgets to use FText internally and finally phase out FString support entirely.
	* Removed Support for `ANSI*` and `TCHAR*` in core Slate widget text fields.
* Various improvements and fixes to UnrealAutomationTool & UnrealBuildTool build infrastructure.
* Adding code to a non-code project now updates the uproject file accordingly.
* Guard against grid panel with no rows or columns.
* TabManager no longer holds references to objects that have been unloaded.
* Uppercase article words in properties are now forced to lowercase.
* Cleanup unapproved usage of FindText.
* Text elements no longer have double spaced newlines.
* Toolbar Click to Expand Toolbar now appears localized.
* Material Editor expression categories are now localized.
* Improved consistency with Reflections naming convention.
* Improved consistency with Buffer Visualization naming convention.
* Toggling Sounds sprites no longer toggles light sprites.
* Added UDoubleProperty for UObject properties of type double.
* Added `FText::AsMemory()` to format byte sizes to human readable strings.
* UHT can now process empty header files without producing errors.


#### Platforms
* Added static lib support to the Android toolchain.
* **Mac** 
	* Porting the engine and the editor to Mac.
	* Use a vertex buffer and Vertex Texture Fetch rather than a large uniform buffer for skeletal mesh bone matrices to avoid a software fallback on Intel HD 4000 cards under Mac OS X.
	* The buffer always exists and is bound and is at least size of(FVector4) to ensure correct cross-platform behaviour.
	* The OpenGL ES2 renderer still uses uniform buffers.
	* On Mac OS X, always manually update the mouse cursor position during high-precision mouse operations to ensure that editor tools work.
	* Added Forsyth Xcode project & libraries for Mac OS X.






