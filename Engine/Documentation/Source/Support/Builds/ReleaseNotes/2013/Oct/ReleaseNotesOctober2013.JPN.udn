INTSourceChangelist:3367470
Title:2013年10月リリースノート
Crumbs:%ROOT%, Support/Builds
Description:
Availability:Licensee
Parent:Support/Builds
Order:-4

[TOC(start:2 end:2)]

## ビルド情報


[REGION:simpletable]
| アイテム | 情報 |
| ---- | ---- |
| **ラベル** | QA_APPROVED_UE4_BUILD_2013_10 |
| **チェンジリスト#** | 1897729 |
| **VISUAL STUDIO VERSION** | Microsoft Visual Studio 2012 バージョン 11.0.60610.01 Update 3 |
| **DIRECTX** | 2010年6月 |
[/REGION]

## 重要情報

 * 現時点のエンジン開発ロードマップ: [UE4 Roadmaps](https://udn.unrealengine.com/questions/topics/roadmap.html)
 * 修正されたバグ： [UE4 Fixed Bugs October 2013](UE4_Fixed_2013_October.xlsx)
 * 周知のバグ： [UE4 Outstanding Bugs October 2013](UE4_Bugs_2013_October.xlsx)
 

## 主要な新機能

#### エディタとツール
* **新しいランドスケープ エディタ**
	* **ランドスケープ エディタ** の UI は現在、いろいろな改善を反映させて全体を再ビルドしています。

		![](LandScapeEditor01.png)

	* 用途に合わせてツールを 3 つのモードに分類しました。
		* **Manage** モードには、**新規ランドスケープ**、**コンポーネント** 、**スプライン** ツールが含まれています。
		* **Sculpt** モードには、リージョンの選択およびコピーペーストに加えて全てのスカルプト (高さマップ) ツールが含まれています。
		* **Paint** モードにはペイント (ウェイト マップ) が含まれています。
	* ウィンドウ フィリング ツール セレクタを廃止し、シンプルなドロップダウン セレクタにしたため、UI がとてもコンパクトになりました。
	* ランドスケープ エディタを詳細パネルに基づくようにしました。その結果、エディタの残りの部分と整合が取れ、設定名と設定値の間の調整スプリッタなどの新機能が追加されます。
	* スカルプト処理は、 _ペイント_ ではなく **スカルプト** と呼ばれるツールで行うようになりました。	 

		![](LandScapeEditor02.png)

	* レイヤ セレクタは Layer Painting モード時には表示のみにで、エディタの他の部分からの場合と同様にドロップダウン アセット セレクタを使用するようになりました。		

		![](LandScapeEditor03.png)

	* **[New Landscape]** (新規ランドスケープ) ウィンドウが改善され、 **Import** モードと同様に **New** モードでも、 **Landscape** _マテリアル_ およびレイヤ情報リストの設定が可能になりました。 

		さらに、直近で選択したランドスケープ マテリアルも記憶しています！

	* _Material_ セレクタはサムネイルを表示し、エディタの他の部分で見られるアセット セレクタを使用するようになりました。
	* レイヤ情報リストはターゲット レイヤ リストと一致するように改善され、新しいドロップダウン アセット セレクタとスタイリングも使用しています。

		![](LandScapeEditor004.png)

	* **Landscape** View モードからランドスケープ エディタが排除され、代わりにビューポート ビューモード ドロップダウン経由での利用が可能になりました。

* **ビューポートのレイアウト**
	* レベル ビューポートが、各ビューポートのメインメニューから利用できる異なるレイアウトに対応するようになりました。 

		![](ViewportLayouts.png)

	* レイアウトを選択して、現在のタブ内のビューポートの配置を変更します。現在アクティブになっているレイアウトがオレンジ色で表示されます。
	* レイアウトは、 **レベル ビューポート** の **[Keyboard Shortcuts]** (キーボード ショートカット) ウィンドウのコマンドとしても利用できます。
	* キーボードでレイアウトを切り替える場合、キーボード入力フォーカスによりビューポートのタブがコマンドで切り替えられます。ビューポートがフォーカスを持たない場合、特に何も起こりません。

* **新しい環境設定：Show Frame Rate and Memory (フレームレートとメモリの表示)**
	* メイン エディタの UI にフレーム レートを切り替えるエディタ環境設定を追加しました。
	* 場所：**Editor Preferences > Developer Tools > Show Frame Rate and Memory** (デフォルトはオン)

		![](ShowFrameRateandMemory01.png)

	* 切り替え前のフレームレート：		

		![](ShowFrameRateandMemory02.png)

	* 目標のフレームレート：	

		![](ShowFrameRateandMemory03.png)

* **Subversion ソース コントロールのサポート**
	* UE4 に Source Control オプションとしてSubversion へのサポートを追加しました。
	* 有効にするには、エディタの右上隅の **ソース コントロール** インジケーターをクリックします。

		![](Subversion01.png)

	* [Provider] メニューから Subversion を選択します。

		![](Subversion002.png)

	* ログイン情報を入力します。

		![](Subversion03.png)

	* Subversion によりパスワードが安全にエディタ外に格納されるようになります。
	* UE4 における Subversion サポートのワークフローは、Perforce のワークフローとほぼ一緒です。それぞれの違いは以下の通りです。
		* アセットはすべて Binary なので、_チェックアウト_ (Subversion には _チェックアウト_ を内臓するというコンセプトはありません) 時にロックされます。
		* ファイルはディスク上で読み取り専用としてマークされません。
		* UE4 で Subversion で作業する前に Subversion レポジトリの _作業コピー_ を用意しておく必要があります。現在、エディタ内でこの設定は行わず、サードパーティ ツールなどを使用しています。
	* 詳細については、http://subversion.apache.org/docs/  に掲載されている Subversion ドキュメントを参照してください。


#### ブループリント
* **詳細パネルの変数デフォルト値の編集**
	* ユーザーは Graph モードの **[Details]** パネルで変数のデフォルト値を編集できます。ここで他の変数のプロパティも編集できます。

		グラフ内で変数取得または編集設定のいずれかを選択します。

		![](EditingVariableDefaultValues01.png)		
		または、**マイブループリント** リストで変数を選択します。	

		![](EditingVariableDefaultValues02.png)

* **Blueprint Macro と ForEach Node の Wildcard (ワイルドカード)**
	* マクロの出入力を編集する場合、ユーザーは _ワイルドカード_ ピン作成オプション (または _ワイルドカード配列_ ピン) が使えるようになりました。  

		このグレーのピンが、接続するタイプへ自動変換してくれます。

		![](WildcardBlueprint01.png)	

	* この機能は以前まで、**ForEachLoop** ノードと **ForEachLoopWithBreak** ノードを **StandardMacros** ライブラリに追加するために使用していました。

		[REGION:caption]
		**変換前**
		[/REGION]
		![](WildcardBlueprint02.png) 
		[REGION:caption]
		**変換後**
		[/REGION]
		![](WildcardBlueprint03.png)

* **ブループリント エディタ UI の最新情報**
	* **[ROOT]** エントリ を **Components** モードのActual Scene Root Component ノードに結合しました。	 
	ドラッグアンドドロップ操作中に出るツールヒントの説明文をもう少し分かりやすくしました

		![](BlueprintEditorUpdates01.png)

	* **Components** モードと **Graph** モードの**[Details (詳細)]** タブからオブジェクト タイプの記述を省きました。 
	* **Graph** モードの変数セクションの **[Search]** ボックスを非表示にしました。	 

		![](BlueprintEditorUpdates02.png)

	* 選択後、 **Components** モードの **[Add Component]** のドロップダウン フィルター テキストがクリアされ、リスト全体が再度表示されるようになります。

* **ブループリント エディタの Web Browser Navigation**
	* 新規タブで新規グラフを 1 つ 1 つ開くのではなくて、ユーザーがフォーカスした最後のタブが開き、新規グラフへの移動が Web ブラウザのリンクのようになりました。	

		![](WebBrowserNav01.png) 

	* **シンプル履歴ナビゲーション**
		* マウス左上のボタンで移動できます (Web ブラウザと同様でウェブボタン **4** と **5** です)。 
		* 移動中のグラフ内の位置とズームは常に保存されるので、簡単に戻ったり進んだりできます。
	* **全履歴ナビゲーション**
		* [戻る] ボタンまたは [進む] ボタン上を **右クリック** してタブ履歴リストを表示すれば、いつでも好きな場所にジャンプできます。

		![](WebBrowserNav02.png)

	* **新規タブを開く**
		* グラフを **Ctrl + ダブルクリック** すると、グラフが新規タブの中で開きます。 
		* この機能を使えば、 2 つの異なるタブで同じグラフを開いて、それぞれを別々にパンしたり移動させることができます。 


#### レンダリング
* **UE4 の Oculus Rift サポート**
	* UE4 が Oculus Rift をサポートするようになりました！  
	* Rift にプラグインし、ゲームを起動するだけで、 Oculus Rift を利用できます！  
	Rift は自動検出されるので、レンズの歪みを有効にしておくと、ゲームがステレオスコピックでレンダリングされて表示されます。

		![](OculusSupportUE4_01.png)

	* 有効の場合、プレイヤー カメラの回転が Rift の方向にロックされます。この設定は **ロックした** ままにすることをお勧めします。
	* **ElementalVR** サンプル プロジェクトは、現在メインの、唯一テスト済みの VR 体験です。このプロジェクトを GDC で披露し、 60 FPS に達しました。ユーザーの皆様、是非 VR を体験してみてください！
	* 最高の体験のための注釈：
		* 60 FPS でデモを動かすカードの場合、 **vsync を有効** にすることをお勧めします。HD キットを使用する場合は、スクリーンの向きにより明らかにティアリングが発生するため、特に推奨します！
		* **フレーム バッファ処理の無効化**このオプションは nVidia のコントロール パネルにあります。1 に設定してデバイスの遅延を減らします。

			![](OculusSupportUE4_02.png)

	* 紹介しておきたい進行中の案件は以下の通りです。
		* **全画面自動探知**：現在、Rift が主要モニタになっていない場合、ウィンドウを手動で Rift に移動してコンソールで全画面に切り替える必要があります (「fullscreen] と入力) 。
		* **レンダリング機能は、ステレオスコピック レンダリングと互換性がない場合もあります**。今のところ、 Environmental Reflections はステレオスコピック レンダリングと互換性がありませんし、他にもレンダリングに失敗する機能があるかもしれません！右目が黒い四角で表示されたら、恐らくそれは互換性のない機能なのかもしれません。  
		* **遅延の改善**今のところ、Rift の現在方向に対してカメラ位置を向けるために、まずゲームスレッド上で 1 回、そしてレンダリングの直前に 1 回と、計 2 回更新を行っていますが、まだ最適化の余地があります。Rift プラグインがレンダースレッド上での最終的な更新用に使用するインターフェースも問題なく使えます。明らかな遅延を減らせるのであればゲームに Rift は要らない場合、ゲームは同じインタフェースで 入力の読み取りと調整を別に行える可能性があります。

* **PC とコンソール用スクリーン スペースのライト シャフト**
	* ライト シャフトには、 **フォグ オクルージョン手法** と **加算 / ブルーム手法** の 2 種類があります。それぞれにコストがかかるので、希望する方法を 1 つ使用するのが良いでしょう。
	* **オクルージョン**
		* オクルージョン手法は画面上のオブジェクトの深度からマスクの作成、ライトから離れてマスクへブラーの適用、またフォグや大気のマスクがけに使用します。  
		* 太陽は、スクリーンからわずかに外れてオクルージョン ライト シャフトを取得することが可能ですが、現時点ではユーザーが太陽から 90 度の角度でアプローチするとフェードアウトしてしまいます。_指向性ライト_ のみオクルージョン手法を使用できます。

			![](Occlusion.png)

	* **ブルーム**
		* ブルーム手法はワールド空間の光源周りのシーンカラー（透明度やフォグ イン スキャタリングを含む）をキャプチャして、ライトから離れた位置で放射状ブラーを適用します。  
		* ライト シャフト ブルームはすべてのタイプの _ライト_ (_Point_、_Spot_、_Directional_) 上で有効にできますが、点上や _スポットライト_ 上では作業しにくいかもしれません。光源に近い明るく不透明なサーフェスからブルームするカラーをピックアップします。

			![](Bloom.png)

* **モバイル レンダリング:Distance Field Shadows (ディスタンス フィールド シャドウ)**
	* 太陽の光はディスタンス フィールド シャドウを使い、ピクセル単位で計算されるようになりました。	 

	![](DistanceFieldShadows01.png)![](DistanceFieldShadows02.png)

* **Lightmass (ライトマス) の品質改善**
	* ビルド時間を大幅に増やさずに品質を高める方法として適応サンプリングを使用することにしました。
	* **Indirect Lighting Quality** 設定を変更することにより、アーティストは品質とビルド時間のバランスも取れるようになりました。  

		[REGION:imagetable]
		| ![](LightmassQuality01.png) | ![](LightmassQuality02.png) |
		| --- | --- |
		|改善前|改善後|
		[/REGION]

#### アニメーション

* **AnimNotifyState Notification**
	* 継続するなど、時間の範囲を定義する以外は、 AnimNotifyEvents と似ています。また AnimNotifyClass ブループリントにおいて、 NotifyBegin 、 NotityTick 、 NotifyEnd をトリガします。

		![](AnimNotifyState01.png)

	* アニメーションがティックされるとイベントが送信されます。

		![](AnimNotifyState02.png)(convert:false)


## 新規追加

#### エディタとツール
* **[Open Project (プロジェクトを開く)]** で **プロジェクト ブラウザ** を使用するようになりました。
* コードベースおよびコードベースではないゲーム プロジェクトのパッケージを実装しました (**[Main Menu] > [File] > [Package Project]**)。
* エディタの子ウィンドウが Windows のタスクバーに加わり最小化できるようになりました。
* **新しいランドスケープ エディタの UI**
* ソケットを接続点にして、 _ランドスケープ_ スプライン制御点にスタティック メッシュの割り当てが可能になりました。
* _スレート_ ベースのロード画面が実装されました。
*エディタにユーザビリティ テスティングのための色覚障碍フィルタを実装しました。
* エディタ UI HUD にフレーム レートとメモリ表示を切り替える環境設定を新しく加えました。 
	* **[Editor Preference (エディタの環境設定)] > [Developer Tools (デベロッパーツール)] > [Show Frame Rate and Memory (フレームレートとメモリを表示)]** (デフォルトはオン)。 
* **ビューポートのレイアウト**
	* 4 ペイン 2x2 レイアウトの他に 2、3、4 つのビューポート ペインが新しく登場しました。
	* レベル ビューポートは、それぞれのビューポートのメインメニューにアクセスし、様々なレイアウトに対応させました。
	* レイアウトを選択して、現在のタブ内のビューポートの配置を変更します。
	* レイアウトは、 **レベルビューポート** の [Keyboard Shortcuts (キーボードショートカット)] ウィンドウのコマンドとしても入力できます。
* 高密度のスタティック メッシュのインポート時の速度の改善に合わせてトライアングル順序最適化アルゴリズム (Forsyth) が新しくなりました。
	* NVTriStrip は、コンソール変数 r.TriangleOrderOptimization を 0 に設定すれば使用できます。
* 新規の LOD のインポートや既存の LOD をスタティック メッシュに置き直す機能を追加しました。
* **プロファイラ**
	* イベント グラフを改善しました (Average と Maximum イベント グラフの選択オプションが追加されました)。
	* エクスプローラーからプロファイラへ ue4stats ファイルをドロップ＆ドロップする機能を追加しました。
	* プロファイラのパフォーマンスが改善されました (キャプチャされた総計ファイルのロード時間の高速化に関するものがほとんどです)。


#### ブループリント
* **[My Blueprint]** パネルあるいは選択対象の Get/Set ノードで変数が選択された場合に、**[Details]** パネルの変数デフォルトを編集する機能を追加しました。 
* ライト用の IES プロファイル テクスチャがブループリントに設定できるようにしました。
* **ブループリント エディタ** の中に **Components** モードで作成した変数を割り当てられるようにしました。
* **ブループリント エディタ** の **Graph** モードに **Components** モードで作成した変数の割り当てを可能にしました。
* 編集中の機能の変数名、ツールチップ、カテゴリが **ブループリント エディタ** の **Components** モードの **[Details]** タブに追加されました。編集中の変数名も **Graph** モードの **[Details]** タブに再保存されるようになりました。
* _ブループリント_ の _マクロ_ がワイルドカード パラメータ タイプを受け取れるようにしました。ワイルドカードにできるピンの数は決まっていませんが、今のところ _マクロ_ のインスタンスにつきワイルドカードは 1 つに制限されています。
* StandardMacros ライブラリの **For Each Loop** ノード は _ブループリント_ の配列イタレーションを簡素化します。
* _ブループリントされた_ 全てのアクタに **Received Destroyed** イベントを追加しました。
* **ブループリント エディタ** で Web ブラウザのような体験が出来るようにしました。
	* 戻るへナビゲート、全履歴表示、タブの再利用でグラフを開きます。
* ドラッグ＆ドロップで **[My Blueprint]** タブの変数 / カテゴリの並び替え機能を追加しました。
* **Get All Actors With Interface** を追加しました。


#### ゲームプレイとフレームワーク
* **Oculus Rift サポート**  
	* このビルドにはサポート対象のプラットフォームの Oculus Rift ハードウェアに対する予備サポートが含まれています。エンジン立ち上げ時にデバイスをプラグインすると、ステレオスコピック レンダリング、 HMD 、歪み、読み取りセンサー データが有効になります。この機能は開発中のため、適切なモニターを探知する機能などはまだ動作しています。
* r.MaterialQualityLevel がランタイム時に変更できるようにまりました (マテリアル式 **QualitySwitch** を使用するとアートの見栄えの調整が簡単になります)。 
* ガウス ブラー処理のポストプロセス パスの最適化を追加し、大きめのブルームのみにデフォルト使用する r.FastBlurThreshold で調節可能にしました。
* 内側および外側の半径、フォールオフ指数、最小ダメージに対する引数で、`ApplyRadialDamageWithFalloff()` 関数を `GameplayStatics` に追加しました。
* サブバージョンへのサポートを追加しました。
* ソース コントロールがプラグインで管理されるようになりました。
* Combo ボックス (およびそのコンテンツ) のキーボード制御を可能にしました。
* カメラ コンポーネントの最大比が 10 から 100 になりました。
* **Render in main pass** オプションをプリミティブに追加しました。
	* これにより、プリミティブがメインとなるシーンで描画されなくなりますが、他のパス (カスタム 深度パス) では描画されます。
* テクスチャ キューブ アセットへエクスポートする HDR を追加しました。
* 方向ベクターを返す FRotator::Vector() と混乱しないように、 FQuat::Vector() を FQuat::GetRotationAxis() に変更しました。 
* **AnimNotifyState** を追加しました。AnimNotifyState は AnimNotifyEvents とは異なり、継続するなど、時間の範囲を定義します。また AnimNotifyClass ブループリントにおいて、NotifyBegin、NotityTick、NotifyEnd をトリガします。 
* エディタでの AnimNotify 描画を改善しました。アクティブな通知がハイライトされます。  
* AnimMontage が現在のスケルトン上で再生できない場合のログ警告を改善しました。 
* `FText` の数字 / パーセント / 通貨の形式を改善し、場所と記号の制御が可能になりました。
* **PhAT** - 選択中のスタティック メッシュから頂点を選択中のボディにコピーします。


#### レンダリング
* チューブライトが公開されました。ライトの **SourceLength** プロパティを使用してください。 
* PC のポストプロセスに微粒子フィルムを追加しました。 
* **Lightmass の品質改善**
	* 新しい調整用 GI ソルバを使用して品質を大幅に改善しました。
	* **WorldSettings** の **IndirectLightingQuality** で改善が必要なレベルでソルバ品質を選択的にあげることができます。
	* オブジェク同士トが交わる部分の暗いテクセル アーティファクトを減らしました。
* **移動オブジェクト数が多い個所を中心にしたレンダリング スレッドの最適化**
	* 移動オブジェクトが 1400 あるテストシーンの RT (リプレイ タイム) の合計は40% 削減されました。
* **スクリーン スペースのライトシャフト**
	* 安定性を維持するために Temporal AA を使用します。
	* 異なる 2 つの機能があります。フォグ オクルージョン手法は現実的で、ブルーム / 加算手法は制御しやすいです。
* **モバイル**
	* ディスタンス フィールド シャドウを追加しました。
* **Min** と **Max** マテリアル式を Math カテゴリに追加しました。


#### プラットフォーム
* PC がコンソールと同じキャッシュ化されたテクスチャ ストリーミング(優先されるキャッシュのヒューリスティックによるテクスチャ プール) を使用するようにしました。デフォルトのプールサイズは VRAM の `50%` ですが、好きな時に変更できます。
* Deployment to Linux へのデプロイ (転送) は **Unreal Automation Tool** (UAT) でサポートされています。
* **IOS**
	* IPhone5S (64-bit ファットバイナリ) へのサポートと IOS7 の修正を追加しました。
* **Mac**
	* **Unreal Automation Tool** (RunUAT.command) に対するサポートが追加されました。
* Facebook IOS サポートがエンジンを追加しました。
* ステータス更新の共有などに使用するために OSS 用オンライン共有インターフェースを追加しました。
* Facebook IOS SDK をサードパーティ ソースに追加しました。


## アップグレード ノート

#### エディタとツール
* **Landscape**
	* Merged heightmap normal to weightmap, to save texture sampler.
* **Edit properties** command for a streaming level now shows ULevelStreaming object properties instead of AWorldSettings properties.
* Can now delete assets in the **Content Browser** using the **Delete** key.
* **Content Browser** now displays message _"Nothing to show; check your filter"_ message when the asset view has no items to show.
* **Content Browser** thumbnail scaling now disabled when in columns view.
* Texture import notification now fades off immediately after clicking OK or Revert buttons.
* Moved the bookmark menu entries into a single **Active Bookmark** category.
* Materials no longer generate code for properties that have been disabled (i.e. opacity properties when the _Material_ is opaque).
	* Previously it would have been possible to have expressions attached to disabled properties which would generate code that could be sneakily used in some way by the shader.This will no longer work and will need fixed up.
* Changed actor animation detail panel building to allow property visibility to be control with delegates.This fixes an issue where dragging an animation onto an actor caused the panel to be left in an inconsistent state.
* Corrected tooltip for **Create Dynamic Material** _Blueprint_ node.
* Changed behavior of viewport creation so that **Enable**/**Disable** of realtime during **Play In Editor** is honored.
* Added extra text and tool tip to asset display to the **Skeleton Tree** in Persona signifying that it is _Preview Only_
* Deleting the original function output no longer causes an error to be displayed. 
* Localized the Viewport Visualize Buffer menu options.
* Localized the Import FBX options window header and menu.
* Localized the Viewport Show menu options.
* Localized the Splash screen version and loading information.
* Localized the SoundCue editor menu options.
* Localized Blueprint Editing Defaults.
* Localized Editor Settings Keybinding override notification.
* Localized PhAT Editor Animation toolbar text.
* Localized Viewport:Preview:Recent section header.
* Localized the Matinee Group context menu Rename Group.
* Integrated Forsyth triangle order optimization algorithm (as third party library) into mesh import pipeline.


#### ブループリント
* **Acceleration** property of _CharacterMovementComponent_ has been made protected, and is accessible in _Blueprints_ only by `GetCurrentAcceleration()`.
	* Blueprints that were moving by modifying **Acceleration** should be converted to use the **InputVector** instead.
* Added analytics to track project resource statistics for number of source files, modules, Object Classes, Blueprint Classes, Asset Packages, Maps and the instance counts of objects per class type.
* Added functionality in the **Blueprint Editor** to add events for _Components_ from the **Details** panel and the **Components** context menu.
* Changed all super call reference in the _Blueprints_ to be _Parent_ instead of _Super_ in both code and user facing naming.
* Replaced the map check icon so it is more readily distinguishable as the map check function rather than just a tick box.
* Added analytic that records project usage.
* Added missing icon display in the _Blueprint_ context menu for the call function on _foo_ entries.
* Blueprint array **RemoveItem** function now removes all instances, to match TArray behavior.


#### ゲームプレイとフレームワーク
* `UGameEngine::UserSettings` renamed GameUserSettings and moved to UEngine.
* `UEditorEngine::UserSettings` renamed EditorUserSettings.
* Move `PreInitializeComponents` to be in `PostActorConstruction` so that order is consistent for spawned and loaded actors. 
* Rename `AActor::Spawned` to `AActor::PostActorCreated`. 
* Move `AActor::PostActorCreated` to occur before `OnConstruction` to be analogous to `PostLoad` for spawned actors.
* The `GameMode` pointer in UWorld is now private.Use GetAuthGameMode() accessors.
* **Vehicle classes renamed**:

	[REGION:simpletable]
	| Old | New |
	| --- | --- |
	| Vehicle | WheeledVehicle |
	| VehicleMovementComponent | WheeledVehicleMovementComponent |
	| VehicleMovementComponent4W | WheeledVehicleMovementComponent4W |
	[/REGION]

* _NoDrive_ vehicle model support removed. 
* Change up-axis from **Y-up** to **Z-up** automatically on the APEX Clothing asset which has Y-up axis.
* Message formatting pattern strings now use \` instead of ' to escape.
	* If a message formatting pattern string uses { or }, wrap the { and } between \`s - individually or collectively both work.
	* Use double \` (\`\`) to print a \` without escaping a { or } after it.
* Disabled motion blur while performing high res screenshot pass. 
* `LoadPackageAsync` now accepts a delegate instead of pointer to a function.


#### コア
* Various types named "Arithmatic" were renamed to "Numeric"
* The custom versioning scheme which was added to allow branches to define their own entries in archives has been changed from being enum-based to GUID-based.
	* Previously, enums were used to identify a custom version.These were placed in `EUnrealEngineObjectCustomTag` in `ObjectVersion.h`.
	* Now a custom version is identified by a GUID.
	* Existing packages containing enum-based custom versions are backward compatible with a GUID of `00000000-00000000-00000000-<enum value>`, so a GUID of this value should be used to load these packages.
	* Any `FCustomVersionRegistration` variables should be defined with a GUID instead of an enum and a string which describes what the custom version is for, so this:

			FCustomVersionRegistration GMyModule((EUnrealEngineObjectCustomTag::Type)0x12345678, MyLatestVersion);

		would become:

			FCustomVersionRegistration GMyModule(FGuid(0, 0, 0, 0x12345678), MyLatestVersion, TEXT("My module"));
 
* The computed `TangentToWorld` in `FMaterialVertexParameters` now removes scaling and matches `TangentToWorld` passed to the pixel shader. 
* UnrealBuildTool (and the Engine in modular builds) will now use `*.uprojectdirs` files in the root to indicate the folders it should search 1 level deep for `uproject` files. 
	* This feature can be disabled in UnrealBuildTool by simply setting `bUseUProjectDirs` to false. 


#### プラットフォーム
* Eliminated Uncooked UE4 and game binaries. 
	* You now always run `UE4Editor.exe` to test uncooked games, or to execute commandlets. 
	* The Uncooked option no longer exists in generated project files.Use the Editor instead. 
	* Pass the `-game` option on the command-line of the editor to run the game instead. 
	* Or, you can run the game from the editor using **Play in Standalone** Process. 

		[REGION:note]
		Existing projects should delete their Uncooked target.GameUncooked is no longer a valid TargetType.For now, UnrealBuildTool will automatically SKIP these files.
		[/REGION]

* Updated a number of `*.mm` files to `*.cpp`
 

#### Networking
* Added default map / game info ini options for dedicated servers. 
* Allows dedicated servers to launch with less commandline parameters. 
* Removed StartupMap concept as DefaultMap is functionally the same.


#### Online
* Consistent `IsEnabled()` functions across all online subsystems.
* Added `LogOnlineGame` and `LogBeacon` as new possible log options.   
* Renamed `IsRunningServer` to `IsRunningDedicatedServer` for clarity.
* Renamed `JoinFriendSession` to `FindFriendSession` to be more clear about its purpose. 
	* `FindFriendSession` only returns a single search result for where the friend is. 
	* `JoinSession` must still be called afterward with the result to complete the flow.
* Added a Facebook Identity for IOS
* Added Facebook Friends access for IOS.Uses the OnlineSubsystem Sharing interface to request permissions.
* Added the initial implementation of `OnlineSubsystem::GetUserInterface` which hosts data about an OSS user.
* Updated the OnlineSubsystem Facebook so that IOS and windows builds could live side by side.
* Moved MCP configuration of service keys and permissions to NoRedist source files instead of config files
      * Still maintained the `DefaultEngine.ini` method of getting these values for development convenience
      * Games can override configurations using a callback delegate
* Http
	* Exposed http module timeouts for wininet:
		* HttpConnectionTimeout=60 
		* HttpReceiveTimeout=30 
		* HttpSendTimeout=30
	* Request will fail faster instead of waiting for the timeout


## 今後の追加事項と継続項目

#### エディタとツール
* **World Browser**
	* Changed blank persistent level from a runtime package to an actual package on a disk.**Open World** command now requires a map file instead of folder. 
	* **Right-click** now properly selects hovered tiles.
* View mode names displayed in active viewport are now the same as the menu listing.
* Disabled the menu option to make a level the current level when it is locked.
* The same icon is now used for "data only" and regular _Blueprints_, only the color differs to distinguish between them.
* The scene texture node now has an optional clamp of it's UV to the viewport size.
* Editor no longer crashes when dragging asset into newly created collection.
* Prevent crash if user exits game the same frame it begin it.
* Added missing tooltips to _Matinee_ actions.
* Editor no longer crashes if **Content Browser** asset is selected when creating a new _Matinee_.
* **Placement Browser** - Collections view no longer tries to create an entry with invalid parameters.
* **Content Browser** now uses icons instead of text to denote collection type.
* **Matinee** dropdown now has an option for **Add Matinee**.
* No longer a warning when right-clicking or creating a new collection when source control is disconnected.
* Zoom and _Blueprint_ headings are now localized (where possible).
* **Blueprint Editor**/**Persona** mode headings now appear localized.
* Dropdown **Add Float Track** now appears localized.
* BSP Pan now appears localized.
* _Matinee Actor_ details section now appears below **Transform**.
* Duplicate, via **Ctrl + W**, only requires 1 undo step again.
* _SoundCue_ and _SoundWave_ no longer play when double clicked, instead opens **SoundCue Editor**.
* _DecalActors_ marked as **Hidden In Game** will now draw properly in the editor.
* Optimizations for Gaussian DOF effect.If **Near Blur Size** is less than the threshold defined by the console variable `r.DepthOfField.NearBlurSizeThreshold`, the near blur effect will be disabled and cheaper shaders used instead.
* Buffer visualization system now works correctly in orthographic view modes.
* New _Landscape_ doesn't try to resize during alt-drag view rotation any more.
* Optimized _Landscape_ spline rendering in editor by reducing complexity of the lines and optimizing `DrawDashedLine()`.
* General  UI Improvements:
	* Added new additional ViewMode icons at 40x pixels PNG only.
	* Created new Icons added for Local, Shared & Private - will require hookup.
	* Created new Profiler Icons and  Added to the build - Wired up.
	* Updated Icon - Colorblind Solution Should automatically work  Red - No Go sign - non-destructive PNG replace.
	* Adjust existing Content Browsers folder icons to lighten them. requires code to tint default icons back to look of previous versions. 
	* Revised existing icons & created new icons for translation toolbar options.PNG assets replaced, new translation icons require code hook-up. 
	* Created new icons for both the main Add Event Caller blueprint button (40x size) and the context menu (16x size). 
	* Created a new icon for Import FBX Chunks @ 40x.Requires code to hook-up in edior.Change is PNG asset only. 
	* Created new icons for 'Standalone Game at Camera Location' & 'Standalone Game at Player Start', at both 16x & 40x resolutions.PNG assets only, require code to hook-up. 
	* Created new icons for Enum, Bluprint Delegate (16 & 24x), and Delegate Pins connected & disconnected.PNG assets only, replaces existing PNG files. 
* New engine analytics - Editor tracks source control provider changes.
* Viewport toolbar buttons now act like regular toolbar buttons and close any open menus when clicked.
* Added branching support for the EpicSurvey plugin.
* Changed EpicSurvey notification mechanics to display a toast when a new survey is available, and added definable time delays and duration for the notification icon.
* Deselecting package when using **Save All** in the Editor now remembers you ignored it for the lifetime of the application.
* Added a new editor setting to separate the middle-mouse scroll speed when using it to zoom in the viewport.
* The **Content Browser**'s search box now includes all the contents of successful search results, allowing a user to search for an entire folder rather than specific items. 
* Added option to automatically delete physics bodies with no corresponding bone when opening physics bodies in PhAT.
* Content Cooking & Project Packaging from the Editor's File menu now works; there are still some issues with plug-ins 
* 'Open Project' tools are now hidden when creating new project.
* Centered "Nothing to show; check your filter" text in _Content Browser_.
* _Cube Texture_ thumbnails are now draw with 2:1 aspect ratio.
* Project file generator improvements.
	* Generated projects now include .uproject files, .uplugin files and plugin resource files.
* Allow the Play In Window mode to take mouse control on start up.
* Change PIE viewports to only surrender mouse control when the user explicitly returns it to the editor, so that using an in-game console won't cause the viewport to lose control.
* Correctly disambiguate right & left shift so that right-shift doesn't get stuck in the down position.
* Prevent infinite recursion in some Content Browser actions by preventing the task pop-up progress dialog from stealing keyboard focus.
* In Matinee give the "Editing Crosshair" menu option a permanently visible tick-box.


#### ブループリント
* **MakeArray** nodes can now be placed in front of any node, not just impure function calls. 
* Added support for `FName` _Blueprint_ spawn parameters.
* The search filter box is now cleared after making a selection to add a new component in **Components** mode within the **Blueprint Editor**.
* Removed the search bar and property grid button from the Details tab when variables are selected in **Graph** mode within the **Blueprint Editor**.
* Child _Blueprint_ Component variable names can no longer collide with _Component_ variable names in the parent _Blueprint_.
* **BeginPlay**, and the _Blueprint_ version **ReceiveBeginPlay** should now be called _after_ the initial replicated properties are received on clients, for dynamically spawned actors.
* Converting selected actors to _Blueprint_ will only use the selected actors and not all attached actors for the _Blueprint_.
* Promote to variable in drag context menu new automatically edits the now variables' name in the _Blueprint_ pane.


#### ゲームプレイとフレームワーク
* `TObjectIterator` is now much faster as it only iterates over objects of the given class and derived classes.
	* You can now also only iterate over objects explicitly of the specified class, excluding derived classes.See `TObjectIterator`'s constructor.
* Modified localization word count report generation commandlet so that it can properly handle windows format new line characters.
* Minor optimization to get more efficient clears on some hardware.
* Added scalability to `SynthBenchmark` (run it faster but less precise when needed), added debugoutput to judge quality better.
* `Enable`/`DisableInput` can now be called on Pawn, PlayerController, and LevelScriptActor.
* **Collision** 
	* CollisionProfile `ObjectTypeName` allows `DisplayName` of the channel, not code defined channel (i.e. `ECC_GameTraceChannel1`).
	* UI improvement:Split trace type vs object type, Renamed Collision Profile to be Collision Preset. 
	* Get Hit Result Under Cursor also supports trace type and object type.
	* Added tool tip support for collision profile.Use HelpMessage.  
* Actor names are now limited to `NAME_SIZE` in length.
* Preloaded compilation audio assets to prevent them loading on the fly.
* Prevented message log from showing until a level editor-based mainframe is displayed.
* Prevented crash because of concurrent access to debug draw delegates array.
* Auto find selection improved.
* `GetTextSize` now const - so it no longer needs execution running through it.
* Warning added when loading assets with FText properties that lack a key.
* **Unreal Front Launcher**
	* This is a WIP feature.The launcher has been re-enabled in this QA build and utilizes Unreal Automation Tool to build, cook, and launch games.Not all of the features have been implemented, but it has been tested with most Windows configurations as well as building and packaging iOS ipas.
* **Dedicated server optimizations**
	* Disallow spawning Actors with `NeedsLoadForClient/Server == false` in those contexts. 
	* Add `bAllowTickOnDedicatedServer` to `FTickFunction`.
	* ParticleSystemComponents no longer register ticks on DS, and skip `PSC.ActivateSystem`. 
	* Add `bAllowReceiveTickEventOnDedicatedServer` to `AActor`, to disable all Blueprint ticking on DS if desired.
* Vehicle improvements


#### レンダリング
* Shadow casting is now per-material for _Skeletal Meshes_ (was previously per LoD).
* Improved normal to roughness composite texture feature.This helps with specular aliasing.
* **モバイル**
	* Improved HDR encoding for cubemaps. 


#### Audio
* Creating SoundCues from SoundWaves will create the SoundCue with a unique and valid name.


#### Core
* Refactoring the Slate module to no longer be dependent on `EditorStyle`.
	* Renamed `SlateStyle` to `EditorStyle`
	* Large refactor of the style system to be less dependent on statics.Introduced a new asset type, Slate Widget Style, that can be used to drive a widgets styling through content.
	* Removing the factories for the old button and checkbox style assets so people stop creating new ones (will be DEPRECATED soon)
* Updated core slate widgets to use a new `SLATE_TEXT_ARGUMENT` or `SLATE_TEXT_ATTRIBUTE` macro when defining their display text variables.This allows users to pass either FStrings or FText for values.This is an attempt to do a multi-step conversion of the slate widgets over to supporting entirely FText.First well be able to remove many .ToString() for FText which are currently being passed.Then we can remove support for ANSI* and TCHAR*, then once a sufficient number of places are switched to using FText we can invert the macro logic to convert FStrings into FText, instead of FText into FStrings, at which point we can convert the core widgets to use FText internally and finally phase out FString support entirely.
	* Removed Support for `ANSI*` and `TCHAR*` in core Slate widget text fields.
* Various improvements and fixes to UnrealAutomationTool & UnrealBuildTool build infrastructure.
* Adding code to a non-code project now updates the uproject file accordingly.
* Guard against grid panel with no rows or columns.
* TabManager no longer holds references to objects that have been unloaded.
* Uppercase article words in properties are now forced to lowercase.
* Cleanup unapproved usage of FindText.
* Text elements no longer have double spaced newlines.
* Toolbar Click to Expand Toolbar now appears localized.
* Material Editor expression categories are now localized.
* Improved consistency with Reflections naming convention.
* Improved consistency with Buffer Visualization naming convention.
* Toggling Sounds sprites no longer toggles light sprites.
* Added UDoubleProperty for UObject properties of type double.
* Added `FText::AsMemory()` to format byte sizes to human readable strings.
* UHT can now process empty header files without producing errors.


#### プラットフォーム
* Added static lib support to the Android toolchain.
* **Mac** 
	* Porting the engine and the editor to Mac.
	* Use a vertex buffer and Vertex Texture Fetch rather than a large uniform buffer for skeletal mesh bone matrices to avoid a software fallback on Intel HD 4000 cards under Mac OS X.
	* The buffer always exists and is bound and is at least size of(FVector4) to ensure correct cross-platform behaviour.
	* The OpenGL ES2 renderer still uses uniform buffers.
	* On Mac OS X, always manually update the mouse cursor position during high-precision mouse operations to ensure that editor tools work.
	* Added Forsyth Xcode project & libraries for Mac OS X.






