INTSourceChangelist:0
Title: 2013年9月份版本信息
Crumbs:%ROOT%, Support/Builds
Description:
Availability:Licensee

[TOC(start:2 end:2)]

## Build Info


[REGION:simpletable]
| Item | Info |
| ---- | ---- |
| **Label** | QA_APPROVED_UE4_BUILD_2013_09 |
| **Changelist #** | 1844454 |
| **VISUAL STUDIO VERSION** | Microsoft Visual Studio 2012 Version 11.0.60610.01 Update 3  |
| **DIRECTX** | June 2010 |
[/REGION]

## Important information

 * Current Engine Development Roadmaps: [UE4 Roadmaps](https://udn.unrealengine.com/questions/topics/roadmap.html)
 * Fixed Bugs: [UE4 Fixed Bugs September 2013](UE4_Fixed_2013_September.xlsx)
 * Known Issues: [UE4 Outstanding Bugs September 2013](UE4_Bugs_2013_September.xlsx)
 

## Major New Features

####Editor Tools
* **Visualize Out-of-Bounds Pixels**
	* A new show flag has been added to visualize pixels which are outside of the object's bounds. 
	![](OutofBoundsPixels04.png)

####Blueprints

* **Linear Color Curves and Gradient Editor**
	* Linear color curve support has been added to timelines and users now have a gradient editor for them (editing the curve directly is still supported though). These can be created in or imported to the content browser as well as created directly in the Blueprint timeline editor:
	
		![](LinearColor01.png)
	* When users open a color curve by default they�ll see a gradient which can be used to add keys while visualizing how the color changes over time:
	
		![](LinearColor02.png)
	
		(with opacity stops)

		![](LinearColor03.png)
	* The following functionality is available in the gradient editor:  
		* Clicking in the darkened area above or below the gradient will add new color or opacity stops, respectively, and pressing delete will remove the selected stop.  
		* Double clicking on a stop marker will open a color picker for the stop (or a slider for opacity).
		* Left click and drag on a stop will move the stop along the timeline

		Note: This functionality is also available when right clicking on a stop:
	* Users can still edit the curves manually and hide the gradient editor. 

* **Support for Server and Client RPCs in Blueprints**
	* Support for Server and Client RPCs for _Blueprints_ has been added. 
	* Previously, all replicated Blueprint events were implicitly unreliable multicast. Anything that was previously checked **Replicated** will now show up as Multicast. 
	No functionality will be different for these events.

		![](ServerBlueprints.png)
	* The three settings mirror the C++ native keywords: NetMulticast, Server, Client. 
		* From an implementation perspective, there is no difference between a Blueprint function / event that is tagged to replicate vs a C++ function that is tagged to replicate in its `UFUNCTION()` header.
	* The Server RPC type is needed for Blueprints to communicate client to server. A Server RPC is only executed on the server. 
	* Server RPCs can only be called by a client who owns the actor executing the event graph. 
	* Client RPC can also be selected now, for completeness. A client RPC is only sent to the owning client. 
	* Finally, Blueprint RPCs can also be checked for reliability. This is also being done for completeness, but comes with some hesitation. 
		* By default, Blueprint RPCs are unreliable and should almost always be unreliable. 
		* A user should only make a function reliable if they are sure it needs to be.
		* The console var `net.Reliable.Debug 1` can be set to print out reliable net traffic.

* **Apply/Reset Instance to Blueprint Defaults**
	* When a _Blueprint Actor_ instance is selected, there are now 2 new buttons in the **Blueprint** section of the **Details** tab in the **Level Editor** - **Apply** and **Reset** - next to the **Edit** button. 
		* **Apply** will be enabled once you've made any changes to the instance that differ from defaults; click **Apply** to update the _Blueprint_ defaults with changes from the instance, and they should in turn be propagated back down to all other instances of the _Blueprint_ if those instances have not themselves changed the value(s) away from the _Blueprint_ defaults. 
		* Similarly, click **Reset** to revert the selected instance back to _Blueprint_ defaults.

		![](ApplyResetBlueprintDefaults.png)

* **Mouse HitBoxes on HUD**
	* You can now draw special _Hit Boxes_ inside a HUD, making it possible to build HUDs and menus that can have simple mouse interaction.

		![](MouseHitBoxes.png)

* **_Auto Insert_ Nodes**
	* Adding a new node via the pin-drag menu will now insert it into the existing chain.

		![](AutoInsertNodes.png)

* **Improved �Add Component� Dropdown**
	* This now has a search box, _one-click_ add, icons, and categories.

		![](AddComponentDropdown.png)             

* **Change Actor Reference**
	* You can now easily change an Actor reference in the _Level Blueprint_ to current selection.

		![](ChangeActorReference.png)

* **Better Handling for Multiple Selected Actors**
	* This now works like Kismet 1, adding one _call function_ node with multiple Actor references connected.

		![](BetterHandlingforMultipleSelectedActors.png)

* **New Library Functions** 
	* New Blueprint Library functions have ben added!

		![](NewLibraryFunctions.png)
	
	[REGION:note]
	Some functions are very expensive, and should be used with caution with regards to performance.
	[/REGION]

* **Latent Functions Outside Actors**
	* Latent Functions (ie, Delay) can now be used inside any _Blueprint_!

		![](LatentFunctionsOutsideActors.png)

* **Interface Editor Mode**
	* There is now a special mode when editing interfaces that only includes what you need, called **Interface**.
 
		![](InterfaceEditorMode.png)

* **Attach Created Components Anywhere**
	* You can now drag-and-drop _Components_ that you create to attach them anywhere in the native scene Component hierarchy. 
	* Additionally, you can also attach _Components_ that you create in a child _Blueprint_ to any part of the SceneComponent_ hierarchy that gets inherited from a parent _Blueprint_.

		![](AttachCreatedComponentsAnywhere.png)

* **Default Scene Root Component**
	* Previously this Component was created implicitly when a _Blueprint_ without any _SceneComponents_ was instanced. 
	* Now, when users create a new Actor-based _Blueprint_, if there are no _SceneComponents_ yet, this will appear in the **Components** mode list, so that you can set the defaults on it. 

		![](DefaultSceneRoot.png)
	* Once you add a _SceneComponent_, this will be swapped out for the new _Component_, which will then become the new root.

* **Shorcut keys for nodes**
	* You can now hold a key and click to place nodes quickly!

		![](ShortcutsforNodes.png)

	* Here is a list of existing shortcuts. More can be added in the `UserSettings.ini` file; a **Keybindings** interface for _Blueprints_ is in the works!
		
		| Node | Key |
		| --- | --- |
		| **ReceiveBeginPlay** | P |
		| **DoN** |	N |
		| **DoOnce** | O |
		| **Delay** | D |
		| **Branch** | B |
		| **Sequence** | S |
		| **Gate** | G |
		| **MultiGate** | M |
		| **ForLoop** | F |


* **3D Widgets on Transforms**

	* You can now create a widget in the world for a Transform property as well as a Vector property, so you can interactively edit rotation & scale.

		![](3dwidgetsonTransforms.png)


## New Additions

#### Editor and Tools
* **Play In Editor** viewports have an optional notification label when they take or relinquish mouse control.
	* In the new preference section: **Editor Settings > Play In > Play in Editor**
	* Enable **Show Mouse Control Label**.
	* Select the desired position in the viewport from the drop down **Mouse Control Label Position**.
* Re-import options now available from the Asset menu for those assets which support it.
* Diff option is now available for assets in the save content window.
* Empty maps now have a default light source and player start.
* Removing levels now gives a context sensitive warning message, and is suppressible.
* Actor selection now carries over into **Play In Editor**/**Simulate In Editor** session and back to the editor when it ends.
* Asset Editor plugin extension points are now all context sensitive, and aware of which asset you are editing.
* **Destructible Mesh Editor**: Importing of FBX files as depth 1 destructible chunks
* Added support for Linear Color curves and added a gradient stop editor to the curve editor when working with linear color curves.  
* **Slate** 
	* Added text styles to `STableViewBase`, updated default styles, `FTableRowBrushes` are now called `FTableRowStyles`
	* `SButton` without content will now size based on its style images.
* Transform and Camera speed controls have been moved to a new toolbar displayed in the editors active viewport.   


#### Blueprints
* Added `ExpandEnumAsExecs` metadata support. This allows an function enum param to be exposed as multiple exec inputs.
* Added **GetAllActorsOfClass**, **GetActorArrayAverageLocation**, **GetActorArrayBounds**, **MoveActorToActor** to `GameplayStatics`
* Added **MoveComponentTo** latent function to interpolate a components location/rotation over time
* Additional support for `FText` in _Blueprints_
* Added **GetVectorArrayAverage**, **GetMinElement**, **GetMaxElement** to `MathLibrary`
* Added **RotateVector** and **UnrotateVector** functions to rotator. 
* Components are now updated in real time in the preview window while editing (consistent with the level editor).
* Added a feature to both allow changes to a Blueprint actor instance to be applied to the _Blueprint_ defaults for that asset as well as to reset a _Blueprint_ actor instance back to the _Blueprint_ defaults.
* Transform defaults can now be edited for user-created root component nodes that are parented to either a native or inherited component node.
* _Blueprint_ defaults can now be changed while a **Play In Editor**/**Simulate In Editor** session is active, and changes will propagate to the actors in the session.
* Added support for exposing and editing transform defaults in the **Details** view in **Components** mode and **Defaults** mode in the **Blueprint Editor**.
* _Blueprints_ can now be attached to _Blueprint_ instances.
* Added `bTraceComplexOnMove` to `PrimitiveComponent`, allowing complex geometry collision in sweeps for primitive movement.
* K2Nodes can now define their own expansion step and specify which node handler to use allowing plugins and game specific modules to define custom nodes without needing to modify `KismetCompiler.cpp`
* New **OpenWorld** _Level Blueprint_ callable function to open another map

 
#### Gameplay and Framework
* Introduced `UBrainComponent` as base class for AI logic techniques
* Expanded `AIController`'s "move finished" muilticast delegate to send finished move request ID along with the result
* `StaticMesh` now support `AssetUserData` objects to store project-specific data without modifying the engine
* Add support for 3d widgets on `FTransform` properties 
	* Make blue widget diamonds a fixed size in screen space
* Simple save game system added. Not designed for capturing complete state of the world. _Blueprint_ accessible.
* Screenshots now display notifications like videos.
* Map Check now prints a summary so the user knows it has completed.
* `PlayerController` and `GameInfo` are now default types in the New Asset dialog for _Blueprints_.
* **Root Motion** 
	* Added support for Root Motion provided by AnimMontages.
	* Networked for simulated proxies. Supports position correction, smooth error fix up, non buffered smooth animation. 
	* Implemented Client to Server networking, with client prediction and correction.
		* Physics call animations `TickPose()` prior to running Physics, to ensure same timing is used when extracting root motion. 
		* On server, animations `TickPose()` is called from `MoveAutonomous` to ensure client timing is used for states, notifies and events. 
* **Player Movement Networking**
	* Client calculates DeltaTime the same way as the Server, so physics simulation is accurate between both. Additionally TimeStamp on client is reset at regular interval to maintain high accuracy. Simulations would accumulate more errors over time and increase the number of position corrections and bandwidth use. 
	* If multiple position corrections are needed in a single frame on the server, send the most recent instead of the oldest. 
* Refactored `ReplicatedMovement` to be using a replicated event. Removed static variables to check if any change happened. 
* Added `APawn::MoveIgnoreActorAdd` and `APawn::MoveIgnoreActorRemove` to add and remove Actors to ignore by Pawns movement collision. 
* `UCharacterMovementComponent::InitCollisionParams` now takes into account `MoveIgnoreActors` list.
* Package Project is now an option in the main File menu; only Windows is supported in this release
* **Settings UI** 
	* Added several new sections
	* Most sections now support Reset-To-Default
* Added a wrapper to the online platform FUniqueNetId called `FUniqueNetIdRepl`, use it for transport of the unique id via RPC/replication
* All serialization is implemented (network/file) as is `ExportTextItem` so you can use `obj dump` and `displayall`
* `AttachRootComponentToActor` will now replicate the attachment to clients and cease movement simulation for the duration of the attachment
* `bAlwaysRelevant` is available to Blueprints to enable more replication control in Blueprint-only games
* Integrated UDKRemote into UE4 and updated it to compile against iOS SDK 6.1
* Orthographic gameplay camera improvements:
	* Updated gameplay orthographic cameras to use the position of the camera as the near plane, instead of `-WORLD_MAX`
	* Removed `OrthoZoom` from gameplay orthographic cameras and replaced it with an `OrthoWidth` (the horizontal size of the screen in Unreal units) 
* FCanvasBorderItem, can draw 3x3 border with tiled frames and tiled background, supports scaling of frames and background 
	* Requires separate textures for tiled assets as it does not use shader to calculate tiling 
* Refactored a bunch of net code around determining owning actor and its setup/teardown


#### Rendering
* Visualizetexture/vis now filters more items and slows sorting ("vis ?" for help)
* Added multiple scalability console variables
* Implemented Timer queries for DX11 and OpenGL RHI
* Added experimental screen space subsurface scattering - only very basic function yet (r.SSSSS 1)
* GPUBenchmark is now part of SynthBenchmark (known issue: timeout on very slow GPUs)
* Screen space Light Shafts
	* Two separate light shaft types: occlusion which only affects fog / atmosphere, and bloom which is not physically based
* Added **VisualizeOutOfBoundsPixels** show flag, which colors pixels that are outside of their bounds in a striped pattern
* Reflection environment cubemaps are cached in the DerivedDataCache, so that they don�t need to be recaptured every load
* Cubemap data is cooked into packages
	* Unfortunately there are some failure cases, as the derived data can only be generated by a GPU, so it can�t be generated during cooking
* Diffuse GI on movable translucency � indirect lighting cache interpolates a single value per object
* New translucency lighting mode � _TLM_Surface_, which gets the nearest reflection capture cubemap applied for indirect specular
* UnrealBuildTool allows multiple instances to build separate branches concurrently
	* Previously new instances of UnrealBuildTool would block until the running instance finished. You can now run multiple instances if they are in separate branches (different UE4 root folder paths).
* **Film Post**
	* This changes the tonemapper and adds in new film post processing controls into the post process volume.
* Added `r.BloomQuality` console variable.
	* Increase / Decrease the number of post process passes required for the bloom post process operation.


#### Animation
* Created a new type of _BlendSpace_ with 1 Parameter (_BlendSpace1D_, as opposed to the original _BlendSpace_ with is 2D)
* Added a new tab to **Persona** to view/edit Skeleton Animation Notifies
* Play Slot Node Animation
	* You don't have to make a montage to play on slot node anymore. You can just use _AnimSequence_ or _AnimComposite_ to play on slot node. 


#### Audio
* Added comment boxes to State Machine graphs and Sound Cues.
* Enveloper Sound Node now allows visual curve editing and use of Curve Float assets.


#### Core
* Visual Studio 2012 can now compile 32-bit games. 
* FText message formatting functionality now supports an array of arguments.
* FText message formatting functionality now supports named arguments. IE: `"{PlayerScore}"`
* Support for Linux platform added (game server only).
* UProject files are now used determine module load order for your project's modules.
	* Existing projects will still load the primary game module at the original time, but you now have the option to load your project's modules at different times during startup.
	* The `.upluigin` file format is new very similar to the `.uplugin` file format. Use the `LoadingPhase` property on Module Descriptors to accomplish this.
	* See the plugin documentation for help in writing your `.uproject` file: [Plugins](https://udn.unrealengine.com/docs/ue4/INT/Programming/Plugins/index.html)
	* `.uproject` files are now required at runtime and included in pak files.
* Implemented GEXF graph output for UnrealBuildTool 
	* New `-graph` option emits an build dependency graph to ActionGraph.gexf 
	* (The file is saved to the engine intermediate BuildData sub-directory) 
	* By default, this also emits the C++ include dependency network 
	* These files are loadable into Gephi, which can create interesting visualizations of the graph network 
* Added `UE4PrereqSetup.msi` installer
	* Replaces UE4Redist.exe and installs the prerequisites needed for running UE4
* Behavior Trees was moved from game to engine level and it�s available for licensees
* Basic editor for Behavior Trees was added to editor
* Navigation data exporter (`ExportNavigation` console command) was added to engine, to export collision geometry (from navigation point of view) to OBJ file for navigation debugging purposes,


#### Online
* Added IOS implementation of a http request/response pair
* Created the Online Achievements Interface and added an IOS implementation using Game Center 
* Created a new `IOnlineAchievements` interface which all OSS will use to provide their achievement implementation
	* Added the `OnlineSubSystem::GetAchievementsInterface` for all existing OnlineSubSystem. Atm, these all return NULL, except IOS 
* Added a `TestAchievementsInterface` for online testing of achievements. This will Get achievements, get descriptions, write achievements and handle an achievement being unlocked.  
* Added support for game Center session.
* Added support for game Center friends. 
* Added support for game Center leaderboards. 
* Added support for a game Center identity/profile.
* Added a Store interface to Online Subsystems to provide a platform to make microtransactions.
* Added IOS in app purchase support
* Added `GetResolvedConnectString` to grab connection given a search result
* Changed `CreatePlayerUniqueId` to include size parameter for safety



## Upgrade Notes

#### Editor and Tools
* **Play In Editor** viewports will no longer immediately take focus from the editor on Play, but on first click.
	* A new preference section has been added to **Editor Settings > Play In > Play in Editor**.
	* To turn on immediate mouse control enable **Game Gets Mouse Control**.
* The **Launch On** button is currently hidden while we re-implement the underlying functionality to launch on devices
* Changed mutex to be named per-branch to allow several branches to run simultaneously 
* **Slate**
	* Modified the **Slate** context window dismissal order so non menu stack windows do the input focus handover before being destroyed. 
	* Modified `SInlineEditableTextBlock` to override the `SEditableTextBox` font with the font from the `InArgs._Style` provided the `InArgs._Style` is valid, so the Styles remain consistent where possible.
	* Converted the user notification for adding an actor to a locked level to a **Slate** UI notification. 
* Undo/redo now works for creation of sockets in the **Static Mesh Editor**.
* Undo/redo now works for Track and group renames in **Matinee**.
* Replaced the `LocalizeUnrealEd` calls with `LOCTEXT`/`NSLOCTEXT` and refactored a lot of other calls that used localization methods such as `UE_LOG`.
* Moved the **Grid** menu option from **Advanced** and into the main **Show** menu.
* Changed the level of detail (LOD) popup ok messages to notifications instead.
* Copy/paste of collision in **Static Mesh Editor** now updates the viewport correctly.
* Adding a level now remembers what folder you added from last.
* Moved the Hide UI toggle from the viewport to the View toolbar.
* Removed the **Select all with same Archetype** menu option.
* Double clicking an actor in the **Level Editor** viewport now focuses the camera on that selection.
* Giving an actor a blank name now displays a error notification.
* Added Undo/redo functionality to the **Material Instance Editor**.
* Changed the **PhAT** Body Physics Type menu options to radio buttons.
* `SWindow` now takes the desired client area size instead of window size as its construction parameter


#### Blueprints
* Health has been removed from Pawn, and Death has been removed from the engine.
	* Games will need to migrate the Health variable to their own Pawn classes if desired.
	* All sample games using health and death (eg QAGame, ShooterGame) have been updated to implement health/death on their own.
	* Some related events have been removed (OnDeath, OnPlayDying). Games may simply migrate those as well if desired.
* Character movement input bindings that were created in C++ for Blueprint classes have been removed.
	* These were previously enabled by default by a bool bAddDefaultMovementBindingsForBlueprint on Characters.
	* Blueprints will now need to add their own bindings (see the ThirdPersonTemplate_BP project for a simple example).
* Modified the string comparison to be case aware in OnNodeCommentTextCommitted so you can edit and correct node comment's text case.
* Added the ability to view variables for Variable Get/Set graph nodes in the Blueprint editor.
* Added a modifier key state (L/R Shift) to allow you move comments without moving the contents in the Blueprint editor.
* Modified the Filemenu Addtofavourites UI tooltip text to "add to favourites levels" instead of "Add to favourite files"
* Changed the message log filter button icons to match the message log entry icons.
* ShapeComponent : Support non-uniform scale when it can based on shape type. 
* DrawDebug functions supports more options for time(DrawOneFrame, DrawDuration, DrawPersistent) 


#### Gameplay and Framework
* Updated simple MoveToLocation and MoveToActor functions to return meaningful values
* Remove DynamicBlockingVolume DynamicPhysicsVolume and DynamicTriggerVolume
* Several runtime warnings now go to the 'Message Log' to make them more visible to designers
* On HUD, add ReceiveHitBoxRelease and remove InEventType from ReceiveHitBoxClick
* The target platform API for feature detection has been simplified; see `ITargetPlatform::SupportsFeature()`
* The settings API slightly changed; see existing usages for the required changes
* To enable messaging over the network, the `-Messaging` command line switch is required until further notice
* `AActor::Owner` is now a private variable.  Use Get/SetOwner to access/set.
* Gamepad key cleanup
	* Gamepad keys defined in `EKeys` enum no longer are called XboxTypeS_ and are instead Gamepad_
	* XBox specific keys `A`, `B`, `X`, `Y`, `Start`, and `Back` renamed to generic `FaceButton_Bottom`, `FaceButton_Right`, `FaceButton_Left`, `FaceButton_Top`, `Special_Right`, `Special_Left`
	* Epic Labs feature to show console specific labels for gamepads in dropdowns and _Blueprint_ labels.
	* Virtual up/down/left/right events for gamepad thumbsticks now hooked up
* `FObjectFinder` can no longer be used outside of class constructors. Any attempt to use it in other code will result in an assert.
* **Physics**
	* Collision trace type has been separated to [object type] vs [trace type]. Object types can be used as previously `MovementChannel` (now renamed to Object Type)
		* For your custom channels
			* If that type can be used as Object Type for objects, you should mark that as object types
			* If that type is used for trace in code, mark as Trace Type as below example:. 
			
					+DefaultChannelResponses=(Channel=ECC_GameTraceChannel1, Name=Weapon, bTraceType=true)

		* With this change, now we support "Trace for objects" APIs. This will let you find any objects with "given object types". 
		* The response against object type is used when the object moves or collide


####Rendering
* Material Property **RefractionBias** is now called **RefractionDepthBias**.


#### Animation
* _SingleAnimSkeletalComponent_ is removed. Now you can  use _SkeletalMeshComponent_ to do the same thing using AnimationMode.
* _SkeletalPhysicsActor_ is removed. Now you can use _SkeletalActor_ to do the same 
* SlaveComponent is supported in **Matinee** **AnimTrack**


#### Core
* Updated the `SaveConfig` functionality so if we do not want to write to a property to a saved config file (`.ini`)
* `TArray`'s int32 constructor to insert uninitialized objects has been removed as it was too easy to use incorrectly.  
	* The following explicit form should be used instead:
		
			TArray<int> Vals;
			Vals.AddUninitialized(Num);

* Globalization has been more accurately renamed as *Internationalization.
	* Update all references to these classes and configuration sections.
* `FText` message formatting no longer supports commented parameters. IE: `"{0?PlayerScore}"`
	* Use named parameters instead. IE: `"{PlayerScore}"`
* The `EAxis` enum has been renamed to `EAxisList::Type`. Client code will need to be changed to reflect this.
* `FMatrix`/`FTransform` axis functions now use EAxisList::Type rather than an integer to specify the axis. All usage will need to be changed.
* Visual Studio 2012 is now used by default  (2010 is still supported)
	* All games and programs now use the Visual C++ 11 compiler.
	* UE4 solution and project files are now generated in 2012-native format by default.
	* If you need to continue using Visual Studio 2010, you still can (for now!):
		* Set `WindowsPlatform.Compiler = WindowsCompiler.VisualStudio2010` in `UEBuildWindows.cs` 
		* Pass `-2012` to `GenerateProjectFiles.bat`
	* You may need to update your third-party *.Build.cs files for VS 2012 changes
		* `bUseVisualCPlusPlus11` has been changed to `WindowsPlatform.Compiler` in UnrealBuildTool
* New Visual Studio project layout
	* There is now only one project file for each game 
	* Build & Run projects are eliminated; Fake target projects are eliminated 
	* You now choose your _target type_ using the Solution Configuration dropdown 
		* To build and run the Cooked Game or Program, just use Debug or Development (no suffix) 
	* Project file generation and regular UBT builds run faster! 
	* We no longer include all platforms by default. Instead, you only get either Win64 or Mac. 
	* If you need to build other platforms, there is a new `GenerateProjectFiles_AllPlatforms.bat` file for that. 
	* Solution has flattened down to just four top-levels folders. 
	* All code is now under your game�s project file, organized the same way it is on the disk. 
	* Other notes 
	* Shipping and Test configurations are omitted by default. Pass `-ShippingConfigs` to get those. 
	* Rocket targets aren�t included in the project files by default. Pass `-RocketTargets` to get those. 
	* Non-English UDN files are now omitted from project files. Pass �-AllLanguages� to get those. 
	* Visual Studio no longer prompts you to overwrite `UE4.sln` every time you exit 
	* You can now skip IntelliSense generation with `-NoIntelliSense` if you want. 
	* WinRT is no longer considered a _desktop platform_ to UBT 
	* We removed Shipping and Test configs for Editor from the UI, because they aren�t supported in UE4 
* Changed DestroyActor to only detach SceneComponents attached to SceneComponents on the deleted actor. 
* Changed markdown process to leave variable and metadata refs in code blocks, spans and quotes ignored. 
* Improved regex used to handle PUBLISH tags to allow whitespace on the same line after tags 
* Game type refactor
	* Several game-related base classes were renamed
		* GameInfo is now GameMode
		* GameReplicationInfo is now GameState
		* PlayerReplicationInfo is now PlayerState
	* ReplicationInfo base class was removed.
	* Redirectors are in place and all uses of these classes should update seamlessly.
* Added exception check to error that shouldnt occur (but does) in CRU 
* Added domain exception handler to help track down obscure crash
* **UE4Redist has been replaced with UE4PrereqSetup**
	* To install prerequisites for running UE4 on Windows platform, we�ll now use the new `UE4PrereqSetup.msi` program. `UE4Redist.exe` should no longer be used and has been deleted from P4.  
	* In Perforce, UE4PrereqSetup is currently located in `//depot/UE4/Engine/Extras/Redist/en-us/UE4PrereqSetup.msi`
	* You should never really need to uninstall it, but if you need to just use the Control Panel to remove it like any other program.
 

#### Online
* Updated the Online Stats so that the stats part of leaderboards write we extracted to its own class 
* **Base OnlineSubSystem**
	* Added prefix for OnlineSubSystem logs 
	* Refactored profile interface into identity interface 
* **Facebook OnlineSubSystem**
	* Initial Facebook implementation for PC 
	* Allows login via browser window for retrieving access token 
	* Requests basic /me info using token if valid 
	* Added friends implementation for Facebook PC OnlineSubSystem 
* **MCP OnlineSubSystem**
	* Use the same consistent user auth method as everything else for account mapping requests 
	* Split service permissions into a set for client vs server 
	* Forced all hosts (listen / dedicated server) to use service permissions instead of user auth method for making Mcp requests 
	* Added new activation API to be used for detecting simultaneous login with the same credentials 
	* Added OnlineSubSystem MCP functionality needed to query external account info for a user 
		* Can be used to get display name from epic account 
	* Autologin creates a cached user account given an id & auth ticket 
	* Added `QUERYACCOUNT` for retrieving epic account info 
	* Renamed `ACCOUNTCREATION` exec to `CREATEACCOUNT` 
	* Added config option for disabling caching of downloaded mcp files (user,title) to disk 
	* Override mcp config section via command line override `-MCPCONFIG=<name> `
* **Http**
	* WinInet
		* Implemented `CancelRequest` for WinInet to finish a request that is already in flight 
		* Cancelling a request still calls all completion delegates 
		* Keep connection open using keep-alive functionality if available 


## Future Additions and Ongoing Efforts

#### Editor and Tools
* **Play In Editor** viewports don't propagate the first click in the window to the game, preventing accidental interaction when switching to the game from the editor.
* BSP surface resolve now uses W-buffering
* Updated **Curve Editor** to use a tabbed asset editor
* Reverted notifications so they don't pop in front of other apps.
* Improved load error message log output to be more useful to users
* Map check now adds a notification, rather than always popping up the log when building lighting
* Prevented crash when selecting actors in **Play In Editor**/**Simulate In Editor** modes
* Shared collections cannot be created if the project is not under source control.
* Prevented crash on NULL post process camera component.
* Updated disallowed characters to allow less-restrictive path names for projects
* Drag/drop Actors are only selected on drop, rather than on drag.
* Newly added packages are now saved before being added to source control via the path view context menu.
	* This prevents files being corrupted in Perforce 
* Parented **Level Browser** color picker to remove striped background.
* Drag-drop applying materials to BSP now correctly restores viewport focus
* Ensured HitProxy is refreshed when switching widget modes
* Material editor undo/redo does not undo/redo twice
* Prevented **Map Check** from incorrectly reporting that lighting needs rebuilding
* Prevented directory watcher crash on shutdown
* Small changes to the message log to help improve readability/usability.
* Ensures no longer stop video capture from working.
* Extender delegates added to all toolbars/menubars that support it.
* Correct parent now appears in project wizard when alternating selections.
* Approve tabs for closure when shutdown is already in effect.
* Additional ensure conditions added to help track down null node.
* Dragging from a node with **Context Sensitive** disabled now shows all possible actions.
* **Map Check** dropdown now displays the name of the world instead, to indicate that its not duplicate information.
* **Save Layout** now writes the users settings to disc.
* **Matinee** comboboxes now take up less space.
* **Level Editor** **Toolbar** now appears above the viewport.
* Default light is now closer to origin, just slightly out of view.
* Modified how detach is handled in the context menu. 
* Prevent notification spam while using property sliders.
* Crash no longer occurs when running movie after undoing recording.
* Allow editor to continue if a **Buffer Visualization** command is missing.
* Restore `DefaultSkeletalMesh` member of _PhysicalAssets_ when re-importing corresponding _SkeletalMesh_.
* Hidden actors are now respected when dragging assets into the level.
* **Matinee** viewport now specifies an `IsVisible()` function so that it will have its `Tick` called.
* Guard against null group pointer when removing levels.
* **New Level** dialog, scrollbar no longer overlaps thumbnails.
* **Generate Visual Studio Files** will now early out and warn the user if the `Source` folder is missing.
* **Crash Reporter** now correctly reports changelists and callstacks for UE4 crashes
* Default map settings were renamed and now save correctly
* Template maps that are auto-loaded on editor startup can no longer be saved to prevent accidental overwriting
* Drop-down menus are now displaying correctly if they're too large to fit either above or below the anchor widget
* Hitting **Alt + Enter** when in windowed mode no longer resizes the window, nor moves it, when restoring the window from fullscreen windowed mode.
* The **Message Log** tab is now a nomad tab, similar to the **Output Log** tab.
* The **Source Control** dialog in the **Editor Settings** are now reflected in the source control connection immediately.
* Optimized _Actor_ duplication in the **Level Editor**.
* Moving the pivot point with **Alt + Middle Mouse Button** when editing BSP brushes in orthographic view now works correctly.
* Placing a _Spotlight_ now has the correct default rotation (does not affect _Spotlights_ already placed).
* Selecting one color channel in the **Texture Editor** is now displayed as grayscale instead of modulated by the color of the channel.
* **Destructible Mesh Editor**:
	* Chunks can be selected in viewport and the properties of the selected chunks can be edited. - Succinct description 1
	* Updated icons for the view mode **Buffer Visualization** and the **Refresh** button.
* The majority of the editors dialogs have had their looks standardized. 
* Improved workflow for meshes with levels of detail (LODs) in the **Vertex Paint** tool.
* Running **Simulate** in the editor now invisibly executes a **Play In Editor** and then **Eject**.  This allows `ReceiveBeginPlay` to have been called on all actors in the simulated world.
* Renaming _Sockets_ in the **Static Mesh Editor** is now done inline.
* **Miscellaneous UI Updates**
	* Created new MapCheck icon at 16px and 40px. Requires code hook-up 
	* Created new tintable icons for the connected and disconnected animation pins and 1p28x icon (again tintable) for the animation result node. PNG assets only, require code hook-ups. 
	* Created new trash can icon to replace current **Clear All** array button icon - replaces existing PNG. 
	* Created a new 40px icon for **Destructible Mesh Editor** refresh button. 
	* Removed back view LCD from camera mesh, and added source assets. 
	* Replaced undo and redo icons actually used for Cascade this time! Not destructive - simple png replace. 
	* Revised 16px and 40px icon sizes for Save All Levels icon - Change List is PNG assets update only. 
	* Additional icons for _AimOffset1D_ and _BlendSpace1D_ (both require code hook-up). PNG updates only. 
	* Swapped out icon to a _f_ function symbol. Overwrites existing PNG asset only. 


#### Blueprints
* Renaming _Components_ in the **Blueprint Editor** is now done inline.
* Synthetic names in the title bar of _Level Blueprints_ have been changed to reflect the current map.
* **Promote to Variable** will now have the user set the name inline in the MyBlueprint window.
* Exec pins in the pin selector widget are no longer toggleable as arrays.
* Redesigned the UI for _User Defined Enums_ to use details customization.
* Toggling pin types to be references and arrays can now be done outside of the pop-up menu.
* Collapsed graphs can be renamed inside the graph node.
* The **Component** tab viewport in the **Blueprint Editor** now ticks particles.
* Added a right-click context menu to the **Timeline Editor** for improved usage.
* The transform gizmo is no longer visible in the preview viewport when a root component node is selected in **Components** mode within the **Blueprint eEitor**.
* Made access to the _Blueprint_ preview actor more efficient in **Components** mode of the **Blueprint Editor**.
* Multifonts have been removed.
* Improved debug instance selection when opening _Blueprints_. Editing a _Blueprint_ from the asset menu will find an instance to debug if there is one. Additionally the debug instance should now update correctly when editing subsequent _Blueprint_ instances.
* **FloatToString** kismet function now trims excess zeros.
* Function connections should now undo/redo correctly.
* **Ctrl + K** can once again be used to find an actor's reference in _Blueprints_.
* Improved UI in **Blueprint Editor**'s component mode
	* Simpler to use
	* Improved user feedback with class icons and a less tightly packed layout
	* Search box to quickly find components
	* Components are now grouped into _categories_
* Improved context menu options in _Level Blueprint_ when selecting multiple actors
* Improved Find in _Blueprint_ search results to prevent false positives when searching for numbers (removing the junk node index from search criteria) 
* Wired up all current types of graph nodes to automatically look for _rich tooltip_ style documentation (which will be added over time)
* Generalized the latent action manager to allow latent behavior in any type of _Blueprint_, not just actors (it also works on actors that don't otherwise tick).  Latent actions can also be declared in function libraries.
* Added touch enter/leave events and delegates to actors and primitive components 
* Prevented _State Machine_ entry nodes from being wired up to a conduit (which is not currently supported by the runtime)
* Prevented _AnimBlueprint_ instances from finishing initializing if their source _Blueprint_ had compile errors 
* Added cleanup code to remove NULL references from _Blueprint_ graph arrays (fixing very old Animation assets that were saved after deleting _State Machines_, which currently crash on load) 
* Made it impossible to drop variable nodes in graphs with an incompatible schema 
* Added the ability for graph drag-drop operations to query the hovered graph even when not over a node or pin 


#### Gameplay and Framework
* Behavior Trees system is still a WIP
* Loading Screens in progress.
* **World Browser**
	* Added support for joining as a client to a host with world composition
	* Added `ALevelBounds` actor for levels participating in world composition, which defines level bounding box. Can be updated automatically on level actors changes or used with just fixed bounds
	* Added loading bar to level tiles 
	* Added simulation view while in **Play In Editor**/**Simulate in Editor**
	* Levels which have bounds bigger than `WORLD_MAX` still will be visible in case level bounds intersects world bounds 
	* Added bottom status bar (mouse location, marquee rectangle size, world size) 
* Notification that _Skeleton_ needs to be saved to keep current _SkeletalMesh_ as default now only appears when there is a change, rather than always.
* A game viewport can now receive input from multiple game controllers each controlling a separate _Player Controller_.
* Made the component asset broker extendable 
* Added `AActor::bFindCameraComponentWhenViewTarget` to allow actors to opt out of using a _Camera Component_ where available when they are a view target 
* Ongoing development of **Unreal Automation Tool**
	* Unified **UnrealBuildTool** and **UnrealAutomationTool** logging systems
	* Added support for building programs 
	* Added platform abstraction layer and split `AutomationScripts.dll` into multiple (platform) DLLs.
* **Physics**
	* Player/Physics interaction: Player can push around physics objects while moving
		* Player can push away blocking physics-simulated objects and will generate a slight force on overlapping physics-simulated objects. 
		* The force the player applies to the objects can be setup in the _CharacterMovementComponent_. (see Category=Player Physics)


#### Rendering
* Removed **DOFOverrideTexture** feature - we will have a **BlurUI** feature instead - that allows to blur content behind UI elements 
* Added NVIDIA specific annotation to favor NVIDIA high performance GPU over slower integrated  
* Removed old shadow method since the new one was already the default for quite some time.
* Removed _+1_ on the bounding boxes (was once needed for physics, but that's not longer the case). It was causing issues on shading where it was using the enlarged bounding box.
* Disabled atmosphere for non-lit views
* Reduced **Landscape** Spline Z-fighting in the editor and made the spline lines render with the correct world-Z coordinate
* Photons are no longer blocked by back facing triangles in **Lightmass**. 
* Improved Directional Light's importance estimation in **Lightmass**.
* Added gamma space output to OpenGL ES2 renderer.
* Added EnvBRDF analytic approximation for OpenGL ES2.
* Removed `UPrimitiveComponent` pointers from renderer structures to make it harder to create race conditions accessing component properties directly from the rendering thread
* Warnings regarding level of detail (LOD) when manipulating emitters in **Cascade** are now more explicit.


#### Animation/Persona
* Added new _1D Blend Space_ icons to the editor for use in **Content Browser**
* Duplicating sockets in **Persona** now duplicate attached assets too
* Cached attached meshes in **Persona** so that they survive mode changes
* Renamed instances of _MID_ and _MIC_ to something more appropriate for users (_MaterialInstanceDynamic_ and _MaterialInstanceConstant_).
* You can now undo adding an Animation Sequence to a Skeletal Mesh. 
* **Persona** rotation/translation widget for bones/sockets/wind now looks and behaves correctly.
* Selecting an item in the **Skeleton Tree** tab in **Persona** no longer forces it to scroll to the top of the view.
* **Alt + Dragging** sockets in the **Skeleton Tree** will place the copy on the bone you drop it onto, rather than the original bone.
* World/Local space icons no longer render as black squares in **Persona**.
* **Copy Bone Names To Clipboard** feature no longer appends an underscore and number to the bone name.
* Renaming _Sockets_ in **Persona** is now done inline.
* Changed default **Persona** layout to have a home for the **Compiler Results** tab and **Find in Blueprints** tab (collapsed, at the bottom of the layout) 
* Generalized snap to socket support in the **Level Editor** to work on any _SceneComponent_ that contains sockets, instead of just _Skeletal Meshes_ and _Skeletons_
	
	[REGION:note]
	Currently preserving the behavior of only using true sockets - no bone snapping.
	[/REGION]
 

#### Audio
* _Ambient Sound_ now shown in the **Add Actor...** list, when right-clicking in a viewport.


#### Core
* Templated native base classes can now be used in `UCLASS` definitions, e.g.:
	
		UCLASS()
		class UMyClass : public UObject, public MyNativeClass<int>
		{
		};

* `TArray` now has a `FindByPredicate()` member function for use with function objects or lambdas:
	
		void Func(const TArray<int>& Ints)
		{
			// Try to find an odd number
			const int* Result = Ints.FindByPredicate([](int N) { return (N % 2) != 0; });
		}

* Enum spacers are now hidden from editor dialogues.
* `TAssetPtr` now works with `nullptr_t`.
* **Lightmass** built as a modular application again (**Swarm** depends on the **Core** and **SwarmInterface** DLLs it creates when building DLL-based) 
* Only call reset loaders on valid packages that are not in the root set during cooking. 
* Disparate word wrapping behaviors have been reconciled into one consistent, reusable algorithm.
* `GIsUnattended` has been replaced with `FApp::IsUnattended`. If you have any code that can be run on an unattended server, you will need to update it accordingly.
* We are now using a better hashing function for all pointers. The function was slightly adjusted to ignore the lower 4 bits of the pointer in 64-bit executables as they will be zero anyway.
* Added `GetObjectsOfClass()` and `GetDerivedClasses()` to `ObjectHash.h`.
	* These functions are now used to address a load time perf issue with _Blueprints_
* Added `PluginNameRedirects` to handle renamed plugins.
* Added a re-import button to the font editor.
* The **Asset Registry**'s API was changed to accept `FName` class names instead of `UClass` pointers
* Now only classes with `RequiredAPI` are allowed in the `SNewClassDialog` (with a few exceptions).
* Perforce Logs, Warnings, and Errors are now differentiated in the log file.
* Porting the engine and the editor to Mac OS
* Added Windows XP compiling and linking for Visual Studio 2012 
	* New `WindowsPlatform.SupportWindowsXP` flag (defaults to off for now) 
	* Requires Visual Studio 2012 Update 1 or higher to be installed! 
	* Implemented according to: [](http://blogs.msdn.com/b/vcblog/archive/2012/10/08/10357555.aspx )
* Deleted UnSetup and UEDocsURLHandler programs (no longer used)
* Improved error handling for module and plugin loading 
	* Enabled game plugins to now report errors when they fail to load
* Added **GeneratePackagingManifest()** to `ITargetPlatform`.
	* Generates packaging info given the **ChunkIDs** in the **Asset Registry**.  Primarily intended for generating `.pak` file lists for chunk based installs.
* Added asset availability and prioritization functions to `IAssetRegistry`.
	* These are basically simplified calls into the platform chunk install code, using the ChunkID stored on `FAssetDatas`.
* **Stats**
	* Better memory utilization.
	* `STAT NONE` will now work properly with the new stats system.
	* Stat captures may be initiated and stopped from Blueprints.
* **UnrealFrontend (UFE)**
	* Initial implementation of the launcher utilizing UnrealAutomationTool.
	* Switched UFE to be non-monolithic.
* Improve UnrealAutomationTool (UAT) to be able to work from a precompiled fallback so UAT can be run from a machine without Visual Studio or MSBuild
* Make sure UnrealAutomationTool builds UnrealHeaderTool even if it is not explicitly included when using XGE
* FMonitoredProcess allows for the creation of external processes that can be monitored by the Editor or Engine
* Reduced time for Unreal Build Tool hot-reload compiles by only processing required modules and sources.
* Changed all uses of BuildException in Unreal Build Tool that are thrown in response to a caught exception to propagate the inner exception.


#### Online

* Achievement interface for Steam/Null.

