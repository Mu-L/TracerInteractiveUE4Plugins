INTSourceChangelist:6537038
Title: 2013年9月版本说明
Crumbs:%ROOT%, Support/Builds
Description:
Availability:Licensee
Parent:Support/Builds
Order:-5
Order: 49

[TOC(start:2 end:2)]

## 版本信息


[REGION:simpletable]
| 项目| 信息|
| ----| ----|
| **标签**| QA_APPROVED_UE4_BUILD_2013_09|
| **变更列表编号**| 1844454|
| **VISUAL STUDIO 版本**| Microsoft Visual Studio 2012 版本 11.0.60610.01 更新 3|
| **DIRECTX**| 2010 年 6 月|
[/REGION]

## 重要信息

 * 当前引擎开发路线图：[虚幻引擎4 路线图](https://udn.unrealengine.com/questions/topics/roadmap.html)
 * 已修复的错误：[2013 年 9 月虚幻引擎4 中已修复的错误](UE4_Fixed_2013_September.xlsx)
 * 已知问题：[2013 年 9 月虚幻引擎4 突出问题](UE4_Bugs_2013_September.xlsx)
 

## 主要新功能

####编辑器工具
* **可视化越界像素**
	* 为超出对象边界的可视化像素添加了一个新显示标记。  
	![](OutofBoundsPixels04.png)

####蓝图

* **线性颜色型曲线和梯度编辑器**
	* 为时间轴添加了线性颜色型曲线支持，用户现在可以使用梯度编辑器来处理（仍然支持直接在其中编辑曲线）。您可以在内容浏览器中创建它们、将其导入内容浏览器、或者直接在蓝图时间轴编辑器中直接创建。
	
		![](LinearColor01.png)
	* 当用户打开颜色型曲线时，默认情况下，他们会看到梯度。对随时间改变的颜色进行可视化时，可以通过梯度来添加键。
	
		![](LinearColor02.png)
	
		（使用不透明度停止点）

		![](LinearColor03.png)
	* 梯度编辑器中可以使用以下功能：
		* 单击梯度上方或下方的深色区域可添加新颜色或不透明度停止点，按删除可移除所选停止点。
		* 双击停止点标记将打开该停止点的取色器（或不透明度滑块）。
		* 在停止点上单击左键并拖动将沿时间轴移动停止点。

		注意：在停止点上单击右键也可以使用此功能：
	* 用户仍可以手动编辑曲线和隐藏梯度编辑器。

* **对蓝图中服务器和客户端 RPC 的支持**
	* 为 _蓝图（Blueprint）_ 的服务器和客户端 RPC 添加了支持。
	* 以前，所有复制的蓝图事件是隐式不可靠组播。以前选中了 **已复制** 的任何对象现在都会显示为组播。
	这些事件的功能没有变化。

		![](ServerBlueprints.png)
	* 这三个设置镜像 C++ 原生关键字：NetMulticast、Server、Client。
		* 从实现角度看，标记为复制的蓝图函数/事件与 `UFUNCTION()` 标头中标记为复制的 C++ 函数没有区别。
	* 蓝图需要服务器 RPC 类型才能让客户端与服务器通信。只有在服务器上才会执行服务器 RPC。
	* 只有拥有执行事件图表的 Actor 的客户端可以调用服务器 RPC。
	* 为了保证完整性，现在还可以选择客户端 RPC。只会将客户端 RPC 发送到所属的客户端。
	* 最后，还可以检查蓝图 RPC 的可靠性。这样做也是为了保证完整性，但并非必须如此。
		* 默认情况下，蓝图 RPC 不可靠，且几乎始终不可靠。
		* 如果确定需要可靠性，用户也只能使函数可靠。
		* 可以设置控制台变量 `net.Reliable.Debug 1`，以打印可靠网络流量。

* **应用/重置实例为蓝图默认值**
	* 当选定 _（蓝图 Actor）Blueprint Actor_ 实例时， **关卡编辑器** 的 **详细信息（Details）** 选项卡的 **蓝图（Blueprint）** 部分会显示两个新按钮 - **应用（Apply）** 和 **重置（Reset）** - 在 **编辑（Edit）** 按钮旁。
		* 一旦更改实例，使其与默认值不同，则会启用 **应用（Apply）**；单击 **应用（Apply）** 可使用实例更改更新 _蓝图（Blueprint）_ 默认值，如有其他实例的值没有发生更改，仍使用 _蓝图（Blueprint）_ 默认值，继而将更新的默认值传播至所有这些 _蓝图（Blueprint）_ 实例。
		* 与此类似，单击 **重置（Reset）** 可将所选实例恢复至 _蓝图（Blueprint）_ 默认值。

		![](ApplyResetBlueprintDefaults.png)

* **HUD 上的鼠标 HitBox**
	* 您现在可以在 HUD 中绘制特殊 _命中框（Hit Box）_，因此可以构建具有简单鼠标交互的 HUD 和菜单。

		![](MouseHitBoxes.png)

* **_自动插入（Auto Insert）_ 节点**
	* 现在通过引脚拖动添加新节点会将其插入现有链中。

		![](AutoInsertNodes.png)

* **改进了“添加组件”（Add Component）下拉列表**
	* 现在提供了一个搜索框，_一键（one-click）_ 添加、图标和类别。

		![](AddComponentDropdown.png)             

* **更改 Actor 引用**
	* 现在可以轻松在 _关卡蓝图（Level Blueprint）_ 中将 Actor 引用更改为当前选择。

		![](ChangeActorReference.png)

* **改进了多个选中的 Actor 的处理**
	* 现在就像处理 Kismet 1 一样，使用连接的多个 Actor 引用添加一个 _调用函数（Call Function）_ 节点。

		![](BetterHandlingforMultipleSelectedActors.png)

* **新库函数**
	* 添加了新蓝图库函数！

		![](NewLibraryFunctions.png)
	
	[REGION:note]
	某些函数开销巨大，为了确保性能，应谨慎使用。
	[/REGION]

* **Actor 外的 Latent 函数**
	* Latent 函数（如 Delay）现在可在任何 _蓝图（Blueprint）_ 中使用！

		![](LatentFunctionsOutsideActors.png)

* **接口编辑器模式**
	* 编辑接口时，现在提供了一种称为 **接口** 的特殊模式。在这种模式下，您可以仅包含需要的接口。
 
		![](InterfaceEditorMode.png)

* **在任何位置附加创建的组件**
	* 您现在可以拖放创建的 _组件（Components）_，以便将其附加到原生场景组件层级中的任何位置。
	* 此外，您还可以将在子 _蓝图（Blueprint）_ 中创建的 _组件（Component）_ 附加到从父蓝图继承的 _SceneComponent_ 层级的任何部分。

		![](AttachCreatedComponentsAnywhere.png)

* **默认场景根组件**
	* 以前，此组件在实例化没有任何 _SceneComponents_ 的 _蓝图（Blueprint）_ 时隐式创建。
	* 现在，当用户创建基于 Actor 的新 _蓝图（Blueprint）_ 时，如果还没有 _SceneComponents_，它将显示在 **组件** 模式列表中，以便为其设置默认值。

		![](DefaultSceneRoot.png)
	* 一旦添加 _SceneComponent_，则会将其交换成新 _组件（Component）_，而新组件随后会变成新的根组件。

* **节点的快捷键**
	* 您现在可以按住一个键并单击来快速放置节点！

		![](ShortcutsforNodes.png)

	* 下面是现有快键键的列表。在 `UserSettings.ini` 文件中可以添加更多快捷键，也可以使用 _（蓝图）Blueprints_ 的 **快捷键（Keybindings）** 接口设置！
		
		| 节点| 按键|
		| ---| ---|
		| **ReceiveBeginPlay**| P|
		| **DoN**|	N|
		| **DoOnce**| O|
		| **Delay**| D|
		| **Branch**| B|
		| **Sequence**| S|
		| **Gate**| G|
		| **MultiGate**| M|
		| **ForLoop**| F|


* **变换的 3D 控件**

	* 现在可以在场景中为变换属性和矢量属性创建控件，因此，您可以交互式编辑旋转和缩放。

		![](3dwidgetsonTransforms.png)


## 新增内容

#### 编辑器和工具
* 在获取或放弃鼠标控制时，**在编辑器中运行（Play In Editor）** 视口有一个可选通知标签。
	* 在新的首选项部分：**编辑器设置（Editor Settings）> 运行于（Play In）> 在编辑器中运行（Play in Editor）**
	* 启用 **显示鼠标控制标签（Show Mouse Control Label）**。
	* 从下拉菜单 **鼠标控制标签位置（Mouse Control Label Position）** 中选择视口中的所需位置。
* 对于支持的资源，现在可从资源（Asset）菜单中重新导入选项。
* 在保存内容窗口中，现在为资源提供了区分（Diff）选项。
* 空贴图现在有默认光源和玩家出生点。
* 现在删除关卡时会显示一条上下文敏感警告消息，可将其取消。
* Actor 选择现在会延续到 **在编辑器中运行（Play In Editor）**/**在编辑器中模拟（Simulate In Editor）** 会话，并在结束时返回编辑器。
* 资源编辑器插件扩展点现在全部具有上下文敏感性，它会识别正在编辑的资源。
* **可破坏物网格体编辑器**：将 FBX 文件作为深度 1 可破坏物块导入
* 使用线性颜色型曲线时，为线性颜色型曲线添加了支持，并将梯度停止点编辑器添加到了曲线编辑器中。
* **Slate**
	* 为 `STableViewBase` 添加了文本样式，更新了默认样式，`FTableRowBrushes` 现在称为 `FTableRowStyles`
	* 没有内容的 `SButton` 现在会根据其样式图像确定大小。
* 将变换和摄像机速度功能按钮移到了显示在编辑器活动视口中的新工具栏上。


#### 蓝图
* 添加了 `ExpandEnumAsExecs` 元数据支持。因此，可将函数列举参数公开为多个执行输入。
* 将 **GetAllActorsOfClass**、**GetActorArrayAverageLocation**、**GetActorArrayBounds**、**MoveActorToActor** 添加到了 `GameplayStatics`
* 添加了 **MoveComponentTo** Latent 函数，以便按时间插入组件位置/旋转的值。
* 为 _蓝图（Blueprint）_ 中的 `FText` 提供了额外支持
* 将 **GetVectorArrayAverage**、**GetMinElement**、**GetMaxElement** 添加到了 `MathLibrary`
* 将 **RotateVector** 和 **UnrotateVector** 函数添加到了旋转体。
* 编辑时，预览窗口中的组件现在可以实时更新（与关卡编辑器一致）。
* 为两者都添加了一个功能，以便允许将蓝图 Actor 实例更改应用到该资源的 _蓝图（Blueprint）_ 默认值，以及将 _蓝图（Blueprint）_ Actor 实例重置回 _蓝图（Blueprint）_ 默认值。
* 对用户创建的根组件节点（作为原生或继承组件节点的父节点），现在可以编辑变换默认值。
* 当 **在编辑器中运行**/**在编辑器中模拟** 会话活动时，现在可以更改 _蓝图（Blueprint）_ 默认值，且更改会传播至该会话中的 Actor。
* 在 **蓝图编辑器** 中，为 **组件** 模式和 **默认值** 模式的 **详细信息（Details）** 视图中的公开和编辑变换默认值添加了支持。
* 现在可以将 _蓝图（Blueprint）_ 附加到 _蓝图（Blueprint）_ 实例。
* 将 `bTraceComplexOnMove` 添加到了 `PrimitiveComponent`，从而在图元移动扫描中允许复杂几何体碰撞。
* K2Nodes 现在可以定义自己的扩展步骤，并指定要使用的节点处理程序，从而允许插件和游戏特定模块定义自定义节点，而不需要修改 `KismetCompiler.cpp`
* 添加了新的 **OpenWorld** _关卡蓝图（Level Blueprint）_ 可调用函数，以便打开另一个贴图

 
#### Gameplay 和框架
* 为 AI 逻辑技术引入了基类 `UBrainComponent`
* 扩展了 `AIController` 的“移动完成”组播委托，以便发送完成的移动请求 ID 和结果。
* `StaticMesh` 现在支持 `AssetUserData` 对象存储项目特定数据，而无需修改引擎。
* 在 `FTransform` 属性中添加了 3D 控件支持
	* 在屏幕控件中固定了蓝色菱形控件的大小。
* 添加了简单保存游戏系统的功能。其目的不是为了捕获完整的场景状态。_蓝图（Blueprint）_ 可供访问。
* 屏幕截图现在可以像视频一样显示通知。
* 地图检查现在可以打印摘要，以便用户知道已完成检查。
* `PlayerController` 和 `GameInfo` 现在是 _蓝图（Blueprint）_ 的新资源对话框默认类型。
* **根运动**
	* 为 AnimMontages 提供的根运动添加了支持。
	* 为模拟代理进行联网。支持位置校正、平滑错误修复，非缓存平滑动画。
	* 实现了客户端到服务器联网，且具有客户端预测和校正。
		* 物理在运行物理之前调用动画 `TickPose()`，以确保在提取根运动时使用相同的时间。
		* 在服务器上，从 `MoveAutonomous` 调用动画 `TickPose()`，从而确保为状态、通知和事件使用客户端时间。
* **玩家移动联网**
	* 客户端和服务器以同样的方式计算差量时间，以便在两者之间保持物理模拟准确。客户端上的其他时间戳以常规时间间隔重置，从而保持高度准确。模拟可能会累积越来越多的错误，并增加位置校正次数和使用的带宽。
	* 如果服务器上的一帧需要执行多次位置校正，则发送最新的校正，而非最旧的。
* 重构了 `ReplicatedMovement`，以使用复制的事件。删除了静态变量，以检查是否发生了任何更改。
* 添加了 `APawn::MoveIgnoreActorAdd` 和 `APawn::MoveIgnoreActorRemove`，以便添加或删除 Pawn 运动碰撞要忽略的 Actor。
* `UCharacterMovementComponent::InitCollisionParams` 现在会考虑 `MoveIgnoreActors` 列表。
* 主文件（File）菜单中现有打包项目（Package Project）选项；本版本中仅支持 Windows。
* **设置 UI**
	* 添加了多个新部分
	* 大多数部分现在支持重置为默认（Reset-To-Default）
* 为调用 `FUniqueNetIdRepl` 的在线平台 FUniqueNetId 添加了一个封装器，使用它可通过 RPC/复制传送唯一 ID
* 所有序列化按 `ExportTextItem` 原样实施（网络/文件），所以可以使用 `obj dump` 和 `displayall`
* `AttachRootComponentToActor` 现在会将附件复制到客户端，并在附件持续期间停止移动模拟
* 在仅蓝图游戏中，蓝图中可以使用 `bAlwaysRelevant` 来实现更多复制控制
* 将 UDKRemote 集成到了虚幻引擎4 中，并针对 iOS SDK 6.1 编译进行了更新
* 正交 Gameplay 摄像机改进：
	* 更新了 Gameplay 正交摄像机，以便将摄像机位置用作近平面，而不是 `-WORLD_MAX`
	* 从 Gameplay 正交摄像机删除了 `OrthoZoom`，并将其替换成 `OrthoWidth`（屏幕以虚幻单位计的水平尺寸）
* FCanvasBorderItem，可使用平铺框和平铺背景绘制 3x3 边框、支持框和背景缩放
	* 屏幕资源需要单独的纹理，因为它不使用着色器来计算平铺
* 重构了许多与确定拥有 Actor 及其设置/拆卸相关的网络代码


#### 渲染
* Visualizetexture/vis 现在可过滤更多项目并减缓了排序（输入“vis ?”获取帮助）
* 添加了多个可延展性控制台变量
* 为 DX11 和 OpenGL RHI 实现了定时器查询
* 添加了试验性的屏幕空间次表面散射 - 目前只有最基本的功能 (r.SSSSS 1)
* 现在将 GPUBenchmark 添加到了 SynthBenchmark 中（已知问题：在速度过于缓慢的 GPU 上会超时）
* 屏幕空间光束
	* 两种单独的光束类型：遮蔽仅影响雾气/大气的光照，且对不基于物理的对象泛光
* 添加了 **VisualizeOutOfBoundsPixels** 显示标记，用于在剥离模式下可视化超出其边界的颜色像素
* 反射环境立方体贴图缓存在 DerivedDataCache 中，所以不需要在每次加载时重新捕获这些贴图
* 可将立方体贴图数据烘焙到包中
	* 遗憾的是它在某些情况下会失败，因为派生的数据只能由 GPU 生成，所以在烘焙期间无法生成。
* 可移动半透明间接光照缓存上的漫反射为每个对象插入单个值
* 添加了新的半透明光照模式 _TLM_Surface_，可获取适用于间接高光度的最近的反射捕获立方体贴图
* UnrealBuildTool 允许多个实例同时构建各自的分支
	* 以前，在运行的实例完成之前，会阻止 UnrealBuildTool 的新实例。现在，如果多个实例位于各自的分支（不同的虚幻引擎4 根文件夹路径）中，您可以同时运行这些实例。
* **电影后期**
	* 这会更改色调映射器并将新电影后期处理控件添加到后期处理体积中。
* 添加了 `r.BloomQuality` 控制台变量。
	* 增加/减少了泛光后期处理操作所需要后期处理传递次数。


#### 动画
* 创建了带 1 个参数（_BlendSpace1D_，与 2D 的原始 _混合空间（BlendSpace）_ 相反）的新类型 _混合空间（BlendSpace）_
*在 **角色管理器** 中添加了一个查看/编辑骨架动画通知的新选项卡
* 播放插槽节点动画
	* 在插槽节点上播放动画不再要求必须执行蒙太奇。只需使用 _AnimSequence_ 或 _AnimComposite_ 即可播放插槽节点动画。


#### 音频
* 为状态机图表和 Sound Cue 添加了注释框。
* 包络线声音节点现在允许视觉效果曲线编辑和使用浮点型曲线资源。


#### 核心
* Visual Studio 2012 现在可以编译 32 位游戏。
* FText 消息格式化功能现在支持参数的数组。
* FText 消息格式化功能现在支持命名参数。IE：`"{PlayerScore}"`
* 添加了 Linux 平台支持（仅游戏服务器）
* 现在使用 UProject 文件确定项目模块的模块加载顺序。
	* 现在项目仍会在起始时间加载主游戏模块，但您现在可以使用选项在启动的不同时间加载项目的模块。
	* 添加了新的文件格式 `.upluigin`，它与 `.uplugin` 文件格式非常相似。在模块描述符中使用 `LoadingPhase` 属性可实现此目的。
	* 有关编写 `.uproject` 文件的帮助，请参阅插件文档：[插件](https://udn.unrealengine.com/docs/ue4/INT/Programming/Plugins/index.html)
	* 运行时现在需要 `.uproject` 文件，且此文件包含在 pak 文件中。
* 为虚幻编译工具实现了 GEXF 图表输出
	* 新的 `-graph` 选项会将构建依赖性图表发送给 ActionGraph.gexf
	* （该文件保存在引擎中间 BuildData 子目录中）
	* 默认情况下，它还会发送 C++ 包含依赖性网络
	* 这些文件可加载到 Gephi 中，从而为图表网络创建有趣的可视化
* 添加了 `UE4PrereqSetup.msi` 安装程序
	* 用于替换 UE4Redist.exe，并安装运行虚幻引擎4 所需要的先决条件
* 将行为树从游戏移到了引擎关卡中，且可供被许可人使用
* 将行为树的基本编辑器添加到了编辑器中
* 将导航数据导出器（`ExportNavigation` 控制台命令）添加到了引擎中，从而将碰撞几何体（从视图导航点）导出至到 OBJ 文件，以便执行导航调试。


#### 在线
* 添加了 http 请求/响应对的 IOS 实现
* 使用游戏中心创建了在线成就界面并添加了 IOS 实现
* 创建了新的 `IOnlineAchievements` 界面，其中所有 OSS 将用于提供其成就实现
	* 为所有现有 OnlineSubSystem 添加了 `OnlineSubSystem::GetAchievementsInterface`。Atm，全部返回空值（IOS 除外）
* 为在线成就测试添加了 `TestAchievementsInterface`。这会获取成就，获取描述，编写成就并处理解锁的成就。
* 为游戏中心会话添加了支持。
* 为游戏中心好友添加了支持。
* 为游戏中心排行榜添加了支持。
* 为游戏中心身份/配置文件添加了支持。
* 为在线子系统添加了商店界面，以便在平台上执行小交易。
* 为 IOS 添加了应用内购买支持
* 添加了 `GetResolvedConnectString`，以便获取提供搜索结果的连接
* 为了安全，更改了 `CreatePlayerUniqueId`，以便包含大小参数



## Upgrade Notes （以下内容仅供参考，不作翻译）

#### Editor and Tools
* **Play In Editor** viewports will no longer immediately take focus from the editor on Play, but on first click.
	* A new preference section has been added to **Editor Settings > Play In > Play in Editor**.
	* To turn on immediate mouse control enable **Game Gets Mouse Control**.
* The **Launch On** button is currently hidden while we re-implement the underlying functionality to launch on devices
* Changed mutex to be named per-branch to allow several branches to run simultaneously 
* **Slate**
	* Modified the **Slate** context window dismissal order so non menu stack windows do the input focus handover before being destroyed. 
	* Modified `SInlineEditableTextBlock` to override the `SEditableTextBox` font with the font from the `InArgs._Style` provided the `InArgs._Style` is valid, so the Styles remain consistent where possible.
	* Converted the user notification for adding an actor to a locked level to a **Slate** UI notification. 
* Undo/redo now works for creation of sockets in the **Static Mesh Editor**.
* Undo/redo now works for Track and group renames in **Matinee**.
* Replaced the `LocalizeUnrealEd` calls with `LOCTEXT`/`NSLOCTEXT` and refactored a lot of other calls that used localization methods such as `UE_LOG`.
* Moved the **Grid** menu option from **Advanced** and into the main **Show** menu.
* Changed the level of detail (LOD) popup ok messages to notifications instead.
* Copy/paste of collision in **Static Mesh Editor** now updates the viewport correctly.
* Adding a level now remembers what folder you added from last.
* Moved the Hide UI toggle from the viewport to the View toolbar.
* Removed the **Select all with same Archetype** menu option.
* Double clicking an actor in the **Level Editor** viewport now focuses the camera on that selection.
* Giving an actor a blank name now displays a error notification.
* Added Undo/redo functionality to the **Material Instance Editor**.
* Changed the **PhAT** Body Physics Type menu options to radio buttons.
* `SWindow` now takes the desired client area size instead of window size as its construction parameter


#### Blueprints
* Health has been removed from Pawn, and Death has been removed from the engine.
	* Games will need to migrate the Health variable to their own Pawn classes if desired.
	* All sample games using health and death (eg QAGame, ShooterGame) have been updated to implement health/death on their own.
	* Some related events have been removed (OnDeath, OnPlayDying). Games may simply migrate those as well if desired.
* Character movement input bindings that were created in C++ for Blueprint classes have been removed.
	* These were previously enabled by default by a bool bAddDefaultMovementBindingsForBlueprint on Characters.
	* Blueprints will now need to add their own bindings (see the ThirdPersonTemplate_BP project for a simple example).
* Modified the string comparison to be case aware in OnNodeCommentTextCommitted so you can edit and correct node comment's text case.
* Added the ability to view variables for Variable Get/Set graph nodes in the Blueprint editor.
* Added a modifier key state (L/R Shift) to allow you move comments without moving the contents in the Blueprint editor.
* Modified the Filemenu Addtofavourites UI tooltip text to "add to favourites levels" instead of "Add to favourite files"
* Changed the message log filter button icons to match the message log entry icons.
* ShapeComponent : Support non-uniform scale when it can based on shape type. 
* DrawDebug functions supports more options for time(DrawOneFrame, DrawDuration, DrawPersistent) 


#### Gameplay and Framework
* Updated simple MoveToLocation and MoveToActor functions to return meaningful values
* Remove DynamicBlockingVolume DynamicPhysicsVolume and DynamicTriggerVolume
* Several runtime warnings now go to the 'Message Log' to make them more visible to designers
* On HUD, add ReceiveHitBoxRelease and remove InEventType from ReceiveHitBoxClick
* The target platform API for feature detection has been simplified; see `ITargetPlatform::SupportsFeature()`
* The settings API slightly changed; see existing usages for the required changes
* To enable messaging over the network, the `-Messaging` command line switch is required until further notice
* `AActor::Owner` is now a private variable.  Use Get/SetOwner to access/set.
* Gamepad key cleanup
	* Gamepad keys defined in `EKeys` enum no longer are called XboxTypeS_ and are instead Gamepad_
	* XBox specific keys `A`, `B`, `X`, `Y`, `Start`, and `Back` renamed to generic `FaceButton_Bottom`, `FaceButton_Right`, `FaceButton_Left`, `FaceButton_Top`, `Special_Right`, `Special_Left`
	* Epic Labs feature to show console specific labels for gamepads in dropdowns and _Blueprint_ labels.
	* Virtual up/down/left/right events for gamepad thumbsticks now hooked up
* `FObjectFinder` can no longer be used outside of class constructors. Any attempt to use it in other code will result in an assert.
* **Physics**
	* Collision trace type has been separated to [object type] vs [trace type]. Object types can be used as previously `MovementChannel` (now renamed to Object Type)
		* For your custom channels
			* If that type can be used as Object Type for objects, you should mark that as object types
			* If that type is used for trace in code, mark as Trace Type as below example:. 
			
					+DefaultChannelResponses=(Channel=ECC_GameTraceChannel1, Name=Weapon, bTraceType=true)

		* With this change, now we support "Trace for objects" APIs. This will let you find any objects with "given object types". 
		* The response against object type is used when the object moves or collide


####Rendering
* Material Property **RefractionBias** is now called **RefractionDepthBias**.


#### Animation
* _SingleAnimSkeletalComponent_ is removed. Now you can  use _SkeletalMeshComponent_ to do the same thing using AnimationMode.
* _SkeletalPhysicsActor_ is removed. Now you can use _SkeletalActor_ to do the same 
* SlaveComponent is supported in **Matinee** **AnimTrack**


#### Core
* Updated the `SaveConfig` functionality so if we do not want to write to a property to a saved config file (`.ini`)
* `TArray`'s int32 constructor to insert uninitialized objects has been removed as it was too easy to use incorrectly.  
	* The following explicit form should be used instead:
		
			TArray<int> Vals;
			Vals.AddUninitialized(Num);

* Globalization has been more accurately renamed as *Internationalization.
	* Update all references to these classes and configuration sections.
* `FText` message formatting no longer supports commented parameters. IE: `"{0?PlayerScore}"`
	* Use named parameters instead. IE: `"{PlayerScore}"`
* The `EAxis` enum has been renamed to `EAxisList::Type`. Client code will need to be changed to reflect this.
* `FMatrix`/`FTransform` axis functions now use EAxisList::Type rather than an integer to specify the axis. All usage will need to be changed.
* Visual Studio 2012 is now used by default  (2010 is still supported)
	* All games and programs now use the Visual C++ 11 compiler.
	* UE4 solution and project files are now generated in 2012-native format by default.
	* If you need to continue using Visual Studio 2010, you still can (for now!):
		* Set `WindowsPlatform.Compiler = WindowsCompiler.VisualStudio2010` in `UEBuildWindows.cs` 
		* Pass `-2012` to `GenerateProjectFiles.bat`
	* You may need to update your third-party *.Build.cs files for VS 2012 changes
		* `bUseVisualCPlusPlus11` has been changed to `WindowsPlatform.Compiler` in UnrealBuildTool
* New Visual Studio project layout
	* There is now only one project file for each game 
	* Build & Run projects are eliminated; Fake target projects are eliminated 
	* You now choose your _target type_ using the Solution Configuration dropdown 
		* To build and run the Cooked Game or Program, just use Debug or Development (no suffix) 
	* Project file generation and regular UBT builds run faster! 
	* We no longer include all platforms by default. Instead, you only get either Win64 or Mac. 
	* If you need to build other platforms, there is a new `GenerateProjectFiles_AllPlatforms.bat` file for that. 
	* Solution has flattened down to just four top-levels folders. 
	* All code is now under your game's project file, organized the same way it is on the disk. 
	* Other notes 
	* Shipping and Test configurations are omitted by default. Pass `-ShippingConfigs` to get those. 
	* Rocket targets aren't included in the project files by default. Pass `-RocketTargets` to get those. 
	* Non-English UDN files are now omitted from project files. Pass '-AllLanguages' to get those. 
	* Visual Studio no longer prompts you to overwrite `UE4.sln` every time you exit 
	* You can now skip IntelliSense generation with `-NoIntelliSense` if you want. 
	* WinRT is no longer considered a _desktop platform_ to UBT 
	* We removed Shipping and Test configs for Editor from the UI, because they aren't supported in UE4 
* Changed DestroyActor to only detach SceneComponents attached to SceneComponents on the deleted actor. 
* Changed markdown process to leave variable and metadata refs in code blocks, spans and quotes ignored. 
* Improved regex used to handle PUBLISH tags to allow whitespace on the same line after tags 
* Game type refactor
	* Several game-related base classes were renamed
		* GameInfo is now GameMode
		* GameReplicationInfo is now GameState
		* PlayerReplicationInfo is now PlayerState
	* ReplicationInfo base class was removed.
	* Redirectors are in place and all uses of these classes should update seamlessly.
* Added exception check to error that should not occur (but does) in CRU 
* Added domain exception handler to help track down obscure crash
* **UE4Redist has been replaced with UE4PrereqSetup**
	* To install prerequisites for running UE4 on Windows platform, we'll now use the new `UE4PrereqSetup.msi` program. `UE4Redist.exe` should no longer be used and has been deleted from P4.  
	* In Perforce, UE4PrereqSetup is currently located in `//depot/UE4/Engine/Extras/Redist/en-us/UE4PrereqSetup.msi`
	* You should never really need to uninstall it, but if you need to just use the Control Panel to remove it like any other program.
 

#### Online
* Updated the Online Stats so that the stats part of leaderboards write we extracted to its own class 
* **Base OnlineSubSystem**
	* Added prefix for OnlineSubSystem logs 
	* Refactored profile interface into identity interface 
* **Facebook OnlineSubSystem**
	* Initial Facebook implementation for PC 
	* Allows login via browser window for retrieving access token 
	* Requests basic /me info using token if valid 
	* Added friends implementation for Facebook PC OnlineSubSystem 
* **MCP OnlineSubSystem**
	* Use the same consistent user auth method as everything else for account mapping requests 
	* Split service permissions into a set for client vs server 
	* Forced all hosts (listen / dedicated server) to use service permissions instead of user auth method for making Mcp requests 
	* Added new activation API to be used for detecting simultaneous login with the same credentials 
	* Added OnlineSubSystem MCP functionality needed to query external account info for a user 
		* Can be used to get display name from epic account 
	* Autologin creates a cached user account given an id & auth ticket 
	* Added `QUERYACCOUNT` for retrieving epic account info 
	* Renamed `ACCOUNTCREATION` exec to `CREATEACCOUNT` 
	* Added config option for disabling caching of downloaded mcp files (user,title) to disk 
	* Override mcp config section via command line override `-MCPCONFIG=<name> `
* **Http**
	* WinInet
		* Implemented `CancelRequest` for WinInet to finish a request that is already in flight 
		* Cancelling a request still calls all completion delegates 
		* Keep connection open using keep-alive functionality if available 


## Future Additions and Ongoing Efforts

#### Editor and Tools
* **Play In Editor** viewports don't propagate the first click in the window to the game, preventing accidental interaction when switching to the game from the editor.
* BSP surface resolve now uses W-buffering
* Updated **Curve Editor** to use a tabbed asset editor
* Reverted notifications so they don't pop in front of other apps.
* Improved load error message log output to be more useful to users
* Map check now adds a notification, rather than always popping up the log when building lighting
* Prevented crash when selecting actors in **Play In Editor**/**Simulate In Editor** modes
* Shared collections cannot be created if the project is not under source control.
* Prevented crash on NULL post process camera component.
* Updated disallowed characters to allow less-restrictive path names for projects
* Drag/drop Actors are only selected on drop, rather than on drag.
* Newly added packages are now saved before being added to source control via the path view context menu.
	* This prevents files being corrupted in Perforce 
* Parented **Level Browser** color picker to remove striped background.
* Drag-drop applying materials to BSP now correctly restores viewport focus
* Ensured HitProxy is refreshed when switching widget modes
* Material editor undo/redo does not undo/redo twice
* Prevented **Map Check** from incorrectly reporting that lighting needs rebuilding
* Prevented directory watcher crash on shutdown
* Small changes to the message log to help improve readability/usability.
* Ensures no longer stop video capture from working.
* Extender delegates added to all toolbars/menubars that support it.
* Correct parent now appears in project wizard when alternating selections.
* Approve tabs for closure when shutdown is already in effect.
* Additional ensure conditions added to help track down null node.
* Dragging from a node with **Context Sensitive** disabled now shows all possible actions.
* **Map Check** dropdown now displays the name of the world instead, to indicate that its not duplicate information.
* **Save Layout** now writes the users settings to disc.
* **Matinee** comboboxes now take up less space.
* **Level Editor** **Toolbar** now appears above the viewport.
* Default light is now closer to origin, just slightly out of view.
* Modified how detach is handled in the context menu. 
* Prevent notification spam while using property sliders.
* Crash no longer occurs when running movie after undoing recording.
* Allow editor to continue if a **Buffer Visualization** command is missing.
* Restore `DefaultSkeletalMesh` member of _PhysicalAssets_ when re-importing corresponding _SkeletalMesh_.
* Hidden actors are now respected when dragging assets into the level.
* **Matinee** viewport now specifies an `IsVisible()` function so that it will have its `Tick` called.
* Guard against null group pointer when removing levels.
* **New Level** dialog, scrollbar no longer overlaps thumbnails.
* **Generate Visual Studio Files** will now early out and warn the user if the `Source` folder is missing.
* **Crash Reporter** now correctly reports changelists and callstacks for UE4 crashes
* Default map settings were renamed and now save correctly
* Template maps that are auto-loaded on editor startup can no longer be saved to prevent accidental overwriting
* Drop-down menus are now displaying correctly if they're too large to fit either above or below the anchor widget
* Hitting **Alt + Enter** when in windowed mode no longer resizes the window, nor moves it, when restoring the window from fullscreen windowed mode.
* The **Message Log** tab is now a nomad tab, similar to the **Output Log** tab.
* The **Source Control** dialog in the **Editor Settings** are now reflected in the source control connection immediately.
* Optimized _Actor_ duplication in the **Level Editor**.
* Moving the pivot point with **Alt + Middle Mouse Button** when editing BSP brushes in orthographic view now works correctly.
* Placing a _Spotlight_ now has the correct default rotation (does not affect _Spotlights_ already placed).
* Selecting one color channel in the **Texture Editor** is now displayed as grayscale instead of modulated by the color of the channel.
* **Destructible Mesh Editor**:
	* Chunks can be selected in viewport and the properties of the selected chunks can be edited. - Succinct description 1
	* Updated icons for the view mode **Buffer Visualization** and the **Refresh** button.
* The majority of the editors dialogs have had their looks standardized. 
* Improved workflow for meshes with levels of detail (LODs) in the **Vertex Paint** tool.
* Running **Simulate** in the editor now invisibly executes a **Play In Editor** and then **Eject**.  This allows `ReceiveBeginPlay` to have been called on all actors in the simulated world.
* Renaming _Sockets_ in the **Static Mesh Editor** is now done inline.
* **Miscellaneous UI Updates**
	* Created new MapCheck icon at 16px and 40px. Requires code hook-up 
	* Created new tintable icons for the connected and disconnected animation pins and 1p28x icon (again tintable) for the animation result node. PNG assets only, require code hook-ups. 
	* Created new trash can icon to replace current **Clear All** array button icon - replaces existing PNG. 
	* Created a new 40px icon for **Destructible Mesh Editor** refresh button. 
	* Removed back view LCD from camera mesh, and added source assets. 
	* Replaced undo and redo icons actually used for Cascade this time! Not destructive - simple png replace. 
	* Revised 16px and 40px icon sizes for Save All Levels icon - Change List is PNG assets update only. 
	* Additional icons for _AimOffset1D_ and _BlendSpace1D_ (both require code hook-up). PNG updates only. 
	* Swapped out icon to a _f_ function symbol. Overwrites existing PNG asset only. 


#### Blueprints
* Renaming _Components_ in the **Blueprint Editor** is now done inline.
* Synthetic names in the title bar of _Level Blueprints_ have been changed to reflect the current map.
* **Promote to Variable** will now have the user set the name inline in the MyBlueprint window.
* Exec pins in the pin selector widget are no longer toggleable as arrays.
* Redesigned the UI for _User Defined Enums_ to use details customization.
* Toggling pin types to be references and arrays can now be done outside of the pop-up menu.
* Collapsed graphs can be renamed inside the graph node.
* The **Component** tab viewport in the **Blueprint Editor** now ticks particles.
* Added a right-click context menu to the **Timeline Editor** for improved usage.
* The transform gizmo is no longer visible in the preview viewport when a root component node is selected in **Components** mode within the **Blueprint editor**.
* Made access to the _Blueprint_ preview actor more efficient in **Components** mode of the **Blueprint Editor**.
* Multifonts have been removed.
* Improved debug instance selection when opening _Blueprints_. Editing a _Blueprint_ from the asset menu will find an instance to debug if there is one. Additionally the debug instance should now update correctly when editing subsequent _Blueprint_ instances.
* **FloatToString** kismet function now trims excess zeros.
* Function connections should now undo/redo correctly.
* **Ctrl + K** can once again be used to find an actor's reference in _Blueprints_.
* Improved UI in **Blueprint Editor**'s component mode
	* Simpler to use
	* Improved user feedback with class icons and a less tightly packed layout
	* Search box to quickly find components
	* Components are now grouped into _categories_
* Improved context menu options in _Level Blueprint_ when selecting multiple actors
* Improved Find in _Blueprint_ search results to prevent false positives when searching for numbers (removing the junk node index from search criteria) 
* Wired up all current types of graph nodes to automatically look for _rich tooltip_ style documentation (which will be added over time)
* Generalized the latent action manager to allow latent behavior in any type of _Blueprint_, not just actors (it also works on actors that don't otherwise tick).  Latent actions can also be declared in function libraries.
* Added touch enter/leave events and delegates to actors and primitive components 
* Prevented _State Machine_ entry nodes from being wired up to a conduit (which is not currently supported by the runtime)
* Prevented _AnimBlueprint_ instances from finishing initializing if their source _Blueprint_ had compile errors 
* Added cleanup code to remove NULL references from _Blueprint_ graph arrays (fixing very old Animation assets that were saved after deleting _State Machines_, which currently crash on load) 
* Made it impossible to drop variable nodes in graphs with an incompatible schema 
* Added the ability for graph drag-drop operations to query the hovered graph even when not over a node or pin 


#### Gameplay and Framework
* Behavior Trees system is still a WIP
* Loading Screens in progress.
* **World Browser**
	* Added support for joining as a client to a host with world composition
	* Added `ALevelBounds` actor for levels participating in world composition, which defines level bounding box. Can be updated automatically on level actors changes or used with just fixed bounds
	* Added loading bar to level tiles 
	* Added simulation view while in **Play In Editor**/**Simulate in Editor**
	* Levels which have bounds bigger than `WORLD_MAX` still will be visible in case level bounds intersects world bounds 
	* Added bottom status bar (mouse location, marquee rectangle size, world size) 
* Notification that _Skeleton_ needs to be saved to keep current _SkeletalMesh_ as default now only appears when there is a change, rather than always.
* A game viewport can now receive input from multiple game controllers each controlling a separate _Player Controller_.
* Made the component asset broker extendable 
* Added `AActor::bFindCameraComponentWhenViewTarget` to allow actors to opt out of using a _Camera Component_ where available when they are a view target 
* Ongoing development of **Unreal Automation Tool**
	* Unified **UnrealBuildTool** and **UnrealAutomationTool** logging systems
	* Added support for building programs 
	* Added platform abstraction layer and split `AutomationScripts.dll` into multiple (platform) DLLs.
* **Physics**
	* Player/Physics interaction: Player can push around physics objects while moving
		* Player can push away blocking physics-simulated objects and will generate a slight force on overlapping physics-simulated objects. 
		* The force the player applies to the objects can be setup in the _CharacterMovementComponent_. (see Category=Player Physics)


#### Rendering
* Removed **DOFOverrideTexture** feature - we will have a **BlurUI** feature instead - that allows to blur content behind UI elements 
* Added NVIDIA specific annotation to favor NVIDIA high performance GPU over slower integrated  
* Removed old shadow method since the new one was already the default for quite some time.
* Removed _+1_ on the bounding boxes (was once needed for physics, but that's not longer the case). It was causing issues on shading where it was using the enlarged bounding box.
* Disabled atmosphere for non-lit views
* Reduced **Landscape** Spline Z-fighting in the editor and made the spline lines render with the correct world-Z coordinate
* Photons are no longer blocked by back facing triangles in **Lightmass**. 
* Improved Directional Light's importance estimation in **Lightmass**.
* Added gamma space output to OpenGL ES2 renderer.
* Added EnvBRDF analytic approximation for OpenGL ES2.
* Removed `UPrimitiveComponent` pointers from renderer structures to make it harder to create race conditions accessing component properties directly from the rendering thread
* Warnings regarding level of detail (LOD) when manipulating emitters in **Cascade** are now more explicit.


#### Animation/Persona
* Added new _1D Blend Space_ icons to the editor for use in **Content Browser**
* Duplicating sockets in **Persona** now duplicate attached assets too
* Cached attached meshes in **Persona** so that they survive mode changes
* Renamed instances of _MID_ and _MIC_ to something more appropriate for users (_MaterialInstanceDynamic_ and _MaterialInstanceConstant_).
* You can now undo adding an Animation Sequence to a Skeletal Mesh. 
* **Persona** rotation/translation widget for bones/sockets/wind now looks and behaves correctly.
* Selecting an item in the **Skeleton Tree** tab in **Persona** no longer forces it to scroll to the top of the view.
* **Alt + Dragging** sockets in the **Skeleton Tree** will place the copy on the bone you drop it onto, rather than the original bone.
* World/Local space icons no longer render as black squares in **Persona**.
* **Copy Bone Names To Clipboard** feature no longer appends an underscore and number to the bone name.
* Renaming _Sockets_ in **Persona** is now done inline.
* Changed default **Persona** layout to have a home for the **Compiler Results** tab and **Find in Blueprints** tab (collapsed, at the bottom of the layout) 
* Generalized snap to socket support in the **Level Editor** to work on any _SceneComponent_ that contains sockets, instead of just _Skeletal Meshes_ and _Skeletons_
	
	[REGION:note]
	Currently preserving the behavior of only using true sockets - no bone snapping.
	[/REGION]
 

#### Audio
* _Ambient Sound_ now shown in the **Add Actor...** list, when right-clicking in a viewport.


#### Core
* Templated native base classes can now be used in `UCLASS` definitions, e.g.:
	
		UCLASS()
		class UMyClass : public UObject, public MyNativeClass<int>
		{
		};

* `TArray` now has a `FindByPredicate()` member function for use with function objects or lambdas:
	
		void Func(const TArray<int>& Ints)
		{
			// Try to find an odd number
			const int* Result = Ints.FindByPredicate([](int N) { return (N % 2) != 0; });
		}

* Enum spacers are now hidden from editor dialogues.
* `TAssetPtr` now works with `nullptr_t`.
* **Lightmass** built as a modular application again (**Swarm** depends on the **Core** and **SwarmInterface** DLLs it creates when building DLL-based) 
* Only call reset loaders on valid packages that are not in the root set during cooking. 
* Disparate word wrapping behaviors have been reconciled into one consistent, reusable algorithm.
* `GIsUnattended` has been replaced with `FApp::IsUnattended`. If you have any code that can be run on an unattended server, you will need to update it accordingly.
* We are now using a better hashing function for all pointers. The function was slightly adjusted to ignore the lower 4 bits of the pointer in 64-bit executables as they will be zero anyway.
* Added `GetObjectsOfClass()` and `GetDerivedClasses()` to `ObjectHash.h`.
	* These functions are now used to address a load time perf issue with _Blueprints_
* Added `PluginNameRedirects` to handle renamed plugins.
* Added a re-import button to the font editor.
* The **Asset Registry**'s API was changed to accept `FName` class names instead of `UClass` pointers
* Now only classes with `RequiredAPI` are allowed in the `SNewClassDialog` (with a few exceptions).
* Perforce Logs, Warnings, and Errors are now differentiated in the log file.
* Porting the engine and the editor to Mac OS
* Added Windows XP compiling and linking for Visual Studio 2012 
	* New `WindowsPlatform.SupportWindowsXP` flag (defaults to off for now) 
	* Requires Visual Studio 2012 Update 1 or higher to be installed! 
	* Implemented according to: [](http://blogs.msdn.com/b/vcblog/archive/2012/10/08/10357555.aspx )
* Deleted UnSetup and UEDocsURLHandler programs (no longer used)
* Improved error handling for module and plugin loading 
	* Enabled game plugins to now report errors when they fail to load
* Added **GeneratePackagingManifest()** to `ITargetPlatform`.
	* Generates packaging info given the **ChunkIDs** in the **Asset Registry**.  Primarily intended for generating `.pak` file lists for chunk based installs.
* Added asset availability and prioritization functions to `IAssetRegistry`.
	* These are basically simplified calls into the platform chunk install code, using the ChunkID stored on `FAssetDatas`.
* **Stats**
	* Better memory utilization.
	* `STAT NONE` will now work properly with the new stats system.
	* Stat captures may be initiated and stopped from Blueprints.
* **UnrealFrontend (UFE)**
	* Initial implementation of the launcher utilizing UnrealAutomationTool.
	* Switched UFE to be non-monolithic.
* Improve UnrealAutomationTool (UAT) to be able to work from a precompiled fallback so UAT can be run from a machine without Visual Studio or MSBuild
* Make sure UnrealAutomationTool builds UnrealHeaderTool even if it is not explicitly included when using XGE
* FMonitoredProcess allows for the creation of external processes that can be monitored by the Editor or Engine
* Reduced time for Unreal Build Tool hot-reload compiles by only processing required modules and sources.
* Changed all uses of BuildException in Unreal Build Tool that are thrown in response to a caught exception to propagate the inner exception.


#### Online

* Achievement interface for Steam/Null.

