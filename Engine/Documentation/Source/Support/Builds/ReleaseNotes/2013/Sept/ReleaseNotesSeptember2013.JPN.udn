INTSourceChangelist:3367470
Title:2013年9月リリースノート
Crumbs:%ROOT%, Support/Builds
Description:
Availability:Licensee
Parent:Support/Builds
Order:-5

[TOC(start:2 end:2)]

## ビルド情報


[REGION:simpletable]
| アイテム | 情報 |
| ---- | ---- |
| **ラベル** | QA_APPROVED_UE4_BUILD_2013_09 |
| **チェンジリスト #** | 1844454 |
| **VISUAL STUDIO VERSION** | Microsoft Visual Studio 2012 バージョン 11.0.60610.01 Update 3 |
| **DIRECTX** | 2010年6月 |
[/REGION]

## 重要情報

 * 現時点のエンジン開発ロードマップ: [UE4 Roadmaps](https://udn.unrealengine.com/questions/topics/roadmap.html)
 * 修正されたバグ： [2013年9月 UE4 修正されたバグ](UE4_Fixed_2013_September.xlsx)
 * 周知のバグ： [2013年9月 UE4 未解決のバグ](UE4_Bugs_2013_September.xlsx)
 

## 主要な新機能

####エディタ ツール
* **範囲外のピクセルの視覚化**
	* オブジェクトの範囲外のピクセルを視覚化するために、表示フラグを新規に追加しました。 
	![](OutofBoundsPixels04.png)

####ブループリント

* **線形カラーカーブとグラディエント エディタ**
	* 線形カラーカーブ サポートがタイムラインに追加され、ユーザーはそれらにグラディエント エディタをつけることが可能になりました (カーブの直接編集もまだサポートされています)。これらはコンテンツ ブラウザで作成あるいはインポートされたり、また直接ブループリント タイムライン エディタで作成することができます。

		![](LinearColor01.png)
	* ユーザーがデフォルトでカラーカーブを開くと、キーの追加に使用するグラディエントが表示され、色が徐々に変わる様子が視覚化されます。

		![](LinearColor02.png)

		(オパシティ ストップを追加すると)

		![](LinearColor03.png)
	* グラディエント エディタでは以下の機能を使うことができます。  
		* グラディエントの上部または下部の暗い部分をクリックすると、新規カラーまたはオパシティ ストップがそれぞれ追加され、削除を押すと選択されたストップが取り除かれます。  
		* ストップ マーカーをダブルクリックすると、ストップするためのカラーピッカー (またはオパシティ用のスライダー) が開きます。
		* 左クリックしてストップ マーカーをドラッグすると、タイムラインに沿ってストップ マーカーが移動します。

		注記：ストップ マーカーを右クリックしても、この機能を使うことができます。
	* ユーザーはカーブを手動で編集し、グラディエント エディタを非表示することもまだできます。 

* **ブループリントのサーバーおよびクライアント RPC のサポート**
	* ブループリントのサーバーおよびクライアント RPC へのサポートを追加しました。 
	* これまでは、レプリケートされたすべてのイベントは、暗示的に信頼性のないマルチキャストでした。これまでにチェックが入れられて **レプリケートされた** ものはすべて、マルチキャストとして表示されるようになりました。 
	これらのイベントに対する機能性は何も変わりません。

		![](ServerBlueprints.png)
	* 3 つの設定が C++ ネイティブ キーワードである NetMulticast、Server、Client をミラーリングします。 
		* インプリメーションの観点からすると、レプリケート用にタグ付けされたブループリント関数 / イベントと `UFUNCTION()` ヘッダにレプリケートするためにタグづけされた C++ 関数は全く同じです。
	* ブループリントがクライアントからサーバーへ通信するためには Server RPC タイプが必要です。Server RPC はサーバー上でのみ実行されます。 
	* Server RPC はイベント グラフを実行するアクタを所有するクライアントによってのみ、呼び出されます。 
	* 完全を期すため、ここで クライアント RPC を選択することもできます。クライアント RPC は所有しているクライアントへのみ送信されます。 
	* 最後に、ブループリント RPC も信頼性をチェックすることができます。これも完全を期すために行いますが、若干ちゅうちょします。 
		* デフォルトで、ブループリント RPC は信頼性がなく、ほぼいつも信頼性はありません。 
		* 信頼性をもたせるべきだと確信する場合のみ、ユーザーは関数を信頼性のあるものにすべきです。
		* コンソール変数 `net.Reliable.Debug 1` は、信頼できるネットワーク トラフィックを印刷するように設定することができます。

* **ブループリント デフォルトへのインスタンスの適用 / リセット**
	* _Blueprint Actor_ インスタンスを選択すると、**レベル エディタ** の **[Details (詳細)]** タブの **[Blueprint]** セクションの **[Edit (編集)]** ボタンの隣に、新しく **[Apply (適用)]** ボタンと **[Reset (リセット)]** ボタンの 2 つができます。 
		* インスタンスを変更してデフォルトと異なる状態にすると、**[Apply (適用)]** ボタンが有効化されます。**[Apply (適用)]** をクリックしてインスタンスの変更を _Blueprint_ デフォルトに反映させると、これらのインスタンスがそれ自体 _Blueprint_ デフォルトの値から変化しない場合、 _Blueprint_ の他のすべてのインスタンスに代わりに継承されます。 
		* 同様に、**[Reset]** ボタンをクリックすると、選択されたインスタンスが_Blueprint_ デフォルトにリバートされます。

		![](ApplyResetBlueprintDefaults.png)

* **HUD のマウス Hit Box**
	* HUD に特別な _Hit Boxes_ を描画できるようになり、マウスと単純なインタラクションを持つことができる HUD とメニューのビルドが可能になります。

		![](MouseHitBoxes.png)

* **_Auto Insert_ ノード**
	* ピンを引き出してノードを追加すると、既存のチェーンに挿入されるようになりました。

		![](AutoInsertNodes.png)

* **'Add Component' ドロップダウンの改善**
	* 検索ボックス、 _ワンクリック_ での追加、アイコン、カテゴリを追加しました。

		![](AddComponentDropdown.png)             

* **アクタ リファレンスの変更**
	* _Level ブループリント_ のアクタ リファレンスを、現在選択されているものに簡単に変更することができるようになりました。

		![](ChangeActorReference.png)

* **複数選択したアクタの操作がしやすくなりました**
	* Kismet 1 の機能と似ていて、1 つの _コール関数_ ノードを接続された複数のアクタ リファレンスで追加します。

		![](BetterHandlingforMultipleSelectedActors.png)

* **新規のライブラリ関数** 
	* Blueprint Library 関数を追加しました！

		![](NewLibraryFunctions.png)

	[REGION:note]
	中には非常に負荷の高い関数もあるので、使用する際にはパフォーマンスに十分気をつけてください。
	[/REGION]

* **アクタ以外での Latent 関数の使用**
	* Latent 関数 (Delay など) はどんな _ブループリント_ においても使用することができます！

		![](LatentFunctionsOutsideActors.png)

* **インターフェース編集モード**
	* 必要なものだけ含まれるようにインターフェースを編集する特別な **Interface** モードというモードがあります。
 
		![](InterfaceEditorMode.png)

* **作成したコンポーネントをアタッチする**
	* 作成した _コンポーネント_ をドラッグ＆ドロップして、ネイディブ シーンのコンポーネント階層のどこにでもアタッチすることができるようになりました。 
	* さらに、子 _ブループリント_ に作成した _コンポーネント_ も、親 _ブループリント_ から継承した SceneComponent 階層のどこにでもアタッチすることができます。

		![](AttachCreatedComponentsAnywhere.png)

* **Default Scene Root Component**
	* _SceneComponent_ なしに _ブループリント_ をインスタンス化すると、これまではこのコンポーネントが暗黙的に作成されました。 
	* ユーザーが Actor ベースの _ブループリント_ を作成すると、 _SceneComponents_ がまだない場合 **Components** モードリスト内に表示されるようになるので、それにデフォルトを設定することができます。 

		![](DefaultSceneRoot.png)
	* 追加した _SceneComponent_ は新規 _コンポーネント_ に対してスワップアウトされて、新規ルートになります。

* **ノードのショートカット**
	* キーを押したまま、ノードをクリックすれば、ノードを素早く配置できます！

		![](ShortcutsforNodes.png)

	* 現在使用できるショートカットは以下の通りです。`UserSettings.ini` ファイルに更に追加可能です。 _ブループリント_ の **Keybindings** インターフェースが機能するようになりました！

		| ノード | 目的 |
		| --- | --- |
		| **ReceiveBeginPlay** | P |
		| **DoN** |	N |
		| **DoOnce** | O |
		| **Delay** | D |
		| **Branch** | B |
		| **Sequence** | S |
		| **Gate** | G |
		| **MultiGate** | M |
		| **ForLoop** | F |


* **Transform プロパティ上の 3D ウィジェット**

	* Vector プロパティのみならず Transform プロパティ用にもワールド内にウィジェットを作成できるようになったので、回転＆スケールをインタラクティブに編集できます。

		![](3dwidgetsonTransforms.png)


## 新規追加

#### エディタとツール
* マウス制御を使用したり解除する際に、**Play In Editor** ビューポートにオプションの通知ラベルが付きました。
	* 以下が [Preference (環境設定)] セクションの新項目です。**[Editor Settings (エディタ設定)] > Play In > Play in Editor**
	* **[Show Mouse Control Label (マウスコントロールラベルを表示)]** を有効にします。
	* ドロップダウン メニュー **[Mouse Control Label Position (マウスコントロールラベル位置)]** からビューポート内の好きな位置を選択します。
* サポートされているアセットに対して、アセットメニューから再インポート オプションが利用できるようになりました。
* コンテンツを保存するウィンドウで、Diff オプションがアセットに使用できるようになりました。
* 空のマップには、デフォルトの光源とプレイヤーの開始地点が含まれています。
* レベルをを削除すると、その状況に応じて異なる警告メッセージが出され、抑制可能になりました。
* アクタの選択が **Play In Editor**/**Simulate In Editor** セッションで実施され、終了するとエディタへ戻るようになりました。
* アセット エディタ プラグイン拡張ポイントが全て状況に応じて変化し、編集中のアセットがどれかを意識するようになりました。
* **被破壊メッシュエディタ**:FBX ファイルを深度 1 被破壊性チャンクとしてインポートします。
* 線形カラー カーブを使用する場合に、線形カラー カーブへのサポートを追加し、グラディエントの分岐エディタをカーブ エディタに追加しました。  
* **スレート** 
	* テキスト スタイルを `STableViewBase` に追加し、デフォルト スタイルを更新し、 `FTableRowBrushes` は `FTableRowStyles` になりました。
	* コンテンツのない `SButton` は、スタイル イメージに応じたサイズになります。
* 変形とカメラの速度制御が、エディタが有効になったビューポート内に表示される新規ツールバーへ移動しました。   


#### ブループリント
* `ExpandEnumAsExecs` メタデータへのサポートを追加しました。これにより、関数列挙型変数パラメータを複数の実行入力として公開できるようになります。
* **GetAllActorsOfClass**、**GetActorArrayAverageLocation**、**GetActorArrayBounds**、**MoveActorToActor** を `GameplayStatics` に追加しました。
* コンポーネントの位置 / 回転を徐々に補間するために **MoveComponentTo** latent (潜行) 関数を追加しました。
* _ブループリント_ で `FText` のサポートを追加しました。
* **GetVectorArrayAverage** 、 **GetMinElement** 、 **GetMaxElement** を `MathLibrary` に追加しました。
* **RotateVector** 関数と **UnrotateVector** 関数をローテーターに追加しました。 
* 編集中 コンポーネントがプレビュー ウィンドウでリアルタイムに更新されるようになりました (レベル エディタと一致して)。
* ブループリント アクタ インスタンスへの変更がそのアセットの _ブループリント_ のデフォルトへ適用され、さらに _ブループリント_ アクタ インスタンスを _ブループリント_ のデフォルトに戻してリセットする機能を追加しました。
* 変形デフォルト、ネイティブまたは継承されたコンポーネント ノードのいずれかを親にもつ、ユーザーが作成したルート コンポーネント ノードの編集が可能になりました。
* **Play In Editor**/**Simulate In Editor** セッションが有効になっている間は _ブループリント_ のデフォルトの変更が可能になり、変更はセッションのアクタへ継承されます。
* **ブループリント エディタ** の **Components** モードの **[Details (詳細)]** ビューで変更のデフォルトのエクスポーズおよび編集がサポートされるようになりました。
* _ブループリント_ を _ブループリント_ インスタンスにアタッチできるようになりました。
* `bTraceComplexOnMove` を `PrimitiveComponent` に追加して、プリミティブを一度に移動させるための複雑なジオメトリ コリジョンを可能にしました。
* K2Nodes は固有の拡張ステップを定義し、使用するノード ハンドラを指定して、`KismetCompiler.cpp` を変更しなくてもプラグインとゲーム専用モジュールがカスタム仕様のノードを定義できるようになりました。
* 新しい **OpenWorld** _Level ブループリント_ の呼び出し可能関数で別のマップを開くことができます。

 
#### ゲームプレイとフレームワーク
* AI ロジック テクニックの基本クラスとして `UBrainComponent` を実装しました。
* 完了した移動リクエスト ID を結果と一緒に送信するために, `AIController` の "move finished" マルチキャスト デリゲートを拡張しました。
* `StaticMesh` が `AssetUserData` オブジェクトをサポートするようになり、エンジンを修正せずにプロジェクト固有のデータを格納できるようになりました。
* `FTransform` プロパティ上の 3D ウィジェットに対するサポートを追加しました。 
	* スクリーン スペースで青いウィジェット ダイヤモンドを固定のサイズにしました。
* シンプルにゲームを保存できるシステムを追加しました。ワールドのステート全体のキャプチャ用には作成されていません。 _ブループリント_ で利用可能です。
* スクリーンショットがビデオのように通知を表示するようになりました。
* Map Check がサマリを印刷するようになったので、ユーザーは完了したことが分かります。
* `PlayerController` と `GameInfo` が _ブループリント_ の [New Asset (新規アセット)] ダイアログのデフォルト タイプになりました。
* **ルート モーション** 
	* AnimMontages で提供されているルート モーションへのサポートが追加されました。
	* シミュレートされたプロキシがネットワーク化されました。位置修正、スムーズなエラー修正、バッファしないスムーズなアニメーションがサポートされます。 
	* クライアント側で予測と修正をする、クライアン トサーバー ネットワークの構想を実装しました。
		* ルート モーション時に必ず同じタイミングが使われるように、物理は物理を実行する前にアニメーション `TickPose()` を呼び出します。 
		* サーバー側では、クライアント側のタイミングがステート、通知、イベントに使われるようにするために `TickPose()` が `MoveAutonomous` から呼び出されます。 
* **プレイヤー移動のネットワーキング**
	* クライアント側はサーバー側と同じ方法で DeltaTime を計算するので、両者間の物理シミュレーションは正確です。さらに、クライアント側の TimeStamp は高精度を保つために一定の間隔でリセットされます。シミュレーションでは徐々にエラーが蓄積され、位置修正と使用する帯域幅の数が増えます。 
	* サーバー側の 1 つのフレーム内で複数の位置修正が必要な場合は、古いものではなく最新のものを送ります。 
* リプリケートされたイベントを使用するように`ReplicatedMovement` をリファクタリングしました。変更の有無を確認するため、静的変数を取り除きました。 
* ポーンの移動コリジョンに無視されるようにアクタの追加 / 削除のための `APawn::MoveIgnoreActorAdd` と `APawn::MoveIgnoreActorRemove` を追加しました。 
* `UCharacterMovementComponent::InitCollisionParams` が `MoveIgnoreActors` リストを取り入れるようになりました。
* Package Project がメインの [File] メニューのオプションになりました。 Windows のみがこのリリースに対応しています。
* **設定 UI** 
	* 新規セクションが追加されました。
	* ほとんどのセクションが Reset-To-Default をサポートするようになりました。
* `FUniqueNetIdRepl` というオンライン プラットフォーム FUniqueNetId にラッパーを追加し、 RPC/replication 経由のユニークな ID のトランスポートに使います。
* シリアライズ化はすべて 現状の `ExportTextItem` (ネットワーク/ファイル) を実行するので、`obj dump` と `displayall` が使用できます。
* `AttachRootComponentToActor` がクライアント側にアタッチメントをレプリケートし、アタッチメント中は移動のシミュレーションを停止するようになりました。
* ブループリント専用のゲームにおいてレプリケーション制御を強めるために、`bAlwaysRelevant` をブループリントで使えるようにしました。
* UDKRemote を UE4 に統合し、 iOS SDK 6.1 でコンパイルするために更新しました。
* 正投影ゲームプレイ カメラを改善しました。
	* `-WORLD_MAX` の代わりにカメラ位置をニアプレーンとして使えるように、正投影ゲームプレイ カメラを更新しました。
	* 正投影ゲームプレイ カメラの `OrthoZoom` を `OrthoWidth` (アンリアル単位での横サイズ) に差し替えました。 
* FCanvasBorderItem はタイル化されたフレームとタイル化されたバックグラウンドで 3x3 グリッド枠を描写することが可能なので、フレームとバックグラウンドのスケーリングをサポートします。 
	* タイリングの計算にシェーダーを使わないので、タイル化されたアセットには別のテクスチャが必要です。 
* 所有するアクタとその設定 / 破棄を決定するネットコード群をリファクタリングしました。


#### Rendering
* Visualizetexture/vis がさらに多くのアイテムをフィルタし、ソート処理が遅くなりました ("vis ?")。
* 複数の拡張性コンソール変数を追加しました。
* DX11 と OpenGL RHI 用の Timer クエリを実装しました。
* 最も基本的な関数 (r.SSSSS 1) だけですが、スクリーン スペース サブサーフェス スキャタリングを追加しました。
* GPUBenchmark が SynthBenchmark (既知の問題: 非常に遅い GPU 上だと対有無アウトする) の一部になりました。
* スクリーン スペースのライトシャフト
	* ライトシャフトには、フォグ / 大気のみ影響を与えるオクルージョンと物理ベースではないブルームの 2 種類があります。
* **VisualizeOutOfBoundsPixels** 表示フラグを追加し、ストリップされたパターン内の領域外にあるピクセルに色をつけます。
* リフレクション環境キューブマップが DerivedDataCache にキャッシュされるので、取り込む度に再キャプチャする必要はありません。
* キューブマップ データがパッケージにクックされます。
	* 残念ながら、派生データは GPU でのみ生成可能なのでクック中は生成できないため、失敗する場合もあります。
* 可動透過間接ライティング キャッシュ上のディフューズ GI は、オブジェクトごとに単一の値を補間します。
* 透過光モード _TLM_Surface_ は、間接スペキュラに適用された直近のリフレクション キャプチャ キューブマップを取得します。
* UnrealBuildTool により、複数のインスタンスが別々のブランチを正しくビルドできるようになりました。
	* これまでは、UnrealBuildTool の新規インスタンスは、実行中のインスタンスが完了するまでブロックされていましたが、別のブランチ (異なる UE4 ルート フォルダ パスの) にあれば、複数のインスタンスの実行が可能になりました。
* **Film Post**
	* トーンマッパを変更し、ポストプロセス ボリュームにフィルムのポストプロセス制御を新しく追加します。
* `r.BloomQuality` コンソール変数を追加しました。
	* ブルームのポストプロセス操作に必要とされるポストプロセス パス数に増減がありました。


#### アニメーション
* 1 Parameter で新しいタイプの _BlendSpace_ を作成しました (_BlendSpace1D_ に対して、オリジナルの _BlendSpace_ で作成したものは 2D)。
* Skeleton Animation Notifies を表示 / 編集するために、新規タブ **[Persona]** を追加しました。
* Play Slot Node Animation
	* スロットノード上で再生するためにモンタージュを作成する必要がなくなりました。スロットノード上での再生には、 _AnimSequence_ または _AnimComposite_ を使用すればいいだけです。 


#### オーディオ
* ステートマシーン グラフとサウンド キューにコメント ボックスを追加しました。
* Enveloper Sound ノードにより、ビジュアル カーブの編集と Curve Float アセットの使用が可能になりました。


#### コア
* Visual Studio 2012 で 32-bit ゲームをコンパイルできるようになりました。 
* FText メッセージ フォーマット機能が、引数の配列をサポートするようになりました。
* FText メッセージ フォーマット機能が、指定した引数をサポートするようになりました。IE: `"{PlayerScore}"`
* Linux プラットフォームへのサポートが追加されました (ゲームサーバーのみ)。
* プロジェクトのモジュールへのモジュール取り込み順序の決定に、UProject ファイルが使用されるようになりました。
	* 既存プロジェクトは以前として、元の時間で本来のゲーム モジュールを取り込みますが、起動中にプロジェクトのモジュールを異なる時間で取り込めるオプションができました。
	* `.upluigin` ファイル フォーマットは `.uplugin` ファイル フォーマットと非常によく似ています。 Module Descriptors 上で `LoadingPhase` プロパティを使って完了します。
	* `.uproject` ファイル [プラグイン](https://udn.unrealengine.com/docs/ue4/INT/Programming/Plugins/index.html) を参考にしてください。
	* `.uproject` ファイルがランタイム時に必要となり、Pak 形式のファイルに含まれるようになりました。
* UnrealBuildTool への GEXF グラフの出力を実装しました。 
	* 新しい `-graph` オプションにより、ActionGraph.gexf へビルド依存図式が出力されます。 
	* (このファイルは、エンジンの中間 BuildData サブディレクトリに保存されます) 
	* これにより、デフォルトで C++ インクルード ファイル依存ネットワークも出力されます。 
	* これらのファイルは Gephi にロードすることが可能です。ロードすると、グラフ ネットワークが興味深くビジュアル化されます。 
* `UE4PrereqSetup.msi` インストーラーを追加しました。
	* UE4Redist.exe の代わりに UE4 の実行に必要な前提条件をインストールしました。
* ビヘイビア ツリーをゲームからエンジンに移動し、ライセンシーが利用できるようになりました。
* ビヘイビア ツリーの基本エディタをエディタに追加しました。
* ナビゲーションをデバッグする目的で、コリジョン ジオメトリを (ビューの遷移ポイントから) OBJ ファイルへエクスポートするために、ナビゲーション データ エクスポータ (`ExportNavigation` コンソール コマンド) をエンジンに追加しました。


#### オンライン
* http 要求 / 応答ペアの IOS 実装を追加しました。
* Online Achievements Interface を作成し、Game Center を使って IOS の実装を追加しました。 
* 成績の実装を提供するためにすべての OSS が使用する `IOnlineAchievements` インターフェースを作成しました。
	* 既存するすべての OnlineSubSystem に `OnlineSubSystem::GetAchievementsInterface` を追加しました。今のところ、IOS 以外はすべて NULL を返します。 
* アチーブメントのオンラインテストのために `TestAchievementsInterface` を追加しました。これにより、アチーブメントがゲットされ、説明がゲットされ、アチーブメントを書き出し、ロック解除されたアチーブメントが処理されます。  
* Game Center セッションのサポートを追加しました。
* Game Center の友達のサポートを追加しました。 
* Game Center のリーダーボードのサポートを追加しました。 
* Game Center の ID / プロフィールのサポートを追加しました。
* マイクロトランザクション用のプラットフォームを提供するために、Online Subsystems に Store インターフェースを追加しました。
* App 購入サポートに IOS を追加しました。
* 検索結果を与える接続をするために `GetResolvedConnectString` を追加しました。
* `CreatePlayerUniqueId` を変更して、安全のために size パラメータが含まれました。



## アップグレード ノート

#### エディタとツール
* **Play In Editor** viewports will no longer immediately take focus from the editor on Play, but on first click.
	* A new preference section has been added to **Editor Settings > Play In > Play in Editor**.
	* To turn on immediate mouse control enable **Game Gets Mouse Control**.
* The **Launch On** button is currently hidden while we re-implement the underlying functionality to launch on devices
* Changed mutex to be named per-branch to allow several branches to run simultaneously 
* **Slate**
	* Modified the **Slate** context window dismissal order so non menu stack windows do the input focus handover before being destroyed. 
	* Modified `SInlineEditableTextBlock` to override the `SEditableTextBox` font with the font from the `InArgs._Style` provided the `InArgs._Style` is valid, so the Styles remain consistent where possible.
	* Converted the user notification for adding an actor to a locked level to a **Slate** UI notification. 
* Undo/redo now works for creation of sockets in the **Static Mesh Editor**.
* Undo/redo now works for Track and group renames in **Matinee**.
* Replaced the `LocalizeUnrealEd` calls with `LOCTEXT`/`NSLOCTEXT` and refactored a lot of other calls that used localization methods such as `UE_LOG`.
* Moved the **Grid** menu option from **Advanced** and into the main **Show** menu.
* Changed the level of detail (LOD) popup ok messages to notifications instead.
* Copy/paste of collision in **Static Mesh Editor** now updates the viewport correctly.
* Adding a level now remembers what folder you added from last.
* Moved the Hide UI toggle from the viewport to the View toolbar.
* Removed the **Select all with same Archetype** menu option.
* Double clicking an actor in the **Level Editor** viewport now focuses the camera on that selection.
* Giving an actor a blank name now displays a error notification.
* Added Undo/redo functionality to the **Material Instance Editor**.
* Changed the **PhAT** Body Physics Type menu options to radio buttons.
* `SWindow` now takes the desired client area size instead of window size as its construction parameter


#### Blueprints
* Health has been removed from Pawn, and Death has been removed from the engine.
	* Games will need to migrate the Health variable to their own Pawn classes if desired.
	* All sample games using health and death (eg QAGame, ShooterGame) have been updated to implement health/death on their own.
	* Some related events have been removed (OnDeath, OnPlayDying).Games may simply migrate those as well if desired.
* Character movement input bindings that were created in C++ for Blueprint classes have been removed.
	* These were previously enabled by default by a bool bAddDefaultMovementBindingsForBlueprint on Characters.
	* Blueprints will now need to add their own bindings (see the ThirdPersonTemplate_BP project for a simple example).
* Modified the string comparison to be case aware in OnNodeCommentTextCommitted so you can edit and correct node comment's text case.
* Added the ability to view variables for Variable Get/Set graph nodes in the Blueprint editor.
* Added a modifier key state (L/R Shift) to allow you move comments without moving the contents in the Blueprint editor.
* Modified the Filemenu Addtofavourites UI tooltip text to "add to favourites levels" instead of "Add to favourite files"
* Changed the message log filter button icons to match the message log entry icons.
* ShapeComponent :Support non-uniform scale when it can based on shape type. 
* DrawDebug functions supports more options for time(DrawOneFrame, DrawDuration, DrawPersistent) 


#### Gameplay and Framework
* Updated simple MoveToLocation and MoveToActor functions to return meaningful values
* Remove DynamicBlockingVolume DynamicPhysicsVolume and DynamicTriggerVolume
* Several runtime warnings now go to the 'Message Log' to make them more visible to designers
* On HUD, add ReceiveHitBoxRelease and remove InEventType from ReceiveHitBoxClick
* The target platform API for feature detection has been simplified; see `ITargetPlatform::SupportsFeature()`
* The settings API slightly changed; see existing usages for the required changes
* To enable messaging over the network, the `-Messaging` command line switch is required until further notice
* `AActor::Owner` is now a private variable.Use Get/SetOwner to access/set.
* Gamepad key cleanup
	* Gamepad keys defined in `EKeys` enum no longer are called XboxTypeS_ and are instead Gamepad_
	* XBox specific keys `A`, `B`, `X`, `Y`, `Start`, and `Back` renamed to generic `FaceButton_Bottom`, `FaceButton_Right`, `FaceButton_Left`, `FaceButton_Top`, `Special_Right`, `Special_Left`
	* Epic Labs feature to show console specific labels for gamepads in dropdowns and _Blueprint_ labels.
	* Virtual up/down/left/right events for gamepad thumbsticks now hooked up
* `FObjectFinder` can no longer be used outside of class constructors.Any attempt to use it in other code will result in an assert.
* **Physics**
	* Collision trace type has been separated to [object type] vs [trace type].Object types can be used as previously `MovementChannel` (now renamed to Object Type)
		* For your custom channels
			* If that type can be used as Object Type for objects, you should mark that as object types
			* If that type is used for trace in code, mark as Trace Type as below example:. 

					+DefaultChannelResponses=(Channel=ECC_GameTraceChannel1, Name=Weapon, bTraceType=true)

		* With this change, now we support "Trace for objects" APIs.This will let you find any objects with "given object types". 
		* The response against object type is used when the object moves or collide


####Rendering
* Material Property **RefractionBias** is now called **RefractionDepthBias**.


#### Animation
* _SingleAnimSkeletalComponent_ is removed.Now you can  use _SkeletalMeshComponent_ to do the same thing using AnimationMode.
* _SkeletalPhysicsActor_ is removed.Now you can use _SkeletalActor_ to do the same 
* SlaveComponent is supported in **Matinee** **AnimTrack**


#### Core
* Updated the `SaveConfig` functionality so if we do not want to write to a property to a saved config file (`.ini`)
* `TArray`'s int32 constructor to insert uninitialized objects has been removed as it was too easy to use incorrectly.  
	* The following explicit form should be used instead:

			TArray<int> Vals;
			Vals.AddUninitialized(Num);

* Globalization has been more accurately renamed as *Internationalization.
	* Update all references to these classes and configuration sections.
* `FText` message formatting no longer supports commented parameters.IE: `"{0?PlayerScore}"`
	* Use named parameters instead.IE: `"{PlayerScore}"`
* The `EAxis` enum has been renamed to `EAxisList::Type`.Client code will need to be changed to reflect this.
* `FMatrix`/`FTransform` axis functions now use EAxisList::Type rather than an integer to specify the axis.All usage will need to be changed.
* Visual Studio 2012 is now used by default  (2010 is still supported)
	* All games and programs now use the Visual C++ 11 compiler.
	* UE4 solution and project files are now generated in 2012-native format by default.
	* If you need to continue using Visual Studio 2010, you still can (for now!):
		* Set `WindowsPlatform.Compiler = WindowsCompiler.VisualStudio2010` in `UEBuildWindows.cs` 
		* Pass `-2012` to `GenerateProjectFiles.bat`
	* You may need to update your third-party *.Build.cs files for VS 2012 changes
		* `bUseVisualCPlusPlus11` has been changed to `WindowsPlatform.Compiler` in UnrealBuildTool
* New Visual Studio project layout
	* There is now only one project file for each game 
	* Build & Run projects are eliminated; Fake target projects are eliminated 
	* You now choose your _target type_ using the Solution Configuration dropdown 
		* To build and run the Cooked Game or Program, just use Debug or Development (no suffix) 
	* Project file generation and regular UBT builds run faster! 
	* We no longer include all platforms by default.Instead, you only get either Win64 or Mac. 
	* If you need to build other platforms, there is a new `GenerateProjectFiles_AllPlatforms.bat` file for that. 
	* Solution has flattened down to just four top-levels folders. 
	* All code is now under your game's project file, organized the same way it is on the disk. 
	* Other notes 
	* Shipping and Test configurations are omitted by default.Pass `-ShippingConfigs` to get those. 
	* Rocket targets aren't included in the project files by default.Pass `-RocketTargets` to get those. 
	* Non-English UDN files are now omitted from project files.Pass '-AllLanguages' to get those. 
	* Visual Studio no longer prompts you to overwrite `UE4.sln` every time you exit 
	* You can now skip IntelliSense generation with `-NoIntelliSense` if you want. 
	* WinRT is no longer considered a _desktop platform_ to UBT 
	* We removed Shipping and Test configs for Editor from the UI, because they aren't supported in UE4 
* Changed DestroyActor to only detach SceneComponents attached to SceneComponents on the deleted actor. 
* Changed markdown process to leave variable and metadata refs in code blocks, spans and quotes ignored. 
* Improved regex used to handle PUBLISH tags to allow whitespace on the same line after tags 
* Game type refactor
	* Several game-related base classes were renamed
		* GameInfo is now GameMode
		* GameReplicationInfo is now GameState
		* PlayerReplicationInfo is now PlayerState
	* ReplicationInfo base class was removed.
	* Redirectors are in place and all uses of these classes should update seamlessly.
* Added exception check to error that should not occur (but does) in CRU 
* Added domain exception handler to help track down obscure crash
* **UE4Redist has been replaced with UE4PrereqSetup**
	* To install prerequisites for running UE4 on Windows platform, we'll now use the new `UE4PrereqSetup.msi` program. `UE4Redist.exe` should no longer be used and has been deleted from P4.  
	* In Perforce, UE4PrereqSetup is currently located in `//depot/UE4/Engine/Extras/Redist/en-us/UE4PrereqSetup.msi`
	* You should never really need to uninstall it, but if you need to just use the Control Panel to remove it like any other program.
 

#### Online
* Updated the Online Stats so that the stats part of leaderboards write we extracted to its own class 
* **Base OnlineSubSystem**
	* Added prefix for OnlineSubSystem logs 
	* Refactored profile interface into identity interface 
* **Facebook OnlineSubSystem**
	* Initial Facebook implementation for PC 
	* Allows login via browser window for retrieving access token 
	* Requests basic /me info using token if valid 
	* Added friends implementation for Facebook PC OnlineSubSystem 
* **MCP OnlineSubSystem**
	* Use the same consistent user auth method as everything else for account mapping requests 
	* Split service permissions into a set for client vs server 
	* Forced all hosts (listen / dedicated server) to use service permissions instead of user auth method for making Mcp requests 
	* Added new activation API to be used for detecting simultaneous login with the same credentials 
	* Added OnlineSubSystem MCP functionality needed to query external account info for a user 
		* Can be used to get display name from epic account 
	* Autologin creates a cached user account given an id & auth ticket 
	* Added `QUERYACCOUNT` for retrieving epic account info 
	* Renamed `ACCOUNTCREATION` exec to `CREATEACCOUNT` 
	* Added config option for disabling caching of downloaded mcp files (user,title) to disk 
	* Override mcp config section via command line override `-MCPCONFIG=<name> `
* **Http**
	* WinInet
		* Implemented `CancelRequest` for WinInet to finish a request that is already in flight 
		* Cancelling a request still calls all completion delegates 
		* Keep connection open using keep-alive functionality if available 


## Future Additions and Ongoing Efforts

#### Editor and Tools
* **Play In Editor** viewports don't propagate the first click in the window to the game, preventing accidental interaction when switching to the game from the editor.
* BSP surface resolve now uses W-buffering
* Updated **Curve Editor** to use a tabbed asset editor
* Reverted notifications so they don't pop in front of other apps.
* Improved load error message log output to be more useful to users
* Map check now adds a notification, rather than always popping up the log when building lighting
* Prevented crash when selecting actors in **Play In Editor**/**Simulate In Editor** modes
* Shared collections cannot be created if the project is not under source control.
* Prevented crash on NULL post process camera component.
* Updated disallowed characters to allow less-restrictive path names for projects
* Drag/drop Actors are only selected on drop, rather than on drag.
* Newly added packages are now saved before being added to source control via the path view context menu.
	* This prevents files being corrupted in Perforce 
* Parented **Level Browser** color picker to remove striped background.
* Drag-drop applying materials to BSP now correctly restores viewport focus
* Ensured HitProxy is refreshed when switching widget modes
* Material editor undo/redo does not undo/redo twice
* Prevented **Map Check** from incorrectly reporting that lighting needs rebuilding
* Prevented directory watcher crash on shutdown
* Small changes to the message log to help improve readability/usability.
* Ensures no longer stop video capture from working.
* Extender delegates added to all toolbars/menubars that support it.
* Correct parent now appears in project wizard when alternating selections.
* Approve tabs for closure when shutdown is already in effect.
* Additional ensure conditions added to help track down null node.
* Dragging from a node with **Context Sensitive** disabled now shows all possible actions.
* **Map Check** dropdown now displays the name of the world instead, to indicate that its not duplicate information.
* **Save Layout** now writes the users settings to disc.
* **Matinee** comboboxes now take up less space.
* **Level Editor** **Toolbar** now appears above the viewport.
* Default light is now closer to origin, just slightly out of view.
* Modified how detach is handled in the context menu. 
* Prevent notification spam while using property sliders.
* Crash no longer occurs when running movie after undoing recording.
* Allow editor to continue if a **Buffer Visualization** command is missing.
* Restore `DefaultSkeletalMesh` member of _PhysicalAssets_ when re-importing corresponding _SkeletalMesh_.
* Hidden actors are now respected when dragging assets into the level.
* **Matinee** viewport now specifies an `IsVisible()` function so that it will have its `Tick` called.
* Guard against null group pointer when removing levels.
* **New Level** dialog, scrollbar no longer overlaps thumbnails.
* **Generate Visual Studio Files** will now early out and warn the user if the `Source` folder is missing.
* **Crash Reporter** now correctly reports changelists and callstacks for UE4 crashes
* Default map settings were renamed and now save correctly
* Template maps that are auto-loaded on editor startup can no longer be saved to prevent accidental overwriting
* Drop-down menus are now displaying correctly if they're too large to fit either above or below the anchor widget
* Hitting **Alt + Enter** when in windowed mode no longer resizes the window, nor moves it, when restoring the window from fullscreen windowed mode.
* The **Message Log** tab is now a nomad tab, similar to the **Output Log** tab.
* The **Source Control** dialog in the **Editor Settings** are now reflected in the source control connection immediately.
* Optimized _Actor_ duplication in the **Level Editor**.
* Moving the pivot point with **Alt + Middle Mouse Button** when editing BSP brushes in orthographic view now works correctly.
* Placing a _Spotlight_ now has the correct default rotation (does not affect _Spotlights_ already placed).
* Selecting one color channel in the **Texture Editor** is now displayed as grayscale instead of modulated by the color of the channel.
* **Destructible Mesh Editor**:
	* Chunks can be selected in viewport and the properties of the selected chunks can be edited. - Succinct description 1
	* Updated icons for the view mode **Buffer Visualization** and the **Refresh** button.
* The majority of the editors dialogs have had their looks standardized. 
* Improved workflow for meshes with levels of detail (LODs) in the **Vertex Paint** tool.
* Running **Simulate** in the editor now invisibly executes a **Play In Editor** and then **Eject**.This allows `ReceiveBeginPlay` to have been called on all actors in the simulated world.
* Renaming _Sockets_ in the **Static Mesh Editor** is now done inline.
* **Miscellaneous UI Updates**
	* Created new MapCheck icon at 16px and 40px.Requires code hook-up 
	* Created new tintable icons for the connected and disconnected animation pins and 1p28x icon (again tintable) for the animation result node.PNG assets only, require code hook-ups. 
	* Created new trash can icon to replace current **Clear All** array button icon - replaces existing PNG. 
	* Created a new 40px icon for **Destructible Mesh Editor** refresh button. 
	* Removed back view LCD from camera mesh, and added source assets. 
	* Replaced undo and redo icons actually used for Cascade this time!Not destructive - simple png replace. 
	* Revised 16px and 40px icon sizes for Save All Levels icon - Change List is PNG assets update only. 
	* Additional icons for _AimOffset1D_ and _BlendSpace1D_ (both require code hook-up).PNG updates only. 
	* Swapped out icon to a _f_ function symbol.Overwrites existing PNG asset only. 


#### Blueprints
* Renaming _Components_ in the **Blueprint Editor** is now done inline.
* Synthetic names in the title bar of _Level Blueprints_ have been changed to reflect the current map.
* **Promote to Variable** will now have the user set the name inline in the MyBlueprint window.
* Exec pins in the pin selector widget are no longer toggleable as arrays.
* Redesigned the UI for _User Defined Enums_ to use details customization.
* Toggling pin types to be references and arrays can now be done outside of the pop-up menu.
* Collapsed graphs can be renamed inside the graph node.
* The **Component** tab viewport in the **Blueprint Editor** now ticks particles.
* Added a right-click context menu to the **Timeline Editor** for improved usage.
* The transform gizmo is no longer visible in the preview viewport when a root component node is selected in **Components** mode within the **Blueprint editor**.
* Made access to the _Blueprint_ preview actor more efficient in **Components** mode of the **Blueprint Editor**.
* Multifonts have been removed.
* Improved debug instance selection when opening _Blueprints_.Editing a _Blueprint_ from the asset menu will find an instance to debug if there is one.Additionally the debug instance should now update correctly when editing subsequent _Blueprint_ instances.
* **FloatToString** kismet function now trims excess zeros.
* Function connections should now undo/redo correctly.
* **Ctrl + K** can once again be used to find an actor's reference in _Blueprints_.
* Improved UI in **Blueprint Editor**'s component mode
	* Simpler to use
	* Improved user feedback with class icons and a less tightly packed layout
	* Search box to quickly find components
	* Components are now grouped into _categories_
* Improved context menu options in _Level Blueprint_ when selecting multiple actors
* Improved Find in _Blueprint_ search results to prevent false positives when searching for numbers (removing the junk node index from search criteria) 
* Wired up all current types of graph nodes to automatically look for _rich tooltip_ style documentation (which will be added over time)
* Generalized the latent action manager to allow latent behavior in any type of _Blueprint_, not just actors (it also works on actors that don't otherwise tick).Latent actions can also be declared in function libraries.
* Added touch enter/leave events and delegates to actors and primitive components 
* Prevented _State Machine_ entry nodes from being wired up to a conduit (which is not currently supported by the runtime)
* Prevented _AnimBlueprint_ instances from finishing initializing if their source _Blueprint_ had compile errors 
* Added cleanup code to remove NULL references from _Blueprint_ graph arrays (fixing very old Animation assets that were saved after deleting _State Machines_, which currently crash on load) 
* Made it impossible to drop variable nodes in graphs with an incompatible schema 
* Added the ability for graph drag-drop operations to query the hovered graph even when not over a node or pin 


#### Gameplay and Framework
* Behavior Trees system is still a WIP
* Loading Screens in progress.
* **World Browser**
	* Added support for joining as a client to a host with world composition
	* Added `ALevelBounds` actor for levels participating in world composition, which defines level bounding box.Can be updated automatically on level actors changes or used with just fixed bounds
	* Added loading bar to level tiles 
	* Added simulation view while in **Play In Editor**/**Simulate in Editor**
	* Levels which have bounds bigger than `WORLD_MAX` still will be visible in case level bounds intersects world bounds 
	* Added bottom status bar (mouse location, marquee rectangle size, world size) 
* Notification that _Skeleton_ needs to be saved to keep current _SkeletalMesh_ as default now only appears when there is a change, rather than always.
* A game viewport can now receive input from multiple game controllers each controlling a separate _Player Controller_.
* Made the component asset broker extendable 
* Added `AActor::bFindCameraComponentWhenViewTarget` to allow actors to opt out of using a _Camera Component_ where available when they are a view target 
* Ongoing development of **Unreal Automation Tool**
	* Unified **UnrealBuildTool** and **UnrealAutomationTool** logging systems
	* Added support for building programs 
	* Added platform abstraction layer and split `AutomationScripts.dll` into multiple (platform) DLLs.
* **Physics**
	* Player/Physics interaction:Player can push around physics objects while moving
		* Player can push away blocking physics-simulated objects and will generate a slight force on overlapping physics-simulated objects. 
		* The force the player applies to the objects can be setup in the _CharacterMovementComponent_. (see Category=Player Physics)


#### Rendering
* Removed **DOFOverrideTexture** feature - we will have a **BlurUI** feature instead - that allows to blur content behind UI elements 
* Added NVIDIA specific annotation to favor NVIDIA high performance GPU over slower integrated  
* Removed old shadow method since the new one was already the default for quite some time.
* Removed _+1_ on the bounding boxes (was once needed for physics, but that's not longer the case).It was causing issues on shading where it was using the enlarged bounding box.
* Disabled atmosphere for non-lit views
* Reduced **Landscape** Spline Z-fighting in the editor and made the spline lines render with the correct world-Z coordinate
* Photons are no longer blocked by back facing triangles in **Lightmass**. 
* Improved Directional Light's importance estimation in **Lightmass**.
* Added gamma space output to OpenGL ES2 renderer.
* Added EnvBRDF analytic approximation for OpenGL ES2.
* Removed `UPrimitiveComponent` pointers from renderer structures to make it harder to create race conditions accessing component properties directly from the rendering thread
* Warnings regarding level of detail (LOD) when manipulating emitters in **Cascade** are now more explicit.


#### Animation/Persona
* Added new _1D Blend Space_ icons to the editor for use in **Content Browser**
* Duplicating sockets in **Persona** now duplicate attached assets too
* Cached attached meshes in **Persona** so that they survive mode changes
* Renamed instances of _MID_ and _MIC_ to something more appropriate for users (_MaterialInstanceDynamic_ and _MaterialInstanceConstant_).
* You can now undo adding an Animation Sequence to a Skeletal Mesh. 
* **Persona** rotation/translation widget for bones/sockets/wind now looks and behaves correctly.
* Selecting an item in the **Skeleton Tree** tab in **Persona** no longer forces it to scroll to the top of the view.
* **Alt + Dragging** sockets in the **Skeleton Tree** will place the copy on the bone you drop it onto, rather than the original bone.
* World/Local space icons no longer render as black squares in **Persona**.
* **Copy Bone Names To Clipboard** feature no longer appends an underscore and number to the bone name.
* Renaming _Sockets_ in **Persona** is now done inline.
* Changed default **Persona** layout to have a home for the **Compiler Results** tab and **Find in Blueprints** tab (collapsed, at the bottom of the layout) 
* Generalized snap to socket support in the **Level Editor** to work on any _SceneComponent_ that contains sockets, instead of just _Skeletal Meshes_ and _Skeletons_

	[REGION:note]
	Currently preserving the behavior of only using true sockets - no bone snapping.
	[/REGION]
 

#### Audio
* _Ambient Sound_ now shown in the **Add Actor...** list, when right-clicking in a viewport.


#### Core
* Templated native base classes can now be used in `UCLASS` definitions, e.g.:

		UCLASS()
		class UMyClass : public UObject, public MyNativeClass<int>
		{
		};

* `TArray` now has a `FindByPredicate()` member function for use with function objects or lambdas:

		void Func(const TArray<int>& Ints)
		{
			// Try to find an odd number
			const int* Result = Ints.FindByPredicate([](int N) { return (N % 2) != 0; });
		}

* Enum spacers are now hidden from editor dialogues.
* `TAssetPtr` now works with `nullptr_t`.
* **Lightmass** built as a modular application again (**Swarm** depends on the **Core** and **SwarmInterface** DLLs it creates when building DLL-based) 
* Only call reset loaders on valid packages that are not in the root set during cooking. 
* Disparate word wrapping behaviors have been reconciled into one consistent, reusable algorithm.
* `GIsUnattended` has been replaced with `FApp::IsUnattended`.If you have any code that can be run on an unattended server, you will need to update it accordingly.
* We are now using a better hashing function for all pointers.The function was slightly adjusted to ignore the lower 4 bits of the pointer in 64-bit executables as they will be zero anyway.
* Added `GetObjectsOfClass()` and `GetDerivedClasses()` to `ObjectHash.h`.
	* These functions are now used to address a load time perf issue with _Blueprints_
* Added `PluginNameRedirects` to handle renamed plugins.
* Added a re-import button to the font editor.
* The **Asset Registry**'s API was changed to accept `FName` class names instead of `UClass` pointers
* Now only classes with `RequiredAPI` are allowed in the `SNewClassDialog` (with a few exceptions).
* Perforce Logs, Warnings, and Errors are now differentiated in the log file.
* Porting the engine and the editor to Mac OS
* Added Windows XP compiling and linking for Visual Studio 2012 
	* New `WindowsPlatform.SupportWindowsXP` flag (defaults to off for now) 
	* Requires Visual Studio 2012 Update 1 or higher to be installed! 
	* Implemented according to: [](http://blogs.msdn.com/b/vcblog/archive/2012/10/08/10357555.aspx )
* Deleted UnSetup and UEDocsURLHandler programs (no longer used)
* Improved error handling for module and plugin loading 
	* Enabled game plugins to now report errors when they fail to load
* Added **GeneratePackagingManifest()** to `ITargetPlatform`.
	* Generates packaging info given the **ChunkIDs** in the **Asset Registry**.Primarily intended for generating `.pak` file lists for chunk based installs.
* Added asset availability and prioritization functions to `IAssetRegistry`.
	* These are basically simplified calls into the platform chunk install code, using the ChunkID stored on `FAssetDatas`.
* **Stats**
	* Better memory utilization.
	* `STAT NONE` will now work properly with the new stats system.
	* Stat captures may be initiated and stopped from Blueprints.
* **UnrealFrontend (UFE)**
	* Initial implementation of the launcher utilizing UnrealAutomationTool.
	* Switched UFE to be non-monolithic.
* Improve UnrealAutomationTool (UAT) to be able to work from a precompiled fallback so UAT can be run from a machine without Visual Studio or MSBuild
* Make sure UnrealAutomationTool builds UnrealHeaderTool even if it is not explicitly included when using XGE
* FMonitoredProcess allows for the creation of external processes that can be monitored by the Editor or Engine
* Reduced time for Unreal Build Tool hot-reload compiles by only processing required modules and sources.
* Changed all uses of BuildException in Unreal Build Tool that are thrown in response to a caught exception to propagate the inner exception.


#### Online

* Achievement interface for Steam/Null.

