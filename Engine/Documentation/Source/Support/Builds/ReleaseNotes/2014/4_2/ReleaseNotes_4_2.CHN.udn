INTSourceChangelist:6537038
Title: 虚幻引擎4.2版本说明
Crumbs:%ROOT%, Support/Builds
Description:
Availability:Public
version: 4.2
Order: 42
[TOC(start:2 end:2)]

[PUBLISH:Licensee]
## 版本信息

[REGION:simpletable]
| 项目 | 信息 |
| ---- | ---- |
| **标签** | [INCLUDE:#labels] |
| **构建于变更列表#** | 2094635 (//depot/UE4-QA/Promotable-CL-2094635) |
| **分支于变更列表#** | 2093060 (//depot/UE4-Releases/4.2) |
| **分支于变更列表#** | 2069788 (//depot/UE4/Promotable-CL-2069788) |
| **Visual Studio版本** | Microsoft Visual Studio 2013 12.0.21005.1 REL |
| **Xcode版本** | 5.1.1 |
| **DirectX** | 2010年6月 |
[/REGION]

[COMMENT:none]

[EXCERPT:Labels]
QA_APPROVED_UE4_BUILD_2014_06  
QA_APPROVED_UE4_BUILD_CURRENT  
QA_APPROVED_UE4_BUILD_MINIMUM
[/EXCERPT:Labels]

[/COMMENT]
[/PUBLISH:Licensee]

## 主要新功能

#### 新内容：样本车辆游戏 
虚幻引擎现在完全支持载具！这个样本游戏的特色是越野车辆和沙漠环境中的环形轨道。比赛穿越沙丘，岩石悬崖和古老的废墟，并尝试超越您最好的成绩！

![](veh02.png)

* 对四轮驱动，前轮驱动，和后轮驱动系的开箱即用支持。
* 默认的传动系模拟假设4个车轮；然而，它可与任何数量的车轮配合使用。
* 所需任意数量的挡位。
* 自动和半手动变速器。
* 它完全对蓝图公开！

![](vehicleProps2.png)(w:935)

* 文档可在此处找到：
	* [载具内容指南](Engine/Physics/Vehicles/VehicleContentCreation)
	* [载具设置指南](Engine/Physics/Vehicles/VehicleUserGuide)

#### 新内容：摄像机动画系统
对 **摄像机动画** 的支持现已添加到虚幻引擎4！这些非常类似于虚幻引擎3的摄像机动画，但现在使用蓝图支持进行了扩展。

* 从概念上讲，一个 **摄像机动画** 只是一个动画，可以分层到游戏内的摄像机。您可以将摄像机的位置和旋转、FOV和后期处理设置动画化。
* 它们可以在内容浏览器中创建，您可以将Matinee中的轨迹转换为一个轨迹，或者您可以从外部工具（如Maya）导入关键帧


![](cameraAnims.png)(w:935)

* 要编辑一个 **摄像机动画**，只需像编辑其他资源一样在内容浏览器中双击该资源。摄像机动画编辑器是略微将Matinee进行定制后的版本。  
* 多个 **CameraAnimInst**（目前最多8个）可以同时处于活动状态，所有这些都混合在一起并促成最终的摄像机设置。

#### 新内容：用于蓝图的用户定义的结构
 **用户定义的结构** 是一个全新的资源，现在可以在编辑器中使用！ 
* **用户定义的结构** 可以在 **内容浏览器（Content Browser）** 中创建。 

![](newStruct.png)

可以在独立编辑器中编辑它们，方法是在 **内容浏览器（Content Browser）** 中双击它们。编辑完成后，可以在蓝图中创建新的用户定义的结构类型的变量。

![](stucts.png)(w:935)

* 像矢量、旋转体和其他结构一样，您的 **用户定义的结构** 将具有 **Make** 和 **Break** 节点。
	**用户定义的结构** 应表现得如同原生结构::USTRUCT(BlueprintType)。

#### 新内容：蓝图函数库
用户现在可以创建蓝图函数库资源！这允许您创建一个很好的蓝图函数库，可以在整个项目中使用！

![](blueprintFunctions.png)

与蓝图宏库不同，蓝图函数库不需要父类，并且能够被当前项目中的所有蓝图调用。

#### 新内容：画布渲染目标
-	现在您可以将画布UI直接绘制到纹理，然后将该纹理映射到场景中的对象！ 
-	目前只在C++中支持此操作。
-	特别感谢社区成员James Tan提交此内容。

#### 新内容：载具模板
我们有一个新的项目模板，它提供了一个简单的机动车以启动您的基于新载具的项目。此模板的蓝图版本和C++版本现在都已可用！

[REGION:fullwidth]
![](VechicleTemp.png)
[/REGION]

#### 新内容：FABRIK逆向运动学解算器
**FABRIK** 表示前后延伸逆向运动学。它是一个IK解算器，计算任意长度的骨骼链！

![](FABRIK.png)

* 末端效应器设置与我们的TwoBone_IK节点相同。它可以是绝对变换，也可以是相对变换（基于同一骨架中的另一个骨骼）。
* 在解算器部分中，定义要使用的骨骼链，从“根部”到“尖端”。“尖端”将尝试达到末端效应器位置。
* 末端效应器旋转源允许您控制旋转（维护组件空间、局部空间、匹配末端效应器目标旋转）。
* 精度是它需要接近的程度。越低，到达末端效应器目标的精确度就越高，但成本也就越高。（虽然从测试来看，它做得很好，比CCD_IK节点快得多）。
* MaxIteration用于控制性能，并确保边缘情况不会降低帧率。

感谢GitHub社区成员Stephen Whittle提供此功能！

#### 新内容：动画蓝图资源覆盖编辑器
Persona现在能够从子蓝图覆盖父蓝图中的 **Play** 和 **Evaluate** 节点中使用的资源。 

编辑器可以在Persona中的 **Window菜单** 中找到：

![](assetOverride.png)

编辑器收集所有可以覆盖其动画资源的节点。新资源可以从面板右侧的选择器中选择。这也适用于更长的继承链，并根据层级中更高层的蓝图显示该蓝图最合适的默认值。+最后，“眼睛（eye）”按钮将把您链接到要覆盖的AnimGraph节点 

![](assetOverride03.png)

#### 新内容：用于蓝图的实验数学表达式节点
有一个新的实验性插件可以用于蓝图的数学表达式节点。这个节点允许您简单地输入一个表达式，它将生成输入引脚、输出引脚和包含数学表达式的重叠图表。

![](mathExpNode.png)

* 要使用此节点，只需在插件管理器中激活 **数学表达式** 插件。然后，它将出现在蓝图图表编辑器的右键单击上下文菜单中。
* 创建后，输入表达式。如果出错，您可以通过重命名节点来编辑表达式。


#### 新内容：改进的动画通知编辑器
对 **动画通知** 的多选支持已添加到Persona中！**Shift + 单击** 添加到选择，**Ctrl + 单击** 切换通知选择。

您可以拖动选择，它将在服从捕捉的同时保持在通知面板内：

![](animNotify1.png)

复制/粘贴也适用于具有多个选项的组： 

![](animNotify2.png)

* 您可以将它们粘贴到绝对时间、相对时间或起始时间处，与复制它们的位置相关。

#### 新内容：组件的蓝图剪切和粘贴
剪切/复制/粘贴命令现已添加到组件模式！

![](CopyandPasteBlueprint01.png)

* 选择单独的组件，右键单击或使用键盘剪切/粘贴命令以复制或移动组件！
	
* 您可以从一个蓝图中剪切/复制组件，并将其粘贴到另一个蓝图中！

	如果选择包含层级，它将保存在粘贴的副本中！


#### 新内容：用于SplineThicken材质函数的UV视差
现在，您可以使用SplineThicken材质函数将UV视差添加到材质中。这会让您的对象看起来是圆的！ 

![](spline1.png) ![](spine2.png)

* 函数的法线部分已被修整，现在它们正为所有对象旋转进行正确转换。这提供了准确的照明和高光！
	
新输入：
* **用于厚度的UV (V2)**：这允许您指定一个不同的UV通道来存储厚度（从顶部到底部）梯度。在UV1或2上使用这个函数对于包含整个树长的树很有用，包括的不仅仅是单个管道或分支等。
* **用于纹理的UV (V2)**：这是您想应用到管道上的任何纹理的UV。您需要在这里包含和缩放数学，这样它就知道视差是多少。这仅在您想要三维视差校正结果时才需要使用。
* **DeriveNormalZ（布尔）**：选中后，着色器将使用DeriveNormalZ来计算法线的高度。提供更好的“圆形”形状。当为false时，设0.62为以0为中心的半个球体的平均高度。如果您想使用CustomUV来解算法线，则需要DeriveNormalZ为false，或者需要样条网格体中心的一排顶点。如果没有增加顶点，并使用CustomUV，则法线在整个网格体上的高度为0。
* **AngleCorrectedNormals（布尔）**：当应用额外的法线纹理时，是否使用角度校正法线。更精确，但更昂贵。
* **AdditionalNormal (V3)**：允许您指定附加的法线贴图，它将借用顶点法线变换。 
	
新输出：
* **视差UV（UVs with Parallax）**：这使得UV可以用于任何您想要使用3D视差的纹理。
	
	目前，该函数只处理一个纹理坐标，所以如果您想要多个纹理获得校正，它们都需要使用相同的缩放。

#### 新内容：动画调试功能
您可以任意使用许多新的动画调试命令。首先是在游戏中渲染骨架网格体的骨骼：

![](animDebug1.png)

这是使用 **ShowDebug Bones** 控制台命令启用的。如上图所示，骨骼由单独的白线表示。 
* 可以通过 **ShowDebugToggleSubCategory** 3DBones控制台命令启用与Persona中显示的骨骼相匹配的替代外观。
* 接下来是动画调试输出，可以使用 *ShowDebug Animation** 控制台命令启用该输出。

![](AnimationDebug02.png)

* 它被分成5个部分，每个部分都可以使用 **ShowDebugToggleSubCategory** 命令和下面列出的类别名称来打开和关闭，例如ShowDebugToggleSubCategory SyncGroups
	* **同步组（SyncGroups）**：显示当前对最终姿势有贡献的动画资源，由它们的同步组组织（如果不属于某个组，则不进行分组）。默认情况下，本节中列出的混合空间显示了它们的所有贡献动画/权重。要减少输出使用的屏幕空间，可以使用 ShowDebugToggleSubCategory **FullBlendspaceDisplay** 关闭该选项。
	* **蒙太奇（Montages）**：列出角色当前使用的蒙太奇。活动的蒙太奇用绿色突出显示。
	* **曲线（Curves）**：列示正在播放的动画已激活的曲线值（格式为名称: 值对）。
	* **通知（Notifies）**：显示当前生效的任何通知状态。
	* **图表（Graph）**：显示活动的姿势图表。从显示表示最终姿态的最后一个节点（根节点）开始，到列示生成最终姿态所需的所有节点。节点以保持其层级的方式表示，允许用户查看哪些节点连接到哪些节点，而无需参考原始蓝图资源。活动节点的颜色为绿色（如果它们已经被切换为使用 **ShowDebugToggleSubCategory FullGraph** 显示），非活动节点的颜色为灰色。




#### 新内容：关卡视口统计数据
许多有用的引擎统计数据都可以通过视口可视化。现在，您可以使用视口“显示（Show）”菜单下的新“统计数据（Stat）”部分来访问它们。

![](ViewportStats.png)

* 您还可以通过在调试控制台提示符中键入“Stat <名称>”来切换大部分状态。  
* 默认情况下，会话之间不会记住这些统计数据，但是您可以在编辑器的视口（Viewport）首选项部分中启用“保存引擎统计数据（Save Engine stats）”来打开它。




#### 新内容：OBJ网格体文件格式支持
您现在可以导入静态网格体的.obj文件！
文件格式非常简单，因此请记住它不支持以下特性：
* 顶点颜色导入。
* 碰撞导入。
* 切线和副法线导入。
* 变换。
* 如果不使用Z向上建模，模型将被旋转，因为使用OBJ导入，我们无法获得源坐标系。

#### 新内容：将FBX升级到2014
FBX导入器现在已经从Autodesk升级到2014版。  
* 这允许正确导入镜像网格体上的切线和副法线
* 在2014年之前，您仍然可以使用在任何Maya/Max版本中找到的早期FBX插件，但是在使用非常旧的文件时，可能会在导入时收到警告。


#### 新内容：Windows XP支持（预览）
使用GitHub的开发人员现在可以将项目部署到Windows XP。
* 要启用此功能，请在UnrealBuildTool中将WindowsPlatform.SupportWindowsXP设置为true，并编辑项目的设置以启用OpenGL着色器支持。
* 在Windows XP上运行时，自动使用OpenGL而不是DirectX11进行渲染 
* 该特性处于早期开发阶段，并将随着时间的推移而得到改进。


#### 新内容：改进了对Actor销毁的蓝图支持
在4.2预览说明中列出了EndPlay事件将替换蓝图中已销毁的事件，但4.2中不再是这种情况。
* 在蓝图中，新的Event EndPlay节点最终将替换已销毁的事件。Event EndPlay节点应该向前使用。
* EndPlay不仅会在Actor被显式销毁时触发，还会在Actor停止存在时执行。这包括一个关卡过渡、一个正在卸载的流送关卡、一个PIE会话结束或正在为Actor调用的销毁
* 此外，EndPlay节点现在给出了执行它的原因（销毁Actor、关卡过渡、编辑器中运行结束以及从世界场景中删除）
* 在C++中，AActor::Destroyed虚拟函数仍然存在，但是它主要用于编辑器事务目的。
* C++ AActor::EndPlay虚拟函数接受一个枚举参数，该参数指示从世界场景中删除Actor的原因。
* AActor::OnRemoveFromWorld虚拟函数（之前当每个Actor所属的流送关卡被卸载时会为这些Actor调用它们）现在已被删除，它的功能包含在AActor::EndPlay中。


## Release Notes

#### Marketplace

**Stylized Rendering** - The Stylized Rendering sample is available on the Marketplace for free! This sample showcases the rendering flexibly of Unreal Engine 4.

![](StylizedMap.png)

**SciFi Hallway** - This amazing Deus Ex SciFi scene comes from Quixel's CMO Wiktor Ohman.

![](ScifiHallway.png)

**New Pivot Painter Content Example Map** - Still images don't do this example justice.The Pivot Painter feature of Unreal Engine 4 can be used to add life quickly and efficiently to anything that needs some sort of ambient movement. 

![](PivotPainterMap.png)

**New Audio Content Example Map** - Like the Pivot Painter map, the Audio Map is one you just need to load up and browse through.It shows off the basics of Sound Actors and various sound effects.

![](AudioContentMap.png)


#### Learning Resources

**Videos**
* [Blueprint Essentials 1 - Variables Overview](https://www.youtube.com/watch?v=zaVY5A0hqiI)
* [Blueprint Essentials 2 - Variable Types](https://www.youtube.com/watch?v=n-EQYeU5nZk_)
* [Blueprint Essentials 3 - Struct Variables](https://www.youtube.com/watch?v=o46ZWNqh444)
* [Blueprint Essentials 4 - Object and Class Variables](https://www.youtube.com/watch?v=xu7ymhN_7Lo)
* [Blueprint Essentials 5 - Enum Variables](https://www.youtube.com/watch?v=5nLqEW6YXPY)
* [Blueprint Essentials 6 - Variable Get vs. Set](https://www.youtube.com/watch?v=NM1ET4uQOnc)
* [Blueprint Essentials 7 - Blueprint Execution Order](https://www.youtube.com/watch?v=JH6zLAMFSi0)
* [Blueprint Essentials 8 - Arrays](https://www.youtube.com/watch?v=bGtQmuav748)
* [Blueprint Essentials 9 - For Loops](https://www.youtube.com/watch?v=hXSKGYQvZsI)
* [Blueprint Essentials 10 - Using Loops: Procedural Level Design](https://www.youtube.com/watch?v=kmnC6IUPGjI)
* [Blueprint Essentials 11 - For Loop with Break](https://www.youtube.com/watch?v=o08VJxabdb4)
* [Blueprint Essentials 12 - For Each Loops](https://www.youtube.com/watch?v=F-Ab8oS6YDU)
* [Blueprint Essentials 13 - While Loops](https://www.youtube.com/watch?v=2RkaUkaLZu4)
* [Blueprint Essentials 14 - Custom Loops](https://www.youtube.com/watch?v=Mxw391exhVg)
* [Fun with Blueprints: Spawning Dynamic Objects](https://www.youtube.com/watch?v=9-7SmkasS_A)
* There are an additional 7 videos to the [3rd Person Blueprint Game](https://www.youtube.com/watch?v=GWbd0Wowwnk&list=PLZlv_N0_O1gZS5HylO_368myr-Kg2ZLwb&index=2) video series.

**Documentation**
* New: [Vehicle Setup Guide](Engine/Physics/Vehicles/VehicleUserGuide) - How to setup a vehicle in Unreal Engine 4.
* New: [Vehicle Content Guide](Engine/Physics/Vehicles/VehicleContentCreation) - Setting up the art content for a vehicle.
* New: [Particle User Guide](Engine/Rendering/ParticleSystems/UserGuide) - Cascade User guide updates.
* Texture Painting - Painting textures and vertices in the editor.
* [Audio Documentation Updates](Engine/Audio) - The reference for all things auditory in Unreal Engine 4.
* Refactored Content Examples Documentation Page - New directory pages allow you to see all available content examples for different features at a glance.

**In-Editor Tutorials**
* New: Added a walk through for the Destructible Mesh Editor.
* Changed the Tutorial Landing window in the Editor to show all available In-Editor Tutorials.
* Fixed the Destructible Mesh Editor no longer shows the Skeletal Mesh Editor tutorial.

**API Documentation**
* New: Added brief descriptions of every module to the API documentation.

#### Unreal Engine Launcher
* New: Unreal Engine Launcher Installer is now localized into Korean and Japanese.
* New: Unreal Engine desktop and start menu shortcuts now have a proper, localized, tooltip description.
* New: The Unreal Engine Launcher Installer will now inform users installing on Windows 7 if they do not have SP1 installed.
* New: You can find links to lots of content documentation and other info all located in the lower right of the launcher.
* New: Mouse over any of your content and you can choose to uninstall or verify.
* Improved Startup speeds.
* We've modified how and when the launcher calls for content data to improve start-up time.
* Fixed the launcher so it will no longer restart the UE4 download process from the beginning if it was closed during the "Installing" phase.
* Fixed a number of localization bugs for Korean and Japanese.
* Fixed the Launcher so it should now always restart after self-updating on Mac.
* Fixed a number of inconsistencies with downloads and content in Offline mode.
* Fixed a problem with the installer failing for Win8 and Win 8.1.
* Fixed the launcher to check for not of enough disk space.
* Fixed an issue where you could not choose a download location on Win 8.1 due to default UAC permissions.
* Fixed the right-click .uproject options not working on Windows.
* Fixed the launcher becoming unresponsive when updating from 1.1.0-2054669 to 1.2.0-2064046 with UE_4.1 and all 4.1 samples downloaded.
* Fixed opening a project from the Launcher so it will no longer skip the update process.
* Fixed the launcher so that sample content that has changed project names will now be able to be opened through the launcher.
* Fixed Auth token expiration time - This bug could cause users to lose their connection to online services and no longer receive self-patch notifications or feed updates

**Feed**
* New: The feed is your one stop for all news and stories
* New: New pinned stories to highlight important updates.You can dismiss them by clicking the pin Icon on each story.

#### Editor and Tools

**Editor**
* New: When attaching actors, you can now use an actor picker to choose which actor to attach to.
* New: Added check for "Game View" when drawing geometry features in the editor.
* New: You can now use **Alt + [ or ]** to adjust the size of the transform gizmo.
* New: Collections now store and display a custom colour based on the local user settings.
* New: Added option for **Flat Bottomed** collision to character components.
* New: You now have the option to remove content downloaded from marketplace.
* New: Creating multiple actors using drag and drop from the content browser now undo's as a single transaction.
* New: Added the ability to refresh the project browser list.
* New: You can now choose where to place a class added via the New Class Wizard.
* New: You can now provide a function to get the objects you want to show in the details view when creating an FSimpleAssetEditor.
* New: Simple and Group Stat Exec commands can now be triggered from the level viewport Show menu directly.
* New: Added a one pane (1x1) editor viewport layout.
* New:  The Editor now informs the user on the success of importing and exporting.
* New: **AllowPreserveRatio** is now a metadata flag we scan for on **FVector UProperties**.It causes a ratio lock to be added (like the one for scale) to the editor.
* New: Unreal Engine 4 now supports applying the material to only to the sub-mesh that you drag the material onto.If you are holding down the [Shift] key we'll apply the material to every slot (the old behaviour).
* New: **UMG** work has begun, the **UMG / UMGEditor** modules exist but are highly volatile right now.**UMG** can be enabled with -umg when running the editor.It's extremely early and very buggy and not user friendly.
* New: Added the ability to copy and paste location, rotation, and scale from the details panel.
* New: Added an option to force loading movies to complete even if the game has finished loading.
* New: Added an option to toggle whether or not loading movies can be skipped by a user.
* New: Added an option in the preferences to ignore snapping to floors when dragging from the content browser.
* Changed the UI for toggling between absolute and relative transform components.You can now toggle this via the drop down arrow next to a transform property in the details panel
* Changed the way actors are renamed when converted.If a custom name is not present, the conversion process will be allowed to rename the actor.
* Upgraded the FBX SDK to 2014.2.1 which makes all FBX 2014 files compatible with the editor.
* New: In-game Slate UI is now visible in editor viewports when in immersive mode.
* New: Added user-editable array of object query types to Radial Force components.
* Changed the FBX import type selector to now have some extra text informing the user that a particular import type has been auto-detected, and a warning if the user attempts to override this.
* Changes to socket transforms now reflected immediately in asset instances in the world.
* Changed Duplicate to now function with hidden actors.
* Changed **Dynamic Expression Parameter** nodes to update when another is renamed.
* Changed the Based movement to now use the character base.
* Changed the Based-movement for characters to now use quaternions.
* Adjusted normal map auto detection to consider alpha=0 pixels as black for the averaging (to avoid misidentifying predominantly blue sprites as normal maps).
* Updated Project Settings to now always save as default.
* Moved **Source Code Access** functionality to a plugin.
* Source code access is now performed on the main thread.
* Changed Static Meshes to check **Screen Size** rather than Distance to calculate which LOD to use.
* Changed renaming an actor so it now ignores leading or trailing space when validating the name.
* Changed "Range" Properties in the details tab to now have their own structure customization.
* Updated the render material in canvas for ES2 mode.
* Fixed **Engine Content** from appearing in "Submit to Source Control..." dialog when it shouldn't.
* Fixed the **Submit** message icon to no longer be a 'stop' symbol.
* Fixed static lighting to now be disabled for **Instanced Static Mesh Components**.
* Fixed project template names and descriptions to now fall back to English if a valid translation cannot be found for the current language.
* Fixed the **Submit Files Dialog** to now follow the same style as the rest of the engine.
* Fixed the Cascade **ToggleRealtime** tooltip to match the other Editor Viewports.
* Fixed **Particle System Components** to now toggle visibility correctly. 
* Removed viewport-position menu items from the scene outliner menu.
* Disabled **Ctrl-select** when using vertex paint.
* Fixed docking not working correctly when docking over the scene outliner.
* Fixed up issues found when creating a new source control provider.
* Fixed opening multiple instances of Visual Studio.
* Fixed crash on shutdown on Mac.
* Fixed Subversion not connecting to working copies with spaces in their paths.
* Fixed missing Font Editor toolbar icons.
* Fixed the size of some editor sprites for Actor types whose sprites were too large.
* Fixed a divide by 0 error when zooming out level viewport too far.
* Removed **STAT url** until the page is working again.

**Particles and Cascade**
* New: Implemented Anim Trails type data for creating trails vfx.

**Content Browser**
* New: **Enter** and **Space Bar** keys can now be remapped for the **Content Browser**.

**Material Editor**
* New: **Release Stats** and **Built-In Stats** toolbar buttons now have icons.
* **Built-in Stats** - These stats show the base cost of a shader without any nodes in the graph.
* **Release Stats** - These stats show the base cost of a shader without any nodes in the graph. 
* New: Added Find Results tab to Material Editor.
* New: Added shortcut for component mask on **Shift+C**.

**Texture Editor**
* Changed the Use **Specified Mip Level** property (**bUseSpecifiedMipLevel**) to now default to false, and the number of cinematic mips is ignored by the UI when it's true.

**Persona**
* Changed the default and details inspectors so they are now disabled when editing a read only graph.
* Fixed the erroneously set flag **CPF_DisableEditOnTemplate** by adding code to clear it.

**Source Control** 
* New: Added ability to sync directories from source control in the Editor.
* New: Added P4 API 2014.2 with OpenSSL 1.0.1g.**BSP**
* New: A BSP actor is now deselected when none of its surfaces are selected.
* Fixed the Slate Property Editor Combo element (**SPropertyEditorCombo**) to update the selection before opening itself.

**AI and Navmesh**
* New: Behavior trees can now use root level decorators from sub-trees.

**UI**
* Fixed restoring from full screen to now set the window position on the native window.

**Viewports**
* New: In-game Slate UI is now visible in editor viewports when in immersive mode.

**Scene Outliner** 
* New: Added filter that hides actors that aren't in the current level.
* New: There is now a menu option for scene outliner folders to select all the actors within that folder.
* New: Duplicate now functions with hidden actors.
* Changed the 'eye' visibility icon to acts on the current selection, if the row is selected.
* Removed viewport-position menu items from the scene outliner menu.

**Landscape**
* New: Implemented navigation geometry export for instanced static meshes.
* New: Added support for landscape splines to FBX export.
* New: Added support to consider LODBias/ForcedLOD affects to Lightmass geometry.
* New: Added new LOD falloff model to reduce triangles easily with good transitions.
* New: Exposed **Auto Rotate on Join** to the Spline tool UI.
* New: Added support for moving Landscape Splines to streaming levels.
* Reduced landscape layer importing time.
* Fixed selection rendering when re-registering.
* Fixed **LODDistanceFactor** applying problem.
* Fixed issue where some landscape components would fail to compile the material.
* Fixed crash when clearing the **LandscapeMaterial** property on an existing landscape.
* Fixed rendering of landscape components with holes after they'd been moved to a streaming level.
* Removed sculpting-only options from flatten tool when in paint mode.

**World Browser**
* New: Added tiled landscape importing.Tiled heightmaps/weightmaps can be exported from an application like World Machine.

**Audio**
* New: Integrated **Omni Radius** from Unreal Engine 3.

**Animation**
* New: Native **Anim Notifies** and states are now supported.
* New: Added a new cloth collision type which enables to interact between the character and other clothing objects, like a curtain.It just works with turning on the check box "Collide with Environment".
* Added additional cloth visualization menus.You can see "Clothing" sub-menu when clicking "Show" menu in Persona.It only appears when the character has clothing.

**Translation Editor**
* New: Added Search functionality to Translation Editor with a new Search tab.
* New: Added import/export to Portable Object (.po) format buttons to allow translation in 3rd party applications.On import, changes are shown in the "Changed on Import" tab.
* Increased the number of directories searched for Localization projects to include "LocalizationPath" directories specified in configuration files.

**Blueprints**
* New: Added support for copy-and-paste for component selections in Components mode within the Blueprint editor.
* Fixed duplicate move calls occurring on Blueprint Graph nodes. 

**Rendering**
* New: The build scale is now taken into account when calculating a Static Meshes streaming texture factors.
* New: Particle parameter distributions can now be used in conjunction with Color Over Life for GPU sprites.
* New: **Mesh Modifies Material Position** now uses the result of the material translator.
* New: **Particle Lights** now work with camera offset (per-view).
* New: Added commandlet which lists all **Static Mesh** assets that were imported from **Speedtrees**. 
* New: Added **Sun Disc Scale** property to the **Atmospheric Fog** Actor to control sun disk size in the sky.

#### Blueprints
* New: You can now drag-n-drop other Blueprint assets into a Blueprint graph to get an Add Child Actor Component node.
* New: Added Deproject node to HUD Blueprints, and Deproject Screen Position to World to Player Controller Blueprints.
* New: Local variables in Blueprint functions now utilize Get/Set nodes.
* New: **Sky Lights** are now a Blueprintable class.
* New: Added an **EnumLiteral** node.
* New: You can now use the arrow keys to navigate Blueprint variable pin type selection and components' dropdown menu.
* New: When replacing actors with Blueprints via the right click "replace with actors" menu, if the Blueprint is a child of that actor, the editor will try to copy over properties.
* Hid deprecated nodes from the default GetMenuEntries behavior of UEdGraphSchema::GetGraphContextActions.
* Allowed derived classes to be selected in the debug filter widget.
* Disabled debug and trace site generation when compiling in a commandlet (such as during cooking).
* Changed Blueprint compiler errors to only display once when entering Play in Editor and will not reappear until the Blueprint is modified.
* Updated the **Spring Arm Component** with more options including rotation lag, and only inheriting rotation from certain components.
* Updated the **Game Mode** to allow no Pawn specified.
* Exposed the Set Phys Material Override node on Primitive Components to Blueprints.
* Fixed crashes in duplicating timelines and improved workflow in making external graphs.
* Fixed Blueprint compile error message when self pin type is missing or is otherwise unknown.
* Fixed "create Blueprint based on selected actor" to work with actor types without an asset associated with them.
* Fixed a serialization crash that occurs when there is a cyclic dependency between a Blueprint class and an implemented interface.
* Fixed Blueprint function node output pins incorrectly mapped to internal skeleton class types.
* Fixed a pin connection issue / potential crash when changing the spawn class type on a SpawnActor node with connected inputs.
* Fixed a logic error in busy-waiting for the game thread to finish executing when a Blueprint breakpoint is hit.
* Fixed a crash when attempting to place a migrated Blueprint asset that derives from a native C++ class.
* Fixed a crash when attempting to open a new Blueprint derived from a TriggerBox.
* Removed internal "SKEL_*" classes from the class picker.

#### Rendering
* New: Added **r.RenderTargetPool.Events** to visualize Render Target Pool usage over a frame
* New: Sky lights with Static Mobility can now be baked and are now supported and work on mobile.
* New: Added **r.AmbientOcclusionSampleSetQuality** cvar now it  can be used with larger radius and less levels.
* New: Added support for taking orbit offset in to account when generating particle spawn and death events.
* New: We now show instruction counts for mobile lightmapped shaders without distance field shadows in the material editor.
* New: Added show flags to disable directional/point/spot light contributions
* New: Added **r.OptimizeForUAVPerformance** for performance tests.
* Updated the Directional Light selection process for exponential fog inscattering to use the first light configured as "IsUsedAsAtmosphereSunlight".
* Updated **Point Attractors** so they can now filter motion along axes.
* Updated Mesh particle CPU rendering to optimize them for ES2.
* Changed tangent space calculations to better match xNormal.
* Improved game console auto completion to be more like editor.
* Optimized and improved **Screen Space Ambient Occlusion** using dither noise and fewer samples.
* Updated allocated and free **GBufferTargets** to now allow reuse on demand, however you  still need to release them earlier than post processing if possible.
* Updated OpenGL 4 support:
	* ARB_vertex_attrib_binding
	* ARB_buffer_storage
	* Re-enabling redix sort on OpenGL
	* Depth bounds test
	* NVX_gpu_memory_info
	* ARB_tessellation_shader
* Optimized **Render Target** usage and optimized out a pass for **Tile Deferred Lighting**, one less consumer for **Light Accumulation**.
* Renamed some **Light Propagation Volume** properties to be clearer.
* Changed SSAO Occlusion default settings to have less haloing.
* Changed Particle Lights to now work with Camera Offset module.
* Changed Particle parameter distributions to now work with the **Color Over Life** module for GPU emitters.
* Changed hand-written shaders using the static keyword on variables to now also be declared as const on their declaration.
* This is required to reduce complexity in the cross-compiler, and any non-constant issue can be done via alternate methods.
* Fixed reflections to now work on subsurface scattering materials.
* Fixed shadercomplexity view mode.
* Fixed shadow artifacts with very small objects.
* Fixed crash on startup with new shaders, RHIClear was used in resource init.
* Fixed Splitscreen ReflectionEnv rendering.
* Fixed rendering when reflectionenv is disabled.
* Fixed SSR being applied in SM4 path.
* Fixed blending bug with layered reflection captures.
* Fixed optimization that got disabled for LPV to be working as before if LPV is off (faster shadow map rendering).
* Fixed a bug where all light probes used for applying precomputed GI on characters were half bright

#### Gameplay and Framework
* New: UBT is now configured using XML files instead of Environmental Variables.
* New: UBT quits early with error message when particular build configuration is not supported.
* New: CameraAnims are now supported, including in Blueprints.
* New: Added debug display in game of active **Anim Graph**.
* New: Added localization import support for Portable Object (.po) files.
* New: Native animation notifies now supported.
	* Inheriting from **UAnimNotify** or **UAnimNotifyState** will allow the classes to appear in the notify menu and be added to the animation.	
* New: Multi-select now supported in the notify panel in Persona, drag/drop and copy/paste updated to work with multi-select.
* New: Animation asset references in parent animation Blueprints can now be overridden in child Blueprints.
	* Accessible through the window menu in Persona, the new tab is named "Asset Override Editor."
* New: Added native animation notify state to control start/stop on a looping particle emitter.
* New: Motion axes can now be bound to input components in both C++ and Blueprints.
* New: Asynchronous loading time limits can now be set per game.You can modify AsyncLoadingTimeLimit or PriorityAsyncLoadingExtraTime on UEngine.When priority loads happen during cases like seamless travel, it will use all available time even if blocked on I/O, for much higher throughput but a CPU cost.
* New: Added **CreateInstance** function to **ULevelStreaming** and exposed it to Blueprints.This change allows to create a copy of existing level streaming object with a new unique name, so user will be able to stream-in/out multiple instances of a particular map package.
* New: Made **Behavior Trees** a Blueprint type to allow Blueprint authors to use it as a property.
* New: Added a Blueprint-implementable event "OnPosses" for **AIController**.
* New: Introduced concept of generic **AIRequestID** to be used with AI requests like movement and EQS queries.
* New: Added a function to **AIController** making it use the indicated **Blackboard Asset**, to be used independently of **Behavior Trees**.
* New: Character movement can now be affected by external forces.
	* Including Radial Force Components.
* New: Touch input now supported on HUD hit boxes.
* New: Mouse smoothing based on FOV properties now available in Input Project Settings.
* New: You can now query for assets in the asset registry without including in-memory assets.This is almost never what you want to do, but it provides a good perf gain in some cases.
* New: Added **SCOPE_LOG_TIME_IN_SECONDS** to do the same **SCOPE_LOG_TIME** log, but in seconds instead of milliseconds.
* New: Added sub-stepping support for mobile devices and non APEX builds.
* New: Added Vehicle anim instance and wheel handler for vehicle.
* New: Added simple Look at control.
* Made foliage snap to *all* modified landscape components when sculpting, not just those in the current level.
* Moved **SpringArmComponent** tick into **PostPhysics** to resolve some camera jitter
* Upgraded NVTT (NVIDIA Texture Tools) to v2.0.8
* Updated PVCT exporter to now export images with dimensions greater than 4096.Source image will come from 1st image in the mip chain where the largest dimension is <= 4096.
* Reorganized a lot of vehicle tuning data for official release.
	* Changed units from cm to m.
	* Added and moved tuning variables for official release, any existing tuning will likely need some fixing up.
* Updated the HUD hit box click and Component OnClick events to now respond to both double and single clicks.
* Updated **Radial Damage** to now default to "unblocked" unless the visibility trace finds an explicit blockage.Use bCanBeDamaged to toggle damagability.
* Updated **CreatePlayer** to now be callable from Blueprints.
* Improved **PlayerStart** selection.All **Player Starts** will be considered and preference will be given to "unoccupied" start points.
* Refactored Streaming Manager so that it's not so specific to textures.
* Optimized shadow clearing / resolving so that you can clear and resolve whole shadow targets rather than using subrects.
* Updated **Behavior Trees** to clean up orphaned behavior tree nodes when the tree is regenerated.
* Updated **String Asset References** to now properly detect and repair references to Play in Editor objects when duplicating for Play in Editor.
* Changed owned Components (components that have an Actor in their **Outer** hierarchy) so they can now have **Outers** other than the Actor itself.
* Changed Audio Compression Info class so they can be selected by cooked platform.
* Changed **Unreal Version Selector** (and .uproject engine association in general) to now be compatible with Perforce distributions. 
* Changed launching the editor with out of date binaries will now attempt to compile them for you.
* Changed opening a project with an editor in a different location than before will now prompt you to copy/upgrade-in-place, and regenerate project/recompile binaries as necessary.
* Fixed Crash reports are so they now are always evaluated client side, in case there were bits of the callstack that are viewable.
* Fixed **Skeletal Mesh Components**, in the level editor viewport, to now correctly update their LODs.
* Fixed an issue that caused worlds with editor offsets to re-offset themselves every time the visibility of the world is toggled off and on.
* Fixed an accounting error in **ToggleBetweenPIEandSIE** that caused **StartMatch** to never be called since the game mode thought there were no players, only spectators.
* Fixed an issue running tappy chicken on PC Fixed an issue with control menus in vehicle game sample.
* Fixed an issue that was preventing some folders from being properly removed during uninstall of Unreal Engine.
* Fixed a crash at shutdown in **DirectoryWatcher**.Cancelled I/O requests must be completed before closing the handle and deleting the request.
* Fixed a bug that caused non-assert crashes to fail to produce a callstack in the log.
* Fixed if statement logic in Blueprint loading that would only access a variable if it was NULL, instead of only if it was !NULL
* Fixed Network connections to no longer time out in Play in Editor, after all, the servers are local.
* Fixed socket renaming display bug in Persona
* Fixed bug with derived Blueprints not showing inherited properties
* Fixed crash when loading a skeletal mesh if an attached asset could not be found
* Fixed bug in Layered Blend Per Bone where moving to 0.0 would fail to update the pose properly.
* Fixed invisible collision in landscape splines if the mesh is deleted.
* Fixed re-import of 8-bit heightmaps to an existing landscape.
* Fixed various landscape editor commands getting run on the pie world by accident (causing crashes).
* Fixed ramp and landscape splines tools not updating landscape collision/navmesh.
* Fixed "camera" and "visibility" trace flags on landscape splines.
* Fixed bug on mobile devices where ragdolls rendering was not being properly updated.
* Fixed sub-stepping support for dedicated servers.
* Fixed PhAT body selection not working when translucent picking is disabled.
* Fixed destructible mesh chunk islands not being properly updated.
* Fixed crash in Form extended destructible mesh.
* Fixed collision detection for instanced static mesh.
* Fixed texture visualization to work correctly when camera constraint black bars are being displayed, and when using resolution scaling (**r.ScreenPercentage**).
* Removed sculpting-only options from landscape editor flatten tool when in paint mode.
* Removed the **Mouse Wheel Spin** input mapping.
* Removed bUseSingleBodyPhysics from Skeletal Mesh.

**Profiler**
* New: Added first version of the thread view.To capture the data in the game use **stat startfileraw** console command.

**Draw Debug Helpers**
* New: Added support for displaying a Histogram of float values.Use **FDebugFloatHistory** to record samples, and **DrawDebugFloatHistory** to draw in game.Also available in Blueprints.

#### Audio
* Override Attenuation now toggles which attenuation options are available in properties.
* Renamed Sound Cue categories and re-ordered Sound Actor categories.
* Integrated Omni Radius feature for sounds that was previously added to UE3.
* Created Opus audio format for future use in streaming sounds.

#### Core
* New: Support for scripting language integrations via plugins.
	* To go along with this, there is an **experimental** Lua integration.
* New: Added DEPRECATED macro to support old C++ API deprecation.
* Fixed an error when copying visualizers when logged in as SYSTEM.

#### Paper 2D
* New: Added a show flag for Paper2D sprites.
* New: Added prototype sprite atlas generation (several unresolved data/workflow issues).
* New: Added placeholder settings panel.
* New: Added custom archive version for **UPaperSprite** assets.
* New: Sprites can now render in wireframe mode.
* Set **UPaperRenderComponent** default mobility to static.
* Paper2D module marked as runtime, allowing use in cooked games (Note: the plugin must be enabled in BaseEngine.ini and the engine recompiled for use in content only games).
* Implemented **AdditionalStatObject** to return the associated asset in the Paper2D render components (used for stats and error messages).
* Updated built-in materials to reference a smaller texture and hooked up Opacity link in case they are changed to Translucent.
* Sanitized generated asset names when importing JSON sprite sheet frames.
* Forced **VMI_Lit** for both orthographic and perspective modes in the Paper2D viewport clients.
* Updated built-in materials to reference a smaller texture and hooked up Opacity link in case they are changed to Translucent.
* Partially fixed tile map rendering rot (still not rendering correctly).
* Fixed negative volume 3D collision bug which caused NAN masses and missing collisions.
* Fixed support for RTS_Actor and RTS_Component spaces in UPaperRenderComponent::GetSocketTransform.
* Fixed crash when cooking with Paper2D plugin enabled.
* Fixed bogus selection rectangle in tile set viewport.
* Fixed sprites not showing up in sprite/flipbook editor viewports.
* Fixed missing toolbar icons in sprite and flipbook editors.
* Fixed typos in slow progress dialog (not from git).
* Removed unnecessary ticking from **UPaperRenderComponent** and add some property comments.

#### Networking
* New: Added a BeaconState class to store data in the beacon that needs to persist across levels.
* Fixed muting across seamless travel.
* Fixed PlayerController returning incorrect **IsLocalPlayerController()** results on dedicated servers.
	* Invalid results during a brief time between **Login()** and **PostLogin()** when PlayerController was created but Role/RemoteRole wasn't set yet.
	* Added a new warning if **IsLocalPlayerController** is called during construction / destruction of a PlayerController.

**Online Subsystems**
* New: **Added DestroySubsystem** call to module, allowing the destruction of a single instance of an OSS.
* Enable voip for null online subsystem.

**Dedicated servers**
* Fixed **Autologin** to only use **OnLoginComplete** delegate now.
* Removed **OnLoginStatusChanged** from **autologin** flow, it's not correct, as we are actively trying to login.

#### Platforms
* New: A new socket subsystem supporting IPv6 has been added.
* New: Experimental support for Windows XP added.
* New: OpenGL is now available for cooked windows builds.
* New: Added a Target RHI option for Windows available through **Edit -> Project Settings -> [Platforms | Windows]**
* New: Mobile advertising support framework.
	* Basic framework support for both iOS and Android.
	* Initial support for iOS that allows third party frameworks, with symlink and file staging support from plug-ins and modules
	* Initial support for TapJoy advertising plug-in for iOS.
* Improved support for GL3 hardware.
* Increased timeout when connecting to servers to help with load times during development.
* Cleaned up code that deals with writing data to outbound bunch.
* Fixes for seamless travel bugs.
* Fixed a fairly large bug that could cause an assert during edge case conditions when writing to the outbound bunch.
* Fixed issue that could cause partial bunch sequence id's to wrap incorrectly.

**Android**
* New: The Google Play Services library for Android is now included.
* New: Achievements and leaderboards for Google Play on Android are now exposed through the new **OnlineSubsystemGooglePlay**.
* New: Unreal Engine 4 now sorts ES2 landscape vertices in the order of first use, from lowest to highest LOD.This minimizes the **MaxVertexIndex** ranges for draw calls at each LOD and substantially improves performance on devices with Mali GPUs.
* New: Added AdMob support for Android.Add the AdMob Ad ID in the Android project settings, then use the Blueprint ad interface to show and hide ads.
* Enabled ES 3.0 GLSL shaders on all Android devices reporting ES 3.0 support, enabling reflection cubemap roughness lookup.
* Fixed crash on devices that don't support floating point render targets.
* Removed the -f from the rm commands generated in the installation batch file.Some devices (eg Galaxy S III) do not recognize the -f and fail to remove old versions of files.

**iOS**
* New: Motion Support added for iOS.
* New: Added command line option -waitfordebugger so you can manually launch a packaged, installed app and have it wait for you to attach the XCode debugger at startup.

**Mac**
* New: UE4 now includes its own static build of svn-1.8.1 on Mac OS X.
* New: You can now enable OculusRift support on Mac OS X. 
* Improved handling of display arrangements for multiple monitors on OS X.
* Improved performance when mousing over the Editor on Mac OS X.
* Enable translucent self-shadowing on ShaderModel 4 renderers for the benefit of Mac OS X particularly.
* Improved support for Mac <= GL 3.3 drivers that don't support rendering to 3D or 2D array textures.
	* Older GPUs such as the ATi 4xx0 series, NVIDIA 9xx0/1xx/3xx and Intel HD 3000 should now render, though performance will be lower than newer GPUs. 
* Fixed the sky light irradiance on NVIDIA cards under OS X.
* Fixed (via work around) an OpenGL driver regression on AMD FirePro cards introduced in Mac OS X 10.9.3 that caused incorrect rendering of skinned models.
	* This workaround has a small but noticeable performance penalty and will be removed after the fix for the driver bug has been released.
* Fixed various minor rendering errors on the new Mac Pro's AMD FirePro cards on Mac OS X.
* Fixed **Emulate sRGB** rendering on Mac OS X to work around a driver bug.

**Xbox One**
* New: Exposed **ESRam** allocation to **VisualizeTexture** log printout and outside RHI.
* New: Some functions in **FOnlineSessionLive** have been implemented and can be used to play multiplayer over Xbox Live:
	* CreateSession, FindSessions, JoinSession, DestroySession.
	* Thanks to Lionhead for their contributions in this area.
* New: Integrated an HTTP implementation for Xbox One, courtesy of Lionhead.
* New: Packaging system updated to function with March and newer XDKs, support for localized resources added, appxmanifest templates separated for deployment and packaging.
	* A sample service configuration is available for ShooterGame in its Build\XboxOne\ServiceConfigurations as an example of how to configure stats to work with Unreal.
* Changed VRam to allow allocation on Volume/3D Textures - it's actually supported, reenabled for LPV.
* Fixed some D3D warnings in the debug/validated driver.
* Fixed occasional giant particles when spawning GPU emitters.
* Fixed tonemapping being way too bright when min/max brightness are the same.

**Playstation 4**
* New: Morpheus support! Morpheus support is available both running on PS4, and on PC.
* New: UAVs properly maintain append/consume counters.
* New: Experimental LPV on PS4.
* New: Added support for host side audio debugging using Sulpha.
* New: Added support for Depth Bounds Testing.
* Improved handling of copy to resolve targets when the command buffer hasn't been kicked.
* Fix for user marker push/pop mismatch when using Razor GPU capture.
* Fix **profilegpu** console command.
* Fix for GSVS sizes not getting updated correctly midframe (fixes corrupt reflection captures).
* Fixed Speedtree crash on Playstation 4.

**Steam**
* Updated Steam code to accept a -**queryport=xxx** parameter.

**Linux**
* Updated certain developer tools so they can now be compiled for Linux (**SlateViewer**, **UnrealFrontend**, etc), both via cross-compiling and natively. 

###API Changes

#### Editor and Tools
* Improvements to the blueprint compiler pipeline to allow new compilers to be registered with the Kismet module.
* Limited the game name length (20 characters), and predict the cooking path length and limit the naming length accordingly.
* Removed UEditorEngine::GetContentBrowserAssetTreePath.
* Removed the experimental **SlateComponentWrappers** module.

#### Gameplay and Framework
* New: **Can Jump** is now exposed in **ACharacter** to be overridden by Blueprints.
* New: Add Character::OnWalkingOffLedge() event.
	* Makes it easier to detect transition from walking -> falling, exclusive of jumping or other things that may cause the same transition in movement modes.
* New: Added "hold-to-jump-higher" functionality to **ACharacter**.
* Changed the **Match** state machine in **GameMode** to be explicit and based on the **MatchState** namespace, as opposed to being based on a set of bools.Renamed several functions in GameState and GameSession as well, if you have a native subclass you may need to rename functions.Here are the states and how things changed:
	* **EnteringMap** is the initial state.Actors are not yet ticking and the world hasn't been fully initialized.It will transition to the next state when things are fully loaded.
	* **WaitingToStart** (was **bWaitingToStartMatch**) is the next state, and **HandleMatchIsWaitingToStart** is called when entering.Actors are ticking, but players have not yet spawned in. It transitions to the next state if **ReadyToStartMatch** returns true, or if someone calls **StartMatch**.
	* **InProgress** (was **bMatchIsInProgress**) is the next state, and HandleMatchHasStarted (split off from **StartMatch**) is called when entering, which calls **BeginPlay** on all actors.Normal gameplay is in progress.It transitions to the next state if **ReadyToEndMatch** returns true, or if someone calls **EndMatch**.
	* **WaitingPostMatch** is the next state, and **HandleMatchHasEnded** (was **PerformEndGameHandling**) is called when entering.Actors are still ticking but new players are not accepted.It transitions to the next state when a map transfer starts.
	* **LeavingMap** (was **bLevelChange**) is the last state, and HandleLeavingMap (was GameEnding) is called when entering.The match stays in this state while transfering to a new map.
	* Aborted is the failure state, started from AbortMatch.This is set when there is an unrecoverable error.
* Changed **AGameMode::bDelayedStart** into a new flag, **bStartPlayersAsSpectators**.If true, new players will initially spawn as spectators, if false they'll spawn directly as pawns.**bDelayedStart** now only affects rather the match should start immediately.
* Changed the maximum number of Physics Material Surface Types to 64.
* Changed FCoreDelegates::OnObjectPropertyChanged to take the property change event as an additional parameter.
* Changed **AActor::BeginPlay** to now happen earlier in some situations.It happens when the game state transitions to **WaitingToStart** or **InProgress** for the first time, previously it only happened when the match started.Renamed functions so **UWorld::BeginPlay** is what calls **AActor::BeginPlay**.
* Moved Blackboard Component's reference over from BehaviorTreeComponent to BrainComponent.
* Renamed Nav Movement Component's GetActorLocation to more appropriate GetActorFeetLocation.
* Changed the preview attached asset type from raw pointer to **TAssetPtr**.
* Changed the signature of **FAssetTools::CreateDiffProcess()** to take filepaths explicitly as separate params.
	* Adds abstraction between the public API and the diff provider.API no longer exposes the diff command line format.
* Updated **FAssetTools::CreateDiffProcess**.Any uses of will need to have the filenames removed from the arguments and passed in though the new New and Old filename variables.
* Fixed Stationary mobility from showing up on anything except subclasses of **ULightComponentBase**.
* Fixed **FCoreStyle** initializing and failing per file when all of its assets are missing (Saves 1-2 seconds of load time on iPhone4 for games that don't use Slate).
* Removed the obsolete 'Z' parameter in **UCanvas::DrawTile()**.

#### Core
* New: Licensee Engine Version support (Changelist part).
	* Modified **UpdateLocalVersion** UAT script to be able to set licensee versions and custom change lists.
* New: **TWeakPtr<Base>** is now comparable with **TWeakPtr<Derived>** and all **TWeakPtrs** are now comparable with **nullptr**.
* New: **TArrays** can now be copied with an ExtraSlack parameter to reserve space after the copied elements.
* New: Additional **FString** functionality:
	* **AppendChars** can take a character count to allow the use of not-null-terminated strings or partial strings.
	* const TCHAR* + **FString** operator.
	* More **rvalue** awareness.
* New: **UnrealHeaderTool** now handles #ifdef/#ifndef/#elif/#else directives.
	* Contents of these blocks are skipped in their entirety by UHT - it's not proper support, but will allow more native code to compile.
* Changed the build system to now take care of building generated code.
	* *.generated.inl files no longer needed to be included by users.
	* Including a .generated.inl file will now issue a compiler warning to remove the include.
	* In a future engine release, the .generated.inl which warns will be removed entirely and the #include will fail.
	* New: Delegates and multicast delegates now support UFunction bindings.
	* Combined SetObject() and SetFunctionName(), on script delegates, into BindUFunction().
	* Updated TWeakObjPtr to now have proper assignment operators, so that explicit boxing of UObject values is no longer necessary.
	* Refactored GIsBenchamrking, GUseFixedTimeStep to FApp::IsBenchmarking and FApp::UseFixedTimeStep respectively.
* **FCrc::StrCrc32** no longer warns when instantiated with a 1-byte character type.
* **FString** constructor with **ExtraSlack** no longer reads off the end of the source string.
* **FString::Replace** no longer mutates the const source string (thread safety issue).
* Files without BOMs are now treated as UTF-8 rather than just ANSI.
* TSharedPtr, TWeakPtr and TSharedRef are now move-aware.
* Build times improved in functions containing lots of **TSharedPtr** assignments.
* Renamed assets referenced by Blueprint CDOs no longer incorrectly warn about being referenced by code.
* You can now change a **UProperty** of a raw pointer type to a **TAssetPtr** and the property will be fixed up while serializing tagged properties.
* Added some documentation to the **SpawnParameters** fields Refactored relevant Blueprints to have frame independent turn/look Fixed and issue in **APawn::EnableInput** Fixed a bug in strategy game minimap Reinstated rocket launcher (and ammo) in shootergame sample.
* Updated infrastructure to support showing World assets in the Content Browser and generally tread worlds as normal assets.
* Added **EWorldType::Inactive** to represent worlds that are loaded but not currently being edited in the level editor.
* **UBrush** objects corresponding to the default brush are now saved with the same outer as the default brush, instead of top-level objects in world packages

#### Slate
* New: The Slate Remote server (for UDK Remote iOS app) is now a plug-in (enabled by default).
* New: The Slate module has been split into Slate and SlateCore in preparation for UMG.Detailed upgrade notes for this change:
	* If your module previously had a module dependency to 'Slate', it now also needs a PrivateModuleDependency to 'SlateCore' in its Build.cs file.
	* If your module exposes in any of its Public header files types that are now declared in SlateCore, it needs a PublicModuleDependency to 'SlateCore'.
	* The ToolTip property type on SWidget has changed from SToolTip to IToolTip; change local variables to TSharedPtr<IToolTip> instead of TSharedPtr<SToolTip> where needed
	* IToolTip is not a widget.If you need access to the actual widget that represents the tool tip, use IToolTip::AsWidget(); If you need access to the tool tip's content, use IToolTip::GetContentWidget().
	* After syncing to this changelist you may have to clean your /Engine/Intermediate/Build/ directory and rebuild your entire project.
	* If in your project you are getting linker errors for unresolved types that are now declared in SlateCore, you may be missing a dependency to 'SlateCore'.
	* If in the Engine code you are getting linker errors for unresolved types that are now declared in SlateCore, you may need to rebuild the entire Engine.
	* Updated the directory layouts for Slate and SlateCore modules for better discoverability.
* Fixed morphtarget not playing in matinee.
* Fixed the bug with losing collision settings when copying objects for custom settings.

#### Rendering
* New: **StreamingPauseRendering** allows some rendering to continue while blocking loads complete so that the game does not appear to hang.Default is to display the previous frame with an animated widget in the corner.This can be overridden by providing a custom **BeginStreamingPauseDelegate** and **EndStreamingPauseDelegate**.

#### Blueprints
* New: Added UK2Node_LatentOnlineCall which automatically creates entries for all static factory methods in UOnlineBlueprintCallProxyBase subclasses.
* In **UK2Node** sub-classes, in **ExpandNode()**, users should now use the CompilerContext's **MovePinLinksToIntermediate/CopyPinLinksToIntermediate** instead of the schema's Move/CopyPinLinks.
* A runtime check() will be triggered if users fail to do so.This is to facilitate more accurate Blueprint debugging.It allows us to easily map generated pins to ones the Blueprint user sees in the graph.
* Updated **UK2Node_BaseAsyncTask**, making it much easier to extend.

#### UnrealHeaderTool
* HeaderGroup keyword has been removed as well as all header group generated headers.
* Any UCLASS declarations using HeaderGroup keyword need to be fixed (keyword has to be removed).
* All #includes to HeaderGroupNameClasses.h generated headers in licensee code need to be removed otherwise code will not compile.

#### Platforms

**iOS**
* iOS on PC will build content only projects entirely on PC, but now requires users to add their developer certificate to the PC.This can be done with IPP.
* Prevented delayed success adverts from being shown if they succeed after the app has requested hiding them.
* Fixed various threading / logic issues in the iOS achievements implementation.

**Xbox One**
* May 2014 XDK is now supported.
* Xbox One binaries are now located under the Game\Binaries\XboxOne folder when packaged or deployed.

#### Online
* Exposed achievements to Blueprints: WriteAchievementProgress, CacheAchievements, GetCachedAchievementProgress, CacheAchievementDescriptions, and GetCachedAchievementDescription.
* Exposed ShowPlatformSpecificAchievementsScreen and ShowPlatformSpecificLeaderboardScreen for use on iOS and Android.

#### PlatformMath Refactor 
* Renamed Trunc, Round, Floor, Ceil to **TruncToInt**, **RoundToInt**, **FloorToInt**, **CeilToInt**.Added *ToFloat versions.
	* Old version should still compile but will generate a warning during compilation and need to be removed o


