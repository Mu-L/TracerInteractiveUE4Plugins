INTSourceChangelist:3810467
Title:アンリアル エンジン 4.2 リリースノート
Crumbs:%ROOT%, Support/Builds
Description:
Availability:Public
version:4.2
order:2

[TOC(start:2 end:2)]

[PUBLISH:Licensee]
## ビルド情報

[REGION:simpletable]
| アイテム | 情報 |
| ---- | ---- |
| **Labels** | [INCLUDE:#labels] |
| **Built from Changelist #** | 2094635 (//depot/UE4-QA/Promotable-CL-2094635) |
| **Branched from Changelist #** | 2093060 (//depot/UE4-Releases/4.2) |
| **Branched from Changelist #** | 2069788 (//depot/UE4/Promotable-CL-2069788) |
| **Visual Studio Version** | Microsoft Visual Studio 2013 12.0.21005.1 REL |
| **Xcode Version** | 5.1.1 |
| **DirectX** | June 2010 |
[/REGION]

[COMMENT:none]

[EXCERPT:Labels]
QA_APPROVED_UE4_BUILD_2014_06  
QA_APPROVED_UE4_BUILD_CURRENT  
QA_APPROVED_UE4_BUILD_MINIMUM
[/EXCERPT:Labels]

[/COMMENT]
[/PUBLISH:Licensee]

## 主な新機能

#### New:サンプル 自動車ゲーム (Vehicle Game) 
車両がアンリアル・エンジンで完全にサポートされるようになりました！このサンプルゲームでは、オフロードの自動車と砂漠を舞台にした周回コースが登場します。砂丘と岩の断崖、それに古代の遺跡を背景にしてレースが楽しめます。ベストタイムを更新しよう！

![](veh02.png)

* そのまま使用できる 4WD、FWD、RWD のドライブトレインをサポート。
* デフォルトのドライブトレインのシミュレーションでは 4 輪が想定されていますが、任意の数の車輪で機能するようになります。
* ギアの数は好きなだけ。
* 自動および半手動のトランスミッション。
* そして、すべてがブループリントに完全にエクスポーズされます！

![](vehicleProps2.png)(w:935)

* ドキュメントはこのページを開いてください。
	* [車両コンテンツ ガイド](Engine/Physics/Vehicles/VehicleContentCreation)
	* [車両セットアップ ガイド](Engine/Physics/Vehicles/VehicleUserGuide)

#### New:カメラ アニメーション システム
**CameraAnim** がアンリアル・エンジン 4 にサポートされました！この機能は、アンリアル・エンジン 3 のカメラ アニメーションと非常によく似ていますが、ブループリントのためのサポートが拡張されています。

* 考え方として **CameraAnim** とは、ゲーム内のカメラに重ねることができるアニメーションのことです。カメラの位置と回転、FOV、ポスト プロセスの設定をアニメートできます。
* CameraAnim はコンテンツブラウザで作成できます。また、マチネのトラックをカメラ アニメーションに変換したり、Maya のような外部ツールからキーフレームをインポートすることもできます。


![](cameraAnims.png)(w:935)

* **CameraAnim** を編集するには、コンテンツブラウザで、他のアセットの場合と同じようにアセットをダブルクリックします。カメラ アニメーションのエディタは、マチネを少しばかりカスタマイズしたものです。  
* 複数の **CameraAnimInst** (現在は最大 8 個) を同時にアクティブにできます。これらすべてがブレンドされ最終的なカメラの設定に寄与します。  

#### New:ブループリントのためのユーザー定義の構造体
**ユーザー定義の構造体** は、エディタ内から使用できる新しいアセットです！ 
* **ユーザー定義の構造体** は、 **コンテンツブラウザ** で作成できます。 

![](newStruct.png)

ユーザー定義の構造体は、スタンドアロン型のエディタで編集できます。そのためには、 **コンテンツブラウザ** でユーザー定義の構造体をダブルクリックします。編集が完了したら、ブループリントで、その新たなユーザー定義の構造体の型の変数を作ることができます。

![](stucts.png)(w:935)

* Vector や Rotator、その他の構造体と同様に、 **ユーザー定義の構造体** には、 **Make** ノードと **Break** ノードがあります。
	**ユーザー定義の構造体** は、ネイティブの構造体と同じように振る舞わなければなりません。

#### New:ブループリント関数ライブラリ
ユーザーがブループリント関数ライブラリのアセットを作れるようになりました！これによって、プロジェクト全体で使用できるブループリント関数のライブラリができることになります！

![](blueprintFunctions.png)

ブループリント マクロ ライブラリとは異なり、ブループリント関数ライブラリには、親クラスが必要ありません。また、現在のプロジェクトに含まれているブループリントのどこからでも呼び出すことができます。

#### New:キャンバス レンダー ターゲット
-	キャンバス UI を直接テクスチャに描画して、そのテクスチャをシーン内のオブジェクトにマッピングできるようになりました。 
-	この機能は、C++ とブループリントのワークフローで完全にサポートされます。 
-	この機能をサブミットしてくれたコンピュータ メンバーの James Tan さんに感謝いたします。

#### New:自動車テンプレート
新たなプロジェクト テンプレートができました。このテンプレートでは、車をベースにしたプロジェクトを開始する時に使用できるシンプルな自動車が提供されます。ブループリント バージョンと C++ バージョン両方のテンプレートがご利用いただけるようになりました！

[REGION:fullwidth]
![](VechicleTemp.png)
[/REGION]

#### New:FABRIK インバース キネマティクス ソルバ
**FABRIK** は、Forward And Backward Reaching Inverse Kinematic (前方後方到達インバース キネマティクス) の略で、ボーンのチェーンがどんな長さであっても機能する IK ソルバです！ボーンのチェーンがどんな長さであっても機能する IK ソルバです！

![](FABRIK.png)

* End Effector の設定項目は、TwoBone_IK のノードと同じです。絶対的な Transform または相対的な Transform (同一のスケルトンの別のボーンに基づく) にすることができます。
* Solver のセクションでは、使用するボーンのチェーンを設定します (Root から Tip まで)。「Tip」は、エンドエフェクタの位置まで到達することになります。
* End Effector Rotation Source によって、回転を制御できます (コンポーネント空間、ローカル空間の維持、エンドエフェクタ ターゲット ローテーションのマッチ)
* Precision は、忠実度に関わるものです。値が低いほど、End Effector ターゲットに対して精度が高くなりますが、負荷は高くなります。(ただし、テストでは、非常によい結果が得られ、速度も CCD_IK ノード より格段に上です。)
* MaxIterations は、パフォーマンスを制御し、エッジケースでフレームレートが低下しないようにするためのものです。

この機能を作っていただいた GitHub コミュニティ メンバーの Stephen Whittle さん、ありがとうございます！

#### New:アニメーション ブループリント アセット オーバーライド エディタ
ペルソナに新たな機能が加わりました。親アニメーション ブループリントの **Play** ノードおよび **Evaluate** ノードで使われているアセットを、子ブループリントからオーバーライドできる機能です。 

  この機能のためのエディタは、ペルソナの **Window メニュー** に入っています。

![](assetOverride.png)

このエディタは、アニメーション アセットをオーバーライドできるノードすべてを集めて表示します。新たなアセットは、パネル右のピッカーから選択できます。長い継承チェーンでも動作し、 階層の上のほうにあるブループリントに基づき、そのブループリントのために最も適切なデフォルトを表示します。目のマークのボタンをクリックすると、現在 オーバーライドしている AnimGraph ノードにリンクします。 

![](assetOverride03.png)

#### New:ブループリントのための実験的な数式ノード
ブループリントの数式ノードに使用できる実験的なプラグインが新たにできました。このノードでは、数式を入力すると、入力ピンと出力ピンが作られ、その数式を含んでコラプスされた (折りたたまれた) グラフができます。

![](mathExpNode.png)

* このノードを使用するためには、プラグイン マネージャーで **Math Expressions (数式)** プラグインを有効化するだけです。有効化すると、ブループリント グラフ エディタの右クリック コンテクスト メニューに表示されるようになります。
* 作成が終えたら数式を入力します。間違えた場合は、ノード名を変更することによって、数式を編集できます。


#### New:Anim Notify エディタの改善
**Anim Notifies** の複数選択機能がペルソナに追加されました。**shift+クリック** で選択に加わり、 **ctrl+クリック** で Notify の選択/選択解除が切り替わります。

選択した Notify をドラッグすることができます。Notify は、スナップに従っている間、Notify パネル内にとどまっています。

![](animNotify1.png)

選択したグループにもコピー/ペーストが効きます。以下のようにいくつかオプションがあります。 

![](animNotify2.png)

* 絶対的な時間、相対的な時間、元の時間 (Notify がコピーされた場所を基準にして) にペースト可能です

#### New:コンポーネントのためのブループリント カットアンドペースト
カット/コピー/ペースト コマンドが、コンポーネント モードに追加されました！

![](CopyandPasteBlueprint01.png)

* 個々のコンポーネントを選択して、右クリックまたはキーボードのカット/ペースト コマンドで、コンポーネントをコピーまたは移動することができます。

* あるブループリントからコンポーネントをカット/コピーして、別のブループリントにペーストできます！

	選択したものに階層が含まれている場合は、ペーストされたコピーにもそのまま保存されます！


#### New:SplineThicken マテリアル関数のための UV パララックス
SplineThicken マテリアル関数を使用して、UV パララックスをマテリアルに追加できるようになりました。これによって、オブジェクトに丸みを帯びさせることができます！ 

![](spline1.png) ![](spine2.png)

* この関数の法線部分を修正して、すべてのオブジェクトの回転について正しい変換が可能になりました。これによって、ライティングとスペキュラがより正確になります！

新たな入力:
* **Thickness (厚み) のための UV (V2)**:厚み (先端からベースまで) のグラディエントを保存するために、異なる UV チャンネルを指定できるようになります。これが役立つのは、単に 1 個のパイプやブランチなどではなく、ツリー全体の長さが含まれる可能性のあるツリーのために、UV1 または UV2 に置く場合です。
* **テクスチャリングのための UV (V2)**:パイプに適用したいテクスチャのための UV です。数式をここに含めスケーリングすることによって、どの程度パララックスすべきか指定する必要があります。これが必要になるのは、3D パララックス補正の結果が必要な場合だけです。
* **DeriveNormalZ (Bool)**:これにチェックを入れると、シェーダーは、 DeriveNormalZ を使用して法線の高さを計算します。丸みをもった形状になり格段に見栄えが良くなります。false の場合は、0.62 と見なされます。この値は、0 を中心とする半球の高さの平均です。CustomUVs を使って法線を解きたい場合は、DeriveNormalZ を false に設定するか、スプライン メッシュの中心に一列の頂点が必要となります。追加の頂点がなく CustomUVs を使用しない場合は、法線がメッシュ全体で 0 の高さをもつことにされてしまいます。
* **AngleCorrectedNormals (Bool)**:追加の法線テクスチャを使用する場合に、角度補正済みの法線を使用するかどうかを指定します。正確性が増すほど、負荷が大きくなります。
* **AdditionalNormal (V3)**:頂点法線の変換に加わる追加の法線マップを指定できます。 

新たな出力:
* **UVs with Parallax**:3D パララックスを加えたいテクスチャのために使用できる UV です。

	この関数は現在のところ、1 個のテクスチャ座標しか扱えないため、複数のテクスチャに補正させたい場合は、すべてテクスチャで同一のスケールが使用される必要があります。

#### New:アニメーション デバッグ機能
自由に使用できる新たなアニメーション デバッグ コマンドが多数搭載されました。まずスケルタルメッシュのボーンのインゲーム レンダリングがあります。

![](animDebug1.png)

これを有効にするには、 **ShowDebug Bones** コンソール コマンドを使用します。上の画像のように、ボーンは個別の白い線によって表されています。 
* 代わりの表示 (ペルソナで表示されるボーンにマッチ) を有効にするには、 **ShowDebugToggleSubCategory 3DBones** コンソール コマンドを使用します。
* 次は、アニメーション デバッグ出力です。 **ShowDebug Animation** コンソール コマンドを使用して有効にできます。

![](AnimationDebug02.png)

* 5 つのセクションに分かれます。それぞれのセクションの on/off を切り替えるには、 **ShowDebugToggleSubCategory** コマンドに、以下にリストされているカテゴリ名を付けます。たとえば、ShowDebugToggleSubCategory SyncsGroups というようにします。 
	* **SyncGroups**:同期グループによってまとめられていて (グループに属していない場合は Ungrouped)、現在最終ポーズに寄与しているアニメーション アセットを表示します。デフォルトでは、このセクションでリストされている Blendspaces によって、寄与しているアニメーション/ウェイトがすべて表示されます。出力によって使用されるスクリーンスペースを減らすために、ShowDebugToggleSubCategory **FullBlendspaceDisplay** によってこれを off に切り替えることができます。
	* **Montages**:現在キャラクターによって使用されているモンタージュをリスト表示します。アクティブなモンタージュは、緑でハイライト表示されます。
	* **Curves**:再生されているアニメーション (複数も) によって、アクティベートされたカーブの値を (Name: Value のペアで) リスト表示します。
	* **Notifies**:現在有効な Notify のステートを表示します。
	* **Graph**:アクティブなポーズのグラフを表示します。最終ポーズを表す最終ノード (ルートノード) から表示が始まり、最終ポーズを構成するすべてのノードがリスト化されていきます。ノードは階層が保たれるように表されるので、ユーザーは元のブループリント アセットを参照しなくてもノードの接続関係を理解することができます。アクティブなノードは緑、(**ShowDebugToggleSubCategory FullGraph** を使って表示するよう切り替えてある場合は) アクティブでないノードはグレーで表示されます。




#### New:レベル ビューポートの統計
多数の役に立つエンジンの統計情報がビューポートにかぶせて表示できます。これらの統計情報に、ビューポートの Show メニュー内の新たな Stat セクションからアクセスできるようになりました。

![](ViewportStats.png)

* これらの統計は、切り替えることもできます。その場合は、Stat <name> をデバッグ コンソールのプロンプトに入力します。  
* デフォルトでは、これらの統計はセッション間で記憶されませんが、エディタの Viewport preferences のセクションで Save Engine Stats を有効にすることによって、記憶されるようにできます。




#### New:OBJ メッシュ ファイル形式のサポート
静的メッシュのための .obj ファイルをインポートできるようになりました！
このファイル形式は、非常に簡単なものであるため、以下の機能がサポートされていないことを忘れないでください。
* 頂点カラーのインポート
* コリジョンのインポート
* タンジェントおよび従法線のインポート
* 変換
* Z を上にしてモデリングされていない場合は、モデルが回転します。これは、OBJ のインポートで、ソースの座標系を得る手段がないためです。

#### New:FBX を 2014 にアップグレード
FBX インポーターが、 Autodesk から 2014 バージョンにアップグレードしました。  
* これによって、ミラーされたメッシュのタンジェント、従法線が正しくインポートされます。
* 2014 年以前の Maya/Max に入っている前の FBX のプラグインは、まだ使用できますが、かなり古いファイルを使用すると、インポート時に警告が表示される場合があります。


#### New:Windows XP のサポート (プレビュー)
GitHub を仕事の拠点にしているデベロッパーが、Windows XP にプロジェクトをデプロイできるようになりました。
* そのためには、UnrealBuildTool で WindowsPlatform.SupportWindowsXP を true にセットし、さらにプロジェクトの設定を変更して、OpenGL シェーダーのサポートを有効にします。
* Windows XP で実行すると、レンダリングには、DirectX 11 に代わって OpenGL が自動的に使用されるようになります。 
* この機能は、開発の初期段階にあるため、時間とともに改良されていきます。


#### New:ブループリントによるアクタ破壊表現のサポートを改善
4.2 のプレビュー ノートで、EndPlay イベントが Destroyed イベントの代わりになる予定だとお伝えしましたが、4.2 でそのような措置は取られなくなりました。
ブループリントでは、最終的に、新たな Event EndPlay ノードが Event Destroyedの代わりになる予定です。したがって将来的には、この Event EndPlay ノードが使用されることになるはずです。
* EndPlay は、アクタが明示的に破壊された場合に単にアクティベートされるということはなくなりますが、アクタがワールドから存在しなくなった場合にはいつでも実行されます。そのようなケースに該当するのは、レベルが遷移する時、ストリーミングしているレベルがアンロードされた時、PIE のセッションが終了した時、アクタのために Destroy が呼び出された時があります。
* また、EndPlay ノードで、それが実行された理由 (アクタが Destroy された、レベルが遷移した、プレイ・イン・エディタが終了した、ワールドから除去された) が示されるようになりました。
* C++ では、AActor:: Destroyed 仮想関数が残っています。ただし、これは主にエディタのトランザクションのためのものです。
* C++ の AActor::EndPlay 仮想関数は、アクタがワールドから除去された理由を示す列挙型のパラメータを取ります。
* AActor::OnRemoveFromWorld 仮想関数は、これまでは、アクタが属している、ストリーミングされているレベルがアンロードされた場合に、各アクタについて呼び出されていましたが、削除されました。その機能は AActor::EndPlay に含まれました。


## リリース ノート

#### マーケットプレイス

**スタイライズド レンダリング** - スタイライズド レンダリング ショーケースが、無料でマーケットプレイスで入手できます！このサンプルでは、アンリアル・エンジン 4 の柔軟なレンダリングをご覧になれます。

![](StylizedMap.png)

**SciFi Hallway** - Quixel 社の CMO を務める Wiktor Öhman 氏が、『Deus Ex』にインスピレーションを得て作成した驚くべき SF シーンです。

![](ScifiHallway.png)

**新たな Pivot Painter コンテンツ サンプル マップ** - 静止画像では、このサンプルを正しく評価できません。アンリアル・エンジン 4 の Pivot Painter 機能は、何らかの環境の動きを必要とするものに、素早く効率よく生命を吹き込みます。 

![](PivotPainterMap.png)

**新たなオーディオ コンテンツ サンプル マップ** - Pivot Painter のマップと同じように、オーディオ マップは、ぜひともロードしてご覧になるべきものです。サウンド アクタとさまざまなサウンド エフェクトの基礎を見ることができます。

![](AudioContentMap.png)


#### 学習リソース

**ビデオ**
* [Blueprint Essentials 1 – Variables Overview (変数の概観)](https://www.youtube.com/watch?v=zaVY5A0hqiI)
* [Blueprint Essentials 2 – Variable Types (変数の型)](https://www.youtube.com/watch?v=n-EQYeU5nZk_)
* [Blueprint Essentials 3 – Struct Variables (構造体変数)](https://www.youtube.com/watch?v=o46ZWNqh444)
* [Blueprint Essentials 4 – Object and Class Variables (オブジェクトとクラス変数)](https://www.youtube.com/watch?v=xu7ymhN_7Lo)
* [Blueprint Essentials 5 – Enum Variables (列挙型変数)](https://www.youtube.com/watch?v=5nLqEW6YXPY)
* [Blueprint Essentials 6 – Variable Get vs. Set (変数の Get 対 Set)](https://www.youtube.com/watch?v=NM1ET4uQOnc)
* [Blueprint Essentials 7 – Blueprint Execution Order (ブループリントの実行順序)](https://www.youtube.com/watch?v=JH6zLAMFSi0)
* [Blueprint Essentials 8 – Arrays (配列)](https://www.youtube.com/watch?v=bGtQmuav748)
* [Blueprint Essentials 9 – For Loops (for ループ)](https://www.youtube.com/watch?v=hXSKGYQvZsI)
* [Blueprint Essentials 10 – Using Loops: Procedural Level Design (ループの使用: プロシージャルなレベル デザイン)](https://www.youtube.com/watch?v=kmnC6IUPGjI)
* [Blueprint Essentials 11 – For Loop with Break (break が付いた for ループ)](https://www.youtube.com/watch?v=o08VJxabdb4)
* [Blueprint Essentials 12 – For Each Loops (for each ループ)](https://www.youtube.com/watch?v=F-Ab8oS6YDU)
* [Blueprint Essentials 13 – While Loops (while ループ)](https://www.youtube.com/watch?v=2RkaUkaLZu4)
* [Blueprint Essentials 14 – Custom Loops (カスタムのループ)](https://www.youtube.com/watch?v=Mxw391exhVg)
* [Fun with Blueprints: Spawning Dynamic Objects (ブループリントの楽しみ: 動的なオブジェクトをスポーンする)](https://www.youtube.com/watch?v=9-7SmkasS_A)
* [サードパーソン ブループリント ゲームビデオ](https://www.youtube.com/watch?v=GWbd0Wowwnk&list=PLZlv_N0_O1gZS5HylO_368myr-Kg2ZLwb&index=2) シリーズには、さらに 7 本のビデオがあります。

**オンライン マニュアル**
* 新規:[ビークル設定ガイド](Engine/Physics/Vehicles/VehicleUserGuide) - アンリアル・エンジン 4 で車両をセットアップする方法について。
* 新規:[ビークル コンテンツ ガイド](Engine/Physics/Vehicles/VehicleContentCreation) - 車両のためのアート コンテンツをセットアップします。
* 新規:[パーティクル ユーザー ガイド](Engine/Rendering/ParticleSystems/UserGuide) - カスケードのユーザーガイドを更新したものです。
* テクスチャ ペインティング - エディタ内でテクスチャと頂点をペイントします。
* [オーディオに関するドキュメントの更新](Engine/Audio)
* リファクタリングされたコンテンツ サンプルのドキュメント ページ - 新たなディレクトリ ページによって、各種機能について利用可能なコンテンツ サンプルを一覧できるようになりました。

**エディタ内のチュートリアル**
* 新規:Destructible (破壊) メッシュ エディタのためのガイドを追加しました。
* チュートリアルのランディング ウィンドウを変更して、エディタ内で利用できるチュートリアルすべてを表示するようにしました。
* Destructible メッシュ エディタを修正したため、スケルタル メッシュ エディタのチュートリアルが表示されなくなりました。

**API のドキュメント**
* 新規:API のドキュメントに、あらゆるモジュールについての短い解説を追加しました。

#### アンリアル・エンジン ランチャー
* 新規:アンリアル・エンジン ランチャーのインストーラーが、日本語と韓国語にローカライズされました。
* 新規:アンリアル・エンジンのデスクトップ ショートカットおよびスタートメニューのショートカットに、ローカライズされた、ツールチップの正しい説明が付きました。
* 新規:アンリアル・エンジン ランチャーのインストーラーによって Windows 7 上にインストールする際、SP1 がインストールされていない場合には通知されるようになりました。
* 新規:コンテンツに関する多数のドキュメントおよびその他の情報へのリンクが、ランチャー右下に表示されるようになりました。
* 新規:コンテンツのどれかにマウスオーバーすると、アンインストールか検証を選択できるようになりました。
* 起動速度の改善
* ランチャーがコンテンツ データを呼び出す方法と時期を修正することによって、起動時間を改善しました。
* ランチャーを修正することによって、「インストール中」に閉じられても最初から UE4 のダウンロードを開始しないようにしました。
* 日本語および韓国語のローカリゼーションに関する複数のバグを修正しました。
* Fランチャーを修正することによって、Mac 上でセルフアップデート後に、常に再起動するようにしました。
* オフライン モードにおけるコンテンツとダウンロードに関する不一致を複数個修正しました。
* Win8 および Win 8.1 で生じたインストーラーの不具合が生じる問題を修正しました。
* ランチャーを修正することによって、ディスクの空き容量不足をチェックします。
* Win 8.1 において、デフォルトの UAC による許可が原因で、ダウンロードの場所を選択できない問題を修正しました。
* Windows において、右クリックの .uproject オプションが機能しない問題を修正しました。
* UE_4.1 とすべての 4.1 のサンプルがダウンロードされた状態で、1.1.0-2054669 から 1.2.0-2064046 にアップデートすると、ランチャーが反応しなくなる問題を修正しました。
* ランチャーからプロジェクトを開いた時にアップデートのプロセスが飛ばされないように修正しました。
* ランチャーを修正して、プロジェクト名を変更したサンプル コンテンツをランチャーから開けるようにしました。
* 権限トークンの期限を修正しました。このバグは、ユーザーがオンラインサービスへ接続できなくなりセルフパッチの通知を受信できなかったり、更新を送信できない場合に発生する可能性があります。

**フィード**
* 新規:フィードで、すべてのニュースと記事を読むことができます。
* 新規:新たにピンで留められた記事は、重要なアップデートを示しています。各記事についているピンのアイコンをクリックすることによって、ピンで留められた状態を解除できます。

#### エディタとツール

**エディタ**
* 新規:アクタをアタッチする際に、アタッチするアクタを選択できるアクタのピッカーが使用できるようになりました。
* 新規:エディタでジオメトリを描画する際に「Game View」をチェックできる機能が追加されました。
* 新規:**Alt + [ または ]** を使って、変形ギズモのサイズを調整できるようになりました。
* 新規:コレクションによって、ローカルのユーザーの設定に基づくカスタムのカラーが保存および表示されるようになりました。
* 新規:**Flat Bottomed** コリジョンのためのオプションがキャラクターのコンポーネントに追加されました。
* 新規:マーケットプレイスからダウンロードされたコンテンツを削除するオプションが加わりました。
* 新規:コンテンツ ブラウザからドラッグアンドドロップを使って複数のアクタを作成した場合、一回のトランザクションとして元に戻せるようになりました。
* 新規:プロジェクトのブラウザ リストをリフレッシュできる機能が追加されました。
* 新規:New Class Wizard によって追加されたクラスが配置される場所を、選択できるようになりました。
* 新規:FSimpleAssetEditor を作成する際、Details ビューで表示したいオブジェクトを取得する関数が可能になりました。
* 新規:シンプルなグループの Stat 実行コマンドが、ビューポートの表示メニューから直接起動できるようになりました。
* 新規:1 ペイン (1x1) によるエディタのビューポート レイアウトを追加しました。
* 新規:エディタが、インポートおよびエクスポートの成功についてユーザーに知らせるようになりました。
* 新規:**AllowPreserveRatio** が、 **FVector UProperties** 上でスキャンの対象となるメタデータ フラグとなりました。そのため、ratio のロックが (スケールのロックと同じように) エディタに追加されました。
* 新規:マテリアルがドラッグされたサブメッシュにのみマテリアルが適用される機能をアンリアル・エンジン 4 がサポートするようになりました。[Shift] キーを押すことによって、マテリアルがあらゆるスロットに適用されるようになります (元の動作)。
* 新規:**UMG（アンリアル・モーション・グラフィックス）** の作業が開始されました。 **UMG / UMGEditor** のモジュールは存在していますが、今のところ非常に不安定です。**UMG** をエディタで使用する場合、-umg で有効にできます。極めて初期段階にあり、バグが多く使い勝手は良くありません。
* 新規:[詳細] パネルから位置、回転、スケールをコピーアンドペーストできる機能を追加しました。
* 新規:ゲームのロードが完了していてもローディング ムービーを強制的に全うするオプションを追加しました。
* 新規:ユーザーがローディング ムービーをスキップできるかどうかを切り替えることができるオプションを追加しました。
* 新規:コンテンツ ブラウザからドラッグした際にフロアへの位置合わせを無視できるオプションをエディタの環境設定に追加しました。
* 絶対的トランスフォーム コンポーネントと相対的トランスフォーム コンポーネント間で切り替えるための UI を変更しました。これを切り替えるには、[詳細] パネルのTransform プロパティの横に付いているドロップダウン矢印を使って行います。
* コンバート時にアクタの名前を変更する方法を変えました。カスタムの名前がない場合は、コンバートのプロセスでアクタの名前変更ができるようになります。
* FBX SDK を 2014.2.1 にアップグレードしました。これによって、すべての FBX 2014 ファイルがエディタと互換性をもつようになりました。
* 新規:イマーシブ モードの場合に、ゲーム内の Slate UI が、エディタのビューポート内で表示されるようになりました。
* 新規:ユーザーが編集可能な、オブジェクト クエリ型の配列を、Radial Force コンポーネントに追加しました。
* インポート型セレクタを変更して、特定のインポート型が自動検出されたことをユーザーに知らせるテキストを追加するとともに、ユーザーがこれをオーバーライドしようとした場合に警告を発するようにしました。
* ソケットのトランスフォームが即座に、ワールド内のアセットのインスタンスに反映されるように変更しました。
* Duplicate (複製) が非表示のアクタにも機能するように変更しました。
* **Dynamic Expression Parameter** ノードを変更して、他がリネームされた場合に更新するようにしました。
* Based の動きを変更して、キャラクターがクォータニオンを使用するようにしました。
* キャラクターのベース移動にクォータニオンが使用されるようになりました。
* 法線マップの自動検出を調整して、平均化のために alpha=0 のピクセルが黒と認識されるようにしました (ほとんど青のスプライトを法線マップと誤認されることを避けるため)。
* [プロジェクト設定] をアップデートして、常に、デフォルトとして保存されるようにしました。
* **Source Code Access** 機能をプラグインに移動しました。
* Source Code Access がメイン スレッド上で実行されるようになりました。
* 使用すべき LOD を計算する際に、静的メッシュが距離ではなく **スクリーンサイズ** をチェックするように変更しました。
* アクタの名前変更機能を変更しました。名前を有効化する際に、前後のスペースを無視するようにしました。
* [詳細] タブの「Range」プロパティを変更して、その構造体がカスタマイズされるようにしました。
* ES2 モードのために、キャンバスのレンダリング マテリアルをアップデートしました。
* **エンジン コンテンツ** が修正されて、不適切なタイミングで [Submit to Source Control (ソース管理に提出)] ダイアログに表示されることがなくなりました。
* **[提出]** メッセージのアイコンが修正されて、「ストップ」マークではなくなりました。
* 静的なライティングを修正して、 **Instanced Static Mesh Components** のために無効化されるようにしました。
* プロジェクトのテンプレート名と説明を修正しました。当該の言語のための有効な翻訳が見つからない場合は、英語にフォールバックするようにしました。
* **Submit Files Dialog** を修正して、エンジンの他の部分と同じスタイルに従うようにしました。
* Cascadeの **ToggleRealtime** のツールチップを修正して、他のエディタのビューポートに合うようにしました。
* **Particle System Components** を修正して、ビジビリティが正しく切り替わるようにしました。 
* シーン アウトライナーのメニューから、ビューポート位置のメニュー項目を削除しました。
* 頂点ペイントを使用する場合に **Ctrl-select** による選択を無効にしました。
* ドッキング機能を修正して、シーンアウトライナーの上方にドッキングする場合に正しく機能するようにしました。
* 新たなソース管理プロバイダを作成した際に生じる問題を修正しました。
* Visual Studio の複数のインスタンスを開く問題を修正しました。
* Mac でシャットダウン時にクラッシュする問題を修正しました。
* パスにスペースがある場合に、サブバージョンが作業用コピーに接続しない問題を修正しました。
* フォント エディタ ツールバーのアイコンが消失する問題を修正しました。
* 大きすぎるスプライトをもつアクタ型のために、エディタのスプライトのサイズを修正しました。
* レベル ビューポートを遥か彼方にズームアウトした場合に 0 で除算する問題を修正しました。
* ページが再び機能するまで **STAT url** を削除しました。

**パーティクルとカスケード**
* 新規:トレイルの VFX を作成するための Anim Trails 型データを実装しました。

**コンテンツ ブラウザ**
* 新規:**コンテンツ ブラウザ** のために、 **エンターキー** と **スペースバー** のマッピングを変更できるようになりました。

**マテリアル エディタ**
* 新規:**Release Stats** と **Built-in Stats** ツールバー ボタンにアイコンがつきました。
* **Built-in Stats** -  この統計情報は、グラフにノードが一切ない状態での、シェーダーの基礎コストを表示します。
* **Release Stats** - 統計情報を表示する際に、シェーダーの解除機能とデバッグ機能を切り替えて使用できます。 
* 新規:マテリアル エディタに Find Results タブを追加しました。
* 新規:コンポーネント マスクのためのショートカットを **Shift+C** に追加しました。

**テクスチャ エディタ**
**Use Specified Mip Level** プロパティ (**bUseSpecifiedMipLevel**) を変更して、デフォルトの値を false にしました。true の場合は、シネマティックのミップの数が、UI によって無視されます。

**ペルソナ**
* デフォルトと Details のインスペクターを変更することによって、リードオンリーのグラフを編集する場合に、無視されるようにしました。
* 誤ってセットされたフラグ **CPF_DisableEditOnTemplate** を修正しました。コードを追加して、フラグをクリアしました。

**ソース コントロール** 
* 新規:エディタで、ソース管理のディレクトリを同期できる機能を追加しました。
* 新規:OpenSSL 1.0.1g **BSP** を含んだ P4 API 2014.2 を追加しました。
* 新規:BSP アクタのサーフェスのいずれも選択されていない場合に、その BSP アクタの選択が解除されるようになりました。
* Slate Property Editor Combo エレメント (**SPropertyEditorCombo**) を修正して、自らを開く前に選択を更新するようにしました。

**AI と Navmesh**
* 新規:ビヘイビア ツリーで、サブツリーからルートレベルの Decorator を使用できるようになりました。

**UI**
* フルスクリーンから復帰する機能を修正して、ウィンドウの位置をネイティブのウィンドウ上にセットしました。

**ビューポート**
* 新規:イマーシブ モードの場合に、ゲーム内の Slate UI が、エディタのビューポート内で表示されるようになりました。

**シーン アウトライナー** 
* 新規:現在のレベルにいないアクタを非表示にするフィルタを追加しました。
* 新規:シーンアウトライナーのフォルダ内のすべてのアクタを選択できるメニューオプションができました。
* 新規:Duplicate が、非表示のアクタにも機能するようになりました。
* ビジビリティのための目のアイコンを変更することによって、行が選択されている場合に、現在の選択に作用するようにしました。
* シーン アウトライナーのメニューから、ビューポート位置のメニュー項目を削除しました。

**ランドスケープ**
* 新規:インスタンス化された静的メッシュのために、ナビゲーション ジオメトリのエクスポートを実装しました。
* 新規:ランドスケープ スプラインを FBX にエクスポートする機能に対応しました。
* 新規:Lightmass ジオメトリに、 LODBias/ForcedLOD の影響を考慮するサポートを追加しました。
* 新規:新たな LOD フォールオフ モデルを追加することによって、適切な遷移をともないつ簡単にトライアングルを削減できるようになりました。
* 新規:**Auto Rotate on Join** をスプライン ツールの UI にエクスポーズしました。
* 新規:ストリーミング レベルにランドスケープ スプラインを動かすためのサポートを追加しました。
* ランドスケープ レイヤのインポート時間を短縮しました。
* 再登録時の選択レンダリングを修正しました。
* **LODDistanceFactor** の適用に関する問題を修正しました。
* マテリアルがコンパイルされないランドスケープ コンポーネントが存在する問題を修正しました。
* 既存のランドスケープで **LandscapeMaterial** プロパティをクリアするとクラッシュする問題を修正しました。
* ランドスケープ コンポーネントがストリーミング レベルに動かされた後に、穴のあるレンダリングが生じる問題を修正しました。
* ペイント モード時に flatten ツールから sculpting-only のオプションを除去しました。

**ワールド ブラウザ**
* 新規:タイリングされたランドスケープのインポートを追加しました。タイル化されたハイトマップ / ウェイトマップは World Machine などのアプリケーションからのエクスポートが可能です。

**オーディオ**
* 新規:* アンリアル・エンジン 3 の **Omni Radius** を統合しました。Animation

**アニメーション**
* 新規:ネイティブの **Anim Notifies** とステートがサポートされるようになりました。
* 新規:新たなクロス コリジョン タイプを追加しました。これによって、カーテン等の布のオブジェクトとキャラクター間でインタラクトが可能になります。Collide with Environment (環境とコリジョンする) チェックボックスを有効にすると機能します。
* クロスのための新たなビジュアライゼーション メニューが追加されました。ペルソナで Show メニューをクリックすると、 Clothing サブメニューが表示されます。キャラクターが服を身に着けている時のみ表示されます。

**翻訳エディタ**
* 新規:翻訳エディタに検索機能を追加しました。新たに [検索] タブが備わりました。
* 新規:インポート/エクスポートを [Portable Object (.po) フォーマット] ボタンに追加しました。これによって、サードパーティ製アプリケーションで翻訳が可能になります。インポート時に、 [Changed on Import] タブに変更が表示されます。
* ローカリゼーションのプロジェクトを検索するディレクトリの数を増やし、コンフィギュレーション ファイルで指定された「LocalizationPath」ディレクトリが含まれるようにしました。

**ブループリント**
* 新規:ブループリント エディタ内でコンポーネント モードにある場合に、コンポーネントの選択でコピーアンドペーストを利用できるようになりました。
* スタティックメッシュの streaming texture factor を計算する際、ビルドのスケールを考慮するようになりました。 

**レンダリング**
* 新規:スタティックメッシュの streaming texture factor を計算する際、ビルドのスケールを考慮するようになりました。
* 新規:パーティクル パラメータ分布が、 GPU スプライトのために Color Over Lifeといっしょに使用できるようになりました。
* 新規:**Mesh Modifies Material Position** が、マテリアル トランスレータの結果を利用するようになりました。
* 新規:**Particle Lights** が、カメラのオフセットと機能するようになりました。(ビュー単位)
* 新規:**Speedtrees** からインポートされた **スタティックメッシュ** のアセットすべてをリスト表示するコマンドレットを追加しました。 
* 新規:**Sun Disc Scale** プロパティを **Atmospheric Fog Actor** に追加して、空の sun disk のサイズを制御できるようにしました。

#### ブループリント
* 新規:ブループリント グラフの中に他のブループリント アセットをドラッグアンドドロップすることによって、Add Child Actor Component (子アクタ コンポーネントを追加) ノードを取得できるようになりました。
* 新規: Deproject ノードを HUD ブループリントに、Deproject Screen Position to World (スクリーン位置をワールドにディプロジェクト) を Player Controller ブループリントに追加しました。
* 新規:ブループリント関数のローカル変数が Get/Set ノードを利用するようになりました。
* 新規:**Sky Light** が Blueprintable (ブループリント可能) なクラスになりました。
* 新規:**EnumLiteral** ノードを追加しました。
* 新規:ループリント変数のピンのタイプを選択する際に矢印キーを利用できるようになりました。また、コンポーネントのドロップダウンメニューにも利用できるようになりました。
* 新規:右クリックメニューの replace with actors (アクタの置き換え) でアクタをブループリントに置き換える際、ブループリントがそのアクタの子ならば、エディタがプロパティをコピーするようになりました。
* UEdGraphSchema::GetGraphContextActions におけるデフォルトの GetMenuEntries の振る舞いにおいて、非推奨のノードを非表示にしました。
* デバッグ フィルタ ウィジェットで派生クラスを選択できるようにしました。
* コマンドレットでコンパイルしている時 (たとえば、クッキングの間)、デバッグおよびトレース サイト生成を無効にしました。
* ブループリントのコンパイラ エラーを変更して、Play in Editor に入った時に一度だけ表示されるようにし、ブループリントが修正されるまで再び表示されないようにしました。
* **Spring Arm Component** をアップデートして、オプションを追加しました。これには、回転のラグのオプションや、特定のコンポーネントからのみ回転を継承するオプションがあります。
* **Game Mode** をアップデートして、ポーンが指定されないことを可能にしました。
* プリミティブ コンポーネント上の Set Phys Material Override (物理マテリアルのオーバーライドをセット) ノードを、ブループリントにエクスポーズしました。
* タイムラインの複製時に生じるクラッシュを修正し、外部グラフ作成のワークフローを改善しました。
* 自己のピンの型が失われている場合や、不明の場合に表示されるブループリントのコンパイルエラー メッセージを修正しました。
* create Blueprint based on selected actor (選択されたアクタに基づいてブループリントを作成) を修正して、関連づけられているアセットがないアクタの型でも機能するようにしました。
* ブループリントのクラスと実装されているインタフェース間で循環的な依存関係がある場合に生じるシリアライゼーションのクラッシュを修正しました。
* ブループリントの関数ノードの出力ピンが、内部のスケルトン クラスの型に間違ってマッピングされている問題修正しました。
* 接続されている入力をもつ SpawnActor ノード上でスポーン クラスの型を変更する場合に生じるピンの接続問題 / 潜在的なクラッシュを修正しました。
* ビジーウェイトにおける論理エラーを修正して、ブループリントのブレークポイントをヒットした時にゲーム スレッドが実行を終了するようにしました。
* ネイティブの C++ クラスを派生させた、移植されたブループリントを配置しようとする時に生じるクラッシュを修正しました。
* TriggerBox を派生させた新たなブループリントを開こうとする際に生じるクラッシュを修正しました。
* クラスピッカーから内部 SKEL_* クラスを削除しました。

#### レンダリング
* 新規:**r.RenderTargetPool.Events** を追加して、フレームの上に Render Target Pool (レンダリング ターゲット プール) の使用法を表示しました。
* 新規:静的モビリティをともなったスカイライトがベイクできるようになりました。また、モバイル上でサポートされて機能するようになりました。
* 新規:**r.AmbientOcclusionSampleSetQuality** を追加しました。より大きな半径とより小さなレベルで使用できるようになりました。
* 新規:パーティクルのスポーンと戦闘不能イベントを生成する際に、軌道のオフセットを考慮に入れる機能をサポートしました。
* 新規:マテリアル エディタ内で、 Distance Field Shadow をともなわないモバイル ライトマップ シェーダーの命令数を表示するようにしました。
* 新規:平行光源/点光源/スポット光源の寄与を無効化する表示フラグを追加しました。
* 新規:パフォーマンス テスト用に **r.OptimizeForUAVPerformance** を追加しました。
* 平行光源の選択プロセスをアップデートして、指数フォグ インスキャタリングが、IsUsedAsAtmosphereSunlight として設定された最初の光源を使用するようにしました。
* **Point Attractor** をアップデートして、軸方向にモーションをフィルタできるようにしました。
* メッシュ パーティクル CPU のレンダリングをアップデートして、ES2 のために最適化されるようにしました。
* タンジェント空間の計算を変更して、xNormal により適合するようにしました。
* ゲーム コンソールのオートコンプリーション機能を改善して、エディタ的にしました。
* ディザ ノイズとより少ないサンプルを使うことによって、 **スクリーン空間アンビエントオクルージョン（SSAO）** を最適化および改善しました。
* アロケートされたフリーの **GBufferTarget** をアップデートして、必要に応じて再利用を可能にしました。ただし依然として、可能な場合はポスト プロセスよりも前に解放する必要があります。
* OpenGL 4 のサポートに関するアップデート
	* ARB_vertex_attrib_binding
	* ARB_buffer_storage
	* OpenGL 上で radix ソートを再度有効化しました。
	* 深度限界テスト
	* NVX_gpu_memory_info
	* ARB_tessellation_shader
* **Render Target** の使用法を最適化し、 **Tile Deferred Lighting** のためのパスを削除しました。(これで **Light Accumulation** を消費するものが 1 つ減りました)
* 明確化のために、 **Light Propagation Volume** のプロパティで名前をいくつか変更しました。
* SSAO Occlusion のデフォルトの設定値を変更して、ハロを少なくしました。
* Particle Light を変更して、 Camera Offset モジュールで使用できるようにしました。
* パーティクル パラメータ分布を変更して、 GPU エミッタのための **Color Over Life** モジュールで使用できるようにしました。
* 変数に static キーワードを使用して手書きのシェーダを変更し、宣言時に const として宣言もされるようにしました。
* このことは、クロスコンパイラの複雑性を減らすために必要です。非 constant の問題は、代替の方法で扱うことができます。
* リフレクションを修正して、サブサーフェス スキャタリング マテリアルで機能するようにしました。
* shadercomplexity ビューモードを修正しました。
* 非常に小さいオブジェクトに関するシャドウのアーティファクトを修正しました。
* 新たなシェーダーに関する起動時のクラッシュを修正しました。RHIClear がリソースの init で使用されていました。
* Splitscreen ReflectionEnv のレンダリングを修正しました。
* reflectionenv が無効な場合のレンダリングを修正しました。
* SSR が SM4 パスで使用されている問題を修正しました。
* 階層化されている反射キャプチャについて、ブレンドのバグを修正しました。
* 無効化される最適化を修正して、 LPV がオフになっても (シャドウマップのレンダリングの高速化)、前と同じように LPV が機能するようにしました。
* 事前計算された GI をキャラクターに適用するために使用されるすべてのライト プローブが半分の明るさしかなかったバグを修正しました。  

#### ゲームプレイとフレームワーク
* 新規:UBT の設定が、環境変数ではなく XML ファイルを使用して行われるようになりました。
* 新規:特定のビルドの設定がサポートされていない場合に、 UBT が早期にエラーメッセージを終了するようになりました。
* 新規:CameraAnims をサポートしました。ブループリントにおいてもサポートされます。
* 新規:アクティブな **Anim Graph** のゲームでデバッグの表示が追加されました。
* 新規:Portable Object (.po) ファイルのために、ローカリゼーションのインポートがサポートされました。
* 新規:ネイティブのアニメーション通知をサポートしました。
	* **UAnimNotify** または **UAnimNotifyState** を継承することによって、クラスが、通知メニューに表示され、アニメーションに追加されるようになります。	
* 新規:ペルソナの通知パネルで、複数選択をサポートしました。ドラッグ/ドロップとコピー/ペーストをアップデートして、複数選択で機能するようにしました。
* 新規:親のアニメーション ブループリントのアニメーション アセットの参照が、子のブループリントでオーバーライドできるようにしました。
	* Asset Override Editor (アセットのオーバーライド エディタ) という名前の新たなタブが、ペルソナのウィンドウ メニューからアクセスできます。
* 新規:ネイティブのアニメーション通知のステートを追加して、ループするパーティクル エミッタ上で開始/停止を制御できるようにしました。
* 新規:C++ とブループリントの両方において、モーションの軸を、入力したコンポーネントにバインドできるようにしました。
* 新規:非同期ロード時間の制限が、ゲーム毎に設定できるようにりました。UEngine で AsyncLoadingTimeLimit または PriorityAsyncLoadingExtraTime を編集できるようになりました。シームレスの移動などの場合に優先ロードが実行されると、 I/O でブロックされていても、 CPU コストを除いてより高いスループットを実現するために、利用可能な時間が使用されることになります。
* 新規:**CreateInstance** 関数を **ULevelStreaming** に追加し、ブループリントにエクスポーズしました。この変更によって、既存のレベル ストリーミング オブジェクトのコピーを作成して、新たな一意の名前を付けることが可能になります。したがって、ユーザーは、特定のマップのパッケージの複数のインスタンスをトリームイン/アウトできるようになります。
* 新規:**ビヘイビア ツリー** をブループリント型にすることによって、ブループリントの作成者がプロパティとして使用できるようにしました。
* 新規:**AIController** のために、ブループリント実装が可能なイベント OnPosses を追加しました。
* 新規:移動と EQS クエリのような AI のリクエストとともに使用される汎用的な **AIRequestID** というコンセプトを導入しました。
* 新規:関数を **AIController** に追加することによって、指示された **Blackboard Asset** を使用するようにし、 **ビヘイビアツリー** とは独立して使用されるようにしました。
* 新規:キャラクターの動きが、外部の力によって影響を受けられるようになりました。
	* これには Radial Force Component (放射状の力コンポーネント) も含まれます。
* 新規:タッチ入力が HUD のヒットボックスでサポートされました。
* 新規:FOV プロパティに基づくマウス スムージングが、Input Project Settings で利用可能になりました。
* 新規:インメモリのアセットをインクルードしないで、アセットのレジストリでアセットをクエリできるようになりました。みなさんが必要としていることとはおよそ異なるでしょうが、よいパフォーマンスをもたらす場合もあります。
* 新規:**SCOPE_LOG_TIME_IN_SECONDS** を追加して、同じ **SCOPE_LOG_TIME** のログを実行できるようにしました。ただし、単位はミリ秒ではなく秒になっています。
* 新規:モバイルデバイスと非 APEX のビルドのために、サブステップ機能をサポートしました。
* 新規:車両のアニメーション インスタンスと車両のためのホイール ハンドラを追加しました。
* 新規:シンプルなルックアット コントロールを追加しました。
* フォリッジが、スカルプト中に、すべての変更されたランドスケープ コンポーネントにスナップするようにしました (現在のレベルにあるものだけではなく)。
* **SpringArmComponent** のティックを **PostPhysics** に移動して、カメラのジッタを解消しました。
* NVTT (NVidia Texture Tools) を v2.0.8 にアップグレードしました。
* PVCT をアップグレードして、4096 よりも大きなサイズの画像をエクスポートできるようにしました。ソース画像は、最大サイズが 4096 以下であるミップ チェーンにおける最初の画像からのものとなります。
* 公式のリリースに向けて、車両のチューニングデータを多数再編成しました。
	* 単位を cm から m に変更しました。
	* 正式なリリースに向けて、チューニング変数を追加および移動しました。既存のチューニングは、何らかの修正が必要となる公算が高いです。
* HUD のヒットボックスのクリックと コンポーネント OnClick イベントをアップデートして、ダブルクリックとシングルクリックの両方に反応するようにしました。
* **Radial Damage** をアップデートして、ビジビリティのトレースによって明確な妨害物が見つからない限り、デフォルトの値を unblocked (ブロックされない) にしました。ダメージ付与性を切り替えるためには、 bCanBeDamaged を使用します。
* **CreatePlayer** をアップデートして、ブループリントから呼び出せるようにしました。
* **PlayerStart** の選択を改善しました。すべての **Player Starts** が考慮され、「unoccupied (非占有)」 のスタート地点が優先されることになります。
* Streaming Manager (ストリーミング マネージャー) がリファクタリングされて、テクスチャに固有なものではなくなりました。
* シャドウのクリア/解消を最適化して、subrect を使用せずにシャドウのターゲット全体をクリアおよび解消できるようにしました。
* **Behavior Trees** をアップデートして、ツリーが再生された時に孤立しているビヘイビア ツリーのノードが一掃されるようにしました。
* **String Asset References (文字列アセット参照)** をアップデートしました。Play in Editor のための複製時に、Play in Editor のオブジェクトへの参照が正しく検出および修復されるようにしました。
*  所有されているコンポーネント (**Outer** の階層に Actor をもつコンポーネント) を変更して、Actor 自身以外の **Outer** をもてるようにしました。
* Changed Audio Compression Info (オーディオ圧縮情報) クラスを変更して、クックされたプラットフォームによって選択できるようにしました。
* **Unreal Version Selector** (と .uproject エンジン関連全般) を変更して、Perforce のディストリビューションとの互換性を実現しました。 
* 古いバイナリによるエディタのローンチ方式を変更して、それらバイナリをユーザーのためにコンパイルするようになりました。
* 以前と異なる場所でエディタによってプロジェクトを開く方式を変更して、必要に応じて、バイナリのコピー/インプレース アップグレード、およびプロジェクトの再生/バイナリの再コンパイルをユーザーに求めるようにしました。
* クラッシュ レポートを修正して、常にクライアントサイドで評価されるようにしました。これは、表示可能なコールスタックが少しばかりある場合を想定した措置です。
* レベル エディタ ビューポートにおける **スケルタル メッシュ コンポーネント** を修正して、LOD を正しく更新できるようにしました。
* ワールドのビジビリティのオン/オフを切り替えるたびに、エディタのオフセットをともなったワールドが、自身を再オフセットする問題を修正しました。
* プレイヤーが存在せずに観客だけが存在するとゲームモードによって見なされていたために、 **StartMatch** が呼び出されることがないという、 **ToggleBetweenPIEandSIE** のアカウンティング エラーを修正しました。
* PC で Tappy Chicken を実行する際の問題を修正しました。自動車ゲームのサンプルにおけるコントロール メニューに関する問題を修正しました。
* アンリアル・エンジンをアンインストール中にフォルダが正しく削除されない問題を修正しました。
* **DirectoryWatcher** におけるシャットダウン時のクラッシュを修正しました。キャンセルされた I/O リクエストは、ハンドルが閉じられリクエストが削除される前に完了されているはずです。
* アサーションによらないクラッシュによって、ログにコールスタックが作成されないバグを修正しました。
* ブループリントのロードにおける if 文のロジックを修正しました。そのロジックは、 !NULL の場合にのみ変数にアクセスするのではなく、 NULL の場合にのみ変数にアクセスするというものでした。
* ネットワーク接続が修正されて、Play in Editor 時にタイムアウトしなくなりました。最終的にサーバーはローカルです。
* ペルソナにおけるソケットのリネームの表示バグを修正しました。
* 派生したブループリントが継承しているプロパティを表示しないバグを修正しました。
* アタッチしているアセットが見つからない場合に、スケルタルメッシュ読み込み時に生じるクラッシュを修正しました。
* Layered Blend Per Bone のバグを修正しました。このバグは、0.0 に移動することによってポーズが正しく更新されないというものでした。
* メッシュが削除された場合の、ランドスケープ スプラインにおける不可視なコリジョンを修正しました。
* 8 ビットのハイトマップを既存のランドスケープに再インポートする動作に関して修正しました。
* 各種ランドスケープ エディタのコマンドが、誤って PIE のワールドで実行される問題 (クラッシュを引き起こします) を修正しました。
* Ramp (傾斜) ツールおよびランドスケープ スプライン ツールが、ランドスケープのコリジョン/ナビメッシュを更新しない問題を修正しました。
* ランドスケープ スプラインにおける「camera」および「visibility」トレースフラグを修正しました。
* ラグドールのレンダリングが適切に更新されない、モバイルデバイス上のバグを修正しました。
* 専用サーバーのためにサブステップ機能のサポートを修正しました。
* PhAT のボディ選択が、半透明の選択が無効になっている時に機能しない問題を修正しました。
* 破壊可能なメッシュ チャンク アイランドが、正しく更新されない問題を修正しました。
* フォーム拡張された破壊可能なメッシュにおけるクラッシュを修正しました。
* インスタンス化された静的メッシュのためのコリジョン検出を修正しました。
* テクスチャのビジュアライゼーションを修正して、カメラの制約のブラックバーが表示される場合、および、解像度のスケール (**r.ScreenPercentage**) を使用する場合に、正しく機能するようにしました。
* ペイントモード時に、ランドスケープ エディタの平坦化ツールから sculpting-only (スカルプトのみ) のオプションを削除しました。
* **Mouse Wheel Spin** 入力のマッピングを削除しました。
* スケルタルメッシュから bUseSingleBodyPhysics を削除しました。

**プロファイラ**
* 新規:スレッド ビューの最初のバージョンを追加しました。ゲーム内でデータをキャプチャするには、 **stat startfileraw** コンソールコマンドを使用します。

**描画デバッグ ヘルパ**
* 新規:float 値のヒストグラムを表示する機能をサポートしました。サンプルを記録するには **FDebugFloatHistory** を使用し、ゲーム内で描画するには **DrawDebugFloatHistory** を使用します。ブループリントでも利用できます。

#### オーディオ
* Override Attenuation (減衰のオーバーライド) によって、プロパティでどの減衰オプションが使用できるかを切り替えられるようになりました。
* Sound Cue のカテゴリをリネームして、Sound Actor のカテゴリを再編しました。
* 以前 UE3 に追加された、サウンドのための Omni Radius 機能を統合しました。
* サウンドのストリーミングで将来使用するために Opus オーディオ形式を作成しました。

#### コア
* 新規:プラグインによるスクリプト言語の統合をサポートしました。
	* これにともなって、 **Lua** が実験的に統合されます。
* 新規:DEPRECATED (非推奨) マクロを追加して、古い非推奨の C++ API をサポートしました。
* SYSTEM としてログインしてビジュアライザーをコピーすると生じるエラーを修正しました。

#### Paper 2D
* 新規:Paper2D スプライトのための表示フラグを追加しました。
* 新規:プロトタイプのスプライト アトラスの生成を追加しました。(未解決のデータ/ワークフローの問題が複数あります)
* 新規:プレースホルダー設定パネルを追加しました。
* 新規:**UPaperSprite** アセットのためにカスタムのアーカイブ バージョンを追加しました。
* 新規:スプライトが、ワイヤフレームモードでレンダリングできるようになりました。
* **UPaperRenderComponent** のデフォルトの mobility (可動性) を static に設定しました。
Paper2D のモジュールがランタイムとして扱われ、クックされたゲームで使用できるようになりました。(注記: このプラグインは、BaseEngine.ini で有効化しなければならず、また、エンジンは、コンテンツ オンリーのゲームで使用するために再コンパイルされなければなりません。)
* **AdditionalStatObject** を実装して、Paper2D レンダリング コンポーネントで関連づけられたアセットを返すようにしました。(統計情報とエラーメッセージのために使用されます)
* ビルトインされているマテリアルをアップデートすることによって、小型のテクスチャを参照して、オパシティリンクに接続するようにしました。これはマテリアルが半透明に変更された場合に備えた措置です。
* JSON スプライト シート フレームがインポートされる際に生成されるアセット名をサニタイズしました。
* Paper2D のビューポート クライアントにおいて、orthographic (正投影法) モードと perspective (透視図法) モードの両方について **VMI_Lit** を強制しました。
* ビルトインされているマテリアルをアップデートすることによって、小型のテクスチャを参照して、オパシティリンクに接続するようにしました。
* タイル マップのレンダリングに関する欠陥を一部修正しました。(まだ正しくレンダリングできていません)
* NAN マスとコリジョンの消失を引き起こす、負のボリュームの 3D コリジョンに関するバグを修正しました。
* UPaperRenderComponent::GetSocketTransform における RTS_Actor および RTS_Component 空間のサポートについて修正しました。
* Paper2D プラグインが有効になっている状態でクックすると生じるクラッシュを修正しました。
* タイル設定ビューポートにおいて不正な選択範囲を修正しました。
* sprite/flipbook エディタ ビューポートにおいてスプライトが表示されない問題を修正しました。
* sprite/flipbook エディタにおいて、ツールバーのアイコンが表示されない問題を修正しました。
* slow progress (遅い進行) のダイアログにおける誤字を修正しました。(git によるものではありません)
* **UPaperRenderComponent** から不要なティックを削除し、プロパティのコメントをいくつか追加しました。

#### ネットワーク
* 新規:BeaconState クラスを追加して、 レベルをまたいで Persistent でなければならないビーコンにデータを保存するようにしました。
* シームレスな移動におけるミュートを修正しました。
* 専用サーバーで、 **IsLocalPlayerController()** の誤った結果を返す PlayerController を修正しました。
	* PlayerController が作成されているものの Role/RemoteRole がまだ設定されていない時に、 **Login()** と **PostLogin()** の間の短い時間の間で生じる無効な結果です。
	* PlayerController が生成/破壊される間に **IsLocalPlayerController** が呼び出される場合のための新たな警告を追加しました。

**オンライン サブシステム**
* 新規:**Added DestroySubsystem** の呼び出しをモジュールに追加しました。OSS の単一インスタンスの破棄が可能になります。
* null オンライン サブシステムのために voip を有効化しました。

**専用サーバー**
* **Autologin**  を修正して、 **OnLoginComplete** デリゲートのみを使用するにしました。
* **OnLoginStatusChanged** のフローから **autologin** を削除しました。ログインしようとしましたが、正しくありませんでした。

#### プラットフォーム
* 新規:IPv6 に対応する新たなソケット サブシステムを追加しました。
* 新規:Windows XP のためのサポートを実験的に追加しました。
* 新規:OpenGL が、クック済みの Windows のビルドのために利用できるようになりました。
* 新規:Windows のための Target RHI オプションを追加しました。 **[編集] -> [プロジェクト設定] -> [Platforms | Windows]** から利用できます。
* 新規:モバイル用広告サポートのフレームワーク
	* iOS と Android のための基本フレームワークのサポート。
	* サードパーティによるフレームワークを可能にする iOS のための最初のサポートです。 symlink およびファイルステージング機能が、プラグインおよびモジュールから利用できます。
	* iOS 用広告プラグインの TapJoy のための最初のサポートです。
* GL3 ハードウェアのためのサポートを改善しました。
* サーバーに接続する際のタイムアウトを増加させて、開発中のロード回数に関して改善しました。
* データをアウトバウンド パケットに書き出すためのコードを一掃しました。
* シームレスな移動に関するバグを修正しました。
* アウトバウンド パケットに書き出す場合に、エッジケース状態中にアサーションを引き起こす可能性のあるかなり大きなバグを修正しました。
* 部分的なパケット シーケンス ID によって不正なラップが行われる問題を修正しました。

**Android**
* 新規:Android 用 Google Play Services ライブラリが含まれました。
* 新規:Android における Google Play 用の achievements (成績) と leaderboards (順位表) が、新たな **OnlineSubsystemGooglePlay** を通じてエクスポーズされました。
* 新規:アンリアル・エンジン 4 では、 ES2 のランドスケープの頂点が、最初に使用される順番で、低い LOD から高い LOD の順でソートされるようになりました。これによって、各 LOD におけるドローコールのための **MaxVertexIndex** の範囲が最小化されます。また、 Mali GPU に関するデバイス上のパ   フォーマンスを大幅に向上させます。
* 新規:Android のために AdMob のサポートを追加しました。AdMob Ad ID を Android のプロジェクト設定項目に追加し、ブループリントの ad インタフェースを使用して広告を表示/非表示にできます。
* ES 3.0 に対応しているすべての Android デバイス上で ES 3.0 GLSL シェーダーを有効化しました。
* 浮動小数点のレンダリング ターゲットに対応していないデバイスで発生するクラッシュを修正しました。
* インストール バッチ ファイルで生成される rm コマンドの -f を削除しました。 -f を認識しないデバイス (例 Galaxy S III) があり、古いバージョンのファイルを削除できないためです。

**iOS**
* 新規:iOS のために Motion のサポートを追加しました。
* 新規:コマンドラインのオプション -waitfordebugger を追加しました。これによって、パッケージ化されインストールされたアプリを手動で起動して、 XCode のデバッガを始動時にアタッチさせるまでアプリを待機させることができます。

**Mac**
* 新規:UE4 は、Mac OS X 上で svn-1.8.1 の UE4 自身の静的ビルドが含まれるようになりました。
* 新規:Mac OS X 上で OculusRift のサポートを有効化できるようになりました。 
* Mac OS X 上でマルチモニタのための表示配置を扱いやすくしました。
* Mac OS X 上でエディタをマウスオーバーした時のパフォーマンスを改善しました。
* 特に Mac OS X のために、ShaderModel 4 レンダラーで透過セルフ シャドウイングを有効化しました。
* 3 次元または 2 次元配列テクスチャへのレンダリングに対応していない Mac <= GL 3.3 ドライバーのためのサポートを改善しました。
	* ATi 4xx0 シリーズ、 NVIDIA 9xx0/1xx/3xx、および Intel HD 3000 などの古い GPU でレンダリングできるはずです。ただし、新しい GPU に比べてパフォーマンスは劣ります。 
* Mac OS X 上で、 NVIDIA のカードにおけるスカイライトの光輝を修正しました。
* スキニングされたモデルを正しくレンダリングできない問題を引き起こす、Mac OS X 10.9.3 に導入された AMD FirePro カード上に発生する OpenGL ドライバーのリグレッションを修正しました (ワークアラウンドによる)。
	* このワークアラウンドでは、小さいながらも性能ペナルティが目につきます。したがって、このドライバーのバグのための修正がリリースされた後には、削除されることになります。
* Mac OS X 上における Mac Pro の新たな AMD FirePro による小規模なレンダリング エラーを修正しました。
* Mac OS X 上における **Emulate sRGB** のレンダリングを修正して、ドライバーのバグをワークアラウンドしました。

**Xbox One**
* 新規:**ESRam** のアロケーションを、 **VisualizeTexture** のログ プリントアウトおよび RHI の外にエクスポーズしました。
* 新規:**FOnlineSessionLive** の関数がいくつか実装され、Xbox Live を通じてマルチプレイヤーをプレイするために使用できるようになりました。
	* CreateSession, FindSessions, JoinSession, DestroySession.
	* この分野における Lionhead 氏の貢献に感謝を申し上げます。
* 新規:Lionhead 氏のご好意で、Xbox One のための HTTP 実装を統合しました。
* 新規:パッケージング システムがアップデートして、March と新しい XDK とともに機能するようになりました。ローカライズされたリソースのためのサポートが追加されました。 appxmanifest のテンプレートが、デプロイメントとパッケージング用に分離しました。
	* サンプルのサービス コンフィグレーションが、 Build\XboxOne\ServiceConfigurations の ShooterGame のために利用できます。このサンプルでは、統計情報を設定して Unreal のために機能させる方法が示されています。
* VRam を変更して、Volume/3D Textures においてアロケーションを可能にしました。実際には、サポートされていましたが、LPV のために再度有効化されました。
* debug/validated ドライバーの D3D 警告を修正しました。
* GPU エミッタをスポーンする際に時々生じる巨大なパーティクルを修正しました。
* 最小/最大の明るさが同じ場合に、トーンマッピングがあまりにも明るくなる問題を修正しました。

**Playstation 4**
* 新規:Morpheus をサポートしました！Morpheus のサポートは、PS4 および PC での実行時に利用できます。
* 新規:UAV が正しく append/consume カウンターを維持するようになります。
* 新規:PS4 に実験的な LPV。
* 新規:Sulpha を使用して、ホストサイドのオーディオをデバッギングするためのサポートが追加されました。
* 新規:Depth Bounds Testing (深度限界テスト) のためのサポートが追加されました。
* コピーの処理を改善して、コマンドバッファがキックされていない場合に、ターゲットがリゾルブされるようにしました。
* Razor GPU のキャプチャを使用する際の、ユーザー マーカーのプッシュ/ポップのミスマッチを修正しました。
* **profilegpu** コンソール コマンドを修正しました。
* GSVS のサイズが、中間フレームで正しく更新されない問題を修正しました。(誤ったリフレクションのキャプチャを修正しました)
* PlayStation 4 における Speedtree のクラッシュを修正しました。

**ストリーム**
* Steam のコードをアップデートして、 -**queryport=xxx** パラメータを受け入れました。

**Linux**
* 特定のデベロッパー ツールをアップデートして、Linux 用にクロスコンパイルおよびネイティブにコンパイルできるようにしました (**SlateViewer**, **UnrealFrontend** など)。 

### API の変更

#### エディタとツール
* ブループリントのコンパイラのパイプラインを修正して、新たなコンパイラがキズメットのモジュールとともに登録されるようにしました。
* ゲーム名の長さを制限しました (20 文字)。また、クッキングのパスの長さを予測して、命名の長さをそれに従って制限します。
* UEditorEngine::GetContentBrowserAssetTreePath を削除しました。
* 実験的な **SlateComponentWrappers** モジュールを削除しました。

#### ゲームプレイとフレームワーク
* 新規:**Can Jump** が **ACharacter** にエクスポーズされることによって、ブループリントにオーバーライドされるようになりました。
* 新規:Character::OnWalkingOffLedge() イベントを追加しました。
	* walking から falling への遷移を検出することが簡単になりました。ただし、movement モードで同じ遷移を生じさせることがある jumping や他のものについては除きます。
* 新規:hold-to-jump-higher (ホールドして高くジャンプする) 機能を **ACharacter** に追加しました。
* **GameMode** の **Match** ステートマシンを変更して、明示的なものにするとともに、bool 値に基づくのではなく **MatchState** の名前空間に基づくようにしました。GameState と GameSession の関数の名前も変更しました。ネイティブのサブクラスがある場合は、関数の名前を変更する必要があるかもしれません。以下はステートと変更点です。
	* **EnteringMap** は初期ステートです。アクタはまだ動作しておらず、ワールドは完全には初期化されていません。ロードが完全に終了すると次のステートへ移ります。
	* 次のステートである **WaitingToStart** (元 **bWaitingToStartMatch**) に移ると、 **HandleMatchIsWaitingToStart** が呼び出されます。アクタは動作しますが、プレイヤーはまだスポーンされていません。**ReadyToStartMatch** が true を返した場合、または **StartMatch** が呼びだされた場合、次のステートへ移ります。
	* 次のステートである **InProgress** (元 **bWaitingToStartMatch**) に移ると、全てのアクタ上に **BeginPlay** を呼び出す HandleMatchHasStarted (**StartMatch** から分離) が呼び出されます。通常のゲームプレイが進行中です。**ReadyToEndMatch** が true を返した場合、または **EndMatch** が呼びだされた場合、次のステートへ移ります。
	* 次のステートである **WaitingPostMatch** に移ると、 **HandleMatchHasEnded** (元 **PerformEndGameHandling**) が呼び出されます。アクタはまだ動作していますが、新規プレイヤーは受け取られていません。マップ転送が開始されると、次のステートへ移ります。
	* 次のステートである **WaitingPostMatch** (元 **bLevelChange**)に移ると、 HandleLeavingMap (元 GameEnding) が呼び出されます。新規マップへの転送中、 Match はこのステートのままです。
	* Aborted が failure (失敗) ステートです。AbortMatch から開始されます。修復不能なエラーがある場合に設定されます。
* **AGameMode::bDelayedStart** iを新たなフラグの **bStartPlayersAsSpectators** に変更しました。true の場合は、新たなプレイヤーが最初は観客としてスポーンします。 false の場合は、最初からポーンとしてスポーンします。 **bDelayedStart** は、match をすぐに開始すべきかどうかということだけに影響するようになりました。
* Physics Material Surface Types (物理マテリアル サーフェスの型) の最大数を 64 に変更しました。
* FCoreDelegates::OnObjectPropertyChanged を変更して、追加パラメータとしてプロパティ変更イベントを受け取るようにしました。
* **AActor::BeginPlay** を変更して、いくつかの状況では早めに開始するようにしました。ゲームステートが初めて **WaitingToStart** または **InProgress** に移ると起こります。これまでは match が開始された時のみ起こりました。機能名を変更しました。 **UWorld::BeginPlay** は **AActor::BeginPlay** を呼び出します。
* Blackboard Component の参照を BehaviorTreeComponent から BrainComponent に移動しました。
* Nav Movement Component の GetActorLocation の名前を、より適切な GetActorFeetLocation に変更しました。
* プレビューにアタッチしたアセットの型を、生のポインタから **TAssetPtr** に変更しました。
* **FAssetTools::CreateDiffProcess()** のシグネチャーを変更して、別個のパラメータとして、ファイルパスを明示的に取るようにしました。
	* パブリック API とデフのプロバイダ間に抽象を追加します。API は、デフ コマンドラインのフォーマットをエクスポーズしなくなりました。
* **FAssetTools::CreateDiffProcess** をアップデートしました。使用するには、引数からファイル名を取り除いて、新たな New および Old ファイル名変数を使って渡す必要があります。
* Stationary (固定) という移動性が、 **ULightComponentBase** のサブクラスを除くあらゆるものに表示される問題を修正しました。
***FCoreStyle** のイニシャライズを修正するとともに、そのアセットのすべてが喪失した場合にファイル単位で失敗する問題を修正しました。(Slate を使用しないゲームについて、 iPhone 4 上でロード時間が 1～2 秒短縮されます)
* **UCanvas::DrawTile()** の古い Z パラメータを削除しました。

#### コア
* 新規:ライセンシーのエンジン バージョンに関するサポート (changelist の部分)。
	* **UpdateLocalVersion** UAT のスクリプトを修正して、ライセンシーのバージョンとカスタムの changelist を設定できるようにしました。
* 新規:TWeakPtr<Base>** が **TWeakPtr<Derived>** と同等になりました。また、すべての **TWeakPtrs** が **nullptr** と同等になりました。
* 新規:**TArrays** が ExtraSlack パラメータをともなってコピーできるようになりました。これによって、コピーされた要素の後のスペースを保存できるようになります。
* 新規:追加された **FString** の機能:
	* **AppendChars** は、null で終わらない文字列または部分文字列の使用を可能にするために、キャラクターの数を取ることができます。
	* const TCHAR* + **FString** 演算子。
	* **rvalue** をより意識しています。
* 新規:**UnrealHeaderTool** が #ifdef/#ifndef/#elif/# などのディレクティブを扱えるようになりました。
	* これらのブロックの中身は、 UHT によって丸ごとスキップされます。適切なサポートではありませんが、よりネイティブなコードをコンパイルできるようになります。
* ビルド システムを変更して、生成されたコードのビルドを処理するようにしました。
	* *.generated.inl ファイルは、ユーザーによってインクルードされる必要がなくなりました。
	* .generated.inl ファイルをインクルードすると、そのインクルードを削除するように、コンパイラの警告が出るようになりました。
	* 将来のエンジンのリリースでは、警告の出る .generated.inl が丸ごと削除されて、 #include が失敗するようになります。
	* 新規:デリゲートおよびマルチキャスト デリゲートが、 UFunction 束縛をサポートするようになりました。
	* スクリプト デリゲート上で、SetObject() と SetFunctionName() を結合して、 BindUFunction() にしました。
	* TWeakObjPtr をアップデートして、適切な代入演算子をもつようにしました。その結果、 UObject の明示的なボックス化が不要になりました。
	* GIsBenchamrking と GUseFixedTimeStep をそれぞれ、 FApp::IsBenchmarking と FApp::UseFixedTimeStep にリファクタリングしました。
* **FCrc::StrCrc32** が、 1 バイトの文字型をともなってインスタンス化された場合に、警告を出さなくなりました。
* **FString** をともなった **ExtraSlack** コンストラクタが、ソース文字列の終端以降を読み込まなくなりました。
* **FString::Replace** が、 const ソース文字列を変化させなくなりました。(スレッドセーフの問題)
* BOM をともなわないファイルが、 ANSI ではなく UTF-8 として扱われるようになりました。
* TSharedPtr 、 TWeakPtr および TSharedRef が、move を意識したものになりました。
* ビルド回数によって、多数の **TSharedPtr** のアサインメントを含む関数が改善されました。
* ブループリント CDO によって参照される、名前変更されたアセットが、コードによる参照に関する誤った警告を出さなくなりました。
* 生のポインタ型の **UProperty** を **TAssetPtr** に変更できるようになりました。プロパティは、タグ付きプロパティがシリアライズされている間に修正されます。
* **SpawnParameters** のフィールドにドキュメントを追加しました。関連するブループリントをリファクタリングして、ターン/ルックをフレーム非依存にしました。 **APawn::EnableInput** の問題を修正しました。ストラテジーゲームのミニマップのバグを修正しました。シューティングゲームのサンプルでロケットランチャー (とアモ) を元の状態に戻しました。
* インフラストラクチャをアップデートして、コンテンツ ブラウザでワールドのアセットを表示する機能をサポートするとともに、概してワールドを通常のアセットとして扱うようにしました。
* **EWorldType::Inactive** を追加することによって、ロードされているけれども現在はレベル エディタで編集されていないワールドを表すようにしました。
* デフォルトのブラシに対応する **UBrush** オブジェクトが、ワールドのパッケージ内のトップレベルのオブジェクトではなく、デフォルトのブラシと同じ outer をともなって保存されるようになりました。

#### Slate
* 新規:Slate Remote サーバー (UDK Remote iOS アプリのための) が、プラグインになりました。(デフォルトで有効になります)
* 新規:Slate モジュールが、 UMG に備えて Slate と SlateCore に分割されました。以下は、この変更に関する詳細なアップグレード ノートです。
	* モジュールが以前に Slate に対してモジュール依存 (dependency) があったならば、現在も Build.cs において SlateCore に対して PrivateModuleDependency (private モジュール依存) をもつ必要があります。
	* モジュールが、現在 SlateCore で宣言されている Public ヘッダファイルの型のいずれかにおいてエクスポーズされている場合は、 SlateCore に対して PublicModuleDependency をもつ必要があります。
	* SWidget の ToolTip プロパティの型を、 SToolTip から IToolTip に変更しました。必要に応じて、ローカル変数を TSharedPtr<SToolTip> から TSharedPtr<IToolTip> に変更しました。
	* IToolTip はウィジェットではありません。ツールチップを表示する実際のウィジェットにアクセスしなければならない場合は、IToolTip::AsWidget() を使ってください。ツールチップの中身にアクセスしなければならない場合は、IToolTip::GetContentWidget() を使ってください。
	* changelist に同期した後は、 /Engine/Intermediate/Build/ ディレクトリをクリーンアップして、プロジェクト全体をリビルドしなければならない場合があります。
	* プロジェクトにおいて、現在 SlateCore で宣言されている未解決の型のためにリンカ エラーが出る場合は、 SlateCore への依存関係が喪失している可能性があります。
	* エンジン コードで、現在 SlateCore で宣言されている未解決の型のためにリンカ エラーが出る場合は、エンジン全体をリビルドしなければならない可能性があります。
	* Slate および SlateCore モジュールのためにディレクトリの配置をアップデートして、見つけやすくしました。
* モーフターゲットがマチネで再生されない問題を修正しました。
* カスタムの設定のためにオブジェクトをコピーする際に、コリジョンの設定が失われるバグを修正しました。

#### レンダリング
* 新規:**StreamingPauseRendering** によって、ロードがブロックされている間もレンダリングが継続するようになります。これによって、ゲームがフリーズしているように見えなくなります。デフォルトでは、ウィジェットが隅でアニメートされた状態で、前のフレームが表示されます。この機能をオーバーライドするには、カスタムの **BeginStreamingPauseDelegate** と **EndStreamingPauseDelegate** を用意します。

#### ブループリント
* 新規:UK2Node_LatentOnlineCall を追加しました。これは、 UOnlineBlueprintCallProxyBase サブクラスにあるすべての静的なファクトリ メソッドのためのエントリーを自動的に作成するものです。
* **UK2Node** のサブクラスの **ExpandNode()** において、ユーザーは、スキーマの Move/CopyPinLinks ではなく、CompilerContextの **MovePinLinksToIntermediate/CopyPinLinksToIntermediate** を使用しなければならなくなりました。
* ランタイム check() は、ユーザーの失敗によってトリガーされます。これは、ブループリントのデバッギングをより綿密に行うためのものです。これを使用することによって、生成されたピンを、グラフでユーザーが見るブループリントに容易にマッピングできるようになります。
* **UK2Node_BaseAsyncTask** をアップデートしました。これにより、格段に拡張しやすくなります。

#### UnrealHeaderTool
* HeaderGroup キーワードおよびヘッダグループにより生成されたすべてのヘッダが削除されました。
* HeaderGroup キーワードを使った UCLASS の宣言は、修正する必要があります。(キーワードを削除しなければなりません)
* HeaderGroupNameClasses.h に生成されたヘッダに対するすべての #includes は、削除されなければなりません。削除しない場合は、コードがコンパイルされません。

#### プラットフォーム

**iOS**
* PC 上の iOS は、コンテンツ オンリーのプロジェクト全体を PC でビルドします。ただしユーザーは、自分の開発者証明書 (Developer Certificate) を PC に追加するように求められるようになりました。これは IPP で実行できます。
* delayed success adverts (遅れた成功の広告) の非表示をアプリが要求した後に、それらの広告が表示されないようにしました。
* iOS の achievement (成績) の実装で生じるさまざまなスレッド化 / ロジックの問題を修正しました。

**Xbox One**
* May 2014 XDK がサポートされました。
* Xbox One のバイナリが、パッケージ化またはデプロイされた場合に、 Game\Binaries\XboxOne の下に置かれるようになりました。

#### オンライン
* achievement (成績) をブループリントにエクスポーズしました。WriteAchievementProgress、CacheAchievements、GetCachedAchievementProgress、CacheAchievementDescriptions、GetCachedAchievementDescription
* iOS と Android で使用できるように、 ShowPlatformSpecificAchievementsScreen と ShowPlatformSpecificLeaderboardScreen をエクスポーズしました。

#### PlatformMath のリファクタリング 
* Trunc、Round、Floor、Ceil を **TruncToInt** 、 **RoundToInt** 、 **FloorToInt** 、 **CeilToInt** に名前を変更しました。*ToFloat のバージョンを追加しました。
	* 古いバージョンはまだコンパイルされますが、コンパイル中に警告が表示されます。これらは削除する必要があります。削除しなければ、将来のリリースでコンパイルされなくなります。


