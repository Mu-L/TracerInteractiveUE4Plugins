Title:アンリアル エンジン 4.3 リリースノート
Crumbs:%ROOT%, Support/Builds
Description:
Availability:Public
version:4.3
order:3

[TOC(start:2 end:2)]

## 4.3 リリースノート 
アンリアル・エンジン 4.3 では、モバイルのためのサポートが飛躍的に向上します。また、新たなレンダリング機能が加わるとともに、ブループリントのワークフローが改善され、さらには、 Mac とノートパソコンにおける秀逸なエクスペリエンスの実現に向けて長足の進歩を遂げています。World Composition 新ツールやスプライン機能、 Paper2D のプレビュー、 2D ツールセットもぜひご覧になってください！また、本日から SpeedTree 7 のサポートを開始します。さらには、iOS 8 の Metal API への取り組みの成果を公開し、Oculus Rift の機能 (タイムワープなど) もリリースします。

今回のリリースのコードに貢献していただいた素晴らしいデベロッパーの方々全員に感謝を申し上げます！ 

3dluvr、abergmeier、alixSilkin、Allegorithmic、bigzer、Chris-Bond、CoherentUE4、EverNewJoy、Ixiguis、mpolaczyk、pzurita、raziel2001au、robert-wallis、RushPL、solid-angle、stephenwhittle、thk123、timdonkssbc100、vakathil、Xaklse、Zoubi の方々、ありがとうございました！

## 主な新機能

### レンダリング 

##### New:可動スカイライト
スカイライトで、 Movable (移動可能) という移動のための設定が使用できるようになりました！
* このタイプのライトでは、動的なシーン変化がサポートされています。
* SSAO とディスタンス フィールド AO という新たな機能によってシャドウイングを受けます。 

##### New:ディスタンス フィールド アンビエント オクルージョン
この機能では、シーン内のスタティック メッシュを表現するために使用される符号付きディスタンス フィールドから AO (アンビエント オクルージョン) が計算されます。スタティック メッシュは実行時に動かすことが可能で、AO は更新されます。

*オリジナル:*

![](DistanceFieldAO_01.png)

*ディスタンス フィールド AO が有効:*

![](DistanceFieldAO_02.png)

##### NEW:スカイライト グローバル イルミネーション
Lightmass によって、ステーショナリー スカイライトおよびスタティック スカイライトでグローバル イルミネーションが計算されるようになりました！

*オリジナル:*	

![](SkylightGI01.png)

*グローバル イルミネーションが有効:*

![](SkylightGI02.png)

* スカイライト上で **Indirect Lighting Intensity** (間接ライティングの強度) を利用することによって、バウンス ライティングの明るさを制御できます。
* すべての Stationary ライトと同じように、実行時にカラーと強度を変更する場合は、バウンス ライティングが Lightmap にベイクされるため、直接ライティングにのみ適用されます。



##### New:ステーショナリー ライトによる半透明性のシャドウイング
ステーショナリー ライトが半透明マテリアルに適切にシャドウイングするようになりました！

*オリジナル:* 

![](TranslucencyShadowing01.png)

*透過性のためのスタティック シャドウイング:*

![](TranslucencyShadowing02.png)

* このことは、ライトの影響をカバーする Lightmass でシャドウ デプス マップを計算することによって可能となりました。
 

### 2D ゲーム ツール プレビュー
**Paper2D** プラグインが、エンジンでデフォルトで有効化されるようになりました。そのため、4.3 ではコンテンツ オンリーのゲームでこのプラグインが利用可能になります。 

2D 横スクロール ゲームのテンプレートも加わりました！(ブループリント、C++ のバリエーションで)

![](Paper2D03.png)

4.3 では、エディタとドキュメンテーションが、Paper2D の状態を正しく伝えるようになりました。
* スプライトと FlipBook は「早期アクセス版」です。
* 2D コリジョン、テレイン スプライン、グループのアトラス化、タイル マップは、実験的機能です。(可能な場合は、enable フラグで隠されています。)  

![](Paper2D01.png)
![](Paper2D02.png)

追加のアップデート
* スプライト エディタとフリップブック エディタのパスの製品化 / 可用性を向上しました
* フリップブック コンポーネントを改善しました (再生/一時停止、ループ制御、反転など)


### AI ツール:Behavior Tree

##### Behavior Tree エディタで Blackboard の編集およびデバッグが可能に
Behavior Tree エディタ内で Blackboard のエントリを編集およびデバッグできるようになりました。Blackboard エディタにアクセスするには、新たな「Blackboard」モードに切り替えます。

![](BehaviorTree01.png)

Blackboard を編集するには、ブループリントの変数と同じようにキーを加えます。

![](BehaviorTree02.png)

キーの削除またはリネームは、ショートカットキーおよび **右クリック** コンテクストメニューから行うことができます。

デバッグする場合は、 Blackboard の値が検査のために表示されます。以前と同様に、現在のデバッグ コンテクストと保存された (以前の) デバッグ コンテクストを切り替えることができます。

![](BehaviorTree03.png)

Blackboard は、Behavior Tree モードでクイック レファレンスのためにも表示されます。

![](BehaviorTree04.png)

##### New:「新たなノード」のためのショートカット
Behavior Tree エディタのツールバーに新たなボタンが追加されました。これによって、Task、Decorator、Service のための新たなブループリント ノード タイプを素早く作成できるようになります。

![](BehaviorTree05.png)

* これらの新たなノードのためのブループリントは、現在編集されている Behavior Tree の位置に作成されます。ノードのタイプを作成できるクラスが 2 つ以上ある場合は、ボタンとともにクラスを選択できるドロップダウンが表示されます。

### 大規模ワールドのサポート

##### New:ワールド合成 
サブレベルを作成して、このマップ上の任意の場所に配置することができます。サブレベルはゲーム内で自動的にロードされます。

![](LevelsComposition01.png)

* レベルの **[World Settings (ワールドの設定)]** で **[Enable World Composition (ワールド合成を有効にする)]** をクリックすると、この機能をアクティベートできます (この機能を有効化するためにはレベルを保存する必要があります)。
* **レベル ブラウザ** のツールバー上にある Minimap ボタンを使用して、ワールドマップにアクセスできます。

![](LevelsComposition02.png)

* 今後、新たなドキュメントとサンプル ゲームが登場します。
* この機能は、初期のビルドに実験的に含まれていた **World Browser** 機能の代わりとなるものです。

#####レベル ブラウザの再デザイン
**レベル ブラウザ** (ウィンドウ メニューからアクセスできます) が、4.3 でかなり変わります。

![](LevelBrowserRedesign.png)

* すべてのファイル操作 (新規作成、保存、別名で保存、追加、マージなど) が、コンテクストメニューから **Levels** というツールバーボタンに移動しました。
* ステータスバーに新たな表示オプションとして、 **Display actor count for each level (各レベルのアクタ数を表示)** と、 **Display full package names (完全なパッケージ名を表示)** が加わりました。
* あまり多用されない操作 (レベルのトランスフォーメーション、ストリーミング ボリュームの管理など) は、 **[Level Details (レベルの詳細)]** パネルから実行できます。[Details (詳細)] パネルは **[Levels (レベル)]** パネルのツールバー上にある **[Details (詳細)]** ボタンをクリックすると開きます。 **[Level Details (レベル詳細)]** パネルは、通常の **[Details (詳細)]** パネルとは別のものです。選択されたレベルの詳細しか表示しません。なお、複数選択も可能です。
* **PIE** では、**[Levels (レベル)]** パネルが各レベルのシミュレーションのステータスを表示します。非表示のレベルは、ビジビリティの「目」が閉じられ、ロードされていないレベルは、名前がグレイで表示されるようになります。
* レベルをブループリント グラフにドラッグすると、そのレベルのための **GetStreamingLevel** ノードが作成されます。
* If something is missing or work incorrectly in a renewed Levels tool you can switch ba新たなレベル ツールで、何らかのものが欠けていたり、正しく機能しない場合は、 **-oldlevels commandline** コマンドライン パラメータを使って、元のレベル ツールに戻すことができます。

### New:Render To Texture (テクスチャへのレンダリング) ブループリント
RenderToTexture_LevelBP ブループリントとともに新たなテクスチャ ベイク処理機能が利用できるようになりました！**Engine\Content\ArtTools\** ディレクトリに RenderToTexture_LevelBP というブループリントが格納されています。このブループリントには、ベイク処理のためのオプションが数種類用意されています。
 
**使用法に関するクイック レファレンス**
 
RenderToTexture_LevelBP は、ワールドの 0,0,0 に位置していなければなりません。Player Start も、Rotation (回転) を 0 にして、ワールドの 0,0,0 の地点に置く必要があります。そうしなければ、カメラがエディタのビューポートの Rotation を取得することになります。 

![](RenderUnwrappedMat.png)(w:900)

**3D インポスター スプライトをレンダリングする**
 
インポスターは、あらゆる視野角から表現されて 3D 内で回転およびライティングできるスプライトのようなものです。 

![](Render3D.png)(w:900)

インポスターの例:
中央付近のメッシュの 1 つは、本物のスタティックメッシュですが、残りはインポスターです。

![](ExampleImposters.png)

また、このインポスターには Single Rotation Axis (単一回転軸) というモードもサポートされています。これは、地平線上にある遠くのオブジェクトのためにビルボードを表示するためのものです。メッシュが Z 軸を中心にして回転するため、完全なインポスターよりも多くのフレームまたは解像度を得られるようになります。 

![](ExampleImposters2.png)

下は、Single Rotation Axis のインポスターを利用したテスト用シーンです。ワールドの位置を使用してユニークな回転を与えることによって、「フリップブック」(パラパラ漫画) の位置をランダムに回転させるようにマテリアルが設定されています。 

![](ExampleImposters3.png)

**オブジェクト単位 (Per Object) シャドウの深度テクスチャをレンダリングする**
 
このモードでは、指定されたライトビューから深度マップがベイク処理されます。マテリアル内でカスタムのオブジェクト単位シャドウを実行するために使用できます。下の例では、木のマテリアルがアンリットされていて、シャドウが深度テクスチャから供給されています。Apple の Zen デモで使用されたモードです。 

![](RenderPerObject.png)

**フリップブック アニメーション**
 
このモードは、インポスター スプライト関数によく似ています。一連のメッシュ回転を使用しますが、今回はブループリントで事前設定されるのではなく、ユーザー入力で指定します。
 
望ましい画像タイプをフリップブック テクスチャとしてレンダリングアウトすることによって、パーティクルエフェクトなど、エンジン内における任意の場所のスプライト上でアニメートさせることができます。 

![](FlipbookAnim.png)(w:900)

また、Animation Phase (アニメーション フェーズ) パラメータをターゲットに渡すことによって、頂点シェーダー アニメーションをフリップブックにレンダリングするためのオプションもあります。

![](FlipbookAnim2.png)(w:900)

### New:クレジット (ありがとうございます！)
これまで貢献していただいた方々、それにこれから貢献していただく方々は、アンリアル エディタの新たなクレジット画面で永遠にその功績が讃えられます。いくら感謝してもし足りないくらいです！

![](CommunityDevs.png)

クレジット画面は、エディタの **[Help (ヘルプ)] → [Credits (クレジット)]** メニューから開くことができます。

### New:Oculus Rift のアップグレード
* 新たな Oculus SDK (0.3.3-pre.1 SDK) が、最新のおまけとともに、アップグレードされました！
* Oculus Rift DK2 が、モーション トラッキングのフル機能をともなって、すぐに使える状態でサポートされるようになりました。
* 新たな直接レンダリング パスとタイプワープ機能によって、デバイス上のレイテンシーを大幅に削減できるようになりました。
* Oculus Rift DK2 の新機能を展示するために制作されたエピックの新たなサンプル Couch Knights をご覧ください。

![](OculusRiftUpgrade.png)

### New:SpeedTree 7 がサポートされました
SpeedTree のアセットをアンリアル・エンジンにインポートできるようになりました！

![](Speedtree01.png)

SpeedTree の木と植物には、すべて、ライト マップ UV、動的 LOD、Wind エフェクトが含まれます。新バージョンをダウンロードする場合は、次のようにいくつかのオプションが用意されています。
* アンリアル・エンジン 4 のサブスクリプションのための SpeedTree Modeler (モデラー) が、 月額 19 米ドルで利用できます。Windows および Max OS X で動作します。ロイヤリティ、タイトル別利用料、プラットフォーム別利用料は不要です。
* Trees for sale (販売用のツリー) – 季節別バリエーション。さまざまなトライアングル数ほか。
* UE 4.3 のプロジェクトに入れることができるフリーのサンプル ツリー 3 種
* すべて [SpeedTree のウェブサイト](http://www.speedtree.com/) で入手できます。

![](Speedtree02.png)

### ブループリント

##### New:スプラインとスプライン メッシュ コンポーネント
ワールド内でスプラインを直接編集できるようになりました！スプライン コンポーネントをブループリントに追加して、そのブループリントのインスタンスを選択するだけで、レベル内でスプラインの編集にアクセスできるようになります。 

![](SplineMeshComponents.png)(w:900)

キーを **クリック** してスプライン選択します。
* 移動のためのウィジェットを使って、いろいろ動かすことができます。(「タンジェント」は、デフォルトで自動的に更新されるようになっています。)
* 選択されたキーを使って **Alt-drag** すると、新たなスプラインが加わります。

さらに制御が必要な場合は、
* 回転のためのウィジェットを使って、タンジェントを回転させることができます。
* スケーリングのためのウィジェットを使って、タンジェントを拡張させることができます。

キーを **右クリック** すると、コンテクスト メニューを開くこともできます。

必要な場合は、 **AddSplineWorldPoint** 関数と **SetSplineWorldPoints** 関数を使って、コンストラクション スクリプト内でスプラインを作ることもできます。

##### New:Reroute ノード (ワイヤーのルートを変更)
ピンをクリックしてドラッグすると、コンテクスト メニューに **Add Reroute Node... (再ルーティング ノードを追加)** が表示されるようになりました。通常通りに、再ルーティングのピンを接続させたり、(近くでドラッグするか ピンを **Ctrl + ドラッグ** することによって) いろいろ動かしたり、 **Alt + クリック** することによって削除することが可能です。 

再ルーティング ノードにコメントを付けることもできます。そのためには、ノードの下側のドラッグ可能な領域でダブルクリックするか、**F2** を押します。

![](RerouteNodes.png)

##### New:struct ピンの分割
ノード上に配置されている struct (構造体) ピンを直接分割できるようになりました。Make ノードと Break ノードを挿入する必要はありません。 

![](SplitStructPins.png)

この機能は、任意の struct の入力ピンと出力ピン両方で有効です。分割された struct にさらに struct が含まれている場合は、それらも展開することができます。

##### New:出力ピンで enum を展開
ブループリント ノードで、列挙型実行ピンの展開が可能になりました。この機能は、かなり前から入力ピンでは可能でしたが、今回出力実行ピンでも利用できるようになりました。

![](ExpandEnum.png)

* 列挙型を作成して、1 つを関数の出力パラメータにして、その出力パラメータを UFunction メタデータ (C++) の中で ExpandEnumAsExecs としてマークできるようになりました。

##### New:データとカーブ テーブルをサポート
Evaluate Curve Table Row (カーブ テーブルの行を評価) は、XY で Row Name (行の名前) の出力値を返します。

![](DataandCurve01.png)

Get Data Table Row (データ テーブル行を取得) は、個々のメンバ変数に分解できる Row struct を返します。

![](DataandCurve02.png)

##### New:Anim Trail をブループリントで制御
Anim Trail エミッタを、Anim Notify を使わずに、ブループリント (とコード) で制御できるようになりました。
* この機能に関する唯一の制約は、パーティクル システム コンポーネントが、ソケットの位置をサンプリングしているスケルタルメッシュ コンポーネントの子でなければならないということです。
* コンポーネントの **Begin Trails** 関数は、パーティクル システムのすべての Anim Trail エミッタを開始させます。 

![](AnimTrails02.png)

* コンポーネントの End Trails 関数は、パーティクル システムのすべての Anim Trail エミッタを終了させます。

![](AnimTrails03.png)

* 実行中に Trail のプロパティを変更することもできます。次の画像では、game time を使ってティック毎に幅を変更しています。

![](AnimTrails04.png)

##### New:Global Blueprint Search (全面的なブループリント検索)
Find-in-Blueprints が、機能に関する要望を取り入れて大幅に強化されました。また、より堅牢で便利になりました。

検索は、かつてないほど包括的になりました。ノード、ピン、ピンの値、グラフ、変数、変数の値、アニメーション グラフの検索が可能になりました。 

検索は非同期のプロセスであるため、検索が完了する時、エディタが使用できなくなるということはありません。異なるブループリントで複数の検索を同時に実行することも可能です。 

Find-in-Blueprints は、検索可能なデータについて DDC を利用するようになりました。ブループリントが更新されると、その情報がリフレッシュされ、他のユーザーがそのブループリントに同期すると、検索可能なデータがアクセス不能となります。 

ブループリントがシステム内でインデックス化されていない場合は、以下の画像のように通知されます。

![](FindBlueprintsRefactor.png)

* **注記**:現在のレベルは、支障なく検索できるはずですが、レベル ブループリントが完全にサポートされているわけではありません。

### スケーラビリティのアップデート
4.3 では、エディタのパフォーマンスと エディタの CPU 使用に注力しました。
 
* エディタのパフォーマンスを改善するために、スケーラビリティの設定 ([エンジンの品質調整]) が、エンジン起動時に CPU および GPU のパフォーマンスを測定することによって、自動的に適用されるようになりました。
	* スケーラビリティの設定によって、レンダリングの設定の質が低下する場合があります。また、ビューポートでのリアルタイム プレビューが無効になる場合があります。これらは、パフォーマンスを向上させるための措置です。適用されるスケーラビリティの設定については、 [ここ](https://docs.unrealengine.com/latest/INT/Engine/Rendering/Scalability/ScalabilityReference/index.html) で詳しく読むことができます。
	* レベルエディタのツールバー内の [Quick Settings (クイック設定)] メニューから、この機能を無効化し、エディタ内で手動でスケーラビリティを変更できます。

![](ScalabilityUpdates01.png)

![](ScalabilityUpdates02.png)

* CPU 使用量は、エディタが最小化された場合に著しく減少します。 
* バッテリーで駆動するノートパソコンでは、バッテリーの消費を抑えるために、エディタのフレームレートを最大 60 Hz に抑えています。


###スタティック メッシュ エディタ

##### New:カスタマイズ可能なスタティックメッシュのコリジョン
スタティックメッシュ エディタで、さまざまなタイプのコリジョン プリミティブを複数追加できるようになりました。これによって、独自のコリジョン設定を素早く作成できるようになるとともに、既存のコリジョンを素早く修正することによって、ゲームプレイに支障がある問題を修正できるようになります。

この機能を使用することによって、複雑なジオメトリをもっと簡単に撃ち抜いたり、通り抜けることができるようになります。また、ユーザーにそうできないようにしたい時は遮蔽物を配置することも簡単にできます。次はその例です。例:

![](CustomStaticMeshCollision01.png)
![](CustomStaticMeshCollision02.png)

スタティックメッシュ エディタが、 Capsule/Sphyl コリジョン ジオメトリにも対応するようになりました。
* 合わせるべき正しい軸とそのメッシュに最適なフィットを計算しようとします。たとえば、次のようにします。例:

![](CustomStaticMeshCollision03.png)

* すべてのコリジョン プリミティブは、マウスで選択できます。また、エディタのウィジェットを使って移動、回転、スケーリングすることができます。(**スペースバー** と **W、E、R** キーで操作のタイプを切り替えることができます。)
* コリジョン プリミティブは、次の操作が可能です。複数選択 (**Ctrl+左マウスボタン**)、フォーカス (**F キー**)、複製 (**Alt+ドラッグ**)、不要になった時に削除 (**Del キー**)。これらはすべてトランザクションです。  


## リリース ノート

### マーケットプレイス

Black Jack がブループリントだけで作成され、モバイルにも対応しました！

![](BlackJack.png)


### 学習リソース
* エディタ内のチュートリアル
	* New:Paper2D: Sprites and Flipbooks (スプライトとフリップブック) のためのエディタ内チュートリアル画面スプライトとフリップブック
* New:SpeedTree のドキュメントが含まれました。
* New:Math Expression Node (数式ノード) のためのドキュメントのページ
* New:パフォーマンスとプロファイリングのガイド 
* New:ワールド合成のためのドキュメントのページ
* New:マチネー トラックのレファレンス
* New:Android クイック スタート ガイド
* ライティングのアップデートと改善に関するドキュメント
	* New:ライティングのクイック スタート ガイド
	* New:ディスタンス フィールド AO の情報とビデオ
* 物理のアップデートと改善に関するドキュメント
	* PhAT
	* コリジョン
	* 歩行可能なスロープ
* アニメーションののアップデートと改善に関するドキュメント
	* AnimNotifies & AnimTrails
	* FABRIK
	* ペルソナ アニメーション エディタのモード
* 文書によるチュートリアルとビデオによるチュートリアルのためのリンクが、エディタ内のチュートリアル ホーム画面に加わりました。
* カスケード入門ビデオ チュートリアル シリーズ
* UE4 プログラミング入門ビデオ チュートリアル シリーズ

### 新規追加 

#### エディタとツール
* New:クレジット！これまでに貢献していただいたコミュニティの方々が表示されるクレジット画面が加わりました。
* New:低 fps の検出をエディタに追加しました。
* New:**User Defined Structure (ユーザー定義の構造体)** のデフォルト値のためのプロパティ エディタ
* 新規:**キャラクター 移動コンポーネント**:移動の入力と外部の力をパスフォローイング中に適用できるようになりました。
* 新規:ブラシのワイヤフレームが、動かされてオブジェクトの背後にまわった時、点で描画されるようになりました。
* 新規:**Supported Platforms (サポート対象のプラットフォーム)** の設定項目がエディタに追加されました。
	* これによって、プロジェクトが実行されることになっているプラットフォームをリスト表示できるようになります。
* 新規:**Add Code to Project (コードをプロジェクトに追加する)** ウィザードの改善
	* クラスが public であるか private であるかを通知する方式を改善しました。
	* 非 UObjectのクラス (空の C++ クラス、Slate ウィジェット、Slate スタイルのアセット) が作成できるようになりました。
	* モジュール ヘッダが、既知のインクルードパスへの相対パスでインクルードされるようになりました。(サブフォルダ内部でクラスが作成される問題を修正するためです。)
* 新規:**アセット ビュー** が、二次ソートをサポートするようになりました。
* 新規:エディタの **Packaging** の設定によって、ステージングの対象となる追加ディレクトリを指定できるようになりました。
* 新規:レベルエディタとアセット ビューアーでオブジェクトを選択状態にして **Alt+Shift+R** を押すと、そのオブジェクトのレファレンス ビューアーを表示させることができるようになりました。
* 新規:参照ビューアのコンテクスト メニューに **[アセットを編集]** オプションを追加しました。
* 新規:**Randomly Select Seed Array (Seed 配列をランダムに選択する)** 機能が追加され、カスケードでシード設定をランダム化できるようになりました。
* 新規:「ローカル空間クロス シミュレーション」オプションが **スケルタル メッシュ コンポーネント** に加わりました。
* 新規:凸型コリジョン ボリュームのためのクロス ビジュアライゼーションを追加しました。
* 新規:エディタ専用関数を追加して、エディタ内アイコンの表示をノードがオーバーライドできるようにしました。 
* 新規:ブラシにユニークなラベルが加わりました。
* 新規:ブループリントのアイコンを追加することによって、ロジックのためにブループリントを使用するノードを表示できるようにしました。
* 新規:マネージャーを追加することによって、My Project のリクエストをキューに追加し、処理できるようにしました。また、cool down を追加しました。state がポーリングされるようになりました。
* 新規:アセットを削除することによって、Mode タブの [Recently Placed (最近配置済み)] リストが強制的にリフレッシュされるようになりました。
* 新規:シミュレートされた位置とスキニングされた位置間におけるクロスのブレンディングをサポートしました。
* 新規:シミュレートしているクロスの頂点/サーフェスからパーティクルをエミットする機能をサポートしました。
* 新規:スケルタルメッシュのための LOD パネルを改善して、スタティックメッシュの LOD のようにしました。
* 新規:自動保存の改善とパフォーマンスの調整:
	* .uasset ファイルとしてディスクにまだ保存されていないアセット ファイルを復元できるようになりました。
* 新規:正投影法ビューでその他のタイプのアクタを範囲選択できるようになりました。(可視的なプリミティブ コンポーネントの境界に基づいて)
* 新規:ドロップ シャドウ、および、IES ルーメン ディスプレイに対するサムネイル タイルのサイズに基づくスケーリングを追加することによって、読み取れるようにしました。
* 新規:非インタラクティブなエディタ内チュートリアルが、複数のページをもてるようにしました。
* 新規:通常のピンをもたないプロパティマトリックスからのコピー/ペーストがクラッシュしなくなりました。
* 新規:Unit Graph (単位グラフ) が有効化されていない場合でも、Raw (生の) および Unit Time Stats (単位時間統計情報) が正しく表示されるようになりました。
* 新規:カラーピッカーで、テーマの名前を他と同じ名前に変更した場合に、エラーが表示されるようになりました。
* ソース管理の状態を修正して、すべてのコンテンツ ブラウザのウィジェットについてフェッチされないようにしました。
* Settings エディタを修正して、ini ファイルの read-only ステートに依存しないようにしました。
* グリッド線を修正して、Preferences で 2 の累乗に切り替えた時に正しくズームされるようにしました。
* 繰り返しローカリゼーションの設定にアクセスするとクラッシュする問題を修正しました。
* コンテンツ ブラウザから root ディレクトリを同期させるとクラッシュする問題を修正しました。
* Blackboard のキーを削除してからリネームしようとするとクラッシュする問題を修正しました。
* 新たな Behavior Tree を開くとクラッシュする問題を修正しました。
* .jpeg のファイルをインポートするとクラッシュする問題を修正しました。
* slow task progress (遅いタスクの進行) ダイアログによってクラッシュする問題を修正しました。
* ブループリント メッシュ コンポーネント上のスタティック ライティングを修正しました。
* RescaleSimpleCollision を修正して、ビルドスケールが増大した時に ConvexElems の位置が更新されるようにしました。(これまでは、単に頂点をスケーリングするだけでした)
* エディタの path オプションを修正しました。
* コンパイラ エラーを修正し、若干の最適化を実施しました。
* コンテンツ ブラウザのソース管理ステートのデリゲートを改変して、共有のポインタ セマンティクスを使用するようにしました。
* Behavior Tree のデフが逆である問題を修正しました。
* ランドスケープの作成をアンドゥした後にランドスケープ エディタ モードが無効になる問題を修正しました。
* ランドスケープ エディタのランドスケープ ドロップダウンが、アクティブなランドスケープに適合するように更新しない問題を修正しました。 
* フォリッジによって使用されるメッシュを強制的に削除した場合にクラッシュする問題を修正しました！注意: それでもあまりよいやり方ではありません。
* フォリッジが、半透明および「コリジョンなし」のメッシュに配置される問題を修正しました。
* Orthographic のタイポを修正しました。

**ペルソナ アニメーション エディタ*
* 新規:アセット ピッカーが、リネーム機能をサポートするようになりました。
* 新規:ペルソナの **[メッシュの詳細]** タブで、クロス物理プロパティのための Tweak UI (UI の調整) が追加されました。
* 新規:ユーザーは連続テストをモニタリングし Saved/Automation/Logs にログを格納するトラック履歴の切り替えができるようになりました。  
	* 追跡と表示はデフォルトでは 5 つまでですが、1 から 10 の間で設定できます。
* アニメーションのインポートを修正して、インポートおよび再インポート時に既存のアニメーション カーブを検出してスケーリングすることによって、キーがアクセス不能にならないようにしました。

**Behavior Trees**
* 新規:Behavior Tree ノードがカテゴリ別に分類されました。
* 新規:ビヘイビア ツリー エディタに new node ボタンが追加されました。
* 新規:新たな Behavior Tree のアイコンが追加されました。
* 新規:新たな Behavior Tree Blackboard 型として、 **FRotator** が追加されました。
* 新規:Blackboard が、Behavior Tree エディタ内で編集されるようになりました。
* 新規:改良された Blackboard エディタを追加し、簡単な Blackboard のデバッグ ビューを取り替えました。
* 新規:Behavior Tree エディタのためのユニークなアイコンができました。
* 新規:Blackboard アセットが作りやすくなりました。 - コンテンツ ブラウザの右クリックメニューまたは Behavior Tree エディタ内部から可能になりました。
* Behavior Tree ノードが、アンドゥ後にピンク色になる問題を修正しました。
* Behavior Tree の root ノードを修正して、正しいツールチップが表示されるようにしました。

**シーン アウトライナー**
* 新規:ダブルクリック イベントが親ウィジェットまで波及しないようにする機能を追加しました。
* 新規:シーン アウトライナーのフォルダの展開された状態が保存されるようになりました。
* シーン アウトライナーの非アクティブ状態が、ハードコードされたものからではなく、メインの選択状態から得るようにしました。
* アウトライナーのフォルダのための展開状態が、ユーザー別の一時 config ファイルに保存されるようにしました。

**スタティック メッシュ エディタ** 
* 新規:スタティックメッシュ エディタが、Box/Sphyl (ボックス/球状) を作成し、操作可能なマルチ コリジョン プリミティブをもてるようになりました。
* Sphere (球体) コリジョンを修正して、**BuildScale** を適用するようにしました。
* Ctrl+W の動作を修正して、選択された物理ボディをコピーするようにしました。

**マテリアル エディタ**
* 新規:何の機能もしないプレビューを有するマテリアルノードは、デフォルトで折りたまれるようにしました。
* non-weight blending を使用する場合の LandscapeLayerBlend マテリアルノード修正しました。**LB_AlphaBlend** を使用するこれまでのコンテンツは、自動的に **LB_WeightBlend** を使用するように更新されます。また **LB_AlphaBlend** が、non-weight のレイヤのために標準のアルファ ブレンディングを実行するようになります。
* マテリアル式ノード scene color が白ベタを返す問題を修正しました。
	* 新たなコンパイルエラーとして「Only 'surface' material domain can use the scene color node (この scene color ノードを使用できるのは、マテリアル ドメインが surface の場合だけです)」を導入しました。

**タイル化されたランドスケープ**
* 新規: weight-blended のレイヤのためのオプションを追加しました。
* 新規:タイル化されたランドスケープ (ハイトマップ、ウェイトマップ) の再インポート機能を追加しました。再インポートのオプションは、ロードされて選択されたレベルのコンテクストメニューに置かれています。

#### スレート 
* 新規:**複数のラインのテキスト編集** がサポートされるようになりました！
	* **SMultiLineEditableText** と **SMultiLineEditableTextBox** を追加しました。
	* これらは **SEditableText** と **SEditableTextBox** の機能パリティを備えていますが、開発中でもあるので、API の変更が必要となることも考えられます。

#### ブループリント
* 新規:**SplineComponent** と **SplineMeshComponent** がブループリントで使用できるようになりました。
	* レベルで **SplineComponents** を編集できる機能が含まれます。
* 新規:汎用の Array Shuffle をブループリント配列ライブラリに追加しました。
* 新規:ワイヤを整理しやすくする Reroute ノードを追加しました。
	* ピンをクリックしてドラッグすると、コンテクスト メニューに Add Reroute Node... (再ルーティング ノードを追加) が表示されるようになりました。通常通りに、再ルーティングのピンを接続させたり、(近くでドラッグするか ピンを Ctrl + ドラッグ することによって) いろいろ動かしたり、 Alt + クリック することによって削除することが可能です。  
	* ノードの下側のドラッグ可能な領域でダブルクリックするか、F2 を押せば、Reroute ノードにコメントを入れることもできます。
* 新規:Math Expression (数式) ノードをブループリントに追加しました (もはや「実験的」ではありません)。テキストの数式を入力すると、一連のノードに変換されます。
* 新規:**Find in Blueprints (ブループリントで検索)** 機能が作り直されて、より良い検索結果が得られるようになりました。また、マルチスレッド化されました。
* 新規:ブループリントが無限ループを発見すると警告を出すようになりました。ダイアログが表示され、原因となったブループリントをお知らせします。 
* 新規:ブループリント ノードにおいて、struct (構造体) のピンが、そのコンポーネント要素に分解できるようになりました。この機能を利用するにはノードを右クリックします。
* 新規:ブループリントから、特定のコンポーネントまたはアクタをシーン キャプチャで非表示にできるようになりました。コミュニティのメンバーである Neo 氏と bigzer 氏に感謝いたします。
* 新規:ブループリント エディタの起動中に検査を行うようにして、現在のプロジェクトがブループリントベースなのかコードベースなのかを判定できるようにしました。
* 新規:ブループリント エディタの詳細タブにある Pin/Variable Type メニューにおいて、サブツリーが空の場合は非表示になりました。
* 新規:親ブループリントまたはネイティブ クラスのコンポーネントに付属しているコンポーネントが子ブループリントに含まれている場合、子ブループリントはロード時にダーティーとしてマークされなくなりました。
* 新たに作成されたアセット (インターフェイス、関数ライブラリ、マクロライブラリ) のためのデフォルト名をアンリアル・エンジン 4 が生成する方法を変更しました。
* 1 個以上の子ブループリントをともなったブループリントをコンパイルした後に行われる UI のリフレッシュ処理が重複していたため変更しました。(全体的なブループリントのコンパイル時間が短縮されました。)
* ロード時のコンパイル中にインターフェイスをリフレッシュするとクラッシュする問題を修正しました。
* ある親クラスからある変数を削除して、さらに、そのクラスに基づくブループリントでその変数を再生成するとクラッシュする問題を修正しました。
* インスタンスが Construction Script から追加された場合に、インスタンス化されたスタティックメッシュのコンポーネントを選択するとクラッシュする問題を修正しました。
* ブループリント エディタ内においてコンポーネント モードで親と子のノード両方を選択した場合に生じる「ジッター」的な変換を修正しました。

#### レンダリング
* 新規:**Screeen Space Reflections (スクリーン空間の反射)** のためのビジュアルとパフォーマンスの調整を可能にする **VisualizeSSR** 表示フラグを追加しました。
* 新規:全シーン ディレクショナル シャドウ GPU の最適化
	* ステンシルではなく深度限界テストを使用します (使用可能な場合)。GTX780 の GPU の約 0.1 ミリ秒分を節約します。
* 新規:低パフォーマンスのデバイス (特にモバイル デバイス) を制御する **r.RefractionQuality** を追加しました。(iOS、Android、HTML5 についてはデフォルトで無効になっています)
* 新規:Speedtree v7.0 の統合
* 新規:ShowLayer コマンド - レイヤ内の任意のメッシュのビジビリティを切り替えることができます。
* 新規:スタティック スカイライトおよびステーショナリー スカイライトで 1 バウンスのディフューズ GI が Lightmass によって計算されるようになりました。
* 新規:半透明のマテリアルがステーショナリー ライトからシャドウイングされるようになりました。
* 新規:MSAA がモバイル レンダリング パスにサポートされるようになりました。
* 新規:クリアコート シェーディング モデルを追加しました。
* 半透明に関して屈折のオーダーを変更しました。(非セパレートの半透明が屈折するようになりました。外見を変更できます。)
* **LensFlareIntensity** プロパティのデフォルトの設定値を 0 (オフ) にして、始めからパフォーマンスの高い状態にするとともに見栄えもきれいにします。元の見栄えに戻したい場合は、1.0 にセットすることができます。
* Screen Space Reflections (スクリーン空間の反射) のデフォルトのクオリティを低から始めることにより、パフォーマンスを優先させています。ポストプロセスの設定項目でこれまでのような設定に戻せます。
* distortion (歪み) が半透明のオブジェクトで適切に機能しない問題を修正しました。
* **ScreenSpaceAmbientOcclusion** (が適用されなくなる) 問題を修正しました。
* ポイントライトとスポットライトでエクスポーズされている Shadow Bias が無効である問題を修正しました。レガシー値を削除しました。
* Owen マテリアルが非常に薄い問題を修正しました。
* **Affectsindirectlight** チェックボックスを使い、LPV を有効化しないとクラッシュする問題を修正しました。
* 誤ったリフレクション キャプチャのフィルタリングを修正しました。
* Temporal AA がオフの場合に生じる SSR ノイズを修正しました。
* デバイス上で ES2 のための Canvas Material レンダリングの変形について修正しました。
* Clamped Material (クランプされたマテリアル) ノードの入力が、負のカラー、NaN、一貫しないシェーディングを回避するように修正しました。これを使って、以前は非物理カラー範囲に依存していた半透明のマテリアルの見栄えを変更することができます。暗すぎるパーティクルは、Emissive の出力を使って修正できます。

**可動スカイライト**
* 新規:新たな機能のディスタンス フィールド アンビエント オクルージョンを使用して、動的に変化できるシーンのメッシュからオクルージョンを供給できるようになります。

#### ゲームプレイとフレームワーク
* 新規:Anim Trails がブループリントから使用できるようになりました。詳細はドキュメントをご覧ください。
* 新規:**SErrorText** ウィジェットにフォント属性を追加しました。
* 新規:Navmesh (Recast/Detour) が UE4 のモジュールに移動しました。ターゲットのビルド設定にある bCompileRecast フラグに応じて自動的にプロジェクトに加えられるようになります。
* 新規:**DetourCrowds** に基づいてクラウドのシミュレーションを追加しました。
	*CrowdFollowingComponent (PathFollowingComponent の代わり) とともに AIControllers によって使用できます。
	*カスタム ベロシティ (移動速度) のサンプリング パターンをサポートしています。
	*Detailed per agent config. エージェントの config によって詳細を記述します。
* 新規:UBT XML の設定の改善:
	* XSD 主導のインテリセンス
	* コードから読み取られる初期値 (デフォルトの XML ファイルは、あるべきものと異なる場合に UBT 起動時に再生成されます)。
	* 設定可能なフィールドに、XmlConfig の属性による注釈を付けなければならなくなりました。
* 新規:スレッド別に類似性のプロファイルを設定できる新機能
* 新規:FBox2D 型を追加しました。
* 新規:**TActorIteractor** が、探す対象のアクタ クラスを取れるようになりました。
* 新規:**ArrowComponent** のレンダリングを最適化しました。
* 新規:アンリットされたマテリアルをスレートとともに使用できる機能を追加しました。マテリアルは、任意のブラシのタイプで使用できます。また、動的マテリアルのための新たなブラシのタイプ (**FSlateMaterialBrush**) ができました。
* 新規:* エディタが最小化されると、CPU の使用量が著しく削減されるようになりました。エディタがフォアグランドではないけれども見える状態になっている場合でも、この削減が適用できる設定を追加しました。
* 新規:フォリッジからスタティック シャドウを落とす機能をサポートしました。
	* **注記**:ただし、フォリッジのシャドウイングまたはスタティック光源処理はサポートされていません。
* 新規:Skel Vert/Surf Location モジュールを使用するパーティクルが、 **Inherit Vertex Color** プロパティを使用するメッシュの頂点からカラー情報を継承できるようになりました。
* 新規:古いシェーダーのコンパイル ジョブが、コンパイル キューから削除されるようになります。多くの場合、これによって、コンパイルされるシェーダーの数が大幅に削減され、マテリアルエディタのワークフローが改善されます。
* 新規:Windows (Visual Studio および DirectX DLLs) 上で UE4 を動作させるための Windows Redistributable prerequisites (再配布可能条件) が、Engine\Extras\Redist\en-us\UE4PrereqSetup.msi のスタンドアロン インストーラーで利用できるようになりました。
* 新規:API の互換性を判定するために、「API のバージョン」チェンジリスト番号が **UnrealBuildTool** によってエディタのモジュールに埋め込まれるようになりました。Windows RC ファイルにカスタムの VERSIONINFO セクションを含める必要がなくなりました。
* 新規:IDE プロジェクト生成が、エンジンと同一のルートで作成された国外プロジェクトについて正しく機能するようになりました。
* 新規:文化が変更されて、連結された **FText's** がリビルドされた場合でも、 **FText's** が再生成できるようになりました。
* 新規:圧縮され暗号化された .pak ファイルを保存できるようになりました。そのためには、UnrealPak 応答ファイルの中でファイルに -compress または -encrypt を追加します。あるいは、-compressed を UAT に渡します。
* 新規:アニメーション評価をグラフ タスクとして実行して、ワーカースレッド間で負担を分配できるようになりました。
* 新規:**コンテンツブラウザ**ボタン (find in [~で探す]、use from [~から使用する]) を、スケルタルメッシュ詳細パネルの **Animation ブループリント**セレクターに追加しました。
* 新規:モンタージュのブレンドアウト/エンディングのためのブループリント イベントを追加しました。
* 新規:詳細パネル/プロパティ マトリックスからサムネイルの情報を編集できるようになりました。
* 新規:Functional Testing フレームワークが改装され、多数の機能が備わるとともに、Unreal Frontend の Automation との完全な互換性をもつようになりました。
* 新規:**Max Threshold (最大閾値)** が、Passive Sound Mixes のために指定できるようになりました。OEM キーが、FKeys としてバインドできるようになりました。プラグインが追加されて、Mod Tracker ファイル (StreamTracker、ImpulseTracker など) をエディタにインポートして再生できるようになりました。
* 新規:コードおよびブループリントのための横スクロール テンプレートを追加しました。実験的な paper プラグインを使用します。
* 新規:**スプライン コンポーネント** ビジュアライザーの改善点: タンジェントが編集できるようになりました。アンドゥ/リドゥをサポートしました。右クリック コテンツ メニューでセグメント タイプを定義できるようになりました (カーブ、リニア、コンスタント)。エンドポイントが任意で、タンジェントを持たないものとして指定できるようになりました (固定)。 
* 新規:ブループリント インターフェイスに新たなメソッドを追加しました。
* 新規:Box Sweep をブループリントにエクスポーズしました。
* 新規:モーターのために Twist および Swing モードを追加しました。
* 新規:コンストレイントの制限とタイプをブループリントにエクスポーズしました。
* 新規:デフォルトの Terminal Velocity をプロジェクトの設定項目に追加しました。
* 新規:ポリゴン単位のスケルタルメッシュ コリジョンのクエリが利用できるようになりました。
* 新規:両面フラグをエクスポーズして、両面ジオメトリでシーンのクエリを可能にしました。
* 新規:RHI からネイティブのデバイスへアクセスできるようにしました。基盤となるデバイスを使用して直接レンダリングしようとするサードパーティのプラグインに便利です。現在のところ、D3D11 のためにエクスポーズされています。CoherentUE4 による GitHub のプルリクエスト 199 に基づくものです。
* 新規:Overlap / Touch 通知が、コンポーネント移動中にヒット通知をブロックする前に処理されるようになりました。
* 新規:前のイベントが破壊のためにアクタまたはコンポーネントをマークする場合、オーバーラップのレポートを必ず中止します。
	* スイープの初期に爆発する高速移動の発射物、および、スイープの後半でオブジェクトとのオーバーラップをレポートすべきではない高速移動の発射物といったケースで、誤ったオーバーラップを防止します。
* 新規:**Character Movement Component** のために、フレーム当たりの最大シミュレーション イテレーションと最大シミュレーション時間の制御をエクスポーズしました。
* 新規:歩行モード中に、**CharacterMovementComponent** の通常の更新および強制的なフロアの更新以外で、位置の変化を自動検出します。
* 新規:**CharacterMovement** 落下モードで、 **PhysicsVolume** の terminal velocity (終速) が、重力方向 (下向きと想定されています) にのみ適用されるようになりました。
	* これまでは、terminal velocity が速度の大きさ全体を制限していましたが、これは誤りでした。
	* 今は、加速度への貢献を制限するようになりました。終速を超える初速が認められますが、更なる加速は適用されません。
* 新規:キャラクターがデフォルトで泳げるようになりました (NavAgentProps で bCanSwim = true とします)。
* 新規:物理の penetration (貫通) の処理を改善しました。penetration 時にレポートされる法線を改善します。
* 新規:**Proxy Mesh** ツールが、別のパッケージでアセットを作成するようになりました。
* 新規:**Proxy Mesh** と **Merge Actors** ツールが、作成されたアセットのために、より一貫性のある名前を使用するようになりました。(demolet 命名規則)
* 新規:新たな Axis (軸) と Action (アクション) の Mappings (マッピング) が、必ず、一意の名前をともなって作成されるようになりました。これによって、いっしょにグループに入れられなくなります。
* 新規:**SoundWave** Compression Quality (圧縮クオリティ) を変更して、インタラクティブなプロパティの変更中に再コンパイルしなくなるようにしました。新たな圧縮の設定値は、次回サウンドが再生された時に聴くことができます。
* 新規:アセットとしてワールドを扱うためのサポートに注力しました。ワールドは、将来コンテンツブラウザで管理されるようになります。
* 新規:コンテンツブラウザのパフォーマンスについて多数改善し、コードを整理しました。
* 新規:サードパーティのモジュールに代わって、Recast が正規の UE4 モジュールになりました。
* 新規:車両の車輪ボディが、PhAT 内部でキネマティックとして設定される必要がなくなりました。デフォルトのままで自動的に機能するようになります。
* 新規:パーティクルエフェクトをともなう被破壊性メッシュが、サブステップ機能とともに使えるようになりました。
* 新規:**UShapeComponent** をエクスポートする DLL。**UPrimitiveComponent** と **UShapeComponent** のいくつかのサブクラスは、すでにエクスポートされているので、 **UShapeComponent** がエクスポートされてはならない理由はありません。
* 新規:ゲームのビューポートが、エディタ ビューポート内の PIE でも、**GetGameViewportWidget** から正しく返されるようになります。
* 新規:平坦化プレビューのグリッド表示のオン/オフを切り替えるためのチェックボックスを追加しました。
* 新規:ランドスケープの Ramp ツールのスプライトに動的なスケーリング機能を追加しました。小さな傾斜で邪魔にならないようにします。
* 新規:負のランドスケープ ストリーミング距離乗数によって生じるクラッシュを防止しました。
* 新規:**MergeActors** ツールのためのオプションのダイアログを追加しました。
* 新規:フォリッジのペインティングのパフォーマンスを改善しました。
* 新規:ピンで留められたカメラのプレビューをもつカメラを選択すると、そのプレビューが強調表示されるようになりました。
* 新規:新たなアセットとフィルタのためにブループリントのカテゴリを作成しました。
* 新規:タグの辞書が、DefaultEngine.INI ファイルから、モジュール起動中にロードされるようになりました。また、複数の辞書が可能になりました。
* 新規:**GameplayTag** のカスタマイゼーション。詳細パネルでタグの編集が可能になります。
	* ブループリントの **Gameplay Tag Variables (ゲームプレイ タグ 変数)** のデフォルト値を詳細パネルで設定できるようになりました。
* 新規:ランドスケープが両面シャドウを投じることができるようにするフラグを追加しました。
* 新規:Basic In App-Purchase (基本アプリ内購入) がサポートされました。
	* これが現時点でプログラムから利用できる唯一のものです。ブループリントノードによるより良いサポートが今後予定されています。
* アンリアル・エンジン ランチャーのインストーラーを改良して、いくつかの依存関係をスキップできるようにしました。
* エンジン スケーラビリティの低レベルに対応するために、MSAA の設定を変更して、削減または無効化するようにしました。
* フォリッジがデフォルトでデカールを受け取らないようにしました。ユーザーの必要に応じて有効にできるようにするチェックボックスを追加しました。
* レベルエディタのエクスポート機能のデフォルト値を OBJ ではなく FBX にしました。
* ブレンドスペース エディタ内の編集ボックスのポピュレーション コードを変更して、数字がフォーマットされないようにしました。
* Opus のフォーマットを改善して、UE4 特有の使用法のために一意の ID をもつようにしました。
* フォリッジのインスタンスが、ブループリントにより生成されたコンポーネント上に配置されるとクラッシュする問題を修正しました。
* パーティクル システムの矢印コンポーネントが、アクタのスケールに対してスケーリングしないように修正しました。
* ビューポートをカメラアクタにロックさせる機能を修正して、カメラのプロパティが正しく使用されるようにしました。
* ランドスケープのギズモ アクタが、他のアクタにアタッチされる問題を修正しました。
* プレイヤーが下に抜け落ちるランドスケープのコリジョンの問題を修正しました。
* 同じエディタを実行中にペルソナを二度開くとクラッシュする問題を修正しました。
* メッシュをレベルに追加する操作をアンドゥ/リドゥ/アンドゥするとクラッシュする問題を修正しました。
* show floor/sky (フロア/空の表示) がペルソナのモード切り替え後に機能しなくなる問題を修正しました。
* プレイヤーが存在せずに観客だけが存在するとゲームモードによって見なされていたために、 **StartMatch** が呼び出されることがないという、 **ToggleBetweenPIEandSIE** のアカウンティング エラーを修正しました。
* エクスポート時に生じるボーン名の大文字小文字の問題を修正しました。
* ステートマシーンの遷移の作成に関する問題を修正しました。
* アニメーション コンテンツ マップのルート モーション サンプルを修正しました。
* **Distance CrossFade** でフェードアウト中にサウンドが出なくなる問題を修正しました。
* ある種のプラットフォームで生じる、 **SoundWave** メモリと複製された変数に関する問題を修正しました。
* 入力設定プロパティの一貫性のない拡張を修正しました。

#### ライティング
* 新規:コードを追加して、スポットライトの Inner Cone Angle が Outer Cone Angle よりも大きく設定できないようにしました。

#### Oculus
* 新規:Oculus Rift DK2s をそのままの状態で使えるようになりました。Oculus から個別の SDK を直接取り出す必要はありません。
* 新規:Oculus Rift のインテグレーションに LibOVR 0.3.3-pre.1 がサポートされました。直接レンダリングおよびタイムワープ機能も含まれています。

#### アニメーション
* 新規: モンタージュのための Slot ノードについて Group (グループ) をサポート (作業進行中)
	* 複数のモンタージュを同時にサポートする取り組みです。この機能によって、モンタージュをグループ毎に再生できるようになります。スロット単位でグループを割り当てることができます。 
* 新規:**SetAnimClass** というブループリント関数の名前を、 **SetAnimInstance** に変更しました。ネイティブのクラス名との整合性を保つための措置です。
* 新規:オーバーライド プレビューが親 Anim Graph を正しく表示するようになりました。
* 新規:新たなアニメーション オーバーライドのサンプルが、Content Examples に追加されました。
* 新規:Timed Particle Effect が正しいエミッタを適切に無効化するようになりました。
* 新規:Notify State が進行中にタイムラインから削除された時に、正しく終了するようになりました。
* 新規:Graph State のデコレーションが、小さいプレビュー ツールチップで表示されないようになりました。
* 新規:アニメーションを低フレーム数で安全にインポートできるようになりました。カーブを分断させることがありません。
* 新規:Anim Graph が、ステートおよびステートマシーン内のサブグラフを正しく削除するようになりました。
* 新規:Branching Point (分岐点) を修正して、モンタージュで移動できるようにしました。

####デバッグ作業
* 新規:ブループリントによってルーティングされているコード内でアサーションが失敗した場合、ブループリントのコールスタックおよびネイティブのコールスタックが表示されて、クラッシュの原因を追及しやすくなりました。

#### LiveEditor プラグイン 
* 新規:Array 内でネストされている Numeric と Object を編集できるようになりました。
* 新規:Remote LiveEdit セッション開始後にスポーンしたオブジェクトも編集できるようになりました。

#### Paper 2D
* 新規:Paper2D Side Scroller Template (横スクロールのテンプレート) を追加しました。(**ブループリントと C++ バージョン** の 2 種があります)
* 新規:4.3 の Paper2D の状態が正しくメッセージされるようにするための、エディタとドキュメンテーションに関する作業。
	* 4.3 の Paper2D 全体が早期アクセスプレビューと考えられています。まだ実稼働対応であるとはみなされませんが、「実験的」レベルを超えたものであり、将来投入されるもののプレビューとして提供されています。
	* スプライトとフリップブックは早期アクセス版です。
	* 2D コリジョン/物理、テレイン スプライン、グループのアトラス化、タイル マップは、 **実験的** です。(可能な場合は、有効化フラグで隠されています)
* 新規:パスの全般的改善とスプライト エディタの改造
	* Source Region (ソース区域) 編集モードを追加しました。これは、より大きなスプライト シートの区域を素早く選択することができるモードです。
	* コンテンツブラウザのテクスチャのためのコンテクストメニューに Extract sprites (スプライトの抽出) コマンドを追加しました。これは、スプライトシート内のバラバラなスプライトをすべて識別して、それらのために別個のアセットを作成するためのコマンドです。
	* ジオメトリの編集時に使用できる mesh edges (メッシュ エッジ) プレビューモードを追加しました。
	* スプライト エディタのビューポートに、スプライト レンダー境界範囲を表示するようにしました。
* 新規:フリップブック エディタの初のリアルバージョン
	* パスの全般的改善と改造
	* フレームの追加/挿入/削除するためのコンテクストメニュー
	* スプライトとフリップブックをタイムラインにドラッグアンドドロップするとフレームが挿入されます。
* 新規:Paper2D スプライトで使用するマテリアルを作成しやすくしました。
	* SpriteTexture という Texture2D Param の簡略形として SpriteTextureSampler マテリアル式ノード を追加しました。
* 新規:スプラインベースの 2D テレイン ツールを **実験的に** サポートしました。
	* テレインのカバールルが、スロープの角度に基づいて、異なるスプライトに適用されます。これらのスプライトは、スプラインに適合させるために変形されます。
	* スプライトのジオメトリをトライアングル化する場合に、不要な頂点がコラプスされないようにするための一時的なオプションを追加しました。
* 新規:ピクセルと Unreal 単位 (uu) の 1:1 関係から離れる **PixelsPerUnrealUnit** を追加しました。
	* 新たなスプライトのデフォルト値を、Project..Paper2D でプロジェクト全体の設定値として設定できるようになります。
* 新規:**UPaperFlipbookComponent** に複数の再生コントロール機能を追加しました。(**UTimelineComponent** からの流用です)。
* 新規:sprite source rect (スプライト ソース矩形) 編集モードを追加しました。
* 新規:テクスチャのコンテクストメニューに extract sprites (スプライトの抽出) を追加しました。
* 新規:フリップブックのために正確なコンポーネント境界を追加しました。
* 新規:ソース テクスチャが初めてセットされた時に、新たに作成された空のスプライトのサイズが自動的に調整されるようになりました。
* 新規:**UPaperSprite::UBodySetup** が simple as complex を使用するようにしました。これによって、複雑なレイキャスト (タッチ/カーソルのクリックなど) が 3D スプライトのコリジョンでも機能するようになります。
* 新規:JSON の「app」タグに関する規制を緩和して、Flash 以外のツールからエクスポートされたスプライト シートをインポートできるようにしました。
* 新規:付加的なデフォルトのスプライト マテリアルの置換を追加しました。
* 新規:クラス/アセットの型アイコンと、スプライトおよびフリップブックエディタのためのスタブ ドキュメンテーションを追加しました。
* 新規:フレームのないフリップブックのサムネイル プレビューが、真っ黒になるのではなく、背景と警告を表示するようになりました。
* **UPaperRenderComponent::GetSocketTransform** のバグを修正しました。これは、スプライトにアタッチされたコンポーネントが、アタッチされていなかのように振る舞うという問題でした。
* スプライトのための 3D 凸型ハル コリジョン生成におけるタイポを修正しました。無効なシェープを生成し、クッキングの失敗の原因となっていました。
* Paper2D における可能なロード オーダーのアサートを修正しました。
* **RF_Transactional** フラグの喪失によって引き起こされる Paper2D に関する問題を修正しました。
* ロード時に古いスプライトを変換した際に生じる断続的な破損問題を修正しました。ブロックによって非同期のテクスチャ データが作成されることが原因でした。
* 新たなフリップブックを編集する場合に生じるレンダリング問題を修正しました。ゼロ和の時間が原因となって、タイム アキュミュレイターが無限となっていました。
* ソーステクスチャが改変された場合に、Show Src Tex (ソーステクスチャを表示) ビューを表示するコンポーネントがリフレッシュされないバグを修正しました。
* 詳細パネルのボタンを使用して、配置されたフリップブックまたはスプライトからブループリントを作成すると生じたクラッシュを修正しました。
* **UPaperSprite::SpriteColor** が無効である問題を修正しました。
* フリップブックのコンポーネントがレンダリンされない問題を修正しました。
* タイル マップ アクタがレンダリングされない問題を修正しました。
* スプライトのレンダリング境界のバグを修正しました。Min > Max となるボックスができていました。

#### 物理
* 新規:初となる **実験的な** Box2D 2.3.1 のインテグレーションを追加し、関連するさまざまな変更を実施しました。これによって、エンジンで 2D 物理が有効化されます。
	* この機能は、完全に未サポートでありドキュメント化されていないプロトタイプです。したがって、十分注意して扱い、生産には使用しないでください。
	* コリジョンの検出、応答 (Unreal コリジョン チャンネル/フィルタリングを含む)、シミュレーション、レイキャストが実装されました。
	* 非ゼロ範囲のクエリ、スイープのテスト、オーバーラップのテストは未実装です。
* 新規:各種コリジョンのルーティンを整理しました。可能な場合は、共通のパスを統合し、PhysXの依存関係を削減/統合しました。
* 新規:**FBodyInstance** のためのデバッグテキストを一般化しました。これによって、単なる **UStaticMeshComponent** に代わって、あらゆる種類のコンポーネントに関連するアセットが与えられるようになります。
* 内部のさまざまなスイープ/オーバーラップ/クエリ ヘルパ メソッド (Geom*) が、PhysX 固有ではなくなり、Unreal 型を取るようになりました。

#### ワールド ブラウザ
* 新規:LOD レベルを生成する場合、生のメッシュにエクスポートするために、ランドスケープ アクタが最大 LOD レベルを使用します。それらのために単純化は実行されません。
* 新規:LOD レベルのジェネレーターが、法線マップをともなったランドスケープのスタティックメッシュを作成するようになりました。
* 新規:LOD レベルのために生成されたアセットが、LOD マップのパッケージ内に格納されるようになりました。
	* ストリーミング レベルを発見する場合、短い名前ではなく長いパッケージ名を使用するようになりました。
	* **STAT LEVELS** に LOD 情報を追加しました。また、これに関連する複数の問題を修正しました。
	* LOD レベルは、サーバーにビジビリティの状態をレプリケートしません。
	* シミュレーション ビュー位置インジケータにローテーションを追加しました。ワールドの境界カラーを赤から黄色に変更しました。

#### エディタとゲームのためにライブ ストリーミングをサポート (作業進行中)
* 新規:ゲームのライブ ストリーミング
	* ゲームの映像およびオーディオをライブでインターネットでストリーミングするための一般的な機能を備えました。
	* ウェブカムビデオの放送が、自動的にゲームのビューポートにオーバーレイすることが可能になりました。
	* 新たな Broadcast ブループリント関数ライブラリによって、ゲームから簡単に放送を開始できるようになります。
	* 新たな **IGameLiveStreaming API** によって、 **C++** から放送を開始できるようになります。
* 新規:ゲームのライブ ストリーミング
	* ライブ ストリーミング サービスが利用可能になると自動的に broadcast (放送) ボタンをエディタの UI が表示するようにりました。
	* すべてのデスクトップ エディタ ウィンドウの放送がサポートされています。([環境設定] で設定できます)
	* ウェブカムがある場合は、映像が自動的に表示され、新たなエディタ ウィンドウで放送されます。
	* 新たな Live Streaming エディタ のための Preference タブには、放送を設定することができる多数の新たな設定項目が入っています。
	* 新たな **IEditorLiveStreaming** API を使えば、必要に応じて、放送を直接制御できます。
* 新規:新たなコマンドとして Broadcast.Start および Broadcast.Stop を追加しました。
	* これらのコマンドによって、UI のコードを書かずに、ゲーム内でライブ ストリーミングを簡単にテストできるようになります。
	* これらの新たなコマンドのためにヘルプがビルトインされています。
* 新規:ライブ ストリーミングのプラグインを実装するためには、次のようにします。
	* 新しい **ILiveStreamingService** インターフェイスから継承します。
	* **IModularFeatures** システムを使って自分の LiveStreaming 機能を登録します。

#### FBX
* 新規:バインド ポーズのインポートに関する問題。バインド ポーズをインポートすることに失敗すると、再作成を試みます。この機能は、バインド ポーズの相対マトリックスが適合しない場合に役立ちます。  
* 新規:convert scene (シーンの変換) オプションを追加しました。Blender のために convert scene (シーンの変換) オプションを追加しました 
* Blender からエクスポートされる FBX ファイルは、正確なシーンデータをもちません。変換すれば機能しません。 

#### オーディオ
* 新規:**NGS2** オーディオ パンニングがサポートされました。
* 新規:NaN、INF、あるいは XAudio の不当に大きい (または小さい) 値に関する詳細な警告を追加しました。

#### プラットフォーム
* 新規:BuildThirdPartyLibs オートメーション スクリプトに、オプションの **-SearchDir=PathToSomething** パラメータを追加しました。これによって、プラグインやその他非標準の場所で TPS ソフトウェアのために使用できるようになります。
* 新規:OS X の open/save ダイアログを使用する場合は、キーウィンドウをトラックおよびリセットしてください。そうでなければ、フォーカスが奪われて戻ってきません。
* 新規:UE4 アプリケーションがフォアグランドになければカーソルを非表示にするようにしました。したがって、他のアプリケーションとともに使用している場合は、カーソルが消えません。
* 新規:わずかなパフォーマンスの向上を得るために、マルチスレッドの OpenGL コンテクストを OS X で使用する場合、glMapBuffer & glLabelObjectEXT の使用を無効化しました。
* 新規:Mac 上で PLATFORM_ENABLE_VECTORINTRINSICS を有効化して、SSE 命令を使用するようにしました。すべての Mac にはこの命令セットがあるからです。
* 新規:動的なメッシュ ビルダーの頂点およびインデックス バッファをプールして、非常に込み入ったプロジェクトにおいて OS X で生じるパフォーマンスの問題を回避しました。 
* 新規:-rpath を使用して @rpath/<libname>.dylib から dylibs をリンクさせることによって、.dylibs を共有することが簡単になり、かつ (または)、Mac の apps にパッケージングすることが簡単になります。
* 新規:LLDB データ フォーマッターを改善しました。コンテナ クラスへの参照とポインタが、子を表示し、FName および FString サマリー文字列にポインタのためにも表示させ、UObject のサマリーのためにオブジェクト名を使用するようになります。
* 新規:**Alt+Enter** からフルスクリーンを有効化する場合は、OS X で WindowedFullscreen を使用します。それによってウィンドウがモニター サイズまでスケーリングされるためです。これだけが現在サポートされている機能です。
「適切」なフルスクリーン モードのためには、明確な CGL バックバッファのサイズ、および、マウス<->ディスプレイ座標の変換が必要となりますが、そのためのコードがまだありません。
* 新規:OS X 上でフルスクリーン モードで高精度マウスモードが使用された場合に、メインメニューバーとドックがあらわになることを防ぎました。
* 新規:OS X 上で、ツールチップおよびその他のウィンドウが最初表示された時に引き伸ばされたり歪んだりする現象を防止しました。
* 新規:Mac では、Edit->Editor preferences メニューの項目が、メニューバーのアプリケーション メニューに移動しました。Help->About Unreal Engine と File->Exit の項目は、アプリケーション メニューにある項目と重複しているため削除しました。
* 新規:Xcode のプロジェクト インデックス化時間について大幅な改善を行いました。
* 新規:Android 、IOS 、HTML5 に対して速度ではなくサイズのコンパイルのサポートを追加しました。 Mac 上で発生する iOS の数多くのバグを修正しました。 
* 新規:File/Cook 、File/Package 、Launch On の基本的な分析を追加しました。
* 修正されたバグ：Unreal Automation Tool と Unreal Frontend の安全性を改善しました。
* OS X において Xcode 5.1.1 を使ってコード ビューで関数を開く機能について修正しました。 
* OS X における AssetTool の diff コマンドの使い方について修正を加えました。名前でアプリケーション バンドルを検索および起動できるようにしました。 
* 異なるコンテクストにまたがる、OpenGL 同期オブジェクトの使用方法について修正しました。異なるコンテクストで使用する前に GPU にフラッシュする必要があります。
* Mac における GL_TIMESTAMP エミュレーションに関するバグを修正し、-EnableMacGPUTimestamp コマンドライン フラグによってオプトインしました。依然としていくつかのドライバーをクラッシュさせるからです。

**Mac**
* 新規:OS X のための非推奨マクロのサポートを追加しました。
	* RadioEffectUnit AU コンポーネントをアップデートすることによって、非推奨の ComponentManager API ではなく、新たな AUPlugIn API を使用するようにしました。
	* AVIWriter をアップデートしました。FEvent を使用することによって、非推奨の finishWriting バージョンを使用せずに、[AVAssetWriter finishWritingWithCompletionHandler:] が完了するのを待つようにしました。
* 新規:Xcode のコンパイラのオプションに配慮して、他のコンパイラも使用できるようにするとともに、analyze (分析) 機能を最小限サポートしました。
	* Xcode で選択されたコンパイラをパースし、デフォルトではない場合に、実行すべき実行ファイルを含む Xcode のプラグインを探します。
	* analyze オプションが有効化されている場合は (スタンドアロンまたはビルドの設定として)、analyze clang フラグを渡す必要があります。
	* Xcode max を渡します。並列ビルドのタスクのデフォルト値は UBT です。CPU の半分を使用しなければならないと単に想定されているわけではありません。
* 安定性とパフォーマンスにおいて多数改善が行われました。

####Playstation 4 
* 新規:PS4 が VS 2013 をサポートするようになりました。
* 新規:libadio3d を使用するポジショナルオーディオ。
* パッケージングのパスを改変して、エンジンではなくプロジェクトに常に置かれるようにしました。また、Shipping (出荷) によって、pkg が適切にアーカイブされるようになります。
* 新規:SDK 1.700.018 にアップデートしました。

**Xbox One**
* 新規:XDK June 2014 QFE 1 にアップデートしました。

**Android**
* 新規:Android のための Distortion (歪み) レンダリング
* 新規:多数のデバイス間での互換性を改善しました。 
* 新規:**FOnlineAchievementsGooglePlay::QueryAchievements** 関数が Android で機能するようになりました。
* 新規:Android の深度バッファの精度を 24 ビットに変更し、Android Platform Setting (Android プラットフォーム設定) を追加して選択できるようにしました。
* 新規:Android タブレットで、ポートレート限定の向きを可能にしました。ただし、そのままでランドスケープの出力を行うデバイスではランドスケープが強制されます (NVidia Shield、Google TV、Kindle Fire TV、Ouya)。
* 新規:パッケージングによって生成される Android APK のためのインストール バッチ ファイルが、ADB に渡すためのオプションのデバイス シリアル ナンバーを受け取るようになりました。
* 新規:エンジンが起動時により適切な EGL を選択するようになりました。これによって、比較的新しい Android デバイスにおけるパフォーマンス問題が修正されます。
* 新規:Android のインストール バッチ ファイルのエラー処理を改善しました。(アドバイスが出力されます)
* 新規:関数のシグネチャを表示する Android Stack Walking を追加しました。オフラインで addr2line ツールを使用して、アドレスを表示しながら、正確なソースファイルと行番号を取得できます。
* 浮動小数点のレンダーターゲットをサポートしていない Android デバイスでクラッシュする問題を修正しました。
* 半精度テクスチャをサポートしていない Android デバイス上でサンプルゲームのテキストが失われる問題を修正しました。

**iOS**
* 新規:Windows から iOS へのデプロイ。(コンテンツ オンリーのプロジェクトが対象。C++ のプロジェクトは対象外。)
* 新規:Metal API のサポート (Xcode 6 beta でコンパイルした場合) 
	Metal はデフォルトでは有効になっていません。ゲームの Project Settings (プロジェクトの設定) で有効化できます。
* 新規:iOS のための Distortion (歪み) レンダリング
* 新規:iOS で再生するデフォルトのムービーを追加しました。
* 新規:iOS のための Tapjoy プラグイン。
* 新規:新たな PVRTexTool にアップデートしました。これはデフォルトでは低速になっています。新たな Cooker セクションのProject Settings にクオリティの設定項目を追加しました。(0 は最高速。4 は最低速。)
* 新規:モーションをキャリブレートするためのブループリント ノードを追加しました。iOS デバイスのために実装しました。
* 新規:最初のレンダリングまで表示され続ける、iOS 用スプラッシュ スクリーンを追加しました。
* iOS における four-finger-console を改善しました。(履歴を適切に保存/読み込みします。コマンドを整理して最後に使用されたものが先頭に来るようになります。)

**HTML5**
* 新規:HTML5 をアップデートして、GitHub のビルドの Launch On と File/Package から使用できるようにしました。
* 新規:HTML5 のためのオンザフライによるクッキング - ほとんどが機能しています。 
* HTML5 について、さまざまな修正を行い、エディタのワークフローの改善しました。 
* HTTP 通信に関する問題の修正。

#### ネットワーク
* 新規:ネットワーク オブジェクトの非同期読み込みをサポートしました。
* 新規:UBT を改変して、アセットをデプロイする必要があるサードパーティ製フレームワークの使用を可能にしました。
* 新規:複製された FRotator の精度を増しました。
* 新規:Net GUID の管理全体について改善しました。
* 新規:サブオブジェクトの Net GUID の管理について改善しました。
* 新規:スパムをサーバーに送信しているクライアントの接続を切るためのチェックを緩和しました。
* 新規:ネットワーク プロファイラを改善しました。
* シームレスの移動が起きるたびに Net GUID で生じるメモリリークを修正しました。
* クライアントとは関係のない クライアント RPC を呼び出すオブジェクトがコールを受け取ってしまうケースを修正しました。

###既知の問題
* マーケットプレイスからプロジェクト名からスペースを除去しなければ、ダウンロードされたコードサンプルが iOS にデプロイされない。
* ファイルパスにスペースがあると、プロジェクトが Xbox One のためにパッケージングされない。
* Config/DefaultGame.ini の ProjectID が同じではない場合、個別にダウンロードされた ShooterGames が接続できない。配布された同じビルドを使用すると、プレイヤーは正しく接続できる。
* Editor Preferences から Enable Window Animations (ウィンドウ アニメーションを有効化する) オプションを有効化した場合、メニューウィンドウが開かない。回避策: Engine\Config\BaseEditorUserSettings の bEnableWindowAnimations を false にセットしてください。


## API アップデート メモ

#### エディタとツール
* **CharacterMovementComponent** に **AddForce** を追加しました。
* 新たなクラス メタデータの **Experimental** と **EarlyAccessPreview** を追加しました。これらは、アクタの詳細パネル内にある警告セクションをトリガーするものです。
* **ISourceControlProvider** に **CanCheckIn()** を追加しました。
* エディタのモード ツールをリファクタリングして、複数の **FEditorModeTools** インスタンスを使用可能にしました。
* 非推奨の API がまだ置かれていて、ある程度機能していますが、次回リリースで削除される予定ですので、ご自分のコードをアップデートしてください。
* GEditorModeTools の名称が **GLevelEditorModeTools** に変更されました。レベルエディタ モードにのみ適用されることを示すためです。
* モードの登録および作成が **FEditorModeRegistry** によって処理されるようになりました。モードは、モードのインスタンスを使って登録されるのではなく、そのタイプの新たなモードを作成することができるモード ファクトリを使って登録されるようになりました。非推奨の API を使用している場合はアップデートすることによって、 **FEditorModeRegistry** を使用するようにしてください。
* エディタモードが、FLevelEditorViewportClients ではなく FEditorViewportClients で動作するようになりました。
* 既存の UMG アセットはすべて破棄されなければなりません。そのためのアップグレード パスは提供されていません。
* **LB_AlphaBlend** モードを使用している **LandscapeLayerBlend** マテリアルノードをともなったマテリアルが、自動的に、 **LB_WeightBlend** にアップデートされます。LB_WeightBlend は、ウェイトベースのブレンディングを行う場合により正確な描写を行います。必要な場合は、実際のアルファ ブレンディングを実行する新たな **LB_AlphaBlend** がありますが、これまでの動作が望ましい場合は、 **LB_WeightBlend** を使用すべきです。
* PlatformInfo を **DesktopPlatform** に追加しました。また、エディタの Supported Platform UI (サポートされているプラットフォームの UI) を改善しました。
* **CachedAutoWrapTextWidth** が Tick() ではなく OnPaint() でキャッシュされた理由を説明するコメントを追加しました。
* 主要なアセット エディタのコンセプトを、アセット ツールキット マネージャーに追加しました。
* プロジェクト ブラウザにカスタムのカテゴリを再度サポートしました。
* EnginePrivate.h からすべてのアニメーション クラスを削除するとともに、それらのファイルを編集して依存関係のみが含まれるようにしました。
* 「Graph is linked to object(s) in external map」(グラフと外部マップのオブジェクトがリンク) というダイアログを変更して、単一の OK ボタンを持つようにしました。
* **GC TokenIndex** が、非出荷ビルドで追跡できるようになりました。これによって、その起点を簡単に識別できるようになります。
* **UBlueprints** に新たな **BlueprintCategory** プロパティを追加しました。これを使うと、 **右クリック** パレット メニューで Behavior Tree ノードをカテゴリに分けることができます。
* **TriangulatePoly** にオプションを追加して、同一直線上にある点が破棄されないようにしました。(後に変形されるものや特定のディテールを保持する必要があるものなどを分割する場合に役立ちます。)
* 基本クラスの **SCommonEditorViewportToolbarBase** を作成しました。通常のオプション、ビュー、表示、トランスフォーム バーなどが備わっています。他のビューポート内エディタ ツールバーのセクションが拡張されて作成される場合の親クラスです。
* **UFactory::GetDefaultNewAssetName** を追加して、作成中にアセット名の生成をカスタマイズできるようにしました。
* create リンクからの新たなリッチ ツールチップの引用を作成する場合の、ソース管理の checkout または add を追加しました。
* **UFactory::CanCreateNew** を追加して、 **bCreateNew** を protect されたメンバーにしました。
* **FFindFloorResult** に ENGINE_API を追加し、 **UCharacterMovementComponent::DoJump()** に付加的な **bConstrainToPlane** 条件を追加しました。
* **CharacterMovementComponent**:不正確な領域のサイズを使用した水のレイキャストに関するバグを修正しました。
* **CharacterMovementComponent**:物理オブジェクト上のベースの動きに関する問題を修正しました。(1 フレーム遅れるバグはなくなりました。)
* **Controller::LineOfSightTo()** をブループリントにエクスポーズしました。
* Character Movement Component 内で **AddMomentum** を **AddImpulse** に変更しました。
* コンテンツ ブラウザを修正して、パッケージのダーティな状態が更新された場合にリフレッシュされるようにしました。
* move/save の回転軸のオプションを修正して、ブラシが正投影のビューポートでのみ利用できるようにしました。
* **GCycleStatsShouldEmitNamedEvents** を修正して、正しく有効化/無効化できるようにしました。
* Play In Editor in New Window (新たなウィンドウで Play In Editor) を修正して、r.FullScreen が 1 になっている場合に、解像度のリクエストを尊重するようにしました。
* スケーリングされたジオメトリが複製された場合のアンドゥおよびリドゥを修正して、ブラシがデフォルトのスケールに終わらないようにしました。
* 不正な **MapCheck_Message_WorldTraceBlocked** メッセージを削除しました。
* けっして呼び出されることがない不正なメソッド **PostScriptCompile** を削除しました。

**ランドスケープ** 
* すべてのランドスケープ コリジョン コンポーネントを再作成する **RecreateLandscapeCollision** コマンドを追加しました。

####ブループリント
* **UCanvas** にブループリント API が備わりました。

#### ゲームプレイとフレームワーク
* **エンジンのヘッダに関する重要な変更**
	* ゲームのコンパイル時間を削減するために、Engine.h からかなりのヘッダを削除しました。これまで削除したクラスは、ゲーム プロジェクトによって使用されなさそうなものに限られていますが、コンパイル エラーが発生した場合は、追加のヘッダをインクルードする必要があるかもしれません。
	* Slate.h が Engine.h に含まれなくなりました。Slate を使用している場合は、ご自分で含める必要があります。
	* EnginePrivate.h が、エンジンモジュールに対して private になりました。外部で使用しないようにしてください。
* API および動作を変更するデータ ストレージにおいて、Gameplay Tags が大幅にリファクタリングされました。
* 任意の低レベル UProperty 型をカスマイズできる機能を追加しました。IStructCustomization インターフェイスが IPropertyTypeCustomization インターフェイスに置き換えられました。特に構造体に関係するカスタマイゼーションのための機能はすべて、非推奨になりました。ただし、今回のビルドでは機能したままとなります。
*.Build.CS ファイル内で、UEThirdPartyDirectory がサポートされなくなりました。UEThirdPartySourceDirectory に置き換える必要があります。このことに配慮せずにビルドしようとするとエラーメッセージが表示されるようになります。
* **UBodySetup::GetPhysMaterial()** に ENGINE_API を追加しました。
* FBox::**TransformBy()** を最適化しました。
* **CharacterMovementComponent** に IsWalking ヘルパを追加しました。
	* **IsMovingOnGround()** と同等のものです。
* タグが明示的には FNames ではなく FGameplayTags となりました。
* FGameplayTagContainer は、階層のすべてのタグではなく「葉側に最も近い」タグのみを保持します。例をあげると、リファクタリング前は、ユーザーがタグ Root.Child.Leaf を保存するコンテナを指定すると、コンテナには、別々のタグとして、Root、Root.Child、Root.Child.Leaf が入りました。このため、ある種の比較を行う場合に論理的な問題が生じていました。今後、この例のコンテナであれば、明示的に Root.Child.Leaf タグのみを保持するようになります。親タグは一切含まれなくなります。API はこれに応じて変更され、親が含まれているタグまたは含まれていないタグに対してクエリをかけます。
* ゲームプレイタグは既存のデータドリブンの辞書内に置くことになりました。オンザフライでコード内に個別に作成することはできません。コードは辞書からタグを要求することはできますが、それ自体でタグを明確に作成することはできません。この変更により照合が可能になり、コードが使用しているタグがエディタ内で確実に表示もされるようになります。
* EdGraph.cpp の non-EdGraph.h タイプを分割して個別のファイルにしました。
* **UKismetSystemLibrary::GetDisplayName** を変更して、コンポーネント上で **UActorComponent::GetReadableName** を使用するようにしました。
* ヘルパ関数 **GetSimulationTimeStep** (float RemainingTime, int32 Iterations) を追加しました。これは、合計残り時間と現在のイテレーションを所与として時間ステップを計算するものです。
	* 最終イテレーション中に、時間ステップの制限内に十分な時間がない場合、すべての残り時間が使用され、警告が記録されます。
* ストリーミングされたオーディオ チャンクのためのストレージを追加しました。これは、実行時のストリーミングのためのもの、または、エディタの DDC からのものです。
* ブループリントにエクスポーズされたヘルパ関数を追加しました。これは、BlueprintGameplayTagLibrary のタグ/コンテナとインタラクトするためのものです。
* Default Engine.ini で、[GameplayTags] セクションを宣言し、タグのテーブルを GameplayTagTableList に追加します。
	* たとえば次のように。+GameplayTagTableList=/Game/DataTables/GameplayTagTable.GameplayTagTable.
* Gameplay Tag Pin  (ゲームプレイ タグ ピン) を変更して、単一の選択のみが可能となるようにしました。
* 有効化されたプラグインのリストが、各ゲームの .uproject ファイルに保存されるようになりました。エンジンの config ファイルの EnabledPlugins リストは使用されなくなりました。
	* ゲームのプラグインがデフォルトで有効化されるようになりました。
	* エンジンのプラグインを有効化するためには、エディタのプラグイン ウィンドウを使用するか、次のようにゲームの .uproject ファイルにあるプラグイン リストを手動で編集します。
	* プラグイン[ { "Name": "LiveEditor", "Enabled": "true" } ]
	* デフォルトでエンジンのプラグインを有効化するためには、プラグインの .uplugin ディスクリプタで、EnabledByDefault を true にセットします。
* エディタ内の Packaging 設定項目が、プロジェクトのコンテンツがあるディレクトリからの相対パスという形で、additional directories to cook (クックすべき付加的ディレクトリ) を格納するようになりました。
	* この機能を使用する場合は、パスを更新する必要があります。
* ナビゲーション AI コード以外のコードはすべて、別のモジュールの AIModule に移動しました。
	* エンジンレベルの AI クラスを使用するコードにいくつかヘッダをインクルードする必要があるかもしれません。 
* ワールドブラウザが、実験部門から除去され、デフォルトで有効化されました。古いレベルブラウザの代わりとなります。古いレベルブラウザは、-oldlevels 起動パラメータを使用するとまだ起動することができます。ワールドブラウザのビューは、3 つの独立したビューに分離されました。各ウィンドウはレベルブラウザのツールバーから呼び出すことができます。ワールドブラウザ管理のワールドは、WorldSettings -> bEnableWorldComposition から切り替えられるようになりました。有効化されると、パーシスタント レベルがワールド root として扱われるようになります。worldcompostion パラメータによる回避策はなくなりました。Open World コマンドが削除されました。world composition オプションで保存されたレベルはすべて、Open Level コマンドから開くことができます。WorldSettings に bEnableWorldOriginRebasing パラメータを追加しました。これは、world origin shifting (ワールドの原点の移動) を使用するか否かを制御します。
* FString::IsNumeric() が、数字列の先頭にある + を受け入れるようになりました。
* TMap::RemoveAndCopyValue と TMap::FindAndRemoveChecked が、最適化として、コピーする代わりに値を取り除くようになりました。
* FText を movable (移動可能) にしました。
* Swap() が、デフォルトでコピーではなく移動を主眼にして実装されました。
* 変数 UPrimitiveComponent::CanBeCharacterBase と UPrimitiveComponent::CanBeBaseForCharacter() の名前を、それぞれ、CanCharacterStepUpOn と CanCharacterStepUp() に変更しました。
	* UCharacterMovementComponent::StepUp() が、CanStepUp() によって着地サーフェスをチェックして、false であれば拒否して、より高いところにステップするようになりました。
* 選択したストリーミング レベルのための詳細パネルをレベルブラウザが呼び出させるようになりました。詳細パネルを使用して、レベルの変形、ストリーミング ボリューム、その他ストリーミングの設定を管理できます。
* **FStatusMessageContext** の名前を **FScopedSlowTask** に変更しました。その機能がずっと分かりやすくなりました。
* **CharacterMovementComponent**:CalcVelocity() と GetMaxJumpHeight() をブループリントにエクスポーズしました。
* レベル ストリーミングから内部のワールド処理を削除しました。
* InstancedStaticMesh/Foliage が、インスタンス単位データのコンポーネント変形に関連付けて保存するようになりました。
* OVERRIDE と FINAL マクロをキーワード override と final に変更しました。マクロの使用は非推奨になりました。
* checkAtCompileTime を static_assert マクロに変更しました。checkAtCompileTime の使用は非推奨となりました。
* DependsOn をコードから削除しました。DependsOn の使用は禁止になりました。代わりに適切な #include. を使用しなければなりません。
* 新規:landscape/foliage ヘッダが Engine.h から削除されました。ランドスケープまたはフォリッジのクラスをコードで参照するためには、適切な includes を追加する必要があります。
* 新規:Puzzle テンプレートでタッチをサポートしました。 
* テンプレートからパズル プロジェクトを作成できるファイルを追加しました。
* ゲーム テンプレートのためのフォルダ構造をリファクタリングしました。Public、Private のフォルダが利用できるようになりました。 
* OnlineBlueprintSupport が LoadStartupCoreModules 中にロードされるようにするコードを追加しました。
* これは、オンライン機能をもつブループリントのみのプロジェクトが正しく動作するために必要なコードです。
	* MovementComponent 関数と speed modifier (速度変更機能) に関連する変数を非推奨としました。これらの関数の使用および古い実装では、代わりに、GetMaxSpeed() と GetMaxAcceleration() を使用し、それらの実装内部で乗数を適用すべきです。あるいは、ベースとなる値を変更すべきです。古い関数は、エンジンによってもう使用されていません。コンパイルを維持するためと、非推奨のメッセージを出すためにだけ存在しています。
	* 関数 UMovementComponent::GetMaxSpeedModifier()、UMovementComponent::GetModifiedMaxSpeed()、UCharacterMovementComponent::GetModifiedMaxAcceleration() を非推奨にしました。
	* 変数 UCharacterMovementComponent::CrouchedSpeedMultiplier を非推奨にしました。
	* MaxWalkSpeedCrouched (しゃがみ込んだ場合の最大歩行速度) を追加しました。古いコンテンツのために、初期値は MaxWalkSpeed * CrouchedSpeedMultiplier (非推奨になりました) です。
	* MaxCustomSpeed (カスタムの移動モードで使用される最大速度) を追加しました。(以前は、MaxWalkSpeed が使用されていました。デフォルトの値は、既存のコンテンツのその値が設定されます。)
	* UCharacterMovementComponent::GetMaxAcceleration() を追加しました。
* 新規:CharacterMovementComponent::bAlwaysCheckFloor のデフォルト値が true になりました。
	* パフォーマンスが影響を受けるのは、キャラクターについてのみで、それらが動いていない場合です。(動かずに立っている時に、更新ごとにフロア チェックを追加します)。
	* ゲーム内において動かないキャラクターにこの機能が必要ないと確認できれば、パフォーマンスを少しでもかせぐために、false に設定を戻したい (特に AI について) ユーザーもいるかもしれません。
* 新規:コンテンツ サンプルで Automation エラーを引き起こすアセットを改変しました。 
* Blackjack サンプルでカードのクリーンアップを改変しました。
* ネットワーク PIE ゲームの起動全般に改善を加えました。エディタのために、接続メッセージに待ちを追加しました。スポーンされたインスタンス数を修正しました。ウィンドウの位置を改善して、複数のモニタが収まるようにしました。
* 新規:* ランチャーで作成されたプロジェクトのために、プロジェクトの位置の配列を、ゲームの .ini に移動しました。
* 新規:GetBrush から、第 2 のアクタが常にブラシであるという前提を取り除き、名前を GetDefaultBrush に変更しました。GetBrush は GetDefaultBrush に代えられ、GetBrush は非推奨となりました。コメントも適切なものに変更しました。
* 誤ったコマンドレットの処置を変更しました。コンソールを表示し、コマンドレットが無効な場合、終了します。 
* ランドスケープの MIC とテクスチャを移動し、それらの Outer として、UPackage ではなく UWorld をもつようにしました。
* プラットフォーマー ゲームの exploding car (爆発する車) ブループリントを改変して、super jumps をできなくしました。
* 新規:FInterpCurve::Eval、EvalDerivative、EvalSecondDerivative 内のオプションのパラメータを削除しました。
	* これまでは、オプションの 32 ポインタ (スプラインで使用されるセグメントのインデックスがその中に入っていました) を供給することが可能でした。スプラインのセグメントを取得する方法が最近変わったことにより、異なる結果が出されるようになり、実装の詳細になるため、ユーザーにはエクスポーズされないこととなりました。
* 新規:ICU を 53.1 にアップデートし、1 個のデータアーカイブ/パッケージではなくルースファイルを使用するように改変しました。
* ボイスチャットのために Opus オーデイオをエンコードする場合に必要な Complexity (複雑度) の設定を減らしました。これによって、無視できる程度のクオリティの低下と引き換えにパフォーマンスを向上させることができます。
* キューブマップのクリアリングのロジックを変更して、初期化しているレンダーターゲット上のレース条件を停止しました。
* 2 つの state ノード間にある複数の transition ノードが、互いの上に配置されないようにしました。
* CookOnTheFly のキャッシングの信頼性を向上させました。
* Slate List View、TreeView、TileView でタッチをサポートしました。
* construction script から作成されるコンポーネントが、トランザクション (transactional) ではなくなりました。コンポーネントが再作成された後に再適用する値を保存するには、コンポーネントのインスタンスのキャッシュを使用してください。
* 子アクタのコンポーネントが大幅に安定化しました。どのようなシナリオでもアクタが複製されることがなくなりました。
* タイマーマネージャのハンドルのためのサポートを始めました。
	* タイマーマネージャが、ハンドルによってタイマーを識別できるようになりました。ハンドルをもつタイマーは、タイマーの期限が切れた時に呼び出されるデリゲートを必要としません (ただし my にはまだありますが)。
* クラッシュの修正。非 Unity および Linux エディタのビルドの修正。
* FFoliageEdModeToolkit におけるメモリ リークを修正しました。
* クックされていないゲームを実行した場合、ブループリントのコンポーネントに基づく既存のフォリッジによって起こるクラッシュを修正しました。
* 再アロケート可能な TMap 内のデータへのポインタを保持する Foliage UI によって引き起こされる可能性のあるクラッシュを修正しました。
* ランドスケープのスプライン ツールにおいて起きる、さまざまなアンドゥ関連のクラッシュを修正しました。
* 複製されたランドスケープのギズモを取得することによって引き起こされるクラッシュを修正しました。
* モーフターゲットのインポートに関するバグを修正しました。これは、必要とするよりもはるかに多くの頂点が作成されるというバグでした。
* ランドスケープ ツールから切り替えた時に、正投影法のビューポートでランドスケープのブラシのアウトラインがまだ表示されたままになっている問題を修正しました。
* ロード時の再構成中に列挙型がセットされる SwitchEnum ノードが、正しいフレンドリ名をもてない問題を修正しました。
* 非同期のロード中に Blueprint Generated Class (ブループリント生成クラス) が作成されるものの、他のオブジェクトがインポートとしてそれをロードしている時に、プリロードされないというエッジケースを修正しました。
* 自動生成されるマテリアルが古いレイアウトを使用していた問題を修正しました。
* 非ゼロの Z 座標をともなったランドスケープのために Flatten to Target (ターゲットに平坦化) を修正しました。
* flatten preview grid (プレビュー グリッドの平坦化) が動かなくなる問題を修正しました。
* 正しく整列されていないマテリアルのコメントを修正しました。
* レベルエディタをリロードしている時に、共有のポインタ デリゲートのバインディングによって引き起こされる問題を修正しました。
* RF_Transactional フラグがないことに起因する、UDataAsset の派生クラスが関わるアンドゥ問題を修正しました。
* (SmoothTargetViewRotation で使用される) BlendRot が int32 ではなくフロートを返すように修正しました。
* CharacterMovementComponent のスイミングに関する様々な問題を修正しました。
* いくつかのコンテンツ例における様々なフロート エラーを修正しました。 
* StepUpFails 時、またはそれが役に立ちそうもない時 (Flying の実装に非常によく似ています) SlideAlongSurface() コードの欠如を修正しました。
* CanEverSwim() が様々なワークフローにおいて確認されていませんでした (最初は Water Volume で開始する、または落ちてから着地する)。
* BSP と衝突時、キャラクターは水からもっと確実に飛び跳ねるようになりました。
* キャラクターの下で開始する垂直に移動するプラットフォームの問題を修正しました。
* FNavLinkRenderingProxy と FLandscapeSplinesSceneProxy の GetAllocatedSize() を修正しました。
* Tappy chicken のレンダリングが停止してしまう問題を修正しました。
* スタンドアロン型のウィンドウからコリジョンを有効にすると発生する可能性のあるクラッシュを修正しました。
* HUD クリックに影響する分割画面の座標調整に関する問題を修正しました。 
* 各種サンプルゲームの様々なエラーを修正しました。
* バッキング データ テーブルを再インポートした後、ゲームプレイ タグ エディタ ウィジェットが正しくリビルドされないバグを修正しました。
* DefaultPhysicsVolume がブラシ / ボリュームの [詳細] パネルの変換アクタリストに表示されないように修正しました。

**UI**
* オーナーチェーンに RPC が可能なアクタが存在することを確認する HasNetOwner 機能を追加しました。
* UPlayer は所有しないが実際はプレイヤーを所有している (ただし切断されている) アクタと、NetOwner を決して持つことのないオブジェクトとの区別できるようになりました。
* フォーカスがなくなっても、エスケープで HUD UI が最初に閉じます。

#### レンダリング
* 再利用できるようにフレーム中に早期にGBuffers をリリースします。 PostProcessMaterial はより長くそれに適用できるようになります。詳細度はすべて GBuffers で、テクスチャ別にもできますが、トラックする価値はないかもしれません。
* バイトに対応するバッファが頂点バッファをサポートするようになりました。 
* UMaterialExpression と幾つかの派生タイプを、エンジンの外部から拡張できるようにしました。
* 派生元として好ましい幾つかのクラスに ENGINE_API を追加しました。

#### オートメーション 
* アンリアル オートメーション ツールは game .ini ファイルを使って、クックとステージ用のディレクトリを追加するようになりました。
* 自動化テストの履歴のビジュアル化を追加しました。
	* ユーザーがテスト履歴のトラックを選択し、テストテーブルで概要を見れるようになりました。
	* [履歴を追跡] というこのオプションは自動化のツールバー上にあります。
* 自動化テストのツールチップを改善して、完了したマシン インスタンスを表示するようにしました。
* 新規:テストを何回でも繰り返すことができる機能を追加しました。
* 新規:エディタのスクリーンショットをキャプチャするコンソールコマンドを追加しました。
* オーバーラップしているスタティックメッシュしたり、範囲外の UV をすべて見つける新しいテストを追加しました。
* 新規:スタティックメッシュ エディタ ツールバーを循環させて機能をテストするテストを追加しました。
* [自動化] タブでプリセットを設定できるようになりました。これによりテスト実施予定の対象グループを独自に設定することができます。
* サムネイルだけでなく、全画面のスクリーンショトが可能になりました。スクリーンショットの比較ツールが完全にサポートします。
* スクリーンショットの比較ツールは、「N 番目の画像のみ表示」と設定することができます。
* 新規:テスティングと結果を、ある基準 (GPU 、マシン名、 CPU 、OS など) に基いてデバイスのグループで区切ることができるようになりました。
* Test Results Report Card を追加しました。テスト結果が、テストを実行したデバイスグループもしくはマシン別にカラーグラフで表示されるようにしました。 
* スクリーンショットを取るために、エディタ / ゲームテストの [Load all Maps (全マップのロード)] をアップデートしました。 

**Unreal Frontend**
* 失敗したものに対する自動化テストの回数を追加しました。継続時間はこれには反映されません。
* テスト用のツールチップを追加して、操作中のマシンを表示するようにしました。

**物理**
* 使われることがなかった UWorld::ComponentSweepSingle を削除しました。必要な場合は代わりに UWorld::ComponentSweepMulti を使ってください。
* 使われることがなかった UWorld::ComponentOverlapTest を削除しました。必要な場合は代わりに UWorld::ComponentOverlapMulti を使ってください。
* オプションのサードパーティ ライブラリを新規に追加しました。Box2D 2.3.1, zlib license (https://code.google.com/p/box2d)

**EQS (Environment Query System) の変更**
* **注記**:現在 EQS の使用は推奨いたしません。初期開発段階のためまだ非常に不安定です。デフォルトでは完全に無効になっています。それでも使用する場合は、変更点にける後方互換性について弊社は保証しません。ご注意ください。今後のリリースで [実験的な] セクションへ移動した際にお知らせします。
	* UEnvQueryTest と関連ファイルを大幅に変更しました。EQS を使用する際は Environment Query アセットを再保存する必要があります。
	* EQS テストが Min/Max だけでなく範囲のフィルタリングをサポートするようになりました。
	* EQS テストの詳細 UI を大幅に変更 (願わくば改善) しました。さらに改善される予定です。フィルタリングとスコアリングが、お互いへの暗示的な依存の少ない、より明確な方法で処理されるようになりました。

**Shootergame**
* 作成されたライト コンポーネントを RootComponent として ExplosionEffect に割り当てるコードを追加しました。これにより、爆発エフェクトが表示されないようにします。ブループリントが開いていると、爆発は表示されません。 
* 保留にしているネットゲームに参加する際のエラーハンドラを追加しました。さらに、シューティングゲームのメッセージ テキストにテキスト ラップ値を追加しました。
* ShooterExplosionEffects の名前を ShooterExplosionEffect に変更して、クラス名とヘッダファイルに合うようにしました。
* ボットの動作を改変しました。ボットが LOS をチェックし、現在のターゲットへの LOS がない場合は、別のターゲットを探すようになりました。 
* OnEquipFinished を変更しました。別の武器がアクティブな状態でアモが集められていると、切替時に、武器が自動でリロードします。
* shootergame のメニューを PIE で実行し、ゲームをホストしようとすると、クラッシュする問題を修正しました。

**Vehicle (車両) ゲーム**
* VehicleGameState と VehicleGameViewportClient を追加しました。
* あるコントロールのためのあるバインディングを制限するために、リマップ メニューにコードを追加しました。 
* UInputSettings に関数を加えて、マッピングが追加/削除された後に、キーマップを強制的に更新させるようにしました。 
* ボタンの名前をリマップしてよりユーザーフレンドリーにするためのコードを追加しました。
* settings ini を改変して、スロットル/ブレーキがコントロールメニューでリマップできるようにしました。
* 車両ゲームのクライアントで、動作しない GO テキストとベスト ラップ表示を修正しました。 
* 車両ゲームの制御メニューを修正しました。また、その幅を拡張しました。 

**フォリッジがリファクタリングされています**
* UInstancedFoliageSettings が UFoliageType と UFoliageType_InstancedStaticMesh に分割されました。
* FoliageMeshes のマップが、UStaticMesh ではなく、UFoliageType でキー化されるようになりました。

**Paper 2D**
* いくつかの **C++** クラスの名前を、エンジンの標準により合致するものに変更しました。
	* 既存のコンテンツは、変更なしでアップグレードされるべきですが、 **C++** のコードは新たな名前に適合するようにアップデートする必要があります。
	* UPaperRenderComponent の名前を UPaperSpriteComponent に変更しました。
	* UPaperAnimatedRenderComponent の名前を UPaperFlipbookComponent に変更しました。
	* FPaperAnimatedRenderSceneProxy の名前を FPaperFlipbookSceneProxy に変更しました。
	* APaperRenderActor の名前を APaperSpriteActor に変更しました。
* Paper2D プラグインが、デフォルトで有効化されるようになりました。そのため、コンテンツオンリーのゲームは、クックされたビルドでこれを使用できます。
* タイル マップ データをコンポーネントから新たなクラスの UPaperTileMap に移動させ、セル毎のタイルがセットされたポインタを追加しました。
* スプライト コンポーネントのためのモビリティ (移動性) の設定を切り替えて、スタティック メッシュ コンポーネントに合うようにしました。UPaperSpriteComponent のデフォルトの値は Movable に、APaperSpriteActor のデフォルト値は Static になりました。
* UPaperFlipbook (FramesPerSecond の public のインターフェイスをリファクタリングするとともに、KeyFrames へのアクセスは、ゲッターまたは FScopedFlipbookMutator のインスタンスから行わなければならなくなりました。

#### コア
* FThreadSingleton が、コアの外部で使用できるようになりました。
* 128-bit CAS 演算を利用する LockFreeList を追加しました。(デフォルトでは無効になっています。USE_LOCKFREELIST_128 を 1 にセットすることによって、有効化できます。)
* stats (統計情報) ファイルが圧縮されるようになりました。通常の stats は 30%、生の stats は 16% 圧縮されます。
* タスク グラフの stats のサポートを充実させました。
* 外部のプロファイラのために、ANSI 文字列およびワイド文字列として stat の記述にアクセスできるようになりました。
* C++ のコーディング規格:あらゆるプラットフォームで、override および final キーワードを利用するようになりました (OVERRIDE などではありません)。
* Windows 上で、最適化したコードを簡単にデバッグできるようになりました。
	* 最適化されたコードのデバッギングを有効化するためのコンパイラ コマンドラインのスイッチを設置しました。ドキュメント化されていません。 (/d2Zi+) 
* 妥当な GetHashCode 実装を作るための HashCodeHelper を UBT に追加しました。
* SListView アイテム型がポインタ型であるとするエラーメッセージを改善しました。
* TSets が TArrays から作成可能になりました。move セマンティクスが、TSet::Append および TSetElement に拡張されました。
* TArray::FilterByPredicate 関数が追加されました。predicate に渡したすべての要素のコピーを保持する新たな配列を返します。
* TUniquePtr<Base> が、TUniquePtr<Derived> から作成およびアサインできるようになりました。
* MakeUnique が、Visual C++ でさらにオーバーロードを持つようになりました。これによって、可変値引数テンプレートがないことの機能的な埋め合わせをしています。
* クックされたサンドボックスのパスが、Game\Saved\Sandboxes\Cooked-Platform から Game\Saved\Cooked\Platform に変更になりました。
* デフォルトのサブオブジェクトが、NewObject を使って作成できなくなりました。既存のケースはすべて、ObjectInitializer.CreateDefaultSubobject に置き換えられる必要があります。
* 生成されるコードの #includes に変更が加わりました。
	* includes は、可能な場合は常にその出元のモジュールを基準とします。
	* すべてのモジュールの root が、include のパス上に置かれるようになりました。また、同じ名前のヘッダがプロジェクトにあると、include のオーダーに応じて異なるファイルが取得される場合が出てきます。
	* プラグインの中間ファイルが書き出される場合が、Plugin フォルダ内の中間フォルダではなく、プロジェクトの Intermediate フォルダになりました。
* XmlParser モジュールを Developer から Runtime に移動させて、shipping games で利用できるようにしました。
* 機能しないスクリーン クアッド描画関数を削除しました。パブリックにエクスポーズされた DrawRectangle() に置き換えられました。
* メモリを単に 0 クリアするのではなく、オブジェクトを非直列化する場合に、FTransaction がデフォルトのコンストラクタをサポートするようにした。
* FString::Replace が、クラッシュさせずに、null 置換文字列上でアサートするようになります。
* multiple-of-32-bit shifts のために TBigInt を修正しました。また、ToString() が、重要な低次のゼロワードを無視しなくなりました。
* UStruct::GetStringMetaDataHierarchical を追加しました。
* FBox2D Min および Max を public にして、FBox の機能に合うようにしました。
* ULinkerLoad::CreateActiveRedirectsMap を static にするとともに、外部から呼び出し可能にしました。
* カーブの最終ポイント近くで FInterpCurve<T>::EvalSecondDerivative を使用するとクラッシュする問題を修正しました。
* 単体ビルドで静的にリンクしているプラグインを修正しました。
* bCompileNetworkProfiler を削除しました。STATS が true の場合は常に、USE_NETWORK_PROFILER が true となります。このフラグはすべての Target.cs ファイルから安全に削除することができます。

#### Slate API のアップデート
* SComboRow RowContent が、デフォルトのスロットに置き換えられました。Slate の慣例により適合するためです。
* 必須の pre/post 機能をサポートするために、Paint が OnPaint への非仮想エントリポイントとなりました。
	* Widget が OnPaint をいつもどおりにオーバーライドします。ただし、Widget にペイントするように命じるコールは、OnPaint ではなく Paint でなければなりません。
	ArrangeChildren が OnArrangeChildren に名前が変わりました。ArrangeChildren は、Paint/OnPaint の場合と同じ理由で、非仮想エントリポイントとなりました。
	* OnPaint と OnArrageChildren が private となりました。間違って呼び出されないようにするためです。
	* Paint 時間と ArrangeChildren 時間についての Stats を追加しました。
	* SComboRow::OnGenerateWidget がバインドされていない場合に、デフォルトの STextBlock が生成されて、そのデリゲートをユーザーがバインドし忘れてコンパイルに失敗しないようにします。
* SCheckBox ReadOnly 属性を削除しました。
	* すべてのウィジェットがサポートしていない一般的な機能を表していました。
* SComboButton から MenuWidth と MenuHeight を削除しました。
	* ほぼすべての SComboButton から必要のない余分なウィジェット レイヤを削除しました。
* Actor.bWantsInitialize を削除しました。

#### 物理
* (WITH_PHYSX || WITH_BOX2D) の短縮形として UE_WITH_PHYSICS を 追加しました。
* CalculateMass を変更して、GetSimplePhysicalMaterial をより豊富なオーバーライド ポイントとともに使用できるようにしました。
* 多数の FCollsionShape のスイッチを FPhysXShapeAdaptor ヘルパに置き換えました。






