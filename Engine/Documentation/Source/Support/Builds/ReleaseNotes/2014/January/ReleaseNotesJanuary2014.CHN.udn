INTSourceChangelist:6537038
Title: 2014年1月版本说明
Crumbs:%ROOT%, Support/Builds
Description:
Availability:Licensee
Parent:Support/Builds
Order:-2
Order: 46

[TOC(start:2 end:2)]

## 版本信息


[REGION:simpletable]
| 项目| 信息|
| ----| ----|
| **标签**| [INCLUDE:#labels] |
| **根据变更列表编号构建**|  (//depot/UE4-QA/Promotable-CL-1986836)|
| **根据变更列表编号分支**|  (//depot/UE4/Promoted-CL-1973917)|
| **Visual Studio 版本**| Microsoft Visual Studio 2012 版本 11.0.60610.01 更新 3|
| **DirectX**| 2010 年 6 月|
[/REGION]

[COMMENT:none]

[EXCERPT:Labels]
QA_APPROVED_UE4_BUILD_2014_01
QA_APPROVED_UE4_BUILD_CURRENT
QA_APPROVED_UE4_BUILD_MINIMUM
[/EXCERPT:Labels]

[/COMMENT]

## 重要信息

 * 当前引擎开发路线图：[虚幻引擎4 路线图](https://udn.unrealengine.com/questions/topics/roadmap.html)
 * 已修复的错误：[[2014 年 1 月虚幻引擎4 已修复的错误]](UE4_Fixed_2014_January.xlsx)
 * 已知问题：[[2014 年 1 月虚幻引擎4 已知问题]](UE4_Bugs_2014_January.xlsx)
 

## 主要新功能

####蓝图

* **格式化文本节点**
	* 在蓝图中添加了一个新格式化文本节点。	

		![](Support\Builds\ReleaseNotes\2014\January\FormatTextNode01.png)

	* “格式化”文本可以是文字，也可以连接到引脚。用作文字时，它会自动生成格式化参数。

		![](Support\Builds\ReleaseNotes\2014\January\FormatTextNode02.png)

	* 这些参数既可以用文字填写，也可以从变量获取值，且输出“文本”将使用连接到引脚的任何值替换这些参数。	 

		![](Support\Builds\ReleaseNotes\2014\January\FormatTextNode003.png)

	* 如果连接到“格式化”引脚，由于它是变量，因此无法解译“格式化”。在这种情况下，您可以自行添加引脚并将其指定到可能的参数后。这样，您可以为多种可能设置好“格式化文本”节点。不管参数何时匹配格式化中的参数，它都会利用提供的信息。	

		![](Support\Builds\ReleaseNotes\2014\January\FormatTextNode04.png)

	* 可更改、添加引脚名称，也可将其从详细信息面板中删除。

		![](Support\Builds\ReleaseNotes\2014\January\FormatTextNode05.png)

* **节点样式更改和附加数组**
	* 现在提供了一个“附加数组”函数，可将一个数组的内容添加到另一个数组末尾。	

		![](Support\Builds\ReleaseNotes\2014\January\AppendArray.png)

	* 蓝图中的关卡 Actor 引用现在有新的外观，更易于识别：	

		![](Support\Builds\ReleaseNotes\2014\January\References.png)

	* 数组函数节点也有新的外观！	

		![](Support\Builds\ReleaseNotes\2014\January\ArrayFunctionNodes.png)


####编辑器和工具

* **SoundCue 编辑器**
	* 在 SoundCue 编辑器中添加了一个声音节点控制板！

		![](Support\Builds\ReleaseNotes\2014\January\SoundPalette.png)

* **事件列表**
	* 重新将图表子事件列表添加到了“我的蓝图”（My Blueprint）选项卡中，您可以在该列表中选定、重命名（对于自定义事件）、查找和删除事件节点。						

		![](Support\Builds\ReleaseNotes\2014\January\EventListing.png)

* **文档**
	* 将少量解释某些节点的“详细工具提示”添加到了帮助中心。

		![](Support\Builds\ReleaseNotes\2014\January\Documentation.png)

* **可延展性界面**
	* 添加了一个新用户界面，以提升编辑器中的可延展性！	

		![](Support\Builds\ReleaseNotes\2014\January\scalability.png)

* **场景大纲视图中的 Actor 可视性**
	* 现在从场景大纲视图使用每个 Actor 旁的眼睛图标可以快速切换 Actor 的可视性：
		
		![](Support\Builds\ReleaseNotes\2014\January\ActorVisibility.png)

* **关卡视口**
	* 在关卡视口中，比方说如果您选择一个相机，您会看到当前视口的画中画框中看到相机可见画面的预览。当您取消选中相机时，预览会关闭。

	* 在关卡视口中为 Actor 预览的对象添加了一个按钮，以便将其锁定，使其在您选择其他对象时也保持可见：

		![](Support\Builds\ReleaseNotes\2014\January\LevelViewport01.png)

	* 如您所见，这是新增对象，所以您可以看到所有锁定预览和其他已选定预览 Actor。

	* 这样做可能产生的一个好处是，您在预览相机可见画面时，可以在相机拍摄中移动 Actor，而不需要使用 Matinee 或多个视口：	

		![](Support\Builds\ReleaseNotes\2014\January\LevelViewport02.png)

#### 渲染
* **天空光照和预计算环境法线**
	* 蓝图现在有一个天空光照 Actor 和一个天空光照组件。

	有一个仅带 SSAO 的环境立方体贴图。	  

	![](Support\Builds\ReleaseNotes\2014\January\Skylight01.png)	

	还有一个带烘焙阴影的天空光照。	

	![](Support\Builds\ReleaseNotes\2014\January\Skylight02.png)	

	**可用性**	
	 
	* 天空光照用于获取关卡的远处部件（比天空距离阈值更远的任何部件）并将其作为光照应用到场景。
	  
	您还可以手动指定要使用的立方体贴图。		

	![](Support\Builds\ReleaseNotes\2014\January\CubeMap.png)	
	
	* 以前，在通过 Lightmass 环境颜色为天空漫反射提供不同的常量颜色时，您必须为天空的反射选择环境立方体贴图。
	 
	* 天空光照完全替代了环境颜色，以后还将替代环境立方体贴图。

	* 但是，请注意，当您重新构建光照或手动告诉它创建时，天空光照现在只会重新捕获场景。
	 
	**烘焙阴影**		

	* 天空光照现在唯一支持的版本是带固定移动性的光源，也就是说它有 Lightmass 的烘焙阴影。	

	* 一旦在关卡中放置天空光照，则必须重新构建一次光照才能获得烘焙阴影。

	仅天空光照可点亮。	

	![](Support\Builds\ReleaseNotes\2014\January\Skylight05.png)

* **试验性新功能：DBuffer 延迟贴花**
	* 延迟贴花现在可与烘焙/Lightmass 光照一起使用。	 
	这样做有一定的成本 - 并非所有项目都需要使用烘焙光照或需要适当的贴花，所以可将其作为项目设置启用，并且需要更改贴花混合模式。	

		![](Support\Builds\ReleaseNotes\2014\January\DBufferDeferredDecals01.png)	

	右边：使用传统贴花（无 DBuffer)）烘焙的光照具有破损光照（应与左边的光照相似）。
	* 如何激活此功能：
		* 要尝试在本地使用 DBuffer，请以下代码添加到 BaseEngine.ini 的 [SystemSettings] 下
		* r.EarlyZPassMovable=1
		* r.EarlyZPass=2
		* r.DBuffer=1
		* 使用新的 DBuffer 贴花混合模式
	* 如果您要在项目中使用该功能，可在项目设置中执行类似的更改。


## 新增内容

#### 编辑器和工具
* 添加了新资源浏览器过滤器上下文菜单项，可隔离和启用单个过滤器。
	* 通过打开活动过滤器列表中单个过滤器的上下文菜单并选择仅启用此过滤器可将其激活：`<filtername>`
* LOD 距离现在在折叠的 LOD 标题中可见。
* 在属性矩阵视图中，支持资源选择器按钮的资源现在会显示此按钮。
* 按住 Ctrl 并单击已选定和分组的 Actor 现在可将整个分组取消选定。
* 在过滤器菜单底部添加了重置过滤器按钮。
* 添加了对子菜单的菜单项切换框和操作的支持，并修改了 CB 过滤器菜单以利用子菜单。
* 已修改的贴图/资源现在会在其名称旁的停靠选项卡中显示一个星号。
* 右键单击内容浏览器中的资源时，菜单中添加了一个“浏览”（Explore）内容菜单项。
* 场景大纲视图中添加了一个可视性切换图标。
	* 用户单击并刷过多个可视性图标可批量切换多个 Actor 的可视性。
* 在 SoundCue 编辑器中添加了一个声音节点控制板。
* 现在在单个控制板中合并了材质编辑器表达式和函数列表。
* 现在在 SoundCue 编辑器中双击声音节点可运行该节点。
* 在材质编辑器的右键单击上下文菜单中添加了材质函数。
* 材质节点“粒子方向”（Particle Direction）、“粒子速度”（Particle Speed）、“粒子位置”（Particle Position）和“粒子相对时间”（Particle Relative Time）现在可以与网格体粒子一起使用。
* 为 Perforce 插件添加了 UTF-8 支持，以便使用 Unicode 服务器。
* 现在可在蓝图组件视图中编辑实例化的静态网格体组件。
* 现在提供了 CHM 格式的引擎 API 文档（路径：Engine\Documentation\CHM\API.chm）。
* 地形现在支持导入/导出 .png 格式的高度图和权重图。
* 在地形编辑器中添加了“变更组件大小”工具。
* 在地形样条中添加了剪切/复制/粘贴支持。
* 更改源网格体时，现在会自动重建样条网格体碰撞。
* 在地形样条上添加了禁用阴影投射的选项。
* 在样条网格体中添加了 MaterialOverrides。
* 添加了 GetMorphTarget 蓝图可调用函数。

#### 蓝图
* 添加了“服务器上的 Blueprints.Find 时间轴”编辑器自动测试，以识别蓝图中连接的 TimelineComponents，并在指定服务器上运行（时间轴能够 Tick 并影响性能）。
	* 该测试通过回退执行链以找到可能由非修饰（服务器）事件执行的时间轴，并在日志中将其标记为错误。
	* 在 StandardMacro 中添加了一个宏（“可执行装修饰事件”），可有条件地避免在服务器上执行时间轴。该自动测试会显式检查此宏。
* 添加了 GetStreamingLevel BP 节点。返回 ULevelStreamingKismet 对象，从而允许进一步控制蓝图中的关卡流。
* 在蓝图组件列表视图中，指示组件移动性的图标现在会显示在组件旁。
* 重新将事件导航添加到了“我的蓝图”（My Blueprints）选项卡中（图表中执行的事件现在会列在树中）。
* 在蓝图中，您不能再在具有更多移动性的组件下建立父级不可移动组件。
* 在蓝图中，您不能再在仅针对编辑器的组件下建立父级游戏组件。
* 现在可以禁止在蓝图对象上实现接口（通过“ProhibitedInterfaces”元数据）。
* 在蓝图节点中，对象引脚现在直接接受从输入类型继承的对象。
* 现在可以相互比较任意蓝图以及蓝图版本。
* 在蓝图中添加了一个“附加数组”（Append Array）函数。
* 在蓝图中添加了一个“格式化文本”（Format Text）节点。
* 文本变量可作为文字处理。
* 蓝图中现在可以使用数量节点的不同文本（Various Text）。

#### 渲染
* 添加了一个新的控制台命令“scalability”，可用于简单控制引擎设置，从而平衡性能和质量。在控制台中键入“scalability”可查看关于其使用方法的完整文档。
* 在“视图（View）->引擎可延展性设置（Engine Scalability Settings）”下添加了一个新 UI。与“scalability”控制台命令一样，通过此界面也可以访问相同的功能。
* 添加了执行静态和骨架网格体 LOD 计算的缩放因数。（r.SkeletalMeshLODRadiusScale 和 r.StaticMeshLODDistanceScale）。
* 在 2D 场景捕获组件中添加了后期处理选项。
* 在静态网格体上添加了新蓝图函数，用于切换调用 SetRenderCustomDepth(); 的 bRenderCustomDepth 属性
* 在碰撞粒子模块中添加了一个新复选框，可用于对效果的源 Actor 启用碰撞检测。当您想要通过交互的网格体和粒子创建蓝图时会很有帮助。
* 添加了用于切换使用半透明表面顶点雾气效果的新材质复选框。
* **天空光照功能**
	* 在漫反射和高光度以及直接看到的效果之间，为天空光照提供了统一表示法。
	* 天空光照组件将自动捕获远处几何体并将其作为光照应用到场景。
	* Lightmass 可烘焙环境法线环境光遮蔽，从而提供定向阴影
	* 该新功能尚未完善（比如说没有角色阴影），不适用于半透明度等。
* 可选择启用粒子光源模块来调整半透明度
* 材质环境光遮蔽输出适用于所有间接光照，这对体积式粒子很有用
* **预计算可视性改进**
	* 新单元放置启发法可更全面地覆盖潜在运行区域，但是会增加构建时间。
	* 对构建时间进行了多方面的优化
	* 预计算可视性现在更加可靠，这对移动平台很重要
* **自定义 UV**
	* 允许将成本高昂的操作移到已插入像素着色器材质输入的顶点着色器。
	* [自定义 UV UDN 页面](https://udn.unrealengine.com/docs/ue4/INT/Engine/Rendering/Materials/CustomizedUVs/index.html)
* **自适应采样 Lightmass GI 解算器**
	* 在光照条件不佳的情况下（例如明亮的光线通过小窗口照入）提供更高的质量，而构建时间不变。
	* 新场景设置 Lightmass 属性：IndirectLightingQuality，可为有需要的贴图提高解算器质量。
* 添加了可从 ini 启用的 DBuffer 延迟贴花（试验性功能，每像素消耗额外 10 字节 GPU 内存，允许使用光照贴图贴花，支持颜色、法线、粗糙度，单独不透明度）：r.EarlyZPassMovable=1   r.EarlyZPass=2  r.DBuffer=1

#### Gameplay 和框架
* LogVisualizer 改进：日志类别过滤。
* 如果启用 PlayerPhysics，CharacterMovementComponents 将对上面站有 Pawn 的对象产生作用力，并对与之重叠的对象产生不变斥力。
* 物理资源工具 (PhAT) 中支持凸面外壳。
* 添加了一种将自定义过滤器传递给导航查询的方式。
* 将 GameplayDebuggingComponent 与 LogVisualizer 绑定，这样，在模拟模式中点击 AI 且 LogVisualizer 存在时，LogVisualizer 将切换到显示所选 AI 的日志。
* 现在将 ReferenceViewer 移到了主编辑器中，不再放在 EpicLabs 中。
	* 对于引用查看器中的节点，已将现有引用工具移到右键单击菜单中。
	* 添加了深度和宽度限制，从而制作更完善的图表。还添加了历史记录。
* 添加了 CameraBlockingVolume。这种简单的体积只会阻挡 ECC_Camera 碰撞通道。
* 添加了 KillZVolume。这种简单体积会终止与之发生接触的 Pawn。
* MemReport 命令现在输出全面的内存报告到 Saved/Profiling/MemReports 目录。它与虚幻引擎3 中的 memleakcheck 相似。它运行的命令可在 ini 文件中修改。
* **ForceFeedback**
	* 在内容浏览器中可创建 ForceFeedbackEffect 资源。一种包含一系列具有曲线和布尔值的条目的效果，以表示该曲线会影响哪一个伺服器。
	* 运行/停止效果通过在玩家控制器中的函数调用完成。
* **SoundGroups**
	* 可分配给 SoundGroup 的 SoundWave。该音效组允许声音有不同的解压属性。以后此功能还会用于需要流送的标记声音。
	* 自定义游戏 SoundGroups 在一定程度上可以像自定义碰撞概述文件一样指定。
* 重写了 AnimNotify UI。现在将通知限制到轨迹，使其更易于拖放并自动平移缩放的轨迹显示
* 重构了 AnimNotifies，从而可在之前不允许的时间点对其进行设置（0，序列长度，分段时间）。
* 在内容浏览器中为动画添加了骨架重定向（打开具有空骨架的资源时自动触发）
* 添加了变形目标的 LOD 的导入功能。
* 在角色管理器中添加了 UV 显示。
* 在角色管理器中添加了顶点法线、切线和副法线视图。
* **语音**
	* 首次在新语音捕获界面上传递。
		* DirectSound 语音捕获实现（125 毫秒通知）。
		* 缺少麦克风插入/拔出的正确列举/检测（现在在启动时保持插入）。
	* 首次在新语音编码解码器接口上传递（opus 1.0.3，即将升级为 1.1）。
	* 为语音编码解码器时间添加了统计数据。
* **骨架网格体**
	* 支持 Simplygon 骨骼简化。
	* 应用 Simplygon 网格体简化之前从 LOD 删除所选骨骼。


#### 核心
* 添加了层级统计数据显示（“stat groupname+”，使用“stat”命令可了解详细信息）。
	* 添加了线程安全 FMemStack。
* 现在将 UnrealHeaderTool 清单（用于执行 UHT 的“响应文件”）写入 Intermediate 文件夹，以便将其用于诊断构建错误或调试 UHT。
	* 清单现在还有 JSON 格式，更便于用户阅读和计算机解析。
* 热加载冲突写在生成的标头文件旁（.generated.h.conflict 文件）以帮助诊断更改。
* UnrealHeaderTool 现在支持使用 UTF-8 BOM 的文件。
* 添加了 NonPIETransient 属性说明符，从而仅在为“在编辑器中运行”(PIE) 复制了属性时，才允许对属性序列化。
* 添加了 -pakdir=dir 命令行参数，以便能够指定其他 pak 文件位置。
* 支持 0 引擎版本 - 引擎现在允许加载使用 0 引擎版本（本地版本）保存的包。
* 支持空（无）活动类重定向。
* AddReferencedObjects 中现在支持引用消除。
* 添加了使用非对称密钥为 pak 文件签名的功能。

#### 平台
* 添加了控制器振动（当前仅 PS4 支持）。
* 添加了高关卡“游戏 DVR”控制（当前仅 PS4 支持）。
* 在 Slate 中添加了安全区域支持（将控件放在 SSafeZone 控件中，有关示例，请参阅 ShooterGameLoadingScreen，或 SSafeZone.h 的开头）（当前仅 PS4 指定安全区域）。
* **Mac**
	* 为 Mac OS X 上的编辑器实现了 C++ 符号加载。
	* 在编辑器中，实现了在 Xcode 中打开文件更好的方法，从而让新代码文件在 Xcode 项目中打开。

#### 音频
* 音频组件可以有整数参数。
* 切换 Sound Cue 的节点。
* 在声音组件中使用整数参数时可实现多路分支。

#### 动画
* 在视口菜单中添加了编辑动画序列时静音的功能。

#### 连接网络
* 可覆盖生命周期复制属性的活动状态。
	* 在 AActor::PreReplication 期间使用 DOREPLIFETIME_ACTIVE_OVERRIDE。
* 网络性能大有增强。
* 默认启用在连接之间共享复制工作（性能改进）。
* 简化了 FNetworkGUID 确认逻辑（加载关卡时可减少加载下的日志垃圾）。


## Upgrade Notes （以下内容仅供参考，不作翻译）

#### Editor and Tools
* Landscape ES2 : Landscape UV increase from 2 to 3 to be same as LocalVertexFactory.
* Collision properties are now duplicated correctly.
* Sub-levels no longer get marked as dirty when added to the level.
* WorldSettings label is now hidden.
* Collections button now updates it's source control state when clicked.
* New PIE windows no longer get greyed out when debugging blueprints.
* FBX Import options are now remembered.
* Added missing tooltip for some material properties.
* Update the Collision Profile when the Collision Channels are built.
* Menu asset picker now excludes assets which belong to unloaded maps.
* Collections now save again.
* "Press Escape" message now only appears when autosaving.
* Removed LocalizeError usage.
* Alpha value of color themes now appears correctly depending on the color picker type being used.
* DestructibleMesh property is no longer collapsed.
* Remove 'Debug' as an packaging option if solution is missing i.e. non-code.
* "Save" name and tooltip restored in asset editors.
* Changed Cascade Module warning from a dialog to a notification.
* Modifications to UFortUIFeedbackBank properties now work as expected. 
* Property matrix column widths are now preserved between object selections.
* ContentBrowser asset view now recieves keyboard focus when syncing to assets.
* ContentBrowser view modes now have a persistent layout.
* Prevent opening locked content browsers to sync assets.
* Added missing small icon for local and world coordinate system.
* Collections are no longer removed, when creating, if the rename loses focus.
* Renamed 'asset' to 'item' in the content browser counter.
* Disable the 'add code to project' option when the user has no compiler.
* Replaced 'invalid collision' dialog with notification.
* Refactor how the sprite category localization is handled.
* Collections now appear expanded by default, and can be resized.
* Save message reworded to say Matinee.
* Adding missing small Phat icons.
* When dragging an asset over a tab, it'll now become active after a short period.
* Copy/Pasting nodes created with keyboard shortcuts no longer crashes.
* Layout is now also saved when exporting preferences.
* The option to auto recompile blueprints on PIE is now controllable from Editor Preferences. 
	* Any custom *.ini files referencing Kismet.AutoRecompileOnPIE should be changed to use /Script/UnrealEd.LevelEditorPlayInSettings.AutoRecompileBlueprints in the relevant EditorUserSettings ini instead.
* ALevelGridVolume actor was removed.
* GetOverlappingActors no longer returns the actor the call is made on.
* Changed Position & Translation to Location in Blueprint functions; impacts several C++ functions:
	* UPrimitiveComponent::AddImpulseAtPosition() becomes UPrimitiveComponent::AddImpulseAtLocation()
	* UPrimitiveComponent::AddForceAtPosition() becomes UPrimitiveComponent::AddForceAtLocation()
	* UMovementComponent::ConstrainPositionToPlane() becomes UMovementComponent::ConstrainLocationToPlane()

#### Rendering
* An error in the calculation of text render actor vertical alignment transforms has been fixed. This may potentially result in some text being incorrectly position, which will need manually correcting.
* **Engine Scalability**
	* Added GetRenderingDetailMode to Kismet.
	* Added GPUIndex to HardwareSurvey.
	* More polish on engine scalability feature.
	* Added ECVF_Scalability to document if a cvar can be used as scalability option.
	* Added Blueprint GetRenderingMaterialQualityLevel, added help and clamped another one.
	* Added r.CompileShadersForDevelopment to allow for faster shipping build when set to 0 (needs to be manually activated, unfinished feature).
	* Added MaterialQualityLevel to scaleability settings - JonL suggested 0/1/1/1, could have been 0/0/1/1 - depending on content.
	* Optimized very low spec rendering cost for Fortnite, disables UI Blur background.
	* r.earlyzpass now renders all non moving objects if in mode 2 (masked or small on screen).
	* Added PF_R8G8 UNORM texture format.
* **Post Processing**
	* Clamped minimal speed for eye adaptation to not have people disabling eyeadaptation through this parameter.
	* Reenabled FastBloomThreshold as this was more noticable there.
	* Removed toe factor - isn't used in new tonemapper anyway - old tonemapper doesn't exist any more.
	* Added debug export to the graph for much nicer readble graphs (using yWorks) r.CompositionGraphDebug exports the files to the screenshots folder.
	* Reenabled native fullscreen for video options.
	* Experimental feature work: made screenspace subsurface scattering using alpha scene color alpha channel to separate out specular, very minor cost for most passes and if using a 32bit format we don't have the enabled. We intend to use enable ScreenSpace subsurface scattering and that is needed for high quality, see r.SSSSS 150 on subsurface material with a specular.
	* Typed console variables vars for better performance when reading cvars (main and render thread).
	* Improved interface to DrawDenormalizedQuad(), now renamed to DrawRectangle(), by default using classic quad, can be a triangle.
	* Allow visualization of EarlyZPass content using "vis SceneDepth@0"

#### Blueprints
* Nested blueprint components may have their mobility altered if their parent is more mobile than they are.
	* We no longer allow sub-components to be flagged with less mobility than their parent.
* Blueprint game-components will be unnested (or swapped, if the root) if they were previously nested under an editor-only component.
	* We no longer allow game-components to be nested under editor-only ones.

#### Gameplay and Framework
* Switched navigation system's API from using const FNavigationQueryFilter* to TSharedPtr`<const FNavigationQueryFilter>`
* InputComponent  bindings made in native code now use UObject binding instead of dynamic binding.
	* BIND_AXIS and BIND_ACTION should no longer be used and, while they remain currently for ease of conversion, they will be removed in the future.
	* Instead BindAxis and BindAction functions on InputComponent should be used.  BindKey and BindTouch have also been added.
* MinCompressedDurationGame/Editor has been removed.  See new feature SoundGroups for details on replacement.

#### Core
* Classes saved in blueprints are now converted to notplaceable if they inherit a notplaceable base.
	* Previously it would assert.
* TIndirectArray no longer inherits TArray.
	* Any code which does TIndirectArray->TArray casts will now fail.
	* Code which uses non-exposed TArray functions will need changing, e.g. GetData() should now be GetTypedArray().
* Some pathnames have been shortened to try and reduce MAX_PATH overflows.
	* This may affect navigation or batch files which expect files to be in particular places.
	* Notably, Intermediate/BuildData/Include is now Intermediate/Build/Inc.
* TWeakObjectPtr now static asserts that it is being instantiated with a UObject-derived type.
	* This will require that a full class definition wherever TWeakObjectPtrs are constructed, as the compiler won't just assume that your type is a UObject any more.
* begin() and end() are no longer container methods.
	* These functions were added purely for ranged-for support; they were not intended to be used in user code.  Ranged-for will still work as it uses an alternative system.
	* Any code using .begin() or .end() on UE containers should be converted to use ranged-for or the older CreateIterator-style of iteration.
* UnrealHeaderTool will now throw an error when it encounters a default argument that it can't parse.	
	* Code like this, for example, will need to be modified to use NULL:
	* `UFUNCTION(BlueprintCallable, Category="SomeCategory")`
	* `void Func(UObject* Obj = nullptr)`
	* `{`
	* `}`
* Eliminated bCompileMonolithicBinary global variable which was sometimes used by game targets 
	* Instead, override ShouldCompileMonolithic() in your program's TargetRules file (MyGame.Target.cs).
	* You can still use command-line arguments to override this if needed (-modular, -monolithic, or MONOLITHIC_BUILD=1).
* Removed "Fast Iteration Mode" from Unreal Build Tool (incomplete feature).
* Default minimum Windows API (WINVER) was bumped to 0x600 (Windows Vista or higher).
	* If you want to target Windows XP, set UEBuildWindows.SupportWindowsXP=_true_.
	* When targeting Windows XP, we use WINVER 0x502 (XP SP3).
	* Windows XP support is a work-in-progress, but we are committed to supporting it in a future build.

#### Platforms
* Putting all device profiles back in the editor. 
* Removed the DeviceProfiles.ini and converted this to use the same config hierarchy as other engine config files. Base->Default->Saved
* Updated the Texture Content Streaming to use allow usage of CVar where we would otherwise have specified that we use a config option.
* Putting back this property.
* Removed Device Profile redundant properties. 
* Updated the device profile setup to allow CVars to be initialized eary and removed Device Profile Blueprints, This has resulted in the creation of device profile plugins which run selection logic.  
* Updated save to defaults, so that array writes are using correct syntax. 
* Updated the settings editor to save after importing.
* **iOS**
	* Virtual joysticks have changed for touchscreen devices. They now use an asset. If you want to disable the joysticks, override the InitialTouchInterface ini setting in the [MobileSlateUI] section of Engine.ini
	* Unreal Launch Daemon has been fixed to work with Messaging to allow for device discovery and deploying/launching from UFE/UAT.
* **Unreal Frontend**
	* Unreal Frontend (UFE) can now utilize plugins.
	* Update to messaging to allow for static ips.
		* To see a device or session on a subnet different than the PC, do the following (these steps are also needed to see the PS4):
			* Run UFE once to generate the Engine/Programs/UnrealFrontend/Saved/Config/Windows/Engine.ini
			* Edit Engine.ini and add to the [/Script/UdpMessaging.UdpMessagingSettings]
			* StaticEndpoints=<ip of device>:6666
			* To add more than one device, add the line multiple times.
			* In the case of iOS, push Unreal Launch Daemon to the device and run it, add the static ip address as above, and it will now see the device.
			* In the case of PS4, just add the ip address as above and it will see sessions on the kit.
			* This hasn't been tested with XB1, but it should work.
	* Added ability to copy and save the launcher log.
	* Addition of Quick Launch to UFE.
		* Quick Launch will start a cook on the fly server, deploy, and launch the project on the selected device.
		* If -development is specified on the UFE command-line, Quick Launch will also build the project before launch.
	
#### Networking
* Lifetime properties are the only supported path now, this will most likely require code changes.
* GetReplicationList has been replaced by GetLifetimeReplicatedProps.
	* GetLifetimeReplicatedProps is only called once now.
* DOREPLIFETIME to register non conditional properties.
* DOREPLIFETIME_CONDITION to register properties with conditions.
* Possible conditions:
	* COND_None					- This property has no condition, and will send anytime it changes.
	* COND_InitialOnly			- This property will only attempt to send on the initial bunch.
	* COND_OwnerOnly			- This property will only send to the actor's owner.
	* COND_SkipOwner			- This property send to every connection EXCEPT the owner.
	* COND_SimulatedOnly		- This property will only send to simulated actors.
	* COND_AutonomousOnly		- This property will only send to autonomous actors.
	* COND_SimulatedOrPhysics	- This property will send to simulated OR bRepPhysics actors.
	* COND_InitialOrOwner		- This property will send on the initial packet, or to the actors owner.
	* COND_Custom				- This property has no particular condition, but wants the ability to toggle on/off via DOREPLIFETIME_ACTIVE_OVERRIDE.


## Future Additions and Ongoing Efforts

#### Editor and Tools
* It is no longer necessary to hold CTRL to move curve control points in matinee.
* There is now a "cancel" button on the "Compiling C++ Code" notification to allow cancellation of the current build.
* Attempting to open non-existent code files from the code-view details pane now emits an error notification
* Asset editors now have relevant icons on their tabs.
* The Add Code To Project wizard now includes Actor on the list of basic classes.
* UI Textures with alpha now render thumbnails with a checkerboard, and with alpha blending enabled.
* Import/Export/Reset to Defaults buttons now work correctly in Editor Preferences / Key Bindings.
* Added more engine analytics.
	* Tracking when user attempts invalid connections in Blueprint Editor.
* UnrealBuildTool: Failure due to read-only project files when generating project files is now a clear error message not a silent failure.
* Matinee now closes when Play-In-Editor(PIE) ends.
	* It already does this when Play-In-Editor(PIE) starts.
	* Closing stops accidental editing of actors in the wrong world when Play-In-Editor(PIE) starts/ends.
* Levels Browser functionality was merged into World Browser. Levels Browser will be removed eventually.
* Added ability for ULevelStreamingKismet to set loaded and visible flags at game startup (InitiallyLoaded, InitiallyVisible).
* **World Browser**
	* Added better filtering by layers.
	* Layer streaming distance setting is optional now.
	* Streaming levels can be drag'droped from onto blueprint graph (creates GetStreamingLevel node).
	* Added per actor option to ignore world origin shifting bIgnoreOriginShifting.
* Changed Material Editor Properties panel name to "Details."
* Use TSubclassof for Actor iterators instead of checking Actor is passed in at runtime.
* Prevented Static bool Material Expressions from adding preview option to right click menu.
* Allowed shift-click connections in blueprint style editors to be undone.
* Connections are now highlighted when hovering or marking a pin in the Material Editor.
* Added colour to Material Comments and allowed position of final input to be saved.
* Actors created during BeginPlay now get BeginPlay called on them.
* MIP Value Pin of Texture expressions now shown, along with any other expressions where users can affect the amount of inputs.
* Can now click on areas underneath the Material Editor stats bar.
* Prevent Play-In-Editor(PIE) notification from displaying in Material, SoundCue and SoundClass editors.
* Can now Ctrl+drag material pins correctly.
* Added tool tips for material nodes and pins.
* Material Editor Context menu now has a scroll bar.
* Right-click connections now undo/redo correctly.
* Material Functions placed from the palette will now work correctly.
* Material Parameters with the same name now share settings.
* Reduced node connection jitter by caching position of pins.
* Made sure Material node previews are synced up after being collapsed.
* Material Editor search results include newly added nodes.
* Pasted material function calls now display correct inputs.
* Prevented error when Lighting Model is not correct for Material Domain.
* Improved MarkPackageDirty performance.
* Transition Map option now uses dropdown picker.
* Prevented crash in Perforce module when cancelling tasks.
* C++ classes can now be created from the Class Viewer.
* Removed extra prompt when submitting to source control.
* Example games now have correct icon when packaged.
* Corrected grammar in warning about IDE installation.
* Option to display folders is now in the View Options menu.
* Removed non-thread safe message log access.
* When backend filters are applied folders are not displayed in the Content Browser. This means the view is 'flattened' when using any filtering.
* Added pre & post-import hook delegates.
* Updated options tooltips in PhAT.
* Files can now be made writable when deleting while source control is disabled.
* Events from Blueprint interfaces now have different appearance.
* Prevented crash when reloading level editor & maps.
* Made sure that actors/layers/BSPs in streaming levels are properly unhidden when rebuilding lighting.
* Arrow keys & enter now function correctly in Property Matrix.
* Double clicking on a parent event/function call now opens the parent Blueprint.
* Add Component nodes now copy their component defaults when copy & pasted.
* Popup combo window when adding keys to Matinee is now controllable via keyboard.
* Added more search keywords to Blueprint math library.
* Added new proxy struct customization for FTransform. All FTransform properties are now editable using rotator proxy for their rotation & appear like the actor transform in the details view.
* Level transform is now editable like Actor transform in the details view.
* Added IsValidIndex to TBitArray.
* Modified internationalization data structures so they can store and lookup entries using arbitrary metadata.
* Updating WIX third party library to final v3.8 release.
* Spline meshes no longer turn inside out when scaled negatively, and negative scale on the "forward" axis now flips the spline mesh front-to-back.
* Improved landscape alpha/pattern brush texture mask selector.
* Tooltips are now displayed for widgets even if the widget itself is disabled.
* **Slate**	 
* The following widgets now use a Slate Widget Style and are no longer dependent on FEditorStyle:
	* SProgressBar
	* SScrollBar
	* SExpandableArea
	* SSearchBox
	* SSlider
	* SVolumeControl
	* SSpinBox
	* SSplitter
	* STableRow
	* SDockTab
* The following widgets are no longer using FEditorStyle internally:
	* SExpandableButton
	* SNotificationList
	* SHeader
	* SSeparator
	* SBreadcrumbTrail
	* SNumericEntryBox
	* SColorPicker
* **Material Editor** 
	* The preview toolbar buttons in the material editor are now shown on a viewport toolbar, rather than being on the main toolbar.
* **PlatformerGame** 
	* Converted over to use Slate Widget Style assets, and now has no dependency on FEditorStyle.
* Replaced 'Kismet' with 'Blueprint' on AnimInstance events
	* Simulate command in PhAT now uses bound key correctly
	* Copy properties command in PhAT now works outside of the viewport
	* Removed ability to create derived blueprints from animation blueprints
* Foliage orientation is now limited to Max Angle setting when the ground changes during landscape painting
* Enable windows control-c handling for processes started with UE4Editor*-cmd, force termination on double ctrl-c to prevent destructors crashing
* Cleaned up several aspects of Strategy game including more user friendly asset names, removing unused assets, made audio usage consistent etc.
* StrategyGame camera has been revised and put into its own StrategyCameraComponent class. 
* Cleaned up several aspects of vehicle sample including stopping self destruct before race begins, allowed pause when playing in viewport etc.
* Cleaned up blackjack sample game interface - it now uses inter blueprint communication and the old interface bleuprint used to achieve this has been removed.
* Cleaned up blackjack fonts on objects. Chip value etc.
* Cleaned up some FORCEDINLINE in shootergame.

#### Rendering
* Default post process material now has a transparent hole in it, letting you see through to the previous pass. This stops the whole screen being obscured by a single texture when post process material are being compiled.
* When adding a new parameter to a material parameter collection, it now generates a proper unique name.
* Removed clamping from static mesh LOD distance setting.
* Improved accuracy of reflection capture for reflective surfaces. Fully rough dims specular.
* Added use directional lightmap material flag for ES2.
* Added fully rough flag to materials for ES2.
* Specular material output now works on ES2.
* **Misc Particle Rendering**
	* Automatically generated bounds are much tighter, fixes 'set fixed bounds' in Cascade.
	* Particles now face toward the light when casting translucent volumetric shadows.
 
#### Blueprints
* Improved blueprint node discoverability.
	* Added several search keywords to a variety of node types.
* Improved Blueprint node documentation.
	* Added verbose ("big") tooltips to several blueprint nodes to better document their purpose and functionality.
* Redesigned level actor reference nodes in Blueprints.
* Redesigned compact array function nodes in Blueprints.
* Expanding searching all Blueprints to include all comments.
* Components editor will now properly "duplicate" and "delete" utilize keybindings.
* Deleting in the My Blueprint window now utilizes keybindings.
* F5 will now "Step" in Blueprint debug.
* State machines can be renamed in the graph.

#### Gameplay and Framework
* Added delegates for breaking physics constraints.
* Exposed joint drive functions to Blueprints.
* Preparation work for treating maps as assets so they can be managed in the content browser.
	* UWorld objects are now named after the package that contains them, just like all other assets.
	* Added static function UWorld::GetWorldFromPackage to replace code that was searching for an object named "TheWorld" in a package.
* Filters in the content browser now show you subclasses of the asset type you select unless there is a more specific filter for that type.
	* For example, Blueprint will not show you AnimBlueprints, but DataAsset will show you all derived DataAssets.
* Many minor dedicated server perf improvements to reduce constant overhead of the main tick loop.
* Disabled many things in UE_BUILD_TEST that may affect performance.
* Memory reporting has been improved across the engine.
* The windows binned allocator is now around 5% more efficient and gives better memory debugging information.
* Reduced the stack size of worker threads on windows to save memory.
* Max Cull distance is now ignored in the editor viewports by default. Entering game render mode with G will respect max cull distance.
* Added priorities to focus in AIController. We can have different focus for movement, gameplay, etc.
* Find random location on navmesh is exactly constrained by radius in Detour now
* Added priorities to focus in AIController. We can have different focus for movement, gameplay, etc.
* Find random location on navmesh is exactly constrained by radius in Detour now.
* Added support for box, sphyl and sphere primitives as colliding obstacles in navmesh generation.
* Sounds are now parsed in the order they were played (as oppose to reverse order) so that when multiple sounds are played at the same time nodes such as the group control evaluate correctly.
* Additional command line parameters can now be specified for a standalone play session via the Editor -> Play In settings.
* Bulk Exporting of assets can now be done from the content browser.
* Some C++ files which were incorrectly placed in public include folders have been moved.
* Better handling of misdeclared SpriteInfo.
* Changed Persona so that it is possible to transform bones without an animation applied.
* Moved Persona's preview scene out of the animation viewport into Persona itself to reduce the amount of code needed to manage it.
* Refactored root motion code to use FTransform math instead of doing it manually.
	* Disable PhysicsRotation while doing root motion. DesiredRotation would fight root motion rotation.
* FRotator::Equals tests against normalized rotators.
* **COLLISION** 
	* Added collision mode visualization.



#### Core
* The random number generator is now seeded earlier in engine initialization to allow its use in startup code.
* FUTF8ToTCHAR::Length and FTCHARToUTF8::Length now return precise lengths, rather than 'big enough' lengths.
* UnrealHeaderTool reports an error when it is asked to process a missing file, rather than crashing.
* TArray::RangeCheck optimization.
* TArray::Append is now move-aware.
* Fully removed Visual Studio 2010 support (use the Nov 2012 QA build if you need 2010 support).
* Major improvements to UnrealBuildTool's dependency graph visualization ("-graph" option).
	* Output files are now saved in /UE4/Engine/Intermediate/<targetname>.gephi
	* Now includes five different graph types (see GraphVisualizationType in UBT).
	* Supports C++ header relationship visualization.
	* Better sizing of source file nodes.
	* General improvements and bug fixes.
* UnrealVS extension now supports Visual Studio 2013 (NOTE: UE4 does not compile with 2013 yet though).
* IntelliSense now works better with UE4 source code in Visual Studio.
* Various UE4 compile time improvements. (ongoing)
* Editor:  We now force "faketouches" mode in ES2 preview when launched from editor.
* Began adding experimental support for Clang compiler on Windows platform.
* UnrealBuildTool will now emit warnings if Intermediate folders are encountered while looking for module source code.
* Async loading improvements (performance + fixes).
* Added a VS2013 build of MCPP. 
* Added a VS2013 build of nvtesslib. 
* Added a VS2013 build of nvtexturetools. 
* Added a VS2013 build of Vorbis and Ogg. 
* Added a VS2013 build of nvtristrip. 
* Added a VS2013 build of ForsythTriOptimizer. 
* Added a VS2013 build of HACD. 
* Added a VS2013 build of ICU. 
* Added a VS2013 build of Box2D. 
* Added a VS2013 build of hlslcc. 
* Added a VS2013 build of libPNG and zlib. 
* Added a VS2013 build of IntelTBB. 
* Added a VS2013 build of FreeType2. 
* Added a VS2013 build of Recast. 
 
#### Networking
* First pass converting most network error messages to FText.
* Made FURL parameter by reference into NetDriver::InitListen so that actual port assignment can be passed back out.

#### Platforms
* Added the concept of Architecture to UBT. Beginning to be used in IOS ("-simulator") and HTML5 ("-win32"). This way, we don't need multiple platforms for a different CPU architecture.
* Added a VS2013 build of DirectShow. 
* Added a wincrypt include which is necessary for VS2013 builds. 
* Made the StaticMesh editor show a dialog warning users that the "Generate Unique UVs" feature isn't implemented on non-Windows platforms.
* **Mac**
	* Stopped windows overlapped by the main editor window from stealing mouse clicks when running under Mavericks' new default multi-monitor mode.
	* Made sure that windows close, move & don't disappear when moved across screens under Mac OS X Mavericks' new default multi-monitor mode.
	* Use the extensions added by newer OpenGL versions provided on Mac OS X for debug & texture loading features when available. 
	* Prevented Mission Control keyboard shortcuts from confusing the editor & breaking keyboard input.
	* Manually handle display reconfiguration on Mac OS X so that windows don't disappear under Mavericks' new default multi-monitor mode.
	* Made the default merge tool p4merge.app on Mac OS X. 
	* Make the editor services 'Launch Game' use the default application to open (the project the same as double-clicking in Finder).
	* Prevent blue flickering on AMD cards under Mac OS X when more than one UE4 instance is running.
	* Worked around an NVIDIA driver bug to avoid crashes loading some samples on Mac OS X.
* **Moblie**
	* Added support for texture streaming on iOS.
	* Cleaned up OpenGL TexStorage2D handling and added support for texture storage on iOS.
	* Added callback function to handle OS low memory warning, implemented on iOS.
	* Changed iOS allocated memory stat to use the task_info() api which returns the per-process stat.
	* Improvements to virtual joystick on iOS.

#### Online
* Changed GenerateRandomUserId for OSSNull to always use Guids.
	* **Steam**
		* Steam App Id printout in logs for easier access.
		* Check for Steam Dlls to be loaded before calling actual Steam API calls, fail module if not present.
	* **Misc**
		* Added some stats to online tick functions and async task manager.


## Known Issues
* **INFILTRATOR**
	* Lighting is darker than previously.
	* Editor unresponsive when launched
* **CONTENT EXAMPLES**
	* Mouse_Interface: Extra mesh.
	* NavMesh: Pawns broken in game.
	* Input_Examples: Some controls are not working
* **EDITOR**
	* Keyboard Shortcuts: Changing modifier keys commits binding prematurely.
	* Sub-editor performance has dropped during weekly tests.
* **ELEMENTAL**
	* CRASH: Invalid number of texture coordinates.
* **PLATFORMERGAME** 
	* SaveGameBP unresolved compiler error.
* **SHOWCASES**
	* PostProcessMatinee: Rebuilt lighting error.
* **WORLDBROWSER**
	* Player can not move when Play-In-Editor. 
* **SHOOTERGAME**
	* CRASH: After building lighting on Highrise.
* **Unreal Frontend** 
	* Advance tab won't use the PS4 settings rather it will attempt to build and stage the XboxOne.
	* Samples projects will fail to launch from the Unreal Frontend.
* **MAC** 
	* RENDERING: Graphics corruption in viewport.
* **PS4** 
	* Crashes on launch (PS4File.cpp: Assertion failed: OpenParams != nullptr)
* **RENDERING** 
	* OPENGL: ES2: CRASH: Exiting game
* **VEHICLE** 
	* Users on low-end video cards with Low FPS are unable to complete the course.












