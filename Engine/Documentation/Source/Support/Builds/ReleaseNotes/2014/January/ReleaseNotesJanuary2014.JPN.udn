INTSourceChangelist:3782314
Title:2014 年 1 月リリースノート
Crumbs:%ROOT%, Support/Builds
Description:
Availability:Licensee
Parent:Support/Builds
Order:-2

[TOC(start:2 end:2)]

## ビルド情報


[REGION:simpletable]
| アイテム | 情報 |
| ---- | ---- |
| **ラベル** | [INCLUDE:#labels] |
| **Built from Changelist #** |  (//depot/UE4-QA/Promotable-CL-1986836) |
| **Branched from Changelist #** |  (//depot/UE4/Promoted-CL-1973917) |
| **Visual Studio Version** | Microsoft Visual Studio 2012 Version 11.0.60610.01 Update 3 |
| **DirectX** | June 2010 |
[/REGION]

[COMMENT:none]

[EXCERPT:Labels]
QA_APPROVED_UE4_BUILD_2014_01  
QA_APPROVED_UE4_BUILD_CURRENT  
QA_APPROVED_UE4_BUILD_MINIMUM
[/EXCERPT:Labels]

[/COMMENT]

## 重要情報

 * 現時点のエンジン開発ロードマップ: [UE4 Roadmaps](https://udn.unrealengine.com/questions/topics/roadmap.html)
 * 修正されたバグ： [UE4 Fixed Bugs January 2014](UE4_Fixed_2014_January.xlsx)
 * 周知のバグ： [UE4 Known Issues January 2014](UE4_Bugs_2014_January.xlsx)
 

## 主要な新機能

####ブループリント

* **Format Text ノード** 
	* 新しい Format Text ノードがブループリントに追加されました。	

		![](Support\Builds\ReleaseNotes\2014\January\FormatTextNode01.png)

	* 「Format」テキストはリテラルあるいはピン接続が可能です。リテラルとして使用すると、フォーマットのために引数が自動生成されます。 

		![](Support\Builds\ReleaseNotes\2014\January\FormatTextNode02.png)

	* これらの引数はリテラルとして、または変数から入力することが可能で、出力テキストは引数をピンに接続している値に置き換えます。	 

		![](Support\Builds\ReleaseNotes\2014\January\FormatTextNode003.png)

	* 「Format」ピンは接続された場合、変数のため解読は不可能です。この場合、ピンを自分で追加し、可能性のある引数に因んだ名前を付けます。このように、Format Text ノードの使用設定は、複数の可能性に対して行うことができます。引数が Format の引数に一致すると、与えられた情報を利用します。	

		![](Support\Builds\ReleaseNotes\2014\January\FormatTextNode04.png)

	* ピンの名前は [Details] パネルで変更、追加、削除することができます。

		![](Support\Builds\ReleaseNotes\2014\January\FormatTextNode05.png)

* **ノード スタイルの変更と Append Array 機能**
	* 1 つの配列のコンテンツを別の配列の終わりに追加する Append Array 機能がつきました。	

		![](Support\Builds\ReleaseNotes\2014\January\AppendArray.png)

	* ブループリントのレベル アクタ リファレンスを見つけやすいデザインに変更しました。	

		![](Support\Builds\ReleaseNotes\2014\January\References.png)

	* 配列機能ノードも新しいデザインになりました！！	

		![](Support\Builds\ReleaseNotes\2014\January\ArrayFunctionNodes.png)


#### エディタとツール

* **サウンドキュー エディタ**
	* サウンド ノードのパレットがサウンドキューのエディタに追加されました！

		![](Support\Builds\ReleaseNotes\2014\January\SoundPalette.png)

* **イベントのリスト出力**
	* グラフのサブイベントリスト出力が [My Blueprint] タブに再度追加されました。イベント ノードのフォーカス、名前の変更 (カスタム イベント用)、検索、削除はここで行えます。						

		![](Support\Builds\ReleaseNotes\2014\January\EventListing.png)

* **ドキュメント**
	* それぞれのノードを分かりやすく説明するために、ツールチップが多数追加されました。

		![](Support\Builds\ReleaseNotes\2014\January\Documentation.png)

* **Scalability インターフェース**
	* 拡張性に対し新しいユーザー インターフェースがエディタに追加されました。	

		![](Support\Builds\ReleaseNotes\2014\January\scalability.png)

* **シーン アウトライナーにおけるアクタの可視性**
	* 各アクタの脇に表示される目のアイコンを使って、シーン アウトライナーからアクタの可視性の切り替えが簡単にできるようになりました。

		![](Support\Builds\ReleaseNotes\2014\January\ActorVisibility.png)

* **レベル ビューポート**
	* レベル ビューポートで、例えばカメラを選択すると、カメラから見えるものを現在のビューポートの [Picture-in-Picture] ボックスでプレビューすることができます。カメラの選択を解除すると、プレビューされなくなります。  

	* レベル ビューポートの [Actor Previews] にこれらのボタンを追加したので、別のオブジェクトを選択しても表示されたままになります。

		![](Support\Builds\ReleaseNotes\2014\January\LevelViewport01.png)

	* 見ての通り、これは加算なので、ピンしたプレビューに加えて、選択した他のプレビュー アクタも見ることができます。 

	* 例えば、カメラ視点のプレビュー中に、マチネや複数のビューポートを使用せずにカメラショットによるアクタの移動にこの機能を使うと便利です。	

		![](Support\Builds\ReleaseNotes\2014\January\LevelViewport02.png)

#### レンダリング
* **Sky Light と事前計算されたベント法線**
	* Sky Light アクタと Sky Light コンポーネントがブループリントに追加されました。

	こちらは、SSAO のみの Ambient Cubemap です。	  

	![](Support\Builds\ReleaseNotes\2014\January\Skylight01.png)	

	そしてこちらは、ベークされたシャドウイングのある Sky Light です。	

	![](Support\Builds\ReleaseNotes\2014\January\Skylight02.png)	

	**ユーザビリティ**	
	 
	* Sky Light はレベルの遠い部分 (Sky Distance Threshold 以遠全て) をキャプチャし、それをライトとしてシーンに適用します。  
	  
	使用するキューブマップを手書きのコードによって指定することもできます。		

	![](Support\Builds\ReleaseNotes\2014\January\CubeMap.png)	

	* これまでは、Lightmass の環境色を通過するスカイ ディフーズに異なる定数カラーを与えながら、スカイを反射させる Ambient Cubemap を選択しなければなりませんでした。 
	 
	* Sky Light は完全に環境色に変わり、やがては Ambient Cubemap に変わります。 

	* ただし、現時点では、ライティングを再ビルドまたは手書きのコードによる指示では Sky Light はシーンを再キャプチャするのみです。 
	 
	**ベークされたシャドウイング**		

	* 現在サポートされている Sky Light は、Stationary Mobility のあるバージョン、つまり Lightmass からベークされたシャドウイングのみです。	

	* レベル内に Sky Light を置いたら、ベークされたシャドウイングを取得するために再度ライティングをリビルドする必要があります。  

	Sky Light によってのみリットされます。	

	![](Support\Builds\ReleaseNotes\2014\January\Skylight05.png)

* **実験的な新機能：DBuffer Deferred Decals**
	* ベークされた / lightmass ライティングで Deferred decals が使えるようになりました。	 
	負荷があるので、全てのプロジェクトがベークされたライティングを使用するわけではなく、適切なデカールが必要です。プロジェクト設定としての有効化が可能で、デカール ブレンド モードを変更する必要があります。	

		![](Support\Builds\ReleaseNotes\2014\January\DBufferDeferredDecals01.png)	

	右側は、従来のデカール (no DBuffer) のあるベークされたライティングのライティングは壊れます (左側のように見えるべきです)。
	* 機能をアクティベートするには以下を行います。
		* ローカルで DBuffer を試すには、 [SystemSettings] の BaseEngine.ini に置きます。
		* r.EarlyZPassMovable=1
		* r.EarlyZPass=2
		* r.DBuffer=1
		* 新しい DBuffer decal blend モードを使用します。
	* プロジェクトでその機能を使用したい場合は、同じ変更をプロジェクト設定で行うことができます。


## 新規追加 

#### エディタとツール
* 1 つのフィルタを分離し有効にするために、新しいアセットブラウザ フィルタ コンキテクスト メニューを入力します。
	* アクティブなフィルタのリストの中の 1 つのフィルタ上にコンテクスト メニューを表示させて、[enable this only: `<filtername>`] を選択することでアクティベートします。
* LOD のタイトルを折りたたんでも、LOD Distance が表示されるようになりました。
* プロパティ マトリックス ビューでサポートするアセットに対し [Asset picker] ボタンが表示されるようになりました。
* 選択されたグループ化されたアクタ上を Ctrl ＋クリックすると、グループ全体の選択が解除されるようになりました。
* フィルタ メニューの一番下にフィルタリセット用のボタンが追加されました。
* サブメニュー入力上でボックスとアクションが切り替えられるようになり、サブメニューを使用するための CB フィルタ メニューが修正されました。
* Dirty maps/assets が名前の横のドックタブにアスタリスクを表示するようになりました。
* コンテンツ ブラウザのアセットを右クリックと、Explore コンテンツ メニュー オプションが追加されました。
* シーン アウトライナーに可視性の切り替えが追加されました。
	* クリックにより複数の可視性アイコンをスワイプできるようになりました。
* サウンド ノードのパレットがサウンドキュー エディタに追加されました。
* マテリアル エディタ 表現式と関数リストが 1 つのパレットにまとめられました。
* サウンドキュー エディタの Sound ノードをダブルクリックするとそのノードが再生されます。
* マテリアル関数がマテリアル エディタの右クリック コンテキスト メニューに追加されました。
* Material ノードの Particle Direction、Particle Speed、Particle Position、Particle Relative Time がメッシュ パーティクルで機能するようになりました。
* UTF-8 のサポートが Perforce プラグインに追加されたので、ユニコード サーバーが使用可能になりました。
* インスタンス化されたスタティック メッシュ コンポーネントが [Blueprint Components] ビューで編集可能になりました。
* Engine API ドキュメントが CHM フォーマット (Engine\Documentation\CHM\API.chm に格納) で利用可能になりました。 
* ランドスケープでハイトマップとウェイトマップのインポート / エクスポートに .png フォーマットがサポートされるようになりました。
* [Change component size] ツールがランドスケープ エディタに追加されました。
* ランドスケープ スプラインに Cut/Copy/Paste サポートが追加されました。
* ソース メッシュのコリジョンが変更されると、スプライン メッシュ コリジョンが自動的に再ビルドされるようになりました。
* ランドスケープ スプライン上に投影されているシャドウを無効にするオプションが追加されました。
* スプライン メッシュに MaterialOverrides が追加されました。
* GetMorphTarget ブループリント呼び出し可能な関数が追加されました。

#### ブループリント
* ブループリントに接続しデディケイテッド サーバー上で起動する TimelineComponents を認識するために、Blueprints.Find Timelines On Server エディタ自動化テストが追加されました (Timelines はティックしパフォーマンスに影響を与えることができます)。
	* このテストはどのタイムラインがノンコスメティック (サーバー) イベントにより実行される可能性があるかを見つけるために実行チェーンを後ろから辿って、ログ内にこれらをエラーとしてフラグします。
	* マクロが StandardMacros ("Can Execute Cosmetic Events") に追加されました。自動化テストはこのマクロを明示的にチェックします。
* GetStreamingLevel BP ノードが追加されました。ブループリントのレベル ストリーミングをよりよく制御する ULevelStreamingKismet オブジェクトを返します。
* コンポーネントの可動性を表すアイコンがブループリント コンポーネント リストビューのコンポーネントに沿って表示されるようになりました。
* イベント ナビゲーションが再度 [My Blueprints] タブに追加されました (グラフで実行されたイベントがツリーでリスト化されるようになりました)。
* ブループリント内部では、移動性の強いコンポーネントが移動できないコンポーネントを親にすることはできなくなりました。
* ブループリント内部では、エディタのみのコンポーネントの下のゲーム コンポーネントを親に持つことはできなくなりました。
* ブループリントで利用可能なオブジェクト上で (ProhibitedInterfaces メタデータ経由で) インターフェースが実行されるのを禁止できるようになりました。
* Blueprint ノード上で、オブジェクト ピンが入力タイプから派生したオブジェクトを直接受け取れるようになりました。
* 任意のリビジョンに加えて、任意のブループリントをお互いに diff できるようになりました。
* Append Array 機能をブループリントに追加しました。
* Format Text ノードがブループリントに追加されました。
* テキスト変数をリテラルとして処理することができるようになりました。
* Number ノードに対し、様々なテキストがブループリントで利用できるようになりました。

#### レンダリング
* パフォーマンスと品質のバランスを取るためにエンジン設定が簡単に制御するコンソール コマンドのスケーラビリティが新しく追加されました。コンソールに「scalability」とタイプし、使用方法に関する全てのドキュメントを確認します。
* 新しい UI が [View] -> [Engine Scalability Settings] に追加されました。Scalability コンソール コマンドが提供するのと同じ機能へアクセスできます。
* スタティック メッシュおよびスケルタル メッシュの LOD 計算のスケール係数が追加されました。
* 2D シーン キャプチャ コンポーネントに対しポストプロセスのオプションが追加されました。
* スタティック メッシュ上に SetRenderCustomDepth(); と呼ばれる bRenderCustomDepth プロパティを切り替えるブループリント機能が新規に追加されました。
* エフェクトのソース アクタでコリジョン チェックを有効にする新規チェックボックスがコリジョン パーティクル モジュールに追加されました。相互作用させたいメッシュとパーティクルでブループリントを作成する場合に便利です。
* 透過処理がされたサーフェスに対する頂点フォグの使用を切り替えるマテリアル チェックボックスが新規追加されました。
* **Sky Light 機能**
	* ディフューズとスペキュラとユーザーが直接見ている物の間でスカイライトは統一されます。
	* スカイライト コンポーネントは距離ジオメトリを自動的にキャプチャし、それをライティングとしてシーンに適用します。
	* Lightmass はベント法線アンビエント オクルージョンをベークし、それにより指向性シャドウイングが生じます。
	* この機能は新しく、まだ完全には機能していません。例えば、透過アイテムにはキャラクター シャドウが全く適用されません。
* Particle light モジュールを透過アイテムに影響するようにオプトインすることができます。
* 全ての間接ライティングにマテリアル アンビエント オクルージョン出力が適用され、ボリュメトリック パーティクルに有益です。
* **事前計算されたビジビリティの改善点**
	* より完全に可能性のある再生エリアをカバーする新しいセル配置ヒューリスティックが追加されました。ただしビルド時間は増えました。
	* ビルド時間に対して様々な最適化が行われました。
	* 事前計算されたビジビリティの信頼性が向上しました。モバイルには重要なことです。
* **カスタム仕様の UV** 
	* 負荷が大きい操作をピクセル シェーダー マテリアル入力を補間する頂点シェーダーへ移動できるようになりました。
	* [Customized UVs UDN Page](https://udn.unrealengine.com/docs/ue4/INT/Engine/Rendering/Materials/CustomizedUVs/index.html)
* **適応サンプリングを用いたライトマス GI ソルバ**
	* 同じビルド時間での、状況が悪い方 (小さい窓から明るい光が差し込む) に高品質が提供されます。
	* 新しい World Settings lightmass プロパティ：必要とするマップに対するソルバ品質を高めるために使用する IndirectLightingQuality です。
* ini: r.EarlyZPassMovable=1   r.EarlyZPass=2  r.DBuffer=1 から有効化される DBuffer deferred decals (実験的な機能、ピクセル GPU メモリにつき負荷が 10bytes プラス、ライトマップによるデカールが可能、色、法線、ラフネス、分離したオパシティに対応 ) が追加されました。

#### ゲームプレイとフレームワーク
* LogVisualizer の改善点： ログ カテゴリのフィルタリング
* CharacterMovementComponents はポーンが立っているオブジェクトに力を適用し、PlayerPhysics が有効な場合オブジェクトにそれをオーバーラップさせるように一定の反発力を生成します。
* Physical Asset Tool (PhAT) の凸包サポート
* ナビゲーション クエリにカスタム仕様のフィルタを渡す方法が追加されました。
* GameplayDebuggingComponent を LogVisualizer と結びつけたので、AI がシミュレーション モードで LogVisualizer が存在すると、 LogVisualizer が選択された AI の表示ログを切り替えます。
* ReferenceViewer が EpicLabs ではなく、メイン エディタの一部になりました。
	* 既存のリファレンス ツールがリファレンス ビューアーのノードの右クリック メニューに移動しました。
	* グラフをより健全にするために、深度と幅の制限に対するサポートが追加されました。履歴も追加されました。
* CameraBlockingVolume が追加されました。このシンプルなボリュームは、 ECC_Camera コリジョン チャネルをブロックします。 
* KillZVolume が追加されました。このシンプルなボリュームに触れられたポーンは殺されます。
* MemReport コマンドは、Saved/Profiling/MemReports に対し包括的なメモリ レポートを出力します。動作は UE3 での memleakcheck と同じです。それが実行するコマンドは ini ファイル内で変更できます。
* **ForceFeedback**
	* ForceFeedbackEffect アセットがコンテンツ ブラウザで作成できるようになりました。エフェクトには、カーブと、そのカーブに影響を受けるサーボを示す boolean を含むエントリの配列が含まれます。
	* エフェクトの再生 / 停止は、 PlayerController の関数呼び出しによって実行されます。
* **SoundGroups**
	* SoundWave は SoundGroup に割り当てられます。サウンドグループは異なる解凍プロパティを持つことが可能です。今後サウンドグループは、ストリーミングするサウンドにフラグを立てるために使用されます。
	* カスタム仕様のゲームの SoundGroups はカスタム仕様の Collision Profiles と幾分似たように指定することができます。
* AnimNotify UI を手直ししたので、通知がトラックにクランプしてドラッグ＆ドロップがしやすくなり、トラック表示のズーム化を自動的にパンします。
* AnimNotifies をリファクタリングしたので、以前は使用が許可されていなかった時間 (0、シーケンスの長さ、セクション時間) の設定が可能になりました。
* アニメーションをリターゲットするスケルトンがコンテンツ ブラウザに追加されました (NULL スケルトンでアセットを開くと自動的にトリガーされます)。
* モーフ ターゲットの LOD のインポートが追加されました。
* ペルソナに UV 表示が追加されました。
* 頂点法線、接線 、従接線のビューがペルソナに追加されました。
* **ボイス**
	* 新規ボイス キャプチャ インターフェースの初回パスです。
		* DirectSound ボイス キャプチャの実装 (125ms 通知) が実装されました。
		* 適切な列挙方変数の不足 / マイクのプラグインとアウトの探知 (差し当たり起動時はプラグインのまま)。
	* 新規ボイス コーデック インターフェースの初回パス (opus 1.0.3、まもなく 1.1) です。
	* ボイス コーデックのタイミングに統計情報が追加されました。
* **スケルタル メッシュ** 
	* Simplygon を使用したボーン削減をサポートします。 
	* Simplygon によるメッシュ削減を実行する前に、選択したボーンを LOD から削除します。


#### コア
* Added hierarchical stats 表示が追加されました (stat groupname+、詳細は stat コマンドを使用)。
	* スレッドセーフ バージョンの FMemStack が追加されました。
* The UnrealHeaderTool マニフェスト (UHT の実行に使用する「レスポンス ファイル」) が中間フォルダに書かれるので、ビルド エラーの診断あるいは UHT のデバッグに使用できるようになりました。
	* マニフェストが JSON フォーマットになり、人間にとって読解が、またコンピュータにとってはパースがしやすくなりました。
* 診断を変更しやすいように、ホット リロードのコンフリクトは生成されたヘッダ ファイルの横に書き込まれます(.generated.h.conflict ファイルとして)。
* UnrealHeaderTool が UTF-8 BOMs のファイルをサポートするようになりました。
* Play-In-Editor(PIE) 用に複製されると、プロパティがシリアル化のみされるように、NonPIETransient プロパティ指定子が追加されました。
* 追加のパッケージ ファイル位置を指定できるように -pakdir=dir コマンドライン パラメータが追加されました。
* ゼロ エンジン バージョンのサポート - エンジンは 0 エンジン バージョン (ローカル ビルド) パッケージのロードが可能になりました。
* NULL (None) アクティブ クラス リダイレクトのサポート
* リファレンスの除外が AddReferencedObjects でサポートされるようになりました。
* asymetrical キーでパッケージ ファイルに署名する機能が追加されました。

#### プラットフォーム
* コントローラのバージョンが追加されました (現在は PS4 のみサポート)。
* ハイレベルな Game DVR コントローラが追加されました (現在は PS4 のみサポート)。
* スレートでのセーフ ゾーン サポートが追加されました (SSafeZone ウィジェット内部にウィジェットをおきました。例は ShooterGameLoadingScreen または SSafeZone.h の一番上をご覧ください) (現在は PS4 のみがセーフ ゾーンを指定)。
* **Mac**
	* Mac OS X のエディタ用に C++ シンボルのロードが実装されました。
	* エディタ内から Xcode のファイルをもっと開きやすい方法が実装されたので、新規のコード ファイルは Xcode プロジェクト内で開きます。

#### オーディオ
* オーディオ コンポーネントが整数のパラメータを持てるようになりました。
* サウンド キュー用のスイッチ ノード
* オーディオ コンポーネントで整数のパラメータを使用すると、多岐分岐の実施が可能です。

#### アニメーション
* アニメーション シーケンスの編集時、オーディオのミュート機能が [Viewport] メニューに追加されました。 

#### ネットワーキング
* ライフタイムにレプリケートされたプロパティのアクティブ ステータスをオーバーライドする機能。
	* DOREPLIFETIME_ACTIVE_OVERRIDE during AActor::PreReplication 中は DOREPLIFETIME_ACTIVE_OVERRIDE が使用されます。     
* ネットワーク パフォーマンスにいろいろな機能が追加されました。
* 接続を通じレプリケーション作業の共有化がデフォルトでオンになります (パフォーマンスの向上)。
* FNetworkGUID ack logic が簡素化されました (レベルのロード時にロードのログ スパムを削減します)。


## アップグレード ノート

#### エディタとツール
* Landscape ES2 :Landscape UV increase from 2 to 3 to be same as LocalVertexFactory.
* Collision properties are now duplicated correctly.
* Sub-levels no longer get marked as dirty when added to the level.
* WorldSettings label is now hidden.
* Collections button now updates it's source control state when clicked.
* New PIE windows no longer get greyed out when debugging blueprints.
* FBX Import options are now remembered.
* Added missing tooltip for some material properties.
* Update the Collision Profile when the Collision Channels are built.
* Menu asset picker now excludes assets which belong to unloaded maps.
* Collections now save again.
* "Press Escape" message now only appears when autosaving.
* Removed LocalizeError usage.
* Alpha value of color themes now appears correctly depending on the color picker type being used.
* DestructibleMesh property is no longer collapsed.
* Remove 'Debug' as an packaging option if solution is missing i.e. non-code.
* "Save" name and tooltip restored in asset editors.
* Changed Cascade Module warning from a dialog to a notification.
* Modifications to UFortUIFeedbackBank properties now work as expected. 
* Property matrix column widths are now preserved between object selections.
* ContentBrowser asset view now recieves keyboard focus when syncing to assets.
* ContentBrowser view modes now have a persistent layout.
* Prevent opening locked content browsers to sync assets.
* Added missing small icon for local and world coordinate system.
* Collections are no longer removed, when creating, if the rename loses focus.
* Renamed 'asset' to 'item' in the content browser counter.
* Disable the 'add code to project' option when the user has no compiler.
* Replaced 'invalid collision' dialog with notification.
* Refactor how the sprite category localization is handled.
* Collections now appear expanded by default, and can be resized.
* Save message reworded to say Matinee.
* Adding missing small Phat icons.
* When dragging an asset over a tab, it'll now become active after a short period.
* Copy/Pasting nodes created with keyboard shortcuts no longer crashes.
* Layout is now also saved when exporting preferences.
* The option to auto recompile blueprints on PIE is now controllable from Editor Preferences. 
	* Any custom *.ini files referencing Kismet.AutoRecompileOnPIE should be changed to use /Script/UnrealEd.LevelEditorPlayInSettings.AutoRecompileBlueprints in the relevant EditorUserSettings ini instead.
* ALevelGridVolume actor was removed.
* GetOverlappingActors no longer returns the actor the call is made on.
* Changed Position & Translation to Location in Blueprint functions; impacts several C++ functions:
	* UPrimitiveComponent::AddImpulseAtPosition() becomes UPrimitiveComponent::AddImpulseAtLocation()
	* UPrimitiveComponent::AddForceAtPosition() becomes UPrimitiveComponent::AddForceAtLocation()
	* UMovementComponent::ConstrainPositionToPlane() becomes UMovementComponent::ConstrainLocationToPlane()

#### レンダリング
* An error in the calculation of text render actor vertical alignment transforms has been fixed.This may potentially result in some text being incorrectly position, which will need manually correcting.
* **Engine Scalability**
	* Added GetRenderingDetailMode to Kismet.
	* Added GPUIndex to HardwareSurvey.
	* More polish on engine scalability feature.
	* Added ECVF_Scalability to document if a cvar can be used as scalability option.
	* Added Blueprint GetRenderingMaterialQualityLevel, added help and clamped another one.
	* Added r.CompileShadersForDevelopment to allow for faster shipping build when set to 0 (needs to be manually activated, unfinished feature).
	* Added MaterialQualityLevel to scaleability settings - JonL suggested 0/1/1/1, could have been 0/0/1/1 - depending on content.
	* Optimized very low spec rendering cost for Fortnite, disables UI Blur background.
	* r.earlyzpass now renders all non moving objects if in mode 2 (masked or small on screen).
	* Added PF_R8G8 UNORM texture format.
* **Post Processing**
	* Clamped minimal speed for eye adaptation to not have people disabling eyeadaptation through this parameter.
	* Reenabled FastBloomThreshold as this was more noticable there.
	* Removed toe factor - isn't used in new tonemapper anyway - old tonemapper doesn't exist any more.
	* Added debug export to the graph for much nicer readble graphs (using yWorks) r.CompositionGraphDebug exports the files to the screenshots folder.
	* Reenabled native fullscreen for video options.
	* Experimental feature work: made screenspace subsurface scattering using alpha scene color alpha channel to separate out specular, very minor cost for most passes and if using a 32bit format we don't have the enabled.We intend to use enable ScreenSpace subsurface scattering and that is needed for high quality, see r.SSSSS 150 on subsurface material with a specular.
	* Typed console variables vars for better performance when reading cvars (main and render thread).
	* Improved interface to DrawDenormalizedQuad(), now renamed to DrawRectangle(), by default using classic quad, can be a triangle.
	* Allow visualization of EarlyZPass content using "vis SceneDepth@0"

#### ブループリント
* Nested blueprint components may have their mobility altered if their parent is more mobile than they are.
	* We no longer allow sub-components to be flagged with less mobility than their parent.
* Blueprint game-components will be unnested (or swapped, if the root) if they were previously nested under an editor-only component.
	* We no longer allow game-components to be nested under editor-only ones.

#### ゲームプレイとフレームワーク
* Switched navigation system's API from using const FNavigationQueryFilter* to TSharedPtr`<const FNavigationQueryFilter>`
* InputComponent  bindings made in native code now use UObject binding instead of dynamic binding.
	* BIND_AXIS and BIND_ACTION should no longer be used and, while they remain currently for ease of conversion, they will be removed in the future.
	* Instead BindAxis and BindAction functions on InputComponent should be used.BindKey and BindTouch have also been added.
* MinCompressedDurationGame/Editor has been removed.See new feature SoundGroups for details on replacement.

#### コア
* Classes saved in blueprints are now converted to notplaceable if they inherit a notplaceable base.
	* Previously it would assert.
* TIndirectArray no longer inherits TArray.
	* Any code which does TIndirectArray->TArray casts will now fail.
	* Code which uses non-exposed TArray functions will need changing, e.g. GetData() should now be GetTypedArray().
* Some pathnames have been shortened to try and reduce MAX_PATH overflows.
	* This may affect navigation or batch files which expect files to be in particular places.
	* Notably, Intermediate/BuildData/Include is now Intermediate/Build/Inc.
* TWeakObjectPtr now static asserts that it is being instantiated with a UObject-derived type.
	* This will require that a full class definition wherever TWeakObjectPtrs are constructed, as the compiler won't just assume that your type is a UObject any more.
* begin() and end() are no longer container methods.
	* These functions were added purely for ranged-for support; they were not intended to be used in user code.Ranged-for will still work as it uses an alternative system.
	* Any code using .begin() or .end() on UE containers should be converted to use ranged-for or the older CreateIterator-style of iteration.
* UnrealHeaderTool will now throw an error when it encounters a default argument that it can't parse.	
	* Code like this, for example, will need to be modified to use NULL:
	* `UFUNCTION(BlueprintCallable, Category="SomeCategory")`
	* `void Func(UObject* Obj = nullptr)`
	* `{`
	* `}`
* Eliminated bCompileMonolithicBinary global variable which was sometimes used by game targets 
	* Instead, override ShouldCompileMonolithic() in your program's TargetRules file (MyGame.Target.cs).
	* You can still use command-line arguments to override this if needed (-modular, -monolithic, or MONOLITHIC_BUILD=1).
* Removed "Fast Iteration Mode" from Unreal Build Tool (incomplete feature).
* Default minimum Windows API (WINVER) was bumped to 0x600 (Windows Vista or higher).
	* If you want to target Windows XP, set UEBuildWindows.SupportWindowsXP=_true_.
	* When targeting Windows XP, we use WINVER 0x502 (XP SP3).
	* Windows XP support is a work-in-progress, but we are committed to supporting it in a future build.

#### プラットフォーム
* Putting all device profiles back in the editor. 
* Removed the DeviceProfiles.ini and converted this to use the same config hierarchy as other engine config files.Base->Default->Saved
* Updated the Texture Content Streaming to use allow usage of CVar where we would otherwise have specified that we use a config option.
* Putting back this property.
* Removed Device Profile redundant properties. 
* Updated the device profile setup to allow CVars to be initialized eary and removed Device Profile Blueprints, This has resulted in the creation of device profile plugins which run selection logic.  
* Updated save to defaults, so that array writes are using correct syntax. 
* Updated the settings editor to save after importing.
* **iOS**
	* Virtual joysticks have changed for touchscreen devices.They now use an asset.If you want to disable the joysticks, override the InitialTouchInterface ini setting in the [MobileSlateUI] section of Engine.ini
	* Unreal Launch Daemon has been fixed to work with Messaging to allow for device discovery and deploying/launching from UFE/UAT.
* **Unreal Frontend**
	* Unreal Frontend (UFE) can now utilize plugins.
	* Update to messaging to allow for static ips.
		* To see a device or session on a subnet different than the PC, do the following (these steps are also needed to see the PS4):
			* Run UFE once to generate the Engine/Programs/UnrealFrontend/Saved/Config/Windows/Engine.ini
			* Edit Engine.ini and add to the [/Script/UdpMessaging.UdpMessagingSettings]
			* StaticEndpoints=<ip of device>:6666
			* To add more than one device, add the line multiple times.
			* In the case of iOS, push Unreal Launch Daemon to the device and run it, add the static ip address as above, and it will now see the device.
			* In the case of PS4, just add the ip address as above and it will see sessions on the kit.
			* This hasn't been tested with XB1, but it should work.
	* Added ability to copy and save the launcher log.
	* Addition of Quick Launch to UFE.
		* Quick Launch will start a cook on the fly server, deploy, and launch the project on the selected device.
		* If -development is specified on the UFE command-line, Quick Launch will also build the project before launch.

#### ネットワーキング
* Lifetime properties are the only supported path now, this will most likely require code changes.
* GetReplicationList has been replaced by GetLifetimeReplicatedProps.
	* GetLifetimeReplicatedProps is only called once now.
* DOREPLIFETIME to register non conditional properties.
* DOREPLIFETIME_CONDITION to register properties with conditions.
* Possible conditions:
	* COND_None					- This property has no condition, and will send anytime it changes.
	* COND_InitialOnly			- This property will only attempt to send on the initial bunch.
	* COND_OwnerOnly			- This property will only send to the actor's owner.
	* COND_SkipOwner			- This property send to every connection EXCEPT the owner.
	* COND_SimulatedOnly		- This property will only send to simulated actors.
	* COND_AutonomousOnly		- This property will only send to autonomous actors.
	* COND_SimulatedOrPhysics	- This property will send to simulated OR bRepPhysics actors.
	* COND_InitialOrOwner		- This property will send on the initial packet, or to the actors owner.
	* COND_Custom				- This property has no particular condition, but wants the ability to toggle on/off via DOREPLIFETIME_ACTIVE_OVERRIDE.


## 今後の追加事項と継続項目

#### エディタとツール
* It is no longer necessary to hold CTRL to move curve control points in matinee.
* There is now a "cancel" button on the "Compiling C++ Code" notification to allow cancellation of the current build.
* Attempting to open non-existent code files from the code-view details pane now emits an error notification
* Asset editors now have relevant icons on their tabs.
* The Add Code To Project wizard now includes Actor on the list of basic classes.
* UI Textures with alpha now render thumbnails with a checkerboard, and with alpha blending enabled.
* Import/Export/Reset to Defaults buttons now work correctly in Editor Preferences / Key Bindings.
* Added more engine analytics.
	* Tracking when user attempts invalid connections in Blueprint Editor.
* UnrealBuildTool:Failure due to read-only project files when generating project files is now a clear error message not a silent failure.
* Matinee now closes when Play-In-Editor(PIE) ends.
	* It already does this when Play-In-Editor(PIE) starts.
	* Closing stops accidental editing of actors in the wrong world when Play-In-Editor(PIE) starts/ends.
* Levels Browser functionality was merged into World Browser.Levels Browser will be removed eventually.
* Added ability for ULevelStreamingKismet to set loaded and visible flags at game startup (InitiallyLoaded, InitiallyVisible).
* **World Browser**
	* Added better filtering by layers.
	* Layer streaming distance setting is optional now.
	* Streaming levels can be drag'droped from onto blueprint graph (creates GetStreamingLevel node).
	* Added per actor option to ignore world origin shifting bIgnoreOriginShifting.
* Changed Material Editor Properties panel name to "Details."
* Use TSubclassof for Actor iterators instead of checking Actor is passed in at runtime.
* Prevented Static bool Material Expressions from adding preview option to right click menu.
* Allowed shift-click connections in blueprint style editors to be undone.
* Connections are now highlighted when hovering or marking a pin in the Material Editor.
* Added colour to Material Comments and allowed position of final input to be saved.
* Actors created during BeginPlay now get BeginPlay called on them.
* MIP Value Pin of Texture expressions now shown, along with any other expressions where users can affect the amount of inputs.
* Can now click on areas underneath the Material Editor stats bar.
* Prevent Play-In-Editor(PIE) notification from displaying in Material, SoundCue and SoundClass editors.
* Can now Ctrl+drag material pins correctly.
* Added tool tips for material nodes and pins.
* Material Editor Context menu now has a scroll bar.
* Right-click connections now undo/redo correctly.
* Material Functions placed from the palette will now work correctly.
* Material Parameters with the same name now share settings.
* Reduced node connection jitter by caching position of pins.
* Made sure Material node previews are synced up after being collapsed.
* Material Editor search results include newly added nodes.
* Pasted material function calls now display correct inputs.
* Prevented error when Lighting Model is not correct for Material Domain.
* Improved MarkPackageDirty performance.
* Transition Map option now uses dropdown picker.
* Prevented crash in Perforce module when cancelling tasks.
* C++ classes can now be created from the Class Viewer.
* Removed extra prompt when submitting to source control.
* Example games now have correct icon when packaged.
* Corrected grammar in warning about IDE installation.
* Option to display folders is now in the View Options menu.
* Removed non-thread safe message log access.
* When backend filters are applied folders are not displayed in the Content Browser.This means the view is 'flattened' when using any filtering.
* Added pre & post-import hook delegates.
* Updated options tooltips in PhAT.
* Files can now be made writable when deleting while source control is disabled.
* Events from Blueprint interfaces now have different appearance.
* Prevented crash when reloading level editor & maps.
* Made sure that actors/layers/BSPs in streaming levels are properly unhidden when rebuilding lighting.
* Arrow keys & enter now function correctly in Property Matrix.
* Double clicking on a parent event/function call now opens the parent Blueprint.
* Add Component nodes now copy their component defaults when copy & pasted.
* Popup combo window when adding keys to Matinee is now controllable via keyboard.
* Added more search keywords to Blueprint math library.
* Added new proxy struct customization for FTransform.All FTransform properties are now editable using rotator proxy for their rotation & appear like the actor transform in the details view.
* Level transform is now editable like Actor transform in the details view.
* Added IsValidIndex to TBitArray.
* Modified internationalization data structures so they can store and lookup entries using arbitrary metadata.
* Updating WIX third party library to final v3.8 release.
* Spline meshes no longer turn inside out when scaled negatively, and negative scale on the "forward" axis now flips the spline mesh front-to-back.
* Improved landscape alpha/pattern brush texture mask selector.
* Tooltips are now displayed for widgets even if the widget itself is disabled.
* **Slate**	 
* The following widgets now use a Slate Widget Style and are no longer dependent on FEditorStyle:
	* SProgressBar
	* SScrollBar
	* SExpandableArea
	* SSearchBox
	* SSlider
	* SVolumeControl
	* SSpinBox
	* SSplitter
	* STableRow
	* SDockTab
* The following widgets are no longer using FEditorStyle internally:
	* SExpandableButton
	* SNotificationList
	* SHeader
	* SSeparator
	* SBreadcrumbTrail
	* SNumericEntryBox
	* SColorPicker
* **Material Editor** 
	* The preview toolbar buttons in the material editor are now shown on a viewport toolbar, rather than being on the main toolbar.
* **PlatformerGame** 
	* Converted over to use Slate Widget Style assets, and now has no dependency on FEditorStyle.
* Replaced 'Kismet' with 'Blueprint' on AnimInstance events
	* Simulate command in PhAT now uses bound key correctly
	* Copy properties command in PhAT now works outside of the viewport
	* Removed ability to create derived blueprints from animation blueprints
* Foliage orientation is now limited to Max Angle setting when the ground changes during landscape painting
* Enable windows control-c handling for processes started with UE4Editor*-cmd, force termination on double ctrl-c to prevent destructors crashing
* Cleaned up several aspects of Strategy game including more user friendly asset names, removing unused assets, made audio usage consistent etc.
* StrategyGame camera has been revised and put into its own StrategyCameraComponent class. 
* Cleaned up several aspects of vehicle sample including stopping self destruct before race begins, allowed pause when playing in viewport etc.
* Cleaned up blackjack sample game interface - it now uses inter blueprint communication and the old interface bleuprint used to achieve this has been removed.
* Cleaned up blackjack fonts on objects.Chip value etc.
* Cleaned up some FORCEDINLINE in shootergame.

#### レンダリング
* Default post process material now has a transparent hole in it, letting you see through to the previous pass.This stops the whole screen being obscured by a single texture when post process material are being compiled.
* When adding a new parameter to a material parameter collection, it now generates a proper unique name.
* Removed clamping from static mesh LOD distance setting.
* Improved accuracy of reflection capture for reflective surfaces.Fully rough dims specular.
* Added use directional lightmap material flag for ES2.
* Added fully rough flag to materials for ES2.
* Specular material output now works on ES2.
* **Misc Particle Rendering**
	* Automatically generated bounds are much tighter, fixes 'set fixed bounds' in Cascade.
	* Particles now face toward the light when casting translucent volumetric shadows.
 
#### ブループリント
* Improved blueprint node discoverability.
	* Added several search keywords to a variety of node types.
* Improved Blueprint node documentation.
	* Added verbose ("big") tooltips to several blueprint nodes to better document their purpose and functionality.
* Redesigned level actor reference nodes in Blueprints.
* Redesigned compact array function nodes in Blueprints.
* Expanding searching all Blueprints to include all comments.
* Components editor will now properly "duplicate" and "delete" utilize keybindings.
* Deleting in the My Blueprint window now utilizes keybindings.
* F5 will now "Step" in Blueprint debug.
* State machines can be renamed in the graph.

#### ゲームプレイとフレームワーク
* Added delegates for breaking physics constraints.
* Exposed joint drive functions to Blueprints.
* Preparation work for treating maps as assets so they can be managed in the content browser.
	* UWorld objects are now named after the package that contains them, just like all other assets.
	* Added static function UWorld::GetWorldFromPackage to replace code that was searching for an object named "TheWorld" in a package.
* Filters in the content browser now show you subclasses of the asset type you select unless there is a more specific filter for that type.
	* For example, Blueprint will not show you AnimBlueprints, but DataAsset will show you all derived DataAssets.
* Many minor dedicated server perf improvements to reduce constant overhead of the main tick loop.
* Disabled many things in UE_BUILD_TEST that may affect performance.
* Memory reporting has been improved across the engine.
* The windows binned allocator is now around 5% more efficient and gives better memory debugging information.
* Reduced the stack size of worker threads on windows to save memory.
* Max Cull distance is now ignored in the editor viewports by default.Entering game render mode with G will respect max cull distance.
* Added priorities to focus in AIController.We can have different focus for movement, gameplay, etc.
* Find random location on navmesh is exactly constrained by radius in Detour now
* Added priorities to focus in AIController.We can have different focus for movement, gameplay, etc.
* Find random location on navmesh is exactly constrained by radius in Detour now.
* Added support for box, sphyl and sphere primitives as colliding obstacles in navmesh generation.
* Sounds are now parsed in the order they were played (as oppose to reverse order) so that when multiple sounds are played at the same time nodes such as the group control evaluate correctly.
* Additional command line parameters can now be specified for a standalone play session via the Editor -> Play In settings.
* Bulk Exporting of assets can now be done from the content browser.
* Some C++ files which were incorrectly placed in public include folders have been moved.
* Better handling of misdeclared SpriteInfo.
* Changed Persona so that it is possible to transform bones without an animation applied.
* Moved Persona's preview scene out of the animation viewport into Persona itself to reduce the amount of code needed to manage it.
* Refactored root motion code to use FTransform math instead of doing it manually.
	* Disable PhysicsRotation while doing root motion.DesiredRotation would fight root motion rotation.
* FRotator::Equals tests against normalized rotators.
* **COLLISION** 
	* Added collision mode visualization.



#### コア
* The random number generator is now seeded earlier in engine initialization to allow its use in startup code.
* FUTF8ToTCHAR::Length and FTCHARToUTF8::Length now return precise lengths, rather than 'big enough' lengths.
* UnrealHeaderTool reports an error when it is asked to process a missing file, rather than crashing.
* TArray::RangeCheck optimization.
* TArray::Append is now move-aware.
* Fully removed Visual Studio 2010 support (use the Nov 2012 QA build if you need 2010 support).
* Major improvements to UnrealBuildTool's dependency graph visualization ("-graph" option).
	* Output files are now saved in /UE4/Engine/Intermediate/<targetname>.gephi
	* Now includes five different graph types (see GraphVisualizationType in UBT).
	* Supports C++ header relationship visualization.
	* Better sizing of source file nodes.
	* General improvements and bug fixes.
* UnrealVS extension now supports Visual Studio 2013 (NOTE:UE4 does not compile with 2013 yet though).
* IntelliSense now works better with UE4 source code in Visual Studio.
* Various UE4 compile time improvements. (ongoing)
* Editor:We now force "faketouches" mode in ES2 preview when launched from editor.
* Began adding experimental support for Clang compiler on Windows platform.
* UnrealBuildTool will now emit warnings if Intermediate folders are encountered while looking for module source code.
* Async loading improvements (performance + fixes).
* Added a VS2013 build of MCPP. 
* Added a VS2013 build of nvtesslib. 
* Added a VS2013 build of nvtexturetools. 
* Added a VS2013 build of Vorbis and Ogg. 
* Added a VS2013 build of nvtristrip. 
* Added a VS2013 build of ForsythTriOptimizer. 
* Added a VS2013 build of HACD. 
* Added a VS2013 build of ICU. 
* Added a VS2013 build of Box2D. 
* Added a VS2013 build of hlslcc. 
* Added a VS2013 build of libPNG and zlib. 
* Added a VS2013 build of IntelTBB. 
* Added a VS2013 build of FreeType2. 
* Added a VS2013 build of Recast. 
 
#### ネットワーキング
* First pass converting most network error messages to FText.
* Made FURL parameter by reference into NetDriver::InitListen so that actual port assignment can be passed back out.

#### プラットフォーム
* Added the concept of Architecture to UBT.Beginning to be used in IOS ("-simulator") and HTML5 ("-win32").This way, we don't need multiple platforms for a different CPU architecture.
* Added a VS2013 build of DirectShow. 
* Added a wincrypt include which is necessary for VS2013 builds. 
* Made the StaticMesh editor show a dialog warning users that the "Generate Unique UVs" feature isn't implemented on non-Windows platforms.
* **Mac**
	* Stopped windows overlapped by the main editor window from stealing mouse clicks when running under Mavericks' new default multi-monitor mode.
	* Made sure that windows close, move & don't disappear when moved across screens under Mac OS X Mavericks' new default multi-monitor mode.
	* Use the extensions added by newer OpenGL versions provided on Mac OS X for debug & texture loading features when available. 
	* Prevented Mission Control keyboard shortcuts from confusing the editor & breaking keyboard input.
	* Manually handle display reconfiguration on Mac OS X so that windows don't disappear under Mavericks' new default multi-monitor mode.
	* Made the default merge tool p4merge.app on Mac OS X. 
	* Make the editor services 'Launch Game' use the default application to open (the project the same as double-clicking in Finder).
	* Prevent blue flickering on AMD cards under Mac OS X when more than one UE4 instance is running.
	* Worked around an NVIDIA driver bug to avoid crashes loading some samples on Mac OS X.
* **Moblie**
	* Added support for texture streaming on iOS.
	* Cleaned up OpenGL TexStorage2D handling and added support for texture storage on iOS.
	* Added callback function to handle OS low memory warning, implemented on iOS.
	* Changed iOS allocated memory stat to use the task_info() api which returns the per-process stat.
	* Improvements to virtual joystick on iOS.

#### Online
* Changed GenerateRandomUserId for OSSNull to always use Guids.
	* **Steam**
		* Steam App Id printout in logs for easier access.
		* Check for Steam Dlls to be loaded before calling actual Steam API calls, fail module if not present.
	* **Misc**
		* Added some stats to online tick functions and async task manager.


## 既知の問題
* **INFILTRATOR**
	* Lighting is darker than previously.
	* Editor unresponsive when launched
* **CONTENT EXAMPLES**
	* Mouse_Interface:Extra mesh.
	* NavMesh:Pawns broken in game.
	* Input_Examples:Some controls are not working
* **EDITOR**
	* Keyboard Shortcuts:Changing modifier keys commits binding prematurely.
	* Sub-editor performance has dropped during weekly tests.
* **ELEMENTAL**
	* CRASH:Invalid number of texture coordinates.
* **PLATFORMERGAME** 
	* SaveGameBP unresolved compiler error.
* **SHOWCASES**
	* PostProcessMatinee:Rebuilt lighting error.
* **WORLDBROWSER**
	* Player can not move when Play-In-Editor. 
* **SHOOTERGAME**
	* CRASH:After building lighting on Highrise.
* **Unreal Frontend** 
	* Advance tab won't use the PS4 settings rather it will attempt to build and stage the XboxOne.
	* Samples projects will fail to launch from the Unreal Frontend.
* **MAC** 
	* RENDERING:Graphics corruption in viewport.
* **PS4** 
	* Crashes on launch (PS4File.cpp:Assertion failed:OpenParams != nullptr)
* **RENDERING** 
	* OPENGL:ES2:CRASH:Exiting game
* **VEHICLE** 
	* Users on low-end video cards with Low FPS are unable to complete the course.












