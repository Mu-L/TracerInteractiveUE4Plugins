INTSourceChangelist:6537038
Title: January 2014 Release Notes
Crumbs:%ROOT%, Support/Builds
Description:
Availability:Licensee
Parent:Support/Builds
Order:-2
Order: 46

[TOC(start:2 end:2)]

## Build Info


[REGION:simpletable]
| Item | Info |
| ---- | ---- |
| **Labels** | [INCLUDE:#labels] |
| **Built from Changelist #** |  (//depot/UE4-QA/Promotable-CL-1986836) |
| **Branched from Changelist #** |  (//depot/UE4/Promoted-CL-1973917) |
| **Visual Studio Version** | Microsoft Visual Studio 2012 Version 11.0.60610.01 Update 3 |
| **DirectX** | June 2010 |
[/REGION]

[COMMENT:none]

[EXCERPT:Labels]
QA_APPROVED_UE4_BUILD_2014_01  
QA_APPROVED_UE4_BUILD_CURRENT  
QA_APPROVED_UE4_BUILD_MINIMUM
[/EXCERPT:Labels]

[/COMMENT]

## Important information

 * Current Engine Development Roadmaps: [UE4 Roadmaps](https://udn.unrealengine.com/questions/topics/roadmap.html)
 * Fixed Bugs: [UE4 Fixed Bugs January 2014](UE4_Fixed_2014_January.xlsx)
 * Known Issues: [UE4 Known Issues January 2014](UE4_Bugs_2014_January.xlsx)
 

## Major New Features

####Blueprints

* **Format Text Node** 
	* A new Format Text node has been added to Blueprints.	

		![](Support\Builds\ReleaseNotes\2014\January\FormatTextNode01.png)

	* The "Format" text can be a literal or connected to a pin. When used as a literal, it will auto-generate arguments for formatting. 

		![](Support\Builds\ReleaseNotes\2014\January\FormatTextNode02.png)

	* These arguments can be filled in as a literal or from a variable and the output Text will replace the arguments with whatever values are hooked to the pins.	 

		![](Support\Builds\ReleaseNotes\2014\January\FormatTextNode003.png)

	* When the "Format" pin is connected, the "Format" cannot be deciphered because it is variable. In this case, you can add pins yourself and name them after the possible arguments. In this way, you can setup the Format Text node to be ready for multiple possibilities. Whenever an argument matches at argument in the Format, it will utilize the provided information.	

		![](Support\Builds\ReleaseNotes\2014\January\FormatTextNode04.png)

	* Pin names can be changed, added, and removed from the Details Panel.

		![](Support\Builds\ReleaseNotes\2014\January\FormatTextNode05.png)

* **Node style changes and Append Array**
	* There is now an "Append Array" function which will add the contents of one array to the end of another.	

		![](Support\Builds\ReleaseNotes\2014\January\AppendArray.png)

	* Level actor references in Blueprints now have a new look, to better identify them:	

		![](Support\Builds\ReleaseNotes\2014\January\References.png)

	* Array function nodes have a new look as well!	

		![](Support\Builds\ReleaseNotes\2014\January\ArrayFunctionNodes.png)


####Editor and Tools

* **SoundCue Editor**
	* A palette of sound nodes has been added to the SoundCue editor!

		![](Support\Builds\ReleaseNotes\2014\January\SoundPalette.png)

* **Event Listing**
	* Graph sub-event listings have been added back to the "My Blueprint" tab, where you can focus, rename (for custom events), find, and delete event nodes.						

		![](Support\Builds\ReleaseNotes\2014\January\EventListing.png)

* **Documentation**
	* A handful of "big tooltips" have been added to help better explain certain nodes.

		![](Support\Builds\ReleaseNotes\2014\January\Documentation.png)

* **Scalability Interface**
	* There is a new user interface for scalability in the editor!	

		![](Support\Builds\ReleaseNotes\2014\January\scalability.png)

* **Actor Visibility in Scene Outliner**
	* It is now possible to quickly toggle actors' visibility from the scene outliner using the eye that appears beside each actor:
		
		![](Support\Builds\ReleaseNotes\2014\January\ActorVisibility.png)

* **Level Viewport**
	* In the Level Viewport, when you select a camera for example, you see a preview of what that camera sees in a Picture-in-Picture box in your current viewport. When you deselect the camera, the preview goes away.  

	* Added a button to those to the Actor Previews in the Level Viewport to pin them so they remain visible even if you select another object:

		![](Support\Builds\ReleaseNotes\2014\January\LevelViewport01.png)

	* As you can see, this is additive, so you will see any pinned previews plus any other preview actors you have selected. 

	* One potentially useful thing this allows you to do is to move actors in a camera shot while you preview what the camera sees, without using Matinee or multiple viewports:	

		![](Support\Builds\ReleaseNotes\2014\January\LevelViewport02.png)

#### Rendering
* **Sky Light and Precomputed Bent Normals**
	* There is now a Sky Light actor and a Sky Light Component for Blueprints.

	Here is an Ambient Cubemap with just SSAO.	  

	![](Support\Builds\ReleaseNotes\2014\January\Skylight01.png)	

	And here is a Sky Light with baked shadowing.	

	![](Support\Builds\ReleaseNotes\2014\January\Skylight02.png)	

	**Usability**	
	 
	* The Sky Light captures the distant parts of your level (everything further than Sky Distance Threshold) and applies that to the scene as a light.  
	  
	You can also manually specify a Cubemap to use.		

	![](Support\Builds\ReleaseNotes\2014\January\CubeMap.png)	
	
	* Previously, you had to pick an Ambient Cubemap for the sky's reflection while providing a different constant color for sky diffuse through Lightmass Environment Color. 
	 
	* The Sky Light is a full replacement for Environment Color and will replace the Ambient Cubemap in the future. 

	* Note however, that right now the Sky Light will only recapture the scene when you rebuild lighting or manually tell it to. 
	 
	**Baked Shadowing**		

	* The only version of the Sky Light supported right now is the one with Stationary Mobility, which means that it has baked shadowing from Lightmass.	

	* Once you place a sky light in your level, you have to rebuild lighting once to get the baked shadowing.  

	Lit by Sky Light only.	

	![](Support\Builds\ReleaseNotes\2014\January\Skylight05.png)

* **New Experimental Feature: DBuffer Deferred Decals**
	* Deferred decals now work with baked/lightmass lighting.	 
	That has a cost - not all projects make use of baked lighting or need proper decals so this can be enabled as a project setting and you need to change the decal blend mode.	

		![](Support\Builds\ReleaseNotes\2014\January\DBufferDeferredDecals01.png)	

	Right: baked lighting with a classic decal (no DBuffer) has broken lighting (should look like the left one).
	* How to activate the feature:
		* To try DBuffer locally, put this into BaseEngine.ini under [SystemSettings]
		* r.EarlyZPassMovable=1
		* r.EarlyZPass=2
		* r.DBuffer=1
		* Use new DBuffer decal blend mode
	* Similar changes can be made in the project settings in case you want that use that feature in your project.


## New Additions 

#### Editor and Tools
* New asset browser filter context menu entry to isolate and enable a single filter.
	* Activated by bringing up the context menu on a single filter in the list of active filters and choosing enable this only: `<filtername>`
* LOD Distance is now visible in the collapsed LODs title.
* Asset picker buttons now appear for those assets which support it in the property matrix view.
* Ctrl clicking on a selected, grouped actor now deselects the entire group.
* Adds a reset filters button to the bottom of the filters menu.
* Adds support for toggle boxes and actions on submenu menu entries, and modified CB filter menu to utilise submenus.
* Dirty maps/assets now display an asterisk in the dock tab next to their name.
* Added 'Explore' content menu option when right clicking assets in content browser.
* Added a visibility toggle to the scene outliner.
	* Users can click-swipe over multiple visibility icons to batch-toggle multiple actors' visibility.
* Added a palette of sound nodes to the SoundCue editor.
* Material Editor Expression and Function lists are now combined in a single palette.
* Double clicking a Sound Node in the SoundCue editor will now play that node.
* Added Material Functions to the Material editor's right click context menu.
* The Material nodes 'Particle Direction', 'Particle Speed', 'Particle Position' and 'Particle Relative Time' now work with mesh particles.
* Added UTF-8 support to Perforce plugin so unicode servers can be used.
* Instanced static mesh components are now editable in the Blueprint Components view.
* Engine API documentation is now available in CHM format (located at Engine\Documentation\CHM\API.chm). 
* Landscape now supports .png format for heightmap and weightmap import/export.
* Added "Change component size" tool to landscape editor.
* Added Cut/Copy/Paste support to landscape splines.
* Spline Mesh collision is now automatically rebuilt when the source mesh's collision is changed.
* Added option to disable shadow casting on landscape splines.
* Added MaterialOverrides to spline meshes.
* Added GetMorphTarget blueprint callable function.

#### Blueprints
* Added "Blueprints.Find Timelines On Server" editor automation test, to identify TimelineComponents that are hooked up in Blueprints and will run on dedicated servers (Timelines can tick and can impact performance).
	* This test walks backwards up the execution chain to find which Timelines can possibly be executed by non-cosmetic (server) events and flags those as errors in the log.
	* A macro has been added to StandardMacros ("Can Execute Cosmetic Events") which can be used to conditionally avoid executing Timelines on servers. The automation test checks for this macro explicitly.
* Added GetStreamingLevel BP node. Returns ULevelStreamingKismet object which allows better control over level streaming in blueprints.
* Icons denoting a components mobility are now displayed alongside components in the blueprint component list-view.
* Event navigation added back to the "My Blueprints" tab (events implemented in a graph are now listed in the tree).
* Inside a blueprint, you're no longer able to parent non-movable components under ones with more mobility.
* Inside a blueprint, you're no longer able to parent game-components under editor-only ones.
* Can now prohibit an interface from being implemented on Blueprintable objects (through "ProhibitedInterfaces" metadata).
* On Blueprint nodes, object pins will now directly accept objects that inherit from the input type.
* Can now diff arbitrary blueprints against each other, as well as arbitrary revisions.
* Added an "Append Array" function to Blueprints.
* Added a "Format Text" node to Blueprints.
* Text variables can be handled as literals.
* Various Text to Number nodes made available in Blueprints.

#### Rendering
* A new console command 'scalability' has been added which allows engine settings to be controlled simply in order to balance performance and quality. Type 'scalability' in the console to see full documentation on its usage.
* A new UI has been added under "View->Engine Scalability Settings". This gives access to the same functionality that the "scalability" console command offers.
* Added scale factors for static and skeletal mesh LOD calculations. (r.SkeletalMeshLODRadiusScale and r.StaticMeshLODDistanceScale).
* Added Post processing options to 2D scene capture component.
* New Blueprint function on static meshes to toggle bRenderCustomDepth property called SetRenderCustomDepth();
* New checkbox in collision particle module to enable collision checks with the source actor of the effect. Useful when creating blueprints with meshes and particles that you want to interact.
* New material checkbox to toggle use of vertex fogging for translucent surfaces.
* **Sky Light Feature**
	* Provides a unified representation of sky light, between diffuse and specular and what you see directly
	* Sky light component will automatically capture the distant geometry and apply it to the scene as lighting
	* Lightmass bakes out bent normal ambient occlusion, which provides directional shadowing
	* This feature is new and not fully functional yet, for example no character shadows, doesn't apply to translucency, etc.
* Particle light modules can opt-in to affecting translucency
* Material Ambient Occlusion output is applied to all indirect lighting, which is useful for volumetric particles
* **Precomputed Visibility Improvements**
	* New cell placement heuristic that covers potential play areas much more thoroughly, but with increased build times
	* Various optimizations to build times
	* Precomputed Visibility is now much more reliable, which is important for mobile
* **Customized UVs** 
	* Allows moving expensive operations to the vertex shader which are interpolated to the pixel shader material inputs.
	* [Customized UVs UDN Page](https://udn.unrealengine.com/docs/ue4/INT/Engine/Rendering/Materials/CustomizedUVs/index.html)
* **Adaptive sampling Lightmass GI solver**
	* Provides higher quality in worse case situations (bright light coming in tiny window) for the same build time.
	* New World Settings lightmass property: IndirectLightingQuality which can be used to increase solver quality for maps that need it.
* Added DBuffer deferred decals (experimental feature, costs extra 10bytes per pixel GPU memory, allows decals with lightmaps, supports color,normal,roughness, separate opacity)  enable from ini: r.EarlyZPassMovable=1   r.EarlyZPass=2  r.DBuffer=1

#### Gameplay and Framework
* LogVisualizer improvements: log category filtering.
* CharacterMovementComponents will apply a force to objects the pawn stands on and will generate a constant repulsion force on objects it overlap if PlayerPhysics is enabled.
* Convex hull support in Physical Asset Tool (PhAT).
* Added a way to pass custom filters to navigation queries.
* Bound GameplayDebuggingComponent with LogVisualizer so that when an AI is clicked in simulation mode and LogVisualizer is present, then LogVisualizer will switch over to show log of selected AI.
* ReferenceViewer is no longer in EpicLabs, it is now part of the main editor.
	* Existing reference tools have been moved into the right click menu for nodes in the reference viewer.
	* Added support for depth and breadth limiting for more sane graphs. Also added history.
* Added CameraBlockingVolume. This simple volume just blocks the ECC_Camera collision channel. 
* Added KillZVolume. This simple volume kills pawns that touch it.
* MemReport command now outputs a comprehensive memory report to Saved/Profiling/MemReports. It works similarly to how memleakcheck worked in UE3. The commands it runs can be modified in ini files.
* **ForceFeedback**
	* ForceFeedbackEffect asset can be created in content browser.  An effect contains an array of entries containing a curve and booleans indicating which servos are affected by this curve.
	* Playing/Stopping an effect is done via function calls on the PlayerController.
* **SoundGroups**
	* A SoundWave can be assigned to a SoundGroup.  The sound group allows sounds to be have different decompression properties.  In the future this will also be used for flagging sounds that should be streamed.
	* Custom game SoundGroups can be specified somewhat similarly to custom Collision Profiles.
* Reworking of AnimNotify UI. Notifies now clamp to tracks making them easier to drag/drop and will automatically pan a zoomed track display
* Refactor of AnimNotifies so that they can be set at previously disallowed times (0, Sequence Length, section times).
* Added skeleton retargeting for animations to the content browser (automatically triggered when opening an asset with a NULL skeleton)
* Added importing of lods for morph targets.
* Added a UV display to Persona.
* Added Vertex  Normal, Tangent and Binormal views to Persona.
* **Voice**
	* First pass at a new voice capture interface.
		* DirectSound voice capture implementation (125ms notifications).
		* Missing proper enumeration/detection of microphone plug/unplug (leave plugged in at launch for now).
	* First pass at a new voice codec interface (opus 1.0.3, soon to be 1.1).
	* Stats added for voice codec timings.
* **SKELETALMESH** 
	* Simplygon bone reduction support. 
	* Remove selected bones from LODs before applying simplygon mesh reduction.


#### Core
* Added hierarchical stats display ( 'stat groupname+', for more information use 'stat' command ).
	* Added thread safe FMemStack.
* The UnrealHeaderTool manifest (the 'response file' used to execute UHT) is now written to the Intermediate folder so that it can be used to diagnose build errors or debug UHT.
	* The manifest is now also in JSON format, making it easier for humans to read and computers to parse.
* Hot reload conflicts are written next to generated header file (as a .generated.h.conflict file) to help diagnose changes.
* UnrealHeaderTool now supports files with UTF-8 BOMs.
* NonPIETransient property specifier added to allow a property to be serialized only when it is being duplicated for Play-In-Editor(PIE).
* Added -pakdir=dir command line param to be able to specify additional pak file locations.
* Zero engine version support - the engine will now allow loading packages saved with 0 engine version (local builds).
* Support for NULL (None) active class redirects.
* Reference elimination is now supported in AddReferencedObjects.
* Added the ability to sign pak files with asymetrical key.

#### Platforms
* Added controller vibration (currently only supported on PS4).
* Added high level "Game DVR" control (currently only support on PS4).
* Added safe zone support in Slate (put widgets inside an SSafeZone widget, see ShooterGameLoadingScreen for an example, or the top of SSafeZone.h) (currently only PS4 specifies a safe zone).
* **Mac**
	* Implemented C++ symbol loading for the Editor on Mac OS X.
	* Implemented a better method for opening files in Xcode from within the Editor so new code files are opened within the Xcode project.

#### Audio
* Audio components can have integer parameters.
* Switch node for sound cues.
* Multiway branching can be achieved when used with integer parameters on audio components.

#### Animation
* Added ability to mute audio to the Viewport menu when editing an animation sequence.

#### Networking
* Ability to override active status of lifetime replicated properties.
	* Use DOREPLIFETIME_ACTIVE_OVERRIDE during AActor::PreReplication.     
* Lots of network performance enhancements.
* Sharing the replication work across connections is on by default (performance improvement).
* Simplification of FNetworkGUID ack logic (will reduce log spam under load when loading levels).


## Upgrade Notes

#### Editor and Tools
* Landscape ES2 : Landscape UV increase from 2 to 3 to be same as LocalVertexFactory.
* Collision properties are now duplicated correctly.
* Sub-levels no longer get marked as dirty when added to the level.
* WorldSettings label is now hidden.
* Collections button now updates it's source control state when clicked.
* New PIE windows no longer get greyed out when debugging blueprints.
* FBX Import options are now remembered.
* Added missing tooltip for some material properties.
* Update the Collision Profile when the Collision Channels are built.
* Menu asset picker now excludes assets which belong to unloaded maps.
* Collections now save again.
* "Press Escape" message now only appears when autosaving.
* Removed LocalizeError usage.
* Alpha value of color themes now appears correctly depending on the color picker type being used.
* DestructibleMesh property is no longer collapsed.
* Remove 'Debug' as an packaging option if solution is missing i.e. non-code.
* "Save" name and tooltip restored in asset editors.
* Changed Cascade Module warning from a dialog to a notification.
* Modifications to UFortUIFeedbackBank properties now work as expected. 
* Property matrix column widths are now preserved between object selections.
* ContentBrowser asset view now recieves keyboard focus when syncing to assets.
* ContentBrowser view modes now have a persistent layout.
* Prevent opening locked content browsers to sync assets.
* Added missing small icon for local and world coordinate system.
* Collections are no longer removed, when creating, if the rename loses focus.
* Renamed 'asset' to 'item' in the content browser counter.
* Disable the 'add code to project' option when the user has no compiler.
* Replaced 'invalid collision' dialog with notification.
* Refactor how the sprite category localization is handled.
* Collections now appear expanded by default, and can be resized.
* Save message reworded to say Matinee.
* Adding missing small Phat icons.
* When dragging an asset over a tab, it'll now become active after a short period.
* Copy/Pasting nodes created with keyboard shortcuts no longer crashes.
* Layout is now also saved when exporting preferences.
* The option to auto recompile blueprints on PIE is now controllable from Editor Preferences. 
	* Any custom *.ini files referencing Kismet.AutoRecompileOnPIE should be changed to use /Script/UnrealEd.LevelEditorPlayInSettings.AutoRecompileBlueprints in the relevant EditorUserSettings ini instead.
* ALevelGridVolume actor was removed.
* GetOverlappingActors no longer returns the actor the call is made on.
* Changed Position & Translation to Location in Blueprint functions; impacts several C++ functions:
	* UPrimitiveComponent::AddImpulseAtPosition() becomes UPrimitiveComponent::AddImpulseAtLocation()
	* UPrimitiveComponent::AddForceAtPosition() becomes UPrimitiveComponent::AddForceAtLocation()
	* UMovementComponent::ConstrainPositionToPlane() becomes UMovementComponent::ConstrainLocationToPlane()

#### Rendering
* An error in the calculation of text render actor vertical alignment transforms has been fixed. This may potentially result in some text being incorrectly position, which will need manually correcting.
* **Engine Scalability**
	* Added GetRenderingDetailMode to Kismet.
	* Added GPUIndex to HardwareSurvey.
	* More polish on engine scalability feature.
	* Added ECVF_Scalability to document if a cvar can be used as scalability option.
	* Added Blueprint GetRenderingMaterialQualityLevel, added help and clamped another one.
	* Added r.CompileShadersForDevelopment to allow for faster shipping build when set to 0 (needs to be manually activated, unfinished feature).
	* Added MaterialQualityLevel to scaleability settings - JonL suggested 0/1/1/1, could have been 0/0/1/1 - depending on content.
	* Optimized very low spec rendering cost for Fortnite, disables UI Blur background.
	* r.earlyzpass now renders all non moving objects if in mode 2 (masked or small on screen).
	* Added PF_R8G8 UNORM texture format.
* **Post Processing**
	* Clamped minimal speed for eye adaptation to not have people disabling eyeadaptation through this parameter.
	* Reenabled FastBloomThreshold as this was more noticable there.
	* Removed toe factor - isn't used in new tonemapper anyway - old tonemapper doesn't exist any more.
	* Added debug export to the graph for much nicer readble graphs (using yWorks) r.CompositionGraphDebug exports the files to the screenshots folder.
	* Reenabled native fullscreen for video options.
	* Experimental feature work: made screenspace subsurface scattering using alpha scene color alpha channel to separate out specular, very minor cost for most passes and if using a 32bit format we don't have the enabled. We intend to use enable ScreenSpace subsurface scattering and that is needed for high quality, see r.SSSSS 150 on subsurface material with a specular.
	* Typed console variables vars for better performance when reading cvars (main and render thread).
	* Improved interface to DrawDenormalizedQuad(), now renamed to DrawRectangle(), by default using classic quad, can be a triangle.
	* Allow visualization of EarlyZPass content using "vis SceneDepth@0"

#### Blueprints
* Nested blueprint components may have their mobility altered if their parent is more mobile than they are.
	* We no longer allow sub-components to be flagged with less mobility than their parent.
* Blueprint game-components will be unnested (or swapped, if the root) if they were previously nested under an editor-only component.
	* We no longer allow game-components to be nested under editor-only ones.

#### Gameplay and Framework
* Switched navigation system's API from using const FNavigationQueryFilter* to TSharedPtr`<const FNavigationQueryFilter>`
* InputComponent  bindings made in native code now use UObject binding instead of dynamic binding.
	* BIND_AXIS and BIND_ACTION should no longer be used and, while they remain currently for ease of conversion, they will be removed in the future.
	* Instead BindAxis and BindAction functions on InputComponent should be used.  BindKey and BindTouch have also been added.
* MinCompressedDurationGame/Editor has been removed.  See new feature SoundGroups for details on replacement.

#### Core
* Classes saved in blueprints are now converted to notplaceable if they inherit a notplaceable base.
	* Previously it would assert.
* TIndirectArray no longer inherits TArray.
	* Any code which does TIndirectArray->TArray casts will now fail.
	* Code which uses non-exposed TArray functions will need changing, e.g. GetData() should now be GetTypedArray().
* Some pathnames have been shortened to try and reduce MAX_PATH overflows.
	* This may affect navigation or batch files which expect files to be in particular places.
	* Notably, Intermediate/BuildData/Include is now Intermediate/Build/Inc.
* TWeakObjectPtr now static asserts that it is being instantiated with a UObject-derived type.
	* This will require that a full class definition wherever TWeakObjectPtrs are constructed, as the compiler won't just assume that your type is a UObject any more.
* begin() and end() are no longer container methods.
	* These functions were added purely for ranged-for support; they were not intended to be used in user code.  Ranged-for will still work as it uses an alternative system.
	* Any code using .begin() or .end() on UE containers should be converted to use ranged-for or the older CreateIterator-style of iteration.
* UnrealHeaderTool will now throw an error when it encounters a default argument that it can't parse.	
	* Code like this, for example, will need to be modified to use NULL:
	* `UFUNCTION(BlueprintCallable, Category="SomeCategory")`
	* `void Func(UObject* Obj = nullptr)`
	* `{`
	* `}`
* Eliminated bCompileMonolithicBinary global variable which was sometimes used by game targets 
	* Instead, override ShouldCompileMonolithic() in your program's TargetRules file (MyGame.Target.cs).
	* You can still use command-line arguments to override this if needed (-modular, -monolithic, or MONOLITHIC_BUILD=1).
* Removed "Fast Iteration Mode" from Unreal Build Tool (incomplete feature).
* Default minimum Windows API (WINVER) was bumped to 0x600 (Windows Vista or higher).
	* If you want to target Windows XP, set UEBuildWindows.SupportWindowsXP=_true_.
	* When targeting Windows XP, we use WINVER 0x502 (XP SP3).
	* Windows XP support is a work-in-progress, but we are committed to supporting it in a future build.

#### Platforms
* Putting all device profiles back in the editor. 
* Removed the DeviceProfiles.ini and converted this to use the same config hierarchy as other engine config files. Base->Default->Saved
* Updated the Texture Content Streaming to use allow usage of CVar where we would otherwise have specified that we use a config option.
* Putting back this property.
* Removed Device Profile redundant properties. 
* Updated the device profile setup to allow CVars to be initialized eary and removed Device Profile Blueprints, This has resulted in the creation of device profile plugins which run selection logic.  
* Updated save to defaults, so that array writes are using correct syntax. 
* Updated the settings editor to save after importing.
* **iOS**
	* Virtual joysticks have changed for touchscreen devices. They now use an asset. If you want to disable the joysticks, override the InitialTouchInterface ini setting in the [MobileSlateUI] section of Engine.ini
	* Unreal Launch Daemon has been fixed to work with Messaging to allow for device discovery and deploying/launching from UFE/UAT.
* **Unreal Frontend**
	* Unreal Frontend (UFE) can now utilize plugins.
	* Update to messaging to allow for static ips.
		* To see a device or session on a subnet different than the PC, do the following (these steps are also needed to see the PS4):
			* Run UFE once to generate the Engine/Programs/UnrealFrontend/Saved/Config/Windows/Engine.ini
			* Edit Engine.ini and add to the [/Script/UdpMessaging.UdpMessagingSettings]
			* StaticEndpoints=<ip of device>:6666
			* To add more than one device, add the line multiple times.
			* In the case of iOS, push Unreal Launch Daemon to the device and run it, add the static ip address as above, and it will now see the device.
			* In the case of PS4, just add the ip address as above and it will see sessions on the kit.
			* This hasn't been tested with XB1, but it should work.
	* Added ability to copy and save the launcher log.
	* Addition of Quick Launch to UFE.
		* Quick Launch will start a cook on the fly server, deploy, and launch the project on the selected device.
		* If -development is specified on the UFE command-line, Quick Launch will also build the project before launch.
	
#### Networking
* Lifetime properties are the only supported path now, this will most likely require code changes.
* GetReplicationList has been replaced by GetLifetimeReplicatedProps.
	* GetLifetimeReplicatedProps is only called once now.
* DOREPLIFETIME to register non conditional properties.
* DOREPLIFETIME_CONDITION to register properties with conditions.
* Possible conditions:
	* COND_None					- This property has no condition, and will send anytime it changes.
	* COND_InitialOnly			- This property will only attempt to send on the initial bunch.
	* COND_OwnerOnly			- This property will only send to the actor's owner.
	* COND_SkipOwner			- This property send to every connection EXCEPT the owner.
	* COND_SimulatedOnly		- This property will only send to simulated actors.
	* COND_AutonomousOnly		- This property will only send to autonomous actors.
	* COND_SimulatedOrPhysics	- This property will send to simulated OR bRepPhysics actors.
	* COND_InitialOrOwner		- This property will send on the initial packet, or to the actors owner.
	* COND_Custom				- This property has no particular condition, but wants the ability to toggle on/off via DOREPLIFETIME_ACTIVE_OVERRIDE.


## Future Additions and Ongoing Efforts

#### Editor and Tools
* It is no longer necessary to hold CTRL to move curve control points in matinee.
* There is now a "cancel" button on the "Compiling C++ Code" notification to allow cancellation of the current build.
* Attempting to open non-existent code files from the code-view details pane now emits an error notification
* Asset editors now have relevant icons on their tabs.
* The Add Code To Project wizard now includes Actor on the list of basic classes.
* UI Textures with alpha now render thumbnails with a checkerboard, and with alpha blending enabled.
* Import/Export/Reset to Defaults buttons now work correctly in Editor Preferences / Key Bindings.
* Added more engine analytics.
	* Tracking when user attempts invalid connections in Blueprint Editor.
* UnrealBuildTool: Failure due to read-only project files when generating project files is now a clear error message not a silent failure.
* Matinee now closes when Play-In-Editor(PIE) ends.
	* It already does this when Play-In-Editor(PIE) starts.
	* Closing stops accidental editing of actors in the wrong world when Play-In-Editor(PIE) starts/ends.
* Levels Browser functionality was merged into World Browser. Levels Browser will be removed eventually.
* Added ability for ULevelStreamingKismet to set loaded and visible flags at game startup (InitiallyLoaded, InitiallyVisible).
* **World Browser**
	* Added better filtering by layers.
	* Layer streaming distance setting is optional now.
	* Streaming levels can be drag'droped from onto blueprint graph (creates GetStreamingLevel node).
	* Added per actor option to ignore world origin shifting bIgnoreOriginShifting.
* Changed Material Editor Properties panel name to "Details."
* Use TSubclassof for Actor iterators instead of checking Actor is passed in at runtime.
* Prevented Static bool Material Expressions from adding preview option to right click menu.
* Allowed shift-click connections in blueprint style editors to be undone.
* Connections are now highlighted when hovering or marking a pin in the Material Editor.
* Added colour to Material Comments and allowed position of final input to be saved.
* Actors created during BeginPlay now get BeginPlay called on them.
* MIP Value Pin of Texture expressions now shown, along with any other expressions where users can affect the amount of inputs.
* Can now click on areas underneath the Material Editor stats bar.
* Prevent Play-In-Editor(PIE) notification from displaying in Material, SoundCue and SoundClass editors.
* Can now Ctrl+drag material pins correctly.
* Added tool tips for material nodes and pins.
* Material Editor Context menu now has a scroll bar.
* Right-click connections now undo/redo correctly.
* Material Functions placed from the palette will now work correctly.
* Material Parameters with the same name now share settings.
* Reduced node connection jitter by caching position of pins.
* Made sure Material node previews are synced up after being collapsed.
* Material Editor search results include newly added nodes.
* Pasted material function calls now display correct inputs.
* Prevented error when Lighting Model is not correct for Material Domain.
* Improved MarkPackageDirty performance.
* Transition Map option now uses dropdown picker.
* Prevented crash in Perforce module when cancelling tasks.
* C++ classes can now be created from the Class Viewer.
* Removed extra prompt when submitting to source control.
* Example games now have correct icon when packaged.
* Corrected grammar in warning about IDE installation.
* Option to display folders is now in the View Options menu.
* Removed non-thread safe message log access.
* When backend filters are applied folders are not displayed in the Content Browser. This means the view is 'flattened' when using any filtering.
* Added pre & post-import hook delegates.
* Updated options tooltips in PhAT.
* Files can now be made writable when deleting while source control is disabled.
* Events from Blueprint interfaces now have different appearance.
* Prevented crash when reloading level editor & maps.
* Made sure that actors/layers/BSPs in streaming levels are properly unhidden when rebuilding lighting.
* Arrow keys & enter now function correctly in Property Matrix.
* Double clicking on a parent event/function call now opens the parent Blueprint.
* Add Component nodes now copy their component defaults when copy & pasted.
* Popup combo window when adding keys to Matinee is now controllable via keyboard.
* Added more search keywords to Blueprint math library.
* Added new proxy struct customization for FTransform. All FTransform properties are now editable using rotator proxy for their rotation & appear like the actor transform in the details view.
* Level transform is now editable like Actor transform in the details view.
* Added IsValidIndex to TBitArray.
* Modified internationalization data structures so they can store and lookup entries using arbitrary metadata.
* Updating WIX third party library to final v3.8 release.
* Spline meshes no longer turn inside out when scaled negatively, and negative scale on the "forward" axis now flips the spline mesh front-to-back.
* Improved landscape alpha/pattern brush texture mask selector.
* Tooltips are now displayed for widgets even if the widget itself is disabled.
* **Slate**	 
* The following widgets now use a Slate Widget Style and are no longer dependent on FEditorStyle:
	* SProgressBar
	* SScrollBar
	* SExpandableArea
	* SSearchBox
	* SSlider
	* SVolumeControl
	* SSpinBox
	* SSplitter
	* STableRow
	* SDockTab
* The following widgets are no longer using FEditorStyle internally:
	* SExpandableButton
	* SNotificationList
	* SHeader
	* SSeparator
	* SBreadcrumbTrail
	* SNumericEntryBox
	* SColorPicker
* **Material Editor** 
	* The preview toolbar buttons in the material editor are now shown on a viewport toolbar, rather than being on the main toolbar.
* **PlatformerGame** 
	* Converted over to use Slate Widget Style assets, and now has no dependency on FEditorStyle.
* Replaced 'Kismet' with 'Blueprint' on AnimInstance events
	* Simulate command in PhAT now uses bound key correctly
	* Copy properties command in PhAT now works outside of the viewport
	* Removed ability to create derived blueprints from animation blueprints
* Foliage orientation is now limited to Max Angle setting when the ground changes during landscape painting
* Enable windows control-c handling for processes started with UE4Editor*-cmd, force termination on double ctrl-c to prevent destructors crashing
* Cleaned up several aspects of Strategy game including more user friendly asset names, removing unused assets, made audio usage consistent etc.
* StrategyGame camera has been revised and put into its own StrategyCameraComponent class. 
* Cleaned up several aspects of vehicle sample including stopping self destruct before race begins, allowed pause when playing in viewport etc.
* Cleaned up blackjack sample game interface - it now uses inter blueprint communication and the old interface bleuprint used to achieve this has been removed.
* Cleaned up blackjack fonts on objects. Chip value etc.
* Cleaned up some FORCEDINLINE in shootergame.

#### Rendering
* Default post process material now has a transparent hole in it, letting you see through to the previous pass. This stops the whole screen being obscured by a single texture when post process material are being compiled.
* When adding a new parameter to a material parameter collection, it now generates a proper unique name.
* Removed clamping from static mesh LOD distance setting.
* Improved accuracy of reflection capture for reflective surfaces. Fully rough dims specular.
* Added use directional lightmap material flag for ES2.
* Added fully rough flag to materials for ES2.
* Specular material output now works on ES2.
* **Misc Particle Rendering**
	* Automatically generated bounds are much tighter, fixes 'set fixed bounds' in Cascade.
	* Particles now face toward the light when casting translucent volumetric shadows.
 
#### Blueprints
* Improved blueprint node discoverability.
	* Added several search keywords to a variety of node types.
* Improved Blueprint node documentation.
	* Added verbose ("big") tooltips to several blueprint nodes to better document their purpose and functionality.
* Redesigned level actor reference nodes in Blueprints.
* Redesigned compact array function nodes in Blueprints.
* Expanding searching all Blueprints to include all comments.
* Components editor will now properly "duplicate" and "delete" utilize keybindings.
* Deleting in the My Blueprint window now utilizes keybindings.
* F5 will now "Step" in Blueprint debug.
* State machines can be renamed in the graph.

#### Gameplay and Framework
* Added delegates for breaking physics constraints.
* Exposed joint drive functions to Blueprints.
* Preparation work for treating maps as assets so they can be managed in the content browser.
	* UWorld objects are now named after the package that contains them, just like all other assets.
	* Added static function UWorld::GetWorldFromPackage to replace code that was searching for an object named "TheWorld" in a package.
* Filters in the content browser now show you subclasses of the asset type you select unless there is a more specific filter for that type.
	* For example, Blueprint will not show you AnimBlueprints, but DataAsset will show you all derived DataAssets.
* Many minor dedicated server perf improvements to reduce constant overhead of the main tick loop.
* Disabled many things in UE_BUILD_TEST that may affect performance.
* Memory reporting has been improved across the engine.
* The windows binned allocator is now around 5% more efficient and gives better memory debugging information.
* Reduced the stack size of worker threads on windows to save memory.
* Max Cull distance is now ignored in the editor viewports by default. Entering game render mode with G will respect max cull distance.
* Added priorities to focus in AIController. We can have different focus for movement, gameplay, etc.
* Find random location on navmesh is exactly constrained by radius in Detour now
* Added priorities to focus in AIController. We can have different focus for movement, gameplay, etc.
* Find random location on navmesh is exactly constrained by radius in Detour now.
* Added support for box, sphyl and sphere primitives as colliding obstacles in navmesh generation.
* Sounds are now parsed in the order they were played (as oppose to reverse order) so that when multiple sounds are played at the same time nodes such as the group control evaluate correctly.
* Additional command line parameters can now be specified for a standalone play session via the Editor -> Play In settings.
* Bulk Exporting of assets can now be done from the content browser.
* Some C++ files which were incorrectly placed in public include folders have been moved.
* Better handling of misdeclared SpriteInfo.
* Changed Persona so that it is possible to transform bones without an animation applied.
* Moved Persona's preview scene out of the animation viewport into Persona itself to reduce the amount of code needed to manage it.
* Refactored root motion code to use FTransform math instead of doing it manually.
	* Disable PhysicsRotation while doing root motion. DesiredRotation would fight root motion rotation.
* FRotator::Equals tests against normalized rotators.
* **COLLISION** 
	* Added collision mode visualization.



#### Core
* The random number generator is now seeded earlier in engine initialization to allow its use in startup code.
* FUTF8ToTCHAR::Length and FTCHARToUTF8::Length now return precise lengths, rather than 'big enough' lengths.
* UnrealHeaderTool reports an error when it is asked to process a missing file, rather than crashing.
* TArray::RangeCheck optimization.
* TArray::Append is now move-aware.
* Fully removed Visual Studio 2010 support (use the Nov 2012 QA build if you need 2010 support).
* Major improvements to UnrealBuildTool's dependency graph visualization ("-graph" option).
	* Output files are now saved in /UE4/Engine/Intermediate/<targetname>.gephi
	* Now includes five different graph types (see GraphVisualizationType in UBT).
	* Supports C++ header relationship visualization.
	* Better sizing of source file nodes.
	* General improvements and bug fixes.
* UnrealVS extension now supports Visual Studio 2013 (NOTE: UE4 does not compile with 2013 yet though).
* IntelliSense now works better with UE4 source code in Visual Studio.
* Various UE4 compile time improvements. (ongoing)
* Editor:  We now force "faketouches" mode in ES2 preview when launched from editor.
* Began adding experimental support for Clang compiler on Windows platform.
* UnrealBuildTool will now emit warnings if Intermediate folders are encountered while looking for module source code.
* Async loading improvements (performance + fixes).
* Added a VS2013 build of MCPP. 
* Added a VS2013 build of nvtesslib. 
* Added a VS2013 build of nvtexturetools. 
* Added a VS2013 build of Vorbis and Ogg. 
* Added a VS2013 build of nvtristrip. 
* Added a VS2013 build of ForsythTriOptimizer. 
* Added a VS2013 build of HACD. 
* Added a VS2013 build of ICU. 
* Added a VS2013 build of Box2D. 
* Added a VS2013 build of hlslcc. 
* Added a VS2013 build of libPNG and zlib. 
* Added a VS2013 build of IntelTBB. 
* Added a VS2013 build of FreeType2. 
* Added a VS2013 build of Recast. 
 
#### Networking
* First pass converting most network error messages to FText.
* Made FURL parameter by reference into NetDriver::InitListen so that actual port assignment can be passed back out.

#### Platforms
* Added the concept of Architecture to UBT. Beginning to be used in IOS ("-simulator") and HTML5 ("-win32"). This way, we don't need multiple platforms for a different CPU architecture.
* Added a VS2013 build of DirectShow. 
* Added a wincrypt include which is necessary for VS2013 builds. 
* Made the StaticMesh editor show a dialog warning users that the "Generate Unique UVs" feature isn't implemented on non-Windows platforms.
* **Mac**
	* Stopped windows overlapped by the main editor window from stealing mouse clicks when running under Mavericks' new default multi-monitor mode.
	* Made sure that windows close, move & don't disappear when moved across screens under Mac OS X Mavericks' new default multi-monitor mode.
	* Use the extensions added by newer OpenGL versions provided on Mac OS X for debug & texture loading features when available. 
	* Prevented Mission Control keyboard shortcuts from confusing the editor & breaking keyboard input.
	* Manually handle display reconfiguration on Mac OS X so that windows don't disappear under Mavericks' new default multi-monitor mode.
	* Made the default merge tool p4merge.app on Mac OS X. 
	* Make the editor services 'Launch Game' use the default application to open (the project the same as double-clicking in Finder).
	* Prevent blue flickering on AMD cards under Mac OS X when more than one UE4 instance is running.
	* Worked around an NVIDIA driver bug to avoid crashes loading some samples on Mac OS X.
* **Moblie**
	* Added support for texture streaming on iOS.
	* Cleaned up OpenGL TexStorage2D handling and added support for texture storage on iOS.
	* Added callback function to handle OS low memory warning, implemented on iOS.
	* Changed iOS allocated memory stat to use the task_info() api which returns the per-process stat.
	* Improvements to virtual joystick on iOS.

#### Online
* Changed GenerateRandomUserId for OSSNull to always use Guids.
	* **Steam**
		* Steam App Id printout in logs for easier access.
		* Check for Steam Dlls to be loaded before calling actual Steam API calls, fail module if not present.
	* **Misc**
		* Added some stats to online tick functions and async task manager.


## Known Issues
* **INFILTRATOR**
	* Lighting is darker than previously.
	* Editor unresponsive when launched
* **CONTENT EXAMPLES**
	* Mouse_Interface: Extra mesh.
	* NavMesh: Pawns broken in game.
	* Input_Examples: Some controls are not working
* **EDITOR**
	* Keyboard Shortcuts: Changing modifier keys commits binding prematurely.
	* Sub-editor performance has dropped during weekly tests.
* **ELEMENTAL**
	* CRASH: Invalid number of texture coordinates.
* **PLATFORMERGAME** 
	* SaveGameBP unresolved compiler error.
* **SHOWCASES**
	* PostProcessMatinee: Rebuilt lighting error.
* **WORLDBROWSER**
	* Player can not move when Play-In-Editor. 
* **SHOOTERGAME**
	* CRASH: After building lighting on Highrise.
* **Unreal Frontend** 
	* Advance tab won't use the PS4 settings rather it will attempt to build and stage the XboxOne.
	* Samples projects will fail to launch from the Unreal Frontend.
* **MAC** 
	* RENDERING: Graphics corruption in viewport.
* **PS4** 
	* Crashes on launch (PS4File.cpp: Assertion failed: OpenParams != nullptr)
* **RENDERING** 
	* OPENGL: ES2: CRASH: Exiting game
* **VEHICLE** 
	* Users on low-end video cards with Low FPS are unable to complete the course.












