INTSourceChangelist:6537038
Title: 2014年3月版本说明
Crumbs:%ROOT%, Support/Builds
Description:
Availability:Licensee
Parent:Support/Builds
Order:-1
Order: 45

[TOC(start:2 end:2)]

## 版本信息


[REGION:simpletable]
| 项目| 信息|
| ----| ----|
| **标签**| [INCLUDE:#labels] |
| **根据变更列表编号构建**|  (//depot/UE4-QA/Promotable-CL-)|
| **根据变更列表编号分支**|  (//depot/UE4/Promoted-CL-)|
| **Visual Studio 版本**|  |
| **DirectX**| 2010 年 6 月|
[/REGION]

[COMMENT:none]

[EXCERPT:Labels]
QA_APPROVED_UE4_BUILD_2014_
QA_APPROVED_UE4_BUILD_CURRENT
QA_APPROVED_UE4_BUILD_MINIMUM
[/EXCERPT:Labels]

[/COMMENT]

## 重要信息

* 三月的 QA 版本并没有像我们希望的那样完美。我们一直通过证书安装控制台，并且无法根据公共版本和 QA 版本调整控制台修复程序。

	这已导致三月的 QA 版本延迟，并且 **UE4-Releases/4.0/** 中的内容现在不包含工作控制台。目前，**//depot/UE4-QA-Unstable/** 中包含控制台（*已根据发布分支*），我们正在努力将修复程序从证书移植回到可以安全执行的分支。我们应该及时分支到 **//depot/UE4-QA/**，但对于那些玩主机游戏的用户，四月的 QA 版本至少应该拥有一个控制台的证书版本，并且五月的 QA 版本应该同时拥有两者。

* 当前引擎开发路线图：[虚幻引擎4 路线图](https://udn.unrealengine.com/questions/topics/roadmap.html)
* 已修复的错误：[2014 年 3 月虚幻引擎4 已修复的错误]
* 已知问题：[2014 年 3 月虚幻引擎4 已知问题]
 

## 主要新功能

#### 蓝图

* **蓝图宏调试**

	* 已为蓝图宏调试添加支持！

	* 例如，如果在蓝图事件图表中的宏实例节点上设置断点，则在编辑器中运行/在编辑器中模拟时，执行现在将在宏图表内的第一个可执行节点上中断。并且能够在调试蓝图对象时直接在宏图表内单步执行、设置断点并查看变量引脚值。

		_示例：如果在“Gate”节点上设置断点：_	
		
		![](MacroDebugging01.png)	
		
		_执行将在附加到“Gate”宏图表内的“Enter”输出的序列节点上中断。然后，如果在宏内部的“Branch”节点上设置断点，则单击“恢复（Resume）”......_	
		
		![](MacroDebugging02.png)	
		
		_...执行此时将进行下一次中断：_			
		
		![](MacroDebugging03.png)	
		
		_而且能够将鼠标悬停在引脚上方以查看当前变量值：_	
		
		![](MacroDebugging04.png)

* **蓝图中的引脚图标**

	* 最近，默认 BP 引脚图标在编辑器中默认已更改为新的泪滴样式。

		如果喜欢旧的原始样式，可以更改编辑器设置以使用原始引脚：
		
		![](PinIcons.png)(w:720)

#### 编辑器和工具

* **物理资源工具 (PhAT)**

	* 已对物理资源编辑器进行改进！
		
		![](PhysicalAssetTool.png)

	* 选定模拟允许模拟感兴趣的区域，同时保持形体的其余部分固定。
	* 现在支持多选以便轻松调整多个形体和约束。
	* 可以使用热键 1、2、3、4 切换 Swing1、Swing2、扭曲和循环以便快速显示约束限制。
	* 无重力（No Gravity）将在没有重力的情况下进行模拟。这对于捕获相邻形体之间的碰撞或不良约束等错误非常有用。

* **取色器可用性改进**

	* 默认视图
		* 饱和度和值滑块。
		* 主题栏将在空白时显示帮助消息。
		* 颜色预览块之间的小分隔符。
		* 取色器现在始终选取屏幕上可见的颜色，不受 sRGB 预览切换影响。
			
			![](ColorPicker01.png)

	* 高级设置视图
		* R、G、B 通道现在也具有预览渐变，如 H、S、V。
		* 十六进制输入/外场。
		* A 现在可以大于 1.0（对于材质编辑器）。
		* 预览渐变现在稍厚以获得更好的可见性。
		* 滑块现在更宽以获得更高的鼠标精度。
		* 滑块数字输入现在是 3 位而不是 2 位精度，允许正确的十六进制转换。
			
			![](ColorPicker02.png)

	* 快速拾取模式
		* 移液管旁边的小色轮按钮用于切换色轮和快速拾取。

			_目前，右键单击滚轮也可以正常工作。_

		* 当需要快速尝试浅色和深色时快速拾取色谱。

			_水平中心线表示值为 1.0 和饱和度为 1.0 的色调。_

			_接近顶部的颜色对于白色为饱和。_

			_接近底部的颜色对于黑色为光照。_		
			
			![](ColorPicker03.png)

* **开发者文件夹默认已禁用**

	* 引擎文件夹现在默认也已禁用！

		* 可以从视图选项切换其可见性。	 
			
			![](DeveloperFolder.png)

* **在编辑器中运行 (PIE) 和启动更改**

	* PIE 更改：
		* 不再具有所有“当前相机/默认玩家起点（Current Camera / Default Player Start）”组合的菜单条目。
			* 当前相机/默认玩家起点现在是在底部进行全局切换。
			* 然后，只需单击顶部四个条目中的任何一个可开始 PIE。
		* 新选项“移动预览（Mobile Preview）”使用 OpenGL ES 模拟启动独立游戏。
		* 大的“运行（Play）”按钮仍会记住最后一次选择。
		* 现在有望能够更轻松地阅读/理解菜单条目和工具提示。	
			
			![](PIE01.png)

	* 启动更改：
		* 设备现在按平台分解。
		* 已修复可用设备列表中的一系列问题。
		* 工具栏中的大“启动（Launch）”按钮仍会记住最后一次选择。
		*“启动（Launch）”按钮的默认选择现在是本地 PC。

* **对齐现在默认为十进制间隔**

	* 现在已将对齐尺寸默认为十进制间隔！

		1 个虚幻单位 = 1 厘米。

	* 以下是新的对齐尺寸：		
		
		![](DecimalIntervals01.png)

	* 可以在首选项视口（Viewports）->网格对齐（Grid Snapping）中将游戏的对齐设置更改回 2 次方：
		
		![](DecimalIntervals02.png)

* **碰撞设置**

	* 现在可以设置并修改碰撞设置！

		可以为项目、新配置文件或自定义现有配置文件添加新通道。

	* 新设置可在编辑（Edit）->项目设置（Project Settings）->引擎（Engine）->碰撞（Collision）下找到：
		
		![](CollisionSetting.png)

* **输入映射绑定面板**

	* 可以使用新的输入映射绑定面板！

		该面板可在编辑（Edit）->项目设置（Project Settings）->输入（Input）下找到。

	* 输入（Input）面板包含三个单独的部分：

		_Axis Config_	
		
		![](AxisConfig.png)

		_Action Mappings_		
		
		![](ActionMappings.png)

		_Axis Mappings_		
		
		![](AxisMappings.png)

	* 可以使用两个按钮添加动作和轴映射。
		
		顶部按钮将创建一个没有设置名称的新映射，但该按钮通过映射本身的名称会将具有相同名称的另一个映射添加到该组。

* **放置/内容浏览器和编辑器模式**

	* 放置浏览器已焕然一新。
	
		在新放置浏览器中，可以快速访问光源、触发器、体积和所有类，甚至可以访问最近放置资源的冗长列表。

	* 编辑器模式已全部在工具（Tools）选项卡中重新组合。		
		
		![](PlacementBroswer01.png)

	* 此外，内容浏览器也已获得新外观。
		
		![](PlacementBroswer02.png)

* **详细信息面板标头精简，开源 C++ 文件**

	* 现在已将两个详细信息标头行压缩成一个简单行。图标工具提示现在显示类名称（如场景大纲视图）。

	* 对于拥有 C++ 代码的 Actor，可以单击标头文件超链接打开代码（只有已安装 VS 或 Xcode 才显示）。
		
		![](DetailsPanel01.png)

	* 以前，Actor 类名是可以链接到蓝图编辑器的超链接。现在，可使用单独的按钮执行此操作。
		
		![](DetailsPanel02.png)

	* 也已通过右键单击菜单将 C++ 文件访问权限添加到视口（如果已安装编译器）。

		当然，还可以双击类查看器中的类。		
		
		![](DetailsPanel03.png)

* **程序员的新工具：消息调试器**

	* 名为消息调试器的新工具是 UE4 中消息系统的可视化调试工具，又名虚幻消息总线 (UMB)。

		由于消息系统的高度异步性，因此很难调试使用消息系统的应用程序。

	* 此时，仍然需要将消息调试器视为“实验性 � 使用，风险自负”，并且必须在编辑器首选项中显式激活：		
		
		![](MessagingDebugger1.png) ![](MessagingDebugger2.png)

#### 渲染

* **有光泽的屏幕空间反射**

	* 支持材质粗糙度的屏幕空间反射功能已添加且默认启用！
		
		如果不想要任何屏幕空间反射，可以在后期处理设置（Post Process Settings）中淡化/禁用该功能。
		有些材质可能需要进行一些细微调整，但无论如何这些材质都会出现其他反射错误。
		现在，我们将它与基于图像光照（Image Based Lighting）和普通（分析）光源保持一致。

	* 具有不同粗糙度的示例贴花（视口非常小，因此可以看到颗粒/噪点）：
		
		![](Glossy.png)

* **预览阴影指示器**

	* 我们现在拥有在阴影中以文本形式显示的预览阴影指示器。

		_构建 � 距离场阴影贴图_	
		
		![](PreviewShadows01.png)

		_未构建 —— 正在使用预览阴影指示器_
		
		![](PreviewShadows02.png)

	*“可视化（Visualize）”下拥有可用于禁用它的显示标记。
		
		要调整用于投射文本的光源功能材质，即 Material'/Engine/EditorMaterials/PreviewShadowIndicatorMaterial.PreviewShadowIndicatorMaterial'

#### 动画

* **非等分缩放动画**

	* 现在不支持非等分缩放动画。不需要任何选项。导入动画时，如果存在缩放比例，则会导入。

		考虑到内存问题，我们不会为所有动画保存缩放比例。我们只有在它的缩放比例不为 1 时才保存。

	* 动画的示例视频。

		[![](AngryChest.png)](AngryChest.wmv)
		[![](CompoundTransform.png)](CompoundTransform.wmv)

		[![](Keridan_Facial.png)](Keridan_Facial.wmv)
		[![](Keridan_Facial_Compound.png)](Keridan_Facial_Compound.wmv)


## 新增内容

#### 编辑器和工具
* 新音效节点将自动连接到 SoundCue 编辑器中之前选择的节点。
* 放置浏览器已焕然一新。已删除内容浏览器中的“类”视图。
* 正在将 JPEG 导入支持添加到编辑器。处理基本 8 位 RGB 和 Gray JPEG 格式。
* 正在为内容浏览器中的 Slate 笔刷添加自定义缩略图渲染器。
*“C”键现在用于为材质编辑器和 SoundCue 编辑器创建注释。
* 在图表面板（例如，蓝图编辑器、材质编辑器）中使用 LMB+RMB 单击并拖动以执行缩放。
* 关卡视口中的 Ctrl+E（编辑关联资源）现在用于蓝图以外的资源类型，并打开相应的资源编辑器。
* 用于创建材质表达式的热键现在显示在控制板列表中的条目旁边。
* 已将光照/阴影控件添加到植被工具。
* **地形**
	* 已将平整到高度选项添加到地形平整工具。
	* 已将斜坡工具添加到地形编辑器。
* 现在可以在 Matinee 中创建和编辑相机动画。
* 添加了在全局和每个项目源控制设置之间切换的功能。
* Actor 现在可以由多个 Matinee 同时控制。
* 已在使用 Subversion 和固定同步无法正常工作时添加 Unicode 支持。
* 现在双击其他蓝图上的函数调用会打开相应的蓝图。
* 现在可以在编辑器重启时恢复资源（Asset）选项卡。
* 现在可以在编辑器设置中切换语言。
* 在 CB 中查找现在可以查找引擎资源或开发者资源，即使它们通常不可见。
* 内容浏览器现在可以选择显示引擎资源。
* 内容浏览器现在可以选择隐藏开发者资源。
* 导演组/轨迹现在可以在运行/删除时激活 Camera Actor。
* 暂停时现在可以拥有/弹出，但如果调试蓝图则不能。
* 失败的“热编译”现在通知中包含“显示日志”超链接。
* BSP 工作流程已重新设计。
* 用户现在可以配置启动画面位图。
* 已从编辑器中添加代码项目重新生成。
* **Slate**
	* Slate 核心中不再存在 FEditorStyle。
	* FEditorStyle 现在存在于 EditorStyle 模块中，而非 Slate 模块。
	* 如果正在使用 FEditorStyle，则需要将“EditorStyle”添加到 .Build.cs 文件中链接的模块列表。
	* 我们不建议在游戏风格中使用 FEditorStyle；有关设置游戏风格的推荐方法的示例，请参阅 ShooterGame 或 StrategyGame 示例。
* 已将 SRichTextBlock 添加到 Slate。SRichTextBlock 允许所有在所述文本文档中混合多种类型的字体、字号、颜色、控件和图像。
* 角色编辑器中的通知状态现在可以拖动限制句柄以编辑持续时间。
* 可以从骨架网格体中添加和删除材质元素，以允许定义 LOD 材质。
* UnrealVS Batch Builder 窗口。
* 已在 GPU 发射器的色标/生命模块中添加对粒子参数的支持。
* 添加了可抵消 UV 空间中顶点位置的新粒子模块（支点偏移量）。
* 现在只需按住鼠标按钮就可以使用 WASD。
* 视角视口选框选择现在只考虑在选框内具有可见像素的供选择的对象。
* 已将复制/粘贴添加到详细信息（Details）面板中的属性。
* 用于在项目和场景设置中创建/选择/编辑游戏模式的新 UI。
* **物理资源工具**
	* PhAT 支持多选。
	* PhAT 拥有仅显示带形体的骨骼的新层级过滤器。
	* PhAT 拥有名为选定模拟的新模拟模式。

#### 蓝图
* 添加了 UApplicationLifecycleComponent，可将其添加到需要侦听平台特定应用程序生命周期事件（例如，iOS 系统消息）的任何 Actor。适用于原生类和蓝图类
* 已将链接到文档的多个丰富的工具提示添加到蓝图编辑器。
* +/- 键现在可用于放大/缩小蓝图图表编辑器。
* 已将“收藏夹（Favorites）”面板添加到蓝图控制板（以及收藏功能）。
* 蓝图可实现功能现在可以使用 `TScriptInterface<>` 参数。
* 新“WorldContext”元标签用于标记蓝图函数中的场景关联参数。
* 添加了对蓝图宏调试的支持。
* 已修改蓝图节点资源引用，以使资源选取器与可在编辑器中选择资源的其他位置更加内联。
* 已根据它们引用的变量将文档工具提示添加到蓝图变量获取/设置节点。
	* 如果可以找到有效的文档，此功能将自动显示在工具提示中。
* 可以在蓝图函数中放置并命名局部变量。
* 已将“关卡蓝图（Level Blueprint）”工具栏重命名为“蓝图（Blueprints）”，并添加了创建和编辑各种蓝图的功能。
* 现在可以将选择折叠为宏或函数，并将折叠图表提升为宏和函数。
* 将 BP 公开的 IgnoreActorWhenMoving 函数添加到 PrimComp。
* 蓝图编辑器文档选项卡现在在它们中拥有图标。
* 蓝图节点现在在它们（和菜单）中拥有图标。
	* 已为不同类型的节点创建许多自定义图标。
	* 事件节点执行引脚现在使用普通执行引脚样式。
* 事件现在已按类别分组。
* 已将“从....创建蓝图（Create Blueprint From...）”选项添加到内容浏览器快捷菜单。
* 添加 GetActorUp/Right/ForwardVector

#### 渲染
* 可视化体积光照样本和预计算可见性单元的显示标记。
* 在整个场景阴影中用于预览的预览阴影指示器文本渲染器。
	* 可以通过可视化类别中的显示标记禁用。
	* 为与游戏保持一致，在 PIE 中不再应用未构建定向光源的预览 CSM。
* ES2 着色器统计数据和错误现在可以显示在材质和 MIC 编辑器中。
* 已为屏幕空间反射添加粗糙度支持。
* 添加了 WIP LightPropagationVolume（从 Microsoft/Lionhead 集成）。
* 添加了 r.ViewportTest 以测试在未设置 Matinee 时渲染通道的不同视口情况（仅适用于游戏）。
* 添加了可在 HLSL“View.GeneralPurposeTweak”中访问着色器开发的“r.GeneralPurposeTweak”。
* 创建可扩展性设置 CVars，以便轻松维护状态（例如，在设备配置文件中覆盖）。
* 添加了 r.MipMapLODBias 控制台变量以覆盖所有 2D 纹理的 LOD 偏移。

#### Gameplay 和框架
* 已将 FromIso8601 和 ToIso8601 添加到 FDateTime 以支持 ISO-8601 日期格式。
* 在寻路网格体重构期间降低内存使用量，只有少数生成器会同时接收碰撞数据。
* 已将最大寻路网格体平铺块尺寸增加到 65536 个体素（为256).
* 已通过切换到 64 位多边形地址增加寻路网格体多边形和平铺块的最大数量。
* 寻路网格体生成的新区域分区：ChunkyMonotone
	* 将平铺块分为矩形块（默认值：2x2）并在它们中运行单调分区。
	* 明显比默认模式更快（转折点）
	* 文件块分割可防止产生长而简洁的多边形，但生成的多边形比其他方法稍多。
	* 已将分区方法选择移动到 RecastNavMesh 生成类别的高级显示。
* 添加了动态障碍物的默认导航区域（类似于默认可行走），可以通过游戏特定设置覆盖。
* 已将 EQS 调试绘制添加到 GameplayDebuggingComponent 的显示。
* GameplayDebuggingComponent 的绘制现在正在使用自己的显示标记：GameplayDebugging。
* 已实现 EQSTestingPawn，该工具用于在编辑器视口中测试 EQS 查询。
* 定义的 FAISystem::InvalidLocation 可用作结合 AI 使用的“未设置”或“已清除”FVector 的值。
* 添加了用于时间段单一 EQS 测试的方法。
* 添加了强大的新 EQS 生成器，以围绕指示的上下文生成项目。
* 添加了为黑板定义“持久性密钥”的方法，意味着密钥将出现在所有 BB 资源中（如果父 BB 有密钥，则不会重复出现）。
* 选择动画节点时，添加了对角色编辑器详细信息面板的支持以进行结构自定义。
* 添加了将骨架的预览网格体分别设置为角色编辑器中当前预览网格体的功能（以前这是相同的操作）。
* 已将新面板添加到角色编辑器，以允许用户将预览实例上的属性分别编辑为属性默认值。
* 已将快捷菜单选项添加到动画蓝图节点，以允许用户打开关联的资源。
* 已将脏标记添加到角色编辑器中的模式控件。
* 已将保存（Save）快捷菜单选项添加到角色编辑器的资源浏览器。
* 在游戏中，使用 showdebug 命令切换骨骼绘制。
* 在游戏中，调试播放动画的输出。
* 角色编辑器 CB 工具栏按钮中的查找（Find）现在可根据当前模式（骨架、网格体等）突出显示相应的资源。
* 已将轴小工具添加到角色编辑器中的插槽。
* 添加声音/粒子通知会自动将其设置为角色编辑器中的选定资源（如果它是合适的类型）。
* 已重新添加 SoundNode Concatenate。
* 添加了对数据表格编辑器的滚动支持。
* 已改进 Actor 详细信息 UI，功能更强大且界面更紧凑。
* 现在可以从编辑器更轻松地访问 C++ 源文件！
	* 已为选定 Actor 添加右键单击（Right Click）->打开 C++ 源文件（Open C++ Source File）。
	* 已将“转到源文件（Go to Source File）”按钮添加到详细信息标头（超链接）。
* 添加了新首选项以切换编辑器音效（例如，“编辑器音效（Editor Sounds）”部分下的 PIE 音效。）
* 已为射击游戏添加文字聊天。
* 双击类查看器中的原生类将在 IDE 中打开标头文件。
* 编辑器帮助菜单包含 API 文档的快捷键。
* 已在项目浏览器中添加选项以自动加载最后一个项目。
* 碰撞：项目设置（Project Setting）/碰撞（Collision）中已提供碰撞通道设置。
* 物理表面：项目设置（Project Setting）/Physics（物理）中已提供物理表面设置。
* 自动化测试配置：可以将各种自动化测试资源添加到编辑器设置（Editor Setting）/自动化（Automation）。
* 添加了允许导出本地化可移植对象 (.po) 文件的命令行。
* 在混合空间中，现在可以将动画通知限制为最高加权动画；或完全禁用。

#### 核心
* 添加了 Simplygon ProxyLOD 集成，支持静态网格体组件和地形的融合（在实验性（Experimental）->Actor 融合（Actor Merging）下隐藏）。
* 已通过按材质分组添加 Actor 融合工具（在实验性（Experimental）->Actor 融合（Actor Merging）下隐藏）。
* 专属服务器现在可以将自己的 ini 文件（DedicatedServer*.ini）存储在与 Default*.ini 相同的目录中。
* UBT：已将类型（Type）和 IsCooked 属性添加到 TargetInfo 类：这种方法构建规则可以在为烘焙目标构建二进制文件时有条件地配置模块。
* 添加了根据资源注册表数据和游戏回调创建多个 pak 文件版本的功能（对于分块数据下载非常有用）。
* 接受 nullptr 和 0 现在作为 BlueprintCallableFunction 中指针的默认参数。
* 现在可以通过字段迭代找到接口 UFunction。
* 新的 TFieldRange 类使用方法与 TFieldIterator 相同，但它用于 ranged-for 构造，例如用于（`UFunction* Func : TFieldRange<UFunction>(Class)`）。
* 新 TObjectRange 类的功能与 TObjectIterator 类相同。
* TMaps 和 TMultiMap 现在可以添加到单个 Key 参数或使用单个 Key 参数（放置），例如 Map.Add(Key);，并且映射的值将是默认构造的。
* 委托现在具有 AddUniqueDynamic 和 IsAlreadyBound 函数以辅助可以多次绑定相同对象/函数的代码。
* UnrealHeaderTool 现在可以正确处理非 ANSI 字符（例如，为工具提示、DisplayName 说明符等解析的注释）。
* 已在非编辑器 Win64 版本中启用 BinnedMalloc。添加了对齐分配的支持，直到正在运行的平台的页面大小。

#### 平台
* **Mac**
	* 修改并重命名 iOSMoviePlayer 插件，以便在也使用相同 AVFoundation API 进行电影播放的 Mac OS X 上进行编译和链接（已在 AVIWriter 中使用）。
	* 需要时使 Mac 窗口渲染器包含投射阴影和圆角，并使关闭（Close）/最小化（Minimize）/恢复（Restore）按钮就像在 OS X 中一样突出显示。
	* 使用新 C++ 故障报告器初始实现 Mac OS X 的故障报告，生成与 Linux 版本类似的报告。
	* 在 OS X 中启用新的 CrashReportClient 并禁用所有旧的错误报告。
	* 添加可隐藏对话框以警告用户在未运行 Mac OS X 的最新版本时进行更新。
	* 在 LLDB 中支持 TCHAR。
* **Android**
	* 在四指点击对话框中显示支持的纹理格式。
	* 已在 Android 中添加对 r.MobileContentScaleFactor 的支持（1.0 表示 1280x720，但具有适合的宽高比），限定为原始分辨率。
	* 已使用 Ogg 添加 Android 音频支持。

#### 动画
* 已在提取根运动时添加用于锁定根骨骼的不同选项。已将默认值从动画的第一帧更改为参考姿势。
* 优化：已为所有骨架网格体启用 CachedLocalBounds 优化。		
* **动画需要重新保存**
	* 已将 GUID 添加到骨架资源，以便动画可以跟踪版本。我们建议重新保存所有动画。否则，在加载时会压缩动画。
* 非等分缩放动画支持：仅在应用缩放比例时使用（例如，不等于 1,1,1）。
	* 如果正在导入缩放比例时出现问题，启用“保留局部变换（Preserve Local Transform）”。
	* 请注意，不支持偏斜/剪切，因此将会删除信息并产生与源数据不同的结果。

	
## Upgrade Notes （以下内容仅供参考，不作翻译）

#### Editor and Tools
* Selected Actors Delta Transform for context menu.
* Show Uncached static Lighting build info in SceneOutliner.
* Added Console Command to dump visible actors ("DumpVisibleActors").
* Atmospheric fog: Added Blueprint access for Precompute variables (only valid for editor).
* Decimal snap grid is now enabled by default and the snap size is now 10 cm.  You will need to enable the power of two snap grid in the viewport settings to revert to the old behavior.
* Engine content has been disabled by default in the content browser.  You can enable this again in the content browsers view settings.
* VirtualJoystick: Inherits values from UTouchInterface.
	* Added bPreventRecenter, which prevents Joystick re-centering.
	* Prevent moving outside of screen, clamp ThumbPosition to be inside screen.
	* Added Activation Delay.
	* Added InputScale to control each Joystick's speed.
* Default ProjectileMovementComponent Velocity to (1,0,0) to make it a bit simpler to use.
* Remove GameModeForPIE. 
* Created SEnableBox, which lies to the contained widget about whether the parent hierarchy is enabled or not.
* Created an external image reference widget, which internally handles checkout/add/etc...
* Added the ability for asset type actions to provide a user description of the asset, showing up in a separate section of the tooltip.
* Level streaming refactoring to fix Launch and Play in new process for maps with streaming levels.
* Changed graph panel grid rendering method to keep sharpness at all zoom levels and show origin lines in a third color.

#### Rendering
* Changed SSAO defaults to be more subtle.
* Light properties cleanup. Major changes: point / spot lights use inverse squared falloff by default, Brightness changed to Intensity with new defaults per light type, Radius renamed to AttenuationRadius.
* To prepare for future shader optimisations, it is now a requirement to bind shaders to the global state BEFORE setting any parameters. Trying to set parameters on a shader which isn't currently bound will produce and ensure.
* Almost all settings have been removed from SystemSettings, and replaced with equivalent console variables. This includes system resolution (GSystemSettings.ResX/ResY) which are now accessible from code via GSystemResolution.ResX and GSystemResolution.ResY. A new console variable (r.setres) has also been added to replace the old "setres" command.
* The default near clipping plane has been set to 10cm. This may cause z-fighting if your game uses very long view distances. See r.SetNearClipPlane.
* Made PostprocessAmbient purely additive, not occluded by environment reflections or other things (other than SSAO), now it's meant to make an more interesting ambient (content might need to retweaked) not a infinitly far away skybox texture.
* Changed TextRender default material to be opaque (TemporalAA quality improvements now make this the better option).
* Consoles now use less memory when using ScreenPercentage. In case the game wants to dynamically change it over multiple frames this is not the right method. If needed we can use the cvars settings and make it a platform/game property.
* Usability change of showflags: game and editor showflag state now allows proper toggle (2 states are stored and toggled).
* Allow TemporalAA in editor by default (minor flickering with editor primitives is expected).
* Split ScalabilitySetting persistence into game and editor (different ini files). This allows early loading of the settings (even game isn't there yet) and avoid reinit of subsystems.

#### Gameplay and Framework
* Oculus integration has been updated with improvements to latency, and support for positional tracking devices. Note:  LibOVR SDK for positional tracking must be procured from Oculus in order to use the functionality
* Components Array removal
	* The components array has been removed, it is no longer necessary to add newly created components to any array. If you do not wish a created component to be registered set bAutoRegister to false.  Access to the components array is via the AActor::GetComponents function.  Unless a component is created independently of an Actor, the component must have a direct outer of the Actor. In general, you cannot have components that are subobjects of a non-actor. 
* Input binding changes
	* Key bindings are now done by name instead of enum.  A new struct FKey encapsulates the name and provides a number of helper functions. It is encouraged to use these helper functions for things such as IsGamePadKey, however, the EKeys::IsGamepadKey functions are still defined to make migration easier.
	* EKeys enum has been eliminated.  Places that used EKeys::Type or EKey will generally need to be changed to FKey
	* All EKeys enum entries (e.g. EKeys::MouseX) have been translated in to static const members of an EKeys struct so most usages of key names will still work, however, because it is a struct you can no longer switch on a Key's value.
	* Many Input settings have been moved out of Engine.PlayerInput and in to Engine.InputSettings. Of most significant note: AxisConfig, ActionMappings, and AxisMappings.
* WorldFromContextGetter has been removed.  All UObjects can now implement a virtual GetWorld() function instead.
* APlayerCamera has been renamed APlayerCameraManager.
* AxisMappings MoveForward, MoveRight, MoveUp, Lookup, and Turn and ActionMapping PushToTalk have been removed from BaseInput.ini.  They must be supplied in the DefaultInput.ini for your specific game if required.
* SoundNodeGroupControl no longer considers distance.  Instead it simply ensures that the maximum number of sounds for each 'bucket' is playing before falling to the next 'bucket'.
* SoundNode NotifyFinished hooks have been restructured.  It is now possible for multiple nodes to request notification of the wave instance completing.
* UMETA is now consistent with other markup macros, in particular it uses comma instead of pipe as delimeter.
* Visual Studio 2013 is now used by default
	* Remember that your developers (and users of packaged builds) will need the Visual C++ 2013 redist installed.
	* You can still use Visual Studio 2012 if you need to (see below for more info, and CL # 1989640).
	* Certain platforms have debugging add-ins that do not work with the new IDE yet.  
		* We detect these platforms and force the project file format to 2012 automatically.
		* You can always override behavior by passing '-2012' or '-2013' on the GenerateProjectFiles command line.
	* Other special use cases:
		* If you want to use VS 2012 for everything (because you don't have VS 2013 yet), locally modify WindowsPlatform.Compiler in UEBuildWindows.cs.
		* If you want to keep using VS 2012 IDE but compile with VS 2013, make sure you have VS 2013 installed and pass '-2012' to GenerateProjectFiles.
		* If you want to use the VS 2013 IDE but compile with VS 2012, you can set WindowsPlatform.Compiler to 2012, but pass '-2013' to GenerateProjectFiles.
* Visual Studio 2013 Express for Windows Desktop is now fully supported!
* DirectX SDK prerequisites are now included along with the source!
	You no longer need to have the DirectX SDK installed on your PC to build the engine.
* Visual Studio and Xcode project file changes
	* Project files now generate for all platforms by default; Removed "AllPlatforms" .bat file.
		* You can pass "-CurrentPlatform" to get the old behavior if you want.
	* Project files: 'Shipping' configuration is now included by default.
		* You can pass "-NoShippingConfigs" to omit Shipping config (smaller/faster project files).
* Debug builds no longer use the Debug CRT (or Debug third party libraries) by default
	* Added new UnrealBuildTool option:  bDebugBuildsActuallyUseDebugCRT  (BuildConfiguration.cs)
	* bDebugBuildsActuallyUseDebugCRT: This is true if we should compile Debug builds using Debug CRT libs and Debug third party dependencies.  Otherwise, we'll actually compile against the Release CRT but leave optimizations turned off, so that it is still easy to debug.  
	* If you enable this setting, actual Debug versions of third party static libraries will be needed when compiling in Debug.
* Removed 'Shipping' PhysX binaries and libraries
	* We now link with PROFILE versions in all configurations by default.
* Removed default Steam file from binaries (steam_appid.txt)
	* You should create your own steam_appid.txt for your game project with a unique Steamworks ID for your project.
* Disable Link-Time-Code-Generation (LTCG) by default, even in Shipping builds
* (IMPORTANT) The DebugGame build configuration now shares engine binaries with the Development configuration.
	* DebugGame causes game modules to be compiled with UE_BUILD_DEVELOPMENT, but optimization disabled. 
	* Pass -debug on the command line to tell the editor to load DebugGame game modules.
	* Delete user configuration files from Intermediate\ProjectFiles to have UBT automatically fill in the correct command line in your project settings.
* Config settings for installed builds are now stored in the user's AppData folder, rather than My Documents.
* Template projects now have a .uproject extension again.
* The engine version now has a Major.Minor.Hotfix component as well as changelist number (FEngineVersion). This version is saved into packages to allow for out of band hotfixes.
	* Modules will need to be recompiled with the correct version strings from PCLaunch.rc for the engine to load them.
* Decision to compile plugins in monolithic builds is filtered by the enabled plugin list in config files.
* LevelEditor: the "Mobile Preview" menu has been hidden, because the functionality isn't fully implemented yet
* LevelEditor: the "-PlatformTools" command line switch has been removed; the remaining features that depended on it are now accessible in the 'Experimental' section of the Editor Preferences
* Settings: many Editor User Settings have been moved into new classes and exposed as separate sections in the Settings UI; your local settings changes may have to be reapplied
* Messaging: UDP message transport is now a plug-in (UdpMessaging) that is loaded by default, but still requires "-messaging" command line switch to activate in Shipping builds and standalone games; we are planning to get rid of the switch after this prototype implementation has been rewritten for production quality; no ETA yet

#### Animation
* Allowed anim sequence and blendspace properties to be exposed as a pin in the graph.
* Added support for inheriting from an existing Anim Blueprint (allowing overriding the defaults and event graph, but not the anim graph).
* Refactored the Persona viewport toolbar and widgets, improving real estate usage and behaving similar to the level editor.
* Various bug fixes for Anim Blueprint debugging.
* Added a customization for FBoneReference structures, showing a skeleton tree picker for the bone name.
* Added filtering logic to asset pickers on anim player nodes so that only compatible assets (based on skeleton) are shown.

#### Core
* Intermediate generated files are now per-platform.
	* If you have tools which do any kind of processing on generated files, then these will need to be updated to the new locations.
* ConstCast has been removed, because it's confusingly unlike C++'s const_cast.
	* `ConstCast<T>` should be replaced with `Cast<const T>`.
* Renamed UObjectSerializer to UGCObjectReferencer and FSerializableObject to FGCObject as they do not use serialization to collect garbage anymore and may be misleading.
* Code refactoring that requires action from licensees:
	* Renamed GIsUCC to IsRunningCommandlet() (mostly)
	* Renamed USpriteComponent to UBillboardComponent
	* Renamed UMaterialSpriteComponent to UMaterialBillboardComponent

#### Platforms
* **Moblie**
	* Exposed touch input interface properties to be editable in the Settings UI.
	* Added copying of platform-specific configuration files for Android and iOS via the Settings panel.
	* Added editing for icons, launch screens, and device orientation in Project Settings.
	* Various packaging size optimizations for cooked games.
* **Android**
	* Enabled Android support directly from the editor with Package and Launch (aka One Click Deploy).
	* Packaging Android will create a .obb file next to the .apk, with a .bat to install it.
	* Packaging in Distribution needs SigningConfig.xml to be setup properly (see sample in Engine/Build/Android/Java).
	* .apk generation now only happens if .so of java files have changed.
* **Mac**
	* Mac editor works but pre-built binaries are not included with this release.
		* For now, you must compile the binaries in order to run the editor on Mac.
		* This will be resolved for the next QA build.
	* Unreal Frontend works on Mac.			
	**iOS**
	* iOS build and packaging works on Mac.
	* Various fixes and improvements to GameCenter OSS.
	* Added experimental iAD support for iOS.
	* Fixed icon glossy effect showing up on iOS6 incorrectly.
	* Forced symbol stripping to always be on for Shipping iOS builds.
	* Various improvements to the PC iOS deployment workflow (to code sign from the editor, set environment variable uebp_CodeSignWhenStaging=1, but you will have to have a valid certificate for your provision installed on the PC).
	* Merged various iPhonePackager changes from UE3 (fat binary support, fix for code signing extending beyond the preallocated size in the stub, etc...).
	
#### Networking
* A new bool has been added, bReplicates. This should be set in blueprints and C++ constructors to make an actor replicate. Setting RemoteRole=ROLE_SimulatedProxy manually is no longer necessary. 


## Future Additions and Ongoing Efforts

#### Editor and Tools
* Material Properties are now correctly greyed out when they have no effect.
* Prevented most incompatible connections in the new Material Editor.
* Made sure actors spawned during iteration are correctly included in the iteration.
* Made sure deletion of SoundNode inputs can be undone correctly.
* Improved display of Input mappings.
* Static Switch Parameters now output any Material Attribute inputs.
* Added rich tooltips for the Input Project Settings.
* Added cursor indicator when drag-dropping assets & a warning when dropping textures on actors.
* Locking actor movement now prevents editing of transform in Property Matrix.
* Reset themes menu when color picker is re-created.
* Added IDE name to message displayed when new project is created.
* Content Browser splitter sizes are now preserved between sessions.
* Matinee now displays correct name for asset.
* SETRES console command now works in PIE in standalone game (and when specifying ResX/ResY on the command line).
* Asset rename now prevents `*\<>?` characters from being entered.
* "Find In Content Browser" now uses the last content browser that was clicked.
* "Play From Here" option is now not available from Scene Outliner.
* Prevented assets from getting RF_MarkPendingKill added when they have been serialized with RF_Transactional.
	* Prevents some objects being wrongly inserted into the undo buffer.
* Key struct customization is now sized more reasonably.
* A newly-created editor no longer defaults to Subversion source control.
* Rearranged Blueprint tutorial flow & auto-run appropriate tutorial for current BP editor mode.
* CTRL+Backspace and CTRL+Delete (delete-to-word-boundary) hotkeys now work in text boxes
* Users can now move selected keys in the curve editor without having the mouse over a key by holding CTRL.
* BSP brushes now respect editor visibility settings
* Added an icon to blueprint variable nodes that are set to be replicated.
* Scene outliner now displays the number of selected actors in its footer.
* Pressing escape now closes any popup windows, cancels drag-spinning and actor viewport dragging operations.
* Reimport file paths are now stored relative to their associated packages, where this makes sense.
* Added visual cue for scale on orthographic viewports.
* Reset buttons now exist for actor transforms on the details panel.
*  Mesh Paint mode no longer forces backets to be displayed around the selection.
* Cancelling survey now fades away instantly.
* Matinee track menu options now match their track names.
* Added missing meta tags for InterpTrack classes.
* Project browser description no longer mentions creating a project.
* Matinee no longer crashes when using shared interp data.
* Opening projects from newer editor versions now fails gracefully.
* Object names can no longer contain the letter `.
* Sound Cue 'Stop' now looks like a stop symbol.
* Show Folder options is now disabled except for the Content Browser.
* Static Mesh Editor LOD Message now correctly displays the LOD Index.
* Scene outliner sorting arrow is now more visible.
* Default keybinding now appears correctly in Preferences.
* Content Browser assets update to respect filters as assets are loaded.
* Ortho viewport now display the correct viewmode.
* Changing language/region now prompts user to restart.
* Class picker in skeletal mesh actors now correctly restricts selection pool by skeleton.
* Anim graph node details panel now correctly shows properties with children.
* Improvements to FBX window tooltips.
* Morph target deletion in Persona can now be undone.
* Skeletal mesh stats set to default appear in Persona viewport.
* Notifies in Persona now respond to editor delete command.
* Blendspace sequence assets can be opened directly from the samples in Persona.
* Improvements to FBX export file location selection.
* Deleting and undoing blendspace nodes now works correctly.
* State machines in animation graphs preserve their name when copied.
* Rich tooltips added to many animation graph nodes.
* Playback timeline no longer shows duplicate frame numbers.
* Colour pickers in the blueprint editor and Persona improved to be more visible.
* Vertex anims no longer filterable.
* Flight controls in PhAT no longer conflict with transform mode selection.
* Base pose now called Retarget Source.
* UnrealVS is now built for VS2012 Pro and VS2013 Pro, with separate builds in their own folders in Engine/Extras.
* Beta version flag in Unreal Editor plugins can be set by plugin developers in the uplugin file.
	* Beta plugins display a warning when enabled in the plugin manager.
	* Beta version info is displayed with the version number in the plugin manager.
* **Landscape**
	* Landscape brush is now hidden while moving the camera.
	* Default landscape scale has been changed to 100,100,100.
* Adjusted shootergame spawn points to spread bots out more.
* Revised shootergame bot behaviour to allow them to fire up/down.
* Made various revisions to scoreboard in shootergame.
* Revised boost pickups in vehicle game to make them respawn.
* Refactored game interface usage in vehicle game, hovership.
* Slate: Widgets inside the Slate core no longer depend on FEditorStyle.
* ShooterGame, StrategyGame, and VehicleGame: Converted over to use Slate Widget Style assets, and now has no dependency on FEditorStyle.
* IMPORT: FBX Log messages now goes to Log window. 
* TextureEditor: textures can now be reimported from the Texture Editor's toolbar.
* Translation Editor (Work in progress): 
	* Undo/Redo support
	* Only save to file when data has actually changed
	* Prevent insertion/deletion/duplication of rows (needed EditFixedSize tag on array UProperty).
	* Show error if history can't be loaded, or source control disabled (toast + message log, but don't display message log).
	* Show error if can't load current manifest or archive (toast + message log, show message log).
	* Show error if check-out/save file failed, or notification if it succeeded.
	* Don't try to check out the archive on the perforce server every time we save, but instead remember that we checked it out.
	* Remove "Find in Content Browser" button and menu item.
	* Correct tab title from "TranslationDataObject_1" to "Language Name - Project Name - Translation Editor."

#### Rendering
* Removed min mip on reflection environment and sky specular - was preventing rough materials from going all the way diffuse.
* Reflection environment support for Feature Level SM4.
* LightAsIfStatic is now usable on movable static meshes again.
* Sky lights now recapture properly in construction scripts.
* Visualization of selected BSP surfaces now matches that of other objects in the editor.
* Removed experimental TemporalUpsample feature (reconstructing inbetween frames from existing frames).
* Removed experimental feature r.MSAA.DeferredMode (memory intensive AA solution).
* Removed BlurGBuffer feature (rarely used, since TemporalAA add NormalRoughnessToAlpha barely needed), feature didn't work with StereoRendering.
* Refactored EngineShowflags definition code.
	* Allows compiler optimizations when flags are fixed for certain build configurations. 
* **Optimization** 
	* Primitive/light interactions for movable directional lights are only created if the primitive needs to cast a per-object shadow.
	* Numerous small improvements to single threaded rendering performance.
	* Allocations from the global dynamic vertex and index buffers are now backed using a pool of smaller buffers.
	* Numerous mobile shader optimizations.
	* Draw lists can now be sorted front-to-back within a drawing policy, greatly increases performance on mobile devices without hidden surface removal.
* **Android** 
	* Clamp screen resolution to 1024 when using the mosaic fallback on Android devices. This is necessary due to limited precision in glFragCoord.
	* Kindle Fire HDX and Galaxy S4 now use FP16 render targets.

#### Blueprints
* Better categorizing of blueprint nodes in the blueprint palette/context menu.
	* We've made an initial pass to clean up the node categorization (aiming to slim down the number of categories, while making nodes more discoverable)� while it's not perfect, we continue to iterate on it, bettering it as we go.
* Blueprint component variables are now assigned to the "Default" category.
* Array properties will now ensure that internal type information has been fully loaded prior to serializing elements of the array into an object instance.
* Removed an unnecessary assertion during Blueprint asset loading.
* Added "Transient" and "Save Game" flag to variable details panel in Blueprints.
* "NotBlueprintType" support added to UClass headers to stop inheritence of "BlueprintType."

#### Gameplay and Framework
* Add DeferStartupPrecache and PrecacheStartupSounds to FAudioDevice, which lets a game delay the caching of startup sounds until after settings can be read. Add SetMaxChannels to modify MaxChannels of AudioDevice at runtime
* Add ability to do substring enum redirects in Engine.ini. Example:

		+EnumRedirects=(EnumName="ENewEnum",OldEnumSubstring="EOldEnum::",NewEnumSubstring="ENewEnum::")

* Deleted many unused commandlets.
* UWorlds are now RF_Public and RF_Standalone. This is in preparation of treating them like assets and managing them in the content browser.
* Lightmaps are now viewable via the world settings details panel. 
* Minor stability improvements to the replication system
* Minor navmesh stability improvements.
* CDOs for blueprints now get PostLoad called on them after they are regenerated at load time.
* If audio hardware is not found or fails to initialize, the audio device is now deleted. Also, audio devices are no longer initialized in commandlets.
* Minor performance improvements for recompiling Blueprints.
* Minor cloth stability improvements.
* Added tooltips for anim nodes in Persona.
* Rearranged Show menu in Personas viewport.
* Merged GetSocketLocalTransfrom with GetSocketWorldTransform.
* Added an event to allow editors to manually refresh object references when objects are replaced.
* Polished "Create Anim Blueprint" window (redesign).
* Polished "Assign skeleton" window (changed skeleton selection to use asset pickers instead of plain list box).
* Polished "Retarget Anim Blueprints" (Added notifications to better inform user of what is happening).
* Changed blueprint tree display to use display names instead of object names.
* Better iterative compile times on single source files for small game modules.
	* Game modules now always get a precompiled header (faster iteration).
	* Previously, only game modules with more than 8 unity source files would get one.
		* New setting for this:  BuildConfiguration.bForcePrecompiledHeaderForGameModules.
	* Small game modules no longer use unity build (faster iteration).
		* Now, game modules with less than 32 source files force non-unity mode.
		* New setting for this:  BuildConfiguration.MinGameModuleSourceFilesForUnityBuild.
* Program modules no longer use shared PCHs by default (can be overridden using PCHUsageMode).
* Changed CodeView to be an experimental editor setting; disabled by default.
	* Added double-clicking on Class names to CodeView to jump to C++ code.
* UnrealBuildTool: Don't spawn more processes than the user has CPU cores (local executor only).
	* This frees up system resources but can reduce build times in some cases; In other cases it can actually improve build times.
* Disabled most editor window animations by default (can be toggled under "Editor Look and Feel" section).
* Editor's 'New Project' and 'Open Project' dialogs have been significantly improved.
* Fixed skyboxes included in synthesized Lightmass importance volumes.
	* Meshes larger than 10,000m along any axis are now ignored when calculating bounds for automatic importance volume.
* Content Browser: Fixed textures not streaming for thumbnail preview scenes.
* Improved error help when Visual Studio appears to be missing.
* DeviceManager: various burst upgrades to add new features and improve usability; device discovery has been overhauled.
* DeviceManager: implemented device shutdown for Windows devices; warning users if rebooting/shutting down local PC.
* SessionFrontend: various usability improvements.
* SessionFrontend: the Game Launcher tab has been removed from the Session Frontend and is now its own major tab accessible from the Window menu.
* Messaging: added FMessageEndpoint::SafeRelease() for safely destroying message endpoints from non-Game threads; search code base for usage examples.
* MessagingDebugger: various burst upgrades to add new features and improve usability
* MessagingDebugger: the Messaging Debugger UI is currently inaccessible from standalone UFE; this will be fixed next release.
* PlayInEditor: the pre-defined screen resolutions for PIE settings are now configurable in the INI.
* PlayInEditor: the "Launch on Device" feature in the Level Editor has been cleaned up and stabilized.
* PlayInEditor: added "Mobile Preview" option that will launch the game in a standalone process with mobile emulation.
* ColorPicker: various usability improvements and now remembers its last state.
* Slate: improved capabilities of SSlider widget (vertical sliders, indented knobs etc.)
* General: continued conversion of code to use selected C++11 features (NULL -> nullptr, auto in for-loops etc.)
* Selected lines in Output Log are now readable. 

#### Core
* Added LOD levels generation to World Browser, requires Simplygon.
* Finished implementation of TCircularQueue
* Upgraded Opus voice codec to v1.1
* More efforts to handle deep install paths and project paths outside of the engine.
* Const-correctness fixes.
* New functions and fixes to further unify the behavior of TArray and TIndirectArray.
* Improvements to error handling and error messages from UnrealHeaderTool.
* Some UnrealHeaderTool parsing fixes.
* Build speed improvements.
* StringCast now handles null pointers.
* TMap/TSet/TMultiMap iteration fixes.
* Redirect initialization code now handles the CoreUObject.Metadata section being missing from the .ini file.
* UnrealHeaderTool generated includes are now normalized.
* Improved tooltip parsing to eliminate superfluous 'borders', e.g. lines containing all ======, ------ etc.
* Tooltips are now parsed for more property types which were previously being missed.

#### Networking
* Removed old/broken ping code
* Added new server-authoritative ping code
	* Uses low level net driver acks, to calculate client ping, and adds validation to reduce ability to tamper with values
	* Adjusted ping smoothing in high-level player state code, to work better with new ping code

#### Platforms
* **Mac**
	* Make adding code to projects work on OS X.
	* When exploring to a file, open the parent folder in Finder and select that file, or for folders just open them.
	* Disambiguate some C++ types that were causing crashes on Mac due to silent linker failure.
	* Make Mac OS X output log scroll to new entries.
	* Cache the window's zoomed state on Mac OS X - the objc_msgsend for isZoomed is sitting top of the profiler when running the editor!
	* Make it easier to detach window tabs on the Mac.
	* Make windows appear on editor restart on Mac OS X.
	* Stop minimized windows stealing mouse events on Mac OS X.
	* Stop crashing when trying to reshape windows on OS X.
	* Stop crashing after closing prompt windows on OS X.
	* Make sure that the output log window opens & displays content on OS X even when there's no MacApplication.
	* Stop the level viewport graphics from fading on OS X when using sub-editors.
	* Avoid corruption when rendering temporal screen space reflections
		* Must enable NAN suppression on Mac OS X to handle differing NAN/INF conditions in GLSL.
	* When rendering particles ensure a texture buffer is bound even for lower shader models to avoid a crash.
	* Use a PBO pack, followed by a PBO unpack to copy texture mips when newer extensions aren't available to avoid synchronising the CPU & GL with glMapBuffer.
	* Eliminate one cause of slowdown when mousing over the editor.
	* Cache the hit proxy data into a byte buffer rather than calling RHIReadSurfaceData which takes a very slow glReadPixels path for OpenGL..
	* Enable seamless cube maps on all GL's that support them.
	* Eliminate distortions at viewport edge when using SSR on Mac OS X. 
	* Speed-up locking CPU readback textures and general texture readback on Mac OS X + address HZB performance.
* **Android**
	* Android now prefers R8G8B8 backbuffer format instead of R5G6B5.
	* Android is now multithreaded (using proper CPU core count check at startup).
	* Now using OpenGL ES 3.0 shaders for high-end Qualcomm Adreno GPUs.
	* GPU frametime can now be measured in `STAT UNIT`. It's disabled by default due to driver issues on some devices, but can be enabled by setting the CVar `r.DisjointTimerQueries` to 1.
	* Initial Android controller and keyboard support is in.
	* Android pause/resume behavior has been cleaned up.
	* Android builds no longer rely on a user generated standalone toolchain.  UBT calls directly into the NDK toolchains.
	* Android debug stub projects are no longer generated if NSight 1.5 or later is installed.

#### Animation
* **Animation issues**
	* Skeleton: Fixed various marking as dirty issues, so you shouldn't see skeleton getting dirty anymore without a proper cause. 
		* You also don't have to save skeleton anymore when new anim notify is added to the animation.
	* ModifyBone SkeletalControl name changed to TransformBone for clarify.


## Known Issues

* Mac editor works but pre-built binaries are not included with this release. For now, you must compile the binaries in order to run the editor on Mac.



