INTSourceChangelist:3782314
Title:2014 年 3 月リリースノート
Crumbs:%ROOT%, Support/Builds
Description:
Availability:Licensee
Parent:Support/Builds
Order:-1

[TOC(start:2 end:2)]

## ビルド情報


[REGION:simpletable]
| アイテム | 情報 |
| ---- | ---- |
| **ラベル** | [INCLUDE:#labels] |
| **Built from Changelist #** |  (//depot/UE4-QA/Promotable-CL-) |
| **Branched from Changelist #** |  (//depot/UE4/Promoted-CL-) |
| **Visual Studio Version** |  |
| **DirectX** | June 2010 |
[/REGION]

[COMMENT:none]

[EXCERPT:Labels]
QA_APPROVED_UE4_BUILD_2014_  
QA_APPROVED_UE4_BUILD_CURRENT  
QA_APPROVED_UE4_BUILD_MINIMUM
[/EXCERPT:Labels]

[/COMMENT]

## 重要情報

* March QA ビルドが思うように上手く調整できませんでした。認証でコンソールを入れたら、パブリック リリースと QA ビルドでのコンソール修正と一致しなくなりました。 

	これにより、March QA ビルドが遅れる結果となり、**UE4-Releases/4.0/** のコンテンツは現時点で有効なコンソールに含まれていません。現在 **//depot/UE4-QA-Unstable/** ( *which was branched from Releases* ) に保存されているコンソールを、認証から安全に作業ができるブランチへ戻す作業をしています。   **//depot/UE4-QA/** へすぐにブランチしますが、コンソール ゲームを行う場合は、April QA ビルドで最低 1 つコンソールの認証ビルド、May QA では両方のビルドが含まれるようにします。 

* 現時点のエンジン開発ロードマップ: [UE4 Roadmaps](https://udn.unrealengine.com/questions/topics/roadmap.html)
* 修正されたバグ： [UE4 Fixed Bugs March 2014]
* 周知のバグ： [UE4 Known Issues March 2014]
 

## 主要な新機能

#### ブループリント

* **ブループリント マクロ デバッグ**

	* ブループリント マクロ デバッグのサポートが追加されました！

	* 例えば、ブループリント イベント グラフのマクロ インスタンス ノード上にブレークポイントが設定されていると、Play-in-Editor/Simulate-in-Editor の実行時、実行はマクログラフ内の最初の実行可能なノード状でブレークするようになりました。シングルステップ操作もできるようになりました。つまり、ブループリント オブジェクトのデバッグ中、マクロの内部のブレークポイントを設定して、様々なピン値が表示されます。

		_例：ブレークポイントを Gate ノード上に設定した場合です。_	

		![](MacroDebugging01.png)

		_実行は Gate マクログラフ内部の Enter 出力に適用されたシーケンス ノード上でブレークします。マクロ内部の Branch ノード上にブレークポイントを設定し、[Resume (再開)] をクリックすると_

		![](MacroDebugging02.png)

		_実行はそのポイントでブレークします_

		![](MacroDebugging03.png)

		_ピンにカーソルを合わせると、いろいろなカレント値を見ることができます。_

		![](MacroDebugging04.png)

* **ブループリントのピン アイコン**

	* デフォルトの BP ピン アイコンが新しくなり、エディタでデフォルトでティアドロップ形式になりました。  

		元の形式が良い場合は、エディタ設定を変更して元のピンを使用することができます。

		![](PinIcons.png)(w:720)

#### エディタとツール 

* **物理アセット ツール (PhAT)**

	* 物理アセット ツールが改善されました！

		![](PhysicalAssetTool.png)

	* シミュレーションを選択すると、残りのボディを固定したまま、興味のあるエリアをシミュレーションすることができます。
	* 複数のボディとコンストレイントを簡単に切り替えられるようにマルチセレクトがサポートされるようになりました。
	* ホットキー 1、2、3、4 を使って Swing1、Swing2、Twist を切り替え、コンストレイントの制限を素早く可視化するためにサイクルすることができます。
	* No Gravity は重力なしでシミュレーションします。隣接したボディ間のコリジョンや正しくないコンストレイントなどのミスの発見に非常に便利です。

* **カラーピッカーのユーザビリティの改善点**

	* デフォルトのビュー
		* サチュレーションとバリュー スライダー
		* 空の時、Theme バーがヘルプ メッセージを表示します。
		* カラー プレビューのブロックの間に小さなセパレータができました。
		* カラー ピッカーは sRGB プレビュー切り替えに関係なく、画面上に表示される色を常にピックするようになりました。

			![](ColorPicker01.png)

	* 詳細設定のビュー
		* R、G、B チャネルに H、S、V などのプレビュー グラディエントが付きました。
		* 16 進数の入力/出力
		* A を 1.0 より大きくすることができるようになりました (マテリアル エディタの場合).
		* プレビュー グラディエントが若干濃くなり見やすくなりました。
		* スライダーの幅が広くなりマウスの精度があがりました。
		* スライダーの数字入力が 2 桁ではなく 3 桁精度になり、正しい Hex 変換が行えるようになりました。

			![](ColorPicker02.png)

	* Quick Pick モード
		* ピペットの横にある小さなカラーホイールボタンでカラーホイールとクイック ピックを切り替えます。

			_今は、ホイールの右クリックでも切り替わります。_

		* 明るい色と暗い色で急いで実験する必要がある時のための Quick pick spectrum 

			_水平な中央のラインは 色調の値が 1.0 でサチュレーションが 1.0 であることを表します。_

			_色は上になるほど白に対してサチュレートします。_

			_色は下になるほど黒に対してリットされます。_		

			![](ColorPicker03.png)

* **Developer フォルダはデフォルトでは無効になっています。**

	* Engine フォルダもデフォルトでは無効になりました！ 

		* その表示は、View オプションから切り替えることができます。	 

			![](DeveloperFolder.png)

* **Play-In-Editor(PIE) と起動に関する変更点**

	* 以下は PIE の変更点です。
		* 'Current Camera / Default Player Start' の組み合わせに対するメニューエントリはなくなりました。
			* Current Camera / Default Player Start が一番下のグローバルなトグルになりました。
			* PIE を開始するには 4 つのエントリーのいずれかをクリックするだけです。
		* OpenGL ES エミュレーションでスタンドアローン型ゲームを起動する新オプション 'Mobile Preview' が追加されました。
		* 大きな [Play] ボタンが直近の選択を記憶します。
		* メニュー エントリーとツールチップが読みやすく / 理解しやすくなっていると思います。	

			![](PIE01.png)

	* Launch に関する変更点です。
		* デバイスがプラットフォームごとに分けられました。
		* 利用可能なデバイスのリストに関する多数の問題が修正されました。
		* ツールバーの大きな [Launch] ボタンが直近の選択を記憶します。
		* ローカル PC で [Launch] ボタンのデフォルト選択を行うようになりました。

* **Snap の間隔は10 進数がデフォルトになりました**

	* スナップサイズの間隔は既に 10 進数になっています！ 

		1 アンリアル単位 = 1 センチ (cm)

	* 新しいスナップサイズです。		

		![](DecimalIntervals01.png)

	* 環境設定の Viewports->Grid Snapping で、ゲームに対するスナップ設定をべき乗に戻すことができます。

		![](DecimalIntervals02.png)

* **コリジョン設定**

	* コリジョン設定のセットアップと修正が可能になりました！

		プロジェクトに新規チャネルや新規プロファイルを追加したり、既存のものをカスタマイズできるようになりました。

	* 設定の場所は、Edit->Project Settings->Engine->Collision です。

		![](CollisionSetting.png)

* **Input Mapping Bindings パネル**

	* 新しく [Input Mapping Binding] パネルができました！

		場所は、Edit > Project Settings > Input です。

	* [Input] パネル内には 3 つの別々のセクションがあります。

		_Axis Config_	

		![](AxisConfig.png)

		_Action Mappings_		

		![](ActionMappings.png)

		_Axis Mappings_		

		![](AxisMappings.png)

	* Action mapping と Axis mapping を追加するボタンがそれぞれあります。

		一番上のボタンでは名前設定のない新規マッピングが作成されますが、マッピングそのものの名前のついたボタンでは同じ名前をもつ別のマッピングがそのグループに追加されます。

* **プレースメント / コンテンツ ブラウザ＆Editor モード**

	* プレースメント ブラウザが全く新しいデザインで生まれ変わりました！  

	新しいプレースメント ブラウザでは、ライト、トリガー、ボリューム、全てのクラスへの迅速なアクセスだけでなく、最近配置したアセットの非常に長いリストにもアクセスできます。

	* Editor モードがすべて [Tools] タブの中に統合されました。		

		![](PlacementBroswer01.png)

	* さらに、コンテンツ ブラウザもデザインが新しくなりました。 

		![](PlacementBroswer02.png)

* **[Details] パネルのヘッダがスリムになり、 C++ ファイルを開けるようになりました**

	* 2 行だった詳細ヘッダーがシンプルに 1 行に圧縮されました。アイコン ツールチップがクラス名を表示するようになりました (Scene Outliner など)。   

	* C++ コードのあるアクタの場合は、ヘッダファイルのハイパーリンクをクリックればコードを開くことができます (VS または Xcode をインストールしている場合のみ表示されます)。

		![](DetailsPanel01.png)

	* これまではアクタ クラス名にブループリント エディタへ飛ぶハイパーリンクが付いていました。それが今度は別のボタンとなりました。

		![](DetailsPanel02.png)

	* ビューポートの右クリック メニューに C++ ファイルへのアクセスも追加しました (コンパイラをインストールしている場合に限ります)。  

		もちろん、クラスビューアのクラスをダブルクリックすることもできます。		

		![](DetailsPanel03.png)

* **プログラマー向けの新ツールメッセージング デバッガー**

	* メッセージ デバッガーという新ツールが加わりました。これは、UE4 のメッセージ システム または Unreal Message Bus (UMB) として知られているビジュアル デバッガー ツールです。 

		メッセージング システムを使っているアプリケーションはメッセージング システムがかなり非同期式な性質を持っているため、デバッグが非常に難しい場合があります。 

	* 現時点では、メッセージ デバッガは自分の責任で '実験的' 使用と見なし、エディタの環境設定で明示的にアクティベートさせなければなりません。		

		![](MessagingDebugger1.png) ![](MessagingDebugger2.png)

#### レンダリング

* **光沢のある Screen Space Reflections**

	* マテリアルのラフネスをサポートする Screen Space Reflections (スクリーン スペース反射) が追加され、デフォルトで有効になりました！
		Screen Space Reflections を使用したくない場合は、ポストプロセス設定でこの機能を弱める / 無効にすることができます。 

		マイナーな調整が必要なマテリアルもありますが、それらは他の反射に対しても正しい表示はされません。 
		Image Based Lighting と 法線 (解析的) 光源を一致させました。

	* ラフネスを変えたデカールのサンプルです (ビューポートが非常に小さいので粒子 / ノイズが見えます)。

		![](Glossy.png)

* **プレビュー シャドウ インジケータ**

	* 影の中に現れるテキストの形でプレビュー シャドウ インジケータがつきました。  

		_Build - ディスタンス フィールド シャドウマップを使用します_	

		![](PreviewShadows01.png)

		_Unbuilt - インジケータ付きのプレビュー シャドウを使用します_

		![](PreviewShadows02.png)

	* [Visualize (可視化)] の表示フラグで無効にすることができます。  

		テキスト投影のライト関数マテリアルの微調整は、/Engine/EditorMaterials/PreviewShadowIndicatorMaterial.PreviewShadowIndicatorMaterial をご覧ください。

#### アニメーション

* **不均等なスケール アニメーション**

	* 不均等なスケール アニメーションがサポートされるようになりました。オプションは必要ありません。アニメーションをインポートすると、スケールが存在する場合、それもインポートされます。 

		全てのアニメーションに対してスケールを保存するわけではありませんので、メモリの心配もありません。1 ではないスケールをもつアニメーションのみを保存します。 

	* 以下はアニメーションのサンプル ビデオです。 

		[![](AngryChest.png)](AngryChest.wmv)
		[![](CompoundTransform.png)](CompoundTransform.wmv)

		[![](Keridan_Facial.png)](Keridan_Facial.wmv)
		[![](Keridan_Facial_Compound.png)](Keridan_Facial_Compound.wmv)


## 新規追加 

#### エディタとツール
* 新しいサウンド ノードがサウンドキュー エディタで選択済みのノードへ自動接続されるようになりました。
* Placement Browser が全く新しいデザインになって戻ってきました！コンテンツ ブラウザの [Classes] ビューが取り除かれました。
* JPEG インポートがエディタでサポートされるようになりました。基本の 8bit RGB と Gray JPEG 形式に対応します。
* コンテンツ ブラウザのスレート ブラシにカスタム仕様のサムネイル レンダラーを追加しました。
* [C] キーでマテリアルとサウンドキュー エディタ用にコメントを作成するようになりました。
* グラフ パネル内 (ブループリント エディタ、マテリアル エディタなど) で LMB+RMB をクリック＆ドラッグするとズームが実行されます。
* レベル ビューポートで Ctrl+E (関連するアセットの編集) を押すと、ブループリント以外のアセットタイプに機能し、適切なアセット エディタを開きます。
* マテリアル式を作成するホットキーがパレット リストのエントリの横に表示されるようになりました。
* フォーリッジ ツールに対してライティング / シャドウイング制御が追加されました。
* **ランドスケープ**
	* ランドスケープ平坦化ツールに、高さに合わせて平坦化するオプションが追加されました。
	* ランドスケープ エディタに傾斜ツールが追加されました。
* カメラ アニメーションの作成と編集がマチネで可能になりました。
* ソース コントロール設定がグローバルとプロジェクト別で切り替え可能になりました。
* アクタを複数のマチネで同時に制御できるようになりました。
* 使用時にユニコードがサポートされるようになりました。また、正しく機能しなかった同期が修正されました。
* ブループリントの関数コールをダブルクリックすると、それぞれのブループリントが開くようになりました。
* エディタを再起動すると、[Asset] タブがリストアされるようになりました。
* 言語をエディタ設定で切り替えできるようになりました。
* Find in CB (CB を検索) で 通常は非表示の場合でもエンジンまたは Dev アセットの検索が可能になりました。
* コンテンツ ブラウザにエンジン アセット表示オプションが付きました。
* コンテンツ ブラウザにデベロッパー アセット非表示オプションが付きました。
* 再生 / スクラブ時に Director Group/Track がアクティブ カメラ アクタを選択するようになりました。
* 一時停止中の Possess/Eject が可能になりました。ただし、ブループリントのデバッグ中は不可能です。
* ホットコンパイルに失敗すると、通知に「ログを表示する」ハイパーリンクがでるようになりました。
* BSP ワークフローが修正されました。
* スプラッシュスクリーンのビットマップをユーザーが設定できるようになりました。
* エディタ内からのコード プロジェクト再生成を追加しました。
* **スレート**
	* FEditorStyle はスレート コアには存在しなくなりました。
	* FEditorStyle は Slate モジュールではなく EditorStyle に存在するようになりました。
	* FEditorStyle を使用する場合、「EditorStyle」を .Build.cs ファイルにリンクしているモジュール リストに追加する必要があります。
	* ゲームスタイルに FEditorStyle の使用はお勧めしません。推奨されるゲームスタイルの設定方法については、ShooterGame または StrategyGame サンプルの例をご覧ください。
* SRichTextBlock がスレートに追加されました。SRichTextBlock には、複数のタイプのフォント、サイズ、カラー、ウィジェットを混ぜることができ、テキスト ドキュメント内で全てが画像化されます。
* ペルソナの通知ステートに、リミットハンドルをドラッグで編集される継続時間が付きました。
* マテリアル エレメントのスケルタル メッシュへの追加および削除が可能になり、 LOD マテリアルが定義できるようになりました。
* UnrealVS に Batch Builder ウィンドウがつきました。
* GPU エミッタの ColorScale/Life モジュールでパーティクル パラメータがサポートされるようになりました。
* UV 空間で頂点の位置をオフセットする新規パーティクル モジュール (PivotOffset) が追加されました。
* マウスボタンが押されていれば、 WASD が常に可能になりました。
* Perspective (透視図法) ビューポート マーキー選択は、マーキー ボックス内部に可視ピクセルを持つオブジェクトのみを考慮するようになりました。
* [Detail] パネルのプロパティに copy/paste が追加されました。
* Project Settings と World Settings の GameMode の作成 / 選択 / 編集用に新しい UI が追加されました。
* **物理アセット ツール** 
	* PhAT は複数選択が可能です。
	* PhAT に、ボディのあるボーンのみを表示する新しい階層フィルタができました。
	* PhAT に Selected Simulation と呼ばれる新しいシミュレーション モードができました。

#### ブループリント
* プラットフォーム専用アプリケーション ライフサイクル イベント ( iOS システム メッセージなど) を聞く必要のあるどんなアクタへの追加も可能な UApplicationLifecycleComponent が追加されました。ネイティブとブループリント クラスの両方に機能します。
* ドキュメントにリンクする充実したツールチップが幾つかブループリント エディタに追加されました。
* ブループリント グラフ エディタのズーム イン / アウトに +/- キーが使われるようになりました。
* [favorites] パネルがブループリント パレットに追加されました (お気に入り登録機能も一緒に)。
* ブループリント実行関数が `TScriptInterface<>` パラメータを受け取れるようになりました。
* ブループリント関数にワールド環境のパラメータのフラグを使用するために、新しく [WorldContext] メタ タグができました。
* ブループリント マクロのデバッグがサポートされるようになりました。
* ブループリント ノード アセット リファレンスが修正され、エディタで内でアセットが選択できる別の場所によりインラインのインプレイス アセット ピッカーができました。
* リファレンスする変数に応じてブループリント取得 / 設定ノードにドキュメント ツールチップが追加されました。
	* この関数は有効なドキュメントが見つかるとツールチップの中に自動的に表示します。
* ローカル変数をブループリント関数の中に置いて名前を付けることが可能になりました。
* [Level Blueprint] ツールバーが [Blueprints] と名前が変更され、各種ブループリントの作成および編集機能が追加されました。
* セクションをマクロあるいは関数に折りたたんだり、折りたたんだグラフをマクロと関数にプロモートさせることができるようになりました。
* ブループリントにエクスポーズされた IgnoreActorWhenMoving 関数が PrimComp に追加されました。
* [Blueprint Editor document] タブにアイコンが付きました。
* Blueprint ノード上 (メニュー内も) にアイコンが付きました。
	* 様々なタイプのノードに対してカスタム仕様のアイコンが多数作成されました。
	* Event ノードの実行ピンが通常の実行ピンのスタイルを使用するようになりました。
* イベントがカテゴリごとにグループ化されました。
* [Create Blueprint From...] オプションがコンテンツ ブラウザ コンテクスト メニューに追加されました。
* GetActorUp/Right/ForwardVector が追加されました。

#### レンダリング
* ボリューム ライティング サンプルと事前計算されたビジビリティ セルの表示フラグが可視化されました。
* プレビュー シャドウ インジケータ テキストはプレビューに使用されたシーン シャドウをまるどとレンダリングします。
	* Visualize カテゴリの表示フラグで無効にすることができます。
	* ビルドされていない指向性ライトの Preview CSM はゲームと整合させるため、 PIE には適用されなくなりました。
* ES2 のシェーダーで、 詳細情報およびエラーがマテリアルおよび MIC エディタ内で表示できるようになりました。
* スクリーン スペースの反射に対してラフネスがサポートされるようになりました。
* WIP LightPropagationVolumes (Microsoft/Lionhead から統合) が追加されました。
* マチネをセットアップせずにレンダリング パスに対して異なるビューポートの状況をテストするために r.ViewportTest が追加されました (ゲームのみで機能)。
* HLSL 「View.GeneralPurposeTweak」にアクセス可能なcvar 「r.GeneralPurposeTweak」がシェーダー開発用に追加されました。
* ステートが簡単に管理できるように (デバイス プロファイルのオーバーライドなど) Scalability settings cvars が作成されました。
* 全ての 2D テクスチャの LOD バイアスをオーバーライドするための r.MipMapLODBias コンソール変数が追加されました。

#### ゲームプレイとフレームワーク
* ISO-8601 日付形式に対応するため、 FromIso8601 と ToIso8601 が FDateTime に追加されました。
* navmesh リビルド中のメモリ使用量を減らし、数台のジェネレーターのみがコリジョン データを同時に受け取るようになります。
* Navmech のタイルの最大面積が 65536 ボクセルに増えました。(以前は 256 でした)。
* 64bit ポリゴン アドレスに切り替えることで、navmesh ポリゴンとタイルの最大数が増えました。
* navmesh 生成用の領域が新しく分割されました。ChunkyMonotone
	* タイルを長方形のチャンクに分割し (デフォルト：2X2)単調分割を実行します。
	* デフォルト モードに比べて明らかに速いです (watershed による)。
	* チャンクを分割すると細長いポリゴンの作成を防ぐことができますが、生成されるポリゴン数が他のメソッドに比べて若干多くなります。
	* [Partitioning method selection] が RecastNavMesh の Generation カテゴリの [Advanced display] へ移動しました。
* 動的な障害物 (デフォルトで歩行可能なものに類似) 用にデフォルトのナビゲーション エリアが追加されました。これはゲーム専用の設定でオーバーライドすることができます。
* EQS デバッグ描画ツールが GameplayDebuggingComponent の表示に追加されました。
* GameplayDebuggingComponent の描画に、独自の表示フラグである GameplayDebuggingを使うようになりました。
* エディタのビューポートで EQS クエリをテストするツールである EQSTestingPawn が実装されました。
* Defined FAISystem::InvalidLocation を AI と使用する not-set または cleared FVectors の値として使用するように定義しました。
* 1 回の EQS テストをタイムスライスする方法を追加しました。
* 表示されたコンテクストの周りのサークル上に項目を作成するために非常に斬新な EQS ジェネレータが追加されました。
* 全ての BB アセットに存在するブラックボードを意味するキーに「永続的なキー」を定義する方法が追加されました (親 BB に既にある場合は複製しません)。
* アニメーション ノード選択時に構造体をカスタマイズするサポートが、ペルソナの詳細パネルに追加されました。 
* スケルトンのプレビュー メッシュとペルソナの現在のプレビュー メッシュを別々に設定する機能が追加されました。
* プロパティのデフォルトとは別にプレビュー インスタンス上のプロパティをユーザーが編集できる新しいパネルがペルソナに追加されました。
* コンテキスト オプション メニューが Animation Blueprint ノードに追加され、ユーザーは関連するアセットを開けるようになりました。
* dirty marker がペルソナの Mode Widget に追加されました。
* Save context menu オプションがペルソナのアセット ブラウザに追加されました。
* インゲームのボーン描画を showdebug コマンドで切り替えられるようになりました。
* アニメーションの再生用にインゲームのデバッグ出力ができるようになりました。
* ペルソナの [Find in CB toolbar] ボタンで、選択中のモードに合った適切なアセットがハイライトされるようになりました (スケルトン、メッシュなど)。
* axis gizmo がペルソナのソケットに追加されました。
* サウンド / パーティクル通知を追加すると、それが適切なタイプであればペルソナで選択したアセットに対して自動設定されるようになります。
* SoundNode Concatenate が再追加されました。
* DataTableEditor がスクロール対応になりました。
* Actor Details UI が改善され、機能性が向上し、さらにコンパクトになりました。
* エディタから C++ ソース ファイルにさらにアクセスしやすくなりました！
	* 選択中のアクタを右クリックすると、 C++ ソース ファイルが開くようになりました。
	* [Go to Source File] ボタンが詳細ヘッダ (ハイパーリンク) に追加されました。
* エディタ サウンドを切り替える環境設定が追加されました ([Editor Sounds] セクションの PIE サウンドなど)。
* Shootergame にテキストチャットが追加されました。
* クラス ビューアのネイティブ クラスをダブルクリックすると IDE 内でヘッダ ファイルが開きます。
* エディタ ヘルプ メニューに API ドキュメントに対するショートカットが付きました。
* 直近プロジェクトの自動読み込みオプションがプロジェクト ブラウザに追加されました。
* コリジョン：コリジョン チャンネル設定が Project Setting/Collision で可能になりました。
* PhysicalSurface :Physical Surface の設定が Project Setting/Physics で可能になりました。
* 自動化テストのコンフィギュレーション：各種自動化テスト アセットを Editor Setting/Automation に追加することができるようになりました。
* ローカリゼーション ポータブル オブジェクト (.po) ファイルのエクスポート用コマンドレットが追加されました。
* ブレンドスペースでは、 anim notifies を最もウェイト値の高いアニメーションに制限する、あるいは全部一緒に無効にすることが可能になりました。

#### コア
* Simplygon の ProxyLOD integration が追加され、スタティック メッシュ コンポーネントとランドスケープのマージに対応します (Experimental -> Actor Merging の中にあります)。
* マテリアルごとのグループ化できるアクタ マージ ユーティリティが追加されました (Experimental->Actor Merging の中にあります)。
* デディケイテッド サーバーは、サーバー自体の ini ファイル (DedicatedServer*.ini) を同じディレクトリ内に Default*.ini として格納できるようになりました。
* UBT:TargetInfo クラスに Type プロパティと IsCooked プロパティが追加されました。これにより、クックされたターゲットのバイナリをビルドする場合、モジュールに条件付のビルド規則を設定することができます。 
* アセット レジストリ データとゲームコールバックに基いた、複数の pak ファイルのビルド作成用の機能が追加されました (ゲーム ダウンロードのチャンキングに便利)。
* nullptr と 0 が BlueprintCallableFunctions ポインタのデフォルト引数として受け取られるようになりました。
* Interface UFunctions はフィールド イタレーションで検索できます。
* 新規の TFieldRange クラスは TFieldIterator と同じように使用されますが、使用対象は for (`UFunction* Func :TFieldRange<UFunction>(Class)`).
* また、TObjectIterator に対しても同等に機能する TObjectRange も新しく登場しました。
* TMaps と TMultiMap を Map.Add(Key); などのキーとなる 1 つの引数に追加 (設置) することができるようになり、マップ値はデフォルトで構築されます。
* 同じオブジェクト / 関数を複数回バインドするコードを使いやすくするために、Delegates に AddUniqueDynamic と IsAlreadyBound 機能が付きました。
* ANSI 以外の文字が UnrealHeaderTool で正確に処理されるようになりました (ツールチップをパースするコメント、DisplayName 指定子など)。
* エディタ以外の Win64 ビルドで BinnedMalloc が有効になりました。実行されているプラットフォームのページサイズまでの割り当てを一致させるサポートが追加されました

#### プラットフォーム
* **Mac**
	* ムービー再生用に同じ AVFoundation API を使用する Mac OS X 上でのコンパイルとリンクをするために iOSMoviePlayer プラグインの修正と名前変更を行いました (AVIWriter で使用済み)。
	* 必要に応じて、Mac windows でドロップシャドウおよび丸みを帯びた角によるレンダリングを行い、さらにOS X の場合と同様に [close/minimize/restore] の各ボタンがハイライトされます。
	* 新しい C++ クラッシュレポーターを使って Mac OS X に対するクラッシュレポート機能を初めて実装されました。Linux 版として類似したレポートが生成されます。
	* 新しい CrashReportClient を有効にし、OS X 上の全ての古いエラーレポートを無効にしました。
	* Mac OS X の最新バージョンを実行していない時、ユーザーに更新を促す抑制可能なダイアログが追加されます。
	* LLDB でTCHAR がサポートされます。
* **Android**
	* 4 本指タップのダイアログにサポートされているテクスチャ形式が表示されます。
	* Android の ネイティブ解像度にクランプされて r.MobileContentScaleFactor がサポートされるようになりました (1.0 は 1280x720 ですが正しいアスペクト比です) 。
	* Android のオーディオ サポートが ogg を使って追加されました。

#### アニメーション
* ルート モーション抽出中にルートをロックする様々なオプションが追加されました。デフォルトがアニメーションの第一フレームから参照ポーズへ変更されました。
* 最適化：SkeletalMeshes 向けの CachedLocalBounds 最適化が全てに対して有効にされました。		
* **アニメーションは再保存が必要です**
	* GUID が Skeleton アセットに追加されたので、 アニメーションがバージョンをトラックできるようになりました。全てのアニメーションを再保存することを推奨します。再保存しない場合、アニメーションはゲームのロード時に圧縮されます。
* 不均等なスケール アニメーションのサポーはスケーリングの適用時のみ使用できます (1,1,1 ではない場合など)
	* スケールのインポートがうまくいかない場合は、[Preserve Local Transform] を有効にします。
	* 湾曲 / 共有はサポート外となります。情報は削除され、ソースデータとは異なる結果が作成されることにご注意ください。


## アップグレード ノート

#### エディタとツール
* Selected Actors Delta Transform for context menu.
* Show Uncached static Lighting build info in SceneOutliner.
* Added Console Command to dump visible actors ("DumpVisibleActors").
* Atmospheric fog:Added Blueprint access for Precompute variables (only valid for editor).
* Decimal snap grid is now enabled by default and the snap size is now 10 cm.You will need to enable the power of two snap grid in the viewport settings to revert to the old behavior.
* Engine content has been disabled by default in the content browser.You can enable this again in the content browsers view settings.
* VirtualJoystick:Inherits values from UTouchInterface.
	* Added bPreventRecenter, which prevents Joystick re-centering.
	* Prevent moving outside of screen, clamp ThumbPosition to be inside screen.
	* Added Activation Delay.
	* Added InputScale to control each Joystick's speed.
* Default ProjectileMovementComponent Velocity to (1,0,0) to make it a bit simpler to use.
* Remove GameModeForPIE. 
* Created SEnableBox, which lies to the contained widget about whether the parent hierarchy is enabled or not.
* Created an external image reference widget, which internally handles checkout/add/etc...
* Added the ability for asset type actions to provide a user description of the asset, showing up in a separate section of the tooltip.
* Level streaming refactoring to fix Launch and Play in new process for maps with streaming levels.
* Changed graph panel grid rendering method to keep sharpness at all zoom levels and show origin lines in a third color.

#### レンダリング
* Changed SSAO defaults to be more subtle.
* Light properties cleanup.Major changes: point / spot lights use inverse squared falloff by default, Brightness changed to Intensity with new defaults per light type, Radius renamed to AttenuationRadius.
* To prepare for future shader optimisations, it is now a requirement to bind shaders to the global state BEFORE setting any parameters.Trying to set parameters on a shader which isn't currently bound will produce and ensure.
* Almost all settings have been removed from SystemSettings, and replaced with equivalent console variables.This includes system resolution (GSystemSettings.ResX/ResY) which are now accessible from code via GSystemResolution.ResX and GSystemResolution.ResY.A new console variable (r.setres) has also been added to replace the old "setres" command.
* The default near clipping plane has been set to 10cm.This may cause z-fighting if your game uses very long view distances.See r.SetNearClipPlane.
* Made PostprocessAmbient purely additive, not occluded by environment reflections or other things (other than SSAO), now it's meant to make an more interesting ambient (content might need to retweaked) not a infinitly far away skybox texture.
* Changed TextRender default material to be opaque (TemporalAA quality improvements now make this the better option).
* Consoles now use less memory when using ScreenPercentage.In case the game wants to dynamically change it over multiple frames this is not the right method.If needed we can use the cvars settings and make it a platform/game property.
* Usability change of showflags: game and editor showflag state now allows proper toggle (2 states are stored and toggled).
* Allow TemporalAA in editor by default (minor flickering with editor primitives is expected).
* Split ScalabilitySetting persistence into game and editor (different ini files).This allows early loading of the settings (even game isn't there yet) and avoid reinit of subsystems.

#### ゲームプレイとフレームワーク
* Oculus integration has been updated with improvements to latency, and support for positional tracking devices.Note:LibOVR SDK for positional tracking must be procured from Oculus in order to use the functionality
* Components Array removal
	* The components array has been removed, it is no longer necessary to add newly created components to any array.If you do not wish a created component to be registered set bAutoRegister to false.Access to the components array is via the AActor::GetComponents function.Unless a component is created independently of an Actor, the component must have a direct outer of the Actor.In general, you cannot have components that are subobjects of a non-actor. 
* Input binding changes
	* Key bindings are now done by name instead of enum.A new struct FKey encapsulates the name and provides a number of helper functions.It is encouraged to use these helper functions for things such as IsGamePadKey, however, the EKeys::IsGamepadKey functions are still defined to make migration easier.
	* EKeys enum has been eliminated.Places that used EKeys::Type or EKey will generally need to be changed to FKey
	* All EKeys enum entries (e.g. EKeys::MouseX) have been translated in to static const members of an EKeys struct so most usages of key names will still work, however, because it is a struct you can no longer switch on a Key's value.
	* Many Input settings have been moved out of Engine.PlayerInput and in to Engine.InputSettings.Of most significant note:AxisConfig, ActionMappings, and AxisMappings.
* WorldFromContextGetter has been removed.All UObjects can now implement a virtual GetWorld() function instead.
* APlayerCamera has been renamed APlayerCameraManager.
* AxisMappings MoveForward, MoveRight, MoveUp, Lookup, and Turn and ActionMapping PushToTalk have been removed from BaseInput.ini.They must be supplied in the DefaultInput.ini for your specific game if required.
* SoundNodeGroupControl no longer considers distance.Instead it simply ensures that the maximum number of sounds for each 'bucket' is playing before falling to the next 'bucket'.
* SoundNode NotifyFinished hooks have been restructured.It is now possible for multiple nodes to request notification of the wave instance completing.
* UMETA is now consistent with other markup macros, in particular it uses comma instead of pipe as delimeter.
* Visual Studio 2013 is now used by default
	* Remember that your developers (and users of packaged builds) will need the Visual C++ 2013 redist installed.
	* You can still use Visual Studio 2012 if you need to (see below for more info, and CL # 1989640).
	* Certain platforms have debugging add-ins that do not work with the new IDE yet.  
		* We detect these platforms and force the project file format to 2012 automatically.
		* You can always override behavior by passing '-2012' or '-2013' on the GenerateProjectFiles command line.
	* Other special use cases:
		* If you want to use VS 2012 for everything (because you don't have VS 2013 yet), locally modify WindowsPlatform.Compiler in UEBuildWindows.cs.
		* If you want to keep using VS 2012 IDE but compile with VS 2013, make sure you have VS 2013 installed and pass '-2012' to GenerateProjectFiles.
		* If you want to use the VS 2013 IDE but compile with VS 2012, you can set WindowsPlatform.Compiler to 2012, but pass '-2013' to GenerateProjectFiles.
* Visual Studio 2013 Express for Windows Desktop is now fully supported!
* DirectX SDK prerequisites are now included along with the source!
	You no longer need to have the DirectX SDK installed on your PC to build the engine.
* Visual Studio and Xcode project file changes
	* Project files now generate for all platforms by default; Removed "AllPlatforms" .bat file.
		* You can pass "-CurrentPlatform" to get the old behavior if you want.
	* Project files:'Shipping' configuration is now included by default.
		* You can pass "-NoShippingConfigs" to omit Shipping config (smaller/faster project files).
* Debug builds no longer use the Debug CRT (or Debug third party libraries) by default
	* Added new UnrealBuildTool option:  bDebugBuildsActuallyUseDebugCRT  (BuildConfiguration.cs)
	* bDebugBuildsActuallyUseDebugCRT:This is true if we should compile Debug builds using Debug CRT libs and Debug third party dependencies.Otherwise, we'll actually compile against the Release CRT but leave optimizations turned off, so that it is still easy to debug.  
	* If you enable this setting, actual Debug versions of third party static libraries will be needed when compiling in Debug.
* Removed 'Shipping' PhysX binaries and libraries
	* We now link with PROFILE versions in all configurations by default.
* Removed default Steam file from binaries (steam_appid.txt)
	* You should create your own steam_appid.txt for your game project with a unique Steamworks ID for your project.
* Disable Link-Time-Code-Generation (LTCG) by default, even in Shipping builds
* (IMPORTANT) The DebugGame build configuration now shares engine binaries with the Development configuration.
	* DebugGame causes game modules to be compiled with UE_BUILD_DEVELOPMENT, but optimization disabled. 
	* Pass -debug on the command line to tell the editor to load DebugGame game modules.
	* Delete user configuration files from Intermediate\ProjectFiles to have UBT automatically fill in the correct command line in your project settings.
* Config settings for installed builds are now stored in the user's AppData folder, rather than My Documents.
* Template projects now have a .uproject extension again.
* The engine version now has a Major.Minor.Hotfix component as well as changelist number (FEngineVersion).This version is saved into packages to allow for out of band hotfixes.
	* Modules will need to be recompiled with the correct version strings from PCLaunch.rc for the engine to load them.
* Decision to compile plugins in monolithic builds is filtered by the enabled plugin list in config files.
* LevelEditor: the "Mobile Preview" menu has been hidden, because the functionality isn't fully implemented yet
* LevelEditor: the "-PlatformTools" command line switch has been removed; the remaining features that depended on it are now accessible in the 'Experimental' section of the Editor Preferences
* Settings: many Editor User Settings have been moved into new classes and exposed as separate sections in the Settings UI; your local settings changes may have to be reapplied
* Messaging:UDP message transport is now a plug-in (UdpMessaging) that is loaded by default, but still requires "-messaging" command line switch to activate in Shipping builds and standalone games; we are planning to get rid of the switch after this prototype implementation has been rewritten for production quality; no ETA yet

#### アニメーション
* Allowed anim sequence and blendspace properties to be exposed as a pin in the graph.
* Added support for inheriting from an existing Anim Blueprint (allowing overriding the defaults and event graph, but not the anim graph).
* Refactored the Persona viewport toolbar and widgets, improving real estate usage and behaving similar to the level editor.
* Various bug fixes for Anim Blueprint debugging.
* Added a customization for FBoneReference structures, showing a skeleton tree picker for the bone name.
* Added filtering logic to asset pickers on anim player nodes so that only compatible assets (based on skeleton) are shown.

#### コア
* Intermediate generated files are now per-platform.
	* If you have tools which do any kind of processing on generated files, then these will need to be updated to the new locations.
* ConstCast has been removed, because it's confusingly unlike C++'s const_cast.
	* `ConstCast<T>` should be replaced with `Cast<const T>`.
* Renamed UObjectSerializer to UGCObjectReferencer and FSerializableObject to FGCObject as they do not use serialization to collect garbage anymore and may be misleading.
* Code refactoring that requires action from licensees:
	* Renamed GIsUCC to IsRunningCommandlet() (mostly)
	* Renamed USpriteComponent to UBillboardComponent
	* Renamed UMaterialSpriteComponent to UMaterialBillboardComponent

#### プラットフォーム
* **Moblie**
	* Exposed touch input interface properties to be editable in the Settings UI.
	* Added copying of platform-specific configuration files for Android and iOS via the Settings panel.
	* Added editing for icons, launch screens, and device orientation in Project Settings.
	* Various packaging size optimizations for cooked games.
* **Android**
	* Enabled Android support directly from the editor with Package and Launch (aka One Click Deploy).
	* Packaging Android will create a .obb file next to the .apk, with a .bat to install it.
	* Packaging in Distribution needs SigningConfig.xml to be setup properly (see sample in Engine/Build/Android/Java).
	* .apk generation now only happens if .so of java files have changed.
* **Mac**
	* Mac editor works but pre-built binaries are not included with this release.
		* For now, you must compile the binaries in order to run the editor on Mac.
		* This will be resolved for the next QA build.
	* Unreal Frontend works on Mac.			
	**iOS**
	* iOS build and packaging works on Mac.
	* Various fixes and improvements to GameCenter OSS.
	* Added experimental iAD support for iOS.
	* Fixed icon glossy effect showing up on iOS6 incorrectly.
	* Forced symbol stripping to always be on for Shipping iOS builds.
	* Various improvements to the PC iOS deployment workflow (to code sign from the editor, set environment variable uebp_CodeSignWhenStaging=1, but you will have to have a valid certificate for your provision installed on the PC).
	* Merged various iPhonePackager changes from UE3 (fat binary support, fix for code signing extending beyond the preallocated size in the stub, etc...).

#### Networking
* A new bool has been added, bReplicates.This should be set in blueprints and C++ constructors to make an actor replicate.Setting RemoteRole=ROLE_SimulatedProxy manually is no longer necessary. 


## 今後の追加事項と継続項目

#### エディタとツール
* Material Properties are now correctly greyed out when they have no effect.
* Prevented most incompatible connections in the new Material Editor.
* Made sure actors spawned during iteration are correctly included in the iteration.
* Made sure deletion of SoundNode inputs can be undone correctly.
* Improved display of Input mappings.
* Static Switch Parameters now output any Material Attribute inputs.
* Added rich tooltips for the Input Project Settings.
* Added cursor indicator when drag-dropping assets & a warning when dropping textures on actors.
* Locking actor movement now prevents editing of transform in Property Matrix.
* Reset themes menu when color picker is re-created.
* Added IDE name to message displayed when new project is created.
* Content Browser splitter sizes are now preserved between sessions.
* Matinee now displays correct name for asset.
* SETRES console command now works in PIE in standalone game (and when specifying ResX/ResY on the command line).
* Asset rename now prevents `*\<>?` characters from being entered.
* "Find In Content Browser" now uses the last content browser that was clicked.
* "Play From Here" option is now not available from Scene Outliner.
* Prevented assets from getting RF_MarkPendingKill added when they have been serialized with RF_Transactional.
	* Prevents some objects being wrongly inserted into the undo buffer.
* Key struct customization is now sized more reasonably.
* A newly-created editor no longer defaults to Subversion source control.
* Rearranged Blueprint tutorial flow & auto-run appropriate tutorial for current BP editor mode.
* CTRL+Backspace and CTRL+Delete (delete-to-word-boundary) hotkeys now work in text boxes
* Users can now move selected keys in the curve editor without having the mouse over a key by holding CTRL.
* BSP brushes now respect editor visibility settings
* Added an icon to blueprint variable nodes that are set to be replicated.
* Scene outliner now displays the number of selected actors in its footer.
* Pressing escape now closes any popup windows, cancels drag-spinning and actor viewport dragging operations.
* Reimport file paths are now stored relative to their associated packages, where this makes sense.
* Added visual cue for scale on orthographic viewports.
* Reset buttons now exist for actor transforms on the details panel.
*  Mesh Paint mode no longer forces backets to be displayed around the selection.
* Cancelling survey now fades away instantly.
* Matinee track menu options now match their track names.
* Added missing meta tags for InterpTrack classes.
* Project browser description no longer mentions creating a project.
* Matinee no longer crashes when using shared interp data.
* Opening projects from newer editor versions now fails gracefully.
* Object names can no longer contain the letter `.
* Sound Cue 'Stop' now looks like a stop symbol.
* Show Folder options is now disabled except for the Content Browser.
* Static Mesh Editor LOD Message now correctly displays the LOD Index.
* Scene outliner sorting arrow is now more visible.
* Default keybinding now appears correctly in Preferences.
* Content Browser assets update to respect filters as assets are loaded.
* Ortho viewport now display the correct viewmode.
* Changing language/region now prompts user to restart.
* Class picker in skeletal mesh actors now correctly restricts selection pool by skeleton.
* Anim graph node details panel now correctly shows properties with children.
* Improvements to FBX window tooltips.
* Morph target deletion in Persona can now be undone.
* Skeletal mesh stats set to default appear in Persona viewport.
* Notifies in Persona now respond to editor delete command.
* Blendspace sequence assets can be opened directly from the samples in Persona.
* Improvements to FBX export file location selection.
* Deleting and undoing blendspace nodes now works correctly.
* State machines in animation graphs preserve their name when copied.
* Rich tooltips added to many animation graph nodes.
* Playback timeline no longer shows duplicate frame numbers.
* Colour pickers in the blueprint editor and Persona improved to be more visible.
* Vertex anims no longer filterable.
* Flight controls in PhAT no longer conflict with transform mode selection.
* Base pose now called Retarget Source.
* UnrealVS is now built for VS2012 Pro and VS2013 Pro, with separate builds in their own folders in Engine/Extras.
* Beta version flag in Unreal Editor plugins can be set by plugin developers in the uplugin file.
	* Beta plugins display a warning when enabled in the plugin manager.
	* Beta version info is displayed with the version number in the plugin manager.
* **ランドスケープ**
	* Landscape brush is now hidden while moving the camera.
	* Default landscape scale has been changed to 100,100,100.
* Adjusted shootergame spawn points to spread bots out more.
* Revised shootergame bot behaviour to allow them to fire up/down.
* Made various revisions to scoreboard in shootergame.
* Revised boost pickups in vehicle game to make them respawn.
* Refactored game interface usage in vehicle game, hovership.
* Slate:Widgets inside the Slate core no longer depend on FEditorStyle.
* ShooterGame, StrategyGame, and VehicleGame:Converted over to use Slate Widget Style assets, and now has no dependency on FEditorStyle.
* IMPORT:FBX Log messages now goes to Log window. 
* TextureEditor: textures can now be reimported from the Texture Editor's toolbar.
* Translation Editor (Work in progress): 
	* Undo/Redo support
	* Only save to file when data has actually changed
	* Prevent insertion/deletion/duplication of rows (needed EditFixedSize tag on array UProperty).
	* Show error if history can't be loaded, or source control disabled (toast + message log, but don't display message log).
	* Show error if can't load current manifest or archive (toast + message log, show message log).
	* Show error if check-out/save file failed, or notification if it succeeded.
	* Don't try to check out the archive on the perforce server every time we save, but instead remember that we checked it out.
	* Remove "Find in Content Browser" button and menu item.
	* Correct tab title from "TranslationDataObject_1" to "Language Name - Project Name - Translation Editor."

#### レンダリング
* Removed min mip on reflection environment and sky specular - was preventing rough materials from going all the way diffuse.
* Reflection environment support for Feature Level SM4.
* LightAsIfStatic is now usable on movable static meshes again.
* Sky lights now recapture properly in construction scripts.
* Visualization of selected BSP surfaces now matches that of other objects in the editor.
* Removed experimental TemporalUpsample feature (reconstructing inbetween frames from existing frames).
* Removed experimental feature r.MSAA.DeferredMode (memory intensive AA solution).
* Removed BlurGBuffer feature (rarely used, since TemporalAA add NormalRoughnessToAlpha barely needed), feature didn't work with StereoRendering.
* Refactored EngineShowflags definition code.
	* Allows compiler optimizations when flags are fixed for certain build configurations. 
* **Optimization** 
	* Primitive/light interactions for movable directional lights are only created if the primitive needs to cast a per-object shadow.
	* Numerous small improvements to single threaded rendering performance.
	* Allocations from the global dynamic vertex and index buffers are now backed using a pool of smaller buffers.
	* Numerous mobile shader optimizations.
	* Draw lists can now be sorted front-to-back within a drawing policy, greatly increases performance on mobile devices without hidden surface removal.
* **Android** 
	* Clamp screen resolution to 1024 when using the mosaic fallback on Android devices.This is necessary due to limited precision in glFragCoord.
	* Kindle Fire HDX and Galaxy S4 now use FP16 render targets.

#### ブループリント
* Better categorizing of blueprint nodes in the blueprint palette/context menu.
	* We've made an initial pass to clean up the node categorization (aiming to slim down the number of categories, while making nodes more discoverable)� while it's not perfect, we continue to iterate on it, bettering it as we go.
* Blueprint component variables are now assigned to the "Default" category.
* Array properties will now ensure that internal type information has been fully loaded prior to serializing elements of the array into an object instance.
* Removed an unnecessary assertion during Blueprint asset loading.
* Added "Transient" and "Save Game" flag to variable details panel in Blueprints.
* "NotBlueprintType" support added to UClass headers to stop inheritence of "BlueprintType."

#### ゲームプレイとフレームワーク
* Add DeferStartupPrecache and PrecacheStartupSounds to FAudioDevice, which lets a game delay the caching of startup sounds until after settings can be read.Add SetMaxChannels to modify MaxChannels of AudioDevice at runtime
* Add ability to do substring enum redirects in Engine.ini.Example:

		+EnumRedirects=(EnumName="ENewEnum",OldEnumSubstring="EOldEnum::",NewEnumSubstring="ENewEnum::")

* Deleted many unused commandlets.
* UWorlds are now RF_Public and RF_Standalone.This is in preparation of treating them like assets and managing them in the content browser.
* Lightmaps are now viewable via the world settings details panel. 
* Minor stability improvements to the replication system
* Minor navmesh stability improvements.
* CDOs for blueprints now get PostLoad called on them after they are regenerated at load time.
* If audio hardware is not found or fails to initialize, the audio device is now deleted.Also, audio devices are no longer initialized in commandlets.
* Minor performance improvements for recompiling Blueprints.
* Minor cloth stability improvements.
* Added tooltips for anim nodes in Persona.
* Rearranged Show menu in Personas viewport.
* Merged GetSocketLocalTransfrom with GetSocketWorldTransform.
* Added an event to allow editors to manually refresh object references when objects are replaced.
* Polished "Create Anim Blueprint" window (redesign).
* Polished "Assign skeleton" window (changed skeleton selection to use asset pickers instead of plain list box).
* Polished "Retarget Anim Blueprints" (Added notifications to better inform user of what is happening).
* Changed blueprint tree display to use display names instead of object names.
* Better iterative compile times on single source files for small game modules.
	* Game modules now always get a precompiled header (faster iteration).
	* Previously, only game modules with more than 8 unity source files would get one.
		* New setting for this:BuildConfiguration.bForcePrecompiledHeaderForGameModules.
	* Small game modules no longer use unity build (faster iteration).
		* Now, game modules with less than 32 source files force non-unity mode.
		* New setting for this:BuildConfiguration.MinGameModuleSourceFilesForUnityBuild.
* Program modules no longer use shared PCHs by default (can be overridden using PCHUsageMode).
* Changed CodeView to be an experimental editor setting; disabled by default.
	* Added double-clicking on Class names to CodeView to jump to C++ code.
* UnrealBuildTool:Don't spawn more processes than the user has CPU cores (local executor only).
	* This frees up system resources but can reduce build times in some cases; In other cases it can actually improve build times.
* Disabled most editor window animations by default (can be toggled under "Editor Look and Feel" section).
* Editor's 'New Project' and 'Open Project' dialogs have been significantly improved.
* Fixed skyboxes included in synthesized Lightmass importance volumes.
	* Meshes larger than 10,000m along any axis are now ignored when calculating bounds for automatic importance volume.
* Content Browser:Fixed textures not streaming for thumbnail preview scenes.
* Improved error help when Visual Studio appears to be missing.
* DeviceManager: various burst upgrades to add new features and improve usability; device discovery has been overhauled.
* DeviceManager: implemented device shutdown for Windows devices; warning users if rebooting/shutting down local PC.
* SessionFrontend: various usability improvements.
* SessionFrontend: the Game Launcher tab has been removed from the Session Frontend and is now its own major tab accessible from the Window menu.
* Messaging: added FMessageEndpoint::SafeRelease() for safely destroying message endpoints from non-Game threads; search code base for usage examples.
* MessagingDebugger: various burst upgrades to add new features and improve usability
* MessagingDebugger: the Messaging Debugger UI is currently inaccessible from standalone UFE; this will be fixed next release.
* PlayInEditor: the pre-defined screen resolutions for PIE settings are now configurable in the INI.
* PlayInEditor: the "Launch on Device" feature in the Level Editor has been cleaned up and stabilized.
* PlayInEditor: added "Mobile Preview" option that will launch the game in a standalone process with mobile emulation.
* ColorPicker: various usability improvements and now remembers its last state.
* Slate: improved capabilities of SSlider widget (vertical sliders, indented knobs etc.)
* General: continued conversion of code to use selected C++11 features (NULL -> nullptr, auto in for-loops etc.)
* Selected lines in Output Log are now readable. 

#### コア
* Added LOD levels generation to World Browser, requires Simplygon.
* Finished implementation of TCircularQueue
* Upgraded Opus voice codec to v1.1
* More efforts to handle deep install paths and project paths outside of the engine.
* Const-correctness fixes.
* New functions and fixes to further unify the behavior of TArray and TIndirectArray.
* Improvements to error handling and error messages from UnrealHeaderTool.
* Some UnrealHeaderTool parsing fixes.
* Build speed improvements.
* StringCast now handles null pointers.
* TMap/TSet/TMultiMap iteration fixes.
* Redirect initialization code now handles the CoreUObject.Metadata section being missing from the .ini file.
* UnrealHeaderTool generated includes are now normalized.
* Improved tooltip parsing to eliminate superfluous 'borders', e.g. lines containing all ======, ------ etc.
* Tooltips are now parsed for more property types which were previously being missed.

#### Networking
* Removed old/broken ping code
* Added new server-authoritative ping code
	* Uses low level net driver acks, to calculate client ping, and adds validation to reduce ability to tamper with values
	* Adjusted ping smoothing in high-level player state code, to work better with new ping code

#### プラットフォーム
* **Mac**
	* Make adding code to projects work on OS X.
	* When exploring to a file, open the parent folder in Finder and select that file, or for folders just open them.
	* Disambiguate some C++ types that were causing crashes on Mac due to silent linker failure.
	* Make Mac OS X output log scroll to new entries.
	* Cache the window's zoomed state on Mac OS X - the objc_msgsend for isZoomed is sitting top of the profiler when running the editor!
	* Make it easier to detach window tabs on the Mac.
	* Make windows appear on editor restart on Mac OS X.
	* Stop minimized windows stealing mouse events on Mac OS X.
	* Stop crashing when trying to reshape windows on OS X.
	* Stop crashing after closing prompt windows on OS X.
	* Make sure that the output log window opens & displays content on OS X even when there's no MacApplication.
	* Stop the level viewport graphics from fading on OS X when using sub-editors.
	* Avoid corruption when rendering temporal screen space reflections
		* Must enable NAN suppression on Mac OS X to handle differing NAN/INF conditions in GLSL.
	* When rendering particles ensure a texture buffer is bound even for lower shader models to avoid a crash.
	* Use a PBO pack, followed by a PBO unpack to copy texture mips when newer extensions aren't available to avoid synchronising the CPU & GL with glMapBuffer.
	* Eliminate one cause of slowdown when mousing over the editor.
	* Cache the hit proxy data into a byte buffer rather than calling RHIReadSurfaceData which takes a very slow glReadPixels path for OpenGL..
	* Enable seamless cube maps on all GL's that support them.
	* Eliminate distortions at viewport edge when using SSR on Mac OS X. 
	* Speed-up locking CPU readback textures and general texture readback on Mac OS X + address HZB performance.
* **Android**
	* Android now prefers R8G8B8 backbuffer format instead of R5G6B5.
	* Android is now multithreaded (using proper CPU core count check at startup).
	* Now using OpenGL ES 3.0 shaders for high-end Qualcomm Adreno GPUs.
	* GPU frametime can now be measured in `STAT UNIT`.It's disabled by default due to driver issues on some devices, but can be enabled by setting the CVar `r.DisjointTimerQueries` to 1.
	* Initial Android controller and keyboard support is in.
	* Android pause/resume behavior has been cleaned up.
	* Android builds no longer rely on a user generated standalone toolchain.UBT calls directly into the NDK toolchains.
	* Android debug stub projects are no longer generated if NSight 1.5 or later is installed.

#### アニメーション
* **Animation issues**
	* Skeleton:Fixed various marking as dirty issues, so you shouldn't see skeleton getting dirty anymore without a proper cause. 
		* You also don't have to save skeleton anymore when new anim notify is added to the animation.
	* ModifyBone SkeletalControl name changed to TransformBone for clarify.


## 既知の問題

* Mac editor works but pre-built binaries are not included with this release.For now, you must compile the binaries in order to run the editor on Mac.



