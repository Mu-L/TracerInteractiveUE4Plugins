INTSourceChangelist:6537038
Title: March 2014 Release Notes
Crumbs:%ROOT%, Support/Builds
Description:
Availability:Licensee
Parent:Support/Builds
Order:-1
Order: 45

[TOC(start:2 end:2)]

## Build Info


[REGION:simpletable]
| Item | Info |
| ---- | ---- |
| **Labels** | [INCLUDE:#labels] |
| **Built from Changelist #** |  (//depot/UE4-QA/Promotable-CL-) |
| **Branched from Changelist #** |  (//depot/UE4/Promoted-CL-) |
| **Visual Studio Version** |  |
| **DirectX** | June 2010 |
[/REGION]

[COMMENT:none]

[EXCERPT:Labels]
QA_APPROVED_UE4_BUILD_2014_  
QA_APPROVED_UE4_BUILD_CURRENT  
QA_APPROVED_UE4_BUILD_MINIMUM
[/EXCERPT:Labels]

[/COMMENT]

## Important information

* The March QA build has not been as well aligned as we would like. We have been putting consoles through cert, and have not been able to line up the console fixes with the public release and with the QA build. 

	This has caused the march QA build to be delayed, and the content in **UE4-Releases/4.0/** to not contain working consoles right now. The consoles are currently in **//depot/UE4-QA-Unstable/** ( *which was branched from Releases* ) and we are working to back port the fixes from certification into that branch that we can safely do.   We should be branching imminently to **//depot/UE4-QA/** however, for those doing console games, the April QA should have at least one console's cert build in there, and the May QA should have both. 

* Current Engine Development Roadmaps: [UE4 Roadmaps](https://udn.unrealengine.com/questions/topics/roadmap.html)
* Fixed Bugs: [UE4 Fixed Bugs March 2014]
* Known Issues: [UE4 Known Issues March 2014]
 

## Major New Features

#### Blueprints

* **Blueprint Macro Debugging**

	* Support has been added for Blueprint macro debugging!

	* For example, if you set a breakpoint on a macro instance node in your Blueprint event graph, execution will now break on the first executable node inside of the macro graph when you Play-in-Editor/Simulate-in-Editor. You should also now be able to single-step, set breakpoints in and see variable pin values directly inside of a macro graph while debugging Blueprint objects.

		_Example: If you set a breakpoint on a "Gate" node:_	
		
		![](MacroDebugging01.png)	
		
		_Execution will break on the sequence node attached to the "Enter" output inside of the "Gate" macro graph. If you then set a breakpoint on the "Branch" node inside of the macro and then click "Resume"..._	
		
		![](MacroDebugging02.png)	
		
		_...execution will next break at that point:_			
		
		![](MacroDebugging03.png)	
		
		_You should also be able to hover over pins to see current variable values:_	
		
		![](MacroDebugging04.png)

* **Pin Icons in Blueprints**

	* Recently, the default BP pin icons were changed to a new, teardrop style by default in the editor.  

		If you prefer the old, original style, you can change your Editor Settings to use the original pins:
		
		![](PinIcons.png)(w:720)

#### Editor and Tools 

* **Physical Asset Tool (PhAT)**

	* Improvements have been made to the physical asset editor!
		
		![](PhysicalAssetTool.png)

	* Selected Simulation allows you to simulate the area of interest while keeping the rest of the body fixed.
	* Multiselect is now supported for easily tuning multiple bodies and constraints.
	* You can use hotkeys 1,2,3,4 to toggle Swing1, Swing2, Twist and cycle to quickly visualize constraint limits.
	* No Gravity will simulate without gravity. This is really useful for catching mistakes like collision between adjacent bodies or bad constraints.

* **Color Picker Usability Improvements**

	* Default view
		* Saturation and value sliders.
		* Theme bar will show a help message when empty.
		* Small separators between color preview blocks.
		* Color picker now always picks the color that is visible on the screen, regardless of sRGB preview toggle.
			
			![](ColorPicker01.png)

	* Advanced settings view
		* R, G, B channels now also have preview gradients like H, S, V.
		* Hex input/outfield.
		* A can now be larger than 1.0 (for material editor).
		* Preview gradients are now slightly thicker for better visibility.
		* Sliders are now wider for more mouse precision.
		* Slider numeric inputs now 3 instead of 2 digit precision to allow for correct Hex translation.
			
			![](ColorPicker02.png)

	* Quick Pick Mode
		* The little color wheel button next to the pipette toggles color wheel and quick pick.

			_Currently, right-clicking the wheel works, too._

		* Quick pick spectrum for when you need to experiment with light and dark colors quickly.

			_The horizontal center line represents Hues at 1.0 value and 1.0 saturation._

			_Colors towards the top are saturated against white._

			_Colors towards the bottom are lit against black._		
			
			![](ColorPicker03.png)

* **Developer Folder Disabled by Default**

	* The Engine folder is now also disabled by default! 

		* Its visibility can be toggled from the View Options.	 
			
			![](DeveloperFolder.png)

* **Play-In-Editor(PIE) and Launch Changes**

	* PIE changes:
		* No longer has menu entries for all the 'Current Camera / Default Player Start' combination.
			* Current Camera / Default Player Start is now a global toggle at the bottom.
			* You then simply click on any of the four entries on top to start PIE.
		* There's a new option 'Mobile Preview' which launches a standalone game with OpenGL ES emulation.
		* The big 'Play' button will still remember the last choice.
		* Menu entries and tooltips are hopefully easier to read/understand now.	
			
			![](PIE01.png)

	* Launch changes:
		* Devices are now broken out per platform.
		* A slew of problems with the listing of available devices have been fixed.
		* The big 'Launch' button in the toolbar will still remember your last choice.
		* The default choice for the 'Launch' button is now your local PC.

* **Snap Now Defaults to Decimal Intervals**

	* We have now defaulted our snap sizes to decimal intervals! 

		1 unreal unit  = 1 centimeter.

	* These are the new snap sizes:		
		
		![](DecimalIntervals01.png)

	* You can change back to snap settings back to powers of 2 for your game in the preferences Viewports->Grid Snapping:
		
		![](DecimalIntervals02.png)

* **Collision Setting**

	* You can now Set up and modify Collision Settings!

		You can add new channels for your project, a new profile or customize existing ones.

	* The setting can be found under Edit->Project Settings->Engine->Collision:
		
		![](CollisionSetting.png)

* **Input Mapping Bindings Panel**

	* There is a new Input Mapping Binding Panel!

		This can be found under Edit -> Project Settings -> Input.

	* There are three separate sections within the Input panel :

		_Axis Config_	
		
		![](AxisConfig.png)

		_Action Mappings_		
		
		![](ActionMappings.png)

		_Axis Mappings_		
		
		![](AxisMappings.png)

	* There are two buttons for adding action and axis mappings.
		
		The top one will create a new mapping with no name set but the one by the name of the mapping itself will add another one with the same name to that group.

* **Placement/Content Browser & Editor Modes**

	* The Placement Browser has been revived with a brand new look.  
	
		In the new placement browser you'll find quick access to Lights, Triggers, Volumes and all Classes, you can even access a lengthy list of your recently placed assets.

	* The Editor Modes have all been reunited in the Tools tab.		
		
		![](PlacementBroswer01.png)

	* Additionally, the Content Browser has received a new look as well. 
		
		![](PlacementBroswer02.png)

* **Details Panel Header Slimming, Open C++ Files**

	* The two details header rows have now been compressed down to one simple row.  The icon tool tip now shows the class name (like Scene Outliner.)   

	* For actors that have C++ code, you can click on the header file hyperlink to open the code (only shows up if you have VS or Xcode installed.)
		
		![](DetailsPanel01.png)

	* Previously the actor class name was a hyperlink that took you to the Blueprint editor.  Now there is a separate button for that.
		
		![](DetailsPanel02.png)

	* We have also added C++ file access to the viewport right click menu (if you have a compiler installed).  

		Of course, you can also double-click on click on classes in Class Viewer.		
		
		![](DetailsPanel03.png)

* **New Tool for Programmers: Messaging Debugger**

	* There is a new tool called the Messaging Debugger, which is a visual debugging tool for the messaging system in UE4, aka. Unreal Message Bus (UMB). 

		Applications that utilize the messaging system can be quite difficult to debug due to the highly asynchronous nature of a messaging system. 

	* At this point the Messaging Debugger still has to be considered 'experimental � use at your own risk' and must be explicitly activated in the Editor Preferences:		
		
		![](MessagingDebugger1.png) ![](MessagingDebugger2.png)

#### Rendering

* **Glossy Screen Space Reflections**

	* Screen Space Reflections supporting material roughness has been added and is enabled by default!
		
		If you do not want any screen space reflection, you can fade/disable the feature in the Post Process Settings. 
		Some materials might need a minor tweak but those would have been appeared wrong with other reflections anyway. 
		Now we have it consistent with Image Based Lighting and normal (analytical) light sources.

	* Example decal with varying roughness (very small viewport so you can see the grain/noise):
		
		![](Glossy.png)

* **Preview Shadows Indicator**

	* We now have a preview shadow indicator in the form of text that shows up in shadows.  

		_Built � distance field shadow maps_	
		
		![](PreviewShadows01.png)

		_Unbuilt - using preview shadows with indicator_
		
		![](PreviewShadows02.png)

	* There is a show flag under 'Visualize' which can be used to disable it.  
		
		To tweak the light function material used to project the text, it's Material'/Engine/EditorMaterials/PreviewShadowIndicatorMaterial.PreviewShadowIndicatorMaterial'

#### Animation

* **Non-Uniform Scale Animation**

	* We now support non-uniform scale animations. No option is required. When import animation, if scale exists, it will import. 

		For the memory concern, we don't save scale for all animations. We only saves it if it has scale that isn't 1. 

	* Example videos of the animations. 

		[![](AngryChest.png)](AngryChest.wmv)
		[![](CompoundTransform.png)](CompoundTransform.wmv)

		[![](Keridan_Facial.png)](Keridan_Facial.wmv)
		[![](Keridan_Facial_Compound.png)](Keridan_Facial_Compound.wmv)


## New Additions 

#### Editor and Tools
* New sound nodes will auto connect to previously selected nodes in the SoundCue Editor.
* The Placement Browser has returned with a new look.  The "Classes" view in the Content Browser has been removed.
* Adding JPEG import support to the editor.  Handles the basic 8bit RGB and Gray JPEG formats.
* Adding a custom thumbnail renderer for Slate Brushes in the content browser.
* 'C' key now creates comments for Material and SoundCue editors.
* Click and drag with LMB+RMB in graph panels (e.g. Blueprint Editor, Material Editor) performs a zoom.
* Ctrl+E (edit associated asset) in the level viewport now works for asset types other than blueprints, and opens the appropriate asset editor.
* Hotkey for creating Material Expressions now shown next to entries in palette list.
* Added lighting/shadowing controls to foliage tool.
* **Landscape**
	* Added flatten-to-height option to landscape flatten tool.
	* Added ramp tool to landscape editor
* Camera anims can now be created & edited in Matinee.
* Added ability to switch between global & per-project source control settings.
* Actors can now be controlled by multiple Matinees at the same time.
* Added unicode support when using Subversion & fixed sync not working properly.
* Double clicking on function calls on other Blueprints now opens the respective Blueprint.
* Asset tabs can now be restored on Editor restart.
* Language can now be switched in the Editor settings.
* Find in CB now finds Engine or Dev assets even when they aren't usually visible.
* Content Browser now has an option to show engine assets.
* Content Browser now has an option to hide the developer assets.
* Director Group/Track now selects the active camera actor when played/scrubbed.
* Possess/Eject now possible while paused, but not if debugging blueprints.
* Failed 'Hot Compiles' now have a 'show log' hyperlink in the notification.
* BSP workflow reworked.
* Splash screen bitmaps are now user-configurable.
* Added code project regeneration from within the Editor.
* **Slate**
	* FEditorStyle no longer exists in the Slate core.
	* FEditorStyle now exists in the EditorStyle module rather than the Slate module.
	* If you're using FEditorStyle, you'll need to add "EditorStyle" to the list of modules linked in your .Build.cs file.
	* We don't recommend using FEditorStyle in your games style; see the ShooterGame or StrategyGame sample for an example of the recommended way of setting up a game style.
* The SRichTextBlock has been added to Slate. The SRichTextBlock allows mixing multiple types of fonts, sizes, colors, widgets, and images all within the say text document.
* Notify states in Persona can now have their durations edited by dragging their limit handles.
* Material elements can be added and removed from skeletal meshes allowing LOD materials to be defined.
* UnrealVS Batch Builder window.
* Added support for particle parameters in ColorScale/Life modules for GPU emitters.
* Added a new particle module (PivotOffset) which offsets the vertex position in UV space.
* WASD is now always allowed when any mouse button is held.
* Perspective viewport marquee select now only considers objects for selection which have a visible pixel inside the marquee box.
* Added copy/paste to properties in the details panel.
* New UI for creating/selecting/editing GameMode in Project and World Settings.
* **Physical Asset Tool** 
	* PhAT supports multi-select.
	* PhAT has a new Hierarchy filter for only showing bones with bodies.
	* PhAT has a new simulation mode called Selected Simulation.

#### Blueprints
* Added UApplicationLifecycleComponent, which can be added to any Actor that needs to listen for platform-specific application lifecycle events (e.g. iOS system messages). Works for both native and Blueprint classes
* Several rich tool tips that link to documentation were added to the Blueprint editor.
* +/- keys can now be used to zoom in/out the blueprint graph editor.
* Added a "favorites" panel to the blueprint palette (along with favoriting functionality).
* Blueprint implementable functions can now take `TScriptInterface<>` params.
* New "WorldContext" meta-tag, for flagging world-context parameters on blueprint functions.
* Added support for Blueprint macro debugging.
* Modified the blueprint node asset references to have an in place asset picker that is more inline with other places where assets can be chosen in the editor.
* Added documentation tooltips to blueprint variable get/set nodes based on the variable they reference.
	* This feature will display automatically in a tooltip if valid documentation can be located.
* Local variables can be placed and named in Blueprint functions.
* "Level Blueprint" toolbar has been renamed to "Blueprints" and has added functionality to create and edit various blueprints.
* Can now collapse selection to macros or functions and promote collapsed graphs to macros and functions.
* Add BP-exposed IgnoreActorWhenMoving function to PrimComp.
* Blueprint Editor document tabs now have icons on.
* Blueprint nodes now have icons on them (and in menu).
	* Many custom icons created for different types of nodes.
	* Event node exec pins now use normal exec pin style.
* Events now grouped by category.
* Added 'Create Blueprint From...' option to Content Browser context menu.
* Add GetActorUp/Right/ForwardVector

#### Rendering
* Visualize show flags for volume lighting samples and precomputed visibility cells.
* Preview shadow indicator text renders in whole scene shadows used for previewing.
	* Can be disabled via show flag in visualize category.
	* Preview CSM for unbuilt directional lights is no longer applied in PIE, to be consistent with game.
* ES2 shader statistics and errors can now be displayed in the material and MIC editors.
* Added Roughness support for screen space reflections.
* Added WIP LightPropagationVolumes (integration from Microsoft/Lionhead).
* Added r.ViewportTest to test different viewport situations for rendering passes without setting up a matinee (only works in game).
* Added cvar "r.GeneralPurposeTweak" accessible in HLSL "View.GeneralPurposeTweak" for shader development.
* Made Scalability settings cvars so the state can be easier maintained (e.g. override in device profiles).
* Added r.MipMapLODBias console variable to override the LOD bias of all 2D textures.

#### Gameplay and Framework
* Added FromIso8601 and ToIso8601 to FDateTime to support ISO-8601 date formats.
* Lowered memory usage during navmesh rebuild, only a few generators will receive collision data at the same time.
* Increased maximum navmesh tile dimension to 65536 voxels (was: 256).
* Increased maximum number of navmesh polys and tiles by switching to 64bit poly address.
* New region partitioning for navmesh generation: ChunkyMonotone
	* Divides tile into rectangular chunks (default: 2x2) and runs monotone partitioning on them.
	* Noticeably faster than default mode (watershed)
	* Chunk split protects from creating long, thin polys, but generates slightly more polys than other methods.
	* Partitioning method selection moved to Advanced display of RecastNavMesh's Generation category.
* Added default navigation area for dynamic obstacles (similar to default walkable), which can be overridden by game specific settings.
* Added EQS debug drawing to GameplayDebuggingComponent's display.
* GameplayDebuggingComponent's drawing is using its own show flag now: GameplayDebugging.
* Implemented EQSTestingPawn, a tool to test EQS queries in the editor's viewport.
* Defined FAISystem::InvalidLocation to be used as value for "not-set" or "cleared" FVectors used with AI.
* Added a way to time-slice single EQS test.
* Added new super cool EQS generator to generate items on a circle around indicated context.
* Added a way to define "persistent keys" for blackboard meaning keys that will be present in all BB assets (not duplicating if parent BB has one).
* Added support to Personas detail panel for struct customizations when selecting anim nodes. 
* Added the ability to set the preview mesh of a skeleton separately to the current preview mesh in Persona (previously this was the same action).
* Added a new panel to Persona to allow users to edit properties on the preview instance separately to the property defaults.
* Added context menu options to anim blueprint nodes to allow users to open the associated assets.
* Added dirty marker to mode widgets in Persona.
* Added Save context menu option to Persona's asset browser.
* In game bone drawing toggled on with showdebug command.
* In game debug output for playing animations
* Find in CB toolbar button in Persona now highlights the appropriate asset based on the current mode (Skeleton, Mesh etc).
* Added axis gizmo to sockets in Persona.
* Adding a sound/particle notify will auto set it to the selected asset in Persona if it is of the appropriate type.
* SoundNode Concatenate has been re-added.
* Added scroll support to DataTableEditor.
* Actor Details UI has been improved to be more functional and compact.
* You can now access C++ source files more easily from the editor!
	* Added Right Click -> Open C++ Source file for selected actor.
	* Added "Go to Source File" button into the details header (hyperlink).
* Added new preference to toggle Editor Sounds (such as the PIE sounds, under "Editor Sounds" section).
* Added text chat to shootergame.
* Double clicking on a native class in the class viewer will open the header file in the IDE.
* The editor help menu has a shortcut to the API documentation.
* Added option in project browser to automatically load the last project.
* Collision: Collision channel setup is available in Project Setting/Collision.
* PhysicalSurface : Physical Surface set up is available in Project Setting/Physics.
* Automation test configuration : You can add various automation test assets to Editor Setting/Automation.
* Added a commandlet that will allow export of localization Portable Object (.po) files.
* In a blendspace anim notifies can now be limited to the highest weighted animation; or disabled altogether.

#### Core
* Added Simplygon ProxyLOD integration, supports merging of static mesh components and landscapes (hidden under Experimental->Actor Merging).
* Added actor merging utility with grouping by materials (hidden under Experimental->Actor Merging).
* Dedicated servers can now have their own ini files (DedicatedServer*.ini) stored in the same directory as Default*.ini
* UBT: Added Type and IsCooked properties to TargetInfo class: this way build rules can conditionally configure modules when building binaries for cooked targets. 
* Added the ability to create multiple pak file builds based on asset registry data and game callbacks (useful for chunking game downloads).
* nullptr and 0 are now accepted as default arguments for pointers in BlueprintCallableFunctions.
* Interface UFunctions are now found via field iteration.
* There's a new TFieldRange class that can be used in the same way as TFieldIterator, but for use in ranged-for constructs, e.g. for (`UFunction* Func : TFieldRange<UFunction>(Class)`).
* And there's a new TObjectRange which works equivalently for TObjectIterator.
* TMaps and TMultiMap can now be added to (or emplaced with) a single key argument, e.g. Map.Add(Key);, and the mapped value will be default-constructed.
* Delegates now have AddUniqueDynamic and IsAlreadyBound functions to aid code which may bind the same object/function multiple times.
* Non-ANSI characters are now handled correctly by UnrealHeaderTool (e.g. comments parsed for tooltips, DisplayName specifiers etc.).
* Enabled BinnedMalloc in non-editor Win64 builds. Added support for aligned allocations up to the page size of the platform being run on.

#### Platforms
* **Mac**
	* Modify & rename iOSMoviePlayer plugin to compile & link on Mac OS X which also uses the same AVFoundation API for movie playback (already used in AVIWriter).
	* Make Mac windows render with drop shadows & rounded corners when required, plus make the close/minimize/restore buttons highlight as they should in OS X.
	* Initial implementation of crash reporting for Mac OS X using the new C++ crash reporter, generating similar reports as the Linux version.
	* Enable the new CrashReportClient & disable all old error reporting on OS X.
	* Add a suppressible dialog to warn users to update when they aren't running the latest version of Mac OS X.
	* Support TCHAR in LLDB.
* **Android**
	* Show the supported texture formats in the four-finger-tap dialog.
	* Added support for r.MobileContentScaleFactor on Android (1.0 means 1280x720, but with proper aspect ratio), clamped to native resolution.
	* Android audio support has been added using ogg.

#### Animation
* Added different options for locking root bone while extracting root motion. Changed default from first frame of animation to ref pose.
* Optimization: Enabled CachedLocalBounds optimization for SkeletalMeshes to all.		
* **ANIMATION NEEDS RESAVE**
	* We added a GUID to Skeleton assets, so that animations can track the version. We recommend you resave all animations. Otherwise, animations will be compressed at load time.
* Non-uniform scaled animation support: Only used when scaling is applied (e.g not equal to 1,1,1).
	* If you are having an issue with importing scale, enable "Preserve Local Transform."
	* Please note that we don't support skew/shearing, so that information will be eliminated and produce different result than source data.


## Upgrade Notes

#### Editor and Tools
* Selected Actors Delta Transform for context menu.
* Show Uncached static Lighting build info in SceneOutliner.
* Added Console Command to dump visible actors ("DumpVisibleActors").
* Atmospheric fog: Added Blueprint access for Precompute variables (only valid for editor).
* Decimal snap grid is now enabled by default and the snap size is now 10 cm.  You will need to enable the power of two snap grid in the viewport settings to revert to the old behavior.
* Engine content has been disabled by default in the content browser.  You can enable this again in the content browsers view settings.
* VirtualJoystick: Inherits values from UTouchInterface.
	* Added bPreventRecenter, which prevents Joystick re-centering.
	* Prevent moving outside of screen, clamp ThumbPosition to be inside screen.
	* Added Activation Delay.
	* Added InputScale to control each Joystick's speed.
* Default ProjectileMovementComponent Velocity to (1,0,0) to make it a bit simpler to use.
* Remove GameModeForPIE. 
* Created SEnableBox, which lies to the contained widget about whether the parent hierarchy is enabled or not.
* Created an external image reference widget, which internally handles checkout/add/etc...
* Added the ability for asset type actions to provide a user description of the asset, showing up in a separate section of the tooltip.
* Level streaming refactoring to fix Launch and Play in new process for maps with streaming levels.
* Changed graph panel grid rendering method to keep sharpness at all zoom levels and show origin lines in a third color.

#### Rendering
* Changed SSAO defaults to be more subtle.
* Light properties cleanup. Major changes: point / spot lights use inverse squared falloff by default, Brightness changed to Intensity with new defaults per light type, Radius renamed to AttenuationRadius.
* To prepare for future shader optimisations, it is now a requirement to bind shaders to the global state BEFORE setting any parameters. Trying to set parameters on a shader which isn't currently bound will produce and ensure.
* Almost all settings have been removed from SystemSettings, and replaced with equivalent console variables. This includes system resolution (GSystemSettings.ResX/ResY) which are now accessible from code via GSystemResolution.ResX and GSystemResolution.ResY. A new console variable (r.setres) has also been added to replace the old "setres" command.
* The default near clipping plane has been set to 10cm. This may cause z-fighting if your game uses very long view distances. See r.SetNearClipPlane.
* Made PostprocessAmbient purely additive, not occluded by environment reflections or other things (other than SSAO), now it's meant to make an more interesting ambient (content might need to retweaked) not a infinitly far away skybox texture.
* Changed TextRender default material to be opaque (TemporalAA quality improvements now make this the better option).
* Consoles now use less memory when using ScreenPercentage. In case the game wants to dynamically change it over multiple frames this is not the right method. If needed we can use the cvars settings and make it a platform/game property.
* Usability change of showflags: game and editor showflag state now allows proper toggle (2 states are stored and toggled).
* Allow TemporalAA in editor by default (minor flickering with editor primitives is expected).
* Split ScalabilitySetting persistence into game and editor (different ini files). This allows early loading of the settings (even game isn't there yet) and avoid reinit of subsystems.

#### Gameplay and Framework
* Oculus integration has been updated with improvements to latency, and support for positional tracking devices. Note:  LibOVR SDK for positional tracking must be procured from Oculus in order to use the functionality
* Components Array removal
	* The components array has been removed, it is no longer necessary to add newly created components to any array. If you do not wish a created component to be registered set bAutoRegister to false.  Access to the components array is via the AActor::GetComponents function.  Unless a component is created independently of an Actor, the component must have a direct outer of the Actor. In general, you cannot have components that are subobjects of a non-actor. 
* Input binding changes
	* Key bindings are now done by name instead of enum.  A new struct FKey encapsulates the name and provides a number of helper functions. It is encouraged to use these helper functions for things such as IsGamePadKey, however, the EKeys::IsGamepadKey functions are still defined to make migration easier.
	* EKeys enum has been eliminated.  Places that used EKeys::Type or EKey will generally need to be changed to FKey
	* All EKeys enum entries (e.g. EKeys::MouseX) have been translated in to static const members of an EKeys struct so most usages of key names will still work, however, because it is a struct you can no longer switch on a Key's value.
	* Many Input settings have been moved out of Engine.PlayerInput and in to Engine.InputSettings. Of most significant note: AxisConfig, ActionMappings, and AxisMappings.
* WorldFromContextGetter has been removed.  All UObjects can now implement a virtual GetWorld() function instead.
* APlayerCamera has been renamed APlayerCameraManager.
* AxisMappings MoveForward, MoveRight, MoveUp, Lookup, and Turn and ActionMapping PushToTalk have been removed from BaseInput.ini.  They must be supplied in the DefaultInput.ini for your specific game if required.
* SoundNodeGroupControl no longer considers distance.  Instead it simply ensures that the maximum number of sounds for each 'bucket' is playing before falling to the next 'bucket'.
* SoundNode NotifyFinished hooks have been restructured.  It is now possible for multiple nodes to request notification of the wave instance completing.
* UMETA is now consistent with other markup macros, in particular it uses comma instead of pipe as delimeter.
* Visual Studio 2013 is now used by default
	* Remember that your developers (and users of packaged builds) will need the Visual C++ 2013 redist installed.
	* You can still use Visual Studio 2012 if you need to (see below for more info, and CL # 1989640).
	* Certain platforms have debugging add-ins that do not work with the new IDE yet.  
		* We detect these platforms and force the project file format to 2012 automatically.
		* You can always override behavior by passing '-2012' or '-2013' on the GenerateProjectFiles command line.
	* Other special use cases:
		* If you want to use VS 2012 for everything (because you don't have VS 2013 yet), locally modify WindowsPlatform.Compiler in UEBuildWindows.cs.
		* If you want to keep using VS 2012 IDE but compile with VS 2013, make sure you have VS 2013 installed and pass '-2012' to GenerateProjectFiles.
		* If you want to use the VS 2013 IDE but compile with VS 2012, you can set WindowsPlatform.Compiler to 2012, but pass '-2013' to GenerateProjectFiles.
* Visual Studio 2013 Express for Windows Desktop is now fully supported!
* DirectX SDK prerequisites are now included along with the source!
	You no longer need to have the DirectX SDK installed on your PC to build the engine.
* Visual Studio and Xcode project file changes
	* Project files now generate for all platforms by default; Removed "AllPlatforms" .bat file.
		* You can pass "-CurrentPlatform" to get the old behavior if you want.
	* Project files: 'Shipping' configuration is now included by default.
		* You can pass "-NoShippingConfigs" to omit Shipping config (smaller/faster project files).
* Debug builds no longer use the Debug CRT (or Debug third party libraries) by default
	* Added new UnrealBuildTool option:  bDebugBuildsActuallyUseDebugCRT  (BuildConfiguration.cs)
	* bDebugBuildsActuallyUseDebugCRT: This is true if we should compile Debug builds using Debug CRT libs and Debug third party dependencies.  Otherwise, we'll actually compile against the Release CRT but leave optimizations turned off, so that it is still easy to debug.  
	* If you enable this setting, actual Debug versions of third party static libraries will be needed when compiling in Debug.
* Removed 'Shipping' PhysX binaries and libraries
	* We now link with PROFILE versions in all configurations by default.
* Removed default Steam file from binaries (steam_appid.txt)
	* You should create your own steam_appid.txt for your game project with a unique Steamworks ID for your project.
* Disable Link-Time-Code-Generation (LTCG) by default, even in Shipping builds
* (IMPORTANT) The DebugGame build configuration now shares engine binaries with the Development configuration.
	* DebugGame causes game modules to be compiled with UE_BUILD_DEVELOPMENT, but optimization disabled. 
	* Pass -debug on the command line to tell the editor to load DebugGame game modules.
	* Delete user configuration files from Intermediate\ProjectFiles to have UBT automatically fill in the correct command line in your project settings.
* Config settings for installed builds are now stored in the user's AppData folder, rather than My Documents.
* Template projects now have a .uproject extension again.
* The engine version now has a Major.Minor.Hotfix component as well as changelist number (FEngineVersion). This version is saved into packages to allow for out of band hotfixes.
	* Modules will need to be recompiled with the correct version strings from PCLaunch.rc for the engine to load them.
* Decision to compile plugins in monolithic builds is filtered by the enabled plugin list in config files.
* LevelEditor: the "Mobile Preview" menu has been hidden, because the functionality isn't fully implemented yet
* LevelEditor: the "-PlatformTools" command line switch has been removed; the remaining features that depended on it are now accessible in the 'Experimental' section of the Editor Preferences
* Settings: many Editor User Settings have been moved into new classes and exposed as separate sections in the Settings UI; your local settings changes may have to be reapplied
* Messaging: UDP message transport is now a plug-in (UdpMessaging) that is loaded by default, but still requires "-messaging" command line switch to activate in Shipping builds and standalone games; we are planning to get rid of the switch after this prototype implementation has been rewritten for production quality; no ETA yet

#### Animation
* Allowed anim sequence and blendspace properties to be exposed as a pin in the graph.
* Added support for inheriting from an existing Anim Blueprint (allowing overriding the defaults and event graph, but not the anim graph).
* Refactored the Persona viewport toolbar and widgets, improving real estate usage and behaving similar to the level editor.
* Various bug fixes for Anim Blueprint debugging.
* Added a customization for FBoneReference structures, showing a skeleton tree picker for the bone name.
* Added filtering logic to asset pickers on anim player nodes so that only compatible assets (based on skeleton) are shown.

#### Core
* Intermediate generated files are now per-platform.
	* If you have tools which do any kind of processing on generated files, then these will need to be updated to the new locations.
* ConstCast has been removed, because it's confusingly unlike C++'s const_cast.
	* `ConstCast<T>` should be replaced with `Cast<const T>`.
* Renamed UObjectSerializer to UGCObjectReferencer and FSerializableObject to FGCObject as they do not use serialization to collect garbage anymore and may be misleading.
* Code refactoring that requires action from licensees:
	* Renamed GIsUCC to IsRunningCommandlet() (mostly)
	* Renamed USpriteComponent to UBillboardComponent
	* Renamed UMaterialSpriteComponent to UMaterialBillboardComponent

#### Platforms
* **Moblie**
	* Exposed touch input interface properties to be editable in the Settings UI.
	* Added copying of platform-specific configuration files for Android and iOS via the Settings panel.
	* Added editing for icons, launch screens, and device orientation in Project Settings.
	* Various packaging size optimizations for cooked games.
* **Android**
	* Enabled Android support directly from the editor with Package and Launch (aka One Click Deploy).
	* Packaging Android will create a .obb file next to the .apk, with a .bat to install it.
	* Packaging in Distribution needs SigningConfig.xml to be setup properly (see sample in Engine/Build/Android/Java).
	* .apk generation now only happens if .so of java files have changed.
* **Mac**
	* Mac editor works but pre-built binaries are not included with this release.
		* For now, you must compile the binaries in order to run the editor on Mac.
		* This will be resolved for the next QA build.
	* Unreal Frontend works on Mac.			
	**iOS**
	* iOS build and packaging works on Mac.
	* Various fixes and improvements to GameCenter OSS.
	* Added experimental iAD support for iOS.
	* Fixed icon glossy effect showing up on iOS6 incorrectly.
	* Forced symbol stripping to always be on for Shipping iOS builds.
	* Various improvements to the PC iOS deployment workflow (to code sign from the editor, set environment variable uebp_CodeSignWhenStaging=1, but you will have to have a valid certificate for your provision installed on the PC).
	* Merged various iPhonePackager changes from UE3 (fat binary support, fix for code signing extending beyond the preallocated size in the stub, etc...).
	
#### Networking
* A new bool has been added, bReplicates. This should be set in blueprints and C++ constructors to make an actor replicate. Setting RemoteRole=ROLE_SimulatedProxy manually is no longer necessary. 


## Future Additions and Ongoing Efforts

#### Editor and Tools
* Material Properties are now correctly greyed out when they have no effect.
* Prevented most incompatible connections in the new Material Editor.
* Made sure actors spawned during iteration are correctly included in the iteration.
* Made sure deletion of SoundNode inputs can be undone correctly.
* Improved display of Input mappings.
* Static Switch Parameters now output any Material Attribute inputs.
* Added rich tooltips for the Input Project Settings.
* Added cursor indicator when drag-dropping assets & a warning when dropping textures on actors.
* Locking actor movement now prevents editing of transform in Property Matrix.
* Reset themes menu when color picker is re-created.
* Added IDE name to message displayed when new project is created.
* Content Browser splitter sizes are now preserved between sessions.
* Matinee now displays correct name for asset.
* SETRES console command now works in PIE in standalone game (and when specifying ResX/ResY on the command line).
* Asset rename now prevents `*\<>?` characters from being entered.
* "Find In Content Browser" now uses the last content browser that was clicked.
* "Play From Here" option is now not available from Scene Outliner.
* Prevented assets from getting RF_MarkPendingKill added when they have been serialized with RF_Transactional.
	* Prevents some objects being wrongly inserted into the undo buffer.
* Key struct customization is now sized more reasonably.
* A newly-created editor no longer defaults to Subversion source control.
* Rearranged Blueprint tutorial flow & auto-run appropriate tutorial for current BP editor mode.
* CTRL+Backspace and CTRL+Delete (delete-to-word-boundary) hotkeys now work in text boxes
* Users can now move selected keys in the curve editor without having the mouse over a key by holding CTRL.
* BSP brushes now respect editor visibility settings
* Added an icon to blueprint variable nodes that are set to be replicated.
* Scene outliner now displays the number of selected actors in its footer.
* Pressing escape now closes any popup windows, cancels drag-spinning and actor viewport dragging operations.
* Reimport file paths are now stored relative to their associated packages, where this makes sense.
* Added visual cue for scale on orthographic viewports.
* Reset buttons now exist for actor transforms on the details panel.
*  Mesh Paint mode no longer forces backets to be displayed around the selection.
* Cancelling survey now fades away instantly.
* Matinee track menu options now match their track names.
* Added missing meta tags for InterpTrack classes.
* Project browser description no longer mentions creating a project.
* Matinee no longer crashes when using shared interp data.
* Opening projects from newer editor versions now fails gracefully.
* Object names can no longer contain the letter `.
* Sound Cue 'Stop' now looks like a stop symbol.
* Show Folder options is now disabled except for the Content Browser.
* Static Mesh Editor LOD Message now correctly displays the LOD Index.
* Scene outliner sorting arrow is now more visible.
* Default keybinding now appears correctly in Preferences.
* Content Browser assets update to respect filters as assets are loaded.
* Ortho viewport now display the correct viewmode.
* Changing language/region now prompts user to restart.
* Class picker in skeletal mesh actors now correctly restricts selection pool by skeleton.
* Anim graph node details panel now correctly shows properties with children.
* Improvements to FBX window tooltips.
* Morph target deletion in Persona can now be undone.
* Skeletal mesh stats set to default appear in Persona viewport.
* Notifies in Persona now respond to editor delete command.
* Blendspace sequence assets can be opened directly from the samples in Persona.
* Improvements to FBX export file location selection.
* Deleting and undoing blendspace nodes now works correctly.
* State machines in animation graphs preserve their name when copied.
* Rich tooltips added to many animation graph nodes.
* Playback timeline no longer shows duplicate frame numbers.
* Colour pickers in the blueprint editor and Persona improved to be more visible.
* Vertex anims no longer filterable.
* Flight controls in PhAT no longer conflict with transform mode selection.
* Base pose now called Retarget Source.
* UnrealVS is now built for VS2012 Pro and VS2013 Pro, with separate builds in their own folders in Engine/Extras.
* Beta version flag in Unreal Editor plugins can be set by plugin developers in the uplugin file.
	* Beta plugins display a warning when enabled in the plugin manager.
	* Beta version info is displayed with the version number in the plugin manager.
* **Landscape**
	* Landscape brush is now hidden while moving the camera.
	* Default landscape scale has been changed to 100,100,100.
* Adjusted shootergame spawn points to spread bots out more.
* Revised shootergame bot behaviour to allow them to fire up/down.
* Made various revisions to scoreboard in shootergame.
* Revised boost pickups in vehicle game to make them respawn.
* Refactored game interface usage in vehicle game, hovership.
* Slate: Widgets inside the Slate core no longer depend on FEditorStyle.
* ShooterGame, StrategyGame, and VehicleGame: Converted over to use Slate Widget Style assets, and now has no dependency on FEditorStyle.
* IMPORT: FBX Log messages now goes to Log window. 
* TextureEditor: textures can now be reimported from the Texture Editor's toolbar.
* Translation Editor (Work in progress): 
	* Undo/Redo support
	* Only save to file when data has actually changed
	* Prevent insertion/deletion/duplication of rows (needed EditFixedSize tag on array UProperty).
	* Show error if history can't be loaded, or source control disabled (toast + message log, but don't display message log).
	* Show error if can't load current manifest or archive (toast + message log, show message log).
	* Show error if check-out/save file failed, or notification if it succeeded.
	* Don't try to check out the archive on the perforce server every time we save, but instead remember that we checked it out.
	* Remove "Find in Content Browser" button and menu item.
	* Correct tab title from "TranslationDataObject_1" to "Language Name - Project Name - Translation Editor."

#### Rendering
* Removed min mip on reflection environment and sky specular - was preventing rough materials from going all the way diffuse.
* Reflection environment support for Feature Level SM4.
* LightAsIfStatic is now usable on movable static meshes again.
* Sky lights now recapture properly in construction scripts.
* Visualization of selected BSP surfaces now matches that of other objects in the editor.
* Removed experimental TemporalUpsample feature (reconstructing inbetween frames from existing frames).
* Removed experimental feature r.MSAA.DeferredMode (memory intensive AA solution).
* Removed BlurGBuffer feature (rarely used, since TemporalAA add NormalRoughnessToAlpha barely needed), feature didn't work with StereoRendering.
* Refactored EngineShowflags definition code.
	* Allows compiler optimizations when flags are fixed for certain build configurations. 
* **Optimization** 
	* Primitive/light interactions for movable directional lights are only created if the primitive needs to cast a per-object shadow.
	* Numerous small improvements to single threaded rendering performance.
	* Allocations from the global dynamic vertex and index buffers are now backed using a pool of smaller buffers.
	* Numerous mobile shader optimizations.
	* Draw lists can now be sorted front-to-back within a drawing policy, greatly increases performance on mobile devices without hidden surface removal.
* **Android** 
	* Clamp screen resolution to 1024 when using the mosaic fallback on Android devices. This is necessary due to limited precision in glFragCoord.
	* Kindle Fire HDX and Galaxy S4 now use FP16 render targets.

#### Blueprints
* Better categorizing of blueprint nodes in the blueprint palette/context menu.
	* We've made an initial pass to clean up the node categorization (aiming to slim down the number of categories, while making nodes more discoverable)� while it's not perfect, we continue to iterate on it, bettering it as we go.
* Blueprint component variables are now assigned to the "Default" category.
* Array properties will now ensure that internal type information has been fully loaded prior to serializing elements of the array into an object instance.
* Removed an unnecessary assertion during Blueprint asset loading.
* Added "Transient" and "Save Game" flag to variable details panel in Blueprints.
* "NotBlueprintType" support added to UClass headers to stop inheritence of "BlueprintType."

#### Gameplay and Framework
* Add DeferStartupPrecache and PrecacheStartupSounds to FAudioDevice, which lets a game delay the caching of startup sounds until after settings can be read. Add SetMaxChannels to modify MaxChannels of AudioDevice at runtime
* Add ability to do substring enum redirects in Engine.ini. Example:

		+EnumRedirects=(EnumName="ENewEnum",OldEnumSubstring="EOldEnum::",NewEnumSubstring="ENewEnum::")

* Deleted many unused commandlets.
* UWorlds are now RF_Public and RF_Standalone. This is in preparation of treating them like assets and managing them in the content browser.
* Lightmaps are now viewable via the world settings details panel. 
* Minor stability improvements to the replication system
* Minor navmesh stability improvements.
* CDOs for blueprints now get PostLoad called on them after they are regenerated at load time.
* If audio hardware is not found or fails to initialize, the audio device is now deleted. Also, audio devices are no longer initialized in commandlets.
* Minor performance improvements for recompiling Blueprints.
* Minor cloth stability improvements.
* Added tooltips for anim nodes in Persona.
* Rearranged Show menu in Personas viewport.
* Merged GetSocketLocalTransfrom with GetSocketWorldTransform.
* Added an event to allow editors to manually refresh object references when objects are replaced.
* Polished "Create Anim Blueprint" window (redesign).
* Polished "Assign skeleton" window (changed skeleton selection to use asset pickers instead of plain list box).
* Polished "Retarget Anim Blueprints" (Added notifications to better inform user of what is happening).
* Changed blueprint tree display to use display names instead of object names.
* Better iterative compile times on single source files for small game modules.
	* Game modules now always get a precompiled header (faster iteration).
	* Previously, only game modules with more than 8 unity source files would get one.
		* New setting for this:  BuildConfiguration.bForcePrecompiledHeaderForGameModules.
	* Small game modules no longer use unity build (faster iteration).
		* Now, game modules with less than 32 source files force non-unity mode.
		* New setting for this:  BuildConfiguration.MinGameModuleSourceFilesForUnityBuild.
* Program modules no longer use shared PCHs by default (can be overridden using PCHUsageMode).
* Changed CodeView to be an experimental editor setting; disabled by default.
	* Added double-clicking on Class names to CodeView to jump to C++ code.
* UnrealBuildTool: Don't spawn more processes than the user has CPU cores (local executor only).
	* This frees up system resources but can reduce build times in some cases; In other cases it can actually improve build times.
* Disabled most editor window animations by default (can be toggled under "Editor Look and Feel" section).
* Editor's 'New Project' and 'Open Project' dialogs have been significantly improved.
* Fixed skyboxes included in synthesized Lightmass importance volumes.
	* Meshes larger than 10,000m along any axis are now ignored when calculating bounds for automatic importance volume.
* Content Browser: Fixed textures not streaming for thumbnail preview scenes.
* Improved error help when Visual Studio appears to be missing.
* DeviceManager: various burst upgrades to add new features and improve usability; device discovery has been overhauled.
* DeviceManager: implemented device shutdown for Windows devices; warning users if rebooting/shutting down local PC.
* SessionFrontend: various usability improvements.
* SessionFrontend: the Game Launcher tab has been removed from the Session Frontend and is now its own major tab accessible from the Window menu.
* Messaging: added FMessageEndpoint::SafeRelease() for safely destroying message endpoints from non-Game threads; search code base for usage examples.
* MessagingDebugger: various burst upgrades to add new features and improve usability
* MessagingDebugger: the Messaging Debugger UI is currently inaccessible from standalone UFE; this will be fixed next release.
* PlayInEditor: the pre-defined screen resolutions for PIE settings are now configurable in the INI.
* PlayInEditor: the "Launch on Device" feature in the Level Editor has been cleaned up and stabilized.
* PlayInEditor: added "Mobile Preview" option that will launch the game in a standalone process with mobile emulation.
* ColorPicker: various usability improvements and now remembers its last state.
* Slate: improved capabilities of SSlider widget (vertical sliders, indented knobs etc.)
* General: continued conversion of code to use selected C++11 features (NULL -> nullptr, auto in for-loops etc.)
* Selected lines in Output Log are now readable. 

#### Core
* Added LOD levels generation to World Browser, requires Simplygon.
* Finished implementation of TCircularQueue
* Upgraded Opus voice codec to v1.1
* More efforts to handle deep install paths and project paths outside of the engine.
* Const-correctness fixes.
* New functions and fixes to further unify the behavior of TArray and TIndirectArray.
* Improvements to error handling and error messages from UnrealHeaderTool.
* Some UnrealHeaderTool parsing fixes.
* Build speed improvements.
* StringCast now handles null pointers.
* TMap/TSet/TMultiMap iteration fixes.
* Redirect initialization code now handles the CoreUObject.Metadata section being missing from the .ini file.
* UnrealHeaderTool generated includes are now normalized.
* Improved tooltip parsing to eliminate superfluous 'borders', e.g. lines containing all ======, ------ etc.
* Tooltips are now parsed for more property types which were previously being missed.

#### Networking
* Removed old/broken ping code
* Added new server-authoritative ping code
	* Uses low level net driver acks, to calculate client ping, and adds validation to reduce ability to tamper with values
	* Adjusted ping smoothing in high-level player state code, to work better with new ping code

#### Platforms
* **Mac**
	* Make adding code to projects work on OS X.
	* When exploring to a file, open the parent folder in Finder and select that file, or for folders just open them.
	* Disambiguate some C++ types that were causing crashes on Mac due to silent linker failure.
	* Make Mac OS X output log scroll to new entries.
	* Cache the window's zoomed state on Mac OS X - the objc_msgsend for isZoomed is sitting top of the profiler when running the editor!
	* Make it easier to detach window tabs on the Mac.
	* Make windows appear on editor restart on Mac OS X.
	* Stop minimized windows stealing mouse events on Mac OS X.
	* Stop crashing when trying to reshape windows on OS X.
	* Stop crashing after closing prompt windows on OS X.
	* Make sure that the output log window opens & displays content on OS X even when there's no MacApplication.
	* Stop the level viewport graphics from fading on OS X when using sub-editors.
	* Avoid corruption when rendering temporal screen space reflections
		* Must enable NAN suppression on Mac OS X to handle differing NAN/INF conditions in GLSL.
	* When rendering particles ensure a texture buffer is bound even for lower shader models to avoid a crash.
	* Use a PBO pack, followed by a PBO unpack to copy texture mips when newer extensions aren't available to avoid synchronising the CPU & GL with glMapBuffer.
	* Eliminate one cause of slowdown when mousing over the editor.
	* Cache the hit proxy data into a byte buffer rather than calling RHIReadSurfaceData which takes a very slow glReadPixels path for OpenGL..
	* Enable seamless cube maps on all GL's that support them.
	* Eliminate distortions at viewport edge when using SSR on Mac OS X. 
	* Speed-up locking CPU readback textures and general texture readback on Mac OS X + address HZB performance.
* **Android**
	* Android now prefers R8G8B8 backbuffer format instead of R5G6B5.
	* Android is now multithreaded (using proper CPU core count check at startup).
	* Now using OpenGL ES 3.0 shaders for high-end Qualcomm Adreno GPUs.
	* GPU frametime can now be measured in `STAT UNIT`. It's disabled by default due to driver issues on some devices, but can be enabled by setting the CVar `r.DisjointTimerQueries` to 1.
	* Initial Android controller and keyboard support is in.
	* Android pause/resume behavior has been cleaned up.
	* Android builds no longer rely on a user generated standalone toolchain.  UBT calls directly into the NDK toolchains.
	* Android debug stub projects are no longer generated if NSight 1.5 or later is installed.

#### Animation
* **Animation issues**
	* Skeleton: Fixed various marking as dirty issues, so you shouldn't see skeleton getting dirty anymore without a proper cause. 
		* You also don't have to save skeleton anymore when new anim notify is added to the animation.
	* ModifyBone SkeletalControl name changed to TransformBone for clarify.


## Known Issues

* Mac editor works but pre-built binaries are not included with this release. For now, you must compile the binaries in order to run the editor on Mac.



