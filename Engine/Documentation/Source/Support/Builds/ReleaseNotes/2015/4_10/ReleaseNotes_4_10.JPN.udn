INTSourceChangelist:3810467
Availability:Public
Title:アンリアル エンジン 4.10 リリースノート
Crumbs:%ROOT%, Engine
Description:
order:10

今回のリリースには、アンリアル エンジン 4 の数百のアップデートが含まれており、そのうち 53 の改善点は GitHub のアンリアル エンジンのデベロッパーのコミュニティから寄せられたものです。アンリアル エンジン 4.10 に貢献をいただいた以下の皆様に謝意を表します (以下、敬称略)。

Andreas Axelsson (judgeaxl), Andrew Scheidecker (AndrewScheidecker), Artem (umerov1999), Artem V. Navrotskiy (bozaro), Cengiz, Terzibas (yaakuro), Christopher P. Yarger (cpyarger), Clay Chai (chaiyuntian), Cliff Jolly (ExpiredPopsicle), Coherent UI (CoherentUE4), Derek van Vliet (derekvanvliet), Frugality, Guillaume Buisson (monsieurgustav), Ian Fox (MaideCa), Jay Mattis (braindx), Jeff Rous (JeffRous), Joshua Olson (MrMormon), Kacper Kowalczuk (Ogniok), Marat Radchenko (slonopotamus), Markus Breyer (pluranium), Michael Allar (Allar), ondys, Piotr Bﾄ・ (Pierdek), Rama (EverNewJoy), Ren Wilson (rwils), Rene Rivera (grafikrobot), Robert Khalikov (nbjk667), Robert Williams (Rottbott), Ryan Luck (overlawled), Salamanderrake, Sﾃｩbastien Rombauts (Srombauts), Sergey Vikhirev (BorMor), Shaijan, ssoria, Sylvain Rochette (labidus), Tam Armstrong (tamarmstrong), TheSoeldner, x414e54

# 新機能

アンリアル・エンジン 4.10 へようこそ！今回のリリースには、素晴らしい機能が沢山ありますが、特にエンジンの安定性を高めることと未解決の問題に対処することに重点を置きました。報告された数百のバグが修正され、多くの品質改善が新たに加えられ、サポートされているほぼすべてのプラットフォームにアップデートが適用されました。

アンリアル エンジンは、驚異的な VR 体験を実現するように設計されており、リリースを重ねる毎にどんどん進化しています。エピック ゲームズの ["Bullet Train" VR demo](https://www.youtube.com/watch?v=DmaxmnPzMWE) は、このバージョンの新機能、特にヘッドマウント ディスプレイ向けに設計されたレンダリングの最適化の新機能でパワーアップしました。

モバイル分野でも新しいスケーラビリティ機能と反射のサポートが加わり素晴らしいアップグレードがあります。

最後になりましたが、プログラマー向けに以下の朗報があります。Windows での開発用に Visual Studio 2015 が使えるようになりました。Mac 向けには、Xcode プロジェクトを改善し、一段と効率的に作業できるようにしました。最新の SDK をサポートしターゲット プラットフォームも更新しました。

# 主要機能

## 新規：モバイル向け屈折エフェクト

屈折エフェクトがモバイル プラットフォームで完全にサポートされるようになりました。屈折機能を持つ既存のシェーダーは今回のリリースから自動的にモバイル デバイスでも機能するようになりました。余分な手順は不要です！ 

![image alt text](image_0.png)

* iPhone 5S 以降、および Nexus 5、Galaxy Note 4、Galaxy S6 などの Android デバイスで有効になりました。

* 他のデバイスでも対応する Device Profile で r.RefractionQuality レンダリング変数を設定することで有効にすることができます。

## 新規：VR レンダリングの最適化

今回のリリースで VR ゲームは一段と速くなります。これは、ヘッドマウント ディスプレイ向けの新しいレンダリングの最適化機能によるものです。VR レンダリングの GPU オーバーヘッドを削減するために新しい "Hidden and Visible Mesh optimization (不可視/可視のメッシュの最適化)" 機能を実装しました。  

![image alt text](image_1.png)

**[Bullet Train VR Demo](https://www.youtube.com/watch?v=DmaxmnPzMWE), by Epic Games**

![image alt text](image_2.png)

こうした 2 つの最適化によって、レンズの歪みによって実際のデバイス上では表示されないピクセルに GPU 時間を使わないようにします。隠れたエリアのメッシュはプリパスとして機能します。この場合、ビューから隠れたエリアを表すメッシュを選び、その後ろ側にあるものをすべて処理しないようにします。次にポスト プロセスの段階で、可視ピクセルを表すこのメッシュの逆側を使用し、これらに対してのみポスト プロセス処理を実行します。上記の 2 つの技術を使うことで「負荷をかけることなく」パフォーマンスを向上させることができます。“Bullet Train” の場合、PC 上でトータルで約 0.25 ms の節約になり、トータルのフレーム時間はわずか 11ms です。コンソール プラットフォームでは、パフォーマンスの大幅改善が期待されます！

## 新規：Visual Studio 2015 のサポート

アンリアル エンジンは Windows プラットフォームで **Visual Studio 2015 ** にアップデートされました。 

![image alt text](image_3.png)

Visual Studio 2015 には、均一なイニシャライザーやコンストラクターのデリゲートなどの新しい [C++ 言語機能] (https://msdn.microsoft.com/en-us/library/hh567368.aspx) を含むワークフローを支援する [多くの新たな改善点](https://msdn.microsoft.com/en-us/library/60k1461a.aspx) があります。新しいコンパイラーは厳格に標準に準拠し、コード内でより多くのエラーを検出します。

無料の **Visual Studio 2015 Community Edition** を [ここ](http://go.microsoft.com/fwlink/?LinkId=532606) からダウンロードできます。他のバージョンについては、[Visual Studio のウェブサイト](http://www.visualstudio.com) をご覧ください。アンリアル エンジンは Visual Studio 2015 Community、 Professional、 Enterprise と Express for Desktop (一部制約有) をサポートしています。

**重要:** アンリアル エンジンのランチャーによるインストールには ** C++ サポートが有効になった Visual Studio 2015 **が必要になりました。是非、チームでアップグレードしてください！ アンリアル エンジン内で New Project (新規プロジェクト) ウィザードを使用している場合は、Visual Studio 2015 のダウンロードとインストールを支援します。

**重要:** Visual Studio 2015 のインストーラーは、手動でインストールする場合にはデフォルトで C++ をインストールしません。表示が出たら必ず "**Custom**" を選択してください。次に **Programming Languages** セクションを展開して **Visual C++** をチェックを入れます。 

初めてプロジェクトをコンパイルする場合は、新しい C++ コンパイラはより厳格になっているため、報告される新しいコンパイラ エラーを注意してご覧ください。Microsoft 社がコードに影響を及ぼしうる変更の例と共に、 [ドキュメント](https://msdn.microsoft.com/en-us/library/bb531344.aspx) を投稿しています。

 

Visual Studio 2013 を引き続き使用する必要があれば、GitHub のソース コードからご自身でエンジンをコンパイルする必要があります。ランチャーによる配布で Visual Studio 2013 をサポートしない主な理由は、両方のバージョンのコンパイラに対して、追加でプリコンパイルされたバイナリ、デバッグ シンボル、静的ライブラリがあるとエンジン サイズが著しく増えて Windows 上でのプロジェクトのセットアップがいっそう複雑になってしまうからです。次のリリースで Visual Studio 2013 のサポートからは完全に撤退します。 

## 新規：モバイルのマテリアルのクオリティ

新しい Material Quality システムでは、最新のデバイス上でのクオリティを犠牲にせずに、ローエンド デバイスまで簡単にスケールダウンすることができます。

すべてのマテリアルに対して Low、 Medium、High の各クオリティのバージョンのシェーダーを生成することができるようになりました。ローエンド デバイス上でパフォーマンスを高めるために、各階層でレンダリング機能を選択して無効にすることができます。UE4 では多くの一般的なデバイスに対して適切なデフォルト クオリティ レベルを自動的に検出します。

![image alt text](image_4.png)(convert:false)

** Galaxy S6 Edge (High クオリティ マテリアル)**

![image alt text](image_5.png)(w:640)

* High クオリティのマテリアルが以下を自動的に選択しました。

* スペキュラ(鏡面反射色) 反射、ラフネス、メタル、法線マップ、指向性ライティング

**Galaxy S III (マテリアルのクオリティをスケールダウン)**

![image alt text](image_6.png)(w:640)

* 最適なパフォーマンスを得るためにマテリアルのクオリティが自動的にスケーリングされます。

* スペキュラ(鏡面反射色) 反射、ラフネス、メタル、法線マップ、および指向性ライティングのバリエーション

## 新規：UE4 プラットフォームのアップデートと SDK

UE4 がリリースされるたびに、最新のプラットフォームの SDK のサポートのアップデートと、サポートされているプラットフォームに対する改善が加えられます。

![image alt text](image_7.png)

今回のリリースのプラットフォームのハイライトは以下のとおりです。

* Oculus Rift が 0.8 SDK Beta をサポートするようにアップデートされました。

* OculusMobileSDK が 0.6.2 をサポートするようにアップデートされました。

* Xbox One が August XDK にアップデートされ、Visual Studio 2015 を使用してコンパイルするようになりました。

* Playstation 4 は SDK 3.00 にアップデートされました (Playstation VR サポート有)。

* iOS サポートは SDK 9.0 にアップデートされました。

* Mac OS X は SDK 10.11 (El Capitan) にアップデートされました。

* Xcode サポートは Version 7 にアップデートされました。

* Android は Marshmallow (6.0) をサポートするようになりました。

* Linux/SteamOS の修正、および下位レベルの機能での小さな改善は進行中です。

## 新規：ランドスケープのミラー ツール

この新しいミラー ツールを使用すると、簡単にシンメトリーのランドスケープを作ることができます。これは競争する 2 チームのランドスケープ レベルで非常に役立ちます。

![](image_8.gif)(convert:false)

* 高さマップ、マテリアル レイヤー、ランドスケープの草をミラリングします。 

* X 軸または Y 軸のいずれかの方向にミラリングします。

## 新規：低レイテンシーの VR モーション コントローラー

Motion Controller コンポーネントをアップデートし、レンダリング開始直前に late-update を行います。以下の図で、late-update を適用したコンポーネントと適用しなかったコンポーネントの位置と回転の違いがわかります。このスクリーンショットは、通常の速さで、左右交互の腕の動きで撮られたものです。

![image alt text](image_9.png)(convert:false)

これはヘッドマウント ディスプレイでレイテンシーを減らすために使用する技術と同じです。Motion Controller コンポーネントの位置を1 フレームあたり 2 回アップデートします。1 回は入力ティック中で、もう一回はレンダリング直前です。つまり、このようにコントロールすることで、応答性が高く、また現実世界でプレイヤーが行っていることがより良く反映されていると感じられます。この機能はデフォルトで有効になっています。  

## 新規：ブループリント ノードの自動整列

ブループリント グラフを高速に自動整列するためのレイアウト ルーチンセット一式を追加しました。 

![](image_10.gif)(convert:false)

選択したノード上で右クリックして、"Alignment" を選ぶだけでノードが自動的に整列ます。  

以下はこの機能で行うことができる内容です。

* 境界に基づき選択したノードを整列させる (上/中央/下、左/中央/右) 

* 水平軸/垂直軸に沿って選択したノードを並べる

* 選択したノード間の接続を真っ直ぐにする

* 特定のピンに接続されている特定のリンクを真っ直ぐにする

## 新規：Android 上のウェブ ブラウザの UI

Android は Widget ブループリントまたはスレートのコードを使用して C++ で作成されたウェブ ブラウザ ウィジェットをサポートするようになりました。この機能を使用して、ウェブ上でホストされるコンテンツを表示することができます。例えば、ユーザー向けのニュース メッセージやヘルプ テキストなどがあります。

![image alt text](image_11.png)(convert:false)

* Android では、実行ファイルのサイズが増えないようにプラットフォームのネイティブなウェブ コントロールが使用されます。

* ウェブ ブラウザのウィジェットは、今後のリリースで iOS でサポートされます。

## 新規：Android のゲームパッド機能

Android 用に複数のゲームパッドがサポートされるようになり、一部の一般的なコントローラーのタイプやマッピングが特定されます。  

以下の Android コントローラーは自動的に検出されます。それ以外は一般的なマッピングにフォールバックします。

## Amazon Fire Game Controller および Amazon Fire TV remote

![image alt text](image_12.png)(convert:false)

## NVIDIA SHIELD Controller および SHIELD Portable

![image alt text](image_13.png)(convert:false)

## Samsung Game Pad EI-GP20

![image alt text](image_14.png)(convert:false)

Android コントローラー向けその他の新機能

* マッピングは、コントローラー デバイスの名前に基づき自動的に検出されるようになりました。

* 複数コントローラーが同時にサポートされます。

* 右ジョイスティックで Z/RZ と RX/RY のマッピングを処理するようになりました。

* 左トリガー / ブレーキと右トリガー / ガスの軸が適切に機能します。

* X/Y Hat は、十字パッド ボタン イベントにマッピングされます。

以下は、同時に複数のコントローラーをサポートする場合の簡単な説明です。割り当てられていないゲームパッド上のボタンを押すと、そのデバイス ID をひとつめの割り当てられていないコントローラー ID に関連付けます。ゲームパッドからコントローラー ID への割り当ては、以下の 3 つの新しいブループリント ノードを使用してクエリーまたはクリアすることができます。

![image alt text](image_15.png)

## 新規：Xcode プロジェクトの改善

ゲーム向けに Xcode プロジェクトを生成する方法を大幅に改善しました。Xcode の Live Issue 機能と Fix-It 機能を利用できるようになり、 Indexing がはるかに速くなります。さらに、ビルド コンフィギュレーション間での切替えがはるかに容易になります。

単一のプロジェクトに複数のターゲットを入れる代わりに、複数のプロジェクトから構成されるワークスペースが1 つのターゲットに対してひとつずつあります。Xcode でUE4.xcodeproj の代わりに、UE4.xcworkspace を開くようになりました。ワークスペースの各プロジェクトで、様々な UE4 ターゲットをビルドするために使用する単一スキームを作成します。何がビルド中および実行中なのかは、アクティブなコンフィギュレーションとプラットフォームによって決まります。

**Xcode での UE4 ターゲット選択**

![image alt text](image_16.png)(convert:false)

[REGION:caption]左側は新しいターゲット選択、右側は古いターゲット選択[/REGION]

**XCode での UE4 ビルド コンフィギュレーション**

![image alt text](image_17.png)(convert:false)

どの実行ファイルを実行するかを考える必要がなくなりました。ビルド コンフィギュレーションを切り替えると、XCode が自動的に正しいアプリケーションを選びます。 *アクティブなコンフィギュレーションを変えても、スキーム エディタの Executable ドロップダウンは更新されません。これは、Xcode の既知の問題です。*しかし、Xcode から実行すると正しいアプリケーションを使用します。

![image alt text](image_18.png)(convert:false)

* StrategyGame.app が表示されていても、StrategyGameEditor.app が起動します！

プロジェクトの Indexing は一段と速く正確になるはずです。さらに、Live issue が表示され、Xcode の Fix-it システムが機能するようになりました。

![image alt text](image_19.png)(convert:false)

## 新規：モバイルのプロビジョニング プロファイル セレクタ

ユーザーは、iOS プロジェクト設定でモバイルのプロビジョニングと証明書を明示的に選択できるようになりました。以前は、「ベストマッチ」のプロビジョニングと証明書が使われていました (以下のように緑でハイライト)。現在は、隣にチェックボックスがあり、ベストマッチの代わりに特定のプロビジョニングや証明書を使用することができます。何もアイテムを選択しないと、緑色のものが使用されます。

![image alt text](image_20.png)(convert:false)

# Release Notes 「訳注： 以下は、非常に技術的な部分が含まれるため、翻訳を省略します。」

## AI

* Bugfix:AI senses registration code no longer crashes if the AI agent is missing some senses.

## Behavior Tree

* Bugfix:Behavior Tree node instantiation no longer crashes when making AI switch from one Behavior Tree asset to another.

* Added debugging tools.

* Added keyboard shortcuts to toggle game HUD and debug messages in the gameplay debugger.Users can configure shortcuts in the engine config file.

## Navigation

* Bugfix:Navigation System's navigation agent comparison can now match navigation data instances with appropriate agents in multi-navmesh environments.

* Bugfix:Navmesh raycasts now return normal vectors in the correct coordinate space.

* Bugfix:Editor no longer triggers full navmesh rebuild whenever a map is loaded.

* Bugfix:Editor does not not discard valid navigation meshes on level load.

* Bugfix:Navigation bounds gathering has been fixed by delaying navigation system initialization until actors get initialized for play.

## Animation

* New:Added Anim Instance Blueprint function to request the name of a state.

* Bugfix:Blendspace input data is no longer invalid when switching assets.Blend filter now works correctly in this case.

* Bugfix:Blendspace editor no longer crashes when the editor opens for the first time.

* Bugfix:Possible divide by zero removed from animation transitions using a crossfade duration of zero.

* Bugfix:Negative curve values can be passed to animation montages and will no longer be capped to zero.

* Bugfix:All animation sub-state machines now work properly with native bindings.Previously, only top-level state machines would work.

## Audio

* New:Using a pool to reuse XAudio2 voices for PC/XBoxOne platforms.

* Bugfix:Activate Reverb Effect successfully activates the specified reverb effect.

* Optimized performance when many sounds are playing at the same time.

## Blueprints

* New:Added alignment commands for blueprints.

    * Alignment methods for top/middle/bottom and left/center/right.

    * Distribution methods for horizontal/vertical spacing.

    * Straightening methods for connections between nodes/pins.

* Bugfix:Crash fix for saving Blueprints during a Play in Editor (PIE) session.

* Bugfix:Crash fix for prompting user to check out Blueprints during the compilation stage.

* Bugfix:Crash fix when AI Controller possesses a Pawn during the Pawn's UnPossess event while exiting PIE.

* Bugfix:Crash fix when deleting graphs or delegates while a "Create Event" node's graph is in the transaction buffer.

* Bugfix:Crash fix when PIE fails to start.

* Bugfix:Fixed issue with duplicating Timeline nodes that was causing "Launch" to fail afterwards.

* Bugfix:Crash fix when removing a function input after a child's implementation had been deleted.

* Bugfix:Crash fix after breaking and then re-adding pin connections to a Macro Instance node.

* Bugfix:Crash fix with parent-child Animation Blueprint Class assets.(Related to crash reports detailing a TRASHCLASS assert at the Initialize Animation call.)

* Bugfix:Crash fix for typing long names into blueprint function input and output pins.

* Bugfix:Crash fix for a potential crash after hot-reloading a compiled game project.

* Bugfix:Crash fix from invalid macros after deleting source graph in Macro Library.

* Bugfix:Crash fix when clicking in the viewport while a new map is opening.

* Bugfix:Crash fix when using "Find References" on a struct operation node (Make, Break, Set Members).

* Bugfix:Crash fix when entering invalid values into "Make Date Time" node in Blueprints.Now it should just report an error in the log.

* Bugfix:Crash fix when using undo/redo after deletion of components from a Blueprint.

* Bugfix:Crash fix on undo/redo when deleted Blueprint is being restored after it has been recompiled.

* Bugfix:Crash fix for using "Draw Debug Float History" and "Draw Debug Transform History" in Blueprints.

* Bugfix:Using shortcut keys to add local variables will no longer crash the editor when done in a graph that does not support local variables.

* Bugfix:Removed a potential infinite loop when adjusting Actor rotation in a Blueprint function.

* Bugfix:Crash fix when using "Convert Selected Components to Blueprint Class".

* Bugfix:Stopped resetting arbitrary defaults on cyclically-dependent Blueprint subclasses.

* Bugfix:Asset Class ID variables set to reference Blueprint classes are no longer replaced with "PLACEHOLDER" class references on load.

* Bugfix:Blueprints will no longer load with errors on macro nodes from a cyclically-dependent (out of date) macro library.

* Bugfix:Fixed a rare case where Timelines would erroneously create redirectors in a Play in Editor session.

* Bugfix:For Each Enum will now correctly iterate over all enum values.

* Bugfix:User Defined Enums begin counting at 0, and will no longer increase in increments of two.

* New placements of the Get Class Defaults node will no longer include array properties that contain object references.This is because it is a potentially unsafe connection.

    * As a side note, object properties are also not exposed for the same reason.

* The Blueprint details view for non-member variables (either from a parent class or an external member reference), will no longer show uneditable options as editable.

* The Get Class Defaults node now exposes Class and Interface variables.

* Graph node comment bubbles have been improved so that they don’t obscure input pins on array graph node types.

## Core

* New:Cooked packages can now be loaded in the editor if cooked for the same non-editor version of the platform the editor runs on.

* New:Optimized custom version system so that it takes less space in saved packages and is faster to access at runtime.

* Bugfix:Crash fix on deleting an Animation Blueprint and replacing it with another one.

* Bugfix:Fixed high memory usage by streaming packages in cooked builds.

* Bugfix:Crash fix when creating a Blueprint object from an archetype that is not the class default object and has multiple components added in Blueprint.

* Bugfix:Fixed UDP Socket Receiver not resizing Array Reader to actual received size.

* Bugfix:Fixed compilation issues arising from /Zm compiler flag in Visual Studio toolchains.

* Bugfix:Fixed some threading problems with various binned malloc stats.

* Bugfix:Corrected memory reporting with Binned Slack Current stat.

* Bugfix:Corrected memory stats reporting on out of memory.

* Bugfix:Multiline comments no longer break Unreal Header Tool parsing.

* Bugfix:Non-contiguous values of user defined enums are supported properly.

* Bugfix:Fixed usage of an invalid TLS slot ID in stats code.

* Bugfix:Instanced subobjects in Blueprint are no longer with subobjects from the CDO.(Contributed by slonopotamus, Pull Request #1470.)

* Fixed Log Compile typo in Unreal Header Tool log output.(Contributed by MrMormon, Pull Request #1460.)

* Memory statistics will be output to log when the engine crashes as a result of running out of memory.

* OS memory stats are no longer acquired every tick unless stats are being captured.

* Bugfix:When using command line executable, only the call stack was visible after a crash.Now, the whole error history should be dumped to the console.

* Bugfix:Crash report client should be packaged correctly now for all projects.

## Editor and Tools

* New:Added a new experimental editor preference to enable "Sequencer"!

    * Sequencer is our upcoming level actor animation and cinematics creation tool.

    * The current version is limited in features and lacks documentation.It’s enabled for pre-alpha testing.

    * Sequencer is still in heavy development and you can expect to see major improvements with every release.

    * If you are brave enough to try it out, please be sure to send feedback on the forums or AnswerHub!

* New:"Reset to default" button on the Image Size property of a brush now resets to the size of the brush's texture, if one is set.

* New:Actor Merging tool now supports merging of collision primitives.

* New:Added a feature allowing Detail Panel categories to be shown or hidden dynamically.

* New:Added a Launch Configuration setting to the Play on Device editor settings tab, allowing you to specify the build configuration you want to use when launching from the editor Launch button drop-down menu.

    * This also fixes an inconsistency where source code projects would build and launch the same configuration the editor is running, but Blueprint projects always launched using a Development configuration.

    * The default setting is now to launch with the same configuration as the editor, but any build configuration can be specified.

* New:Added a new editor view mode to colorize objects based on their LOD.

    * Enable from the view mode menu, or using the "viewmode lodcoloration" console command.

    * The colors to use for each LOD are configured in BaseEngine.ini under LOD Coloration Colors.

* New:Added ability to merge physics data (collision primitives) for Actor Merging tool.

* New:Added support to UnrealBuildTool to rebuild the makefile whenever the user changes a BuildConfiguration.xml file.

* New:Added template to the Plugin Creator that shows how to add an example Third Party library.

* New:Changed how actor spawning / duplication works in Simulate in Editor.

    * Now actors are always spawned non-permanently into the SIE world, and are destroyed upon exiting SIE.

    * This is more in line with other property changes to actors, which are restored to their original state when exiting SIE.

* New:'Device Output Log' window, currently implemented only for Android devices.Hidden under editor experimental settings.

* New:Editor Analytics now tracks abnormal termination and crash events in order to improve stability.

* New:Editor Analytics shutdown reporting improvements.

    * Discounts abnormal termination when a debugger is attached.

    * Improved locking of shared resources when running multiple instances to avoid missed reports.

* New:Improved Engine Analytics settings for Editor users and End-Users of games.

    * Editor users can enable/disable their own analytics that sends usage data for their Editor sessions in "Editor Preferences->Privacy->Usage Data->Options".

    * Editor users can set the default game analytics enabled state for the end-users of their game in "Project Settings->Engine->End-User Settings->Privacy".

    * End-user's setting is easy to expose to your game UI and should be presented as an option to send usage data to Epic Games.

* Both settings are for sending analytics to Epic Games.Developers are free to add their own analytics.

* New:Improving SuperSearch to allow you to choose Google (default) or Bing as the search engine to use.In China, Google is blocked, so Bing will allow those users to use the builtin search.

* New:The process of duplicating Brushes in the editor has now been hugely optimized.

    * In a test level with 227 brushes, these are now duplicated in around 2 seconds instead of nearly 4 minutes as before.

    * A dialog has been added to show progress on the operation if it takes more than a few seconds.

* Bugfix:Crash fix to project thumbnails using corrupted PNG images.Error handling is now fixed in PNG Image Wrapper to prevent this from crashing the editor.

* Bugfix:Crash fix to editor startup.Previous, it was crashing while loading tutorial images.

* Bugfix:Crash fix when putting Recast NavMesh into a World Outliner folder.

* Bugfix:Crash fix when setting a struct variable to Curve Table Row Handle.

* Bugfix:Crash fix when expanding the viewport toolbar while in 2x2 view.

* Bugfix:Crash fix when freelooking in editor viewports due to view rotation matrix calculation bug.

* Bugfix:Crash fix when importing invalid FBX files.

* Bugfix:Crash fix to renaming asset files outside of the editor while the editor is open.

* Bugfix:Brush extrusion now works correctly when a Brush actor is rotated.

* Bugfix:Duplicating an array of instanced objects in a Property Tree will correctly deep copy the objects instead of a shallow (referenced) copy.

* Bugfix:Clicking a Text property field corresponding to multiple properties will no longer cause the "Multiple Values" text to be committed to those properties.

* Bugfix:Fixed an issue where widget deltas were not being correctly calculated when the widget was positioned behind the camera.This had meant that Ctrl+Mouse Button dragging to move the currently selected actor(s) along one of their axes was not working if the widget was behind the camera.

* Bugfix:Fixed Search Box widgets in context menus (for example, the search box in the Blueprint Editor context menu) so that clicking the clear button doesn't also close the parent menu.

* Bugfix:Win DualShock plugin now links in Debug Editor mode.

* Bugfix:Merge Actors tool correctly replaces the source actors with a merged one.

* Bugfix:Mirrored blocking volumes now correctly generate collision geometry.

## Content Browser

* New:Content browser asset discovery optimized.(Contributed by slonopotamus, Pull Request #1516.)

* Bugfix:Newly added collections don’t lose their selection state once you name them.

* Can no longer duplicate maps via the content browser.

## Landscape

* New:Added a mirroring tool to allow you to mirror Landscape geometry and layers using a plane.

* Bugfix:Fixed a crash with landscape that has painted holes when using ES2 feature level preview or the Mobile Previewer.

* Bugfix:Fixed a race condition in material compilation that may have been causing a hard-to-reproduce crash during landscape painting.

* Bugfix:Fixed an issue where a None entry in the Landscape Grass Output node would cause landscape grass meshes to be assigned to the wrong layer.

* Bugfix:Fixed an issue where landscape grass with more than 5 layers only showed the last layer.

* Bugfix:Landscape "move to level" tool doesn’t get stuck when moving components, including after the user releases the mouse.

* Bugfix:Undoing deleted landscape components no longer leaves them uneditable.

* Bugfix:Landscape grass no longer leaves "Lighting needs to be rebuilt" warning after a static lighting build.

* Landscape Grass no longer wastes memory storing empty grass map data for areas of the landscape which don't have any grass instances.

* Removed the Layer Debug viewport view mode menu item when not in landscape edit mode.

    * This view mode it doesn't make sense without the layer checkboxes.

    * Enabling it outside landscape edit mode would previously cause the landscape to disappear.

## Material Editor

* Bugfix:Duplicate entries no longer appear in the results of searches in the Material Editor context menu.

## Matinee

* Bugfix:Editor no longer hangs when pressing "F" to frame an object while Matinee has a locked actor defined.

* Audio tracks will now start playing from the correct position when scrubbing in matinee.

## Persona:

* Bugfix:Crash fix related to state machines, states, and transitions when undoing and redoing deletions and creations.

## PhAT:

* New:Added Field of View slider to PhAT editor view.

## Source Control:

* Added support for the 64-bit git executable to the Git Source Control plugin on windows.(Contributed by SRombauts, Pull Request #1538.)

## World Browser:

* Bugfix:World composition no longer allows layers to be created with non-unique names.

* Bugfix:Handled a potential issue with Hot Reload while World Composition window is open.

## Foliage:

* New:Visibility for each foliage mesh type can be switched on/off per Editor viewport.

* Bugfix:Crash fix when assigning a new Static Mesh to Foliage that is painted across multiple levels.

* Bugfix:Foliage selection highlight no longer remains after an undo operation.

* Added a "Use as Occluder" checkbox to the foliage tool to allow foliage to correctly receive D-Buffer decals.

## Cooker:

* New:Stopped some editor debug content which wasn't required at run time from being cooked.

* Bugfix:Fixed an issue with modified content not getting deployed to the devkit when the project folder name and project name don't match.

* Bugfix:Added missing parameters like "cookall" to File -> Cook editor feature.

* Cooking warning related to Persona tutorial will no longer appear.

* Disabled some slow editor cooking stats.

* StableSort is used to sort .pak files in order to preserve previous sorting by file.(Contributed by Shaijan, Pull Request #1377.)

## Gameplay Framework

* New:Allow binding of the Section (§) key.

* New:Blueprints can now draw circles via the Debug Draw Circle node.

* Changed UTextRenderComponent to respond to the culture being changed, rather than constantly tick.

* Child Actors will no longer become disconnected from their parent when using SetClass.

* Bugfix:Crash fix when detaching child components if an On Attachment Change implementation also detaches a sibling component.

* Bugfix:Fixed a potential infinite loop case in post-transform navmesh updates that could lead to a crash.

## Content Examples

* Removed the Blur G-Buffer stand in the Post Processing content examples map, as that feature has been removed for some time.

## Localization

* Bugfix:Crash fix on Windows (Chinese version) when changing editor language.

## Networking

* New:The replay streaming system can now scrub to a new time while playback is paused.Try it out in ShooterGame!

* Bugfix:The output log no longer spams "no owning connection" warnings when a client uses the "ToggleDebugCamera" console command.

## Other

* New:Added in support for haptic feedback effects, which use curves of amplitude and frequency to define the response players feel in their motion controllers.

* New:Updated Oculus Mobile SDK (GearVR) to version 0.6.2.

* New:Updated Oculus SDK to 0.8.

* Bugfix:Fixed improper reporting of Is HMD Enabled.

## Physics

* Bugfix:Fixed precision issues with physics handles where rotation had to be fairly large to update target on PhysX.

* When entering "show collision" from the console, builder brushes are no longer rendered as they are now an internal detail and not intended to be viewed.

## Platforms

* New:Default movie player now has an optional bWaitForManualStop flag to prevent continuing until movie is explicitly stopped.

* New:Support for PNG and JPG splash screen images added on Linux, Mac, Windows.(Contributed by labidus, Pull Request #1444, and x414e54, Pull Request #1399.)

* Bugfix:Android build and iOS build and orientation setting overrides now save to .ini properly.

* Bugfix:Pinch events now trigger correctly every time.

* The correct texture LOD bias is now used when cooking.

* Added Touch Event Locations to pair with touch events since we want the actual location for that event.After a release, the finger ID may be reused for another touch far from the location of the release so the wrong location would be sent for all the events.

* Fixed editor primitives (e.g. debug wireframes) rendering flipped upside down on OpenGL ES2.

## Android

* New:Support for an optional launch screen for Android projects. 

    * A "Show launch image" checkbox in the Android Platform section of the Project Settings enables this feature.Examples for portrait and landscape may be found in Engine/Build/Android/Java/res/drawable as PNG files.  

    * Click on the "..." link next to the image in the Launch Images section of the Android Platform section to bring up a browser to copy your own image into the project.  

    * If the launch image is enabled, either or both launch images selected for the project will be included depending on the orientation setting in the project.

* New:Added new targetSdkVersion setting for AndroidManifest.xml to allow overriding default minSdkVersion value.

* Bugfix:Fixed backslashes in path for Android plugin XML on Mac.

* New:Device Profile detection mechanism has been changed so that new Android devices can be detected and assigned a Device Profile using user-specified rules.

    * Instead of being hardcoded in C++, the matching rules are now specified in BaseDeviceProfiles.ini in the [/Script/AndroidDeviceProfileSelector.AndroidDeviceProfileMatchingRules] section.

* New:First implementation of Slate Web Browser for Android.

* New:It is now possible to package for a selected set of Android texture formats rather than just all or one.

    * Check the checkboxes for the formats you wish to cook for in the Platforms, Android project settings tab.

    * Select the Android_Multi cook variant when packaging.

* New:Multiple AdMob Ids may now be entered and Show Ad Banner now takes an index.New Get Ad ID Count BP node returns the array size.

* New: proguard-project.txt is now generated with additions from an optional ProguardAdditions.txt file in the project's Build/Android directory.

* New:We have reduced the number of Android OpenGL ES shaders that we cook, so your app should be slightly smaller.

    * We no longer cook separate 32-bit and 64-bit per pixel HDR shaders because the setting is chosen on the device at launch time.

* Bugfix:Galaxy S4 device variants with PowerVR GPUs (eg GT-I9500) no longer show a black scene when Mobile HDR is enabled.

* Bugfix:Crash fix on accepting editbox text in some potential cases.

* Bugfix:The Device Profiles editor no longer creates blank device profiles for the various Android texture format variants.

* Bugfix:Global (activity) audio pause handles recovery correctly in the case that the game was already paused.

* Bugfix:Android reliably logs crash callstacks.

* Fixed deploy to Android devices connected over Wi-Fi to ADB.

* The device model number and make, Android version, GPU family and/or OpenGL ES version can be evaluated using comparisons or regular expressions to select a Device Profile.The Device Profile can then set console variables to optimize the performance of Unreal Engine on the detected device.

* The default settings detect common devices and assign them a profile based on Android_High, Android_Medium or Android_Low.

* Android now reliably logs crash callstacks.

* Android project Build/Android/src cleanup now only deletes the OBB downloader's generated java files.

* Keystore passwords are stripped from DefaultEngine.ini in pak files.

* Window resize is only triggered if orientation changes on APP_CMD_CONFIG_CHANGED event.

* Replaced default downloader background image (smaller PNG with correct aspect ratio).

* Special characters < > & ' " in Android application display name requiring escaping are now automatically handled.

* Updated minimum SDK option tooltip to indicate 9 is the lowest value supported.

* Updated tooltip for Android Package Name to indicate that it must have, at minimum, two sections separated by periods.

* Fixed fullscreen immersive with launch screen enabled

## iOS

* New:Added Device Profiles for new iOS devices. (iPhone 6S, iPad Mini 4, etc).

* Worked around an issue with iPhone 6 devices when trying to link a shader at runtime.This would cause an internal compiler error.We now will fall back to using OpenGL in this case.

* New:Added support for adding additional linker flags for iOS builds in the iOS project settings.(Contributed by derekvanvliet, Pull Request #1282.)

* New:Added support for controlling the idle timeout via the Control Screen Saver node for iOS.

* New:Added support for controlling iPhone vibration for iOS.

* New:Fix for UI User Notification Settings usage on pre-iOS 8 SDKs.

* New:General improvements to the AV Foundation Media framework.

    * Corrected issue when playing a movie file the second time.

    * Looping is supported.

* Bugfix:Crash fix to game startup when using MSAA with Metal on iOS devices.

* Bugfix:Crash fix when releasing uniform buffers encountered after multiple level loads.

* Bugfix:Fixed occasional hang in UnrealPak when utilizing pak files from File|Package in the editor on Mac.

* Bugfix:Fix for occasional loss of audio when going to the lock screen, pressing the home button, or utilizing the slide out.

* Bugfix:Fixed an issue with 3rd party framework access when building iOS games on a remote build server.(Contributed by judgeaxl, Pull Request #1125.)

* Bugfix:Static libraries are now being pushed to the remote server when compiling iOS from PC.(Contributed by pluranium, Pull Request #1483.)

* Bugfix:Fixed invalid permissions for files copied as part of a remote iOS build.(Contributed by TheSoeldner, Pull Request #1578.)

    * Fixed a compilation error when building for iOS 7 and above.(Contributed by BorMor, Pull Request #1547.)

* Bugfix:IOS now properly links against the correct stdlib.(Contributed by ssoria, Pull Request #1568.)

* Improved compatibility with Bundle Names which include special characters.

* Improved compatibility with iOS App Store by removing Custom Resource Rules and enabling Full Screen for games.

* Temporarily disabled the launch to device for iOS from Mac due to an issued discovered with the latest instruments from Xcode 7.

* Worked around an issue with Metal on A7 devices with iOS 9 which would cause a black screen, but no crash.We now will fall back to using OpenGL in this case.

## Linux

* New:Added Tanglu OS to install script.(Contributed by cpyarger, Pull Request #1577.)

* New:All input will be ungrabbed before breaking into debugger on Linux.

* New:Implemented Linux device profile selector.

* New:Implemented memory prefetch functions in platform abstraction layer for Linux.

* New:Linux: ensure() callstacks will now be symbolicated, symbolication has been sped up.(Contributed by bozaro, Pull Request #1583.)

* New:LinuxNativeDialogs third party library is no longer built during the setup on non-Ubuntu distributions (it is no longer used).

* Bugfix:Crash fix related to invalid windows.(Contributed by andreasschultes, Pull Request #1589.)

* Bugfix:Corrected calculation of number of physical cores on Linux.

* Bugfix:Corrected calculation of window coordinates when processing event queue.(Contributed by ExpiredPopsicle, Pull Request #1466.)

* Bugfix:Fixed custom cursors on Linux.(Contributed by overlawled, Pull Request #1582.)

* Bugfix:Fixed index out of range error in Slate File Dialogs.(Contributed by chaiyuntian, Pull Request #1548.)

* Bugfix:Fixed modal dialog on Gnome.(Contributed by yaakuro, Pull Request #1388.)

* Bugfix:Corrected reporting of platform memory stats (process and overall machine) on Linux.

* Command line switch "-usehyperthreading" is now respected on Linux for consistency with other platforms.(Contributed by slonopotamus, Pull Request #1594.)

## Mac

* New:Added support for automated and unattended reporting modes to Crash Report Client on Mac OS X.

    * Ensures are now reported as well as crashes.

    * Crash report files with spaces in their paths now work correctly.

* New:Added support for p4 command line tool installed in /usr/local/bin.

* New:Enabled subsurface scattering on OpenGL.

* Bugfix:Crash fix at exit that if GLog was initialized before the game thread was created.

* Bugfix:Crash fix on clicking a dropdown located in an inactive window in apps using the standalone OpenGL renderer.

* Bugfix:Crash fix on Mac OS X Yosemite (10.10) and earlier related to debug symbols (.dSYM) being wrongly treated as dSYM bundles by the OS when next to the associated binary.Moved dSYM files out of application bundles.

* Bugfix:Crash Report Client on Mac OS X can now reopen the correct project when 'Send & Restart' is used.

* Bugfix:Fixed handling of mouse cursor position in non-native fullscreen modes on secondary screens.

* Bugfix:Stopped Mac OS X compiler stripping necessary allocator overrides and causing memory errors.

* Bugfix:Mac icon preview in the project properties no longer displays swapped colors.

* Bugfix:Fixed splash screen rendering for images with DPI different than 72.

* Bugfix:Fixed strange reflections in templates on Mac OS X by re-enabling seamless cube map support.

* Bugfix:Temporal AA rendering on Mac OS X correctly handles NaN values.Disabled shader code that relies on features not yet available on Mac OS X.

* Bugfix:Fixed window activation when clicking on a draggable widget of an inactive editor.

* Bugfix:Fixed window reordering issues on app activation.

* Allowed windows to be larger than a single monitor on Mac OS X so that taking screenshots of projects at iOS Retina resolutions works.

* Android device detection in editor keeps the last ANDROID_HOME setting in .bash_profile instead of the first.

* Re-enabled seamless cube-map support in Mac OpenGL to stop strange square reflections appearing in template projects.

## Playstation 4

* New:Added ability to use unsafe command buffers to reduce CPU overhead.Enabled in PS4 projects settings.Saves approx 0.4ms of CPU on draw thread in ShooterGame when running single threaded.

* New:PAK files are now padded and compressed in PKGs to reduce patch sizes for titles built with 4.10 and later.

* New:Updated to SDK 3.000.

* New:Vertex/Index buffers now always use GPU memory unless they specifically require CPU readback.

* Bugfix:Crash fix in the PS4 GPU allocator when a chunk is destroyed.

* Bugfix:Procedural mesh components now draw on PS4.

* Bugfix:Touch pad now works when Morpheus is enabled.

* Bugfix:Fixed constant reverb on all sounds.

* Bugfix:DS4 Touch and Mouse are now initialized properly.

* Bugfix:Touch events hit widgets correctly when running on Morpheus.

* Bugfix:Fixed PS4 C# projects getting added to the UE4 Solution when the PS4 SDK is not installed.

* Bugfix:Fixed directory iteration not working correctly with certain deep folder layouts.Fixes issues with missing levels when using world composition.

* Reduced the size of command buffer blocks to 64k.This reduces the memory overhead of parallel rendering and reduces pressure on the Onion GPU memory pool.

* Moved Vertex and Index buffers to allocate from Garlic memory unless they require CPU readback.This reduces pressure on the small GPU Onion memory, and is a small GPU perf boost.

* Fixed a packaging bug what would cause packaging to fail if a 50GB bluray was required, but only a 25GB bluray was specified.

## Xbox One

* New:Distance field ambient occlusion and shadowing are now enabled on Xbox One.

* New:The default Xbox One XDK has been updated to August 2015.

* New:Various rendering optimizations have been made in preparation for a future switch to the fast semantics driver.

    * Dynamic vertex and index buffers are now handled manually, saving time spent in the driver and avoiding syncing with the GPU.

    * Swapchain handling updated to latest APIs.

    * Removed some old verification code that won't work with fast semantics.

    * Shader compilation options tweaked for slightly better GPU performance.

* Memory corruption is prevented in the case that an invalid controller ID is passed into the force feedback channel functions.

## HTML5

* Bugfix:Fixed issue when copying the HTML5 helper command template due to read only file attributes.

* Bugfix:Numerous path slash issues for HTML5 packaging on Mac have been fixed.

* Bugfix:String Builder now outputs "\n" instead of system dependent line endings.

## Windows

* Memory corruption is prevented in the case that an invalid controller ID is passed into the force feedback channel functions.

## Programming

* Modified DDS cubemap loading to prevent an array overflow.(Contributed by ExpiredPopsicle, Pull Request #1315.)

## Rendering

* New:Render Target 2D can now automatically generate all mipmaps.(Contributed by CoherentUE4, Pull Request #189.)

* New:Show a warning message when going over the texture streaming budget.

* Bugfix:Fixed a case where material billboard components were culled incorrectly.

* Bugfix:Fixed an issue when rendering translucent materials in the HUD using Draw Material.

* Bugfix:Cloth and skeletal meshes no longer flicker when almost out of view.

* Bugfix:Fixed particle systems that have dirty distributions saved to disk.

* Bugfix:Fixed dithered LOD transitions on HISMC meshes with materials without dithered LOD transitions.

* Bugfix:Flickering due to incorrect LOD rendering no longer occurs when adjusting the transform of a Hierarchical Instanced Static Mesh instance at runtime.

* Bugfix:Flickering due to occlusion queries no longer occurs when Hierarchical Instanced Static Mesh Components are added or updated at runtime.

* Bugfix:Light Accumulation target are now resolved before being used in non-tiled reflections.

* Bugfix:"Use as Occluder" checkbox now functions correctly for Hierarchical Instanced Static Mesh Components.

* Bugfix:Fixed procedural mesh components not drawing on certain platforms due to the Max Vertex Index not getting set correctly.

* Bugfix:Motion blur on cloth fixed.(Contributed by braindx, Pull Request #123.)

* Bugfix:Fixed a case where an unbound depth target was causing artifacts.

## Lighting

* Bugfix:Crash fix when using Light Propagation Volumes with translucency.

* Bugfix:Fixed a case where Lightmass could hang indefinitely.

* Bugfix:Fixed objects being culled by the near plane of the shadow frustum with RTDF shadows: shadow casters behind the camera no longer pop out.

* Bugfix:Subsurface Profile now displays the correct colors.

* Bugfix:Fixed skylights on translucency in projects with static lighting disabled.

## Postprocessing

* New:Subsurface scattering is enabled on OpenGL platforms.

* Fixed a performance regression in the Screen Space Ambient Occlusion.

## Optimizations

* New:Added Screen Space Ambient Occlusion scalability.

## Mobile Rendering

* New:Refraction on mobile, enabled by default for high-end devices.

* Bugfix:Fixed incorrect reflection transforms when using unlit materials with forward shading.

* Bugfix:Fixed several issues with scene capture rendering.

    * Final color captures now work with forward renderer.

    * Crash fix when using captures when mobile HDR is not enabled.

    * Fixed possible bug in post processing that could incorrectly resolve an image when a sub rect of the scene render target was used.

* Bugfix:Crash fix when using Depth of Field in iOS platform.

* Bugfix:Handled precision issues with Object Scale material function on some Android devices.

* Bugfix:Crash and rendering issues on Nexus 5 with Android 4.4.4 when map has decals.

## UI

* Bugfix:Crash fix during editing arrays in the Widget Blueprint property editor.

* Bugfix:Fix animation for byte and enum properties for values greater than 1.

## Slate

* New:Slate Windows whose dimensions are bigger than the work area are now clamped in size so that they are not clipped.

* Bugfix:Crash fix when deleting a Slate Image Run that isn't set to use a dynamic brush.

* Bugfix:Set Button Style (on Buttons) now updates hovered and pressed sounds.These sounds can be dynamically changed from a Blueprint by switching the button's style.

* Bugfix:Fixed a rendering issue with submenu button entries which was causing their text to turn black when opening their submenu.

* Bugfix:Resetting a slate brush image size will now correctly reset to the image size and not to the default slate size (32x32).

* Bugfix:Text Box is now updated when Set Text has same text, but with case changed.

## UMG

* Bugfix:Crash fix when dragging widgets out of Switchers in the UMG designer.

    * Fixed unsafe active widget index in Widget Switcher that could act as out-of-bounds index into child array.

* Bugfix:Crash fix on adding a UMG widget to the viewport twice.

* Bugfix:Crash fix with Scroll Widget Into View.Providing a null value will no longer cause a crash.

* Bugfix:UMG editor no longer allows invalid object names when renaming widgets.

    * Having a period in the name of a widget would cause the editor to crash after copying and pasting.

* Bugfix:Fixed an issue with UI materials where they were not gamma corrected and rendered darker on mobile devices than on PC.

* Bugfix:Fixed Blueprint compilation issue in which UMG widgets containing an instance of the widget being edited would fail to auto-compile.

* Bugfix:Slider value has been clamped to [0, 1] to prevent the handle from sliding off the bar.

* Bugfix:The Left menu anchor position now offsets by the correct amount.

    * Slider Locked/Handle Indent properties are now respected.

    * The Widget Component will now correctly hit test once again.

* Bugfix:Fixed several Slate controls, such as Slider and Checkbox, on touch devices.They once again respond to touch events.

# Programming Release Notes

## Audio

* Optimized FAudioDevice::FindActiveSound by reducing weak object pointer comparisons.

## Animation

* New:Added basic support for MasterPoseComponent to UPoseableMeshComponent.

* Bugfix:Fixed over-counting memory issues in exclusive GetResourceSize reporting in both UAnimSequence and USkeletalMesh.

## Navigation

* ARecastNavMesh::OnNavMeshGenerationFinished has been made virtual so that game-specific ARecastNavMesh-derived classes can easily react to that event.

* Cached World pointer has been removed from NavigationData class since it had the potential to cause Garbage Collection issues.

* Navigation Data instances get cleaned up in EndPlay now, rather than waiting until Destroyed.

## Core

* New:Added custom deleter support to TSharedPtr.

* New:Added support for nested serializable objects during conversion to JSON.

* New:Added FVector::DistSquaredXY helper function.(Contributed by EverNewJoy, Pull Request #1365.)

* New:FCachedReadPlatformFile can now be disabled to decrease memory usage at the expense of speed.

* Disabled Hot-Reload functionality in game builds.

* Fix multiline comments parsing in UHT, where end of comment was treated as start of one, e.g. /*/ Comment /*/

* Fixed a lot of Hot-Reload errors.

* Fixed return value of HexToBytes.

* ModuleRelativePath Metadata will now be properly generated for structures in UnrealHeaderTool.

* Fix "error: '&' within '|'" in EditorPerformanceTests.cpp when using clang-3.5.2.(Contributed by slonopotamus, Pull Request #1430.)

* Fixed LogCompile typo:Tabify time was was...(Contributed by MrMormon, Pull Request #1460.)

* Removed unnecessary memory allocations from TMultiMap::MultiFind.

* UPackage::PackageFlags made private.

* Classes referenced by ConstructorHelpers::FClassFinder will no longer be garbage collected when unreferenced.

* Fixed a rare crash when streaming packages and loading objects not asynchronously in one of the streamed object's PostLoad functions.

## Editor and Tools

* New:Slow Task dialogs can now be set to automatically open only after a certain amount of time has passed.

    * This can be useful if it's not necessarily known in advance how long a task will take, but where opening the dialog for only a second or so would be disruptive.

* Fixed a bug that was causing TAssetPtrs to point to the wrong objects during play-in-editor sessions.

## Cooker

* The BuildPatchServices plugin now compiles correctly on non desktop platforms.

## Gameplay Framework

* New:AAmbientSound can now be extended in game modules.

* New:ASceneCaptureCube can now be subclassed by game modules.

* Bugfix:Crash fixed in CheckStillInWorld() after Actor has been destroyed or is not in the world.

* Bugfix:Crash fix in RepairWorldSettings() when the UWorldSettings subclass originally saved with the map no longer exists.

* Deprecated unused USkinnedMeshComponent::bCharDistancetDistanceFactor.

* Fixed crash when PlayerController is given a LocalPlayer in commandlet mode.

* Updated async trace handling to accept trace requests more widely.Avoids some asserts when poorly-timed requests would come in.

* Using the assignment operator for FActorSpawnParameters will no longer cause a deprecation warning.

* USceneCaptureComponentCube::UpdateContent is now callable outside of Engine module.

## Networking

* Bugfix:Corrected receive buffer size in UDP Socket Receiver.

* Fixed an issue that could cause the value of AWorldSettings::WorldGravityZ not to be applied on clients after it changed on the server.

## Online

* New:FWebImage class now detects image format based on the file header instead of relying on http mime headers being set up correctly.

## Windows

* New:FCachedReadPlatformFile is off by default on Windows since WindowsPlatformFile already caches the reads.

## Mac

* Improved error handling in Mac media player.

## Android

* New:A new Android plugin system is included in 4.10 and the GearVR plugin now uses it.Changes to the generated AndroidManifest.xml, proguard-project.xt, and GameActivity.java may be made during packaging along with staging files by adding an AndroidPlugin property in their build.cs to reference an XML file containing commands; see GearVR.build.cs and GearVR_APL.xml for an example.AndroidPluginLanguage.cs documents the commands available.

* Fixed Resolution cache RequestedContentScaleFactor log message.

* Fixed compile errors in GearVR plugin for non ARMv7 targets.

* Changed the way AAPT is located to check PgkRevision instead of always using first subdirectory of build-tools in Android SDK.

* CompileOpenGLShader for Android now only checks the compile result immediately during initial shader tests.

* Default for Android SDKAPILevel is now "matchndk" instead of “latest”.

* Fixed issue with bool.ToString() on Mono returning "True" or "False" instead of "true" or "false" in Android plugin language.

* Fixed missing #include needed for non-unity Android builds.

## PlayStation 4

* Fixed Visual Studio debugger .NatVis issues.TSparseArray, TBitSet, TMap, and TSet can now handle indices > 31 and invalid values now display "Invalid" correctly.

## Rendering

* Bugfix:Crash fix in FDynamicSkelMeshObjectDataGPUSkin when using MasterPoseComponent on something other than USkeletalMeshComponent.

* Improved clearing render targets on D3D12.(Contributed by JeffRous, Pull Request #1621.)

* Fixed an issue on D3D12 where indirect arguments had the wrong offset.

* Fixes for D3D12 resource binding on Tier 1 hardware.

# Upgrade Notes

## C++ API Changes

* Multiple AdMob IDs may now be entered and Show Ad Banner now takes an index.New Get Ad ID Count Blueprint node returns the array size.ShowAdBanner() method in advertising provider now takes an int32 Ad ID Index.

* Fixed return value of the HexToBytes function.Code which uses the return value of HexToBytes should be aware that the return value is now 1 more than before.

* UPackage::PackageFlags made private.UPackage::PackageFlags has been deprecated and should no longer be set or read directly.Use Get/Set/Clear/HasAny/HasAll PackageFlags instead.

* "Reset to default" button on the Image Size property of a brush now resets to the size of the brush's texture, if one is set.IDetailPropertyRow::OverrideResetToDefault() parameters have changed to take a single parameter of type FResetToDefaultOverride that defines the override behavior.

## Blueprints

* New placements of a GetClassDefaults node in a Blueprint function graph will no longer expose array properties that contain object references.This is currently needed in order to prevent mutation of a default object that belongs to an owning class.

    * Existing placements will preserve any exposed property whose default value is an array of object references, but the Blueprint compiler will now emit an "unsafe connection" warning in this case, as it's a potential risk, as we don't currently support read-only object references in a Blueprint.

## Xbox One

* The default Xbox One XDK has been updated to August 2015.A minimum XDK version of August 2015 is required to build using the Visual Studio 2015 XDK version on Xbox One.

## Playstation 4

* PS4 updated to SDK 3.000.SDK 3.000 is now required to compile on PS4.

* If you are using Morpheus, you must edit your param.sfo and enable it in the settings.

## Oculus

* Users should update their Oculus runtimes to 0.8, provided on the Oculus website.

