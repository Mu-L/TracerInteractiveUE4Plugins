INTSourceChangelist:3002838
Availability:Public
Title:アンリアル エンジン 4.12 リリースノート
Crumbs:%ROOT%, Engine
Description:
order:12

アンリアル エンジン 4.12 リリース ノート

今回のリリースでは、アンリアル エンジン 4 の数百のアップデートが含まれており、そのうちの 106 の改善点は GitHub のアンリアル エンジンのデベロッパーのコミュニティから寄せられたものです。アンリアル エンジン 4.12 に貢献をいただいた以下の皆様に謝意を表します (以下、敬称略)。

aninda, amcofi, Artem V. Navrotskiy (bozaro), Beau Hardy (psychogony), Black Phoenix (PhoenixBlack), Brent Scriver (FineRedMist), Cedric Neukirchen (eXifreXi), Céleste (CelPlays), chendi (cdsama), Courtland Idstrom (Frugality), David Palacios (Hevedy), DavidNSllva, Erik (erikbye), esdasuka, Frank Force (KilledByAPixel), Graham Hughes (graehu), Grimmick, Hannah Gamiel (hgamiel), Hongjun Han (h27han), Ian Fox (MaideCa), jamendxman3, James Baxter (TheJamsh), Jarl Gullberg (Nihlus), Jason (Abatron), Jeremy (JeroMiya), Jorge Martins (SNikon), Kartik (i64), Kim Sang Kyun (skkim-ginno), Konstantin Zaitcev (kosz78), Leon Rosengarten (lion03), M3d10n, MacAndor, Maik Klein (MaikKlein), Manny (Manny-MADE), Marat Radchenko (slonopotamus), Mathew Wadstein (MWadstein), Lucyberad, Matthias Hölzl (hoelzl), MAVRIN (artemavrin), Maxim Pestun (maxpestun), mbehensky, meChiel, mfortin-bhvr, mipg, Narendra Umate (ardneran), Nikola Dimitroff (nikoladimitroff), Pablo Zurita (pzurita), phoboz-net, Pierre-Luc Loyer (plloyer), Piotr Bąk (Pierdek), projectgheist, Rama (EverNewJoy), Robert Chubb (SaxonRah), Robert Khalikov (nbjk667), Robert Segal (robertfsegal), RobertTroughton, Ryan Nielson (RyanNielson), Samuel Groß (saelo), Sasha Petrovich (xulture), Sébastien Rombauts (SRombauts), Stephen Whittle (stephenwhittle), Taces, Temaran, Tim Lindeberg (timlindeberg), Tobias Mollstam (mollstam), wdhwg001, Will Stahl (merlin91), WymzeeLabs, Yohann Martel (ymartel06), Zelex.

# 新機能

アンリアル エンジン 4.12 から **シーケンサー** が利用できるようになりました！完全にノンリニアな **リアルタイムのシネマティックス アニメーション ツール** で、マチネの後継です。自動キーフレーム、シネマティックス カメラ、ライブ ゲームプレイ レコーディングなど、パワフルな機能がたくさん備わっています。シーケンサーは好きなだけアセットに自由に組み込むことができるので、大規模アニメーション プロジェクトでの連携を容易にします。また、シーケンサーを開くと既存のマチネ アニメーションのインポートを促しますが、マチネも引き続きサポートされます。

今回のリリースには ** VR エディタ** のプレビューが含まれています。モーション コントローラを使って VR でワールドを自由にナビゲートできる、一歩先行く機能です。VR に没入しながら、アクタを選択、移動し、新規オブジェクトを配置し、エディタの UI も使用することができます。この機能を使用するには、HTC Vive もしくは Oculus Touch 開発ハードウェアが必要です。[Editor Preferences (エディタ環境設定)] の [Experimental (実験的)] セクションの [Enable VR Editing (VR 編集を有効にする)] をオンにすれば、この機能を試すことができます。

Windows で C++ を使用する場合、**アンリアル エンジンに Visual Studio 2015 が必要になります** のでご注意ください。Visual Studio 2015 は、(無料の) Express と Community 版を含むすべてのバージョンがサポートされます。ご都合に合わせてアップグレードしてください。

もちろん、どのリリースでも、レンダリング、VR、アニメーション、オーディオ、モバイル デバイスの新機能や、パフォーマンスの改善、報告されたバグの修正を全力で行っています。アンリアル エンジン 4.12 をぜひご堪能ください！

# 主要機能 

## 新規：シーケンサー

シーケンサーは非線形エディタで 3d アニメーション編集機能があり、インゲームのシネマティックスや映画、テレビ、プレビズなどのショットのシーケンスを制作することができるます。

![image alt text](image_0.png)(w:929 h:809 convert:false)

### 非線形ワークフロー

シーケンサーの非線形ワークフローにより、ショットを創造的かつ反復して構成および編集ができるようになります。ライトの色の変更やフォグ エレメントの追加など、特定のショットを簡単に変更したり、これまで撮ったショットをロールバックしてシーケンスを試しにまとめてみることもできます。また、複数名のアーティストが複数のショットに対して同時に作業ができるように作られています。ランチャーの [Learn] タブの [Subway Sequencer Project] で実際のシーケンサーの動きを見ることができます。

![image alt text](image_1.gif)(w:929 h:686 convert:false)

* 従来の非線形編集パッケージのようなショットに再調整する

* 何通りかショットを撮って、簡単にロールバックできる

* ショットごとに微調整して、そのショット固有のアクタをスポーンする

* 連携しやすい構成

### 直観的なユーザー インターフェース

ユーザー インターフェースは、マチネの良い点、および従来の 3D ソフトウェア パッケージからヒントを得てデザインしました。明確で簡潔にアニメーション データを表示、編集、整理できる作りになっています。3D コンテンツ クリエーターにとっては、直観的で見慣れたインターフェースです。 ![image alt text](image_2.png)(w:929 h:542 convert:false).

* アクタのタイプごとに、トラックを自動生成

* 標準的なキーボード ショートカット

* 自動キーフレーム

* トラックの埋め込み、キー編集、ウィジェットの作成

* トラック カラーはユーザーによる定義が可能

* キーフレームの形状と色は補間ビヘイビアが定義

* 整理用のフォルダとラベル

### シネマティックス カメラとシネマティックス ビューポート

カメラ リグ アクタと結びついたこのシネマティックス カメラを使えば、初心者だけでなく映画製作者もリアルなカメラ ショットを簡単に作成することができます。ストリームライン化されたビューポートには、映画制作のダイアリー用に連続ショットの表示ができます。 

![image alt text](image_3.png)(w:929 h:529 convert:false)

* シネマティックス カメラ アクタには現実世界のカメラを模倣するためのプロパティが付いています。

    * レンズとフィルムバック設定はカスタマイズ可能です。

    * 焦点距離

    * Look-at トラッキング

* Camera Rig Crane と Camera Rig Rail アクタ

* Cinematic Viewport (シネマティックス ビューポート)

    * タイムラインとトランスポート制御を埋め込み

    * ショットのインとアウトのカットポイントをフレーム番号で表示

    * オーバーレイとフレーム ヘルパで合成

### シーケンスの記録

シーケンスを記録すると、ゲームプレイを記録して、その記録したエレメントをショットにすぐに配置することができます。前の記録の再生中でも記録することができます。

![image alt text](image_4.gif)(w:929 h:697 convert:false)

* スケルタル アニメーション、トランスフォーム、イベント、オーディオ トラックでのゲームプレイの録画

* 記録再編集用のトラックの自動生成

シーケンサーの詳細はこちらのリンクを参照してください。

* [シーケンサー オンライン マニュアル](https://docs.unrealengine.com/latest/INT/Engine/Sequencer/index.html)

* [Twitch でシーケンサーを知ろう](https://www.youtube.com/watch?v=Rr6qwxJxqg0)

* [Twtch でシーケンサを使ってみよう](https://www.youtube.com/watch?v=CGo-sK-wvzw)

## 新規：アンリアル VR エディタ (プレビュー)

新しい [VR エディタ] モードは、仮想現実に没入しながら、レベルの遷移と編集を可能にします。オブジェクトを選択して移動したり、「ワールド」そのものをつかんで、レベル全体を自由にドラッグ、回転、スケールすることができます。VR のモーション コントロールを使うと、オブジェクトと視点に対して、1 対 1 の制御ができます。

![image alt text](image_5.png)(w:929 h:610 convert:false)

VR 内にいたままで、コンテンツ ブラウザなど馴染みのエディタ機能にアクセスしたり、トランスフォーム ギズモを使ってオブジェクトを正確に配置することができます。スナップ ツールを使うと、ぴったりそろった配置がしやすくなります。

![image alt text](image_6.gif)(w:652 h:473 convert:false)

ワールドを両手でつかんで手前に引くと、ワールドがかなり拡大されます。こうすることでレベル内の細かい部分の点検と編集がしやすくなります。

![image alt text](image_7.gif)(w:652 h:473 convert:false)

この機能は早期プレビューなので、[Editor Preferences (エディタ環境設定)] の [Experimental/VR (体験/VR)] セクション の [Enable VR Editing (VR 編集を有効にする)] をオンにする必要があります。その後で、[VR Mode] ツールバー ボタンが表示されるので、好きな時にすぐに VR へ切り替えることができます。好きなプロジェクトに VR エディタを使うことができます。シンプルなプレイグラウンドは新しい VR-Basic マップで見ることできます ([File] -> [New option]) 。

重要:VR Editor モードでは、モーション コントローラがワールドおよび UI とインタラクトすることが要求されるので、Touch コントローラ開発ハードウェアが装備された HTC vive か Oculus Rift のいずれかが必要になります。

この機能は、まだ体験版ですので、今後さらに改善されます。ぜひお試しください。フィードバックをお待ちしています！  

アンリアルの VR エディタの詳細はこちらのリンクを参照してください。

* [アンリアル VR エディタ オンライン マニュアル](http://docs.unrealengine.com/latest/INT/Engine/Editor/VR/index.html)

* [公式 VR エディタ フォーラム メガスレッド](https://forums.unrealengine.com/showthread.php?99776-Unreal-Editor-in-VR-Official-megathread) (post your feedback here!)

* [Tim Sweeney の VR ブログから VR のビルドについて](https://www.unrealengine.com/blog/build-for-vr-in-vr)

* [Twitch のライブ VR エディタ マニュアル](https://www.youtube.com/watch?v=z74B54d4AIo)

* [VR エディタに関する動画](https://www.youtube.com/watch?v=JKO9fEjNiio)

* [GitHub VR エディタ開発ブランチ](https://github.com/EpicGames/UnrealEngine/tree/dev-vr-editor) (must be logged in to GitHub with your account linked)

## 新規：Daydream VR をサポート

![image alt text](image_8.png)(w:400 h:266 convert:false)

4.12 は Google の新しいプラットフォーム Daydream をサポートします！Daydream は新しいモバイル VR プラットフォームです。質の高い VR 体験を Daydream 認定のスマートフォンにもたらします。UE4 は、付属品のモーション コントローラを含めたプラットフォーム全体をサポートします。

Daydream デベロッパー キットがなくても、使用できます！同じプラグインを使えば、Google Cardboard apps を作成できます。Daycream スマートフォンを必要とする機能は、他の Android デバイス上で単にオフにされます。

サポートを有効にするには、エディタの Plugins ウィンドウの [Google VR] と [Google VR Controller] を有効にします。

## 新規：平面反射

リアルタイムで平面反射がサポートされます。  

![image alt text](image_9.png)(w:929 h:485 convert:false)

反射の方向から再びシーンをレンダリングするため、負荷がとても大きい機能です。ただし、反射の品質はスクリーン空間の反射に比べてかなり高いです。

![image alt text](image_10.png)(w:540 h:384 convert:false)

左：**オフスクリーン リーキングのスクリーン空間リフレクション**、右:** 平面反射**

平面反射を使用するには、まず [Rendering project (レンダリング プロジェクト)] 設定の [Support global clip plane for Planar Reflections (平面反射のグローバル クリップ プレーンをサポート)] を有効にして、エディタを再起動します。Planar Reflection アクタをシーンに配置します。近くの反射マテリアルは自動的に平面反射に影響され、その法線を使ってリフレクションを歪めてウェーブのシミュレートを可能にします。

この機能には、いろいろな制約があります。

* 反射パスで有効にするレンダリング機能をどれにするか制御できません。

* 動的シャドウとフォグは反射パスでは正しくありません。

* 一定のラフネス値のみサポートされ、平面反射コンポーネント上で指定されます。

* 平面反射はモバイル上で使用できますが、平面反射を使うマテリアルにはマテリアル プロパティの [Mobile (モバイル)] セクションの [Planar Reflections] フラグが必要になります。

## 新規：質の高い反射

今回のリリースでは、表面反射を限りなく現実的にするために、さまざまなレンダリング機能を追加しました。

![image alt text](image_11.png)(w:929 h:518 convert:false)

カーペイントを他の何よりもリアルにするために、非常に高い品質、鮮明な反射の実現を目指しました。そのためには、ジオメトリ データの処理およびエンコード方法やシーンの高解像度反射キャプチャの有効化などの点を改善する必要がありました。 

**スタティックメッシュ頂点法線とタンジェントの正確なエンコード** - 頂点法線とタンジェントをどこまで正確に表現できるかが、正確な反射を作成する一番重要な点です。法線とタンジェントをチャネル ベクターごとに 16 ビットにエンコードするオプションを追加しました。このオプションによって、デベロッパーは品質と頂点バッファのエンコードによるメモリの使用量のトレードオフができるようになります。この *[Use High Precision Tangent Basis (高精度タンジェント ベースを使う)]* オプションは、スタティクメッシュ エディタの *[Build Settings (ビルド設定)]* セクションにあります。

**スカイ キューブマップとリフレクション プローブの解像度のカスタム化**- 高い品質の反射を作成する 2 つ目の要素は、実際に反射しているもの、つまり背景とローカル反射です。今までは、スカイライトと反射プローブに使用するクック済みのキューブマップの解像度がハードコード化されていました。今回のリリースで、デベロッパーが必要とするパフォーマンス、メモリ、品質にするために最も適した解像度を選択できるようになりました。反射プローブのキューブマップ解像度はプロジェクト全体に対して設定されますが、スカイライト キューブマップ解像度はスカイライトごとに設定される点にご注意ください。解像度が高くなると GPU メモリの消費が増え、パフォーマンスに著しい影響がでます。

**反射プローブ用のカスタム キューブマップ** - デベロッパーは反射プローブを選択することで、カスタム キューブマップを指定できるようになりました。これにより、ローカル反射の外見を改善あるいは微調整する詳細を追加して、カスタム キューブマップを作成することができます。

**GBuffer 法線の正確なエンコード** - 最後に、GBuffer 法線を正確にエンコードする形式を選択して、他の技術の SSR が正確な法線を信頼できるようにするオプションを公開しました。GBuffer 法線の正確なエンコードにより、法線ベクトルは 3 つのチャンネルにそれぞれ 16 ビットでエンコードされます。このエンコード処理はより多くの GPU メモリを必要とするので、パフォーマンスに影響します。

## 新規：二重法線クリアコート シェーディング モデル

複数の法線マップをクリアコート マテリアルと一緒に使用することで、カーボン ファイバーのようなサーフェイスに対し、リアルなシェーディングの実現が可能になりました。

![image alt text](image_12.png)(w:929 h:229 convert:false)
左：** これまでの UE4 クリアコート**、中央:** 新しい UE4 クリアコート (ボトム法線を使用)**、右:** 本物の写真**

クリアコート シェーディング モデルに、クリアコート レイヤーの下のサーフェイスに対して 2 つ目の法線マップを指定するオプションが追加されました。このオプションを使うと、クリアコート レイヤーとは異なるジオメトリ サーフェイスを持つカーボン ファイバーなどの複雑なマテリアルの正確なモデル化が可能になります。

このオプションはプロジェクト設定で有効にします：[Rendering (レンダリング)] -> *[Clear Coat Use Dual Normal (クリアコートに二重法線を使用)]*この機能を有効にすると、すべてのクリアコート マテリアルに負荷が生じるだけでなく、主要なレンダリング コードにもオーバーヘッドが追加されます。 

この機能を使用するためには、マテリアル グラフに *Clear Coat Bottom Normal* ノードを配置しなければなりません。ここに 2 つ目の法線の演算結果をプラグインします。

## 新規：OSVR サポート (プレビュー)

OSVR チームの尽力により、UE4 で OSVR がすぐに使えるようになりました！  

![image alt text](image_13.png)(w:929 h:232 convert:false)

OSVR ソフトウェア プラットフォームでは、幅広い VR / AR デバイスと周辺機器が共有レイヤー経由でエンジンと通信することができます。プラットフォームと対応デバイスについては、[http://www.osvr.org/](http://www.osvr.org/) をご覧ください。

## 新規：Vulkan モバイル レンダラー (プレビュー)

Vulkan グラフィックス API を使ったモバイル レンダリングのアーリー プレビューが利用できます。

![image alt text](image_14.png)(w:793 h:384 convert:false)

上のスクリーンショットは、Samsung Galaxy S7 Unpacked イベント時の Vulkan でレンダリングした ProtoStar デモです。現時点では、モバイル レンダリング機能のみ実装されています。

## 新規：高品質のモバイル ポストプロセス 

カラー グレーディングの付いた映画のトーンマッパがモバイル デバイスで使えるようになります！

![image alt text](image_15.gif)(w:800 h:394 convert:false)

高品質のガウス曲線の被写界深度が、ES3.1 対応のモバイル デバイスでサポートされます！

![image alt text](image_16.png)(w:798 h:392 convert:false)

## 新規：モバイル向けシャドウの改善点

単一の Stationary Light (固定ライト) に対する動的カスケード シャドウ マップがモバイル レンダラーでサポートされます！

![image alt text](image_17.gif)(w:480 h:360 convert:false)

Stationary Directional Light (固定の指向性ライト) が、シーンの静的オブジェクトによってキャストされた事前計算シャドウと正しくブレンドしながら、移動オブジェクトからシーン全体に動的な CSM シャドーをキャストできるようになりました。CSM シャドウでは、変調されたシャドウを使うと確認できるダブル シャドウイングが表示されません。複数のオブジェクトにシャドウをキャストする場合は、この技術は速いです。 

この機能はテクスチャ サンプラーが 1 つ余分に必要ですが、プロジェクト設定から *[Rendering] -> [Mobile] -> [Combined Static and CSM Shadowing]* を選択するとマテリアルを使用するサンプラーを解除し、機能を無効にすることができます。

* 結合したシャドウを受け取るコンポーネントは、フラグ [Receive Combined Static and CSM Shadows from Stationary Lights] を設定する必要があります。  

## 新規：ハイエンド Android と iOS デバイスの GPU パーティクル

ベクトル フィールド付きの GPU パーティクルが、ハイエンド モバイル デバイスで使用可能になりました！

![image alt text](image_18.png)(w:628 h:628 convert:false)

* この機能は、MRT 対応で 32 ビット浮動小数点レンダー ターゲットをサポートするモバイル デバイスが必要です。

* A8 以上 (iPhone 6、iPad Air 2、iPad Mini 4 以上) の Apple デバイスでサポートされています。

* Adreno 4xx および Mali-T7xx GPUs (Galaxy Note 4、Note 5、S6、S7、Nexus 6P など) が搭載されている Android 6.0 デバイスでサポートされています。

## 新規：ブループリントを C++ にクックする (プレビュー)

ブループリントの実行時にかかる VM オーバーヘッドを下げるために、ブループリントをネイティブ ソースコードにパッケージする機能が追加されました。この機能はまだ体験版なので、出荷ゲームには使用すべきではありませんが、ぜひ試してみてください。フィードバックをお待ちしています。

![image alt text](image_19.png)(w:900 h:485 convert:false)

* プロジェクトの [Packaging Setting (パッケージ設定)] :[Experimental] => [Nativize Blueprint Assets] によってエディタ内で有効にされています。

    * **-NativizeAssets** をパラメータとして UAT BuildCookRun スクリプトにパスしても有効になります。

* 生成されたソースはプラグインとして、プロジェクトの中間フォルダの `…\Intermediate\<PLATFORM>\NativizedAssets\` に保存されます。

* [BlueprintNativizationSettings] で対象ゲームの DefaultEditor.ini ファイルのプロセスから所定のブループリントを取り除くことができます。

    * *ブループリントの一般的な「タイプ」は、+ExcludedBlueprintTypes=/Script/UMGEditor.WidgetBlueprint で取り除くことが可能です。*

    * *特定のアセットも、+ExcludedAssets=/Game/Blueprints/MyBlueprint で取り除くことが可能です。*

## 新規：草とフォリッジの拡張 

フォリッジの拡張設定が拡張性システムに追加されました。現在の拡張設定に合わせて、ランドスケープの草とフォリッジの密度を自動的に減らすことができます。設定はランタイム時に変更可能、ゲームはフォリッジ詳細設定のスライダーを実装できます。

![image alt text](image_20.gif)(w:929 h:522 convert:false)

Landscape Grass は自動的にフォリッジの拡張設定に含まれますが、フォリッジは [FoliageType (フォリッジ タイプ)] の [Scalability (拡張)] セクションの [Enable Density Scaling (密度の拡張を有効にする)] から選択されなければなりません。通常は、岩や低木などのコリジョンを持たない「詳細な」フォリッジに対して有効にされます。インスタンスを除去してもコリジョンはゲーム中ずっと有効のままなので、コリジョンをもつ木などのフォリッジには無効にしておきます。

草とフォリッジに拡張レベル別に適用する密度のスケーリングは、BaseScalability.ini の [FoliageQuality] セクションの "grass.DensityScale" と “foliage.DensityScale” * * 変数で設定します。

## 新規：iOS の UMG ウェブブラウザ ウィジェット

UMG ウェブブラウザ ウィジェットが iOS でサポートされます！

![image alt text](image_21.png)(w:929 h:252 convert:false)

Chromium はデスクトップ プラットフォームのウェブ ブラウザ ウィジェットに使用しますが、iOS と Android は UMG レイアウトに一致するように並んだネイティブ WebKit コントロールを使います。そうすることで、実行ファイルのサイズが最小になり、パフォーマンスがあがります。 

## 新規：Twist Corrective アニメーション ノード

モーフターゲットなどのカーブ値をあるボーンの他のボーンに対するツイストに基づいて操作できるようにする Twist Corrective アニメーション ノードが追加されました。例えば、首を右または左にひねりすぎた場合は、首にモーフターゲットを適用すれば、外見をより自然にすることができます。

![image alt text](image_22.png)(w:488 h:257 convert:false) ![image alt text](image_23.png)(w:342 h:257 convert:false)

ボーン名とローカル軸、Twist Normal を使用して、Base Frame と Twist Frame をひねり軸に指定することができます。Angle Delta の [Ref Pose Delta Angle, Max Angle] 幅は、指定したカーブを使って [Mapped Ranged Min, Mapped Ranged Max] にマッピングすることができます。

## 新規：シーンをまるごとインポート

Full Scene Importing を使うと、Max / Maya / Blender で既に作成した背景を選んで、エディタのレベルにそのシーンをまるごとインポートすることができます。 

![image alt text](image_24.png)(w:201 h:477 convert:false) ![image alt text](image_25.png)(w:572 h:470 convert:false)

 背景の中に新規に作成された Scene FBX アセットを再インポートすると、背景上でイタレーションが可能になります。4.11 の早期版では、スタティックメッシュを含んだシーンのみがサポート対象でした。今回の 4.12 では、スケルタルメッシュを含んだシーンのインポート機能も追加されて、いっそう便利になりました。

この機能は、[File] > [Import Scene] からインポートする FBX 背景を選択して使用します。

## 新規：アクタのマージ

レベル ビューポートでのメッシュ アクタのマージがさらに簡単になりました。これにより、より少ないドローコールでパフォーマンスをあげることができます。

![image alt text](image_26.png)(w:353 h:209 convert:false) ![image alt text](image_27.png)(w:320 h:209 convert:false)

スタティックメッシュのマージの例です。レベル ビューポートでの表示前は*左* / スタティックメッシュ エディタでの表示後は *右* です。

マージアクタ機能は、[Window/Developer/Miscellaneous] に加わりました。Hierarchical LOD システム用のマージ パスの最新の変更に合わせて、UI パネルが拡張およびアップデートされました。 

![image alt text](image_28.png)(w:464 h:532 convert:false)

## 新規：Pixel Inspector ツール

Pixel Inspector ツールは、シーンのピクセルをクリックすると、そのカラーを作り出しているマテリアルとレンダリング ステートを可視化します。

![image alt text](image_29.png)(w:769 h:410 convert:false)

シーンのピクセルの色がどうして変なのだろうと思ったことはありませんか？ピクセルの色を構成しているマテリアル入力を教えてくれるツールがあったらいいですよね。それがまさに、Pixel Inspector ツールです！ 

Pixel Inspector ツールは、ツールバーの [Developer Tools] にあります。**Enable Pixel Inspector ** チェックボックスをクリックして、エディタ ビューポート (レベル、マテリアル、ブループリント) にマウスを移動すると、以下の情報が確認できます。Esc キーを押すと Pixel Inspector が停止するので、最後に調べたピクセルを分析します。

## 新規：Platform SDK のアップデート

毎回リリースにおいて、プラットフォーム パートナーからの最新の SDK リリースに対応するようにエンジンをアップデートしています。今回のリリースでは、HTML5 と Android の他にコンソール プラットフォームを更新しています。

![image alt text](image_30.png)(w:929 h:396 convert:false)

* Xbox One:March 2016 XDK にアップグレード

* Playstation 4:PS4 SDK 3.508.031. にアップグレード

* HTML5:Emscripten 1.35.0. にアップグレード

* Android:NDK 11c. にアップグレード以前の AndroidWorks 1R1 (保存場所 Engine/Extras/AndroidWorks) から Android 1R4 インストーラー用の新規 CodeWorks に変更しました。

## 新規：Mask Field 変数

Integer プロパティが bitmast として宣言できるようになり、bitflag 値をカプセル化する enum との関連づけがオプションで可能になりました。この機能は C++ とブループリントの両方で使用できます。

![image alt text](image_31.png)(w:900 h:485 convert:false)

* Native プロパティが "Bitmask" メタデータと一緒にマークできるようになり、ブループリント エディタに追加された変数には “Bitmask” チェックボックスが追加されました。

* Bitmask 変数が異なる "Default Value" インターフェースを持つことで、複数のビットをチェックできるようになりました (Set ノードと同じです)。

* Bitmask オペレーションをサポートするノード "Make Bitmask" と “Bitwise NOT”が追加されました。

## 新規：TV セーフ ゾーンのデバッグ

コンソール タイトルで作業する場合、UI が TV 画面の角に近すぎないことが重要です。そうならないようにするシンプルなツールを追加しました。

 ![image alt text](image_32.png)(w:929 h:524 convert:false)

使用方法は、DefaultEngine.ini を編集して以下を [SystemSettings (システム設定)] に追加するか、コマンド コンソールに直接打ち込みます。

*r.DebugSafeZone.Mode* controls the debug visualization overlay (0..2, default 0)

* 0:セーフゾーン オーバーレイを表示しません。

* 1:タイトル セーフゾーン用にオーバーレイを表示します。

* 2:アクション セーフゾーン用のオーバーレイを表示しません。

 

*r.DebugSafeZone.OverlayAlpha* は、デバッグ可視化オーバーレイ表示の不明瞭さを制御します (0..1, デフォルトは 0.3)。

 

もともとセーフゾーンをサポートしていないプラットフォーム上では、セーフゾーンをシミュレートすればエディタで手早く簡単にテストすることができます。

* *r.DebugSafeZone.TitleRatio* は in FDisplayMetrics に返されたタイトル セーフゾーン マージンを制御します。

* *r.DebugActionZone.ActionRatio* は in FDisplayMetrics に返されたアクション セーフゾーン マージンを制御します。

* 両方とも範囲は 0 から 1 です。デフォルトは 1 で、表示は 100% 安全であることを意味します。テストでは通常 0.9 を使います。

## 新規：合成アニメーションの埋め込み

AnimComposite を別の AnimMontage or AnimComposite に埋め込むことが可能になりました。これにより、独自のアニメーション アセットをもっと柔軟に作成できるようになります。以下の画像は、TEST_AnimComposite が TEST_Montage の中に含まれているので、他のアニメーションのシーケンスを数多く含みます。 

![image alt text](image_33.png)(w:929 h:144 convert:false)

![image alt text](image_34.png)(w:929 h:92 convert:false)

## 新規：コリジョン メッシュ用の LOD の選択

‘複雑な’ (ポリゴンごとの) コリジョンに使用するスタティックメッシュの LOD を選択できるようになりました。‘シンプルな’ (凸包) コリジョンはの使用は適切でなくなりますが、よりシンプルなコリジョン表現のインポートや生成が可能になります。ビヘイビアとパフォーマンスの改善、およびハイポリ メッシュで使用するメモリの削減が可能になります。

![image alt text](image_35.png)(w:586 h:740 convert:false)

## 新規：メッシュのデフォルト コリジョン

スタティックメッシュ コンポーネントがデフォルト コリジョンをサポートするようになったので、スタティックメッシュ アセットからコリジョン設定が使えるようになります。マップにインスタンスを配置した時、それぞれのアップデートを覚えていなくてもコリジョン情報を指定しやすくなります。スカイドーム メッシュを例にあげると、アセット上でコリジョンを無効にすると、各インスタンスはコリジョンが無効のデフォルトになります。

![image alt text](image_36.png)(w:366 h:349 convert:false)

StaticMeshComponent の設定をデフォルト以外に設定したい場合は、インスタンスごとにオーバーライドができます。

## 新規：キャラクター移動速度のハッキングの防止

ネットワーク ゲームは、セキュリティ上の弱点を利用して不正に特定を得ようとするユーザーの標的になりがちです。偽のソフトウェアを使ってゲーム クライアント上での時間経過を速くするのが、ゲームでよくある抜け道です。修正されていないキャラクター移動機能を使って作成されたゲームはこの抜け穴の影響を受けやすく、チーターはますます早く移動できるようになってしまいます。

このようなタイプの抜け道を防止しやすくするために、キャラクター移動に対して、時間の不一致を探知し解決するツール (称して速度ハック防止) を追加しました。

サーバーが直近の移動情報を受け取ってからクライアントのタイムスタンプ デルタを既知のサーバー認証タイム デルタと比較して、時間の不一致の集計することで探知が機能します。そしてこの不一致の時間が設定された閾値に到達すると、未来のクライアンが報告したデルタ時間をサーバー時間にオーバーライドして、時間の不一致が同じになるまでこれらの移動デルタのポーションを使って盗まれた時間 (探知された不一致時間の合計) を「取り戻す」ことで、探知 (オプションで解決ロジック) と解決をトリガーします。

時間の不一致の防止は GameNetworkManager に設定可能なオプションに追加されました。デフォルトでは無効になっています。ベース値は BaseGame.ini で確認できます。プロジェクト固有のゲーム コンフィグ ファイルにオーバーライド可能です。

## 新規：ネットワーク レプリケーション最適化

実際は何も変化がないのにアクタをリプリケートする重複した行為により、無駄にされることが多い CPU サイクルを保存する、適応ネットワーク アップデート頻度という機能を追加しました。アクタ上でプロパティが変化する頻度が記憶され、時間経過と共にアクタのネットワークのアップデート頻度が動的に適用されます。

この機能を使うと、レプリケーションのパフォーマンスが劇的に改善されます！

## 新規：ネットワーク リプレイのカスタム データ

リプレイにより、通常のネットワーク ストリームとは別に情報を格納できます。この機能を使うと Character Movement コンポーネントの位置のスムージングが大幅に改善されます。位置データは別に格納されているので、ストリームで先を見ることができるようになり、キャラクターの予定位置がエフェクトと他のイベントとうまく一致するように測定することができます。

ACharacter::PreReplication を見ると、この機能の使い方が分かります。ChangedPropertyTracker.SetExternalData は、そのフレーム上のアクタ用に好きなデータを確認するために使います。CharacterMovementCompoment.cpp を見ると、UDemoNetDriver::GetExternalDataArrayForObject でどのように追加情報を抽出するのか分かります。

## 新規：Dynamic SoundClass Adjustment でサウンドミックスをオーバーライドする

UE4 Sound Mixes は、サウンド クラス プロパティを動的に調整するパワフルなツールです。ただし、これまでのリリースでは、サウンド ミックス アセットはそれだけではゲームプレイ中に動的な変更はできないという大きな制約がありました。この制約を回避する唯一の方法は、ボリューム調整の時だけ遅延するサウンド ミックスを大量に作成することです。そして、ゲームプレイ中に、これらの静的サウンド ミックスをプッシュおよびポップして、ゲームのサウンド クラスをゲーム ステートに連結させます。この方法は複雑なためエラーになりやすく、ゲーム ステートをサウンド クラス調整にスムーズかつ継続的にマッピングできなくなりました。 

4.12 では、ブループリントの "Set Sound Mix Class Override" 機能により、サウンド ミックスがブループリントからサウンド クラス調整を動的にオーバーライドできるようになりました。

![image alt text](image_37.png)(w:296 h:322 convert:false)

サウンド ミックス内のサウンド クラス調整値は、指定されたフェードイン時間中に所定の値を補間します。指定されたサウンド クラスがサウンド ミックス内に存在しない場合、サウンド クラスがサウンド ミックスに追加され、ターゲット値を 1.0 から補間します (適用しないから適用する、など)。この機能により、サウンド デザイナーはサウンド ミックス ボリュームを動的なゲームプレイ イベントあるいはゲーム ステートにしっかり統合することができます。例えば、車の運転速度、マップ上の正確な位置、アクタのヘルス値レベル、プレイヤーの恐怖レベルなど、サウンド クラスのプロパティをすべてのゲーム ステートにしっかり連結することが可能になります。さらに、サウンド クラス ボリュームを手書きのコードによってオーバーライドし静的アセットデータへ記述するために C++ コードで記述しなくても、、スレートのゲーム用にボリュームの環境設定パネルを記述できるようになりました。

オーバーライドを除去するには、新しいブループリント機能 "Clear Sound Mix Class Override" を使います。この機能は、オーバーライドされなかった場合のサウンド クラス調整値を補間します。サウンド クラスがもともとサウンド ミックスに存在しない場合は、調整値はフェード時間中に 1.0 に補間され、完了するとサウンド ミックスからなくなります。

## 新規：オーディオ ローカリゼーション (プレビュー)

4.12 では、オーディオ ローカリゼーションのビルトイン サポートがお試し頂けるレベルまで改善されました (ダイアログ ウェーブとダイアログ ボイス アセット経由)。フィードバックお待ちしています。

![image alt text](image_38.png)(w:478 h:577 convert:false)

* 口頭のテキストがダイアログ ウェーブ アセットから収集可能され、PO ファイルにインクルードされて他のアセット ベースのテキストと一緒に翻訳されるようになりました。

* ダイアログ ウェーブ アセット用のオーディオの録音とインポートを行いやすくするコマンドレットをいくつか追加しました (ローカリゼーション ダッシュボードにも統合されています)。

    * ExportDialogueScript - カルチャ別の CSV ファイルが含むダイアログの各行と関連づいているファイル名をエクスポートします。

    * ImportDialogueScript - コピー編集されたカルチャ別の CSV ファイルをインポートし、録音されたダイアログで翻訳をアップデートします。

    * ImportLocalizedDialogue - カルチャごとに録音された WAV ファイルをインポートし、ローカライズされたダイアログとサウンド ウェーブ アセットを生成します。

## 新規：Async Compute が Xbox One に対応

Async compute が Xbox One で利用できるようになりました。他の作業用のリソースを描画中に GPU が使えるようになり、GPU の全体的なフレーム時間が速くなります。現在は反射環境と SSAO パスで使用されていますが、今後さらに拡大します。

## 新規：ランドスケープ コリジョンの改善点

ランドスケープが Simplified Player Collision をサポートします。新しい Simple Collision Mip Level 設定を使うと、簡単なコリジョンにどのランドスケープ LOD を使うか選択することができます。Collision Mip Level 値を使って、詳細なコリジョンに使うランドスケープ LOD を指定することもできます。

ランタイム時に作成されたスプライン メッシュに対してコリジョンを生成できるようになりました。

# Release Notes 「訳注： 以下は、非常に技術的な部分が含まれるため、翻訳を省略します。」

### AI

* New:Ability System's attributes' v-logging is now controlled by a console variable, g.debug.vlog.AttributeGraph.

    * Note that this also means it can be disabled for the entire project if added to DefaultEngine.ini.

* New:Added new option to Environment Query system (EQS) to do tests using depth rather than breadth.

* New:Added a blueprint function to set named parameters for use when running an EQS query from blueprints.

* New:Added a query count warning threshold to detect and report large numbers of queries being made in EQS.

    * By default this is disabled, but easily enabled through a config file value change to QueryCountWarningThreshold and QueryCountWarningInterval in Game ini files (e.g. BaseGame.ini, DefaultGame.ini, etc.).

* New:EnvQueryContext_BlueprintBase no longer requires the Querier Actor to be non-NULL.It also now specifies a Querier Object (which is a UObject* and can be NULL).The new Querier Object is available through all of the blueprint-implementable functions on the context which return location(s) or actor(s):Provide Single Actor, Provide Single Location, Provide Actors Set, Provide Locations Set.

* Bugfix:AI perception system stability and performance improvements.

    * GetHostileActors function no longer retrieves actors already forgotten by AI.

    * Perception stimulus of a expired actors is marked accordingly, but not removed.

* Bugfix:Fixed a bug in EQS that occasionally reset the scoring equation on query asset load.

* Bugfix:AI perception system no longer notifies listeners of information from senses they're not registered for.

* AIController’s SetFocus function will now implicitly clear any location focus at the same priority.

* EQS tests' "Sweet Spot" feature has been renamed to "Reference Value".

* EQS’s "Average Instance Response Time" stat now uses milliseconds instead of seconds.

#### Behavior Tree

* New:Added support for using service nodes directly on behavior tree tasks.

* New:Behavior Tree editor will now always display nodes' execution index, rather than child index.

* Bugfix:Forced stopping of Behavior Tree no longer results in failure if the active task required latent abort mechanics.

* Bugfix:Behavior tree search does not skip over branch when restart request comes in while task is aborting.

* Bugfix:Fixed a bug that was preventing "On Value Change" BT decorator observation mode from working as expected.

* Bugfix:Using undo on decorators or services will not corrupt behavior tree data.

* Bugfix:Execution index displayed on nodes of behavior tree now update correctly after move or undo operations.

#### Debugging Tools

* Bugfix:EQS debugger stores data properly when a subsequent Option is the one that produces the end result.

* Bugfix:Visual Log now grabs logged element's "snapshot" even if it's not an Actor.

* General Visual Logger stability improvements.

#### Navigation

* New:Added acceleration-driven path following, controlled by the "Use Acceleration For Paths" flag in movement components.

* New:Added support for using Tri Mesh Collision as navigation obstacles.

* New:Navmesh markup for Nav Modifier Component will now combine all relevant shapes of its parent actor instead of creating simple box.

* Bugfix:Fixed a bug in navigation filters that could result in differences in how navigation areas work in development versus debug builds.

* Bugfix:Crowd simulation state of agent is now being set correctly.

* Bugfix:Multiple blocking hits in geometry conforming for NavWalking movement mode will now be handled correctly.

* Bugfix:Memory leak removed from crowd simulation manager.

* Bugfix:Navigation export works correctly for destructible meshes without collision.

* Bugfix:Fixed navigation updates of attachments when actor is being moved in editor world.

* Bugfix:Navmesh raycasts no longer fail due to 2D checks performed on the last node.

* Bugfix:Path Following Component block detection no longer results in testing against different a mechanism than requested.

* Bugfix:Smart navlink initialization on map load works properly.

### Animation

* New:Added ability to force-reset states as they are re-entered even if they haven't completely blended out.

* New:Added "Teleport To Explicit Time" option to Sequence Evaluators.Defaults to true to maintain prior behavior.If true, does NOT advance time, so that notifies are not triggered, root motion is not extracted, etc.If false, will advance time, triggering notifies, extracting root motion if applicable, etc.Note:Using a sync group forces advancing time regardless of what this option is set to.

* New:Added a new node, Copy Bone Delta, that accumulates or copies the transform of a source bone relative to its original reference position.

* New:Added a new version of the shader complexity viewmode that also shows quad overdraw cost.

* New:Added an error message to Persona viewport when additive ref pose animations have a 0 scale.

* New:Added bone name display to titles of anim dynamics nodes.

* New:Added duplicate slot option to Montages.

* New:Added editable fixed bounds for skeletal meshes, exposed getters to blueprints.

* New:Added flag to Skeletal Mesh Component Initialize to initialize to ref pose instead of ticking the anim instance.This option reduces spawn time for Skeletal Mesh Components.

* New:Added functionality for driving named parameters from animation data using the bone-driven controller.

* New:Added "Test Skeleton Curve Names for Use" menu option to Persona to list all curves on all animations that don’t drive a morph target or material parameter.Helps users identify possible candidates for removal to improve performance.

* New:Added processing to animation blueprint compiler and animation instance to store and double-buffer internal machine state weights on the instance.They can be queried cross-machine without issue.

* New:Added retargeting for variable-referenced sequences in animation blueprints.

* New:Allowed curve renaming in Curve Track to work for existing Curve Names.The existing curve will just take the new UID/Name, and preserve everything else.Added a warning when trying to rename a curve to a name already in use in current sequence.

* New:Animation Retargeting supports scale and root motion.

* New:Import Material Curves now has a "Set Material Drive Parameter On Custom Attribute" option which can be used to set material parameter flags automatically when importing curves.

* New:The "Look At" node will now accept a socket as the target.

* New:Top-level state machines are now reinitialized when they become relevant.This matches the behavior of nested state machines.

* New:Retargeting a skeleton now copies sockets as well.

* Bugfix:Fixed an issue with not serializing metadata in the Anim Montage or Anim Composite.

* Bugfix:Fixed a crash when trying to convert curves to metadata after importing an anim sequence.

* Bugfix:BlendSpace now merges the weights of identical samples.In addition to being an optimization, this fixes an issue with evaluating marker-based syncs in the same sample with different data.

* Bugfix:Fixed issue with different materials with same parameter name not working in Animation Curves.

* Bugfix:The "Linear" alpha blend option now returns a clamped Alpha value.Unclamped values could cause negative transition weights in state machines.

* Bugfix:Animations now record off-screen correctly when using the RecordAnimation command.

* ZERO_ANIMWEIGHT_THRESH conditional checks are abstracted out by new IsRelevant and IsFullWeight functions in FAnimWeight.

* Added compression-related asset registry tags for anim sequences.

* Added filtering to animation node asset pickers so that the wrong type of animation can not be set on an existing node.

* Added indicator displayed on animation nodes when they use the "fast path".

* Added invalid cached curve data test to Skeletal Mesh Component’s Refresh Bone Transforms evaluation logic so invalid cache data will not be used.

* Anim graphs are now debuggable in the Persona graph editor.

* Bugfix:Anim blueprint exposed value handlers no longer hold function references to TRASHCLASS.

* Bugfix:Garbage collection and undo/redo issues with anim instance proxy have been resolved.

* Bugfix:Fixed values not being copied correctly when layered blend per bone was accessed from a struct in the "fast path".

* Bugfix:Split pins now working as anim graph node inputs.

* Bugfix:Fixed a number of animation 'fast path' corner case issues:

    * Bitfield pins are now properly supported.

    * Object pins are now properly supported in cooked games.

* Bugfix:Fixed a crash that could occur when attempting to paste a state machine node inside the state machine itself.

* Bugfix:Fixed a number of crashes when editing animation blueprint state machines and issues that could cause state machine subgraphs to erroneously get marked as read-only.

* Bugfix:Bone transforms are no longer harvested from a pose when the bone isn't valid for the current LOD.

* Bugfix:Fixed blendspace players only reporting normalized time when using a time getter in an anim graph transition.

* Bugfix:BP notifies are now displayed in the "Add Notify" context menu when they derive from an abstract base class.

* Bugfix:Merged skeletal meshes no longer crash when composed ref pose matrices are accessed before the mesh is finalized.

* Bugfix:Persona animation preview tooltip no longer crashes when switching between blendspaces with different numbers of samples.

* Bugfix:Custom blend graphs no longer appear inappropriately as read-only after a copy/paste operation.

* Bugfix:Fixed duplicate slot names in anim slot groups.

* Bugfix:Incorrect bone transforms are no longer being pushed to the renderer during Set Skeletal Mesh.This presented as motion blur artifacts in the editor.

* Bugfix:Fixed INF being generated (which turned into NaNs) when bone scales were close to zero.

* Bugfix:Fixed invalid state for Skeletal meshes having their mobility set to static.

* Bugfix:"Prev Marker not found in GetMarkerIndicesForPosition" assert no longer triggers during marker sync animation ticking.

* Bugfix:Animation objects are no longer inappropriately Garbage Collected in game.Also added an optimization to recording curves so that we don't add keys except when finishing record.

* Bugfix:Cache Bones are properly called from State Machines when needed.

* Bugfix:Fixed missing scaling curves when exporting an animation to FBX.

* Bugfix:Notifies are now triggered correctly when the server calls Montage_JumpToSection.

* Bugfix:Notifies within anim sequences within montages now correctly trigger even if the notify is at time 0.

* Bugfix:Slave Component's Morphtarget works with Master Pose Component.Slave Components can also override their own Morphtarget.

* Bugfix:Fixed some pins in older animation blueprints being non-transactional.

* Bugfix:Fixed uninitialized baked animation object indices so writing out CDO/defaulted versions is deterministic.

* Bugfix:Modifying bones in Persona that are not part of the currently viewed LOD no longer crashes.

* Bugfix:Fixed a crash when trying to look up sync group indices by name on child Anim Blueprints.

* Bugfix:Fixed animation blueprints getting flagged for bytecode-only recompile, which fails to reinitialize the script instance.

* Bugfix:Fixed a bug in montage segment lookup where we would compare against the segment animation start time and not the segment start time.

* Bugfix:Get Instance Asset Player Time no longer returns normalized time for blendspace assets.

* Morphtarget DeltaTangentZ is no longer of type PackedNormal.It is now of type FVector, because values range from -2 to 2.

* Removed component reregistering logic from Set Skeletal Mesh.This allows Set Skeletal Mesh to preserve the current pose across mesh changes.

* Set initial position for animation playback to the end of the animation when dragging an animation with a negative play rate into a level.

* Standalone games now benefit from parallel anim update if possible.

### Audio

* New:Added ability to get currently active reverb from blueprints.

* New:Added ability to set preferred audio device in windows platform project settings.

* New:Added ability to enable or disable subtitles from blueprints.

* New:Added ability to set a custom trace channel for audio occlusion trace calls.

* New:Enabling asynchronous audio occlusion ray tracing by default.

* New:New console command "AudioMemReport" generates a detailed audio report.

* New:Previewing sounds in content browser and sound-cue preview are exempt from master volume and always play at full volume

* Bugfix:Fixed playing anim montage with negative scale in the level viewport.

* Bugfix:Fix for 2D sounds having attenuation applied.

* Bugfix:Fix memory reporting issue on PS4

* Bugfix:Looping sounds no longer stop looping when none of the children are playing a sound.This could happen if a random node had a disconnected pin, for example.

* Bugfix:Reverb fixed on PS4.

* Improvements to ogg-vorbis decoding:

    * Reducing CPU hitches due to audio decompression of Ogg-Vorbis by making initial file info parsing asynchronous.

    * Moved real-time asynchronous ogg-vorbis decoding task management to audio device thread, fixes real-time decoding buffer under-runs.

    * Can now play real-time decoded audio through loading screens and other times when main-thread perf hitches.

* Made multiple improvements to quality-of-life features of the SoundCue editor for DialogueWave assets.

* No longer duplicating compressed AT9 audio assets on PS4.

* Updated tooltip for sound concurrency resolution StopLowestPriority so that it indicates that the system will stop the oldest sound if all sounds are the same priority.

* Updated Oculus Audio SDK to 1.02.

### Automation

* New:Added BuildPatchTool to the binary build.

* New:UAT will automatically look for Build\NoRedist\Keys.txt in the project directory.If it exists, all pak files will be signed using those keys.

* Bugfix:Fixes for UAT where server staging targets wouldn't have their target directories cleaned properly beforehand, resulting in redundant data being left behind.

* Bugfix:UAT VersionUpdater utility now won't touch the target file if nothing was actually changed

* Bugfix:Added UnrealPak location so that MakeFeaturePacks node can run correctly on Mac.

### Blueprints

* New:Added a conversion node that will allow pin connections between related struct types (routing a child struct into a parent struct pin).This also resolves a crash that could occur from direct connections.

* New:Added a feature where duplicated Blueprint graphs are automatically opened and focused.

* New:Added a MakeHitResult node.

* New:Added a new "copy" node, for guarding reference outputs against unwanted modifications.

* New:Added a warning and new name for copy pasted event nodes, to better communicate that the copy will not be triggered with the original.

* New:Added collision generation for spline mesh components which are created or updated at runtime.

    * This is not intended for realtime collision changes while a spline moves around like a tentacle, but it should work for spline meshes that are procedurally generated or otherwise created through blueprint.

    * Note:Spline mesh components are "static" by default.To spawn them at runtime you may need to alter their mobility to "movable" in the details panel or the "add component" blueprint node.

* New:Added a commandlet for rerunning the conversion step for all assets listed in a manifest, syntax is "-run=NativeCodeGen platformname1 platformname2", eg "C:\MyProject\MyProject.uproject -run=NativeCodeGen windowsnoeditor”.

* New:Added draw time and additional color options to Blueprint "Line Trace” functions.

* New:Added Is Valid Index node to Blueprint array library.

* New:Added Make Plane From Point And Normal to the Blueprint math library.

* New:Added new EulerInterp and DualQuatInterp options to "Lerp (Transform)" node.

* New:Added nodes to convert formatted strings into Vectors, Rotators, and Floats.

* New:Added Random Bool With Weight node to generate a random result based on a percent value.

* New:Added the ability for users to fully expand tree views in the MyBlueprints panel by holding shift while clicking an arrow.

* New:Step Over and Step Out have been added as key mappings, although no actual inputs have been configured yet.To make use of the new functionality, either review or remap the keys assigned in editor preferences to step in/step over/step out in Editor Preferences/General - Keyboard Shortcuts/Play World.

* New:Asset name is now displayed in the cook log for blueprint compile errors.

* New:GUIDs are now used to identify properties created from blueprints.This grants more effective retention of user values.

* New:Hooked up lots of new icons for component classes.

* New:Macros can now have local variables of type 'wildcard'.

* New:Project Settings now includes a new Cooker option for enabling a potentially-faster path for dynamic instancing of Blueprint Actor types with multiple components at runtime.

    * The option is titled "Cook Blueprint Component data for faster instancing at runtime."

    * The option is off by default, but can be turned on to potentially boost performance in a cooked build when Blueprint Class instances (Actors) with several components are dynamically spawned at runtime.

* New :Added a filter to show only replicated properties of a Blueprint.

* Bugfix:Fixed editor crash during Blueprint recompilation before Play In Editor.

* Bugfix:An issue preventing users from using debugging keys in blueprints to step through and debug blueprints has been resolved.Graphs no longer lose focus when stepping through blueprints.

* Bugfix:Blueprints based on classes other than Actor will now correctly be detected as data only.

* Bugfix:SpawnActor/ConstructObject nodes correctly update their hovertext when the Class pin is changed.

* Bugfix:Scale no longer changes while drag-scaling inside the Blueprint editor's preview viewport.This is accomplished by not applying near-zero delta values.

* Bugfix:Ease node properly handles interpolation between values other than 0 and 1.

* Bugfix:Editing the default value of a struct variable no longer causes pins to disconnect.

* Added information to the Blueprints search tool to distinguish between out-of-date and unindexed Blueprints.

* Corrected inconsistent function names in Blueprint Editor.

* Bugfix:The PostConstructLink chain is correctly terminated when relinking a Blueprint class.

* Bugfix:Fixed a Blueprint compiler error that could occur when switching an interface function's output to an input.

* Bugfix:Fixed a bug that could cause a crash after force-deleting a Blueprint referenced by another.

* Bugfix:Fixed a bug that could cause a crash when searching Blueprints after switching the Editor language setting.

* Bugfix:Using local object variables inside a Blueprint function no longer crashes.

* Bugfix:Custom collision channels will no longer become out of sync with their associated names.

* Bugfix:Blueprint compiler error no longer occurs when using a SpawnActor node for an actor with a struct member exposed through the node.

* Bugfix:Fixed a bug that would leave collapsed graph nodes in an invalid state, after undoing the deletion of one.

* Bugfix:Fixed a bug that would prevent variable references in an interface function from showing up in a Blueprints search.

* Bugfix:Arrays of TimerHandles will no longer be cleared when trying to remove a single item.

* Bugfix:Blueprint functions within Blueprints that implement an interface are now searchable.

* Bugfix:Blueprint nodes added through keyboard shortcuts can now be undone.

* Bugfix:When Playing in Editor with a dedicated server running in-process, cosmetic function calls will no longer be skipped.

* Bugfix:Fixed a bug where malformed variables were being created through a pin's "Promote to variable" option.

* Bugfix:Blueprint function parameters now correctly display their default values.

* Bugfix:Blueprints modified by a variable node's "Replace variable with..." option are correctly marked as needing compile.

* Bugfix:The "Set Members in [Struct]" node now correctly handles literal structs referenced by the output pin.

* Bugfix:Fixed a cook error that could occur when a Blueprint interface wasn't completely loaded before the Blueprint that uses it.

* Bugfix:Fixed a cook error that could occur when collapsing a split pin with a debug watch on one of the values.

* Bugfix:Fixed a crash that could occur when adding, selecting, or removing a Blueprint node.

* Bugfix:Fixed a crash that could occur when applying instance changes to a Blueprint (when the Blueprint contained an array of text elements).

* Bugfix:Fixed a crash that could occur when changing a Blueprint struct array to use a different struct type.

* Bugfix:Fixed a hole in cyclic dependency loading, where other Blueprints could be loaded at the wrong time through the text import process (config files, etc.).

* Bugfix:Blueprint classes now properly inherit "HideCategories" metadata.

* Bugfix:Blueprints correctly handle promoting their functions while removing an interface.

* Bugfix:Invoking Redo while transaction buffer is empty no longer causes a crash.

* Bugfix:Fixed inconsistent transform scale behavior after replacing the root component via drag-and-drop in the Blueprint editor.

* Bugfix:Searches for Blueprint event references now include places that the event is called.

* Bugfix:Actor-based Blueprint classes utilizing one or more latent function call nodes (e.g. Delay) in the event graph no longer crash in editor after recompiling.

* Bugfix:Loading a project with a struct and Blueprint that cyclically depend on each other will no longer cause a crash.

* Bugfix:Per-instance customizations on an actor made from a blueprint which has severe compile errors will no longer be lost when the blueprint compile errors are resolved.

* Bugfix:Property edits to inherited components no longer cause a blueprint to be non-data-only

* Bugfix:The Components tree view will once again update after an undo/redo of a component attachment action in the Blueprint Editor.This was accidentally broken in the previous version.

* Bugfix:Editor no longer crashes when a component with 'Within' markup is added to a Blueprint.

* Bugfix:Blueprint Editor will no longer crash when renaming a component to the name of a component that was previously added and then reverted via the undo command.

* Bugfix:Fixed the root cause of a potential runtime assertion when attempting to dynamically spawn Actor-based Blueprint Class instances with one or more nested default subobjects created through native parent class construction.

* Removed a misleading load warning (complaining about property/value mismatches) that could occur when loading cyclic content.

* Improved logic for detecting mouse clicks on pins with short descriptions, including unlabeled exec pins.

* Improved "RInterpTo" and “RInterpTo_Constant” node documentation.

* Improved the error message for CreateEvent nodes that wrap an event/function that no longer matches the expected signature.

* Made load error messaging more descriptive for failed imports of Blueprint-owned component objects on level load.

* Moderately improved Blueprint search times.

* Optimized ComponentTypeRegistry startup.

* Revised FObjectInitializer::InitProperties() and the PostConstructLink chain for Blueprint Class types to create a faster path for Blueprint class instancing.

* Some blueprint validation logic has been moved to run after the execution graph is pruned, preventing unused nodes from blocking packaging.

* The "Delete Unused Variables" feature now considers the "Get Class Defaults" node and will remove any variable output pins that are not connected.

* The "Get Class Defaults" node will now update properly in response to structural Blueprint Class changes (for example, adding & removing variables).

### Core

* New:Added allocation verification helpers to help with tracking down freeing the same pointers multiple times.

* New:Added ChangeExtension function to FPaths to change the extension of a given filename.

* New:Added memory-only output device that will be used by default in shipping configs that have logging enabled.

    * Added command line param -logtomemory to force memory log in other configs.

    * Added command line param -nologtomemory to force file log in test and shipping.

    * Memory log will be dumped to file on exit (in non-shipping configs) and always attached to crash reports.

* New:Added SCOPE_SECONDS_ACCUMULATOR which will time its scope in seconds and record with the supplied accumulator stat.

* New:Added settings to improve control over viewport behavior.

    * You can control if the viewport locks the mouse on acquire capture.

    * You can control if the viewport acquires capture on the application launch (first window activate).

* New:Added some extra stats to the pakfile group.

* New:Added the ability to filter out command line arguments from the logs.

* New:Added the ability to limit the number of old ini files kept on disk by the engine.Currently defaults to 10 and is configurable via [LogFiles] MaxLogFilesOnDisk ini setting.

* New:The 'dumpnonframe' stat command now takes an optional group name, which will be used to filter the output.

* New:Non-inline bulk data can be written out to a separate ubulk file alongside the original uasset when cooking.

    * This stops us breaking file read contiguity when using pak files by having to skip over that unread bulk data in order to reach the next file.

    * Enabled with UseSeperateBulkDataFiles=True in the [Core.System] section of the project’s engine ini file.

* New:Allows apps to ensure that they were run via the Launcher.

* New:Changed crash reporter to respect command line parameter filtering when it is enabled via the project define.

* New:Changed how FNames are serialized to remove the wasted load time costs due to previously loading FName entries.

* New:FMath::FindDeltaAngle has been deprecated and split into FindDeltaAngleRadians and FindDeltaAngleDegrees.The original function used radians.

* New:GitHub 2041 :Allow FMaintenance::DeleteOldLogs in USE_LOGGING_IN_SHIPPING configuration.

* New:Improved performance of cancelling IO requests.

* New:Improvements and optimizations to pak signing system.

    * Store encrypted CRCs of each 128kb chunk of the pak file in a separate sig file alongside the pak file.

    * Background decrypt the signatures where possible.

* New:Integer properties are now properly converted when deserializing if they were saved as a different integer type, e.g. saved as int16, loaded as uint32.

* New:Material expression objects that are not required in cooked build will now be stripped from cooked packages.

* New:Module for games to make sure they were ran through the launcher, so they are up to date.

* New:New command line switch for UnrealPak, "-TestEncryption", which runs some tests on asymmetric key signing functionality..

* New:Optimizations for FBigInt.

* New:Plugins for projects can now be optional.Project will not fail to load if they are not found.

* New:Prevented cheating via ConsoleVariables.ini.

* New:Programs will also look for plugins in the project directory if the project file is specified in the command line.

* New:UnrealSync has been removed from the codebase.

* New:When DirectoryWatcher fails to move a file, it will now log the remaining disk space.

* New:When the graphics driver crashes, the engine will now assert so that we can send a crash report.

    * CrashReportClient will now attempt to initialize Slate Renderer multiple times before it gives up, in which case it will send the crash report in unattended mode.

* New:Added ability to set an exit status in a UE4 program (only implemented on Linux).

* New:Added server performance counters for disk space and free memory.

* New:Ini overrides are now usable in Shipping builds on servers.

* New:Order of XGE tasks is guaranteed in case of more than 10 builds.

* New:Idle time can be excluded from from FPS charts.

* New :Reflection Capture Component, Sub UV Animation, Sound Node, and Material Expression will no longer be loaded on dedicated servers.

* Bugfix:Config files will no longer save out with actual game directory paths.Copying the project to another folder will no longer result in warnings and errors.

* Bugfix:The cooked asset registry now contains sublevel map references in dependency graph data.

* Changed the warning message when no external profiler DLLs are available into a more friendly log message (it is not an error situation).

* Bugfix:Crash fixed when parsing encryption key strings.

* Bugfix:Fix for a rare crash where a package linker would be freed half way through EndLoad(), but before it was actually finished.

* Bugfix:Fix for an issue for cancelling package loads when there are still packages queued.(Credit to Takeshi Hida of Namco Bandai Studios.)

* Bugfix:Fix for parsing of the "NoLoadTrackClear" command line parameter.

* Bugfix:Recursive calls in the profiler now report correct stats.

* Bugfix:Fixed a crash with saving a level >2GB in size, though there may be other crashes remaining.

* Bugfix:FLinkerLoad manager fixes:

    * GetLoadersWithNewImportsAndEmpty function no longer empties the wrong array.

    * DissociateImportsAndForcedExports function imports only in non-cooked builds.

* Bugfix:Corrected bad data in min/max/average inclusive times in the profiler and added min/max/average number of calls.Also fixed event graph tooltip not displaying correct values.

* Bugfix:Compile button no longer disappears.

* Bugfix:MD5Hash LexicalConversion::FromString now produces correct results.

* Bugfix:Fixed shutdown crashes due to illegal StaticClass usage.

* Bugfix:The time reported when hot reload is triggered via the IDE is now accurate.

* Bugfix:Fixed UnrealHeaderTool.exe's error code when -warningsaserrors is specified.

* Bugfix:The "-unversioned" flag is no longer ignored when cooking.

* Bugfix:Mirroring by using negative scale on an attachment or Skeletal Mesh Component is fixed.Note that because Skeletal Mesh Components are animated, this can cause a performance hit.

* Bugfix:The function `NewObject<T>(Outer, ExplicitClass)` will now assert if ExplicitClass is not actually a subclass of T. This avoids potential memory corruption.

* Bugfix:Fixed incorrect asset loading in Cooked game data.

* Bugfix:The engine will no longer display message boxes when a D3D device is removed/lost if the engine was running in unattended mode.

* Bugfix:Unreal Automation Tool will no longer eat backslashes when parsing the command line.

* Bugfix:Fixed loading PortalRPC and related modules on the server.

* Bugfix:Fixed FPS charts being generated wrong during multiple runs.

* Memory profiler loads real-world captures in reasonable time (minutes instead of hours).

* Reduced memory usage by the profiler by about 50%.

* Reduced peak memory usage when async loading by 5.5x to 10x.

* Improved asset registry redirector resolution to account for circular dependencies.

* Improved live connection handling in the profiler.

* Tagged Properties that were previously serialized but are no longer (typically because they were made transient) will no longer be loaded, even if their type has also changed.

* When loading an object with duplicated lazy object pointer GUID, the engine will no longer generate a new GUID. Instead, It will invalidate the old GUID to avoid non-deterministic cooked builds.

* Increased server FPS cap from 120 to 1000.

* When running -server, shaders will not be compiled.

### Editor and Tools

* New:Added a warning message when an Hierarchical LOD cluster exceeds 65536 vertices for mobile target-platform projects.

* New:Added aggressive filtering to the session frontend profiler with the 'AF' checkbox next to the filter text.This rebuilds the stats tree, removing non-matching options and reparenting stats of identical names such that thread time for a particular stat is visible in a single tree row.

* New:Added an option ("r.SaveUncompressedEXRFrames") to save uncompressed high res screenshots.

* New:Added AssetUserData support to Animation and Texture assets.

* New:Added bake and reduce selected keys or whole curve to the curve editor tools.

* New:Added ScanFilesSynchronous to the Asset Registry interface, which is useful to force scan specific files that you have a TAssetPtr or StringAssetReference to.

* New:Added support for a scene depth picker.It's currently used for focus depth sampling for the new Cinematic Camera Actor.

* New:Added the ability to choose the world in the scene outliner.

* New:Added view mode for visualizing Hierarchical LOD system behaviour.

* New:Alt-Tab between multiple PIE windows should behave much closer to how Alt-Tab between standalone games would behave.

* New:Made curve editor colors consistent for X, Y, and Z channels.The colors are red, green, and blue respectively.All other curves are gray by default.

* New:Many improvements to the Rebuild Lightmaps automation script (map checkouts, better errors, email notifications, etc.).

* New:Map text box in the editor now converts paths to long package names making them more portable.

* New:Now allow AssetUserData-derived Objects to be added to assets in the editor via details panel.

* New:Polished Hierarchical LOD outliner and behaviour.

* New:'Recently Used Levels' and 'Favorite Levels' now hold long package names instead of absolute paths.This makes them project relative, which means they will remain valid even if the project location changes.

* New:Separated input and output snapping in the curve editor into two different toggles.

* New:SplineComponents now have a debug render feature, allowing them to be visualized in-game in non-shipping builds, or in-editor even when not selected.

    * This can be enabled with the Splines show flag (or 'show splines') from the console.

    * It can also be enabled or disabled per-instance with the SetDrawDebug function on SplineComponent.

* New:The editor now supports many new methods of opening new asset editors.You can choose where tabs open with a great deal more options in Editor Preferences > Appearance > Asset Editor Open Location.This will reset the 'always open asset editors in new windows' option, it completely replaces and enhances that option.

* New:The eye dropper in the color picker can now be cancelled by pressing Esc, or completed by clicking the Left Mouse Button.

* New:UnrealGameSync:Mouse wheel rotations no longer switch projects if the selected project box has focus.

* New:UnrealGameSync:Pressing Ctrl-C with a change selected will copy the changelist number to the clipboard.

* New:UnrealGameSync:Status panel now shows the currently selected stream, and clicking on it gives a menu allowing fast-switching to another stream.

* Bugfix:Fixed an issue where .ini files could have a double extension (.ini.ini).

* Bugfix:Pasting multiple lines of text into a string or text field in the property matrix no longer leaves the "\r" character in windows platforms.

* Bugfix:Fixed color properties not receiving the correct values in Sequencer.

* Bugfix:Drag-and-drop preview actor now appears at the proper scale.

* Bugfix:Editor no longer emits a log warning when selecting an actor while in Simulate mode.

* Bugfix:Child Actors can no longer be picked for an Actor reference property in the details panel.

* Bugfix:Curve editor no longer crashes when box selecting outside the bounds of the viewport.

* Bugfix:Fixed a bug that caused PIE standalone games to launch in fullscreen.

* Bugfix:Trying to reset an interface array property with empty entries no longer causes a crash.

* Bugfix:Viewport settings are correctly saved when shutting down the editor.

* Bugfix:Fixed an issue where text properties wouldn't notify or transact (for undo) correctly when they were edited.

* Bugfix:Modifier keys are registered correctly on PC even if both the modifier and another key were pressed in same frame.

* Bugfix:Color picker’s size is fixed to prevent it from being off-screen.

* Bugfix:Crash in Curve Struct Customization when no objects were selected for editing.

* Bugfix:Fixed crash which could occur when diffing blueprints if the SkeletonGenerated class for a particular revision was null.

* Bugfix:Ensure no longer fires when editor mode input handlers activate other modes.

* Bugfix:Fixed issue where Editor would attempt to launch on iOS if the project was both a code project and used plugins.

* Bugfix:Merge Actor functionality will now combine material sections in the final mesh.

* Bugfix:Fixed rare crash in FlushPressedKeys on PIE shut down.

* Bugfix:Fixed rare tooltip related crash.

* Bugfix:Slate numeric drop-down now updates from combo box values if text is selected.

* Bugfix:Slate throttling no longer prevents viewport resizes from working properly.

* Bugfix:Fixed the "Make collection from referenced assets" feature in the Reference viewer.

* Bugfix:The class picker filter’s behavior now matches all other in-editor filters.

* Bugfix:Fixed various crash bugs in the mesh painting tool.

* Bugfix:Levels will no longer be dirtied when launching standalone from the editor.

* Bugfix:Moving parent & grouped child actors no longer results in deltas being applied twice.

* Bugfix:Fixed some Sequencer tracks incorrectly replaying all keys in reverse when looping forward or backward.

* Bugfix:Undo/Redo after using Replace Actors no longer crashes.

* Bugfix:Updated ExampleLibrary included in Third Party Plugin example so that it can be built and loaded on Mac.

* Bugfix:Now only .FBX or .T3D files are accepted as importable types.Previously, an unsupported type would lead to an editor crash.

* Made the Config Editor button more visible.

* Bugfix" Fixed a potential crash when managing your favorite levels.

* Bugfix:Fixed a crash when changing Media asset path.

* Updated the VR In-Editor Tutorial.

* UnmappedTexelsPercentage is now 100-based.

* When a custom build step is used, if it's async, we now advance the build step upon completion.Otherwise, we just continue to work on the same async build step.

* The Landscape In-Editor Tutorial now makes sure you have a Landscape before allowing the tutorial to continue to the next step.

* The auto-reimport settings have been changed so that "Detect Changes on Startup" defaults to true.There is a prompt every time a new source asset has been detected, so the user can veto the auto-reimport if desired.

* Added Vulkan Preview Enable to Experimental and hide it if Vulkan support is not compiled.Clarified the function of the "Import" option in the File menu.This, and “Import Scene”, have now been combined into a single option 'Import Into Level'.

#### Content Browser

* New:Added built-in type category for Media assets.

* New:Added UI action for creating new content browser folders.

* New:Sorting asset type categories alphabetically.

* Bugfix:Downgraded an assert in Path View’s Load Settings function to avoid a common crash when a saved path no longer exists.

* Bugfix:Fixed a crash when pasting a path containing a class into the asset view of the Content Browser.

* Bugfix:Fixed a rare crash re-importing a mesh into the content browser.

* Disabled 'Show in Explorer' context menu option (in Content Browser) for newly created/unsaved assets.

#### Landscape

* New:Added ability to expand landscape bounds. 

* New:Added support for baking landscape material world position offset into collision for collision mip settings other than 0.

* New:Added support for Landscape grass to use the landscape's static light/shadow maps through the "Use Landscape Lightmap" setting in the Landscape Grass Type.This doesn't look quite as good as dynamic lighting and shadowing, but it is much much cheaper.

* New:Landscape can now use material world-position offset in static lighting calculations.This can be enabled via "Use Material Position Offset In Static Lighting" on the landscape actor.

* New:"Random Scale" option for Landscape Grass.Works just like the random scale options for foliage.

* New:PNG heightmaps are now supported in world composition's tiled landscape import.

* New:You can now set a different LOD for Landscape simple collision and full detail collision.If the simple collision LOD is not set or is set the same as the full collision LOD, they will use the same collision object (as before).

* Added better input filtering for "Landscape Layer Blend" material node.Now it won't allow "texture object" (etc.) to be connected, and the height inputs won't accept material attributes (only the layer inputs).

* Added warnings when trying to use the Landscape Visibility Tool without the landscape material having a "Landscape Visibility Mask" node.Just add the "Landscape Visibility Mask" node to the material and link it to the "Opacity Mask" output (doesn't matter that it's disabled, and you can leave the material as "opaque" blend mode) and Landscape will handle the rest.

* Bugfix:Fixed bounds calculation for landscape splines.This fixes the issue with the first landscape spline point being invisible and later points flickering.

* Bugfix:Crash fix when undoing following component whitelist changes that were made with [+]/[-] + [Click].

* Bugfix:Landscape components being perfectly flat no longer causes bounding size to be 0.

* Bugfix:Landscape and foliage tools now work in orthographic viewports.

* Bugfix:Landscape editor updates viewports properly in non-realtime mode.

* Bugfix:Landscape grass now updates when using a material instance as the landscape material and changing parameters.

* Bugfix:Landscape spline lines show up properly on flat landscapes.

* Bugfix:Fixed layer allocation issues when undoing after a layer is fully painted away on a component This could cause multiple layers to be allocated to the same texture channel, with very bad visual results.

* Bugfix:Fixed LODFalloff setting on landscape getting reset when using the "Change Landscape Component Size" tool.

* Bugfix:Removed stalls when choosing layer infos in the "New Landscape" dialog by not loading layer infos that aren’t needed.

* Bugfix:Fixed up broken references between Landscape Render and Collision components on load.This was causing a few issues ranging from crashes to collision not updating when sculpting.

* Bugfix:Fixed a crash when calling Editor Apply Spline with a null spline component.The function also no longer does anything in PIE (it's for Blutilities, not runtime).

* Bugfix:Fixed a crash when entering landscape mode with a landscape selected while simulating.Landscape infos are no longer created for PIE/Simulate landscapes, as they were empty anyway.

* Bugfix:Loading landscape projects that use tessellation no longer causes a crash.

* Bugfix:Fixed shader compile errors when applying a speedtree material to a landscape spline.

* Grass will no longer tick in-game if there is no grass on a given landscape.

#### Material Editor

* Bugfix:Fixed a crash which would occur when pasting a material function call node from one project into another in which it is not defined.

* Bugfix:Landscape layer blend nodes now updating connections correctly when an input is changed from weight/alpha (one input) to height blend (two inputs) or vice-versa.

#### Matinee

* New:Added "Enable Group" option so that you can disable certain groups if you want.

* New:You can play multiple animations at the same time if the slot nodes are in different groups.

* Bugfix:Fixed incorrect audio playback when scrubbing before stopping playback.

* Bugfix:Dragging a selection box outside of the Matinee window will no longer crash the editor.

#### Cascade

* Bugfix:Fixed crash when using "Convert to Seeded" in Cascade.

#### Persona

* New:"Bone Draw" was on/off but now it has the options All, Selected, or None.The default is Selected.

* New:Added CPU skinning option to Persona.

* Bugfix:Pose evaluator customizations are now processed at the correct times.Properties will no longer be re-added after being removed from the details panel, which was leading to duplicate entries.

* Bugfix:Reported triangle count no longer duplicates count of cloth sections when set to show detailed mesh stats in Persona.

* Fixed crash when accessing selected graph nodes after doing an evaluator conversion in Persona.

* Fixed naming error in rotation multiplier node.

* Auto Adjust Floor to Mesh is now saved to config file.

#### Project Browser

* Bugfix:Fixed an issue when creating a copy of a project whose version is older than the current engine version.Previously, the copy would still be attempting to access assets from the original project, and would fail to package.

#### Static Mesh Editor

* Bugfix:"Generate KDOP Collision" will no longer generate bad collision data.

* Bugfix:Fixed crash in auto-convex collision tool when running on very small meshes.

#### Foliage

* New:Added foliage scalability group.

    * By default the foliage scalability option will alter the rendered density of landscape grass between `0%` (low) and `100%` (high).

    * It can also alter the density of any foliage types which opt-in to the behaviour via the "Enable Foliage Density Scaling" option in the FoliageType.This is recommended for foliage which doesn't have a gameplay-relevant effect

    * Note:Foliage density scaling only applies in-game (including PIE), not in the editor, for both usability and technical reasons.Grass density scaling will still happen in-editor.

    * Note:"Low" foliage setting will remove all grass and detail foliage.

* New:Added the ability to filter procedural foliage by BSP, StaticMesh, Landscape, or Translucent.

* You can now specify vertex color masking rules for each color channel when painting foliage.

#### Cooker

* New:Improved parallelisation of the cook commandlet by allowing packages to be saved while shaders / textures are caching.

* New:Resave lighting commandlet now supports building lighting as an option.Requires a video card installed on the machine to run.

* Bugfix:Fixed deterministic cooking issues caused by StaticMesh NavCollision import, class flags which were saved into cooked packages, and UParticleRequiredModule (which was dependent on load order).

* Bugfix:Content will no longer be marked as modified when garbage collecting.

* Commandlet tweaks made to Fixup Redirects and Cook-on-the-fly Server.

#### Sequencer

* New:Sequencer functionality unlocked in UMG.

    * Event Tracks are now available.

    * You can now call a PlayTo() function to play to a specified time in the animation.

* Bugfix:It is now possible to render out 4K image sequences using Matinee or Sequencer.

* Bugfix:The color gradient for color tracks now matches the colors in the color picker.

* Bugfix:Scrubbing attached audio tracks no longer causes a crash.

### Gameplay Framework

* New:Added "cheatscript" functionality to CheatManager.This enables users to combine a set of console commands into a single script accessible via a single command.

* New:Actor and Component OnClicked/OnReleased events can now be triggered by more than just Left Mouse Button.

    * PlayerController now contains a list of keys that will trigger a OnClick/OnReleased event if the cursor is over an Actor/Component that implements the event.

    * OnClick/OnReleased events now have an additional argument that specifies which key was responsible for the event.

* New:Actor delegates OnTakeAnyDamage, OnTakePointDamage, OnActorBegin/EndOverlap, OnBegin/EndCursorOver, OnClicked/Released, OnInputTouchBegin/End/Enter/Leave, OnDestroyed, and OnEndPlay have all had a new parameter added to allow binders to know which Actor the event occurred on in cases where a single event entry point is bound to multiple Actors.

* New:A "Strength Over Time" Curve Float parameter has been added to Constant Force root motion source for scaling constant force over its duration.

* New:Added support for tag redirectors on Gameplay Tag structs.It works the same as Tag Containers using the GameplayTagRedirects section of Engine.ini.Invalid gameplay tags (which are no longer in the tag dictionary) will now warn at load time.

* New:Added "Velocity Mode On Finish" setting to Apply Root Motion Move To Force ability task node.Can now choose to set character velocity to a specific value when root motion ends.

* New:Added AbilityTask_WaitAttributeChangeRatioThreshold for triggering logic when the ratio of two attributes matches/stops matching threshold comparison.

* New:Added AbilityTask_WaitAttributeChangeThreshold that triggers when the state of an attribute starts/stops matching some comparison threshold.

* New:Added a configurable slow frame printout (prints out the length of any slow frames over a threshold of t.SlowFrameLoggingThreshold seconds).

* New:Added a method called "Get Default Resolution Scale" to Game User Settings to return the desired resolution scale based on Desired Screen Height and the current resolution.

* New:Added 'Get Game Time Since Creation' function to Actor.

* New:Added option to allow Camera Shakes to blend out when stopping according to their blend-out time (default behavior is unchanged).

* New:Added optional LineThickness parameter to HUD DrawLine function.

* New:Added support on listen servers for smooth interpolation of the local view of remote characters.

    * CVar "p.NetEnableListenServerSmoothing" controls this.It is on by default.

    * Added separate tuning settings for interpolation lag on listen server (ListenServerNetworkSimulatedSmoothLocationTime, ListenServerNetworkSimulatedSmoothRotationTime).

    * This implementation interpolates the mesh location (similar to how clients interpolate it), but does not simulate movement of the collision capsule on intermediate frames where the server updates without a client update.

* New:Added Tau to Blueprint function library.

* New:Added the ability to filter DataTable Assets by their row using the metadata. (meta = (RowType="MyRowName”).)

* New:All Axis keys can now have their properties edited through the Input section of the Project Settings.

* New:Can now query if an Actor Is Replicated in blueprints.

* New:Primitive Component delegates OnComponentHit, OnComponentBegin/EndOverlap, and OnComponentWake/Sleep have all had a new parameter added to tell binders which Primitive Component the event occurred on in cases where a single event entry point is bound to multiple Primitive Components.

* New:Scene Component Snap To and the blueprint version of Attach To now return a boolean indicating success.

* New:Text Render Components can now specify a vertical spacing adjustment.

* New:Vertical Alignment can now be set from Blueprints for Text Render Components.

* Bugfix:Component overlaps now end (triggering the OnComponentEndOverlap event) whenever an overlapping component is destroyed.

* Bugfix:Child Actors of the Preview Actor being moved will no longer be collided against when snapping to ground.

* Bugfix:Child Actors will no longer bleed into other blueprint thumbnails.

* Bugfix:ChildActors now inherit their visibility from the owning component and actor visibility.

* Bugfix:Crashes related to WorldSettings not being found after hot reload when a game specific World Settings subclass is in use have been fixed.

* Bugfix:ApplyRootMotionMoveToForce ability task can now set Movement Mode to non-Falling modes.

* Bugfix:Customizations applied to a child actor from the parent construction script are no longer being lost when recompiling the blueprint of the child actor's class.

* Bugfix:Duplicate overlap events when moving the same component again during an overlap event no longer happen.

* Bugfix:Fixed a fatal error that could occur when loading a game's default map fails.This could happen if, for example, the asset for the default map specified in the project settings was deleted, and then the game tries to connect to a server and fails.

* Bugfix:Box Component, Sphere Component, and Capsule Component now update bounds when extent, radius, or capsule size change.

* Bugfix:Fixed bug in Gameplay Cue Tag details customization where the Notify field wouldn't refresh properly when the selected tag changed.

* Bugfix:Fixed cases where child actor component copies could be orphaned in the editor level.

* Bugfix:Fixed crash when a Child Actor Component is marked pending kill and does not get destroyed cleanly until garbage collection runs.

* Bugfix:A Sound Cue containing a Sound Quality node being referenced from a native constructor no longer causes a crash.

* Bugfix:Fixed crash when player stands in a Physics Volume that streams out.Primitive Components with Should Update Physics Volume set to true are prevented from continuing to reference Physics Volumes in a level that is streamed out.

* Bugfix:Fixed crash when tick function with a tick interval was disabled while awaiting rescheduling.

* Bugfix:Fixed editing Plane Constraint Normal on Movement Component not propagating to instances in the world after some edits.

* Bugfix:Geometry sweeps will now return FaceIndex if requested.This fixes foliage color masking paint mode not respecting vertex colors.

* Bugfix:Child actors that have a non identity root component scale will now be scaled correctly.

* Bugfix:Camera Anim FOVs are now correctly applied.

* Bugfix:Fixed issue where using BugItGo would result in the player to falling through the world.

* Bugfix:Fixed issues with character getting out of water when impacting objects above the surface.

* Bugfix:Player Controllers spawned in Standalone always return true in Is Locally Controlled.

* Bugfix:A potential PlayerState leak was fixed.

* Bugfix:Widget Component materials now work properly with Opacity Mask and Two-Sided Mode.

* Bugfix:Requests for a character to crouch to a half height smaller than the radius no longer call On Start Crouch with an incorrect Height Adjust value.

* Bugfix:Simulated character proxies no longer get stuck in falling if velocity reaches zero while there was encroachment without further network updates.

* Bugfix:When a sub-level set to be unloaded but with visibility state set to true, Is Streaming State Pending was returning the wrong value.

* Bugfix:Convert Transform To Relative (in Kismet Math Library) now performs the correct operation.

* Bugfix:Character Z velocity is maintained when trying to switch to default movement mode that goes through Walking but then immediately exits walking.

* Bugfix:Replicated Actors with a replicated Child Actor Component will no longer result in two copies of the Actor on clients.

* Bugfix:Using the Set console command during standalone games no longer crashes.

* Bugfix:Undo/redo of attachment changes of an IWCE component from another IWCE component and a BP constructed component now works correctly.

* Bugfix:When the console closes it now properly restores the viewport’s input state (both focus and capture).

* Bugfix:Fixed a crash during garbage collection calling Destroy Component on a sub-component.

* Bugfix:Crash no longer happens if the Game Singleton class specified in Engine.ini is invalid.

* Actor iterators will now include results for Actors in an associating level.This means that in Begin Play of sub-levels being streamed in, Actors in that sub-level will now be returned by functions such as Get All Actors Of Class.

* Actors can no longer fail to spawn due to mesh overlap with the geometry of a child actor.

* Added a warning log when trying to possess a Pawn when we don't have network authority.

* Added Blueprint-exposed function to get the closest one on a Skeletal Mesh to a point.

* Added Set Control Rotation From Pawn Orientation flag to AI Controller to control whether it copies the Pawn rotation to Control Rotation if there is no focus point.

* Added support for Character Movement being based on sockets (not just bones).

* Added teleport flag to Set Actor Rotation.Improved documentation.

* Destroyed child actors are always renamed.

* Changed Smooth Target View Rotation (in Player Controller) to use a tunable interpolation speed, Smooth Target View Rotation Speed.

* Engine Settings classes that cannot be found will now fallback to default class instead of crashing.

* Exposed Primitive Component functions Get Collision Enabled, Is Collision Enabled, Is Query Collision Enabled, Is Physics Collision Enabled functions to blueprints.

* FInterpTo function now treats negative values as well as zero as instant speed, consistent with other *InterpTo functions.

* Get Time Down, Get Key Value, Get Raw Key Value, and Get Vector Key Value now warn if used with AnyKey.

* Improved component & actor attachment API.

    * Replaced enum-based attachment location with new per-component attachment rules.

    * Fixed "Snap to Target, Keep World Scale" not working correctly when parent was already scaled.

* Improved linear smoothing for character movement under realistic network conditions with variable packet lag.

* Improved swimming movement behavior at water surface.

* Improved in-game console.

* Italian keyboards now have a usable default key for opening the console.

* Key presses on unbindable keys (e.g. multimedia buttons) no longer route to the player input system.

* Made walking on destructibles work correctly so that we can follow each chunk as they move.

* Improved On Teleported to avoid temporary falling state when entering water, maintain Z velocity correctly, and call Process Landed when going from falling to walking.

* Create Render State For Hidden Components bool is now accessible in game, not just in editor.

* Optimized spawning emitters to avoid redundant transform updates before registration.

* Post-Process weight in Camera Anims is now affected by scaling, including blending in/out.

* Procedural Foliage Component will now use the level bounds when a volume is not present.

* Removed redundant seek for world composition-related data inside the level package in cooked builds.

* We now send client-side camera updates (if enabled) when the Character is simulating physics.This prevents the character from losing network relevance when simulated (or attached to a simulated object).

* Static and skeletal mesh sockets now use the supplied Relative Scale.Older-format data will reset scale to (1, 1, 1) to avoid causing problems when upgrading.

* Timer Handles are now 64-bit values.

* Calc Radial Shake Scale (in Player Camera Manager) uses camera location instead of actor location, since actor location is not replicated to the server.

* Using wildcard operator with the "KismetEvent" or "ke" console commands will now only trigger the event on objects in the world in which it was triggered.

* Was Just Pressed, Was Just Released, Is Key Consumed, and Is Pressed now correctly handle AnyKey.

* When blending out Camera Anims, the blendout is not restarted, since this will cause a pop if non-immediate Stop is requested again.

* You can now run more than 10 Play in Editor sessions simultaneously.

### Learning Resources

#### In-Editor Help

* Bugfix:"Next Tutorial" button now links to the designated tutorial.

### Localization

* New:Added an Asset Localization context menu to the Content Browser.This enables you to create, edit, and view localized assets from any source asset, as well as edit and view source assets from any localized asset.

* New:Added methods to remap and restrict the available cultures.

    * You can now use the config system to remap cultures (either in DefaultGame, DefaultEngine, or DefaultEditor), to deal with platform remappings that aren't natively understood by UE4.

        * This is represented by an array of semicolon separated mapping entries:SourceCulture;DestCulture.

        * The remapping is handled by FInternationalization::GetPrioritizedCultureNames.

    * You can also now disable certain cultures that might be placeholder (either in DefaultGame, DefaultEngine, or DefaultEditor) in certain builds.

        * This is represented by an array of potentially semicolon separated mapping entries: `Culture[;BuildConfig[,BuildConfig,BuildConfig]]` (no build config(s) implies all build configs).

        * The filtering is handled by FInternationalization::GetCulturesWithAvailableLocalization.

* New:Improved the culture fallback detection for Chinese (or any cultures that use scripts).

    * If given a culture without a script code, we now try and work out what script should use based upon the available cultures.

        * For example, if we were given "zh-CN", we would detect "Hans" (from "zh-Hans-CN") and then process "zh-Hans-CN", "zh-CN", "zh-Hans", and "zh" in order until we find one with matching translations.

    * This allows you to use "zh-Hans" and "zh-Hant" for Chinese translations without running into issues on platforms that don't provide the script code.

* Bugfix:An issue was found and fixed with FText FFormatArgumentData that could potentially cause packages to fail loading in packages created prior to Release 4.11.

* Bugfix:Fixed a crash that could occur when using the Google Pinyin IME, the QQ IME, or the Sogou IME.

* Bugfix:Fixed localization for placement mode Cube, Sphere, Cylinder and Cone strings.

* Bugfix:Fixed the asset localization gatherer not reporting conflicts correctly.

* Improved the way localized packages are handled in UE4.

    * Most of the localization concerns that had been added to the FPackageName API have been removed in favor of using FPackageName::GetLocalizedPackagePath in a few key places to perform package localization when loading.

    * This change fixes an issue where the package localization wouldn't consider less specific cultures when loading packages (eg, if your culture was set to en-US, it wouldn't consider en packages), and also allows prioritized fallback of localized packages (eg, you may have an en-GB texture and an en texture, but only en audio).

* Literal escaped character sequences parsed from string literals are now un-escaped when gathering them for localization.

* UAT now stages all project translation targets.

### Networking

* New:Added the ability to have single pass, partial network profile streams (i.e. you don't need to change maps to force it to do the final save).

* New:Added "demo.minrecordhz" cvar to set a floor on replay recording rate per actor.

* New:Added a new replication condition, COND_ReplayOrOwner, for replicating properties to replays as well as the owning connection.

    * This is useful for properties that would normally be COND_OwnerOnly, but would also be used in replays.

    * The Ability System Component’s Activatable Abilities’ replication condition is now COND_ReplayOrOwner, so that these abilities can be displayed in replays.

* New:Added support for async loading worlds when playing back replays (demo.AsyncLoadWorld 1).

* New:Added support for getting replay ID from the Network Replay Streaming interface.

* New:Downgraded some non-critical network logging from warning verbosity to log verbosity.

* New:HTTP Network Replay Streamer now caches downloaded info for more responsive playback/scrubbing.

* New:Overhauled IPv4/IPv6 and multicast handling.

* New:Recording actors for replays is now amortized more evenly across multiple frames.This helps smooth out spikes in CPU usage when recording replays.

* New:True network saturation detection support added.

    * UNetConnection::RemoteSaturation contains a value of 0-1, which means the connection is 0-100% saturated.

* New:Implemented removal of expired transport nodes.

* New:We no longer replicate movement properties in replays now that we save this data externally.

    * Added new replication conditions that exclude replays.

    * Added ability to change replication condition of super properties.

* New:We no longer use package guid when determining if network connection is compatible.We now only use the checksum built from replicated properties (so as long we you don't change a replicated property in a package, it can load even if it differs on server/client).

* New :Removed SLIP overhead from network bandwidth stats.Also, added per-connection bandwidth stats.

* Bugfix:Using -notimeouts will no longer prevent a PlayerController from being destroyed if the player was explicitly kicked.

* Bugfix:Fixed an issue where servers would GC objects, and client would refer to it.We now allow the server to re-load these objects.

* Bugfix:Fixed a bug in Network Driver where a spawn-deferred actor (over multiple frames) could end up being considered for replication even though it hadn't completed its initialization.

* Bugfix:Fix bug where enums would use too few number of bits when serializing over network.

* Bugfix:Fixed a bug in how we clamp replay delta seconds, which could cause issues when the server was running in slomo, and keeps it consistent with how delta seconds are normally clamped.

* Bugfix:Fixed a crash that could occur when attempting to seamless travel while a replay is recording.This only affected non-editor build configurations.

* Bugfix:When trying to play a replay using the "demoplay" command in an Execute Console Command Blueprint node, there is no longer an indefinite hang.

* Bugfix:Fixed an issue that could cause replicated properties of actors statically placed in a map not to update when scrubbing to a new time in replays.RepNotify functions for these properties will now be called as well.

* Bugfix:Remote player controllers on a server are no longer incorrectly flagged as local player controllers after a seamless travel.

* Bugfix:Fixed an issue with certain components and actors that could have default values that differ from CDO.This would cause those properties not to replicate if they changed from their CDO to the default value.

* Bugfix:The demo.SkipTime cvar now works with negative values.

* Bugfix:Fixed issue where clients do not progress if they seamless travel faster than the server does.

* Bugfix:Tunnel default settings now save correctly.Also did a code and documentation cleanup pass.

* Bugfix:"AvgPing" perfcounter no longer reads as NaN.

* Bugfix:Fixed some network stats not getting updated without connections, causing stale values to linger.

* Compiled out tunnel support on non-desktop platforms.

* Added retry logic to HTTP Network Replay Streaming module.

* Lowered verbosity on rep layout history overflow (benign issue that can happen with latency/saturated connections).

* Separate reading/writing polling status for PS4 sockets, so we can properly wait the full timeout when we want to check read status.

* ServerReplicateActors has had a major refactor to make it more readable, removed unnecessary code as well.

* We've refactored how we save objects in the network stream, so we can now more easily skip over them if needed.The new method is also generally more stable.

### Online

* Bugfix:Fixed an issue with HTTP response headers where header values that were set more than once in a single response would cause only the last setting to be remembered.It now is appended to the previous value with a comma.The same issue existed in HTTP requests, but instead of changing the behavior of SetHeader, there is now a new function called AppendToHeader that adds a value onto an existing header.

* Bugfix:HTTP Progress delegates are no longer called after the module that registered them has been unloaded.

### Other

* New:Added in support for pushing touch events to head mounted displays if they're supported by the device.

* New:Added user activity tracking API to Engine and hooked it up to the shutdown/crash analytics to add context to error reports.

    * User activity is passed to MTBF analytics and to crash reports sent to Epic.

    * Game programmers can use FUserActivityTracking::SetActivity().

    * Blueprint users can use Set User Activity nodes.

* New:MTBF analytics is now an Engine feature (moved from Editor).

    * New attributes for runtype (editor/game) and projectname.

    * Controlled by new project settings in DefaultEngine.ini.

    * Added support for SystemWideCriticalSections on PS4.

* New:Better visualization of unknown media durations.

* New:Audio track specs are now updated each frame to better support streaming media and variable streams.

* New:Windowed fullscreen is now the default window mode in game user settings.

* New:Added a separate log category for logging analytics events payload.

* New:Advanced selective download features for UE 4.12 updates include options for Art Tools and Target Platforms on the launcher.

* New:Advanced selective download features for locale install support which will allow the ability to download specific languages for smaller downloads on the launcher.This is dependent on games and apps taking advantage of this new feature.

* Bugfix:Fixed possible issue where console window from -log could spawn off screen due to errors saving values in the .ini files.

* Bugfix:Transitioning levels with a GearVR no longer crashes.

* Bugfix:Rendering no longer freezes on GearVR after sleeping and waking up.

* Bugfix:SteamVR is now able to initialize when the Oculus runtime is running.

* Bugfix:Fixed problems with Maximized Window mode using fullscreen mode's resolution for rendering and a bug that prevented users from increasing fullscreen resolution.

* Bugfix:Fixed support for MTBF on PS4 and Xbox One.

    * Handling app deactivation callbacks and rejecting abnormal shutdowns in deactivated state on PS4.

    * Handling app backgrounding callbacks and rejecting abnormal shutdowns in background state on XB1.

    * Reporting abnormal shutdowns on PS4 as AbnormalShutdownPS4 since we can't tell the difference between crashes and abnormal shutdown on that platform.

* Bugfix:Fixed the black screen after Alt-Tabbing back into game in Native Fullscreen mode.

* Bugfix:The VR PIE analytics event now has a proper event name.

* Bugfix:Fixed a culling issue caused by late update on HMDs.

* Bugfix:Rewrote async media resolve handling code to prevent a race condition crash when a player is destroyed.

* Shader Compiler Environment now uses ANSICHAR instead of TCHAR strings to store values to save memory.

* Focus is restored to the default widget on window activation only if it wasn't activated with the mouse, so that for mouse activation the focus gets set to the widget under the cursor.

### Physics

* New:Add the option to scale linear limits of physics constraints.

* New:Added map check warning for StaticMeshActors with collision enabled but no collision geometry.

* New:Added simulation space support and external forces to anim dynamics.

* New:Added validation to existing and incoming cloth chunks to make sure there are no more than 4 influences on that chunk.Existing chunks will not cause errors, but will log warnings.

* New:Expose contact offset values to project physics settings.This value overrides the cvar that already exists.

* New:Primitive data in physics assets can now be edited using the details panel.

* New:Simplify character physics code so that it pushes at impact.The old offset code is still available with flag.

* New:Added clamping of Friction, Restitution, Density and RaiseMassToPower properties of PhysicalMaterial.

* Bugfix:When a component's mobility is changed to static, its parent will no longer remain marked as simulating physics.

* Bugfix:Cloth behaves smoothly when changing LODs.

* Bugfix:Changing custom collision of blueprints now updates placed instances without needing a restart.

* Bugfix:Fix for radial force components applying impulses multiple times to destructible components.

* Bugfix:Hit notifications now properly report materials by face index.

* Bugfix:Set constraint works properly from construction scripts.

* Bugfix:Simulated physics objects no longer start to simulate before the level is fully loaded.

* Bugfix:Fixed vehicle up and down gear ratios, which were previously assigned incorrectly.

* Bugfix:Welding now works correctly when a group that is welded together is welded to another (i.e. one actor to another).

* Bugfix:Fixed actor collision enable changes not affecting destructible mesh components.

* Bugfix:BP callable functions that affect skeletal mesh component transforms now work when simulating physics.

* Bugfix:Cloth solver frequency can no longer drop below 1.

* Bugfix:Cloth update uses the skeletal mesh component update mode to decide on updates rather than render status.

* Bugfix:Collision drawing (in editor and game) works correctly on hidden StaticMesh instances.

* Bugfix:Fixed components not creating physics state when transform moves from invalid (small scale) to a valid transform.Now, a body is instantiated with the smallest possible scale.

* Bugfix:Fixed destructible mesh reimport crash due to LOD Models not being cleaned up.

* Bugfix:Unassigning cloth in Persona when the mesh has more than one clothing asset no longer causes a crash.

* Bugfix:Fixed ensure caused by empty bounds on destructible component when all chunks are inactive.

* Bugfix:Fixed issue with incorrect bounds for meshes that had Consider All Bodies enabled.

* Bugfix:Removed a memory leak in cloth (1.43 KB per cloth chunk per render creation) and unsafe memory management of all other vertex factories.

* Bugfix:Fixed required LOD bones when associating a cloth chunk that uses bones that aren't weighted to that LOD.

* Bugfix:Self-intersecting aggregates now clear self-collision bitmaps, which prevents broadphase crashes.

* Bugfix:If using fixed framerate, we sleep when performance is faster than expected.

### Platforms

* New:Added support for deploying and launching to multiple targets from a single UFE command.

* New:Enabled IPv6 support on iOS and Mac.

* New: tvOS has been enabled in the binary release.This platform is still in an experimental state and similar to IOS.Only content-only projects can be packaged from Windows, but the full tool chain is available on Mac.

* Bugfix:Fixed an issue where FMath::RandHelper sometimes returned the upper-bound integer value on several non-windows platforms.

#### Android

* New:Binary build can now enable different Android architecture options if they are included with the installed platforms.

* New:Added ability to pass -Architectures and -GPUArchitectures to UBT on the command line, so that other Android Architectures can easily be built/distributed from UAT.

    * -Arm64 versions added to binary build for now. 

* New:Added addLibrary and removeLibrary to APL (contributed by robertfsegal).

* New:Added support for different Ant verbosity settings during packaging.

* New:An uninstall batch or script file is now written for packaged projects.

* New:Android Vulkan dynamic loader with fallback to ES2 is used if either the loader or driver is not available when Supports Vulkan is enabled.

* New:Deployment for Android now runs Ant with -quiet first, and will rerun without if there is an error to get the log.

* New:Updated to support NDK r11c.

* New:Android can act as server with OnlineSubsystemNull.

* Bugfix:Android movie playback now handles cases where the full surface is not used on some Android devices.

* Bugfix:Fixed a crash with the WebBrowser UMG widget when running on devices with Android 6.0.

* Bugfix:Fixed Android In-App purchase data reporting back with product identifiers not matching the pricing and descriptions.

* Bugfix:LoadString function for the Android UMG WebBrowser widget no longer allows the user to specify HTML text directly.

* Bugfix:Fixed UnrealBuildTool not honoring an override of the Android toolchain version in a project'sDefaultEngine.ini file.

* Bugfix:The engine now correctly gets the GooglePlay User's Alias and PlayerID when the External Login UI is used.

* Bugfix:Removed the hard-coded Use Unity Build variable in UBT for Android.

* Bugfix:Corrected SupportsVulkan check for Vulkan shader format (need glslang library, not SDK)

* Fixed permissions on new uninstall script on Mac.

* If NDK level set above 19 forces minSdkVersion to 21 or above to prevent installation on unsupported devices.

* Set the DT_SONAME field in linker (stops warning toast on newer Android versions).

* We now use a third-party vulkan header if NDK11 or VULKAN_SDK are not available.

* Added additional architecture support for stripping symbols.

* Added cxa_demangle.Build.cs and dependency in Core instead of hiding it in UEBuildAndroid.cs as a hardcoded link.

* Added requirements to ARM64 and x86_64 tooltips.

* Media urls with dots but no actual extension can now be used.

* Vulkan-only Android code builds can be made.

* Added protection against calling Input Device methods added in KitKat on older devices.

* We now broadcast a Media Event called Media Opened when media opens successfully.

* Moved an audio warning to show proper error result code.

#### iOS

* New:Delta Copy is now bundled with UE4 and no longer needs to be installed separately for use in remote compiling.

* New:Performing a Package in the editor will now create an Xcode-compatible archive file.This is still a work in progress.

* New: tvOS devices are properly filtered out when launching to an iOS device, and similarly, iOS devices are filtered out when launching to a tvOS device.

* Bugfix:Intermittent crashes on Metal due to over-releasing of texture resources have been resolved.

* Bugfix:Fixed an issue which prevented enabling the IOS Online Subsystem when only In-App Purchasing was required.

* Bugfix:Fixed an occasional crash on IOS during startup on iOS 9 devices.

* Bugfix:Fixed occasional rendering and animation issues when compiling an IOS game for smaller size.

* Bugfix:Support for iPhone SE device profiles works correctly, and support has been added for iPad Pro 9.7 device profiles.

* Disabled Multiple Render Targets in Metal on A7 devices, since it doesn't support a wide enough MRT for GPU particles

* Re-enabled metal on iOS 8 devices as a shader compiler issue has been fixed by Apple in IOS SDK 9.3.

#### Linux

* New:Added compiler hints so branches in check() are expected not to be taken.

* New:Added code for CPU identification to Linux platform abstraction layer.

* New:Crash folders on Linux now have predictable names based on crash GUID, which is passed in on the commandline.

* New:We now attempt to set exec permissions before executing files.

* Bugfix:Fixed crashes in crash handler when handling stack overflow.Adds 128KB of signal stack per thread.

* Bugfix:Fixed CrashReportClient crashing in unattended mode.

* Bugfix: hlslcc now strips asserts in Release.

* Bugfix:Logs are no longer cut on normal quit on Linux.

* Bugfix:We now switch to "crash malloc" on crashes and eliminate a rare deadlock during handling signals.

* Linux crash/ensure data will now be saved in Saved instead of Binaries, making it easier to run from read-only media.

* Case-insensitive search is used in the file open dialog on Linux.

* To avoid excessive spam, warnings are no longer forwarded to syslog().

* Linux crash handling is improved by ignoring signals except where explicitly handled, and forcing vfork() when starting crash reporter.

* Hitches are reduced when generating ensure() callstacks by not parsing debug info.This also reduces memory consumption.

* Ensure() is now reported via the crash reporter.

* SIGTRAP is now treated as crash.

#### Mac

* New:Added a "-metaldebug" command-line to force enable the Metal validation layer when running outside Xcode.

* New:Added editor settings for selecting the direction of scroll gestures for 3D and Ortho viewports.This allows Mac users with trackpads or Magic Mouse to use Natural scrolling.

* New:Crash logs produced while running commandlets from AutomationTool are now printed to the output log.

* New:Enable full PostProcessSelectionOutling on OpenGL versions lower than 4.2.

* New:Apple's Driver Monitor stats are exposed into UE4 stat groups.DriverMonitor has the common stats, DriverMonitorAMD, DriverMonitorIntel, and DriverMonitorNvidia have the vendor/GPU specific stats.

    * The Metal and OpenGL RHIs update the driver monitor stats group for the current GPU at the appropriate time.

    * These stats show details of GPU core, memory and bus utilisation that can be helpful when profiling.

* New:Implement Async Compute support in MetalRHI for AMD GPUs which provide it.

* New:Implement Metal support for index buffer SRVs.

* New:Implemented operation threshold submission of Metal command buffers to keep the GPU busier and not just idle waiting for the CPU.

    * Whenever the Console Variable "rhi.Metal.CommandBufferCommitThreshold" is set to a positive value and the current command buffer has >= draw/dispatch operations outstanding then the command-buffer will be committed at the next encoder boundary.

* New:Initial implementation of parallel execution in Metal RHI to support command-encoding across multiple threads.

* New:Metal object lifetime tracking has been reimplemented as stats in the stat-group, though the old system is maintained as a debug-only tool that could (and probably should) be extended to track over/under-release bugs.

    * Currently the texture count will be distorted by texture SRVs so this will need improvement, but other stats should be reliable.

* New:The mechanism to explicitly select the GPU to use on Mac has been unified so that it applies to both Metal and OpenGL.

    * The value is accessible from Mac Platform Misc's Get Explicit Renderer Index function and is specified as a 0-based index into the GPU listed in Get GPU Descriptors.Using a value of -1 will disable explicit selection and let the OS choose the default device.

    * The value can be set via the console variable 'Mac.ExplicitRendererID', by specifying the command-line '-MacExplicitRenderer=X' (where X is the index) or selected in the Mac Graphics Switching plugin's settings when using the Editor.

* New:Added an explicit, experimental option for using OpenCL to accelerate the convex decomposition tool on Mac rather than assuming that it is desirable (defaults to off).

    * This may prevent a crash on Nvidia's OpenCL drivers while enabling AMD & Intel users to run it if desired.

* New:Added implementations of unpackHalf2x16, countbits, firstbitlow & firstbithigh for Metal.

* New:Added autorelease pools around sensitive functions in Metal RHI such as Metal Viewport's Get Drawable call to ensure that we control all object lifetimes.

* New:Added shader macro STENCIL_COMPONENT_SWIZZLE to access the stencil component of a texture - not all APIs can swizzle it into .g automatically.

* Bugfix:Fixed a Metal validation error when trying to set a 0-sized scissor rectangle.

* Bugfix:Fixed broken Metal uniform buffer allocation - the old Suballocate routine had been interfering with the sized-pools and potentially causing incorrect buffer usage.

* Bugfix:Metal shaders now compile properly when Xcode isn't installed by falling back to the slower runtime compiled text format.

* Bugfix:Fixed crashes when enabling ES2 emulation in the Editor when running on Mac Metal by adding an ES2 emulation shader platform.

* Bugfix:Implementation of BeginRenderingPrePass was changed to clear the depth and stencil buffers only when it is asked to.

* Bugfix:Metal reporting of GPU memory through the RHI is correctly treated as being in bytes, not MB.

* Bugfix:Fixed synchronisation errors caused by overflowing the ring-buffer inside each Metal context.Instead, we now reallocate it so that it is sufficiently large.

* Bugfix:GetPrimaryGPUBrand now returns the primary GPU as expected, which for dual GPU Macs means the discrete GPU connected to a display.Where no GPU is connected to a display, the first GPU will be reported.

* Bugfix:The intermittent errors with editor selection outline on AMD 9000 GPUs under Metal (M295X & M395X) have been fixed.

* Bugfix:Editor windows no longer reorder on Mac on app activation when a notification is on screen.

* Bugfix:Fixed Matinee video recording when using Metal to render on Mac by inserting an intermediate texture before drawing to the screen.This ensures there is always a render-target to draw to and read from.

* Bugfix:Fixed support for custom icon for non-monolithic games on Mac.

* Bugfix:Compilation via Distcc on Mac OS X was fixed.

* Bugfix:A submit-and-wait is enforced in Metal when contexts are being destroyed to prevent kernel panics in drivers which continue to process the now-abandoned command queue and encounter invalid resources.

* Bugfix:Only spawn one ShaderCompilerWorker for each physical core on Mac as they consume so much memory and can cause OS X to suspend all running processes to display the ''Out of Application Memory" dialog, which requires user interaction.

* Bugfix:Removed erroneous declaration of SM4_PROFILE and SM5_PROFILE when using METAL_SM4_PROFILE/METAL_MRT_PROFILE /METAL_SM5_PROFILE respectively and fixed up the few locations that care about these defines explicitly.

* Bugfix:Fixed a memory leak in Metal by caching a temporary texture created in order to render the Material Editor properly.

* Bugfix:Identifying the selected GPU in Mac OpenGL no longer crashes.

* Bugfix:Added a workaround for a bug in OS X 10.11.5 that can cause a hang when an application switches the active GPU on a dual-GPU MacBook Pro.

* We now use managed memory on Mac Metal for buffers.

* We capture the system.log contents from the moment we boot to the point we crash to report GPU restarts and other system errors not written into our own logs.

* Changes have been made to the shader-cache's default GameVersion that ensure only caches valid for the current build will be used.This is intended to keep load time growth down to what is strictly required.

* Construction of command encoders in MetalRHI are deferred on AMD GPUs to eliminate empty encoders that don't perform a clear operation.This improves performance slightly.

* Mac compile times in Development & higher have been improved at the expense of optimisations in Slate/Editor code wrapped with PRAGMA_DISABLE_OPTIMIZATION_ACTUAL or PRAGMA_ENABLE_OPTIMIZATION_ACTUAL.These pragmas are defined for Apple LLVM 7.3.0 and higher.

* Metal is disabled on Mac OS X versions prior to 10.11.4 because the drivers are too buggy.Many issues that users would encounter have been fixed in 10.11.4.

* Point-light shadowing on Intel's Metal driver as of 10.11.4 is enabled.

* We no longer set shader resources from current uniform buffers in OpenGL when performing a shader predraw - the resources are tracked and set by the shader cache explicitly, so this may just access stale data.

* Enabled Metal resource lifetime delay on all platforms, not just iOS, to try to address intermittent invalid resource errors.

* Implemented the same stencil SRV fallback on OpenGL as for Metal by executing a blit at resource bind time so OpenGL versions at or below 4.2 can sample depth and stencil at the same time.

* Implemented GetTextureBaseRHI for Metal to avoid unnecessary virtual function call chain to resolve the FMetalSurface* from an RHI texture.

* Improved the shader cache code documentation.

* In Metal, scissor rect is set correctly through the state cache so that it remains in-sync when rendering and things don't clip incorrectly.

* Wants Selection Outline defaults to true so that editor selection outlines work reliably.

* Fixed a typo in Metal Features enum.

* RHI Block Until GPU Idle has been implemented on Metal.

* On Mac, we probe IORegistry to provide basic GPU details which is used to implement Get GPU Driver Info and correctly specify the GPU capabilities in Metal RHI.

* For performance reasons, we only verify the vertex attribute layout for Metal in debug builds or when using development with the Metal debug layer turned on.

* We pull the dmucs coordinatior name/IP from the settings file if it is present rather than the user having to set it - this means you can run distributed compiles using a DistCode coordinator on a remote machine.

* Reduced Metal's peak memory usage when streaming texture data during level load.

    * When uploading data to Shared memory, Metal textures dispose of the source buffer immediately because it won't be required after the call to Replace Region.

    * Added an optional Console Variable "rhi.Metal.MaxOutstandingAsyncTexUploads".If the current outstanding count of asynchronous texture uploads is greater than the specified Console Variable, wait for all operations to complete before purging the used buffers.By default, the Console Variable is set to 0, which disables the tracking and the game will use all available memory.

* Removed the -fno-fast-math workaround for Atmosphere rendering on Mac Metal and instead modified the shader code to avoid the problem directly.

* Removed the hlslcc major version from the Metal and OpenGL shader formats to ensure that there are enough bits to represent the different version components.

    * There's no expectation that the major version of hlslcc will change and it will soon be removed entirely.

* Removed the presentable flag if present when creating a texture for predraw - for some RHIs like Metal this flag is invalid unless there is an attached viewport.

* Removed the uniform buffer resource caching from Metal.

* Removed the uniform buffer resource caching from OpenGLDrv & implemented GetTextureBaseRHI to avoid unnecessary virtual function.

* Silenced stderr reporting from Apple's 'defaults' tool when accessing the settings for Mac distributed building.

* Simplified Metal Context by having only one Submit Commands Hint implementation.

* Slightly improved Mac Metal performance on AMD by only creating texture-views when absolutely necessary.

* Switch uniform buffers to managed memory on Mac as this is more appropriate for AMD & Nvidia GPUs.

* Used a dispatch_semaphore, not an FEvent, for Metal free-list synchronisation as the dispatch_worker threads can't be properly set up for FStats.

* We now warn the user when trying to run on OpenGL 3.2 GPUs that they are running unsupported and there may be rendering errors and performance problems.

* Added a workaround for a Metal shader compiler problem on Nvidia GPUs - sample_compare doesn't like taking level(0) as its LOD-option argument and may not currently support any LOD-option.

#### PlayStation 4

* New:Added to/from json conversion functionality to Online Message Payload - message payloads are now sent/received as json instead of being serialized as byte arrays.

* New:Replaced Tsc with Process Time Counter.

* New:Added a timer around PS4 initialization and print the result out to the log.

* New:Added ability to write the log to /temp0 in shipping builds.

* New:Added BC6H and BC7 support.

* New:Added mouse support.

* New:Added Movie Stream improvements.Now uses GPU YUV conversion and Software2 decoder.

* New:Added pragma optimization enable/disable macros.

* New:Added RHI Bind Debug Label Name support for naming UAVs, Shaders and Render Targets to display in Razor GPU captures.

* New:When querying for online play privilege, we now validate the signed-in user and check age restriction.

* New:DualShock4 motion events are now disabled by default and controlled by the .ini option bDS4MotionEvents in the PS4Application section.

* New:Implemented an experimental GPU memory defragger for streaming textures.

* New:We load title-specific json configuration from `\titledata\<titleid>\title.json`.

* New:PS4 "out of GPU memory" logging now has more detailed information.

* New:PS4 will now fall back to allocating from flexible memory when the main memory area runs out.Most titles should see 100-200MB of extra memory available.

* Bugfix:NumInstances is now reset after DrawIndirect calls.

* Bugfix:Fixed Submit Done not getting called due to Save Data dialog.

* Bugfix:Fixed an erroneous warning log indicating that initializing the session interface failed if rooms were disabled.

* Bugfix:PS4 virtual keyboard no longer crashes if it is open when the text box that summoned it is destroyed.

* Bugfix:Fixed a crash that could occur on PS4 when rendering very large scenes.

* Bugfix:Cross thread file handle leaks have been resolved.

* Bugfix:Fixed loss of keyboard input after display of IME dialog.

* Bugfix:Fixed Media player seek and duration.

* Bugfix:Fixed memory alignment for back buffers.

* Bugfix:PS4 now uses the correct country codes for Spanish and Spanish - Latin American.

* Bugfix:Fixed race condition and crash updating slate vertex buffers on the render thread while they are in use on the RHI thread.

* Bugfix:Fixed session records not being written to the KeyValueStore.ini on packaged builds, now stored in /download0.

* Bugfix:Fixed WebAPI handling of non-ascii data.

* Bugfix:Fixed Grayscale SRGB support.

* Bugfix:Added missing Get No Affinity Mask.

* Bugfix:Disabled a layer of IO caching on PS4 that would cause large memory spikes during loading for little benefit.

* Bugfix:GPU bubbles caused by the CPU falling behind on submissions during a frame are now subtracted from 'stat unit' time as they are in development builds.

* Bugfix:OnlineExternalUI ShowWebUrl handles long URLs correclty now.

* Bugfix:Processing many reflection captures during level loading will no longer cause large GPU memory spikes.

* Bugfix:Fixed Render Target Output Format using the wrong output index for velocity rendering when using r.BasePassOutputsVelocity i set to True.

* Bugfix:Unlocking linear textures on PS4 no longer crashes.

* Bugfix:Fixed occasional WebRTC crash on SIGPIPE.

* Disabled platform file cache wrapper on PS4 by default.

* The presence of an external keyboard will now suppress the requirement for the virtual keyboard.

#### Xbox One

* New:Created better default thread affinities.Added GetAudioThreadMask() to the list of used Xb1 affinities.Fixed up places where the audio thread affinity was being ignored.

* New:Hardware decompression is now supported and used by default on Xbox One.

* New:The March 2016 XDK is now the default supported XDK.

* Added MemoryBarrier function to prevent compiler from reordering writes.

* Changed GPUMalloc memory mode to write combined, as this was causing all kinds of rendering issues.

* Enabled parallel occlusion queries.

* Bugfix:Fixed a movie streamer memory leak and fixed playing multiple movies in a row.

* Bugfix:Fixed possible texture corruption in rare circumstances.

* Bugfix:RHIUpdateTexture2D/3D is now able to write to the destination texture.

* Bugfix:UI no longer flickers when there is a lot of rendering happening.

* Bugfix:Fixed an access error issue if a duplicate CulturesToStage entry existed during resource generation.

* Bugfix:Fixed an issue that prevented tools from using non-default Xbox One targets.

* Bugfix:Fixed an issue where an incorrect setting on Xbox One caused the wrong number of task threads to be created.This will improve performance in some cases.

* Bugfix:Fixed an issue that would prevent in game console input from being processed before a control key (e.g. Backspace) was pressed on Xbox One.

* Bugfix:Packaging settings are now correctly being pulled from game INI files instead of engine INI files.

* Bugfix:Creating textures at non-power of 2 sizes with initial data no longer causes a crash.

* Bugfix:Fixed missing GPU particles on XB1.

* Bugfix:Motion blur is now properly applied to moving meshes.

* Bugfix:Critical Sections now behave the same as on Windows.

* Bugfix:Minor fixes to DFAO and DF Shadowing.

* Rebalanced memory bus priority so that the CPU gets a bigger share.

* Removed per-frame caching of uniform buffer resources.This is a small performance improvement.

* Xbox One now uses lock-free lists for passing messages between threads.

* Made occlusion query system more robust.

#### VR

* New:Oculus Rift:Added support for letterboxed and cropped/filled mirroring modes.

    * "hmd mirror mode 3" (eMirrorWindow_SingleEyeLetterboxed) enables letterboxed mirroring.

    * "hmd mirror mode 4" (eMirrorWindow_SingleEyeCroppedToFill) enables cropped mirroring. (fills whole screen)

    * Only when cropping is required, we now clear the backbuffer to black.

* New:VR Stereo Layers improvements.

    * Initial Oculus Rift support.

#### HTML5

* New:Enabled emscripten SIMD for HTML5.

* New:HTML5 SDK project settings - show user defined HTML5 browsers.

* New:PhysX updated - code changes for HTML5 builds.

* New:PhysX updated - generated Makefiles for HTML5.

* New:PhysX updated - recompiled libraries for HTML5.

* New:We now automatically reload the HTML5 page if a script download has failed.The error message will still be seen, but only briefly.

* Bugfix:Corrected VS 2015 websocket lib to look at the right offset.

* Bugfix:We fire off a "resize" event to force the canvas dimensions to be updated with browser's actual dimensions instead of starting off with hard coded 800x600 window size.

* Bugfix:Emscripten config file timestamp is no longer unnecessarily modified.This prevents system libs from being recompiled all the time.

* Bugfix:Load/save with "negative char size value" fixed - C++ functions used unsigned int 8 while javascript was running with signed types.

* Updated HTML5 ThirdParty libraries built with emscripten 1.35.0: freetype2.6, ICU, libogg, libPNG, libvorbis, PhysX, zlib.

* Chrome has been re-enabled to show up in the device manager.

* We now use HOME (OSX) and USERPROFILE (Windows) on the appropriate target platforms during emscripten builds.

#### Windows

* New:PC builds now log engine initialization time with the load time tracker.

* Bugfix:Fixed a bug in Windows Application that was causing the Get Display Metrics function to incorrectly return the max resolution of the last enumerated monitor for all monitors.

* Bugfix:Rejoining a Steam lobby quickly after leaving no longer causes the player to get booted from the session.

* Bugfix:Applying windowed mode on Windows now works properly, instead of restoring the previous mode.

* Click location accuracy at low framerates on PC is now greatly improved.

* We now use the physical platform file when writing out steam_appid.txt, so that it still gets written to the correct location when running with cook on the fly.

#### All Mobile

* Bugfix:Fixed In-App Purchase Callbacks so they still fire whether or not the game is paused.

* Disabled heartbeat thread and checking on mobile platforms.

### Programming

* New:Added support for pre- and post-build steps specified inside .uproject and .uplugin files.

    * Steps are specified as a list of shell commands per target platform, and are written to a shell script for execution by UBT.

    * The following target properties are expanded automatically: $(EngineDir), $(ProjectDir), $(TargetName), $(TargetPlatform), $(TargetConfiguration), $(TargetType), $(ProjectFile), $(PluginDir).

    * Example:"PreBuildSteps": { "Win64": [ "echo Hello World", "echo The current project being compiled is $(ProjectFile)" ] }

* New:Removed duplicate binary files and reduced the size of PDBs for CEF3 to reduce the total download size.

* New:Support for the Visual Studio 2012 and 2013 toolchains has been deprecated.

    * The only supported toolchain for UE4 is now Visual Studio 2015.

        * Visual Studio 2015 Community Edition can be downloaded from: http://go.microsoft.com/fwlink/?LinkId=532606.

    * It is still possible to generate Visual Studio 2013 projects.

        * Visual Studio 2013 projects will be generated if a platform SDK that is not compatible with the Visual Studio 2015 IDE is detected or if -2013 is specified on the GenerateProjectFiles.bat command line.

        * Visual Studio 2013 projects only allow the use of the Visual Studio 2013 IDE.Projects will always build using the Visual Studio 2015 toolchain, so Visual Studio 2015 will still need to be installed on any PC building UE4.

* New:The project Target.cs file can now specify a filename using for a set of signing keys which will automatically be compiled into the executable, restricting the use of pak files to only those signed with the same key

    * Have your project's target.cs file specify a workspace relative filename in the "PakSigningKeysFile" of your game/client Target Rules class

* New:UBT writes to the log to indicate whether pak signing keys were found and included in the executable

* New:Visual Studio visualizers now support non-ASCII text for FNames (Credit to Yoshifumi Ohtsu of ORCA).

* Bugfix:Rebuild now works properly when binary version is installed in Program Files (x86).

* Improved cooker performance by several minutes during long cooks by fixing an early out pathway to work properly when a cooked package was not ready to save and was still waiting on asynchronous tasks to complete.

* Minor DDC performance improvement when using Get Async Results (move the result instead of copying it).Saves about 15sec during long cooks.

### Rendering

* New: 'r.VisualizeOccludedPrimitives 1' shows statically occluded primitives in dark red.

* New:A new console variable 'r.ProfileGPU.Sort' was added to control the sorting mode of the 'profileGPU' output.

* New:A slew of new material functions are available in the material editor:

    * Texture Bombing:Texture bombing takes a tiling texture input and blends multiple samples with offset coordinates with some flipping and rotation in order to reduce tiling artifacts.It blends to neighbors so it can be used with any textures, not just textures with tiles or borders.This implementation works using heightlerp so that the transition between offset samples avoids soft blending artifacts which can muddy the colors.

    * Chroma Key Alpha:This is a classic green screen node.It gives some basic flexibility for alpha thresholds as well as a despill mask that you can use to either desaturate or blend additional edge coloration to help remove spill from the original chroma color.

    * Contrast Preserve Color:This function lets you increase the contrast of a color texture without altering the relative colors.The behavior of this node is similar to what would happen in photoshop if you first duplicated a layer and set it to "Color" mode and then increased the contrast of the original layer.

    * Luminosity and Color:Similar to above but simply combines a single channel as luminosity with a color input.Also behaves like a combination of luminosity/color layers in photoshop.

    * Texture Bombing POM:This one is to be used with caution.Definitely way too expensive for any modern consoles, but may be of some use to archvis or cinematic teams.It performs texture bombing with Parallax Occlusion Mapping, which means a unique POM function is performed for each sample, which means 4 times for each use.So this means a POM-Bomb material with only 2 textures will perform hundreds of texture lookups considering the tracing.

    * Bricks and Tile UVs:This is mostly meant to help bake procedural textures from inside the editor.As a result, some things in this function assume you want the macro offsets to repeat ever 0-1 overall UV. This is important since with the "Stagger" offset, tiles need to match their other half on the other side.So the macro offset pattern is itself a tiling pattern.

    * Landscape Manual UVW:Returns a 0-1 gradient on each axis encompassing the bounds of the whole landscape based on the input min and max positions.Positions must be manually defined.

    * 1D to 2D Index:Converts a position from 1d to 2d based on given grid size.

* New:Added a mesh texture coord size accuracy view mode to tweak texture streaming.

* New:Added a primitive distance accuracy view mode to tweak texture streaming.

* New:Added cvar "r.CustomDepth.Order" to get CustomStencil before DBuffer to allow masking in DBuffer decals.

* New:Added cvar "r.CustomDepth.Order" to get CustomStencil before DBuffer to fix lighting issues on characters.

* New:Added Pause Texture Streaming function to the Texture Streaming Manager interface to allow external systems to pause and unpause texture streaming.

* New:Added Morph Target support for experimental Skin Cache feature.

    * Added Recompute Skin Tangent feature for Skin Cache.

* New:Added a "Thickness" parameter to debug drawing functions.

* New:Added "Warmup Time" and “CPU Collision” to content browser information for Particle Systems.

* New:Added "Was Recently Rendered" function to Actor, with optional tolerance in seconds.

* New:Changed HLOD textures to ignore r.streaming.mipmaplodbias.(Current detection is string based when the Streaming Texture is created, and should be replaced by a HLOD texture group in the future.)

* New:Changed Resolution Quality scalability settings from int32 to float, to allow hitting exact 3D render resolutions that aren't an integer percentage like 900p from 1080p.

* New:Depth Of Field Quality setting change to aid non-realtime workflows by enabling a faster (but still not realtime) very high quality setting.

    * r.DepthOfFieldQuality = 4 corresponds to the prior behavior of associated with = 3.Extremely high quality, intended for non realtime cutscenes, CircleDOF only.(Very slow)

    * r.DepthOfFieldQuality = 3 now corresponds to a new setting somewhere between the old 2 and 3.Very high quality, intended for non realtime cutscenes, CircleDOF only.(Slow)

* New:Exposed "up direction" on Cable Component, to better support vertical cables.

* New:The "listtextures" console command now prints a stat summary after the list per Texture LOD Group and per texture format.

* Bugfix:Corrected a crashing bug in rendering shadows for objects with malformed transforms.The editor should now handle this more gracefully and log information about the offending object with an ensure message.

* Bugfix:Exposed Material Sprite Element struct to Blueprints, and added a Set Elements function to Material Billboard Component.

* Bugfix:Fixed a bug that caused separate translucency primitives to not be rendered into reflection captures.

* Bugfix:Fixed a bug where file handles for streamed texture mips wouldn't be released under certain circumstances.

* Bugfix:Rendering resources from a previous map are now immediately released during switching to a new map.

* Bugfix:Texture LOD Bias is no longer applied twice in cooked builds.

* Bugfix:Fixed a crash when updating material instances that were garbage collected.

* Bugfix:Removed a potential crash when changing FOV angle in Matinee.

* Bugfix:Fixed a potential memory leak when clearing MaterialShaderMaps.

* Bugfix:Fixed a problem that could result in separate translucency primitives only being rendered in one eye in stereo mode.

* Bugfix:Non-uniformly scaling the bounding decal region no longer affects decal normals.

* Bugfix:Fixed a rare Slate threading crash when alt-tabbing from fullscreen applications.

* Bugfix:Create Section function on Procedural Mesh Component no longer clears other sections inappropriately.

* Bugfix:Fixed FBlendableManager when using aligned data.

* Bugfix:Separate translucency shows up correctly in Shader Complexity view.

* Bugfix:Materials using scene texture or global distance fields are now displaying correctly after a shader compile, including after the component is moved.

* Bugfix:Fixed pre-pass stencil dither being cleared in split-screen.

* Bugfix:Stretched decals work correctly.

* Bugfix:Texture coordinates are now calculated correctly when building tessellated cubes with the brush tool.

* Bugfix:Fixed varying tessellation multiplier, which caused cracks in geometry.

* Bugfix:Fixed 'Vertex Color' input of ProceduralMeshComponent using the wrong Color type.

* Bugfix:Fixed wrong stencil value being set on PS4.

* Bugfix:The 'profileGPU' command now properly reports triangle and vertex counts at different levels of the marker hierarchy.

* Bugfix:Attempting to read data from a null texture no longer causes a crash.

* Bugfix:Fixed an occasional crash when accessing LPVs.

* Bugfix:Fixed an issue with CastShadowAsMasked when using Embree.

* Bugfix:Disabling the LightPropagationVolumeBlendable plugin no longer causes the engine to crash during startup.

* Bugfix:Removed memory allocation for RHI resources when running with NullRHI.

* Removed autocompletion for ToggleRHIThread and ShowMaterialDrawEvents.These features are now accessed by console variables r.rhithread.enable and r.showmaterialdrawevents, respectively.

* Removed an unused cvar r.HLODEnabled.Everything related to HLOD cvars is done through r.HLOD.

* MaterialParameterCollection will correctly rename entries when duplicate named items are added.

* Optimized HLOD transition and visibility logic.

* Render view items and LOD level can be frozen in place now.

* UpdateShadowShapes now runs on the render thread rather than the game thread.

* The variable "r.ViewDistanceScale" can now go above 1.0.

* The screen percentage cvar can now be changed dynamically when using PSVR.

#### FX

* New:BoneSocket module in cascade can now be used to spawn from all bones on a skeleton if no SourceLocations are provided.Allows sharing of a single effect across many skeletons.

* New:Decal Components now have their lifetimes exposed such that they can be set to automatically be destroyed once the lifetime expires.The decal's lifetime as a t value (0 to 1) is also exposed as a material graph node to allow controlling the look of the decal as it's lifetime expires.

* New:Mesh particles now support motion blur.Mesh particles motion blur can be configured to enable/disable based on detail/quality level settings.

* New:Particle cutout optimization works on SubUVMovie module as well.

* New:Significance feature for particle systems.

    * Game code can drive the required significance for each effect.

    * This is tested against an artist defined significance value for each emitter.Emitters can be progressively disabled based on game-specific calculation of the emitter’s significance to the scene.

    * For example, Paragon uses distance, VFX performance, and relevance to the local player to drive the required significance for its VFX.

* Bugfix:Disabled the Seconds Before Inactive optimization for non-looping effects because it can cause them to leak.

* Bugfix:Global vector fields fixed to work with fixed-bounds particle systems.

* Bugfix:Fixed a problem that could lead to emitter detail mode not being set properly when a particle system is first initialized.

* Bugfix:Cascade preview now respects the detail mode setting in the Cascade UI.

* Bugfix:Particle systems with emitters using both separate and non separate translucent materials now render correctly.

* Bugfix:Fixed issue where Ribbon particles would render an erroneous sheet to the emitter origin.

* Bugfix:Fixed rare crash bug accessing a console variable in particle code.

#### Lighting

* New:Added a CaptureOffset variable to reflection captures, which lets artists decide how the cubemap resolution is allocated, but introduces some warping.

* New:Added r.CapsuleMinSkyAngle with a default of 15, keeps capsule indirect shadows from becoming so sharp that capsules are apparent in the stationary skylight case.

* New:Added several cvars to expose mesh distance field limits, which allows higher quality.

    * r.DistanceFields.MaxPerMeshResolution, r.DistanceFields.DefaultVoxelDensity, r.DistanceFields.AtlasSizeXY, r.DistanceFields.AtlasSizeZ.

* New:Added the ability to apply DFAO to static indirect lighting, controlled by r.AOApplyToStaticIndirect.

    * Lightmaps, stationary skylight and reflection captures are all affected.

* New:Heightfields are now represented in the global distance field, which is useful for fading out water normals near shores.

    * Global distance field max distance can now be set from WorldSettings, although it will be overridden if there is a Movable Skylight.

* New:Capsule shadows are now supported in stereo rendering / VR.

* New:Improved sphere area light diffuse quality.

* New:Indirect lighting probes now use 3 band spherical harmonics, as opposed to 2 band previously.

* New:Lightmass now respects owner bHidden, and bCastHiddenShadow.

* New:Particle position is used for per-vertex lighting with particle cutouts (instead of vertex position) to give a stable result.

* Bugfix:Fixed a bug where dynamic lighting would be updated with a one frame latency.

* Bugfix:Fixed clear coat with movable skylight.

* Bugfix:Fresnel is correct on SSS skin.

* Bugfix:Fixed a crash with Ray Traced Distance Field shadows when r.DistanceFieldAO was disabled.

* Bugfix:Movable skylight now matches stationary for subsurface shading models.

#### Materials

* New:Added the option to the ScreenPosition node that will all the node to output viewport UVs.

* New:In response to user requests, deferred decals now support a negative in the transform when defining the decal bounds.

    * In the past, the transform for a deferred decal had to have all positive scale values for the decal to be displayed.So if you had inadvertently hidden any decals in your content by using a negative scale they will now appear.

* New:An early (and unfinished) version of Pivot Painter 2 is included in this build.The final and fully functional version of the script and its material functions will be in the next build.

* Bugfix:AOMaterialMask restored to working order (was broken in 4.11).

* Bugfix:Custom material nodes no longer cause compile errors with tessellation outputs.

* Bugfix:Indirect lighting on skin renders at an appropriate brightness.

* Bugfix:Shiny cloth looks correct under indirect lighting.

* Bugfix:Subsurface scattering no longer reacts differently to indirect lighting.

* Bugfix:Fixed a threading issue with Material Instance base property overrides that could cause incorrect rendering.

* Bugfix:Opacity mask materials no longer produce incorrect shadows.

* Bugfix:Fixed a bug within the "Vertex Animation Tool" MAXScript that broke compatibility with 3DS Max 2016.The resulting output images are now forced into linear color space.

* Improved detection of unused material nodes and false positives enabling features.

#### Post-processing

* New:To simplify workflows, decals will now be visible in lit orthographic views.

* Corrected a problem with the post-processing fringe effect.The problem was most pronounced for large fringe values and could lead to unexpected fringe results when the window was resized.

* Bugfix:Fixed a case where destructible meshes would use the wrong motion blur data.

* Bugfix:Fixed stereo bloom rendering.

* Bugfix:Post-process materials are now blended smoothly.

#### Optimizations

* New:Added the option to discard override vertex color data on static meshes.Projects which don't use this data at runtime can save memory by discarding it. "r.KeepOverrideVertexColorsOnCPU".

* New:Adding "-forced" to the "ListTextures" command now only shows textures with forced mip residency.

* New:Finalized support for SSAO running on AsyncCompute when a full EarlyZPass is available.

* New:Nearest-Depth Neighbor upsampling for half res separate translucency.

    * Enabled by default when r.SeparateTranslucencyScreenPercentage is 50.

    * Produces full resolution silhouettes of opaque objects in front of half res translucency.

* New:Reduced texture streaming usage for meshes hidden by hierarchical LOD meshes.

* New:Texture streamer can now compute bounds per mesh section.

* New:Textures streamed for dynamic primitives are now processed on the async streaming task instead of on the game thread.

* Minor optimization to material handing.

* Minor tweaks to default scalability settings to provide a slightly better experience for low-end machines.

* Removed unnecessary upfront allocation of 4MB in Niagara.

#### Mobile Rendering

* New:Added mobile rendering support for planar reflections.

    * Requires 'Planar Reflections' material setting to be checked before use.

* New:Materials can sample textures from the vertex shader with the mobile renderer, provided an absolute mip level is specified

* New:Mobile High Quality Gaussian DoF.

    * To use enable 'High Quality Gaussian DoF on Mobile' in post-processing settings.

    * This feature is used for feature level ES3.1, if it used with ES2 devices then standard mobile DoF is used as a fallback.

* New:New console varirables "r.OpenGL.StripExtensions" and "r.OpenGL.AddExtensions" add the ability to add or strip specific OpenGL ES extensions from the driver-reported extensions string.

    * This can be used to work around issues in specific devices.

    * For example to force specific device to use 32bpp targets for HDR rendering in DeviceProfiles.ini add: r.OpenGL.StripExtensions=GL_OES_texture_half_float,GL_OES_texture_float.

* New:GPU particle support for iOS Metal (A8+ only) and Android devices with ES3.1 support.Collision for GPU particles is not supported on mobile devices.

* New:Stationary lights can now combine CSM shadows with static shadows.

    * When a stationary light's dynamic shadow distance is > 0 and inset shadows are disabled, movable primitives will to render to CSM which can then be combined with pre-calculated static shadows.

    * For performance reasons, you must mark primitives which will receive both CSM and static shadows with 'Receive Combined Static and CSM Shadows from Stationary Lights' checked.

    * However, you can set r.AllReceiveDynamicCSM=1 to enable both CSM and static shadows for all primitives.

    * Using stationary lights with CSM requires an additional mobile texture sampler.You can reclaim this sampler and disable the feature with the project rendering setting:"Enable Combined Static and CSM Shadowing".

* Bugfix:Resolved an issue where Canvas Text Items did not correctly display some Unicode characters when running on an Android devices.

* Bugfix:Fixed an issue where Instanced Static Meshes were failing to render all instances when running in ES2.

* Bugfix:Fixed possible crash on iOS in which 2D render target components could be initialized before a valid GSystemResolution was available.

* Bugfix:"Hidden surface removal" is now properly detected on PowerVR Android devices.

* Bugfix:Material tiles now render properly on Canvas in projects with mobile HDR off.

* Bugfix:HDR rendering and bloom has been fixed on Galaxy S7 devices.

* Bugfix:Precomputed lighting samples are now correctly shifted when the world origin changes.

* Bugfix:Fix for precision issues causing incorrect modulated shadow positions on low end Android hardware.

* Bugfix:Removed halos surrounding modulated shadows when RGBE encoding is active.

* Bugfix:Resolved possible Z fighting issues with modulated shadows on iOS devices.

* Bugfix:Mobile HDR path now works on Gear VR.

* FeatureLevel es3.1's texture gamma with forward shading renderer now matches ES2's behavior.

### UI

* New:Added support for debugging safe zones (visualization on any platform and simulation on platforms that don't natively provide safe zone information).

    * r.DebugSafeZone.Mode controls the debug visualization overlay (0..2, default 0).

        * 0:Do not display the safe zone overlay.

        * 1:Display the overlay for the title safe zone.

        * 2:Display the overlay for the action safe zone.

    * r.DebugSafeZone.OverlayAlpha controls how opaque the debug visualization overlay is (0..1, default 0.3).

    * On platforms that don't natively support safe zones, you can simulate a safe zone for quick/easy testing in the editor:

        * r.DebugSafeZone.TitleRatio controls the title safe zone margins returned in FDisplayMetrics.

        * r.DebugActionZone.ActionRatio controls the action safe zone margins returned in FDisplayMetrics.

        * These both range from 0..1, and default to 1 indicating 100% of the display is safe.A typical test value would be 0.9

    * Important notes:

        * For now, you need to be running in windowed fullscreen or fullscreen for the ratio to be correct.

        * On PS4, you only need to enable debugging (r.DebugSafeZone.Mode 1), as the safe zone values are driven by the system setting you can pick in the PS4 OS menus.

* Bugfix:Corrected a regression in noise-related nodes Slate UI materials.

* Bugfix:Fixed a crash that could occur when editing an asset with an FText property.

* Bugfix:Fixed a regression with UI material nodes that required world position.

* Sub-fonts in a composite font are now only used when they contain the character to be rendered.

#### Slate

* New:Added slider bar thickness as a new style property in FSliderStyle.

* New:Added "Use Application Menu Stack" argument to SMenuAnchor, enabling programmers to create menu anchors that don't open one stack at a time.

* New:The MoviePlayer now has an OnPrepareLoadingScreen callback that modules can hook instead of relying on the PreLoadMap, which, depending on when you hook it, may be before or after the movie player.To alleviate that ordering problem - if the movie player goes to play a loading screen and one has not yet been configured this callback will be triggered so that hopefully one is supplied.

* Bugfix:Removed a crash in the menu system.Opening a new menu would lead to a window activation change which would result in the old root menu being dismissed.

* Bugfix:Fixed an infinite loop when using Ctrl+Up/Down in a multi-line editable text.

* Alt-tabbing out of a Standalone App or packaged version of a game will now trigger LostFocus.

* Changed a massive amount of things attempting to improve the Slate and VR intermingling.Popup layers should now function on widget components, lots of changes to make focus work better.

* Changing the way slate handles mouse enter/leave when the mouse is captured.Widgets in the capture path are now the only ones that get mouse enter/leave messages.Widgets in the capture path now actually get mouse enter messages after leave messages, previously they were only getting leave, along with all widgets you hovered over and later left, even if they were not part of the captor path - those same widgets did not receive mouse enter.

#### UMG

* New:Add support for animating material parameters which are used on brushes.

* Bugfix:Editing the navigation of a root UMG widget no longer crashes.

* Bugfix:Fixed aspect ratios now correctly size the right side of the screen, so that right-anchored content will fit properly inside the black frame borders.

* Bugfix:The user can no longer name an animation with a name the conflicts with a widget name.This fixes a runtime crash.

* Bugfix:Fixed a crash when undoing adding a track to an animation.

* Deprecated UWidget::GetEditorIcon and converted existing icon brushes to conform with FClassIconFinder expectations.

## Programming Release Notes

#### AI

* New:Added a function to AISenseConfig allowing native-code MaxAge configuration.

* Fixed gameplay tasks stacking and pausing, added support for stacking move tasks.

* Template AI counters (FAISenseID, FPerceptionListenerID, FAIResCounter) now work consistently across multiple compilation units.

##### Behavior Tree

* New:Added a handy function to BlackboardComponent, IsKeyOfType, that allows one to check if given key is of specified type.

##### Debugging Tools

* New:Added a way to define class-whitelist for Visual Log so that classes outside of specified list won't get recorded.

    * It does respect hierarchies, so if object A of not listed class is rerouted to an object B of whitelisted class then vlogs from that A will get recorded as well.

* New:Added new version of Gameplay debugger tool: allows easier creation of project specific categories, without need for implementing a separate module.Tool is currently in early access preview state and disabled by default.

##### Navigation

* New:Added an extra parameter to ARecastNavMesh::FindDistanceToWall that allows user to retrieve found location on a closest wall

* New:Added project specific flags to navigation links.

* New:Navigation Query Filters can now be instantiated per querier object.This allows passing additional variables to custom scoring and filtering functions for pathfinding.

* Fixed resetting navigation path data between repaths.

* Fixed value of TraversingLink parameter in crowd agent's velocity update function.

#### Animation

* New:Changed compressed animation data to have additives baked in and removed code in cook that did the same thing.Moved compressed data to the DDC.

#### Automation

* New:Moved code to write config file entries into InstalledPlatformInfo so that it can be reused by anyone wanting to make installed builds.

* Added AdditionalBundleResources to the list of external files used when packaging.

    * Ensures that these files are included in a packaged build.

* Tweaked automation test framework by request from UDN post.

#### Blueprints

* New:Added "BlueprintPure=false" metadata to allow const functions to be exposed to Blueprints as non-pure.

#### Core

* New:Added `TScopedDurationThreadsafeTimer<>` allowing for threadsafe accumulation of cycles to either a 32 or 64 bit cycle accumulator.

* New:Added a leak detection malloc proxy that can help track down memory leaks.Must define MALLOC_LEAKDETECTION

* New:Added a ToHashSet extension method to IEnumerable.

* New:Added AlignDown function for rounding an integer or pointer down to the next alignment.

* New:Added an additional scale factor of 75% in the list to generate in GenerateConvenientWindowedResolutions.

* New:Added basic custom deleter support to TUniquePtr.

* New:Added better stats for SProfilerMiniView::ProcessData.

* New:Added debug code to catch memory stomps in the async loading buffers that's independent from mallocstomp allocator.Changed the signature of PageProtect functions to be able to read-only protect memory.

* New:Added FixupNeedsLoadForEditorGame commandlet to fixup exports saved with NeedsLoadForClient, NeedsLoadForServer and NeedsLoadForEditorGame set to false and then had NeedsLoadForEditorGame set to true.

    * Added -IgnoreChangelist option to ResavePackagesCommandlet.

    * Removed unused code from ResavePackagesCommandlet.

* New:Added FThreadSafeCounter64, a 64-bit version of FThreadSafeCounter.

* New:Added gc.FindStaleClusters console command to list any stale clusters.

* New:Added new FCString::Strspn and FCString::Strcspn functions.

* New:Added support perfect forwarding constructors to AsyncTask framework.References are now kosher to use, avoiding mysterious crashes that would otherwise occur.

* New:Added TEnumRange - allows ranged-for iteration over enums when they are declared with an associated ENUM_RANGE_* macro.

* New:Added the ability to detect when the engine hangs (enters infinite loop or a very long task).

* New:Added the ability to dump memory reports every x seconds.

* New:Added the ability to query the name of a thread given its TLS id.

* New:Added the option to load all symbols for stack walking in non-monolithic builds.

* New:Changed the FPS chart binning 'long frame' discard threshold to a cvar (t.FPSChart.MaxFrameDeltaSecsBeforeDiscarding) to allow it to be disabled or adjusted, still defaults to 1 second.

* New:Changed the OnMountPak file delegate to take an optional FDirectoryVisitor* so that callers can get a list of the files contained within the PAK file that was mounted.

* New:Cleaned up some of the hot reload implementation.

* New:Core:Added microseconds support to FTimespan.

* New:Dynamic Delegates can now have up to 9 parameters.

* New:FOutputDeviceFile will now use a separate thread for writing to the file on disk so that it doesn't block the calling process.Reduces time spent in Serialize function by a factor of 5.

* New:FTransform::GetLocation() now calls FTransform::GetTranslation().

* New:Garbage Collection assumptions verification code will no longer assert immediately after detecting the first offender.Instead it will list all offenders first and then assert.

* New:GetAllocatedSize function’s return type has changed to SIZE_T.

* New:Hot reload now only recompiles game modules and their dependencies, rather than every game module.

* New:Increase name bucket count to 65k.Increase name pool allocator to 256kb.

* New:Multiple TBigInt performance improvents - multiply is now 30x faster.

* New:New FMallocBinned2 general memory allocator for PS4 and PC platforms.This allocator is better at recycling freed memory blocks across threads and has thread-local caches to reduce contention during concurrent allocations.

* New:PR #1331 [Core] Added a stomp allocator that allows finding memory overruns, underruns, and read/write after free.(Contributed by Pablo Zurita)

* New:Reworked the task graph to support multiple banks of task threads at different priorities.This allows tasks to preempt other tasks.Only enabled for consoles.Misc threading fixes and cleanups.

* New:The engine will now assert if pak file is corrupted, even in shipping builds.

* New:Tweaked out MallocBinned2.Removed several recyclers in the engine since MB2 is faster.Reworked the container slack policies to use the allocator granularity.

* New:UCLASSes, UENUMs etc. are now prevented at being defined at global scope.

* New:UnrealHeaderTool now builds modules ordered by type in order to minimize wasted time during a hot reload build.

* New:UnrealHeaderTool plugins no longer need to be a separate plugin and don't require UnrealHeaderTool source code changes to work.

    * Merged ScriptGeneratorPlugin with ScriptPlugin.

    * Introduced the concept of UnrealHeaderTool plugin support for plugins so that UnrealHeaderTool's source files don't need to be modified to make it work with external plugins.

    * Added RuntimeNoProgram module type (module that can be used at runtime but not by program targets).

    * Fixed logic with project file path setting in the engine.It will no longer try to crate a full path from an already rooted path.

* New:UnrealHeaderTool.manifest has been renamed to [TargetName].uhtmanifest to aid readability.

* New:Updated IntelTBB to 4.4u3 to catch more allocator usage.

* New:When maximum number of UObjects has been allocated, the engine will print the limit with the assert message.

* Added a missing memory barrier which would occasionally cause a task to be lost and a task to be executed twice.

* Added missing default tolerance value for FVector2D::Equal.(Contributed by MaikKlein)

* Added some postcondition checks to FModuleManager.

* Added some redundant cache checks to try to capture some spurious OOM reports.

* Changed the 'UObject Hash' stat category to be verbose by default to reduce high-watermark memory overhead of using stats on extremely slow frames.

* Code where LogUnion logging category is used will now properly compile outside of Core module.

* Deprecated FName constructor's unused bUnused parameter.

* Explicitly closing file handles after loading mips otherwise the handles never get closed.

* FEvent objects will now always be reset when returning the to the pool.

* Fix for class token stream sometimes not being initialized if the class was serialized.

* Fixed a crash when cancelling async loading caused by detaching linker from objects that had RF_NeedLoad flag set.

* Fixed a spurious error message being reported when hot reloading from Xcode when nothing had changed.

* Fixed a TMap crash which could occur during a ranged-for iteration after a Compact.

* Fixed ALIGNOF to work with abstract types.

* Fixed async loading releasing references to objects created during serialization before packages have been fully loaded.

* Fixed ConsoleCommandLibrary_DumpLibraryHTML accessing thrashed memory.

* Fixed crash in FPackageReader::ReadAssetRegistryDataIfCookedPackage.

* Fixed crash in UnrealBuildTool when compiling an individual module without a suffix.

* Fixed crash when copying an uninitialized TUnion.

* Fixed crash when move-constructing an unbound TFunction.

* Fixed custom versions not being detected when used in blueprint packages.

* Fixed deadlock in lockfreelist IsEmpty.

* Fixed debugger visualizers for TMap, TSet and TSparseArray in Visual Studio 2013 Update 5 and onwards.

* Fixed FIntPoint::Size() and FIntVector::Size() overflows when they contain large components.

* Fixed FMallocDebug's alignment checks.

* Fixed FStringAssetReferenceRenameSerializer not finding all references.

* Fixed Memswap to work on unaligned pointers for sizes of 3, 5, 6 and 7.

* Fixed some const-correctness issues in FModuleManager.

* Fixed some places where FIntVector was assumed to be 2D.

* Fixed some redundant array copies in hot reload.

* Fixed stall when cleaning up large number of tasks.

* Fixed the wrong max enum value used during net serialization.

* Fixed TIsClass to work with union types.

* Fixed TQueue::Peek's const-correctness.

* Fixes for VS2015's static analysis of Core, CoreUObject and UnrealHeaderTool.

* ForEachObjectWithOuter no longer filters out all children of an object that is filtered by the exclusion flags.

* Github # 1543 [Windows] Remove remote debug prompt on fatal error.(Contributed by bozaro.)

* Hot reload will no longer be available in test configs.

* Improved performance of TSet::Intersect, Union, Difference, and Contains.

* In case when GetLastError returns 0, don't log the error code message as an error as that confuses external log parsers.

* IsReferenced function will now ignore references from an object to itself.

* Made "checkCode(Code)" macro work without requiring a semicolon in the code block.

* Made TQueue non-copyable.

* Optimized weak object pointer.

    * Optimized FWeakObjectPtr operator== and operator!= to be faster when either object is valid.

    * Optimized IsValid() when using default/no arguments (removes 2 branches per call).

    * Made TWeakObjectPtr::Get() and TWeakObjectPtr::IsValid() with default/no arguments use the faster FWeakObjectPtr versions.

* PR #2073:Spelling in App:UnfocusedVolumeMultiplier changes from 4.10 (Contributed by Temaran).

* Reduced allocations in FStatNameAndInfo::ToLongName().

* Reduced memory usage when triggering automatic FPS charts for analytics.

    * Added a new parameter to UEngine::StartFPSChart that indicates whether or not the per-frame arrays should be constructed, true when doing 'StartFPSChart' from the console but false from other programmatic uses.

    * Updated HTML output total frame time stats to be tracked explicitly rather than computed from the per-frame arrays.

* Removed deprecated functions from TArray and TLinkedList.

* Renamed GPU analytics event from GPU to DesktopGPU to reflect that it is the default desktop adapter and not the one we initialized (which is GPUAdapter).

    * Updated text/log based FPS chart events to print out GPUAdapter instead (with DesktopGPU in parens if they differ, e.g., in an optimus setup).

* Replaced FMath::Fmod(x, y) with our own implementation on all platforms.Ensure on y=0 input, and return 0 in this case (rather than NaN).

* Stack overflows will now be properly handled by crash reporting code.

* StaticLoadObject will now respect LOAD_NoRedirects flag.

* String referenced assets won't get cooked if referenced by editor-only properties.

* The engine will no longer create crash reports from ensures that were triggered after the engine has crashed.

* UnrealHeaderTool will now respect #if WITH_EDITORONLY_DATA properties inside of #if !CPP block.

* UnrealHeaderTool:Fixed an issue with alpha handling in default value parsing for FColor literals.

* UnrealPak will no longer be compiled with ICU support.

* UObjectBase::Name, Class, and Outer have been renamed NamePrivate, ClassPrivate, and OuterPrivate to fix large numbers of shadow variable warnings in VS2015.

* Updated UnrealHeaderTool error messages to refer to the new GENERATED_BODY macros instead of the old deprecated ones.

#### Editor and Tools

* New:Added a new virtual function for Actors:IsSelectable().Overriding this function allows users to make an actor not selectable in some or all cases rather than relying purely on editor modes to determine selectability.For example, if you have a purely transient actor created at editor time for some purpose and it cannot be deleted or edited, you may want it also to be unselectable.

* New:Added UEngine::OnComponentTransformChanged delegate to Editor.

* New:Transaction notification can now be temporarily squelched for uses of the transaction buffer that do not need to be displayed to users.

* New:UActorFactory::SpawnActor now takes a FTransform instead of a FVector Location and FRotator Rotation.

* New:Unreal Editor now supports multiple default editor "modes" active at the same time (FEdModeTools).

* New:UnrealPak:Improved -diff output formatting to make it easier to save as .csv and view in Excel, also added it to the usage help for the tool.

* New:When calling UTransBuffer::Undo you can now specify that the transaction cannot be redone.

* Fixed PostEditChangeProperty being passed a null property when editing a vector or transform with a "3D property widget".

##### Content Browser

* New:Added a file import code path that doesn't load the entire file into memory prior to importing.

* New:Added the ability to spawn configurable one-off Content Browser widgets in C++.

    * This feature is used by the VR Editor to spawn a Content Browser in VR.

    * Various new options are available for customizing the spawned Content Browser:

        * You can set whether the sources view should initially be expanded or not.

        * You can set whether asset paths are shown in the Content Browser.Only useful if you only want to show collections.

        * You can force collections to be initially visible, regardless of defaults.

        * You can set a specific collection to view initially.

        * You can now opt to have no class name label under the asset.

        * Also, made a small tweak to the default splitter position for the sources view.

#### Gameplay Framework

* New:AActor::ParentComponentActor has been deprecated and replaced with the private ParentComponent use the accessors IsChildActor() or GetParentComponent() instead.

* New:Added a new overrideable function UGameplayAbility::ShouldActivateAbility, which can help decide whether or not an ability should be activated.

* New:Added AActor::GetIsReplicated() accessor.

* New:Added load time printouts to UEngine::LoadMap and the ListLoadedPackages command (load times in the former case are very useful, times in the latter are less so, since it represents wall time from start to finish, and can include overlapping times).

* New:Added TSet version of UPrimitiveComponent::GetOverlappingActors.

* New:Added TSet versions of AActor::GetOverlappingActors and GetOverlappingComponents.

* New:AGameMode::OnMatchStateSet is a new virtual that allows game mode subclasses to insert handling between MatchState being set and notification dispatch to the GameState and Blueprints.

* New:Avoided using TG_PrePhysics as the first tickgroup so that licensees can add tickgropups. https://udn.unrealengine.com/questions/279126/code-assumes-that-tg-prephysics-is-the-first-tick.html

* New:Can now GetActorTransform on AActor instead of having to access each component piecemeal via GetActorLocation/Rotation/Scale.

* New:FTraceHandle can now be used as a key in TMaps.

* New:GameMode is no longer mandatory to carry over between Source and Transition levels during SeamlessTravel and is instead included as part of the default implementation of AGameMode::GetSeamlessTravelActorList.

* New:There is now a OnPostEngineInit delegate on UEngine that is called after GEngine->Init has completed.

* New:UActorComponent::World and Owner have been renamed WorldPrivate and OwnerPrivate.

* New:UChildActorComponent can now be used as parent class from other modules.

* New:UChildActorComponent::ChildActor, ChildActorName, and CachedInstanceData are now private members.

* New:UPrimitiveComponent::MoveIgnoreActors is now a transient property array of `AActor*` instead of a non-property array of AActor WeakObjectPtrs and GetMoveIgnoreActors returns `const TArray<AActor*>&` instead of `TArray<TWeakObjectPtr<AActor>>&`.

* New:USceneComponent::AttachParent, AttachSocketName, and AttachChildren have been marked as deprecated as a bridge step to their privatization in 4.13.

    * USceneComponent::SetupAttachment has been added and is intended to be used in constructors instead of setting AttachParent and AttachSocketName directly.

    * USceneComponent::AttachTo now routes to SetupAttachment when called from a constructor.

* New:Widget Components now support rendering native Slate widgets directly (rather than only UMG widgets.)

    * Simply call SetSlateWidget() on the WidgetComponent in C++ code to bind a Slate widget to render

* New:WorldSettings is now a member of ULevel instead of the (intended) invariant being that Actors[0] is always the World Settings object.

    * An effort is made to maintain World Settings in the Actors[0] index, but it is no longer guaranteed (particularly after hot reload).

* AActor::GetNetDriver no longer crashes for Actors that are not currently in a World.

* Add more logging when character is stuck.

* Added check to Actor::PostActorConstruction to avoid calling BeginPlay on pendingkill Actor.

* Added comment explaining how AttachmentReplication is updated (via GatherCurrentMovement).

* Added DiagnosticCheckNaN() version to FRotator and FQuat that takes a string argument to prepend to the message.

* Added logging to ResolvePenetration for location of other object and current netmode (to make networked PIE easier to debug).

* Added logging to try to track down very rare case of level bounds actor with null RootComponent.

* Added NaN check within UCharacterMovementComponent::HasValidData() for cached rotation.

* Adjusted inline TArray sizes for Component and Actor arrays in FQueryCollisionParams.Used common define between that class and PhysX filtering code.

* Avoid multiple iterations with axis flipping in FindTeleportSpot unless we are spawning something.The teleport spot could otherwise be placed on the other side of a wall.

    * Also avoid using a partial MTD result in EncroachingBlockingGeometry() when one of the MTD tests fails.

* Changed UMovementComponent::UpdatedComponent and UMovementComponent::UpdatedPrimitive to be Transient.

    * They are not editable properties so should not be saved or loaded.UpdatedComponent is intended to be set in Actor constructors or via SetUpdatedComponent() at runtime.

    * UpdatedPrimitive is initialized as a cast on UpdatedComponent, it should never be loaded either.

* Changed FQuat::IsIdentity() to use a stricter tolerance, and check all components rather than just W to better handle very small rotations.

    * Fixes root motion in character movement introducing error in rotations.

    * Also increased number of digits in FQuat::ToString() since the 8th and 9th digits are significant for small rotations.

* Cleaned up NaN checks in CharacterMovement.Changed checks to ensures to avoid crashing, and added more details in some messages.

* Fix root motion source jump forces not providing consistent in-air velocity on their last tick due to partial simulation times being the default.Added settings flag to DisablePartialEndTicks, enabled that setting by default on jump forces.

* Fix shutdown crash caused by delayed cleanup tasks in tick task sequencer.

* Fixed crash caused by TPlayerControllerIterator iterating out of bounds (thanks mollstam!).

* Fixed FMath::Fmod(X, Y) sometimes returning small negative values for positive X and Y due to float imprecision.

* Fixed issue in PlayerCameraManager where the priority-based sorting of CameraModifiers wasn't sorting properly.

* Fixed matrix transforms inUCharacterMovementComponent::UpdateBasedMovement() causing slight position error.

* FixupDeltaSeconds() now considers time dilation when clamping.Acceptable ranges for time dilation values and undilated frametimes are now config parameters on WorldSettings.

* GameSession::SessionName is now respected in GameMode::InitGame.(Contributed by slonopotamus)

* GetComponentByClass is no longer virtual, FindComponentByClass should be extended instead.

* Ignore PlayerController::ServerUpdateCamera RPCs when bUseClientSideCameraUpdates is false.(Contributed by slonopotamus)

* Improved logging for ResolvePenetration and Client/Server corrections.

    * ResolvePenetration now includes original location, object it's stuck in, and how far it's penetrating.

    * Client/Server correction logging (from p.NetShowCorrections) now include actor name, and more path to component base.Component name alone was not helpful as it does not give the actor context.

* Made FTransform::GetSafeScaleReciprocal() tolerance SMALL_NUMBER instead of zero.

* Made UCharacterMovementComponent::VerifyClientTimeStamp() virtual so projects can override with specific client timestamp verification logic

* Made FOverlapInfo() constructors explicit.Fixed uses of this struct that violated this.

* Modified minimum Duration values for JumpForce and MoveToForce ability tasks so that having minimum Duration values doesn't trigger check()s.

* Moved UninitializeComponents outside bActorInitialized check in AActor::RouteEndPlay to always uninitialize components when actor fails to spawn due to blocking collision.

* Moved various functions to ignore Move and Look input from PlayerController to Controller.

* Optimized APlayerController::IsLocalController() in the case where the bIsLocalPlayerController is set, or on dedicated servers (always known at compile time).

* Optimized USceneComponent::SetWorldTransform() to avoid unnecessary copies and avoid unaligned SIMD reads and writes.

* Prevented UWorld::RemovePawn() from unpossessing the wrong pawn.

* Savegames now serialize custom versions to ensure future compatibility.

* USceneComponent::Pre/PostNetReceive and PostRepNotifies are now protected instead of private so subclasses can extend.

* When adaptive network frequency is enabled and a character moves, force a net update.

    * This prevents a long delay between movement updates and the client's perception of movement, and avoids choppy movement while replication is ramping up, while still allowing frequency to go down when not moving.

    * Added UCharacterMovementComponent::ShouldCancelAdaptiveReplication() which checks for location, rotation, or velocity changes, and can be extended to check other values as well.

* UEngine::DefaultPreviewPawnClass and DefaultPreviewPawnClassName have been removed.

#### Localization

* Invalid invalid text format arguments now emit a warning.

    * Arguments that failed to parse as an index (either because they were a string or were empty) previously silently applied fallback behavior.This warning ensures they will be caught as they may break localization by preventing argument re-ordering.

#### Networking

* New:Added a delegate that will be called as soon as a processing timeslice is exceeded while processing network connections in UIpNetDriver (processing still continues afterwards).

    * Controlled by a new cvar n.IpNetDriverMaxFrameTimeBeforeAlert, set to 1 second by default.

    * Adjusted existing warning for slow frames due to networking to be configurable with cvar.n.IpNetDriverMaxFrameTimeBeforeLogging (remains at 10 seconds by default).

* New:Added a new replication condition, COND_ReplayOnly, for replicating properties only to replays.

* New:Added basic ICMP echo request function to engine.

* New:Added ImportTextItem() and To/FromJson() to FUniqueNetIdRepl struct to handle json import and export.

* New:Added to JsonObjectConverter the ability for a UStruct to emit json as a string if type traits are setup with ExportTextItem / ImportTextItem.Allows a UStruct to convert to json as something other than FJsonValueObject.

* New:Small optimization to network actors when beacons are in use.Network actors are only in the relevant net driver list (DemoNetDriver is the one exception).Made NetDriverName private (Use SetNetDriverName to change)

* New:The list of network actors to replicate to clients has moved from per-world (UWorld::NetworkActors) to per network driver (UNetDriver::NetworkObjects).

    * This shouldn't affect you unless you have modified engine networking code, but it is an important step in enabling more networking optimizations.

    * It also helps simplify the handling of cases where there are multiple network drivers in one world, such as demo and beacon drivers.

* Add progress delegate notification for http downloads on PS4.

* Added NotifyPreClientTravel multicast delegate.

* Default MaxSearchResults in FOnlineSessionSearch objects to 1 instead of 0, so that the default behavior is to find exactly one session instead of completing right away without searching for sessions.

* Fixed an issue where during replay playback, FHttpNetworkReplayStreamer was calling the FOnStreamReadyDelegate with an incorrect second parameter, indicating that the streamer was recording instead of playing back.

* Fixed FindInactivePlayer and AddInactive player to make sure to use valid unique IDs if they exist.

* Removed an invalid assert in FHttpNetworkReplayStreamer.

#### Online

* New:Add an optional parameter "bPrettyPrint" to FJsonObjectConverter::UStructToJsonObjectString and FOnlineJsonSerializable::ToJson (defaulted to true).

* New:Add config options [HTTP]CurlMaxSimultaneousRequests and [HTTP]CurlMaxRequestsAddedPerFrame to limit number of simultaneous HTTP requests processed through curl and number of requests added to curl per frame to reduce hitches.Default values are uncapped to retain prior behavior.

* New:Added a CheckAvailability function to the hotfix manager that simply checks for different/new/old hotfix files but doesn't apply them

* New:Added ParseHttpDate/ToHttpDate functions to FDateTime - parses based on spec found at https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1

* New:Added UParty::HasPendingPartyJoin(), which will return true if a player has accepted an invite, but it hasn't been processed yet.

* New:Implement operator==/!= for FVariantData for bool type.

* New:Renamed UPartyGameState::InitLocalPlayerPartyData() to UPartyGameState::InitPartyMemberStateFromLocalPlayer, and changed how SendLocalPlayerPartyData initializes UPartyMemberState objects to reduce duplicate code and extra looping.

* New:WebBrowser:Adding a custom tag to devtool web browser windows.

* Allow hotfixmanager to run on dedicated servers and client builds.

* Improved FindInactivePlayer and AddInactivePlayer functions to better leverage UniqueIds per player if UniqueIds are in use in the game.Preferred over comparing via NetworkAddress.

#### Other

* Cooker:Prevented log spew about moving items to chunk X when they were already pre-assigned to chunk X (items that are referenced by other chunk 0 items but hadn't been reached yet in the chunk traversal).

* Make sure that SaveToINI doesn't try to save console window positioning information when bad/invalid handles are present.

#### Physics

* New:Add the option to turn off active transforms for projects that don't use them.

* New:Added Test option to async scene query API (sweeps, raycasts etc), in addition to existing Single and Multi options.

* New:Allow efficient filtering by component or by actor in preFilter.Makes actor filtering thread safe.

* New:Give the ability to turn off face remap table which saves memory in PhysX.

* New:Make sub-stepping run on game thread.This is done for safety of various user callbacks and simplifies a lot of the code.The simulation is still not on the game thread of course, but the callbacks are.

* New:Prevent non simulating actors from being put in the simulation scene.

* New:Remove WITH_SUBSTEPPING as it is now supported on all platforms.

* New:Share BodySetup for sphere component.This skips the need to create a NewObject whenever a blueprint with a sphere component is spawned.

* New:Update HandlePhysicsCollisions_AssumesLocked so that it can filter hit events and modify impulses.

* Fixed FBodyInstance::GetBodyBounds not working on static bodies.

* PhysX fix for penetration test returning NaN.

#### Platforms

##### Android

* Added a way to unregister signal handlers on Android by calling FPlatformMisc::SetCrashHandler((void(*)(const FGenericCrashContext& Context)) -1); (used in VulkanRHI.cpp).

* Bugfix:Fixed linker warnings (mismatched function/variable declaration for glMapBufferOES and glUnmapBufferOES) for Arm64 with NDK11.

* Improvements for debugging.We now use dwarf-4 and don't force inline for debug builds.

##### iOS

* Make Xcode create a copy of iOS and TVOS apps in Payload folder when needed to work around the bug in Xcode where it tries to launch [GameName]-Mac-[ConfgName].app instead of [GameName].app.

##### Mac

* OnControllerConnectionChange is dispatched on Mac when gamepad is connected/disconnected.

* RunUAT.sh can now be run from any working directory.

##### PlayStation 4

* New:Added a new interface in the platform features family, IVideoRecordingSystem, and an implementation for Playstation 4.

    * This interface allows programmatic control over the platform's video recording functionality and allows clips recorded through the interface to be shared via the "SHARE" button.

* New:Implemented the SendSessionInviteToFriend and SendSessionInviteToFriends functions in FOnlineSessionPS4 so now invitations can be sent programmatically.

* New:Moved BoundShaderStateHistory to the context instead of the RHI to avoid critical section.

* Added a log statement when the gap between SubmitDone calls exceeds 2 seconds and removed a duplicate call to set the LastSubmitDoneTime.

* Call SubmitDone immediately after flushing the GPU (to ensure it happens during a long frame in case additional work is generated after the flush).

* Optimized PrepareForDrawcall.

* When checking the results from sceNpGetParentalControlInfo, we no longer check the chatRestriction or ugcRestriction flags if sceNpGetParentalControlInfo returned an error, since these flags are not reliably set in that case.

##### Xbox One

* New:Added support for FSystemWideCriticalSection to Xbox One.

* New:Enabled the use of variadic templates on Xbox One.

* XInputInterface now dispatches OnControllerConnectionChange messages.

##### HTML5

* New: master build script for HTML5 ThirdParty libraries.

##### Windows

* XInputInterface now dispatches OnControllerConnectionChange messages.

* Window positions are now treated as being the top-left of the window client area.This only affects windows with an OS border, and matches the behavior of the other desktop platforms.

#### Programming

* New:Added the ability to query body setup directly for distance to closest point.Added the ability to query closest point on physics asset.

* New:Removed all code testing whether we are using a 'Rocket' build.

    * Changed to check whether build was installed where appropriate, unified behavior in some other areas

* New:UnrealBuildTool:Exposed the ability to compile with checks enabled in shipping and test configurations by setting UEBuildConfiguration.bUseChecksInShipping in your Target.cs.

* Added a build exception to give a message instead of crashing when trying to generate all project files from an installed build.

* Added UnrealLightmass to list of programs to build when Build Solution is used and Editor configuration is selected.

* Changed UnrealFileServer to be non-monolithic so that it doesn't include code that is not public.

* Ensured that warnings from Dynamic Compilation of build.cs files are propagated up to user when compiling in IDE.

#### Rendering

* New:Added a tiny state cache to the frontend of RHICmdList to get rid of redundant rasterizer and depthstencil states.

* New:Added back support for draw event colors.

* New:Added code to optionally move the lighting stuff from initviews to after the prepass.

* New:Added detailed command list markers for GPU particles.

* New:Added display of benchmark results to the 'scalability auto' command output, and also added them to FQualityLevels returned by BenchmarkQualityLevels so user code can make use of them.

* New:Added render thread start and stop delegates.GitHub 2006.

* New:Added stats down to the emitter level.New -leaf option for stat dump commands.HUD stats now correctly add new stats while the display is up.

* New:Allow UTextureRenderTarget::GetRenderTargetResource to be called in parallel.By user request.

* New:Allow collision and trail particles to run off the game thread.

* New:Allow users to pass in multipliers for benchmark results to Scalability::BenchmarkQualityLevels (to scale the results prior to lookup in the scalability tables for the different quality levels).

* New:Allowed spline meshes to share vertex factories.

* New:Changed PC to default to parallel rendering when not in editor.

* New:Enabled texture streaming over budget tracking even when stat tracking is not enabled (Test and Shipping) (via IStreamingManager::Get().GetTextureStreamingManager().GetMemoryOverBudget()).

* New:Merged atmosphere, global distance field and perlin noise into the frame uniform buffer and disabled the BuiltinSamplersUB.

* Avoid recalculating shader map ID in a cooked build; it was readily available.

* Fixed a critical bug in the render thread fencing that could sometimes cause fences to complete before previous commands.

* Fixed an issue with recurisve shader init on consoles.

* Fixed async compute submits in the editor.

* Fixed memory bug with HISMC.

* Fixed race condition on particle system vertex factories.

* Fixed recursive shader intialization crash on consoles.

* Fixed rotation bug in DrawDebugSolidBox.

* Fixed shadows updating static meshes while the prepass is in progress.

* Fixed threading bug with atmosphere.

* Fixed crash in FHierarchicalStaticMeshSceneProxy related to reflection captures and foliage.

* Proper fix for shadow setup concurrent with prepass crash.

* Safe, plausible fix for crash report replating to override vertex colors.

##### FX

* New:Exposed FRawDistributionFloat and FRawDistributionVector outside Engine module.

##### Postprocessing

* Optimized allocations in FFinalPostProcessSettings.Fixed bug skipping an element when updating the ContributingCubemaps array if one is removed during an iteration.

##### Optimizations

* Removed unused TangentZDelta_DEPRECATED member from FVertexAnimDelta.

#### UI

##### Slate

* New:Added a UObject stat around a cache miss in FCompositeFontCache::GetFontFace, so the load time is traceable to the specific asset that is getting unpacked from bulk data.

## Upgrade Notes

### AI

#### Debugging Tools

* Please check GameplayDebugger.h for detailed upgrade instructions.

### Blueprints

* No specific upgrade instructions, but the new system will not take hold until a blueprint is recompiled and saved.

### Core

* Warnings may now issue on load when converting integer properties that lose information.This includes conversions like an int32 property saved as -1, then loaded as a uint32.

* Any tools which rely on reading UnrealHeaderTool.manifest will have to be updated to read [TargetName].uhtmanifest instead.

* UCLASS, UENUM etc. declarations are now illegal outside of global scope.If you have a type which is nested inside a UCLASS or USTRUCT, they should be moved to global scope.

### Editor and Tools

#### Content Browser

* UFactory::StaticImport will now call FactoryCreateFile for both text and binary files.The default implementation will load the file into a buffer/string and call FactoryCreateBinary/FactoryCreateText to preserve legacy behavior.New factories may override FactoryCreateFile to perform their own file processing instead.

### Gameplay Framework

* Deprecated the following functions:AActor::AttachRootComponentTo, AActor::AttachRootComponentToActor, AActor::DetachSceneComponentsFromParent, USceneComponent::AttachTo, USceneComponent::DetachFromParent

* If you've overriden AGameMode::GetSeamlessTravelActorList and are not calling Super::GetSeamlessTravelActorList then must make sure to manually include this in the ActorList if you wish the GameMode to persist across the transition.

### Localization

* Packages that may have failed to correctly serialize in 4.11 should now automatically serialize correctly if they contain an FText property making use of the FFormatArgumentData.

### Networking

* Fixed byte ordering issues in IP address conversions 
* Non-desktop platforms now use a single (multicast) socket for Messaging 
* Simplified IPv4 API to make it easier to use 
* Added more unit tests, documentation
	* This also fixes most of XboxOne Messaging support.It is now possible to interact with Xbox One in UnrealFrontend.Until we have support for running IPv4 and IPv6 in parallel in the Editor, this requires a StaticEnd.

### Online

* Reimplement inherited implementations of void UPartyGameState::InitLocalPlayerPartyData() to UPartyGameState::InitPartyMemberStateFromLocalPlayer(const ULocalPlayer* LocalPlayer) and initialize UPartyMemberState objects one player at a time.

### Platforms

* From the command line, separate targets with a '+' character.

* From the UI, set your Default Deploy Platform to None, then select the check box next to each intended target.

* To select multiple targets:

    * From the UI, set your Default Deploy Platform to None, then select the check box next to each intended target.

    * From the command line, separate targets with a '+' character.

### Programming

* UE4 tools now require the Visual Studio 2015 Runtime to run.

### Rendering

* In case you see "Rendering of stretched decals" you might have to make some small blueprint/code changes to your project, more info see:"Streched decals - fix and details".

* The CreateMeshSection and UpdateMeshSection functions on ProceduralMeshComponent have been changed to use LinearColor for the 'Vertex Color' input, as this is properly supported by Blueprints.Existing nodes will need to be replaced.

#### Lighting

* Memory usage for light probes is slightly increased.

#### Materials

* Fixed inconsistency in lighting (in shadow and not in shadow) with SubsurfaceScatteringProfile.A minor retweak of the material might be needed.

### C++ API-Breaking Changes

* Removed redundant include statement from K2Node_SwitchEnum.

* Prevent cheating with consolevariables.ini and added ensure to see where the cheat flag would prevent a cvar from getting set.

    * Don't use consolevariables.ini for shipping/test.Cheat flag on cvars should be set in code.

* Deprecated UWidget::GetEditorIcon and converted existing icon brushes to conform with FClassIconFinder expectations.Users should redefine their icons in slate style sets using the format ClassIcon.WidgetType, they will then get picked up automatically.

* GetComponentByClass is no longer virtual, FindComponentByClass should be extended instead.

* Timer Handles are now 64-bit values

    * Blueprint function "Clear Timer by Handle" has been replaced with "Clear and Invalidate Timer by Handle".The older version is now deprecated and should be replaced.

* UActorFactory::SpawnActor now takes a FTransform instead of a FVector Location and FRotator Rotation

    * Any virtual overrides of UActorFactory::SpawnActor need to be converted to match the new signature taking a FTransform instead of a FVector Location and FRotator Rotation.

* UChildActorComponent::ChildActor, ChildActorName, and CachedInstanceData are now private members

    * Direct accesses of UChildActorComponent::ChildActor, ChildActorName, or CachedInstanceData are no longer allowed.Use GetChildActor or GetChildActorName to access those variables.Direct access to CachedInstanceData is no longer possible.

* Actor and Component OnClicked/OnReleased events can now be triggered by more than just Left Mouse Button

    * C++ events bound to OnClick/OnReleased events will need to have the new FKey parameter added.

* USceneComponent::AttachParent, AttachSocketName, and AttachChildren have been marked as deprecated as a bridge step to their privatization in 4.13.

    * Instead of direct reads of USceneComponent::AttachParent, AttachSocketName, and AttachChildren you should use GetAttachParent, GetAttachSocketName, or GetAttachChildren.Direct writes should be replaced with SetupAttachment from constructors or AttachTo once components have been registered.

* Changed the OnMountPak file delegate to take an optional FDirectoryVisitor* so that callers can get a list of the files contained within the PAK file that was mounted

    * Any existing uses of OnMountPak must be updated to pass in a FDirectoryVisitor* (nullptr is fine)

* AActor::ParentComponentActor has been deprecated and replaced with the private ParentComponent use the accessors IsChildActor() or GetParentComponent() instead

    * Direct references to AActor::ParentComponentActor will need to be replaced either with IsChildActor() if simply checking if the Actor is a Child or with GetParentComponent()->GetOwner() if an actual reference to the parent Actor is desired.

* Added editable fixed bounds for skeletal meshes, exposed getters to blueprints

    * Bounds member of USkeletalMesh no longer public, use GetBounds or GetImportedBounds to access now.GetBounds is the expanded custom bounds and GetImportedBounds is the original mesh bounds saved on import.

* MTBF analytics is now an Engine feature (moved from Editor)

    * Removed FEditorAnalytics::InitializeSessionManager(), ShutdownSessionManager() and SessionHeartbeat() from public API

    * Replaced by private engine code FEngineSessionManager::Initialize(), Tick() and Shutdown()

    * These should only need to be called by the engine infrastructure.

* Added AActor::GetIsReplicated accessor

    * IsReplicated functions on AGameplayAbilityWorldReticle and AGameplayAbilityTargetActor have been deprecated, use GetIsReplicated instead.

* UActorComponent::World and Owner have been renamed WorldPrivate and OwnerPrivate.

    * UActorComponent WorldPrivate is now private instead of protected.Use GetWorld() instead.

* UPrimitiveComponent::MoveIgnoreActors is now a transient property array of AActor* instead of a non-propery array of AActor WeakObjectPtrs and GetMoveIgnoreActors returns const `TArray<AActor*>&` instead of `TArray<TWeakObjectPtr<AActor>>&`

    * Any direct usages of MoveIgnoreActors or the return value from GetMoveIgnoreActors will need to be adjusted to operate on direct AActor* references instead of indirectly via the `TWeakObjectPtr<AActor>`

* GetAllocatedSize functions' return type has changed to SIZE_T.

    * The return value type of GetAllocatedSize functions has changed and may need to be updated in any user overrides of that function.

* Actor delegates OnTakeAnyDamage, OnTakePointDamage, OnActorBegin/EndOverlap, OnBegin/EndCursorOver, OnClicked/Released, OnInputTouchBegin/End/Enter/Leave, OnDestroyed, and OnEndPlay have all had a new parameter added to allow binders to know which Actor the event occurred on in cases where a single event entry point is bound to multiple Actors.

    * All C++ functions bound to any of these delegates will need to have the new AActor* parameter added to them.Similarly any blueprint bindings of a function via the Create Event node will require the event to have the new parameter added.

* PrimitiveComponent delegates OnComponentHit, OnComponentBegin/EndOverlap, and OnComponentWake/Sleep have all had a new parameter added to allow binders to know which Primitive Component the event occurred on in cases where a single event entry point is bound to multiple Primitive Components.

    * All C++ functions bound to any of these delegates will need to have the new UPrimitiveComponent* parameter added to them.Similarly any blueprint bindings of a function via the Create Event node will require the event to have the new parameter added.

* Optimized APlayerController::IsLocalController() in the case where the bIsLocalPlayerController is set, or on dedicated servers (always known at compile time).

    * AController::IsLocalPlayerController() is no longer virtual.It simply checks a new bool bIsPlayerController and the result of IsLocalController().

* Added more logging when character is stuck.

    * UCharacterMovementComponent::OnCharacterStuckInGeometry() now takes an FHitResult parameter.

* Changed how Hierarchical LOD system saves out generated content: meshes, materials and textures are now saved into a sub-folder called "HLOD".

* Corrected URL path search when using "download maps on-the-fly" to allow pak file fetches to work from paths other than the "root" path.

