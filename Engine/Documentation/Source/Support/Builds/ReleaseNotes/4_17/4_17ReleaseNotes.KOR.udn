INTSourceChangelist:6537038
Availability:Public
Title: 언리얼 엔진 4.17 릴리즈 노트
Description: 언리얼 엔진 4.17 릴리즈 노트입니다.
Crumbs:%ROOT%, Engine
Parent:Support/Builds
Order: 27
## 새 소식

![image alt text](image_31.png)(convert:false)

게임이든, 단방향 매체든, 가상 현실이든, 언리얼 엔진 4.17 로 **여러분의 이야기를 들려주세요**. 새로운 도구, 작업방식 개선, 퍼포먼스 최적화를 통해 사용자가 원하는 퍼포먼스와 개발자가 기대하는 퀄리티 기준에 맞춰 **프로젝트를 개발하고 발매하는** 것이 전에 없던 수준으로 쉬워집니다. 새로운 플랫폼 지원 및 확장된 기능 세트로, 언리얼 엔진은 **어느 플랫폼에서든 매력적인 경험을 선사합니다**.

새로운 컴포셔(Composure) 합성 시스템과 이미지 플레이트(Image Plate) 플러그인이 제공하는 막강하고 유연한 기능을 통해 합성 콘텐츠를 실시간 렌더링하여 라이브 액션 영상으로 만들어낼 수 있습니다. 시퀀서의 여러가지 기능 향상으로 시네마틱이나 단방향 매체 제작을 위한 작업방식이 지속적으로 개선됩니다.

퀘스트나 영웅과 같은 게임 전용 콘텐츠 발견 및 로드를 위한 애셋 관리 프레임워크가 새로 추가되었습니다. 애셋 레지스트리의 새로운 블루프린트 접근자를 사용하면 블루프린트에서도 실행시간에 애셋 관련 정보 쿼리가 가능합니다.

플랫폼 지원이 개선되어 Microsoft 의 Xbox One X 콘솔 게임을 개발할 수 있게 되었습니다. 새로운 VR Spectator Screen(관람자 화면) 지원을 사용하면 VR 프로젝트에 소셜 체험을 불어넣을 수 있습니다. Android에서는 고사양 디바이스에서 여러가지 부분이 향상되었으며, 실행파일 크기를 더욱 줄일 수 있도록 지속적으로 노력하고 있습니다.

이번 릴리즈에는 GitHub 의 엄청난 언리얼 엔진 개발자들이 제출한 **90 종의 개선사항이** 포함되어 있습니다! 언리얼 엔진 4.17 에 기여해 주신 모든 분들께 감사드립니다:

0lento, Akihiro Kayama (kayama-shift), Andrea Catania (AndreaCatania), Andrew Armbruster (aarmbruster), Andrew Gaubatz (e-agaubatz), Andreas Schultes (andreasschultes), Angel Angelov (DexterLB), Artem V. Navrotskiy (bozaro), Brent Scriver (FineRedMist), Cengiz Terzibas (yaakuro), Chris Grebeldinger (cgrebeld), DaveC79, Dennis Wissel (dsine-de), erniea, GBX-ABair, Gryphon Myers (gryphonmyers), Igor Karatayev (yatagarasu25), Ilya (ill), irobot, Jared Hefty (jared-improbable), Jason Calvert (jasoncalvert), Jorge Martins (SNikon), Kalle Hämäläinen (kallehamalainen), Konstantin Nosov (gildor2), Laurie (laurie-hedge), Mario Zechner (badlogic), Mathias Hübscher (user37337), Matteo De Carlo (portaloffreedom), Mattias Cibien (mattiascibien), Max Shawabkeh (max99x), Michael Auerswald (flipswitchingmonkey), Michail Nikolaev (michail-nikolaev), Nako Sung (nakosung), Paul Eremeeff (PaulEremeeff), Piotr Bąk (Pierdek), poiyomi, projectgheist, rfenner, Robert Khalikov (nbjk667), Roberto De Ioris (rdeioris), Ron van Essen (ronve), rooneym, Ryan Nielson (RyanNielson), Sam Hocevar (samhocevar), Satheesh (ryanjon2040), Sébastien Rombauts (SRombauts), Skylonxe, Stefan Zimecki (stefanzimecki), StefanoProsperi, Stormtide Ltd (StormtideGames), Timothee Besset (TTimo), Trent Polack (trentpolack), UpwindSpring01, wuyakuma

## 신기능

### 신규: 시퀀서 개선

![image alt text](image_0.png)(w:928 convert:false)

**시퀀서의 기능, 안정성, 사용 편의성이 크게 개선되어**, 여러분의 이야기 그대로를 사용자들이 경험할 수 있도록 제작하는 작업도 게임을 즐기듯 할 수 있습니다.

#### 자동 키 설정

자동 키 설정 기능을 하나의 토글 상태로 단순화시켜 사용 편의성과 명확성이 향상되었습니다.

![image alt text](image_1.png)(w:420 convert:false)

#### 시퀀서 편집 vs 레벨 편집

시퀀서에 새로 생긴 토글 옵션으로 프로퍼티 변경사항을 단일 샷에 적용할지 다른 샷에도 전파시킬지 하는 부분을 확실하게 할 수 있어 작업 분할이 수월해집니다. Allow Sequencer Edits Only (시퀀서 편집만 허용) 옵션을 켜면, 프로퍼티를 편집할 때 트랙 및/또는 키프레임이 존재하지 않는 경우 자동으로 생성합니다. 이러한 편집 내용은 작업중인 특정 샷에만 적용되며 다른 샷에 영향을 주지 않습니다. Allow Level Edits Only (레벨 편집만 허용) 옵션이 켜지면, 오브젝트의 기본 프로퍼티를 편집하게 됩니다. 시퀀서에 이미 트랙이 있는 프로퍼티는 모든 샷에 영향을 주는 전체 변경 작업을 하고자 할 경우 디테일 패널에 비활성화됩니다.

![image alt text](image_2.png)(convert:false)

#### 추가적인 개선사항

* 액터에 붙은 오디오 섹션의 어테뉴에이션(감쇠) 세팅이 생겼습니다.

* 어태치 섹션의 붙이고 떼는 규칙을 지정할 수 있습니다.

* 레벨 시퀀서 플레이어에 시네마틱 옵션을 추가했습니다.

* 벡터, 트랜스폼, 컬러 키 프로퍼티 에디터에 Key Time 을 추가했습니다.

* 다음/이전 샷으로 한 단계씩 이동(step)하는 단축키가 생겼습니다 (Shift + 쉼표, Shift + 마침표).

* 스크럽 이동으로 키에 스냅할 때 이제 허용치 밖으로의 스크럽 이동도 허용됩니다.

* 이제 에디터 개인설정의 세팅을 사용하면 시퀀서로 전환할 때 실시간 뷰포트를 활성화시킬 수 있습니다.

#### 버그 픽스

* 키 설정이 크게 바뀌었습니다.

* 픽스 - 스폰 해제/리스폰 시 스포너블 상태/프로퍼티가 저장/복원되지 않던 것을 고쳤습니다.

* 픽스 - 필터링을 할 때 시퀀서 아웃라이너가 노드를 추가하던 것을 고쳤습니다.

* 픽스 - 레벨 시퀀스 비동기 로드가 수정되었습니다.

* 픽스 - 자동 키 기능이 (제대로 복원하기 위해 필요한) 키프레임 생성을 하지 않으면 프로퍼티 값을 저장하지 않던 것을 고쳤습니다.

#### 시퀀서 월드 아웃라이너 통합

시퀀서가 이제 월드 아웃라이너와 더욱 유기적으로 통합되었습니다. 월드 아웃라이너에는 액터가 묶여있는 레벨 시퀀스가 무엇인지, 시퀀서가 스폰한 액터가 무엇인지 표시되므로, 한 곳에서 시퀀서에 묶인 모든 액터를 접근할 수 있습니다.

[REGION:raw]
![image alt text](image_3.png)(w:928 convert:false)
[/REGION]

#### 시퀀서에서 블렌딩

이제 **시퀀서에서 섹션을 블렌딩하여** 부드러운 전환을 쉽게 만들 수 있습니다. 시퀀서의 여러 프로퍼티(2D/3D 트랜스폼, 벡터, 컬러, 플로트 등)에 대한 블렌딩이 가능합니다.

* 지원되는 섹션 모두 이제 서로 겹칠 때 부드럽게 블렌딩되어 오브젝트에 적용되는 단일 값을 산출해 냅니다.

* 같은 행에 겹치는 섹션은 이제 가능하면 한 쪽에서 다른 쪽으로 서서히 자동 보간됩니다.

* 애니메이션 트랙 역시 이제 자동 보간됩니다.

* 다수의 내장 이즈(ease) 함수를(선형, 다항, 지수형 이즈 인/아웃 등) 기본으로 사용 가능합니다. 또는, (BP 에서도 사용 가능한) IMovieSceneEasingFunction 인터페이스를 사용하여 별도의 커스텀 블렌드 함수를 구현하거나 커브 애셋을 지정할 수 있습니다.

* 섹션 트랜스폼 작업은 이제 트랜스폼 나머지에 영향을 주지 않고 (위치+회전 같은) 어떤 식의 채널 조합에 대해서도 작업 가능합니다.

또한 블렌더블 프로퍼티에 새로운 블렌드 모드를 추가, 가중치 적용 절대적 / 상대적 / 더하기식 블렌딩이 가능합니다. 프로퍼티의 시작 값을 기준으로 한 프로퍼티 애니메이션이나, 절대 또는 상대 스페이스로/에서의 (컷씬 속으로 또는 컷씬 밖으로) 보간하는 등의 작업에 특히 유용합니다.


[OBJECT:EmbeddedVideo]
	[PARAMLITERAL:videoid]
	OQZK33g8u9k
	[/PARAMLITERAL]
	[PARAMLITERAL:width]
	78
	[/PARAMLITERAL]
	[PARAMLITERAL:height]
	56.25
	[/PARAMLITERAL]
	[PARAMLITERAL:units]
	%
	[/PARAMLITERAL]
	[PARAMLITERAL:type]
	simple
	[/PARAMLITERAL]
[/OBJECT]


### 신규: 컴포셔 합성 플러그인 (얼리 액세스)

The Mill 및 General Motors 와 제휴하여 제작한 [The Human Race](https://www.youtube.com/watch?v=MQ3QuZtrxl0) [GDC 2017 데모](https://www.youtube.com/watch?v=MQ3QuZtrxl0) 에 이어, 언리얼 엔진 4.17 에 Composure (컴포셔) 엔진 플러그인이 새로 추가되었습니다. **복잡한 실시간 합성 파이프라인 제작을 쉽게** 할 수 있도록 해주는 C++ / 블루프린트 프레임워크입니다.

[OBJECT:EmbeddedVideo]
	[PARAMLITERAL:videoid]
	eQjdWKVKRS8
	[/PARAMLITERAL]
	[PARAMLITERAL:width]
	78
	[/PARAMLITERAL]
	[PARAMLITERAL:height]
	56.25
	[/PARAMLITERAL]
	[PARAMLITERAL:units]
	%
	[/PARAMLITERAL]
	[PARAMLITERAL:type]
	simple
	[/PARAMLITERAL]
[/OBJECT]

유튜브에서 볼 수 있는 이 데모의 기술적 부분에 대한 GDC 강연에서, [언리얼 엔진 4 의 컴포셔 플러그인의 기반이 된 기술](https://youtu.be/A0BfZoFZyBs?t=2162) 관련 자세한 내용이 언급된 바 있습니다.

컴포셔의 기능적 특징은 다음과 같습니다:

* 플레이어 컨트롤러와 텍스처 렌더 타깃 2D 사이의 바인딩을 엔진 기본 렌더링 파이프라인에서 프로젝트 전용 C++ / 블루프린트 구현 합성 플러그인 출력으로 대체하는 바인딩 메커니즘.

* 포스트 무브 세팅 및 시퀀서 임포터가 지원됩니다.

* 파라미터식 렌즈 디스토션: [OpenCV 표준 카메라 교정 모델](http://docs.opencv.org/2.4/doc/tutorials/calib3d/camera_calibration/camera_calibration.html) 에서 렌즈 디스토션 및 언디스토션에 대한 UV 디스플레이스먼트 맵을 생성합니다.

* UVMap 패스 - UV 디스플레이스먼트 맵과 UV 행렬에 따라 텍스처에 디스토션을 적용하는 패스이며, 커스텀 머티리얼을 적용할 수도 있을 만큼 유연합니다.

* 독립형 블룸 패스로 에지 라이트 랩과 같은 합성 이펙트 재현이 가능합니다.

* 엔진 톤매퍼 독립 패스가 지원됩니다.

* 색 보정(Color correction) C++, 블루프린트, 머티리얼 API 가 지원됩니다.

* 색수차(Chromatic aberration) C++, 블루프린트, 머티리얼 API 가 지원됩니다.

* 단순 합성 사용 예를 위한 블루프린트 헬퍼가 제공됩니다.

* 샘플 프로젝트가 포함됩니다.

이에 따른 엔진의 기능적 특징은 다음과 같습니다:

* 엔진 포스트 프로세싱 체인에 알파 채널이 실험단계로 지원됩니다: 원형 DOF, 템포럴 AA, 모션 블러, 블룸 등.

* 컴포셔의 포스트 무브 모션 블러 지원을 위해 씬 캡처에 투영 행렬 기반 모션 블러가 지원됩니다.

* 블루프린트 캔버스 드로잉 API 에 포스트 프로세스 머티리얼 도메인 및 그 알파 채널 출력이 지원됩니다.

* 블루프린트 에디터에서 씬 캡처의 표시 플래그 편집이 지원됩니다.

### 신규: 이미지 플레이트 액터 및 시퀀서 (실험단계)

새로운 (실험단계) 이미지 플레이트(Image Plate) 액터를 카메라에 붙이면 프레임 단위로 정확한 이미지 시퀀스를 전체화면으로 표시하는 것이 가능합니다.

[OBJECT:EmbeddedVideo]
	[PARAMLITERAL:videoid]
	MttCqAGYy0Q
	[/PARAMLITERAL]
	[PARAMLITERAL:width]
	78
	[/PARAMLITERAL]
	[PARAMLITERAL:height]
	56.25
	[/PARAMLITERAL]
	[PARAMLITERAL:units]
	%
	[/PARAMLITERAL]
	[PARAMLITERAL:type]
	simple
	[/PARAMLITERAL]
[/OBJECT]

시퀀서에 같이 들어있는 트랙은 그런 이미지를 블루프린트 또는 C++ 구현 합성 파이프라인의 입력같은 텍스처 프로퍼티에 스트리밍해 주어, 에디터에서 플레이를 통해 재생할 때나 번아웃을 생성할 때 프레임 단위 정확성을 확보할 수 있습니다. 이미지 플레이트 액터와 시퀀서 트랙 모두 이미지 플레이트 플러그인에 포함된 부분입니다.

### 신규: 플러그인에 글로벌 셰이더 지원

이제 **플러그인 및 프로젝트 안에 새로운 글로벌 셰이더를 추가할 수 있습니다**! 셰이더 컴파일러와 셰이더 디렉터리 파일 구조 변화에 대한 이점을 활용하면, 플러그인 및 프로젝트에서 별도의 셰이더를 제공할 수 있습니다. 단순한 예제로 LensDistortion (Engine/Plugins/Compositing/LensDistortion) 플러그인을 살펴보시기 바랍니다.

**주:**

* 글로벌 셰이더를 가진 플러그인 및 프로젝트 모듈은 PostConfigInit 로딩 페이즈를 사용해야 합니다.

* 플러그인 및 프로젝트의 셰이더 지원은 아직 실험단계입니다.

* 플러그인 및 프로젝트는 다른 플러그인의 Public 디렉터리에 있는 USH 파일을 자유롭게 포함할 수 있습니다. 플러그인 제작자는 플러그인간 종속성 처리를 제대로 할 책임이 있습니다.

* USF 파일은 Private 디렉터리에만 있어야 합니다.

* IMPLEMENT_SHADER_TYPE 에 대한 모든 호출은 이제 UDF 셰이더 파일 전체 경로를 (예: "/Engine/Private/Foo.usf" 또는 "/Plugin/FooBar/Private/MyComputeShader.usf") 포함해야 합니다.

* C++ Generated 파일은 /Engine/Generated/ 가상 디렉터리에 매핑시켜야 합니다.

* Shaders/ 디렉터리는 최소 하나의 Private/ 또는 Public/ 디렉터리가 필요합니다. Generated/ 디렉터리가 존재해서는 안됩니다.

#### 셰이더 디렉터리 파일 구조

셰이더 파일은 확장자가 USF 와 새로운 USH 로 나뉘었습니다. USH 파일은 셰이더 엔트리 포인트를 포함하지 않아 다른 셰이더 파일에서 포함시켜야만 하는 헤더 파일에 사용되는 반면, USF 파일은 셰이더 엔트리 포인트가 있어 포함 가능하지 않은 파일에 대해서만 쓰입니다.

추가적으로, 셰이더 파일은 Public 과 Private 폴더로 나뉩니다. 엔진 소스 코드와 마찬가지로, 공용 API 는 Public 폴더 아래 파일에, 구현은 Private 폴더에 배치해야 합니다.

**주:** 셰이더 API 는 엔진 주요 버전 릴리즈 시 크게 바뀔 수 있습니다.

**신규: 플러그인 사이 종속성**

플러그인은 이제 엔진에서 사용하게 될 다른 플러그인에 대한 종속성을 선언하여 추가 플러그인을 자동으로 활성화시켜 로드하도록 할 수 있습니다. 종속성은 .uproject 파일과 같은 문법으로 .uplugin 에 나열하면 됩니다.

### 신규: 벤트 노멀 맵 및 리플렉션 오클루전

[OBJECT:EmbeddedVideo]
	[PARAMLITERAL:videoid]
	wsGDH8KG-vw
	[/PARAMLITERAL]
	[PARAMLITERAL:width]
	78
	[/PARAMLITERAL]
	[PARAMLITERAL:height]
	56.25
	[/PARAMLITERAL]
	[PARAMLITERAL:units]
	%
	[/PARAMLITERAL]
	[PARAMLITERAL:type]
	simple
	[/PARAMLITERAL]
[/OBJECT]

벤트 노멀이란 앰비언트 오클루전(AO) 계산 시 활용할 수 있는 부가 정보입니다. AO 는 지오메트리에 닿지 않는 셰이딩 지점 주변 반구에 복사된 광선의 백분율입니다. 다른 말로, 차폐되(가려지)지 않은 환경광의 양을 뜻합니다. 가려지지 않은 환경광의 평균 방향도 알아낼 수 있습니다. 최적의 퀄리티를 내면서 UE4 의 가정에 일치하도록 하기 위해서는 이 두 가지 맵 모두 선택한 패키지의 코사인 분포를 사용하여 계산해야 합니다. 머티리얼에서 Bent Normal 출력 노드를 사용하여 이 맵을 사용합니다.

이 정보가 있으면 간접광 개선을 위한 여러가지 작업이 가능합니다. AO 와 함께 벤트 노멀을 사용하면 디퓨즈 간접광을 개선시켜 글로벌 일루미네이션(GI)에 근접해 보이도록 만들 수 있습니다. 벤트 노멀은 간접광에 노멀 대신 사용됩니다. 여기에 디테일 노멀이 사라지지 않도록 하기 위한 약간의 마법같은 부가 효과를 더한 것 이외에 나머지 개념은 똑같습니다. 보통 가장 큰 영향을 주는 부분이라면 빛샘 현상을 줄이는 것입니다.

전통적인 방식에서는 살짝 벗어나지만, 이 정보를 활용하는 또 한가지 강력한 방식이 있는데, 바로 리플렉션 오클루전 입니다. AO 는 디퓨즈 간접광의 오클루전에 쓰이는 반면, 리플렉션 오클루전은 스페큘러 간접광의 오클루전에 쓰입니다. 작동 원리는 스페큘러 로브와 가시 원뿔(visible cone, 즉 벤트 노멀을 원뿔 축으로 하고 AO 양을 원뿔 각도로 하여 반구의 가려지지 않은 부분을 나타내는 원뿔)을 교차시킵니다. 그러면 스페큘러 라이트의 빛샘 현상을, 특히나 SSR 데이터를 사용할 수 없는 경우 특히 더 줄일 수 있습니다.

마지막으로 오클루전에 다중 반사(bounce) 추정 기법을 추가했습니다. 첫 번째 반사에 대한 섀도잉에 AO 또는 리플렉션 오클루전이 아닌, 다중 반사의 결과가 어떠할지에 대한 추정치를 사용하는 것입니다. 밝은 머티리얼은 덜 어두워지고 컬러 머티리얼은 채도가 높아집니다.

[REGION:imagetable]
| ![image alt text](image_8a.png)(w:460 convert:false) | ![image alt text](image_8b.png)(w:460 convert:false) |
| --- | --- |
| AO | 다중 반사 |
[/REGION]

### 신규: Xbox One X 지원

**Xbox One X 게임 개발을 위한 초기 지원이 추가되었습니다**!

![image alt text](image_9.png)(w:928 convert:false)

Xbox One X 용 개발에는 별도의 빌드 플랫폼이 필요치 않습니다. Xbox One 용으로 컴파일하는 것으로 충분하며, Xbox One 용으로 쿠킹된 데이터는 Xbox One X 에서도 작동할 것입니다.

### 신규: Oculus, Vive, PSVR 용 VR 관람자 화면 지원

언리얼 엔진 4.17 에 **Spectator Screen (관람자 화면) 기능이 지원됩니다**. Oculus 와 HTC Vive 가 새로 지원되며, PSVR 은 기존에 지원되던 부분이 향상되었습니다!

관람자 화면은 VR 디바이스에 연결하는 '보통' 출력 디바이스를 말하며, 일반적으로 TV 또는 컴퓨터 모니터가 됩니다. 플레이어 한 명이 HMD 를 사용하는 도중 다른 사람들도 그 체험을 관람 또는 접할 수 있습니다.

[OBJECT:EmbeddedVideo]
	[PARAMLITERAL:videoid]
	KThC9s-zXto
	[/PARAMLITERAL]
	[PARAMLITERAL:width]
	78
	[/PARAMLITERAL]
	[PARAMLITERAL:height]
	56.25
	[/PARAMLITERAL]
	[PARAMLITERAL:units]
	%
	[/PARAMLITERAL]
	[PARAMLITERAL:type]
	simple
	[/PARAMLITERAL]
[/OBJECT]
[REGION:caption]
GhostPaint 에서 작업중인 VR 플레이어를 보여주는 관람자 화면 뷰입니다.

Video by Shane Caudle | GhostPaint.com
[/REGION]
 
이제 관람자 화면에는 렌더 타깃이나 UI 를 포함한 어떤 텍스처 뿐만 아니라 (또는 대신) VR 에 표시되고 있는 뷰를 표시할 수도 있습니다. 단순한 레이아웃 시스템이 블루프린트에 노출되어 있습니다. 이제 모든 플랫폼에서 대부분의 디버그 모드를 사용할 수 있습니다.

프로젝트에서 VR 관람자 화면을 지원하는 방법은 [](Platforms/VR/VRSpectatorScreen) 문서를 참고하세요.

### 신규: ARKit 지원 (실험단계)

언리얼 엔진 4.17 에 iOS 용 ARKit 의 초기 실험단계 버전이 지원됩니다! 이 플러그인은 Apple WWDC 프레스 컨퍼런스 무대에서 선보인 바 있던 Wingut 팀의 작품을 기반으로 한 것입니다. 개발자 여러분께서는 올해 말 Apple iOS 11 의 공식 지원에 앞서 이 새로운 피처 세트를 시험해 보실 수 있습니다.

[OBJECT:EmbeddedVideo]
	[PARAMLITERAL:videoid]
	S14AVwaBF-Y
	[/PARAMLITERAL]
	[PARAMLITERAL:width]
	78
	[/PARAMLITERAL]
	[PARAMLITERAL:height]
	56.25
	[/PARAMLITERAL]
	[PARAMLITERAL:units]
	%
	[/PARAMLITERAL]
	[PARAMLITERAL:type]
	simple
	[/PARAMLITERAL]
[/OBJECT]


참고로 이 기능은 실험단계이며, API 와 인터페이스가 바뀔 수 있습니다.

### 신규: 애셋 관리 프레임워크 사용 준비 완료

4.16 에 얼리 액세스 기능으로 처음 도입된 애셋 매니저 기능이 이제 블루프린트 접근이 가능하며, 제작 단계에서 사용할 준비가 완료되었습니다! 애셋 매니저는 에디터나 런타임에 게임 전용 애셋 유형 및 맵을 발견, 로드, 검사하는 데 사용되는 글로벌 오브젝트입니다. 제공되는 프레임워크를 통해 퀘스트, 무기, 영웅 등의 생성 및 요청 시 로드 작업을 쉽게 할 수 있으며, 게임 패키징 및 릴리즈 시 쿠킹 및 청킹 규칙을 구성하는 데도 사용할 수 있습니다. 프로젝트 세팅의 애셋 매니저 탭에서 게임의 규칙을 설정할 수 있습니다:  

![image alt text](image_12.jpg)(w:928 convert:false)

애셋 매니저가 검색한 Primary Asset Types (프라이머리 애셋 타입)은 로드하기 전에도 런타임에 쿼리 후, 요청 시 비동기 로드할 수 있습니다. 애셋 매니저를 사용하려면, 네이티브 (게임에 맞게 서브클래스 확장도 가능한) UAssetManager 클래스에서 함수를 호출하거나, 블루프린트 Asset Manager 카테고리에서 Async Load Primary Asset 블루프린트 함수를 호출하면 됩니다.

### 신규: 블루프린트의 애셋 레지스트리

블루프린트에서 이제 애셋 레지스트리를 사용하여 애셋 관련 정보를 빠르게 찾을 수 있습니다!

![image alt text](image_13.png)(w:928 convert:false) 

### 신규: 비동기 PhysX 쿠킹 지원

PhysX 콜리전 데이터 쿠킹을 이제 워커 스레드에서 할 수 있습니다. 런타임에 하는 경우 좋습니다. ProceduralMeshComponent 가 옵션을 통해 이 기능을 활용할 수 있도록 수정했습니다. 그러면 다수의 ProceduralMeshComponent 가 게임 스레드 외부에서 병렬 처리되어, 런타임에 순간 과부하 현상을 피할 수 있습니다.

### 신규: 모바일 지원 런타임 PhysX 쿠킹 플러그인

이제 모든 플랫폼에서 엔진 디파인/리컴파일 필요 없이 플러그인을 통해 PhysX 콜리전 데이터의 런타임 쿠킹을 켜고 끌 수 있습니다.

### 신규: 피직스 최적화

이제 PhysX 태스크 일괄 처리를 통해 과부하가 줄어듭니다. p.BatchPhysXTasksSize 로 조정할 수 있습니다. 일괄 처리 크기를 키우면 태스크 당 부하가 줄어드는 대신 병렬 처리 이득도 줄어듭니다. 이 부분의 균형은 게임에서 벌어지는 다른 작업에 따라 맞춰야 합니다.

### 신규: 투 본 IK 개선

이제 Two Bone IK 로 제어되는 조인트에 보다 미세한 조정이 가능합니다. 새로 생긴 'AllowTwist' (트위스트 허용) 옵션으로 중간 조인트의 트위스트 여부를 조절할 수 있습니다. 기계 팔과 같은 것에 특히나 유용하게 쓰일 수 있습니다.

[REGION:imagetable]
| ![image alt text](image_14a.png)(w:460 convert:false) | ![image alt text](image_14b.png)(w:460 convert:false) |
| --- | --- |
| 트위스트 허용 꺼짐 | 트위스트 허용 켜짐 |
[/REGION]

'Maintain Effector Relative Rotation' (이펙터 상대 회전 유지) 옵션 수정 및 'Enable Debug Draw' (디버그 드로 활성화) 옵션도 새로 추가했습니다:

[REGION:raw]
![image alt text](image_15.png)(w:928 convert:false)
[/REGION]

### 신규: 애니메이션 블루프린트의 Make Dynamic Additive 노드

애니메이션 블루프린트에 새로 생긴 Make Dynamic Additive 노드는 베이스와 타깃 포즈를 입력으로 받아 평가 도중 애디티브 포즈를 생성합니다.

### 신규: 애니메이션 블루프린트 라이브 편집 (실험단계)

애니메이션 블루프린트가 이제 에디터에서 플레이 도중 라이브 편집 및 리컴파일 가능하여, 반복처리 시간이 훨씬 빨라집니다.

[OBJECT:EmbeddedVideo]
	[PARAMLITERAL:videoid]
	Ec_MIz_mcuM
	[/PARAMLITERAL]
	[PARAMLITERAL:width]
	78
	[/PARAMLITERAL]
	[PARAMLITERAL:height]
	56.25
	[/PARAMLITERAL]
	[PARAMLITERAL:units]
	%
	[/PARAMLITERAL]
	[PARAMLITERAL:type]
	simple
	[/PARAMLITERAL]
[/OBJECT]

레벨에서 디버깅할 애니메이션 블루프린트 인스턴스를 선택하면 이제, 애니메이션 블루프린트 에디터 뷰포트가 해당 인스턴스에 '연결'되어 그 인스턴스의 애니메이션 상태 미러가 표시됩니다.

### 신규: 클로딩 툴 (실험단계/얼리 액세스)

* 클로딩 페인트 툴 프레임워크 리팩터링 작업을 통해 에디터 확장성을 높였습니다.

* 클로딩 피직스 애셋이 한 번 추출하는 대신 참조을 하도록 변경, 생성 이후 수정해도 클로딩 시뮬레이션에 수정 내용이 제대로 반영되도록 했습니다.

* 클로딩 '마스크' 지원 

    * 마스크는 클로딩 버텍스 파라미터에 직접 칠하는 것 이외의 간접적인 방식입니다. 다중 마스크를 정의한 뒤 여러 환경설정을 테스트하면서 개발 도중 교체하는 것이 가능합니다.

* 클로스 페인터에 대한 툴 프레임워크 작업을 재정비했습니다.

    * 스무드 클로딩 페인트 툴을 추가했습니다.

    * 채우기 클로딩 페인트 툴을 추가했습니다.

    * 클로딩 탭에 클로딩 환경설정 편집 패널을 추가하여 '애셋 디테일' 탭을 오가지 않아도 됩니다.

### 신규: 본 제거 시 포즈 굽기

이제 스켈레탈 메시 LOD 의 버텍스 리스킨 작업에 쓸애니메이티드 포즈를 지정하여, 그 원래 본을 가장 가까운 부모 본에 가중치 설정하는 대신 제거하도록 할 수 있습니다.

[REGION:raw]
![image alt text](image_17.png)(w:928 convert:false)
[/REGION]

### 신규: CopyPose 를 사용한 프리뷰 '부가 메시'

애니메이션 툴에서, 모듈식 메시 미리보기용 '부가 메시' 기능이 'MasterPose' 대신 'Copy Pose' 노드를 사용합니다. 즉 스켈레톤을 공유하지 않고, 이름으로 본이 복사되는 메시를 지원하여 유연성이 높아졌다는 뜻입니다.

### 신규: 애님 애셋 브라우저의 폴더 필터

애니메이션 애셋 브라우저에서 이제 선택된 폴더 수에 따라 뷰 필터를 적용할 수 있습니다. 사용가능한 필터 수는 에디터 개인설정의 세팅으로 조절 가능합니다.

![image alt text](image_18.png)(w:600 convert:false)

### 신규: 메시 에디터 머티리얼 및 섹션 패널 개선

머티리얼 및 메시 섹션 편집 인터페이스가 간소화되어 아티스트의 메시 편집 생산성이 향상됩니다. 이 변화는 스태틱 메시 에디터와 스켈레탈 메시 에디터 양쪽에 적용됩니다.

[REGION:imagetable]
| ![image alt text](image_19a.png)(h:560 convert:false) | ![image alt text](image_19b.png)(h:560 convert:false) |
| --- | --- |
| 머티리얼 슬롯 4.17 | 머티리얼 슬롯 4.16 |
[/REGION]

LOD 컨트롤을 같은 패널에 합쳐 스크롤 필요성을 줄임으로써 아티스트가 한 번에 하나의 LOD 작업을 하면서 편집중인 LOD 를 뷰포트 LOD 와 동기화시킬 수 있게 되었습니다. 사용자가 편집중인 LOD 를 뷰포트에서 항상 볼 수 있도록 해줍니다.

[OBJECT:EmbeddedVideo]
	[PARAMLITERAL:videoid]
	YGHGXwIrY20
	[/PARAMLITERAL]
	[PARAMLITERAL:width]
	78
	[/PARAMLITERAL]
	[PARAMLITERAL:height]
	56.25
	[/PARAMLITERAL]
	[PARAMLITERAL:units]
	%
	[/PARAMLITERAL]
	[PARAMLITERAL:type]
	simple
	[/PARAMLITERAL]
[/OBJECT]


### 신규: 머티리얼 굽기 개선 (실험단계)

스태틱 메시 인스턴스의 머티리얼을 구워내는 기능을 추가했습니다. 스태틱 메시 또는 스켈레탈 메시 애셋의 머티리얼을 구워내는 기능 지원을 실험단계 기능으로 추가하기도 했습니다. 

**주:** 애셋의 머티리얼 굽기는 에디터 개인설정의 실험단계 부분 아래 Asset Material Baking (애셋 머티리얼 굽기) 세팅을 켜야 합니다.

### 신규: VR 모드 카메라 프리뷰

씬의 카메라, 또는 캐릭터처럼 카메라를 포함한 액터를 선택하면, 이제 그 카메라가 보는 월드 내 시야를 얻을 수 있습니다. 이 프리뷰는 데스크톱 카메라 프리뷰처럼 핀 고정시키거나 월드 내 다른 곳으로 패널 이동이 가능합니다.

[OBJECT:EmbeddedVideo]
	[PARAMLITERAL:videoid]
	W99HHWwMxq4
	[/PARAMLITERAL]
	[PARAMLITERAL:width]
	78
	[/PARAMLITERAL]
	[PARAMLITERAL:height]
	56.25
	[/PARAMLITERAL]
	[PARAMLITERAL:units]
	%
	[/PARAMLITERAL]
	[PARAMLITERAL:type]
	simple
	[/PARAMLITERAL]
[/OBJECT]

### 신규: 스테레오 레이어 통합 교차 플랫폼

모든 VR 플랫폼이 이제 UE4 기본 에뮬레이션 구현을 통해, 별다른 설정 없이도 스테레오 레이어를 지원합니다!

이제 어느 플랫폼이든 관계 없이 스테레오 레이어를 사용할 수 있으며, 각 플랫폼마다 기본 기능이 다르지는 않을까 걱정할 필요가 없습니다. 레이어를 자사 API 핵심 개념으로 노출시키는 제조사들은 해당 구현 부분을 같은 인터페이스를 지원하도록 제조사의 API 전용 구현으로 대체할 수 있을 것입니다.

**레이어 그리기 순서**

모든 플랫폼에서 스테레오 레이어 순서 결정에 비슷한 작동방식을 제공하기 위해, 면 고정(face locked) 레이어는 우선권에 관계없이 항상 최상 위에 그리도록 변경했습니다. 면 고정 레이어는 종종 게임 UI 에 쓰이며, 보통 그렇게 하려 하기 때문입니다. 기존에 지원했던 플랫폼의 경우, vr.StereoLayers.bMixLayerPriorities 를 1 로 설정하여 이전 방식으로 돌아갈 수 있습니다.

### 신규: Daydream 용 다이렉트 멀티뷰 지원

이제 Daydream 플랫폼에 다이렉트 멀티뷰를 사용할 수 있습니다. 다이렉트 멀티뷰는 Daydream 컴포지터를 통해 전체 화면 사본을 제거하여, 이 기능의 퍼포먼스가 향상되고 메모리 사용량이 감소합니다.

### 신규: UE4 용 Google Tango 플러그인 (실험단계)

언리얼 엔진 4.17 에는 Android용 Google Tango 프로젝트의 초기 실험단계 지원이 포함되어 있습니다. 이 플러그인은 6 축 모션 트래킹, 영역 학습, 환경 재구성, 기타 Google Tango 기능을 지원합니다.

**주:** 이 기능은 실험단계 기능으로 간주되며, 앞으로 나올 엔진 버전에서 API 와 인터페이스가 바뀔 수 있습니다.

### 신규: UMG / Slate 클리핑 2.0

Slate 에 새로운 클리핑 시스템이 도입되어 임의의 트랜스폼 값을 가진 복합 레이어 클리핑 쿼드를 제대로 지원합니다. 추가적으로 이제 위젯은 각각 자신의 자식 위젯을 클리핑할지  선택할 수 있습니다.

[OBJECT:EmbeddedVideo]
	[PARAMLITERAL:videoid]
	7fXB90ORv98
	[/PARAMLITERAL]
	[PARAMLITERAL:width]
	78
	[/PARAMLITERAL]
	[PARAMLITERAL:height]
	56.25
	[/PARAMLITERAL]
	[PARAMLITERAL:units]
	%
	[/PARAMLITERAL]
	[PARAMLITERAL:type]
	simple
	[/PARAMLITERAL]
[/OBJECT]

이 개선사항으로 인해 작동방식 상의 어쩔 수 없는 변화가 몇 가지 있었는데, 자세한 내용은 [forum 게시물](https://forums.unrealengine.com/showthread.php?148183-UMG-and-Slate-New-Clipping-System-in-4-17) 을 참고하시기 바랍니다.

### 신규: 블루프린트 컴파일 매니저

새로 구현된 블루프린트 컴파일 매니저로 **블루프린트 컴파일 시의 로드 시간이 40-50% 단축되었습니다**! 오래 남아있던 컴파일 버그도 몇 가지 처리되었습니다. 자식 유형으로의 형변환 노드를 갖는 블루프린트에 잘못된 경고가 나던 것을 예로 들 수 있습니다.

**주:** 기존 프로젝트와 이슈가 생기는 경우 프로젝트 세팅에서 새로운 컴파일 매니저를 끌 수 있습니다.

### 신규: 블루프린트 프로퍼티 접근자

네이티브 멤버 변수는 이제 UProperty 마크업을 활용하여 UFunction 접근자(Accessor)를 통해 블루프린트에 노출시킬 수 있습니다. 심지어 그 프로퍼티가 BlueprintReadOnly 또는 BlueprintReadWrite 마크업을 사용하여 기존에 직접 노출시킨 적이 있는 경우에도 그렇습니다.

![image alt text](image_23.png)(w:928 convert:false)

### 신규: 고아 핀

새로운 고아(Orphan) 핀 기능을 추가, 핀 제거로 인해 원인불명 콘텐츠가 깨지는 현상을 피할 수 있습니다!

![image alt text](image_24.png)(w:928 convert:false)

사용중인 핀이 노드에서 제거될 때마다, 그 핀을 소리없이 사라지게 만들어 모든 연결을 끊는 대신, 핀을 고아로 유지해 두고 연결되어 있으면 오류를, 기본값이 아닌 입력 핀이면 경고를 냅니다.

### 신규: 소볼 블루프린트 및 머티리얼 노드

소볼(Sobol) 의사 난수열을 사용하여 지점 위치를 생성하는 노드를 다수 추가했습니다.

소볼 수열은 다수의 독립 *차원* 지점 생성이 가능합니다. Random Sobol Float 블루프린트 노드는 일차원 값이 나옵니다. 이를 합쳐 2D 또는 3D 분포를 만들 수 있습니다.

![image alt text](image_25.jpg)(w:928 convert:false)

Random Sobol Cell 2D 블루프린트는 2D 그리드 셀 형태로 2D 소볼 지점을 배치합니다. 각 셀에 들어가는 지점 수를 각기 다르게 하여 밀도를 제어할 수 있습니다. Sobol 머티리얼 노드는 Random Sobol 2D 블루프린트 노드와 같은 2D 지점 위치를 고정 256x256 셀 그리드로 제공해 줍니다. 위는 각 셀마다 가변적인 수의 나무가 배치된 예제로, 바닥의 머티리얼은 셀을 나타내고, 각 셀마다 처음 배치되는 나무 아래에는 점이 표시되어 있습니다.

Random Sobol Cell 3D 블루프린트 노드는 3D 그리드의 3D 지점에 대해 같은 역할을 합니다. 피라미드 내 각 셀에 네 개의 구체를 넣은 예제입니다.

![image alt text](image_26.png)(w:928 convert:false)

Temporal Sobol 머티리얼 노드는 각 픽셀 위치에서 다양한 2D 소볼 수열을 사용, 각 프레임마다 각기 다른 지점 세트를 순환하고 있습니다. 템포럴 안티에일리어싱(TAA)과 함께 여러 프레임에 걸쳐 블렌딩되도록 디자인된 이펙트를 만드는 데 좋습니다.

[REGION:imagetable]
| ![](image_32.png)(w:300 convert:false) | ![](image_33.png)(w:300 convert:false) | ![](image_34.png)(w:300 convert:false) |
| --- | --- | --- |
| 픽셀 당 1 샘플, TAA 없음 | 픽셀 당 4 샘플, TAA 없음 | 픽셀 당 4 샘플, TAA 있음 |
[/REGION]

### 신규: 텍스처 기반 임포턴스 샘플링 블루프린트 노드

임포턴스 샘플링은 주어진 밀도 함수에 따라 지점을 배치합니다. 텍스처 기반으로 배치되는 유연한 2D 배치를 위한 블루프린트 노드를 추가했습니다. Make Importance Texture 블루프린트 노드는 사용할 텍스처를 처리하고, Importance Sample 블루프린트 노드는 제공된 밀도에 따라 지점 위치를 산출해 냅니다.

네 가지 다른 텍스처 휘도에 따라 구체를 배치하는 예제입니다. 첫 번째는 중앙의 높은 밀도가 외곽으로 가면서 서서히 낮아지고 있습니다. 두 번째는 중앙에서 균일하다 테두리 부분으로 가면서 밀도가 낮아지고 있습니다. 세 번째는 육각형 내 지점이 모두 균일합니다. 네 번째는 하양 고리 부분의 밀도가 높고, 빨강 고리 부분의 밀도가 낮습니다.

[REGION:raw]
![image alt text](image_27.png)(w:928 convert:false)
[/REGION]

아래는 빨강 하양 타깃 텍스처에 따라 여덟 개의 광원을 배치한 것입니다. 광원 크기와 색은 국소적 밀도에 비례합니다.

[REGION:raw]
![image alt text](image_28.png)(w:928 convert:false)
[/REGION]

### 신규: Android 툴체인 및 SDK 업데이트

Android 툴체인이 이제 NDK 14b 를, NDK 15 는 실험단계로 지원합니다. Google Play Service 가 이번 릴리즈에서 필수 Android 지원 라이브러리와 함께 9.8.0 으로 업그레이드되었습니다.

이번 릴리즈부터 실험단계 빌드 옵션으로 Gradle 이 지원됩니다. Android 프로젝트 세팅에서 "Enable Gradle instead of Ant [Experimental]" 체크박스를 통해 프로젝트별로 활성화시킬 수 있습니다. 자세한 정보는 [forum 게시물](https://forums.unrealengine.com/showthread.php?150315-Gradle-support-in-UE-4-17) 을 확인하세요.

이번 릴리즈에서 Gradle 관련 이슈를 겪으신 경우 알려주시기 바랍니다. Ant 는 Google 에서 더이상 지원하지 않으므로 지원하지 않을 계획입니다.

### 신규: iOS 및 Android 모바일 실행파일 크기 감소

Android shipping 빌드에 대해 -ICF 플래그를 활성화시켰습니다. 엔진의 .so 크기가 약 5 MB 감소되어, 80 MB 에서 약 75 MB 가 되었습니다. 이는 미압축 기준이며, .apk 파일 내 압축의 경우 그 차이는 24.8 MB vs 23.6 MB 입니다.

이제 iOS 에서 기본적으로 ObjectiveC 에 대한 예외를 비활성화시켜, 실행파일 크기가 약 6.5 MB 감소되었습니다. 최적화된 shipping 빌드 크기는 52 MB 에서 46 MB 로 감소됩니다.

iOS 빌드의 경우 강제 코드 인라인 기능을 비활성화시키는 옵션도 추가했습니다. 크기 최적화와 같이 할 때 궁합이 가장 좋으며, 추가적으로 약 2.5 MB 정도 감소 효과가 있습니다. 즉 크기 최적화된 shipping 빌드의 경우 45 MB 에서 37 MB 까지 감소됩니다.

4.18 에서도 추가적인 실행파일 크기 감소 소식이 있을 것입니다.

### 신규: 모바일 독립 반투명

"Mobile Separate Translucency" (모바일 독립 반투명) 마킹된 반투명 오브젝트는 블룸 및 뎁스 오브 필드 이후 독립적으로 렌더링됩니다. 

이 옵션은 머티리얼 에디터의 Translucency (반투명) 섹션에서 찾을 수 있습니다. 독립 반투명은 MobileHDR 옵션은 켜고 MSAA 옵션은 꺼야 합니다. 그렇지 않으면 보통 반투명으로 렌더링됩니다.

[REGION:raw]
![image alt text](image_29.png)(w:928 convert:false)
[/REGION]

신규: 고사양 Android의 sRGB

OpenGL ES3.1 또는 Vulkan 으로 빌드된 Android 어플리케이션은 이제 에뮬레이션이 아닌 네이티브 sRGB 샘플링을 사용합니다. 디바이스에서 보다 나은 텍스처 색 인지 해상도를 기대할 수 있습니다.

### 신규: Android 울트라 와이드 종횡비 지원

[REGION:raw]
![image alt text](image_30.png)(w:928 convert:false)
[/REGION]

언리얼 엔진 4.17 에는 울트라 와이드 종횡비가 지원, 삼성 갤럭시 S8 과 같은 넓은 화면을 지원합니다.

기본적으로 지원되는 최대 화면 종횡비는 2.1 (폭 / 높이) 입니다. Android는 종횡비가 더 큰 디바이스에서 어플리케이션에 자동으로 레터박스를 적용합니다. 기본 종횡비는 프로젝트 세팅의 Android 섹션에서 바꿀 수 있습니다.

**신규: PVS-Studio 정적 분석**

이제 UE4 에 (별도로 사용 가능한) PVS-Studio 정적 분석이 지원됩니다. PVS-Studio 정적 분석을 사용하려면, UnrealBuildTool 명령줄에 -StaticAnalyzer=PVSStudio 를 붙이면 됩니다.

PVS-Studio 관련 자세한 정보는 [블로그 게시물](https://www.unrealengine.com/en-US/blog/static-analysis-as-part-of-the-process) 을 참고하세요.

### 신규: 신규 플랫폼 다수에 언리얼 오디오 지원 (얼리 액세스)

이제 Android에 새로운 언리얼 오디오 시스템이 지원, 퍼포먼스가 향상되고 소리 끊어짐 현상이 수정되었습니다. 뿐만 아니라 PlayStation 4, Xbox One, iOS, Mac OS 도 지원됩니다. 언리얼 오디오는 아직 얼리 액세스 단계이며, 버그가 있을 수 있고 앞으로 나올 버전에 변경될 수 있으니 유의해 주시기 바랍니다.

### 신규: 오디오 스트리밍 기능 실험단계 탈피

언리얼 엔진의 오디오 스트리밍 기능이 '실험단계' 딱지를 떼고, 이번 릴리즈에 픽스가 다수 포함되었습니다.

## Release Notes

### AI

* Fix an error on shutdown when the CDO of UAIPerceptionComponent tries to clean up (as it was never registered in the first place)

* Fixed UCrowdFollowingComponent::UpdateCachedDirections crashing when CharacterMovement is not set

#### Behavior Tree

* Fixed missing decorator deactivation notifies: placed on parallel task or during StopTree call.

* Changed UBTFunctionLibrary exposed functions to log a runtime error instead of check/ensure if passed a null world context object

* Improved BT editor's robustness against changes to user-created enum classes.

#### General

* Fixed a bug in EQS query running that caused EQS Manager to always use up the whole time budget for the frame if all performed queries happened to finish.

* Fixed gameplay task: TimeLimitedExecution being removed during garbage collection.

#### Navigation

* Added continuous goal tracking mode to AI Move gameplay task.

* Added a way to override default crowd manager class.

* Fixed: Issues with "ModifiersOnly" NavMesh streaming

* Fixed newly created navigation areas not having any effect in navigation modifiers until editor restart.

* Fixed navlink component's local transform not being used in exported navigation data.

* Fixed navmesh tile connectivity for polys with more than 4 neighbors.

* Fixed navigation area modifiers created from shape components: sphere and capsule.

* Fixed navigation data's flag: bForceRebuildOnLoad being ignored when navmesh auto rebuilds were disabled.

* Fixed AI getting stuck during path following when path is constantly invalidated by very frequent navmesh updates.

* Changed hardcoded debug flags of crowd manager to console variables: ai.crowd.*

* Fixed memory leak in navmesh generators: monotone region partitioning code.

* Fixed navmesh generator ignoring low area modifiers on subsequent rebuilds.

* Made NavigationSystem's AbstractNavData instance never serialize again. The change will also clear out all the existing instances on load.

* Fixed a bug causing changes done to StaticMesh's navigation properties serialize in an unpredictable fashion.

* Fixed NavModifierVolume not responding to editor-time changes to its properties.

* Added a spiced up, community-suggested, working solution to patching up dynamic navmesh after world offset.

### Animation

* FCSPose<PoseType>::ConvertToLocalPoses Allow root bone to be modified. Minor optimization: Take out root bone check from loop.

* Added new BlendBoneByChannel AnimNode to blend two poses, per bone, per channel. For example blend only translation from Pelvis but leave rotation untouched.

* Delay clearing of MontageInstances and triggering 'OnAllMontageInstancesEnded' until all Montage Events have been dispatched.

* Morphtarget tolerance weight can be configurable

    * r.MorphTarget.WeightThreshold

* Prevent creating invalid 'VBCompactPoseData', resulting in crashes in Animation Modifiers. (Fix for licensee crash).

* Minor optimization to FAnimationRuntime::CreateMaskWeights. Since Parents are before Children, use that to speed up Mask Weight creation.

* Batch Animation Compression fixes. - Fixed incorrect 'MemorySavingsFromPrevious' resulting in picking suboptimal compressors. - Fixed uncompressed size calculation not taking into account scale component. - Fixed animations with 'bDoNotOverrideCompression' causing crashes because they were not recompressed. - Animation with 'bDoNotOverrideCompression' that use the automatic compressions are not skipped by the automatic batch compression. - Added 'CompressCommandletVersion' to DDC key, so we can force recompression on all animations easily.

* Bug Fix:

    * Fixed additive pose blending on pose asset

    * Fixed on crash with pose asset retargeting

* Fix various crashes when calling methods in USkeletalMeshSocket with no component specified

#### Animation Assets

* Added mesh space additive support to Blendspace1D

* Added ability to set montage section time directly via right click menu.

* Added an event in USkeletalMeshComponent when the animation instance is initialized

* UAnimMontages now get one slot by default on construction.

* Removed UID from smart name serialization to help with non-deterministic animation cooking

* Fixes for deterministic cooking of animations

    * Make sure curve names have been validated before building compressed data

    * Remove "Sort by UID" code.

* Fixed pose watched bones not drawing when the anim Blueprint debug object != the preview instance.

* Fixed an issue related to Blend-spaces using individual sample rates causing issues with Marker Syncing

* Fixed compression ratio for baked additive animations by storing the size of the raw data that was compressed in DDC.

#### Animation Blueprint

* Constraint AnimNode

    * Animation Blueprints can now be live edited & recompiled while running on a PIE/SIE instance.

    * When choosing an Animation Blueprint to debug in the level, the viewport is now 'connected' to that instance & displays a mirror of the instance's animation state.

* Add MakeDynamicAdditive node to anim Blueprints. Takes a base and target pose as inputs and creates the additive pose during evaluation.

* Added source direction to aim offset lookat node instead of assuming X-Axis as lookat direction.

* Created FBoneSocketTarget that support bone and socket

    * The future plan is this will have UI with only one tree users can pick whether bone or socket

    * Internally it cached related bone, relative transform, and calculate correct target transform

    * LookAt node uses this, and IK nodes will use this in the future release

* AnimBlueprint supports BeginPlay event

    * Before Initialize was called during Registration, which can be too early. Use BeginPlay for any ingame initialization.

* Allow curve to be disabled when evaluating animations by calling SetDisableAnimCurves

* Added TransitionFollower as a sync group role. Same blend in behaviour as TransitionLeader but makes node a follower once fully blended in.

* Added hooks in AnimBlueprintCompiler to perform Post Compile Validation in an AnimInstance subclass. Also added virtual function to opt in for warnings when nodes are not using Fast Path.

* If an AnimBP has warnings or errors, force opening Compiler Results Window, and recompile to display results.

* Two Bone IK

    * Added **bAllowTwist** option on Two Bone IK for mid or low joints to optionally not twist : useful for mechanical arm. Default is bAllowTwist on.

    * Fixed bMaintainEffectorRelRot was hidden unless you select bone as effect target

    * bEnableDebugDraw : You can enable debug draw

* Added root motion support for animation sub-instances

* Fixed AnimBlueprint function graphs marked as 'const' to treat 'self' as read-only when compiling.

* Fixed bug where "object" to "weak object" copies would fail to properly copy the object using the animation Blueprint fast path.

* Nodes can now be edited using multi-selection in Animation Blueprints

* Fixed crash loading anim BPs with split pins where we incorrectly assumed the outer graph's type

* Moved USkeleton.ReferenceSkeleton building from PostLoad to Serialize to fix missing virtual bone warning when opening anim Blueprints.

* Modify bone node now disallows editing of pin values in the viewport if the pin is linked

* Prevented propagation of crossfade settings to non-shared animation state machine transitions

* Allowed blend by int and enum to appear in the context menu when dragging off a pose pin in animation Blueprints

* Prevented connection of wildcard & pose links in animation Blueprints (except in the case of reroute nodes)

* Fix 'error' icon when dragging anim assets over the animation graph

* Fixed an issue where Marker Syncing was not working correctly when a Blendspace Player was given a Start Position input value inside of an AnimBP

* Fixed subinstance bridge parameters appearing in the variable list in an anim Blueprint using subinstances with expose pins

* Fixed bugs with PoseDriver not supporting manually-added targets.

* Fixed post process anim graphs producing broken poses when LODs had removed bones.

* Fixed bug where montages did not indicate they cannot be placed in animation graphs.

* Fix crash when deleting a transition rule while it's graph is open in an orphan window.

#### General

* Added in-game bone rendering feature. Use 'Show Bones' in the console or the Show -> Developer menu to display the bones of all skeletal meshes.

* Added getters to alpha blend for remaining blend time and begin value, and made Update return any overshoot if applicable.

* Moved Epic internal project's animation caching system into the engine. This helps with implementing natively-optimized animation state machines.

* Fixed crash getting a skinned vertex position when using a master pose component

* Fixed Update not being called on post process animation instances when the main anim instance does not do a parallel update.

* Bug Fix:

    * AnimNode API now specifies _AnyThread postfix on functions that run on non-game threads

    * Changed FAnimNode_Base::RootInitialize to FAnimNode_Base::OnInitializeAnimInstance, supplying the anim instance as well as the proxy.

* UAnimNotifyState-based Blueprints now start off with a ReceivedNotify_Tick function

* Exposed some blend space parameters to code that were already available to Blueprints.

* Fixed transition getters not working with negative playrates

* Moved AnimationInput and AnimationOutput metadata into the ControlRig plugin

* Fixed characters not animating on servers when their movement component was set to not replicate movement

* Fixed crash when spawning a skeletal mesh-containing actor from an existing template actor.

#### Import / Export

* Added support for importing multiple Texture coordinate sets from Alembic files

* Default skeleton to something useful when importing FBX. We default to the first skeleton we find in the target directory

* Fixed an issue which prevented re-importing Animation Sequences imported from an Alembic file

* Pull request: Allow to hide the Alembic import wizard via the bShowOption property

* Sound waves now appear in the content browser after import using the facial anim bulk importer

* When reimporting animations, we now properly update existing animations in the scene

* Fixed undeletable folders when importing facial animation audio

#### Skeletal Mesh

* We don't import any empty morphtarget anymore. Those empty morphtargets will be also removed on loading.

* Fixed order of default values in FAnimUpdateRateParameters.BaseVisibileDistanceFactorThesholds

* Prevent FRenderStateRecreator from recreating render state when component is unregistered.

* Fixed Crash with Morphtarget valid indices mismatching with render resource data

* Fix ensures caused by FSkeletalMeshMerge not properly merging UVChannelData.

#### Tools

* New:

    * Additional Mesh now uses Copy Pose instead of Master Pose Component

    * This change also allows to create custom asset that defines the preview

    * You can create class that implement UInterface and derive from DataAsset

    * This asset can be created in editor when needed

    * You can pick these assets in the "Additional Mesh Section" to preview multiple meshes together.

    * Example is to create customization options in that asset, and returns the list of meshes together, it will use copy pose to follow the base preview mesh.

    * You still need preview mesh which is animate based on the system, but these ADDITIONAL MESHES will follow the preview mesh transform

* Add anim list to details panel for BlendSpace

* Improved Bake Pose feature to also function without Simplygon

* Added folder filters to anim asset browser

* Made animation notify tracks renamable.

* Moved "New Sync Marker" menu entry out of new notify sub menu and into the main notify track context menu

* Fixed an issue where previewing blend spaces did not work if the grid was not focused

* Updated the SkeletalMesh editor to support focusing on individual sections of a mesh when the focus key is pressed.

* Added vertex color show menu option for skeletal meshes

* This is an elaborated preview customization option

    * If you have DataAsset that implements IPreviewCollectionInterface, with a function, `*virtual void GetPreviewSkeletalMeshes(TArray<USkeletalMesh*>& OutList) const *`, it will allow you to pick those assets in the Additional Mesh section

    * Make sure to turn on bAllowPreviewMeshCollectionsToSelectFromDifferentSkeletons

    * This creates each component and allow them to copy pose from base mesh

    * This additional meshes don't have to share same skeleton

* Improved the details customization of alpha scale bias.

* Audio attenuation is now applied in animation editors.

* When changing the preview mesh in an animation asset, the change is now temporary and needs to be committed if it needs to be saved

* Selection of 'current' asset now opens that asset in the animation asset shortcut bar (top-right toolbar).

* Fixed crash right-clicking multiple asset types that include control rig sequences

* We now clamp cloth paint values appropriately, disallowing negative paint values

* Bug Fix:

    * Added inline editors for time and frame index to montage section/notify menu

    * Expanded montage section struct in details panel so it doesn't appear collapsed first time

* Fixed montage segment play rate not affecting the preview viewport. Fixed preview viewport not obeying start/end times of segment if the scrub bar UI is offscreen.

* Fixed clothing section combo boxes in skeletal mesh editor not correctly updating when using section selection to create new clothing assets.

* Fixed issue where undoing a curve renames in the Anim Curves tab would cause duplicate of the specific curve in the list

* Fixed issue where undoing rename of a curve in the Animation Editor would cause all curves to disappear

* Fixed 'reset to default' button not showing up in customized properties.

* Fixed a crash caused by reloading a referenced Skeleton asset while having the Animation Editor open

* Fixed crash when creating a new animation from ref pose on a skeleton that has virtual bones

* Fixed editor crash when performing drag operations in the animation notify track window

* Fixed invalid check when creating an animation from current pose in the animation editor.

* Fixed dangling references to animation preview scene, avoiding crash when undoing when skeletal mesh is re-opened

* Fixed stretched icon in preview scene settings

### Audio

* Removing audio streaming as an experimental feature in the engine.

* New:

    * Fixed packaging compilation errors.

    * Consolidated baking into a single window. Users can select multiple sources to bake at once.

    * Added support for transmission.

    * Phonon Probe Volumes are set to NoCollide collision profile by default.

    * Phonon Probe Volumes may be arbitrarily rotated, scaled, and translated.

    * Added Phonon Scene actor for scene export - this removes need for external .phononscene file and simplifies packaging.

    * Added support for multichannel

    * Fixed buffer size related crashes. Added support for Win32.

* Audio mixer improvements for android.

* Updates and improvements to Steam Audio.

* Adding ability to modify Low Pass Filter frequency with audio components.

* Deleting unused velocity variable in OpenAL implementation.

* Added SoundClassObject to the asset registry searchable data for sound assets, to make it easier to track down volume/muting bugs when assets have the wrong sound class set (Note: Assets will need to be resaved before this data will show up for unloaded assets (loaded assets should work immediately))

* No longer forcing pending decodes to ensure completed on shutdown in audio mixer.

* Changed to using tasks from task manager vs using Async.h futures in audio mixer decodes.

* Added new, combined macOS/iOS/tvOS back-end for new audio engine.

* Hiding streaming options (and import options while i'm at it) from media sound waves.

* Fix for streaming sound wave in audio mixer during shutdown.

* Fixed packaging a project for Windows with the Steam Audio plugin enabled (Contributed by projectgheist via Github pull request)

* Fixed crash that could occur while shutting down a streaming SoundSource

* Fix for a number of threading issue in audio streaming manager.

* Fix crash when duplicating a sound wave asset in content browser due to thumbnail rendering.

* Fixed crash that occured when trying to launch the engine with the new Unreal Audio engine while the current audio playback device is disabled on Windows.

* Fix for a crash in parallel source processing in audio mixer.

* Several optimizations to source manager in audio mixer.

* No longer loading XAudio2 module in server builds.

* Properly deleting AudioClockVoice in XAudio2 backend.

* Crash fix for audio on android.

* Fix for crash when an audio streaming sound wave doesn't have serialized stream chunks.

* Crash fix for when a map attempts to cook a streaming sound file while targeting Linux.

### Automation

* Automation - Forcing textures to load before taking screenshot, so that the scene gets another opportunity to render before we render with Slate.

* Automation - Fixing a bug with the screenshot comparison tool not replacing (removing) the old screenshot data.

* PR #3650: Changed TestNull to accept const pointers. (Contributed by e-agaubatz)

* Automation - The system now waits for the asset registry to finish loading assets before running tests.

* Automation - Fixing some delay screenshot code in the Screenshot Functional Test Actor that was preventing the delay from having any effect.

### Blueprints

* Native member variables can now make use of uproperty markup to be exposed to Blueprints via ufunction accessors even if the property had been previously exposed directly using BlueprintReadOnly or BlueprintReadWrite markup.

* Added "Importance Texture" Blueprint nodes to place objects according to a density texture.

* To help avoid mysterious content breakage as the result of pin removals a new Orphan Pin feature has been added. Any time a pin that is in use has been removed from a node, instead of that pin quietly vanishing, breaking all connections, the pin will now be retained as an Orphan, and an error (if it is connected) or a warning (if it is an input pin with a non-default value) will be emitted. 

* Added new "Sobol" Blueprint nodes for placing objects in 2D or 3D according to the Sobol distribution.

* Find References can now be used which right clicking on components in the component tree.

* The Resolve Asset ID node is now called Resolve Soft Reference and can now also be used to convert from normal hard references to Soft References.Add == and IsValid for Soft Reference and Soft Class Reference

* Blueprints: Allow non-readonly variables from the My Blueprints panel to be dropped onto exec pins, which creates a variable set node for them

* Added support for drag-dropping a function from My Blueprints directly onto a pin, which performs the same action as if they had been picked from the menu after dragging off of that pin

* Added support for drag-dropping from the palette onto a pin, which behaves the same as if you'd dragged off of the pin and picked the palette entry from the context menu (wiring the two nodes together if possible)

* Added a search bar to the components tree in Blueprints.

* Changing default values for functions/macros will correctly update any existing calls, if the parameters were still set to their initial default value. If an instance had already been broken by a resave, it can be fixed by using the new "Reset to default value" option when right clicking a pin

* Change Blueprint function/macro inputs to use the Pin Default Value UI instead of a default text field. This allows setting Enum default values correctly. Types that do not have Pin UI will not be available to modify, previously you could set them but they would not work properly.

* Improved Input BP library node display names

* The intermediate plugin generated by Blueprint nativization is now easily included in your Visual Studio project - making it easier to debug.

* Graph pin container type now represented by an enumeration (EPinContainerType) rather than 3 "independent" booleans.

* Improved exposure of input settings and binding to Blueprint.

* Exposed static mesh material accessors to Blueprints

* Expose FVector2D / FVector2D to Blueprints

* Native properties that are not exposed to Blueprints will now emit a warning when used as a Get in a Blueprint. In a future release this will be upgraded to an error.Properties defined in a Blueprint but marked private will now provide a warning when used in an invalid context. In a future release this will be upgraded to an error.

* Renamed UEdGraph::CreateBlankNode to CreateIntermediateNode Added bIsIntermediate flag to UEdGraphNode which is set via CreateIntermediateNode

* When setting the type of an Object variable in Blueprints, renamed AssetID to SoftObjectReference and AssetClassId to SoftClassReference. The native names are still AssetPtr and AssetSubClassOf but they will change in 4.18 to better match the Blueprint names

* Non-Blueprint type structs can no longer be made/broken Non-Blueprint visible properties in structs will no longer have pins created for them

* Added "sine" as a search keyword to the DegSin and DegAsin UFunctions, for consistency with their radian-based counterparts Sin and Asin.

* Added comments to AppendTags and AppendMatchingTags so it's easier to find the functions if you're looking for functions based on set theory (Union, Intersection, etc.).

* Improved the details panel customization for optional pin nodes like Struct Member Get/Set

    * The category, raw name, and tooltip of the property are searchable / filterable

    * The tooltip of the underlying property is now displayed when hovering over the property name

* Added new config options for execution wire thickness when not debugging (DefaultExecutionWireThickness) and data wire thicknesses (DefaultDataWireThickness) to the Graph Editor Settings page

* Display <Unnamed> instead of nothing for Pins with blank display name in the Blueprint compiler log.

* During Blueprint compilation messages can now be stored off in the compiler log during early parts of validation and then committed to the log later (for example once pruning is completed).

* FKismetCompilerContext now has OnPreCompile and OnPostCompile delegates to allow external systems to get notified and react.

* Propagates scene capture engine showflag changes fromBlueprint editor to the Blueprint instances.

* Move UAnimGraphNode_Base::PreloadRequiredAssets up to K2Node, make sure nodes get a chance to preload data before compilation manager compiles newly loaded Blueprints

* Add a K2Node_AddPinInterface to generalize the interface that K2Nodes implement to interact with SGraphNodeK2Sequence so it can be more generally used

* Fixed loss of default values in a Blueprint's subobjects when the parent Blueprint was also being regenerated

* Assets that are only referenced by pins inside active Blueprints will now correctly be garbage collected. This means that if you use LoadAsset to load something and do not store it for future usage, it will no longer stay in memory forever until the loading Blueprint is destroyed.

* Fix several issues where Blueprint Local Variable values were being reset to default incorrectly. They should now only reset when the type is changed.

* LoadAssetClass nodes in macros now cook deterministically

* Fix several issues with Select Blueprint nodes not properly updating when changing pin connections or defaults

* Moved Blueprint-nativized User-Defined Struct implementations into its own generated .cpp file in order to avoid circular header file dependencies at C++ compile time.

* Client only Blueprint data is correctly loaded when running the editor with the -server flag

* Soft Reference Blueprint pins (previously Asset ID/Class ID) now correctly store their references as soft pointers internally. This prevents editor builds from needing to hard load assets that are only softly referenced.

* Fix several issues with Animation pin default values. This stops "phantom" references to old default values existing when pins are connected to runtime variables

* Nativizing a Blueprint class with a nativized Data-Only Blueprint class dependency will no longer lead to a C++ compile error at cook/nativization time.

* Nativizing a Blueprint class with a non-nativized Blueprint class subobject dependency will no longer lead to a crash at load time.

* Fix many bugs with Blueprint pin default values, and add "Reset to Default Value" option to pin context menu

* When dragging multiple assets into the components tab create them as sibling components, not nested in a child/parent relationship.

* Fix Blueprint string-to-text functions to properly be culturally invariant, if you want translated text you should be using Text variables directly. Also updated the transform-to-text output to match the comment

* Maps and set pins created by splitting a struct pin now display correctly.

* Suppress array "Get" node fixup notifications on load when the Blueprint Compilation Manager is enabled.

* Collapsed graphs containing a local variable node will no longer cause a Blueprint compile error when the parent graph is renamed.

* Search box is now correctly focused when expanding the map value type.

* Subobjects of components in Blueprint classes now consistently get PostLoad called on them.

* Fixed a bug with nativized Blueprints that could produce a compiler error when overriding an interface function in the Blueprint.

* The Blueprint Diff tool now properly reports component type changes.

* Fixed failed validation of Bitmask Enum types when serializing Make Bitmask Literal nodes.

* Fix invalid custom type selections on member fields in the User-Defined Structure Editor after a reload.

* Fixed a crash that could occur when using the CookOnTheFly server with Blueprints that share struct dependencies.

* Fixed a bug that could cause stale Blueprint script to be ran for instances in hidden sub-levels.

* Fixed a bug that caused a Blueprint compile error when using enum literals with maps or sets.

* Fixed a crash that could occur when a level Blueprint was auto-saved.

* Fixed a bug that prevented you from having local Blueprint struct variables that contained a map or set.

* Fixed minor log spam when compiling a Blueprint function with a local TSet/TMap variable.

* Fixed broken pin wires after an Expand Node operation.

* Blueprint Diffing: Pushed some node diffing code down from UAIGraphNode into UEdGraphNode so nodes with details panel properties will diff correctly (e.g., various animation nodes and BP switch nodes)

* Fix a bug where a Blueprint struct could lose its defaults after restarting the editor.

* Blueprints loaded as the result of a 'Diff' operation are now properly compiled on load - just as if they were loaded via the content browser

* Fixed a blocking error that could occur when building a project with Blueprint nativization. If no Blueprints were nativized, we don't try to build the generated plugin.

* Fixed a bug that allowed Blueprint users to mark Object variables as config properties (could later cause an error in Blueprint nativization).

* Fixed a bug that could cause a nativization compiler error when using a class array in Blueprints that was originally defined as an array of TSubclassOf pointers.

* Fix it so the Load Asset node can be correctly used with the pin drop down instead of forcing you to connect a pin. It also now has a pass through execution pin like other async tasks that can take a long time

* Fix it so Local Blueprint Variables correctly handle when referenced assets are renamed

* Fixed source of occasional editor crashes that could occur in the Blueprint editor while rebuilding the context menu from the action registry.

* Fixed a C++ compilation failure during packaging that would result when nativizing a Blueprint that overrides a native function with a 'TSubclassOf' parameter or return value.

* LatentGameplayTask nodes can now have default values for complex types (e.g. LinearColor)

* Fixed read-only context-menu palette items showing up as grayed out

* Blueprint compiler log now correctly appears on Blueprint editor startup when the log contains warnings or errors. There is no need to recompile to see errors any more.

* Fixed potential data loss on load for circularly dependent Blueprints with more than two levels of inheritance (e.g. values would revert to a Blueprint's Parent's Parent values, instead of matching the Blueprint's immediate Parent)

* Fixed an Event-Driven Loader assertion on load in a nativized build with one or more Actor subobjects instanced via the EditInlineNew UI in the Blueprint class defaults property editor.

* Changed the warning for calling editor-only UFunction to an error during Blueprint compilation

* Removed an unnecessary ensure() after pasting an Event node.

* Fixing name of pins for AimOffset nodes set by pin.

* Checks connected pin that AimOffsets use in Blueprints for their name and value.

* Fixed a crash UKismetRenderingLibrary::DrawMaterialToRenderTarget caused by passing a local FName to a lambda by reference instead of by value. Lambda was executed after the local variable was deleted causing a crash.

* The 'const' function flag will now propagate from an Interface Blueprint to all implementing Blueprint classes.

* Fix it so modifying the Game Mode Blueprint from project settings will now work properly even without manually compiling or restarting the editor

* Don't show default value or pass by reference for exec pins in macro input properties.

* After undo/redo reference pins correctly visualize with diamond pin shape instead of circle.

* Fixed crashes caused by undo/redo of member removal in a user defined struct when a Blueprint node has that struct pin split.

* Fix potential crash with the String Mid Blueprint function

* Fixed some bugs where a newly added item would fail show up in the "My Blueprints" tree if there was a filter active (e.g., when promoting a variable)

    * Centralized the logic for clearing the filter so it happens when we try and fail to select the item, rather than ad hoc in various other places

    * Made it only clear the filter if necessary, rather than (almost) always clearing it when adding an item

* Fixed a regression where the duration of compilation message was not being printed to the output log

* Fixed crash that could occur when changing a structure used in a Blueprint Map variable (e.g. as a Key or Value)

* Fixed bug where child Blueprint with inherited child actor component could end up with child actor class being null but child actor template being non-null.

* Fixed a bug where error messages would compound when a node was reconstructedFixed a bug where signature checking in event nodes didn't handle split pins correctly, causing a bogus message if any pins were split Fixed a bug where UK2Node_Event::IsFunctionEntryCompatible wasn't consistently looking at the delegate pin name

* Fix rare crash in RefreshStandAloneDefaultsEditor when the Blueprint Editor is opened while Blueprint had errors in it

* Prevent issues with renaming event dispatchers to contain periods where they could no longer be renamed or deleted (note: periods will not be allowed in new names in the future)

* Fixed a reported crash when pasting nodes between unrelated Blueprint graphs.

* Fixed a crash when launching a packaged build that includes a nativized Blueprint instance with a ChildActorComponent instanced via an AddComponent node.

* Fixed crash when multi-editing actor Blueprints.

* Expansion of a MakeArray node will no longer add spurious AddInputPin transactions to the undo buffer.Fix inability to undo/redo pin additions to sequence node

* Added validation when renaming variables, functions, components, multicast delegates, etc... to prevent names from containing some unacceptable characters

    * This validation only kicks in when trying to rename an item, so bad names in existing content are 'grandfathered in'

    * These bad names can cause bugs when working with content that contains these characters (e.g., names that contain a period cannot be found via FindObject<T>

    * Currently only . is banned, but eventually we may expand it to include all of INVALID_OBJECTNAME_CHARACTERS

* Fix crash undoing copy of Blueprint nodes in a level script containing a literal actor reference to an actor in another map.

* Fixed undo for "Index" pin type changes on Blueprint graph nodes.

* Blueprint calls to Timespan From functions will no longer crash when passed very large values.

* Fix crash when using gameplay tag as key for a Blueprint map variable.

* Fix crash when undoing a default subobject class change in a Blueprint

* Fix Blueprint nodes loaded after a change to a user defined enum not updating to reflect undo/redo of those changes.

* We now prevent "Construct Object From Class" Blueprint nodes from compiling if the selected class does not include 'BlueprintType' in its inheritance hierarchy. This was the originally-intended behavior.

* Fixed a potential crash when changing a ChildActor component's 'ChildActorClass' default value on a Blueprint that also sets 'ChildActorClass' via a "Set Child Actor Class" function call node in the Construction Script.

* Fix crash when calling Blueprint functions that have UStruct parameters with WITH_EDITORONLY_DATA members

* Fixed issue where the asset drag-drop tooltip always showed a no/invalid icon when dragging over the graph.

* Fixed a Blueprint nativization issue in which project packaging would fail to build the staged EXE with a nativized Blueprint class containing a UInterfaceProperty.

* Undo of Copy Signature action for event dispatchers now works correctly.

* Connecting a set or map to an expose on spawn pin no longer results in a compile error.

* Fix crash when changing the Value type of a Map property

* Fixed crash calling OnRemoveExecutionPin on an invalid pin.

* Fixed infinite loop/stack crash that would occur if a series of reroute nodes were formed in to a loop.

* No longer able to remove a member of a struct's split pin on Make Array or Commutative Binary Operator Nodes.

* Fix issues where removing the wrong pin from a Switch Blueprint node could corrupt data

* Switch node default pin once again correctly appears as an exec output.

* Switch string nodes are now validated that all cases are unique.

* Fix Switch On Gameplay Tag Container node to work properly

### Core

* Delete FixupRedirects commandlet, replace with -FixupRedirects/FixupRedirectors option on the ResavePackages commandlet. This new method is much faster than the old commandlet as it uses the asset registry vs loading all packages.

* AssetPtr and AssetSubclassOf can now be used with config Properties

* Fix several issues with cooking StringAssetReferences and TAssetPtrs. FStringAssetReferenceSerializationScope can be used to override rather those references should be cooked or are editor only.

* Changed UClass::ClassFlags to be of type EClassFlags for improved type safety

* Marked TNumericLimits as constexpr so they can be used in static asserts

* Several improvements to FAssetData and AssetRegistry memory usage, memory should be reduced by several MB in large cooked games:

    * FAssetData::TagsAndValues was converted to use the more memory efficient TSortedMap structure, and will not be created if there are no tags

    * Added bFilterAssetDataWithNoTags option to the [AssetRegistry] ini section, if set it will reduce cooked memory usage by not saving AssetData that has no tags defined

    * Asset Registry memory usage is now included in the MemReport output

* Add Algo::BinarySearch, LowerBound, and UpperBound. These are setup to allow binary searching a presorted array, and allow for specifying projection and sort predicates. Add TSortedMap, which is a map data structure that has the same API as TMap, but is backed by a sorted array. It uses half the memory but will be slow for large maps and it has no UProperty support Add FName::CompareIndexes so a SortedMap with FNames can be used without doing very slow string compares, and FNameSortIndexes predicate to sort by it

* Added both a black and whitelist to plugin descriptor files that lets you exclude a plugin from certain targets (client, server, etc.).

* Added a feature where plugins included in a project through the .uproject's 'AdditionalPluginDirectories' list automatically get included in the generated code project (for Visual Studio, etc.).

* Specifying properties as BlueprintReadWrite or BlueprintReadOnly in a non-BlueprintType is now an Unreal Header Tool error.

* Unreal Header Tool will now report multiple less critical errors in a single compile rather than aborting on the first error.

* Removing PPF_Localized as it's an old UE3-ism that's no longer tested anywhere.

* PR #3226 - Updated some code comments to better describe the usage of the log category definition macros

* PR #3197: Improved log message formatting (Contributed by projectgheist)

* Add AES and RSA encryption keys to the list of config fields that get stripped from ini files when staging When creating a pak file, do a filtered copy of all ini files to a temp directory so that all confidential fields can be stripped. Equivalent behaviour to staging a loose file distribution

* Added C++14 operator delete overloads with size.

* Rewrote ARRAY_COUNT to allow it to work with zero-sized arrays in Clang.

* Made UFunction flags viewable in the debugger.

* Changed .generated.cpp files to .gen.cpp files to give shorter file paths.

* When verbose cluster logging is enabled and new object is added to an already existing cluster, the entire cluster will be dumped to log.

* Include project name in the UBT error message which appears when a plugin is missing

* Added ranged-based for loop support to TChunkedArray, which is more optimal than indexed iteration.

* Add prestream capability to allow us to preload always loaded sublevels. Only turned on for Shootergame.

* Added helper functions to Garbage Collector API to dissolve specific GC clusters

* Fixed Algo::Sort() for C arrays. Deprecated size+count versions of Algo::IsSorted(). Added Algo::IsSortedBy(). Added Algo::FindBy().

* Updated apple platform atomics with a new clang version which is intended to be shared among all clang platforms.

* Simplified and reworked lock free lists and the task graph bringing all platforms under the same scheme.

* Changed UnrealHeaderTool to generate code per-header instead of per-module, in order to better take advantage of IWYU.

* Optimized TBitArray::RemoveAt() in the case when all removed bits are at the end of the array. Optimized TBitArray::RemoveAtSwap(). Added a check for negative counts passed to TBitArray::RemoveAt() and TBitArray::RemoveAtSwap().

* Moved InitPropertiesFromCustomList to UBlueprintGeneratedClass and made it thread safe

* PR #2252: Increase linker reporting for failed imports (Contributed by FineRedMist)

* Added more descriptive error text to DetachLinker error check (Pull Request @3167 by rooneym)

* Removed unused AGRESSIVE_ARRAY_FORCEINLINE macro.

* Removed unused CLASS_PointersDefaultToAutoWeak CLASS_PointersDefaultToWeak class flags.

* Added comments to DestructItem and DestructItems to clarify that they do not perform dynamic dispatch.

* Simple threaded CSV Profiler To capture a CSV: - On the commandline, add -csvCaptureFrames=N to capture N frames from startup - On the console, use csvprofile start, csvprofile stop or csvprofile frames=N to capture a fixed number of frames - Instrument with CSV_SCOPED_STAT(statname), CSV_CUSTOM_STAT(statname,value). CSV capture is enabled in all builds except shipping. This change does not include any instrumentation of code, although basic unit stats are output.

* Implements FDebug::DumpStackTraceToLog() printf debugging utility.

* Iterative cooking (enabled via passing -iterate to cook commandlet or enabling "Iterative cooking for builds launched from the editor") now uses the Asset Registry and should be significantly faster than before. The old timestamp and file hash method have been removed. Expose bIgnoreIniSettingsOutOfDateForIteration and bIgnoreScriptPackagesOutOfDateForIteration in cooker settings, affects rather to listen to ini/script changes when doing iterative cooking

* UnrealHeaderTool: Improved the warning generated when missing Category= on a function or property declared in an engine module, and centralized the logic that determines if the module is engine or game

* Modules - The module manager no longer returns sharedptrs to IModuleInterfaces, this was the source of rare hard to track down crashes due to a shared ptr reference leak when GetModule was called on non-main threads. We now store a TUniquePtr internally, and only lease out raw pointers.

* PR #3622: Log category code cleanup (Contributed by projectgheist)

* Removed AsyncIOBandwidthLimit as it was no longer being used by anything.

* Added controller pairing changed delegate to core delegates

* Added "AddReferencedObjects" to FScriptInterface, much like FSlateBrush has, in order to make it possible to use this type outside of a property (via FGCObject).

* More named events for profiling

    * FAnalyticsEventAttribute now uses Lex::ToString() to convert the key name.

    * Added AppendAnalyticsEventAttributeArray() to efficiently append to an existing array.

    * Implemented Lex::ToSanitizedString for double.

    * Made Lex::ToSanitizedString an overload instead of a specialization.

    * 癤풞dded comments to specify that Lex::ToString just needs to return something implicitly convertible to FString.

    * Added new API FPlatformMisc::GetOSVersion() that returns a string representing the raw OS version info.

    * Added FGenericPlatformHttp::GetDefaultUserAgent() and tweaked all HTTP implementations to use a consistent User-Agent string.

* Added IFileHandle::Flush() support

* UnrealBuildTool: Improved the wording in the error message printed when a file in an include-what-you-use module has the wrong header as the first include

* Core - Adding a frame cached value struct TFrameValue that keeps a value as valid for one GFrameCounter, which is incremented once an engine tick.

* Removed private_subobject macro which was a temporary measure to make all subobjects private without breaking game code.

* Added malloc proxy that allows capture and replay malloc/free callstream with a different malloc for comparison.

* Removed FPackageFileSummary's AdditionalPackagesToCook array as it was not used by anything. This should reduce the package header size considerably for levels with many streaming sublevels.

* Optimized FStatMessagesArray iteration.

    * Added a new sorting algorithm called Algo::IntroSort that performs an introspective sort. It starts with quick sort and switches to heap sort when the iteration depth is too big. It improves the sorting speed in some scenarios where quick sort is in its worst case.

    * Added TReversePredicate to invoke Predicate(B, A) when calling algorithms with a predicate.

* Added support for linking with a module-definition (.def) file in Unreal Build Tool.

* Improved the print-out of FFrame::GetStackTrace() / FFrame::GetScriptCallstack() when there is no script stack (e.g., when FFrame::KismetExecutionMessage is called by native code with no BP above in the call stack)

* Made the max package file header size configurable via ini file ([/Script/Engine.StreamingSettings] s.MaxPackageSummarySize=65536) so that in rare cases (hundreds of streaming sub-levels) the user can easily make their levels load in the editor without crashing

* Fixed debug config problems with new low level windows async IO layer.

* Change pending delete data structure for editor, and more specifically the cooker. Render resources can accumulate for hours in the cooker.

* Fixed: -iterativedeploy option is no longer ignored by UAT

* Fixed ability to specify incompatible properties as the parameter to the OnRep function as long as the base property type was the same (i.e. UObjectProperty, UArrayProperty, etc.) OnRep verification errors are now "warnings" and will all be reported rather than a single one being fatal.OnRep verification warnings now correctly identify the line they occur on.

* Fix issue where SerializingProperty on FArchive was not correctly updated when serializing Arrays and other containers.

* Fix issue where assets loaded by StreamableManager would take 2 full GC cycles to free if there were no longer any references to them, it will now take 1 cycle in most cases

* Fix issue where FStreamableManager would never try to load an asset once it had failed once. This would cause problems with mounting pak files after initial startup

* Fix issues where the cooked AssetRegistry Tag white/blacklist was not working properly with Blueprint classes

* Several fixes to command line processing for the run part of the BuildCookRun UAT script, and -ClientCmdLine can now be used to explicitly set the client command line instead of implying 127.0.0.1 as the URL to launch

* Instanced nested subobjects no longer get reset to default when edited in the components detail panel.

* Made GMalloc creation thread safe (fixes rare crashes on Mac).

* Fixed overlapping ranges being passed to memcpy().

* Fixed a bug where a trailing quote without a newline at the end of a CSV file would be added to the parsed text rather than converted to a terminator

* Make UHT generate WITH_EDITOR guards around UFunctions generated in a WITH_EDITOR C++ block. This prevents these functions from being generated in non-editor builds

* Fixed a crash when using an invalid regex pattern

* Fixed FastXML not loading XML files with attributes delimited by single quote characters

* Fixed FPaths::ChangeExtension and FPaths::SetExtension stomping over the path part of a filename if the name part of the had no extension but the path contained a dot, eg) C:/First.Last/file

* Fixed a crash in UnrealHeaderTool when you have a space between the UCLASS or UINTERFACE macro and the opening parenthesis.

* Fixed some duplicate log categories.

* Make FWindowsPlatformProcess::ApplicationSettingsDir() consistent with other path functions so that it only returns "/" path separators rather than a mix of "/" and "\".

* Fixed linker warning formatting that was throwing warnings when cooking.

* Non-ASCII characters in console command HTML help are no longer converted to "?".

* Added more lock free links to support huge cooks.

* Fixed a recurring stats crash.

* Fixed attempts to load compiled in packages, which produces warnings and is slow.

* Critical fix; stats were non functional.

* Fixed array-based MakeUnique to value-initialize the elements.

* Repaired botched merge of BroadcastSlow_OnlyUseForSpecialPurposes.

* UE4 - Fixed super hazardous bug with FTaskGraphInterface::BroadcastSlow_OnlyUseForSpecialPurposes.

* Fixed PRAGMA_ENABLE_OPTIMIZATION and PRAGMA_DISABLE_OPTIMIZATION on iOS for certain Clang versions.

* Fixed UnrealHeaderTool parsing UObject* const fields as CPF_ConstParm.

* Made TIsTriviallyDestructible<> work with forward-declared enums.

* Fixed bug in the pak precacher that would result in blocks being discarded too soon, which, in turn, resulted in redundant reads.

* Made changes so that servers, programs and non-engine executables do not create background or high priority threads.

* Critical fix: Propoerly disambiguate imports with the same name and the same outer name. This fixes an assert: LocalExportIndex.IsNull.

* Improved the error message when UnrealHeaderTool encounters incompatible functions pulled together by multiple inheritance.

* Fixed UnrealHeaderTool's failure to parse pointer properties marked as const.

* Fixed backwards ifdef for buffered files.

* Replaced LogTemp with the appropriate logging categories in GC debug code.

* When adding objects to clusters after these clusters have been created it's possible to come across objects that are already in the cluster we're adding the object to so instead of crashing, allow it.

* UObject can be added to GC cluster only if all of its Outers can also be added to it. This fixes asserts caused by components that are added to GC clusters even if their owner actors that can't be in GC clusters.

* The editor will now collect garbage after a map is loaded to make sure any stale components or other objects that are no longer needed are destroyed. This is to make sure that these components are not resurrected by other editor operations like duplication.

* Fixed null dereference of LineBatcher when using DrawDebugSphere and DrawDebugAltCone

* Fixed a potential deadlock caused by a race condition when using FMallocVerifyProxy with FMallocBinned

* Fixed parameter parsing so that arguments are not parsed if not preceded by a whitespace (for example "-Log" was parsed in "TM-Log")

* PR #2096: Fix argument parsing in DiffAssets Comandlet (Contributed by cgrebeld)

* PR #2407: Fix LoadLibrary error with Microsoft Group Policy CWDIllegalinDllSearch mode 1 or 2 (Contributed by bozaro)

* Long package names are now corrected to match the case of a file on disk when loading. Fixes deterministic cooking issues where case changes due to load order.

* Async loading code will no longer crash when the requested package could not be created.

* Fixed stale module suffixes which were causing hot reload failures.

* Fixed compile error in TPromise's move assignment operator.

* Fixed bad code generation for TMap and TSet when they're used as BlueprintCallable UFUNCTION parameters.

* Fix streaming visibility logic bug reported on UDN

* Remove non-actionable warnings in ObjectTools.ForceReplaceReferences

* Fixed async loading from pak files < 64k.

* Bug Fix:

    * Fix issue wherein a UPROPERTY that was converted from a hard UObject-based reference to a TAssetSubclassOf would not properly expose its referenced content to be cooked

* Moved parsing of LogCategory verbosity slightly sooner to occur before plugins are loaded - fixes plugins not printing proper log levels if initialized too early

* Fixed out of bounds access to iChild warning in UModel (clang didn't like a union trick)

* Fixed various crashes when using UObject::CallFunctionByNameWithArguments with non-trivial argument types by properly initializing and destructing the allocated parameters

* Fixed FMalloc functions missing from poison proxy.

* Increased the maximum package summary size to handle levels with multiple streaming sublevels.

* Fix for CDO pointer replacement in non-UObject properties during hot reload.

* Fixed TSetElement's generic constructor to prevent it from ever being a copy constructor.

* Fixed TSparseArray::operator= corrupting non-POD elements.

* Changed FRuntimeAssetCacheFilesystemBackend::ClearCache(NAME_None) to not try to clear all cache directories (there is a separate no-args method for that)

* Downgrade various checks() to ensures() in the runtime asset cache functions exposed to Blueprints so they don't take down the editor when given bad parameters

* Fix issue where AssetRegistry GetAncestorClassNames/GetDerivedClassNames were not working properly in cooked builds for classes not in memory

* The recursion guard in async loading code will only be used when the Event Driven Loader is enabled. This fixes some of the startup crashes.

* Converted T(Shared)Future to use default move and copy constructors where applicable

* Fix it so Blueprint subclasses of StaticMeshActor are not added to GC clusters by default as this is unlikely to be safe

* Made sure subobjects recycled in construction code have the pending kill flag cleared so that they don't get garbage collected after creation.

* Fixed crash if the UEnum used by an Enum Property no longer exists

* Fixed issue with Incredibuild failing with Visual Studio 2015 Update 3 when some helpers have non-US character sets

* Fixed crash when using FString::Find end if start position is beyond the end of the string.

* Fixed an issue where the level streamer would not stream in a level until it finished streaming out another one.

* Fixed a crash during tagged serialization if an enum no longer exists.

### Editor and Tools

* Added new Blueprint-exposed functions for procedurally editing Materials, MaterialFunctions and MaterialInstanceConstants in the editor.

* Material baking improvements

* Added the ability for any component (not only camera components) to have a preview viewport in the editor.

* Disallow map building while in PIE, or PIE while buildling lighting to avoid a conflict on accessing BuildData.

* Polish the speed tree import dialog

* Highest LOD is now forced highres screenshots

* PR #3565: add -quality option to buildlighing commandlet (Contributed by kayama-shift)

* PR #3556: Git Plugin: fix new option "init Git LFS" that make assets read-only (master/UE4.17) (Contributed by SRombauts)

* Color asset editor tabs according to asset type (Contributed by projectgheist). The highlight color is around the icon and matches the content browser color and style.

* Exposed EditorLevelUtils to editor scripts. This allows creation of streaming levels, setting the current level and moving actors between levels

* Expose editor visibility methods on Actor to Blueprint/script (editor only)

* Added a file helpers API to script.

* Deprecated actor grouping methods on UUnrealEdEngine and moved their functionality into their own class( UActorGroupingUtils). There is a new editor config setting to set which grouping utils class is used and defaults to the base class. The new utility methods are exposed to script.

* Exposed source control helpers methods to script

* AssetTools has been converted to a UObject interface and its methods have been exposed to to script.

* Added a world accessor to blutilties so they can operate on the editor world (spawn,destroy actors etc)

* Fixed plugin browser auto-resizing when scrolling.

* Added a way to enable or disable the component transform units display in the editor preferences. Units display is now disabled by default.

    * Improved the import speed for morph targets by only recomputing the affected vertices.

    * Fixed an issue when importing morph targets where some import settings where ignored and could result in incorrect deltas.

* UGS: You can now configure UnrealGameSync to filter out arbitrary changelists based on their description. The default filters (see Engine/Programs/UnrealGameSync/UnrealGameSync.ini) exclude changelists which modify collections.

* UGS: Now only polls for updated versions every 5 minutes, and newly submitted changes every 60 seconds, to reduce the load on the Perforce server.

* UnrealGameSync: Added support for notifying users if CIS steps fail for content changes. Badges which test content should be listed in the [Notifications] section of the project-specific INI file, as +ContentBadges=BadgeName.

* Exposed new methods of adding a struct to a details panel and have it work properly with customizations.

* Property Editor: Added objects to FPropertyAndParent.

* MemoryProfiler2 - Add mprof filename into title bar after opening

* Added basic material hookup to USD. Similar to FBX it will find materials based on rules specified by the user in the import settings

* PR #2341: Optional Middle Mouse Button panning in Graph Editor (Contributed by flipswitchingmonkey)

* Improved layout of Mesh Paint panel to fit better within default layout, and changed styling of action buttons

* Make curve tables create temporary CSV files to use during diffs. This matches the current behaviour of data tables.

* Changed FEnvDirection Text to display "From: {LineFrom} To: {LineTo}" instead of "{LineFrom} - {LineTo}", because the latter was confusing since a direction is normally defined (in vector math) as To - From.

* Click a Hyperlinked Asset in a log window will now attempt to open the editor for it.

* UnrealGameSync: Changes related to managing collections are now filtered out by default.

* Add "Reset Material Slot" fbx option when doing a re-import with the import dialog option. There is now an editor preference option to show the fbx import dialog when doing a re-import to allow the user to use the new "Reset Material Slot" option.

* Moved editor performance settings out of per-project settings so they can be shared across projects

* Exposed the asset registry to Blueprints and script. Works in editor scripts and runtime scripts

* UnrealGameSync: Added support for multiple tabs. Each tab can monitor changes in a separate workspace, and scheduled syncs will run for all open tabs.

* Rewrote SlateFileDlgWindow's file filtering to allow for extensionless file selection and to remove the O(n^2) file filtering

* Fixed incorrect filtering of abstract/deprecated UDeveloperSettings and UContentBrowserFrontEndFilterExtension classes caused by a typo (HasAnyCastFlags versus HasAnyClassFlags)

* Fixed a bug where duplicating an actor in the level could produce the wrong object, if there's another asset with the same name.

* Fbx scene importer: Do not remove existing attribute reference from the Blueprint if the reimport of the associate mesh attribute is not tick.

* fbx scene importer: Make sure we set INVALID_UNIQUE_ID to node that has no attribute.

* PR #3595: Fixed wrong colour for level status (Contributed by ronve)

* PR #3558: UE-44862: Always update SColorPicker color on OK button (Contributed by projectgheist)

* Improve asset import data display in static and skeletal meshes

* PR #3463: Get bounds for all triangles, not just the first one. WedgeIndex was . (Contributed by DaveC79)

* Fix degenerated bounds calculation for skeletal mesh when the skeleton is remove from a re-import

* Meshes editors materials and sections panel are now supporting undo and redo.

* Fix crash when GC happens while the vr editor radial menu is open.

* Make sure re-import skeletal mesh follow the "import morph targets" option

* PR #3553: Crashfix for static array properties (Contributed by Pierdek)

* Fix lighting becoming unbuilt when mesh painting

* Fix a bug when importing USD files that caused internal references to other USD files not being found by relative path

* Fix an editor crash when repeatedly spamming ctrl+s and ctrl+shift+s to save.

* Slate: Fixed enter edit mode and return handled if not read only.

* Fix a crash when importing an animation with a skeleton that do not match the skeleton contain in the fbx file.

* Slate - Changing the order that the tabs draw in so that the draw front to back, instead of back to front.

* Fixed stats not being possible to enable when in simulate

* Mesh painting no longer paints on invisible components. Toggling visibility refreshes the selected set.

* Collection Parameters no longer rename their parameters when duplicated.

* PR #3453: UE-43004: YesNo MessageDialog instead of YesNoCancel (Contributed by projectgheist)

* Stop unrealpak from crashing if generating a patch with more pak files then the original game.

* UGS: Fixed editor receipts being deleted when running a custom tool without compiling first.

* Fixed ensure when deleting a map that contains build data which also happens to be the currently loaded map.

* PR #3607: Improved InputKeySelector functionality (Contributed by projectgheist)

* PR #3615: More detailed log messages for debugging warnings/errors (Contributed by projectgheist)

* Fix transactions getting stuck in the color grading controls.

* Fix issue where StreamableManager and other utility objects were not ticking in the editor if viewports were not set to real time

* More accurate messaging for unresponsive target manager interface.

* Fixed issue where HLOD cluster preview wireframe would not be removed when the cluster is deleted

* Unified the way vertex colors are shown while in Mesh Paint mode, only selected Static/Skeletal-meshes now display their vertex colors

* Fixed issue where per-instance shadow and or collision flags were lost when using the Merge Actor functionality

* PR #2844: UE-36936: Don't stretch container for Plugin Image (Contributed by projectgheist)

* Fixed cheat search in command console

* Fix typo in KismetDebugUtilities that was showing up in log output.

* Fixed Environment Query System Test details to correctly hide all filter/score properties when scoring/filtering only (respectively).

* EQSNormalizationType tooltips will now show up correctly based on which type is chosen in a drop-down. (Previously the tooltip for "Absolute" was erroneosly showing up for "RelativeToScores", while a general description was showing up for "Absolute".)

* Object and Struct properties marked as AssetRegistrySearchable will no longer be visible in the Content Browser

* Fixing morph target smooth group support. This also has improve the morph target import time.

* Fix crash Crash when Selecting Actor in the World Outliner That is Using ColorGradingMode

* Editor crash when opening a project that includes a plugin with more than two custom volume classes.

* PR #3656: Make References/Referencers List copyable (Contributed by user37337)

* Fixed an issue where physics geometry of Spline Meshes was not correctly used by the Merge Actor functionality

* Fixed issue where physics geometry was not correctly scaled when using the Merge Actor functionality

* Fixed issue where using Per Property Manually Overridden Texture Sizes when merging materials did not work

* Fixed an issue where the resulting Static Mesh from using the Merge Actor tool would be culled by a Distance Culling volume

* Fixed a USD import crash when importing a mesh with no material

* Prevent a crash in UEditorTutorial::OpenAsset when passed a nullptr Asset

* Prevented a crash in UMaterialEditingLibrary::RecompileMaterial when passed a nullptr material

* Fixed: Player can't move through level by holding one grip button in Editor VR Mode (partially broken in 4.16).

* Fixed a crash when the tutorial browser is open during a garbage collect

* FSplineComponentVisualizer::CanResetToDefault now returns false rather than crashing if SplineComp is not found

* Fixed a crash when reloading a curve asset that was open in an embedded curve editor

* Fixed crash when removing the first element from a TMap or TSet property in the editor when it's not the final element

* Fix crash when a re-import of a static mesh has failed.

* Fixed an editor crash when loading a map with actors named "none". Naming an actor none is no longer allowed

* Fix crash in the Editor when multiple instances of the same Blueprint are selected in the level and the Reset to Default button next to a component of the Blueprint is clicked in the Details panel

* Improved the leading underscore name sanitization to only prevent names that resolve to 'None'

* Asset reloading now defers re-opening asset editors until post-GC phase

* Fix crash when modifying array elements in a Blueprint if an instance of that object exists in the level which has modified the array on the instance.

* Fix crash changing the from columns view while the view options menu is open in the editor.

* Fixed incorrect UVs being used when generating HLOD meshes with multiple actors that contain differing LODs

* Fixed crash when doing editor 'Force Delete' on a static mesh whose distance field is still being built.

* Fixed typo that forced merged meshes with no backing raw mesh to incorrectly generate non-square merged atlases

#### Content Browser

* Implemented support for hiding empty folders in the Content Browser

    * "Empty" in this case is defined as folders that recursively don't contain assets or classes. Folders that were created or have contained content at any point during the current editing session are always shown.

    * This also fixes some places where the content filters would miss certain folders, and allows asset and path views to be synced to folder selections (as well as asset selections), which improves the experience when renaming folders, and navigating the Content Browser history.

* Re-organized some of the "View Options" settings into better groups, and fixed some places where items would still be shown in the asset view when some certain content filter options were disabled.

* Improved the display of asset tags in the Content Browser

    * Numeric tags are now displayed pretty printed.

    * Numeric tags can now be displayed as a memory value (the numeric value should be in bytes).

    * Dimensional tags are now split and each part pretty printed.

    * Date/Time tags are now stored as a timestamp (which has the side effect of sorting correctly) and displayed as a localized date/time.

    * The column view now shows the same display values as the tooltips do.

    * The tooltip now uses the tag meta-data display name (if set).

    * The tag meta-data display name can now be used as an alias in the Content Browser search.

* Assets and folders can now be drag-dropped at the same time in the Content Browser.

* Content Browser search now takes the display names of properties into account

* Fixed a crash that could occur due to bad data in the asset registry

* Creating a folder in the Content Browser now creates the folder on disk, and cancelling a folder naming now removes the temporary folder

* Fixed some cases where folders wouldn't be removed from the Content Browser when deleting them

* Fixed moving a folder containing a level not moving the level

* Fixed thumbnails getting much darker with forward shading enabled

* Fix engine hang when editing an instanced property that may reference BP classes.

#### Cooker

* Cooker output lines containing the strings "Error:" or "Warning:" are now highlighted as red and yellow in the output log.

* ResavePackages commandlet can now buildtexturestreaming while rebuildlightmaps

#### Foliage

* The instance buffer is now updating partially instead of being recreate every time there was a change, this was done to improve performance with a lot of painted foliage instances.

* Fixed: Avoid creating unnecessary FUniqueObjectGuid in foliage (prevents package dirty on actor deletion)

* When selecting a foliage actor and moving it to another level, all instances will be moved properly

* Prevent foliage from marking actors dirty as HigherarchicalInstancedStaticMesh components are added and removed from the scene.

* Fix automatically dirtying levels just by copying actors if the level contains a foliage actor.

* Fixed: Issues with foliage occlusion culling after world origin was rebased

* Occlusion result is now kept per view, so a multi local player game will now work properly.

* Fixed possible crash when performing drag &drop operation of Target Layers

#### Landscape

* When updating Phyx region take into account simple collision mip.

* Landscape info map transactional state is based on its world's transactional state

* Fixed a lighting crash when working with non square landscape

#### Material Editor

* Reset arrows now only display for non-default values in the Material Instance editor. Reset to default arrows now are placed in the correct location for SObjectPropertyEntryBox and SPropertyEditorAsset.

* Material parameter group dropdown now sorts alphabetically.

* You can now set sort priorities to Material Parameters and Parameter Groups. If sort priorities are equal, it falls back to alphabetical sort. Default sort priority is 0, and other priorities can be set on the parameter in the base material. Parameters are still sorted within groups.Group sort priority is set on the main material preferences.

* Fixed a pivot painter 2 NAN error.

* Adding "texcoord" keyword to UMaterialExpressionTextureCoordinate so you can search for the name that is displayed on the node in the graph.

* Fixed an issue where the material editor stats and error animations would stop updating.

#### Sequencer

* Sequencer: Show sequencer spawnables in the world outliner and add the icon overlay for spawnables.

* Sequencer: Auto key refactor. Auto key now creates a key only when the property changes and there's an existing track with at least one keyframe.

* Sequencer: Added outliner column to show the level sequences that an actor is bound to.

* It is now possible to blend between values for numeric types (int, float, transform etc), and add entry/exit easing to sections

    * New Absolute/Relative/Additive section types allow specific control of object values (such as relative actor transforms, or blending between relative and absolute space)

    * This has particular application for UMG widgets, or blending in and out of cutscenes.

* Sequencer: Added hotkeys (shift , and shift .) to step to next/previous shot.

* Fixed deterministic cooking issues with movie scene data

* Sequencer: Set movie scene capture frames only when not using custom frames. This allows the user entered frame numbers to persist in config, rather than overwriting them when doing a "Render Shot".

* Sequencer: Added setting to activate realtime viewports when in sequencer.

* Sequencer: Added setting for limit scrubbing to playback range.

* Sequencer: Added OnCameraCut() event that fires when there is a camera cut.

* Sequencer: Added time to transform, color and vector key structs so that key times are editable from the key editors.

* Sequencer: Added OnFinished() event when a level sequence completes playback.

* Sequencer: Show camera shake/anim track menus even if there aren't any assets.

* Sequencer: Added JumpToPosition() function which updates to a position in a scrubbing state.

* Changed level sequence object references to always use a package and object path based lookup

    * Newly created binding references now consist of a package name and an inner object path for actors, and just an inner object path for components. The package name is fixed up dynamically for PIE, which means it can work correctly for multiplayer PIE, and when levels are streamed in during PIE (functionality previously unavailable to lazy object ptrs)

    * Added a way of rebinding all possessable objects in the current sequence (Rebind Possessable References)

    * Multiple bindings are now supported in the API layer of level sequence references, although this is not yet exposed to the sequencer UI.

* Sequencer: Added Scrub() function to movie scene player.

* Sequencer: Load level sequence asynchronously.

* Sequencer: Added cinematic options to level sequence player.

* Sequencer: Added GoToEndAndStop() function to the movie scene player.

* Sequencer: Added attach/detach rules for attach section.

* Sequencer: Added attenuation settings for attached audio components.

* Sequencer: Added OnMovieSceneBindingsChanged() delegate.

* Sequencer: Fixed spawnables not getting removed when deleting a shot or subscene.

* Sequencer: Added OnBeginScrubbing() and OnEndScrubbing() event delegates.

* Sequencer: Added Level Sequence Actor as an output for CreateLevelSequencePlayer().

* Added new experimental plugin that provides a camera aligned image plate, and associated sequencer track

    * This plugin is a stop-gap solution until fully fledged support is introduced with 'Media Framework 3.0'

    * Sequencer track can stream image sequences from disk onto UTexture properties that are exposed to cinematics

* Sequencer: Fixed crash on export if there's no shot data.

* Sequencer: Fixed bindings not immediately displaying as unbound.

* Sequencer: Fixed sequencer spawnables not always appearing by spawning them consistently in the persistent level.

* Sequencer: Fixed offsets when moving multiple sections.

* Sequencer: Fixed components not getting reassigned to the new actor when assigning a bound actor.

* Sequencer: Fixed fov not getting reset when done playing.

* Sequencer: Fixed components not getting deselected from the sequencer tree view when they get deselected in the viewport/outliner.

* Sequencer: Fixed filtering in the sequencer tree so that it includes parent nodes only and doesn't recurse through to add their children.

* Sequencer: Fixed transport controls not appearing in newly created viewports.

* Sequencer: Fixed spawnables marking the level as dirtied.

* Sequencer: Fixed sequences not evaluating to the end when setting the playback position to the end of a sequence while playing.

* Sequencer: Set component velocity for attached objects.

* Sequencer: Fixed crash on selecting keyframes in the viewport.

* Sequencer: Fixed a bug where the default state of a spawnable doesn't get saved after editing.

* Sequencer: Changed OnEditStructChildContentsChanged to use FObjectWriter instead of FMemoryWriter which supports serializing UObjects. This fixes a crash when adding actor array elements to a user defined event struct.

* Sequencer: Snap play time to keys now allows scrubbing between keys and snaps to key times within a certain screenspace tolerance.

* Sequencer: Fixed audio not stopping and restarting when playback is looped.

* Sequencer: Fixed scene component visibility so that it operates with the visibility track for actors.

* Sequencer: Fixed crash when deactivating a section in sequencer.

* Changed evaluation groups to always flush implicitly

    * This fixes an issue where events set in the PostEvaluation stage were executed before blended token actuation

* Sequencer: Fixed max tick rate not getting reset when finished playing.

* UMG: Fixed a crash when calling stop during evaluation by delaying stop and pause actions.

* Sequence Recorder: Fixed recording component visibility to use the same visibility tracks for actors.

#### Source Control

* Git Plugin: disable "Keep Files Checked Out" checkbox on Submit to Source Control Window

* PR #2457: Add .gitdeps.xml-files for plugins support (Contributed by bozaro)

* Fixed an ensure firing when checking in via SVN

#### Static Mesh Editor

* Better highlighting of selected UV edges in the static mesh editor

#### VR Editor

* Selecting a camera or other preview actor in VR Mode now creates a floating in-world viewport that enables you to see the camera's perspective. You can pin this just like the preview in the desktop mode viewport.

* Add generic VR Mode debug command "VREd.ToggleDebugMode"

* Keyboard shortcut for entering/leaving VR Mode is now Alt+V

* creating a plugin in a C++ project does not open a second instance of Visual Studio.

* Use correct assets for end and begin of motion controller spline meshes.

* Entering and exiting VR Mode disables gizmo in desktop editor viewport.

* Scale and rotation snap while dragging with two motion controllers.

* Crash when adding a camera to the world in VR Mode the second time.

* Crash when quitting the editor with VR Mode enabled.

* Log spam when adding a CineCameraActor to the world.

#### World Outliner

* Scene Outliner: Added the ability to set default columns in a scene outliner.

### Gameplay Framework

* The Asset Management Framework introduced in 4.16 is now ready for production use. Many bugs were fixed and features were added, and there is a suite of Blueprint functions available in the Asset Manager category.

* Added the ability for components to be hidden from specific players through their PlayerController.

* Optimized CharacterMovementComponent::GetPredictionData_Client_Character() and GetPredictionData_Server_Character() to remove virtual calls.

* Exposed Distributions to Game Projects and Plugins

* Prevent SetupAttachmenet from setting up a situation where the component will attempt to attach to itself or in a cyclic fashion.

* Added MinAnalogWalkSpeed to CharacterMovementComponent, which specifies the speed that the character will accelerate up to when a gamepad analog stick is tilted just past its inner deadzone

* Added ForceFeedbackScale config var to PlayerController, to allow for per-platform scaling of force feedback curves

* Added UWorld::GetGameInstance<T> and UWorld::GetGameInstanceChecked<T> wrappers to get a typed subclass of UGameInstance

* Engine - Adding an OnStart to UGameInstance that is called for both StartPIEGameInstance and StartGameInstance.

* Added the ability to suppress warnings when using on-screen log warning/error display (DurationOfErrorsAndWarningsOnHUD > 0) by setting Engine.SupressWarningsInOnScreenDisplay to 1

* Added GAMEPLAYABILITIES_API to all Ability Tasks

* Add DLL export to ALevelStreamingVolume methods

* Marked ULevelStreaming::GetWorldAssetPackageFName as BlueprintCallable so instanced levels can be unloaded

* Paper2D: Allowed specifying additional textures on tile sets that can be used by materials in the same way as regular Paper2D sprites

* Introduced a new version of UEngine::GetWorldFromContextObject which takes an enum specifying the behavior on failures and updated all existing uses. The new version intentionally does not have a default value for ErrorMode, callers need to think about which variant of behavior they want:

    * ReturnNull: Silently returns nullptr, the calling code is expected to handle this gracefully

    * LogAndReturnNull: Raises a runtime error but still returns nullptr, the calling code is expected to handle this gracefully

    * Assert: Asserts, the calling code is not expecting to handle a failure gracefully

    * Deprecated UEngine::GetWorldFromContextObject(object, boolean) and changed the default behavior for the deprecated instances to do LogAndReturnNull rather than Assert, based on the real-world call patterns

    * Introduced GetWorldFromContextObjectChecked(object) as a shorthand for passing in EGetWorldErrorMode::Assert

    * Made UObject::GetWorldChecked() actually assert if it would return nullptr (under some cases the old function could silently return nullptr while reporting bSupported = true, so it neither ensured nor checked)

    * Fixed a race condition in the 'is implemented' bookkeeping logic in GetWorld()/GetWorldChecked() by confining it to the game thread and added a check() to ImplementsGetWorld() to make it clear that it only works on the game thread

    * The typical recommended call pattern is to use something like the following, which will gracefully handle the failure case but requests a log message (with BP call stack printed out) if it failed:

        * if (UWorld* World = GEngine->GetWorldFromContextObject(WorldContextObject, EGetWorldErrorMode::LogAndReturnNull)) { ... Do something with World }

* Removed the requirement for a local player in UCheatManager::CheatScript, so it can be be started from the server side (doesn't change the availability of the cheat manager, just allows things like the redundant "cheat cheatscript scriptname" to work)

* Optimized Physics PreFilter to avoid call to virtual getSimulationFilterData() to only use it when needed if we actually have items in the IgnoreComponents list (which is rare).

* After copying and pasting a child actor component the child actor template is no longer uneditable.

* USceneComponent ComponentToWorld has been fully encapsulated to ensure access of the transform does not occur prior to the population of the world transform from the relative transforms and parent transforms.

* Calling SetClass on a ChildActorComponent at runtime no longer fails and results in no child actor.

* TickableGameObjects that return IsTickableInEditor false no longer in editor worlds.

* Actors that were initialized and then removed by hiding a streaming level before the world has begun play, now correctly get uninitialized.

* Fixed SpringArmComponent not restoring relative transform when bUsePawnControlRotation is turned off.

    * Fixes the editor interaction ignoring transform of the component in the viewport after bUsePawnControlRotation is toggled on then off, since by then the world transform had been overwritten (from tick in editor) and nothing would drive transform changes from the editable value.

    * Toggling bUsePawnControlRotation off at runtime now restores the rotation to the initial relative rotation, not stomping it with the current pawn rotation, allowing toggling between the editable/desired base rotation and the control rotation.

* Fixed code to detect cycles in parallel tick sorting.

* Fix InterpToMovementComponent not setting velocity on the object it moves. Fix movement rate when substepping enabled.

* Changed AActor::FindComponentByClass (and AActor::GetComponentByClass by extension) to return nullptr when passed a nullptr class, rather than crashing

* DeltaTime for a tick function with a tick interval is now correct after disabling and then reenabling the tick function.

* FLocalPlayerContext::IsValid now also checks that the player controller has a player set.

* Added virtual OnClientCorrectionReceived() to CharacterMovement. Base implementation contains previous debug visualization and logging code that was contained in the client function.

* Removed unused function FPhysicsFilterBuilder::SetExtraFiltering(). It was also incorrect.

* Cleaned up collision FMaskFilter usage to be able to cleanly change the number of bits it uses.

* Prevent fighting between GEngine->SetMaxFPS and UGameUserSettings::SetFrameRateLimitCVar that caused log spam by preserving the 'last set' reason when changing the value

* InterpToMovementComponent improvements:

    * Fix velocity not zeroed when interpolation stops.

    * Various fixes when calculating velocity and time when sub-stepping is enabled.

    * Improve accuracy of interpolation when looping and there is time remaining after the loop event is hit. Consume the remainder of the time after the event back in the loop (similar to handling a blocking impact).

* Made UPrimitiveComponent::GetCenterOfMass and UPrimitiveComponent::GetCollisionProfileName pure.

* Always reset the input array in AActor::GetComponents(), but do so without affecting allocated size. Fixes possible regression from CL 3359561 that removed the Reset(...) entirely for performance reasons.

* Fixed a crash when loading a Blueprint with a parent class of ALevelBounds caused by trying to register the class default object with a non-existent level

* Fixed a bug in FStreamLevelAction::MakeSafeLevelName to avoid appending the PIE prefix multiple times (allows functions like Unload Streaming Level to work correctly when passed a full package name from an instanced streaming level)

* Fixed the USpringArmComponent location lagging behind after a world origin shift when using interpolation

* Fixed crashes caused by undo/redo of user defined struct changes

* UGameEngine now performs its shutdown before shutting down UEngine

* Prevent various asserts when USplineComponent methods are called on a spline with no points

* Fix memory corruption when player controllers were disconnected from pawns in certain networked situations

### Localization

* The culture/language/locale console commands are now available in all build configs

* Updated localized asset group caching so that it works in non-cooked builds

* Exposed some missing Internationalization functions to Blueprints.

    * You can now get and set the current language/locale/culture for your game (including saving the setting to the users config file) via Blueprints.

* The package localization ID is no longer used at all at runtime, and is now truly editor-only

* Added code to sanitize some known strings before passing them to ICU

* No longer attempt to use the game culture override in the editor

* Fixed potential underflow when using negative digit ranges with FastDecimalFormat

* Fixed not being able to set pure whitespace values on FText properties

* Fixed FNumberFormattingOptions::MaximumIntegralDigits incorrectly including group separators in its count

* Some improvements to avoid loading the native .locres files twice when we don't need to

* Data-only Blueprints containing inherited text properties now gather their values correctly

* The CamelCase break iterator now treats digits around character tokens as part of the identifier

* Fixed a regression where we would incorrectly gather text from nested UMG widgets

* Building lighting no longer causes a world to lose its package localization ID

### Networking

* Perf counter module gets more logging to improve error reporting

* Fixed a memory leak in the network driver.

* Fixed an issue that could cause rendering artifacts while viewing a paused network replay.

* Removed some log spam that could occur if voice chat is enabled but it takes a while for the voice handshake to complete.

* Fixed hardcoded controller id in RejoinCheck

* ClientTravelToSession controller index was passed into wrong function for retrieving a player controller, making it possible to fail to travel on consoles when controller indices were greater than zero.

* Fixed a crash that would occur if the "netprofile" command is executed while the Steam Online Subsystem (OSS) is active.

### Online

* OnlineSubsystemGoogle for Windows. Basic implementation of Google Sign-In for user authentication. Separate from GooglePlay in that it is cross platform and doesn't include any of the Google Game Services.

* OnlineSubsystemFacebook for PC - login flow implemented using web based LoginFlow module - implemented ShowLoginUI for external UI interface - added Login function with existing access token - fixed GetAuthType function - added reference to main online subsystem to Friend/Identity interfaces

* Move libwebsockets servicing to its own thread. Fixes hitches in getaddrinfo like functions from impacting the game thread.

* Add Twitch Online Subsystem. Allows requesting the user to log in to Twitch and obtain an auth token to use in Twitch API calls.

* XMPP module's libstrophe backend now supports responding to XMPP Pings.

* Enable additional logging in libwebsockets

* OnlineSubsystemFacebook changes to get Windows/iOS platforms up to date - Facebook user data structure gets information from proper URL request with valid public fields, stores consistently on both platforms -- store values in generic key value pairs - RequestElevatedPermissions feature that goes through external ui to grant more permissions (Windows)

* Upgraded Facebook iOS to SDK v4.18

* XMPP now supports a platform user id in the resource - added ParseMucResource to split the data into <nickname:user> and <vN:rest of resource> - Resources that tried to parse into ParseResource were failing if passed from MUC, making appid,platform,etc blank

* Fix XMPP module's libstrophe backend not calling our logout delegates in some cases

* Fixed XMPP module's libstrophe backend incorrectly handling XMPP ping messages

* Fix crash in libwebsockets

* Online Subsystem (OSS) consistency cleanup - all OSS classes use the instance name passed into the CreateFactory function - nothing uses the default constructor - OnlineSubsystemImpl requires two params now (OSS name, Instance name) - added GetSubsystemName to return OSS name from OnlineSubsystemNames.h

### Paper2D

* Prevented a crash when calling UPaperTileMapComponent::GetLayerColor with no TileMap asset set

* Fix crash when clicking Edit Map if there is no tile map specified.

### Physics

* Enabled physx GPU hooks in PhysX libs

* Fixed physx memory leak when a commandlet loads many assets without ticking the scene

* Improved the cost of UpdateKinematicBodies - added the ability to defer non simulating bodies.

* Added public getter for constraints broken status

* Added functions for setting physics constraints breakable properties

* Added the ability to set enhanced physx determinism directly in the editor

* Remove the need for calling constructors for physx PxRaycastHit in the dynamic hit result buffer. Saves 30% of the cost of doing small raycasts that only hit a few objects

* Added icon for Collision Analyzer menu option in editor.

* Added the ability to sweep vehicle wheels against simple or complex or both.

* Changed clothing simulation context to use actor rather than world delta time to take custom time dilation into account.

* Exposed the physx tree rebuild rate as a project setting. See PhysX docs for more info

* Added the ability to pass stats into scene queries. Use stat collisiontags to see them.

* Added a total scene query stat and the ability to trace all scene queries

* Added 'ShouldRemainVertical' to encapsulate when DesiredRotation should be restricted to Yaw only in PhysicsRotation.

* Updated contact offset tuning to give better stability. This will affect existing simulated physics content and is potentially more expensive. However, it greatly improves jitter and stacking. Feel free to change the contact offset values back to the previous defaults (multiplier = 0.01, min = 0.0001, max = 1)

* Added 'section index' output to GetMaterialFromCollisionFaceIndex function, in addition to material reference.

* Changed it so that soft constraints with both stiffness and damping set to 0 are considered free.Fixed tuning for linear soft constraints to use more reasonable numbers.

* Support merging ShapeComponent in addition to StaticMeshComponents

* Fix double-declared physx cooking stat

* Fix memory leak in UDestructibleComponent::SetSkeletalMesh

* Fix welded shapes with different Complexity from its parent not being respected.

* Fixed a case where bodies that are welded to an already simulated body do not unweld when their simulation is turned on.

* Fix typo in FPhysScene::EndFrame

* Fix Replicated physics state not synchronized for sleeping bodies (contributed by lightspeedlucas).

* Fixed SkeletalMeshComponent's TeleportDistanceThreshold and TeleportRotationThreshold UProperties not properly updating at runtime.

* Fixed FPhysXVehicleManager.h not being in Public folder and exported.

* Fixed warning from Constraint Component when no bodies are specified.

* Made clothing simulation suspension unsafe in construction script (there's no simulation to suspend in editor)

* Fixed incorrect delta time for fixed framerate when the target framerate is slower than the real framerate

* Fixed clothing LODs seeming to get a large amount of energy on transitions.

* Fixed crash calling SetSkeletalMesh when switching to a mesh with more clothing elements.

* Fixed a crash that could occur when reading or writing collision analyzer recordings.

* Fix for duplicated sections on export when clothing is applied to the mesh being exported

* Fixed clothing bounds miscalculation when an animation is playing with suspended clothing simulations.

* Fixed issue where non-uniform scaled Sphyl physics geometry was inconsistent with the PhysX representation

* Increase search radius for MostOpposingNormal. Fixes case where character movement cannot walk up steps of certain ramps.

* Added scene query, contacts, and constraints to PVD information.

* Fixed PhAT to properly remove scale when creating constraints, should fix Skeletal Meshes with scales when simulating physics.

* Fixed a crash when UInstancedStaticMeshComponent::GetInstancesOverlappingSphere or UInstancedStaticMeshComponent::GetInstancesOverlappingBox is called on a component with no static mesh set

* Fixed a crash in USkeletalMeshComponent::SnapshotPose when called on a component with no skeletal mesh set

* Fixed a crash when setting the clothing simulation factory in a skeletal mesh component to an abstract factory class

* Fixed overlap test incorrectly returning early when multiple shapes are used and no MTD is requested.

* Fixed constraints & bodies not rendering correctly in PhAT with seperate translucency disabled

* Include contact offset calcs for destructible chunks, preventing jitter at lower framerates

* Fixed bounds calculation crash when a skeletal mesh component with clothing is bound to a master pose component with no skeletal mesh set.

### Platforms

* Removed Twitch broadcasting support and Game Live Streaming API

* The editor now has a one-click option for including Windows prerequisites without using an installer in packaged games.

* Upgraded java toolchain changes for OnlineSubsystemGoogle - update google auth to 9.8.0 - update required sdk to 25

* Fix bug introduced in 4.16 where assigning assets to multiple chunks at once did not work properly

* Improved the warning message slightly when there is no local notification service

* Fix for slate postprocess resource transition bug.

#### All Mobile

* Fixed: Crash in MobilePatchingLibrary OnInstallComplete when installation fails

#### Android

* Added experimental support for Gradle build system

* Updated Clang version checks and handle Clang 3.9 (NDK14b support)

* Update handling of device and advertiser IDs for Android - remove GetUniqueDeviceId() - deprecated - add GetLoginId() - uses GUID approach - remove fallback from GetUnqiueAdvertisingId()

* Added support for changing of the Android game thread and render thread CPU affinity masks from the console at runtime.

    * eg "android.DefaultThreadAffinity GT 0x1 RT 0x2" will set the game thread to use only CPU core 0 and the render thread to use only core 1.

    * The values should bitmasks in hex, to specify which core(s) run on. 0 implies all cores.

    * Which core indices correspond to "big" or "little" depends on the device.

* Added ue4.displaymetrics.dpi metadata to query device DPI for Android

* Added detection of Houdini (running on Intel Android CPU emulating ARM)

    * use the new UsingHoudini source type in device profile (compare to "true" or "false")

* Support for NDK14b and start of NDK15 support (Clang 5.0)

* Removed the Android_All cook flavor as it's deprecated in favor of Android_Multi

* Updated to Google Play Services 9.8.0

* Changed FGenericPlatformMemoryConstants and FGenericPlatformMemoryStats to use uint64 instead of SIZE_T to handle >4GB Android devices running 32-bit code

* Fixed: LaunchOn from Editor on Android device should not re-build APK if only content is changed.

* Allow mediaplayer audio to be disable on Android by setting audio track to INDEX_NONE (-1)

* Better Android web browser closing

* Better behavior for Android LaunchURL

* Platform - Adding the degree symbol to the log statement for android's temperature update, and noting that it's celsius.

* Fixed permissions on gradlew on Mac and Linux

* Removed unneeded > in AndroidManifest.xml #ue4 #android

* Fixed a crash in UAndroidPermissionFunctionLibrary::AcquirePermissions when called with an empty array on non-Android platforms

* Use FMath::log2 instead of log2 to fix Android linking issue

* Fixed AAR version checks (wasn't handling zeros properly)

* Fixed Android builds always recompiling android_native_app_glue.c and UELinkerfixups even when no other source had changed

* Removed "android list targets" dependency

* Protected against null window during shutdown

* Fixed: Android crash on app launch if AdditionalPluginDirectories contains wildcards in path

* Create rungradle.bat with subst for long paths on Windows

* Fixed a rare crash when shutting down the editor after launching on an Android device

* Show Android SDK license agreement when Gradle enabled if license not accepted earlier

* Use optimal sample rate and buffer size for Android mixer

* The Media Player and startup movies now function correctly on when running in Vulkan mode on an Android device

#### HTML 5

* HTML5 : re-enable IndexedDB storage usage patches from jukka to properly handle error conditions with IndexedDB

* HTML5 - disable using IndexedDB (until browsers allows storage to DB with large data sizes)

* HTML5 - stub back in deprecated audio Doppler functions until they are removed from ActiveSound.cpp

* HTML5 - fix viewport after returning from fullscreen PR: https://github.com/Mozilla-Games/UnrealEngine/commit/113b9ea1045270a688405dc2d630059f56170f5b

* HTML5 memory/executable size pass these fixes contains: + build shipping asmjs compressed files + phsyx updated emscripten toolchain cmake config override (i.e. removed EPIC_BUILD_FLAGS match) + retired "/Script/BuildSettings.BuildSettings" config code + added better verbose feedback to print optimization levels during packaging

* HTML5 - refraction shader note: this CL also contains fixes to webgl2 [float4 vs half2] and a [% vs Mod()] material custom function changes to some TM-ShaderModels shaders specifically: fixes to and similar with: DitherTemporalAA

* WebSocketNetDriver - add missing "initial packet sequence" data

    * tested with Win64 client and server (as well as HTML5 browsers)

#### iOS

* Fixed an issue where you could not install an iOS certificate via the editor or iPhonePackager tool if the certificate required a password

* Added support for local notifications which do not provide an alert, but still add a badge to the application icon.

* Added a setting to enable o disable the IOS integrated keyboard.

* The MetalMRT setting has been removed temporarily as the MRT support on Metal is being reworked.

* In preparation for officially dropping support for 32-bit applications and OpenGL on IOS, those options have been removed from the IOS Settings in the editor. They are currently still available in the ini configuration files, but the support will be deprecated in a future release.

* Bug Fix: Properly set the iPad Pro resolution based on the MobileContentScaleFactor variable.

* Bug Fix: Fixed a problem with the casing of commandline.txt on IOS which would cause it to not be read properly. (modified from kosz78 change)

* Bug Fix: Properly case DotNET in several locations. (from portaloffreedom and Madh93)

* Bug Fix: Fixed a problem with mobile provision detection in IPhonePackager. It now properly reads and uses mobile provision files not managed by Xcode, but with the UUID of the provision in the filename.

#### Linux

* UBT will use all cores during a native Linux build on machines with at least 16GB RAM.

* Native builds on Linux are now faster due to parallelized relinking instead of a single FixDeps step.

* Added pretty printers for gdb so Unreal types can be accessed more easily during debugging.

* Added OpenEXR libs for Linux.

* Gracefully exit with a message box instead of crashing on poor hw/drivers.

* Added USD support on Linux.

    * Fixed RPATH when linking to dynamic libraries in plugins.

* Reduced number of distinct VMAs used on Linux.

* Fixed selection logic for the UE4_LINUX_USE_LIBCXX environment variable.

    * Pull request #3576 contributed by jared-improbable.

* Fixed inconsistent font on the Linux splash screen.

* Fixed FSocket::Recv() blocking when there's no data even if Peek was passed.

* Serialize allocations from the memory pool.

* Fixed crashes when interoperating with third party dynamic libraries that use STL due to hidden new/delete signatures.

* Fixed game window drifting down when dragging it.

* Removed obsolete PhysX deoptimization for Linux (debugging code).

* Fixed code projects not working in the Linux installed build.

* Fixed directory iteration code not handling symlinked directories.

* Fixed UAT compilation on the newest mono.

* Removed long-unused LinuxNativeDialogs (superseded by SlateDialogs).

* Fixed CEF crashing on systems without gconf installed.

* Eliminated SCW logspam on Linux.

#### Mac

* Added VolumetricFogVoxelization implementation. Requires Metal 1.2.

* Fixed address sanitizer support in MacToolChain and added support for thread sanitizer

* Fixed Steam dylib not being included in app bundle for editor builds.

* Changed the order of operations in FMetalStateCache::SetRenderState to work around an issue with some Intel drivers where they would not recalculate the raster state in some edge cases.

* Fixed a problem with window position not being restored correctly on startup if the Windows taskbar was on the left or the top of the screen on editor quit.

* Solved the issue with dsymutil failing with an error saying the input file did not exist

* PR #3461: Mac doesn't return the correct exit code (Contributed by projectgheist)

* In Metal RHI report texture streaming as immediately successful as on D3D to avoid a race-condition leading to deadlock between the Main, Game, Render & RHI threads.

* Added handling of directory symlinks to FApplePlatformFile::IterateDirectory

* Solved a problem with Mac FMallocTBB::Malloc() returning nullptr for 0 bytes allocations, which is inconsistent with other platforms. On Mac we always scalable_aligned_malloc, which behaves differently than scalable_malloc, so for 0 bytes requests we allocate sizeof(size_t), which is exactly what scalable_malloc does internally in such case.

* Fixed in-game console copy/paste shortcuts on Mac

* Fixed a crash in Metal when drawing with ParticleSimulationShader in simplified forward shading mode

* Fixed a crash caused by using TSharedPtr/Ref<FMacWindow> of the same window on main and game threads simultaneously.

* Fixes a crash at exit on Mac in TMetalBaseShader destructor

* Fixed crashes caused by data races in FCoreAudioSoundSource

* Fixed crash at startup on Mac caused by an attempt to use a NULL uniform buffer.

* Fixed audio streaming on Mac

* Fixed double-printing of log entries for console apps (eg. cooking).

* Fixed main menu bar closing when clicking on submenus.

* Fixed a problem with the green titlebar button changing functionality from toggle fullscreen to zoom after switching from fullscreen to windowed mode.

* Bug Fix: Added some extra checking to prevent a rare editor crash on Mac when connecting iOS devices

#### Windows

* Fixed a bug with the windows async IO stuff related to an unsafe pointer cast to LPDWORD from int64*.

* Use the proper controller index redirect on Windows controllers

* Fixed a problem on Windows where the cursor would get locked to a part of the screen after switching from fullscreen to windowed while the cursor is unlocked.

* Fix for incorrect mouse position in fullscreen mode when Windows task bar is placed on the top or on the left of the monitor.

### Programming

* Added support for running PVS-Studio through UnrealBuildTool. To use, pass -StaticAnalyzer=PVSStudio to the build command line (similarly, the Visual C++ analyzer can now be invoked using -StaticAnalyzer=VisualCpp). A log file will be written to the Engine/Saved/PVS-Studio or <Project>/Saved/PVS-Studio directory containing diagnostics, which can be opened using the "unparsed output" filter in the PVS-Studio standalone application. High priority warnings are printed to stdout.

* Visual Studio 2015 Update 3 is now required to compile UE4 on Windows.

* Added FRWMutex and FRWScopeLock.Use RWLocks instead of a mutex for PSO async creation

* Enabled ICF (Identical Code Folding) linker option in android tool chain.

* UnrealHeaderTool now excludes headers in folders named after platforms other than the active target platform.

* UnrealBuildTool now defines UE_4_X_OR_LATER macros for every UE4 version greater or equal to 4.17 when compiling .build.cs files (eg. UE_4_17_OR_LATER, etc...).

* BuildGraph: Compile tasks can be forced to run without using ParallelExecutor by setting the AllowParallelExecutor attribute to "false".

* Compiler warnings for classes with virtual functions but no virtual destructor are now enabled by default.

* Documentation files can now be excluded from generated project files by specifying <ProjectFileGenerator><bIncludeDocumentation>false</bIncludeDocumentation></ProjectFileGenerator> in the XML configuration file.

* Added option to BuildCookRun to generate a map file when compiling (-mapfile).

* Added a setting to allow modules to opt-out of having all public header folders added as public include paths for dependent modules. Set bAddDefaultIncludePaths = false to enable.

* Added an AutomationTool script for syncing DDC stores from one location to another, filtering by modified timestamps and only copying deltas, and also ensuring the size of the combined cache does not exceed a specifed limit. Run AutomationTool with the arguments "SyncDDC -Help" for more information.

* Plugins can now specify explicit dependencies on other plugins, using the same syntax for enabling and disabling plugins in the .uproject file. The plugin browser reflects these dependencies, and will not allow you to disable a plugin without disabling other plugins that depend on it.

* Modules with RTTI enabled now correctly generate a separate precompiled header to modules with it disabled.

* The /permissive- option is now enabled by default for Visual Studio 2017, for stricter C++ standards complicance. The /Zc:strictStrings option is disabled due to violations in Windows headers; all UE4 violations have been fixed.

* UnrealVS: Fixed massive slowdown on startup caused by searching the directory tree under the solution for *.uproject files (including intermediate folders, etc...). Now reads *.uprojectdirs files and only checks the listed directories within. Measured it taking > 30s to run before, now takes < 0.1s.

* BuildGraph: Add a parameter to the <Compile> task which allows forcing XGE to be disabled for a compile (AllowXGE="false")

* Added IsPlayingReplay() function to UWorld

* Added support for the -ini command line config override to C# tools to match the support in C++ tools.

* Disabled UHT error when using "config" on TAssetPtr properties.

* Change the log level of gameplay cue manager cleanup logging to reduce log spam.

* The game executable is now rebuilt if a default plugin is disabled, since dormant code can still create dependencies on content.

* Add android versions of PRAGMA_DISABLE_OPTIMIZATION and PRAGMA_ENABLE_OPTIMIZATION are now honored.

* AutomationTool will no longer be compiled when packaging through the editor with the debugger attached, to prevent access violations on PDBs.

* UnrealBuildTool will now error if a plugin lists a non-plugin module in the .uplugin file.

* Force delayed RPCs to attempt to run once on the frame they when they were received.

* Fixed INI settings for default stack size not correctly being propagated to the linker.

### Rendering

* Moves all engine shader files into Public and Private directory, and introduce the .ush extensions for header file that do not contains entry points.

* Added a* -CSV *option to *ListTextures *command.

* Exposes scene capture 2d's FOV to Blueprints

* Support for running the preprocessor when using ShaderCompileWorker's direct mode with -mcpp

* Fixed bug with auto UVs and small UV charts not packing.

* DR - add cmdline to select a GPU vendor when multiple GPUs from differnt Vendors are installed into the same Machine

* Mesh decals can now be sorted between each other.

* Allows Motion Blur and Temporal Anti-Aliasing in scene capture 2d.

* Gives the possibility to configure scene capture's showflags in Blueprint editor usefull for Blueprint encapsulated compositing pipeline.

* Scene captures and player camera rendering now have a mode to only execute post processing passes, useful for compositing capabilities, and still reuse in-engine provided implementation such as Bloom, or tone-mapping.

* Added a feature that lets scene render components specify a view owner. Useful so that a component's bOnlyOwnerSee field can be used for scene renders.

* Implements LensDistortion engine plugin. This CL import a polished version of The Human Race's lens distortion and undistortion from OpenCV parameters: - It is implemented as the first engine plugin with its own shaders and render thread commands; - Has feature tests in EngineTest with gold images directly extracted from OpenCV itself (GenerateLensDistortionUndistortReferences.py)

* Added Blueprint-exposed SetFadeScreenSize function to DecalComponent.

* Added (Blueprint-exposed) SetReceivesDecals function to PrimitiveComponent.

* When running with -vulkan, the feature level will now be SM5 by default.

* Changed packaging support from SM4 to SM5 for Vulkan. Additionally running with -vulkan on desktop platforms will automatically launch on SM5 mode.

* Major Vulkan refactoring, brings stability and correctness to SM5 and Editor .

* Adds support for opacity output alpha for post process material when doing a draw material to render target.

* Integrate 3267269: Implements SceneCaptureComponent2D::bCameraCutThisFrame

* Expanded r.Vulkan.EnableValidation to have levels of information (1 thru 4)

* Implement support for "Share Material Shader Code" & "Shared Material Native Libraries" project settings when cooking Mac/iOS project on Windows or Linux using a remote Mac for shader compilation.

* Always store the Metal shader text for Mac, but not iOS, to make the shader compiler errors more debuggable. The shader text is stored in a compressed format and only decompressed when required for error reporting.

* Added low impact reporting of rendering-debug groups within Metal so that we get some information about what the GPU was processing when it fails. This is enabled by default to aid the debugging of crashes reported in Metal.

* Extend support for generating native Metal shader libraries to Windows Editor using a remote Mac for shader compilation.

* Fixed StreamingDistanceMultiplier not being applied to SkinnedMeshComponents

* Use the right DLL functions when compiling D3D11 shaders for reflection and compilation; also fixes using the correct fxc.exe path to match the D3D compiler DLL we distribute.

* Fixed fog artifact. Better handle divide by zero.

* Fixed: Wrong memreport for STAT_TextureMemoryCube, STAT_PrecomputedLightVolumeMemory, STAT_ReflectionCaptureMemory

* Fixed deterministic cooking issue caused by lightmap LODGroup only being initialized in the CDO if it's serialized, causing inconsistent delta serialization for instances.

* Fix RHITransitionResources crash with more than 16 textures.

    * Old command had a fixed sized array of 16 textures that would overflow.

    * New command allocates an array of texture pointers inline in the command list, so any number is supported.

* Fixed an issue with on the canvas triangle renderer where vertex colors had a different ordering than vertex positions

* Updated IsParticleCollisionModeSupported() to disable depth buffer particle collision mode for simple forward shading

* Z Fighting fix for depth-equal rendering with a full prepass - don't merge verts with an epsilon when creating depth-only indexbuffers

* Fixed a bug where UCanvas::K2_DrawMaterial did not respect the currently active canvas draw color

* Replace the previous fallback implementation of reversebits for Metal to avoid an Nvidia Metal compiler bug.

* Destroyes scene capture's view states on the UnRegister, to avoid large memory usage cause by the ViewState's render targets when moving Blueprints arround.

* Fixed: Scene capture component was applying only default ShowFlags in game

* Fixes a bug where scene capture WorldToView matrix would get scale != 1 when scaling the scene capture actor in the world.

* Compile Metal shaders to use the native Vector*Matrix intrinsic to prevent inconsistencies between the depth pre-pass and base-pass caused by the Metal compiler reordering instructions differently between shaders.

* Fixed asserts in various UKismetRenderingLibrary methods if passed a nullptr for the WorldContextObject Fixed flipped warnings in the failure cases for EndDrawCanvasToRenderTarget

* Added a workaround for a rare editor crash updating parameters for an outdated shader map.

* Stability fixes for Vulkan

* Prevented a crash in UStaticMeshComponent::GetMaterialSlotNames when called on a component with no StaticMesh set

* Prevented a crash in USkinnedMeshComponent::GetMaterialIndex or USkinnedMeshComponent::GetMaterialSlotNames when called on a component with no SkeletalMesh set

* Prevented a crash in UParticleSystemComponent::GetNamedMaterial or UParticleSystemComponent::GetNamedMaterialIndex when called on a component with no template set

* Fixed a bug in RHITransitionResources which would cause a crash when more than 16 UAVs are passed.

    * New command allocates an array of UAV pointers inline in the command list, so any number is supported.

* Temporarily disable GPU morph targets on Mac because they require implicit Buffer<> format conversion which isn't available in Metal.

* Fixed a crash when enabling debug visualisation on Metal caused by an incorrect colour output format in one of the shaders.

* Disable Fast Fourier Transform Bloom for Metal v1.0 & 1.1 as the shaders don't compile correctly on Mac OS X 10.11.6. When used there is an error reported in the Output Log that instructs users to explicitly opt-in to Metal v1.2 in the project-settings to support this feature, which raises the minimum supported version of macOS to 10.12.5.

* Workaround a bug in the Intel GPU shader compiler for macOS 10.12.6 by using a static helper function to access vector components by array index.

* Fixed several cases where a scissor rect could be incorrectly left set across general rendering and Slate.

* Fixed a rare crash when compiling shadowing default materials.

* Fixed a threading crash when closing a viewport using debug drawing.

* Fixed a crash in quadric reduction caused by bad tangents in source mesh.

* Fixed incorrect fast-ram texture setup for LPV textures.

* Fixed up a crash when running a cooked build without cooked shaders.

#### FX

* Fixed a rare crash bug in GPU particles. Particle emitter resources were being deleted before being used by the simulation.

#### Lighting

* Static light source shapes drawn into reflection captures handle SourceLength via scaled sphere

* Improved contact shadows.Fixed some issues hampering it from being very usable. If you've tried using this before and had issues I recommend trying again.

* Volumetric fog now supersamples lighting when the history is not available, reducing noise on areas that just came on-screen or after a camera cut. * The number of samples is controlled by r.VolumetricFog.HistoryMissSupersampleCount, defaults to 4, cinematic scalability uses 16 * Under fast camera movement, volumetric fog cost went from 1.79ms -> 1.97ms with 4 samples, on a 970GTX

* ShadowResolutionScale affects the static shadow depth map used by volumetric fog

* Stationary point light static shadow depth maps are higher resolution to match spotlight resolution

* Optimizations to shading model math. PR #3340: Bug fixes related to shader TODOs (Contributed by vgfx)

* Add the LightComponent property bForceCachedShadowsForMovablePrimitives. This allows us to enable shadows for selected lights for movable objects when r.shadow.cachedshadowscastfrommovableprimitives is 0.

* Fixed particle lights in forward shading, they were not setting the lighting channel mask properly

* Fixed DBuffer decal default normal (used when DBuffer decals enabled, but not decals rendered) not reconstructing zero properly, adding -.008 to WorldNormal which then caused artifacts with forward lighting specular on materials with roughness near 0.

* Fixed static shadowing of volumetric fog and translucency causing shadowing past the lightmass importance volume.

* Fixed a possible crash happening after a lighting build.

* Fixed Indirect Lighting Cache updates caused by capsule indirect shadows forcing point samples, breaking primitives using ILCQ_Volume

* Fixed lights from hidden levels affecting the lighting build.

* Fixed a rare bug where HLODs could incorrectly draw their children in shadow maps.

* Fixed precomputed lighting being discarded on map load for some Blueprints.

* Fixed shadow color not getting updated after light build when a texture is changed and reimported

* Fixed dynamic shadows and raytraced distance field shadows of directional lights not appearing in planar reflection

* Fixed direct capsule shadows with point lights also projecting shadow on opposite side and direction

#### Materials

* Bent normal map support. Multibounce AO approximation.. Spherical Gaussian based specular occlusion.

* Added new material nodes for quasi-random Sobol points, with a distribution matching the new Sobol Blueprint nodes.

* Dither opacity mask now stacks properly for non parallel polys. Dither is randomized by triangle normal.

* Captions for Noise and VectorNoise material nodes now show which noise function is active

* Added RenderTargetFormat to UTextureRenderTarget2D, with choices of 8 bit, 16fp, 32fp and 1, 2 or 4 channels.

* Added Log10 material graph node.

* Optimizing the blend angle corrected normals function per caner_ozdemir's suggestion.

* Fixed various material parameters not working with mesh decals, e.g. World Position.

* Fixed possible texture streaming issues on static meshes and skeletal meshes.

* Fixed material shared texture sampler usage with mip-biasing.

* If you had a reroute node between a Material Function texture input and its usage, the parent material would fail to resolve the reroute node.

* float4 PseudoVolumeTexture: Fixed frame layout being a float instead of float2. Now works correctly with non-square frame layouts. Only called in custom nodes and calling with a float still functions properly so no old content will break.

* Fix a crash when UMaterialInstanceDynamic::CopyParameterOverrides is passed a nullptr

* Fixed an issue where textures would have low resolutions after a memory usage spike.

#### Mobile Rendering

* Android applications built with OpenGL ES3.1 or Vulkan will now use native sRGB sampling instead of emulating it. You can expect better perceptual color resolution for textures on devices.

* Translucent objects marked as "Mobile Separate Translucency" will be rendered separately after Bloom and Depth Of Field. This option can be found in Translucency section of Material Editor.

* Added project option to limit GPU skinning to 2 bones per vertex. In case project skeletal meshes was authored with 2 bones influence, enabling this option will reduce vertex shader cost for skeletal mesh rendering. Option can be found in Rendering Settings -> Optimizations -> Limit GPU skinning to 2 bones influence.

* Enabled vertex texture reads with ES3.1 feature level.

* Fixed: Rendering artifacts related to sampling CustomDepth in translucent materials

* Fixed: Deferred decals rendering artifacts in HTML5

* Fixed: HighRes screenshot with 'Use CustomDepth as mask' in feature level ES2 preview leads to Editor crash

* Fixed: Game view is letter-boxed on LG G6, Samsung Galaxy S8

* Fixed problem with an inverted y-axis for the opacity when using Inverse Opacity Scene Captures and MobileHDR disabled

* Disabled frame buffer fetch on Android GLES 3.1 to fix black screen and other issues

* Fixed color fringing offsets when using a sub-rectangle of render target.Changed mobile color fringing to be a closer match to the desktop renderer.

* Fixed: Galaxy S8 Mali device detects as Android_Mid device profile

* Fixed: Redundant render target clears in mobile rendering

* Fixed: DOF rendering artifacts on Redmi Note 3

#### Optimizations

* Allowed the possibility of running the RHI "thread" on task threads instead and cleaned up and unified the conditionals involved. By default we still have a dedicated RHI thread because it tested slightly faster.

* Cone vs tile bounding sphere intersection tests for Light Grid culling of spotlights, which provides much tighter culling than just View space tile AABB vs light bounding sphere. * Forward shading BasePass 3.7ms -> 2.4ms in a scene with 24 spotlights on 970GTX * Volumetric fog 2.87ms -> 2.09ms in the same scene

* Skip recapturing reflection captures when PropagateLightingScenarioChange is being called for a level unload. This leaves stale results in reflection captures around when hiding a level in the editor, but avoids the double recapture that happens when swapping lighting scenarios in game, and the unnecessary reflection capture update when exiting PIE.

* Deferred uniform expression caching. Setting multiple parameters on a material only causes its uniform expressions to be recached once.

* Occlusion queries are now always done before the base pass if a nearly full prepass is being used(DDM_AllOccluders or DDM_AllOpaque). Removed r.OcclusionQueryLocation.

* Global distance field composite shader has a version for each flattened axis, which improves efficiency when updating a slab which is what camera movement typically causes

* Added the possibility to downsample standard translucency for improved performances.

* Optimized texture loading by multithreading the DDC loading.

* Improvements for Skin Cache, performance and memory optimizations

#### Post Processing

* Implements Composure plugin to make compositing in UE4 easier.

* Change labels on bloom boost from x,y,z to min, max, mult. This applies to the convolution bloom option. A PropertyRedirect in BaseEngine.ini allows this to work with older version.

* Exposes r.PostProcessing.PropagateAlpha to the renderer settings.

* Fixed pixel inspector values for scene color being clamped to 1.

* Fixed a bug with the compute version of the SSAO pass that could cause some AO artifacts with non-standard viewport sizes. Most people won't have seen these problem since the pixel shader (not the compute) version is the default code path.

### UI

* Fixed some crashes/artifacts with bidirectional text It was possible for a line to compute an incorrect range, which could cause crashes or other highlighting issues. The highlighting logic has also been updated as the old code didn't handle all bidirectional cases correctly.

* Added preset Unicode block range selection to the font editor UI

* UMG - Adding GetMousePositionOnPlatform and GetMousePositionOnViewport as other replacements that people can use rather than GetMousePositionScaledByDPI.

* UMG - Added a button to the Widget Designer to summon the Slate Widget Reflector.

* UMG - Adding an option in the widget designer to control respecting the locked mode.

* PR #3450: UMG "Lock" Feature, allows widget locking in the designer. (Contributed by GBX-ABair).

* Automation - Introducing a way for people to provide Ground Truth for their tests.

* UMG - Progress Bar Widget - Exposing Border Padding Option.

* Exposing GoTo/ScrollTo to single-line editable text for API parity with multi-line editable text

* UMG - Render Focus Rule now defaults to never.

* Added the ability to set the sides to pad on the USafeZone.

* Allow selecting invisible items in UMG CommonTreeView and Slate STreeView.

* Added subtitle priority to USoundCues. It defaults to the default subtitle priority (10000) so no behavior changes by default, but you can now specify SoundCue priorities properly for the subtitle system.

* UMG - Introducing more options for how items are sized in a table view. The two new modes are Evenly Sized and Evenly Wide. Evenly (Size) - Items are distributed evenly along the row (any extra space is used to scale up the size of the item proportionally.) Evenly (Wide) - Items are distributed evenly along the row, any extra space is used to scale up width of the items proportionally.)

* UMG - Improving the navigation options on the ScrollBox. You can now set the NavigationScrollPadding on the scrollbox to configure an amount of padding that's added to the scrollbox when navigating, so that extra space is put between the item and the edge of the view.

* UMG - Introducing a way to inform the widgets more information about the designer. There's now a DesignerChanged event sent to all design time widgets letting them know things like the current screen size and DPI scale. UMG - The SafeZone widget will now show the correct safe zone amount if you use the safezone command line options in the designer, which are now documented in the comment for the USafeZone class.

* UMG - SafeZone widget now has comments, and useful tips. Using the debugging console commands now trigger the broadcast that will cause controls like the SSafeZone widget to resample the display metrics to learn the new safezone ratio.

* Add option to hide action button prompts if the button isn't interactable. +Add SetHidden method to CommonActionWidget +Add bDisplayInputActionWhenNotInteractable setting to CommonButton

* CommonButtonGroup - add support for button clicked and button doubleclicked events.

* Add OnHoveredButtonChanged event to the CommonButtonGroup. This allows for doing things like displaying an item inspect view when hovering over items in the button group.

* UMG - Adding a way to config the default option for how Scaleboxes should perform layout, single or double. Double is more precise, but has a larger layout cost. Single works 90% of the time so long as you don't have layout loops. Double has been the way it always worked, and is the default, but converting your project to use single can save a lot of time.

* UMG - Adding a way to access the absolute size of widget Geometry in Blueprints.

* Slate - You can now visualize batching by doing Slate.ShowBatching 1.

* Slate - You can now show overdraw in slate by doing Slate.ShowOverdraw 1, or 0 to disable.

* UMG - Exposing a way to dynamically set the touch/click method on buttons.

* Editor - Adding PPI/DPI to the unit conversion tables.

* Added a compilation warning for UMG child Blueprints that define a widget hierarchy if the parent also has one (in this case only the children widgets will be created, the parent ones are ignored)

* Adding the console command Slate.ShowDebugTextLayout to help debug layout issues in Slate.

* UMG/Android - Making several improvements to the way mobile scrolling is handled in UMG/Slate. Introducing a way to get the Physical Screen Density on Android and iOS. On iOS it's a hardcoded set of densities, for android they're loaded from the AndroidEngine.ini. If we can't find a match to the model phone you're on, we rely on the OS to report a reasonable screen density. With physical screen dimension knowledge, we can make much better decisions about deadzones around the finger before things like Drags are triggered. This change also introduces a gesture detector to Slate so that Slate can simulate gestures that may not be provided by the OS. The first and only gesture we currently support is the new Long Press gesture that has been added. The innertial scrolling logic has been rewriten on the ScrollBox, and the inertial scroll manager now has a better default experience.

* PR #2699: GameViewportClient - Added a method to allow setting the viewport cursor. (Contributed by rfenner)

* UMG - Adding a way for games to opt-out of the slow widget path, to completely prevent them from being cooked. UMG - The movie data is no longer cloned for each new instance that inhabits. It now keeps a reference to the now publically accessible movie scene data on the class instead.

* Slate - The stencil buffer is created on demand if you start using complex clipping, otherwise it doesn't allocate one.

* Fix bogus error message about the number of usable texture coordinates on ES2 when compiling a UI domain material

* UMG - Fixing the WIC to properly simulate cursor delta so that scrollbars work now work in 3D.

* Fixed constant font measure flushing if a widget had no font set

* Fixed constant font cache flushing if a widget had no font set

* Fix extra slate uv coords not functioning on ES2

* Text containing surrogate pairs now runs through HarfBuzz when shaping in Auto mode

* Fixed incorrect handling of some left-to-right scripts that require complex text shaping

* Fixed crash when trying to swap UMG widgets bound in an animation track with a widget from a different widget Blueprint.

* Fixed a null SComboBox item selection preventing the combo from opening

* Fixed font outline changes not automatically updating the text layout used by a text block

* Slate - Removing long ago deprecated api for 'aspect ratio' locking box cells.

* UMG - Deprecating GetMousePositionScaledByDPI, this function has too many issues, and I don't want to break buggy backwards compatability, so just going to deprecate it instead. For replacement, you can now access an FGeometry representing the viewport (after DPI scale has been added to the transform stack), and also the FGeometry for a Player's Screen widget host, which might be constrained for splitscreen, or camera aspect.

* UMG - Deprecating OPTIONAL_BINDING, moving to PROPERTY_BINDING in place and you'll need to define a PROPERTY_BINDING_IMPLEMENTATION. Will make bindings safer to call from Blueprints.

* UMG - The WidgetComponent now marks more fields as read-only in the details view depending upon other settings so that user are less confused about what settings actually have an impact under the current mode.

* Fix issue where slate menu placement options like ComboBoxRight did not work properly for UI popups that create their own window, such as combo boxes in the editor.

* Slate - Loading Screen - Adding some additional checks to the the loading code to ensure we're on the main thread. Additionally adding a fix that prevents deadlocks in the rare case a user hits Alt+Tab in a fullscreen game while in a hard loading screen.

* We now handle scaling the glyph advance, as FreeType scaling didn't work correctly for all fonts

* UMG - Fixing the designer showing multiple material brush options for sequencer.

* UMG - Improving the display of the +Track menu in sequencer for UMG. Renamed it from +Add, which is repetitve to +Track. Additionally, the dropdown now shows the currently selected widgets, as well as a submenu containing all the 'important' widgets, so we no longer populate that list with a ton of irrelevant widgets that are just Buton_1 - N, which is pointless in showing people, they'll never guess which is the right button.

* Slate - We now version focus per user, that way during focus events, we can safely abort focus events and state transitions if someone interrupts the active focus event with something new transitioning focus, while transitioning focus.

* Slate - The GetRenderer() call on SlateApplication no longer returns a SharedPtr, rather than convert it to a thread safe ptr, going to just make accessing it a raw ptr return, so it can be safely referenced on the game thread while being used on the slate loading thread.

* UMG - User Widgets now have an easy way to know if they're part of (OnAddedToFocusPath) or have been removed (OnRemovedFromFocusPath) from the focused widget path, which is handy for doing effects.

* Slate - The GetRenderer() call on SlateApplication no longer returns a SharedPtr, rather than convert it to a thread safe ptr, going to just make accessing it a raw ptr return, so it can be safely referenced on the game thread while being used on the slate loading thread.

* PR #3250: Return correct VirtualUserIndex (Contributed by projectgheist)

* Fixed "NativeGameLanguage" not being used correctly during localization initialization

* Fixed a bug which caused subtitles to sometimes delay displaying for a long period of time or even never to display at all.

* Fixed JIRA FORT-40180: Subtitles do not display when volume is set to zero.

* Fixed a problem with editor tooltips not disappearing when the cursor is moved over the other application's window placed on top of the editor window.

* Fixes for CommonTextBlock +Fix for not rebuilding the underlying slate resources or refreshing after the slate resources are destroyed, as happens when the CommonTextBlock is on an activatable panel that gets popped and then push back on later. +Don't crash the editor if TextScrollStyle is reset.

* Fix bug with input not working when popping widgets off the CommonWidgetStack.

* Slate - Fixing the size of Paper2D sprites when used as box brushes in Slate.

* UMG - Making a few calls more efficent for mobile, by caching values for a frame that end up getting called a lot if you have several widget components.

* UMG - Don't layout components if they're not marked as visible in the world widget screen layer for widget componets.

* Slate - We now have a scope counter for text layout now, to let people determine when their text is a massive performance drain usually due to scaleboxes, that are in double layout mode instead of single.

* Windows - Adding code to catch remote desktop cases where no mouse was detected, but it's a remote session, which sometimes doesn't list a mouse, which affects how the engine handles input.

* Slate - Locking down the exposure of ComputeDesiredSize, this function was never intended to be public on widgets, so trying to prevent that.

* Slate - Disabled widgets now render correctly on mobile. Previously they were being transformed as if they were in linear space, on mobile the textures and fonts are already in gamma space, so the transform for luminance needs to also be done in gamma space.

* UMG - Making a pass on invalidation. The ability to store invalidated elements in local space locations and apply transforms in the GPU had rotted, restoring that functionality.

* PR #3668: UE-45908: Cache debug line locations when performing a LineTraceMulti in the Widget Interaction Component (WIC) (Contributed by projectgheist)

* UMG - Fixing a bug with the drag handle not working correctly in HDPI mode.

* Fix drop shadows inheriting the outline color of the font. The outline should still appear but not have a different outline color from fill color

* UMG - Fixing an offset with the grab handles in HDPI mode.

* PR #3645: UE-45464: Handle SSlider mouse interaction more accurately (Contributed by projectgheist)

* PR #3478: Fix possible UComboBoxString crash (Contributed by nakosung)

* Slate - The Slate RHI Renderer now caches the TextureLODGroups so that it can properly lookup the filtering of different texture groups that are set to Default, instead of a particular filter override on a texture. Engine/Rendering - Simplifying some of the setup logic in TextureLODSettings so that code is shared for setting them up properly after loading from a config file.

* PR #2642: Changed private to protected in SVirtualJoystick.h (Contributed by Skylonxe)

* Slate - Fixing some HDPI calculations for fitting new windows on screen, it was using the unscaled size of the widgets for fitting, when it needed to scale them up, this was affecting the placement of popup windows the most.

* Slate - Moving the STableViewBase over to the FOverscroll class, rather than it's own clone.

* PR #2281: Scrollbar missing features and SScrollbar fixes (Contributed by SNikon)

* Editor - Removed the Super Search bar also removed the User Feedback button.

* Fixed a crash that could occur when a font asset was unloaded

* Slate Standalone Renderers - Making the shaders more resistant to changes in the draw effect enums by interpreting the flags on the CPU, and setting the states as constants, instead of mirroring the enums in the shader code. Additionally fixing some places where we were not reseting the scissor rastering state in D3D and OGL, that was causing clipping artifacts because the standalone renderers make assumptions about render state when a new frame is drawn.

* Slate - Properly adding and removing entries from the PointerIndexLastPositionMap so that new touch events don't inherit the movement of a previous touch event.

* UMG - Adding some fixes to solve widgets not properly displaying/loading if the EventDrivenLoader (EDL) is disabled.

* Fix crash when attempting to maximize standalone window while a startup movie is playing

* Fix crash in slate if the drag and drop requestor is destroyed before the drag and drop completes

* Fixed crash when undoing changes in Widget Blueprints

* Fix issue where Widget Blueprints could fail to cook properly and mistakenly get marked as editor only

### VR

* Spectator Screen Support Improved
The Spectator Screen is the 'normal' output device connected to a VR device usually a TV or a Computer Monitor. While one player uses the HMD other people can observe or interact with the experience.At the time of this writing Oculus Rift, HTC Vive, and PlayStation VR support a Spectator Screen. It is expected that PC and Console like platforms, which always have a Screen attached, are likely to support this while mobile-like platforms are not.

    * Cross platform api to control the spectator screen on Oculus Rift, SteamVR, and PSVR.

    * HeadMountedDisplayFunctionLibrary gets new Blueprint functions.

    * All platforms now support these modes: SingleEyeLetterboxed, Undistorted, SingleEyeCroppedToFit, SingleEye, Texture, EyePlusTexture.

    * OculusRift and SteamVR support disabling spectator screen output.

    * On PSVR SingleEyeCroppedToFit uses the hardware supported mirror output. All other options will cost frametime.

    * OculusRift additionally has an additional mode, Distorted, which displays the image as processed the Oculus API for display in the HMD (so you can see chromatic abberation correction, etc).

    * The default mode is SingleEyeCroppedToFit on all platforms. Any unsupported mode falls back to this.

    * If one fails to specify a texture for a mode that uses a project defined texture black will be displayed instead.

* Adding early experimental support for Apple's ARKit augmented reality system. This is based on the code by Wingnut, which was shown on-stage at WWDC earlier this year.

* In order to reduce platform differences, Face-Locked StereoLayers are now by default always rendered on top of other layer types regardless of priority on all platforms. Platforms that support mixing the layer types can revert to the old behavior by setting the vr.StereoLayers.MixLayerPriorities console variable to 1.

* When using unsupported Stereo Layers features on a given platform, the implementation will issue a warning.

* The default emulated StereoLayers implementation now supports the NoAlpha flag to enable ignoring the alpha channel in the texture to be rendered.

* SteamVR now supports World-locked StereoLayers.

* Inline reference documentation for IStereoLayers enum and struct members has been moved so they appear in the right place in the extracted documentation.

* Added support for the Vive Tracker. The trackers can be used with the Special 1 through 9 hand designations.

* Added option to Play-in-Editor settings to not minimize editor when doing VR Preview. This allows for easier debugging of Blueprints in VR mode.

* Oculus Unified Plugin. OculusHMD plugin now supports both the Rift and the GearVR in one plugin. Minor supporting engine modifications are included, but no end-user updates should be needed outside of making sure the new OculusVR plugin is enabled in your project

* Added a Blueprint function, SetTouchDPadMapping, that lets users remap the SteamVR controller's d-pad buttons.

* Added support for Valve's Knuckle's controllers. New input axes for capacitive hand sensors were added, and can be found under "Knuckles" in the input handlers

* Hooked up HMDWorn VRNotificationComponent delegates for Oculus and SteamVR. Added Blueprint accessor for GetHMDWornState. Note: Steam is slower to decide the hmd has been removed. It has to be motionless for a few seconds.

* Skipping recording of analytics if there is no device connected on startup, to prevent false reports when Oculus / SteamVR runtimes are installed on the user's machine, but no HMDs are plugged in.

* Fixed a bug on SteamVR Stereo Layers where it behaved as if LAYER_FLAG_QUAD_PRESERVE_TEX_RATIO flag was always set.

* Fixed a bug with Stereo Layer splash layers where they were always shown as 8 by 4.5 meters regardless of texture size. Now, the layer height will be calculated based on the texture pixel dimensions.

* Fixed: PSVR not applying WorldToMeters for position accessor

* Fixed: Duplicate .so files in GoogleVR.

* Fixed: Crashes when multiple controller plugins are active and certain motion controller related Blueprint functions are used.

* Fixed: PSVR camera thread runs too slow if the game is hung or missing frame rate -Changed the code that tries to synchronize the camera thread to the game thread so that it only waits 1ms for the sync, rather than 18ms. This means that the thread will always run at 60fps, but if framerate is hit it will over time move itself into phase with the game.

* Bug Fix:

    * Fixed a bug in sensor visualization when vr.Debug.VisualizeTrackingSensors in relation to active camera components.

    * Tracking sensor visualization now no longer needs to be toggled off and on again after loading a different level in the editor.

* Fixed PSVR Spectator Screen one pixel wide edge artifact in separate mode-Changed sampler wrap mode to clamptoborder.

* Fixed quaternion Ensure triggering in debug when using the Oculus Rift through the SteamVR plugin.

* Fixed a crash in the Oculus plugin that could occur if users were setting the splash screen during BeginPlay or earlier.

* Fixed a crash that could occur if the user uninstalled the Oculus runtime (and Blueprints were left calling Oculus specific code).

* PSVR tracking broken by suspend/resume. Re-acquiring each tracked device on resume.

* Fixed a bug in how loading splash screens were configured for GearVR causing the texture assets not being included in the cooked game.

* UE-47113 PSVR tracking broken by suspend/resume.-The reprojection prediction time code could get into a bad state when the game was halted, for example by suspending, would cause a very long prediction time, this would make the tracking data fetch call fail, which would again cause a long prediction time.

* Fixed OpenVR initialization problem (VulkarRHI needs to enable necessary layer extensions).

    * Inspired by the pull request #3636 by TTimo.

* UE-46862 PSVR using previous reprojection data -Fixed use of previous frame's data, adding unnecessary latency, replaced with synchronization on gpu frame completion

* Changed the Oculus GetRawSensorData function so users can query different devices, not just the HMD.

* Changed the GearVR touchpad button mapping to now trigger MotionController-Thumbstick events instead.

## UPGRADE NOTES

### Animation

#### Skeletal Mesh

* If you have empty morphtargets, they will go away with this change.

### Blueprints

* Exposes scene capture showflags to Blueprint editor UI

* Due to a previous bug, some assets that were referenced by Blueprint pins at runtime where not correctly garbage collecting if only pins were referencing them. If your Blueprints depended on those objects staying loaded across frames you should assign them to a variable.

* Periods (".") may no longer be used as part of Blueprint variable names, function names, component names, etc..., though existing names containing these are 'grandfathered in' and will not be automatically renamed.

* If, after upgrading, your Blueprint class has a "Cannot construct objects of type..." Blueprint node error after loading, you'll need to change the class type on the affected "Construct Object From Class" node to one that includes 'BlueprintType' (and not paired with 'DontUseGenericSpawnObject') somewhere in its inheritance hierarchy.

### Core

* Projects should no longer use the private_subobject macro. Instead, all subobject properties should be made private and be accessible through accessor functions.

### Editor and Tools

* A few methods were deprecated and renamed to enforce a consistent UI. Now all asset tools methods that expose a dialog have "WithDialog" in their name to differentiate them from methods that do not open dialogs and could be used by scripts for automation. C++ users may still access IAssetTools but should not ever need to use the UAssetTools interface class

* Refactored the API for adding rows to details panels to make it more consistent:

	* AddChildCustomBuilder->AddCustomBuilder
	* AddChildGroup->AddGroup
	* AddChildContent->AddCustomRow
	* AddChildPropert->AddProperty
	* AddChildStructure->AddExternalStructureProperty
	* AddStructure->AddAllExternalStructureProperties
	* AddExternalProperty->AddExternalObjectProperty or AddExternalStructureProperty

### Gameplay Framework

* UEngine::GetWorldFromContextObject(Object, optional Boolean) has been deprecated and replaced with a new version which takes a non-optional enum specifying the behavior on failures. The behavior of the existing UEngine::GetWorldFromContextObject(Object, true) case has changed slightly to log an error (with BP callstack) and return nullptr, rather than the previous inconsistent behavior where it might:

    * Fail an assert (if passed null)

    * Fail an ensure (if passed a non-null object with no implementation of GetWorld()

    * Silently return nullptr (if passed an object that implements GetWorld() but has no route to a world for one reason or another)

* This behavior change matches the expectations of the vast majority of use cases that expected it could fail and handled a null return value. Most game-specific usages should pass in EGetWorldErrorMode::LogAndReturnNull and handle the return value being null gracefully. For the few cases that need to assert that it will always return a valid world, use the new GetWorldFromContextObjectChecked method.

### Physics

* Changed tuning for linear soft constraints to use more reasonable numbers. Existing data should be fine, but runtime values (set by code or Blueprints) will need to be updated. You can go back to the old tuning by modifying p.ConstraintLinearDampingScale and p.ConstraintLinearStiffnessScale back to the same as the angular stiffness values. Also any custom value of p.ConstraintStiffnessScale should be renamed to p.ConstraintAngularStiffnessScale

* Physics assets created prior to this release may need to be recreated. This should only be the case if enabling Simulate Physics for the Skeletal Mesh component causes the Mesh to explode.
This only happened in cases where Skeletons or Skeletal Meshes used as Previews in PhAT had baked in non-identity scale.

### Platforms

* The Twitch implementation was never completed, and the SDK is no longer publicly available from Twitch. We have no plans to support in-engine broadcasting at this time.

#### Android

* If your automation systems depend on Android_All, you will need to replace that with Android_Multi and select the texture formats you wish to support.

#### Xbox One

* See the Major features doc

### Rendering

* Shaders in plugins.

* Windows 10 has very good support for multiple GPUs in one machine. QA and programmers can now use -preferAMD or -preferNvidia cmdline to select a GPU Vendor without having to physically swap the GPU everytime.

* Mesh decals sort order is now controlled through the component TranslucencySortPriority.

* Implements first Engine plugin with its own Shaders/ directory for dynamic lens distortion UV displacement map generation from parametric camera model.

* Vulkan pipeline cache will need to be resaved.

* Post process material with "output opacity as alpha" ON can now be used with DrawMaterialToRenderTarget Blueprint call to draw alpha channel without any blending.

* Exposes camera cuts to scene capture 2d components.

* Fixed a bug where UCanvas::K2_DrawMaterial did not respect the currently active canvas draw colorUpgrade Notes: This does change the behavior, so K2_DrawMaterial calls with a non-white color set will now be affected by the color *if* they use a vertex color node. Impact is expected to be minimal because most of the materials people used with it were unlikely to include the vertex color node.

* Fixes a bug where the game thread's garbage collecting latency for scene captures could lead to huge GPU memory wastage.

* Fixes a bug where scene capture WorldToView matrix would get scale != 1 when scaling the scene capture actor in the world, causing various artifacts such as decals not showing up.

#### Optimizations

* SeparateTranslucency is now renamed to AfterDOF translucency

* Projects can now configure *r.AllowDownsampledStandardTranslucency* to control whether standard translucency should be rendered in downsampled resolution like AfterDOF translucency.

* The default value is 0 will downsample translucency unless there are some blend modulate materials.

#### Post Processing

* Exposes project settings to enable experimental alpha channel in post processing.

### VR

* New:

    * The experimental PSVR social screen Blueprint functions will be mapped forward, but the Test and SoftwareMirror modes have been mapped to Undistorted (both eye debug view), because there is no exact equivalent.

    * The vr.MirrorMode CVar controlling this feature was removed in favor of the console command vr.SpectatorScreenMode. vr.MirrorMode is aliased as a console command to the new command. Some older platform specific mirror mode commands and settings that have been deprecated for several versions were removed.

* With the new unified Oculus plugin, a handful of items have been reorganized and deprecated:

    * The OculusInput, OculusLibrary, OculusRift, & GearVR modules have all been merged into one "OculusHMD" module -- code projects which list these as dependencies in their Build.cs file will have to switch over to use the new module.

    * All GearVRFunctionLibrary and GearVRControllerFunctionLibrary methods (with the exception of SetCPUAndGPULevels) have been deprecated and will notify Blueprint users accordingly.

    * The GearVRController component should be replaced with self-managed MotionController and StaticMesh components (the mesh asset can be found here: /OculusVR/Meshes/GearVRController)

    * The EGearVRControllerHandedness enum has been deprecated and will be removed in a future version.

    * Config settings, under the [GearVR.Settings] heading have been deprecated in favor of those under the unified [Oculus.Settings] label.

    * A number of GearVR specific config settings have been removed (CpuLevel, GpuLevel, MinimumVsyncs, HeadModelScale, bOverrideFOV, HFOV, VFOV)

    * The "VR.Oculus.Debug.Property" console command has been removed, as it is no longer supported.

* Since the splash screen layers on Oculus are no longer forced to 8 by 4.5 meters, if your project has been relying on that feature to stretch your image, you will need to resize the image manually to a 16:9 aspect ratio.

* The loading splash screens are now configured within the editor instead of manually having to edit DefaultEngine.ini. After upgrading, you'll have to open up Edit/Project Settings.../Plugins/OculusVR and reenter the information.

* GearVR control mappings have been altered to align more with the Oculus touch controllers. User might have to manually upgrade their Blueprints to handle the new input events.

    * The touchpad is now mapped to MotionController-Thumbstick events (for click, axis, and virtual left/right/top/down buttons)

    * The back button is mapped to MotionController-FaceButton1 (triggered on a quick press - on a long-press, Oculus will prompt the user to go back to home)

    * The trigger is still mapped to MotionController-Trigger

    * All other buttons are reserved for Oculus use only (not exposed to developers)

## PROGRAMMING UPGRADE NOTES

### AI

#### Navigation

* Instead of simply instantiating `UCrowdManager` NavigationSystem will now create an instance of a class indicated by `UNavigationSystem::CrowdManagerClass`. Given class needs to extend the newly added `UCrowdManagerBase` class.

### Animation

#### Animation Assets

* Custom code that is creating montages or montage slots may have to be updated to take into account montages have a slot by default.

#### General

* Only affects GPU Morph Targets which need to be enabled in the Project Settings

* FAnimNode_Base API has changed. Please change Evaluate to Evaluate_AnyThread, Update to Update_AnyThread, Initialize to Initialize_AnyThread, CacheBones to CacheBones_AnyThread and RootInitialize to OnInitializeAnimInstance. Your code will continue to compile but deprecation warnings will be emitted.

* Old transition getters in UAnimInstance have been deprecated since 4.9, they have now been removed.

#### Tools

* This requires native asset that derives from DataAsset and IPreviewCollectionInterface.

		class UMyPreviewMeshCollection : public UDataAsset, public IPreviewCollectionInterface
	
	Once you create this, you can extend this in BP if you want to. And can preview those assets in Animation Editor.

### Blueprints

* FEdGraphPinType constructor, UEdGraphNode::CreatePin, and FKismetCompilerContext::SpawnInternalVariable that took 3 booleans deprecated and replaced with a version that takes EPinContainerType.UEdGraphNode::CreatePin parameters reorganized so that PinName is before ContainerType and bIsReference, which default to None and false respectively

* Uses of UEdGraph::CreateBlankNode must be changed to call CreateIntermediateNode instead.

* Deprecate and rename SetPinDefaultValue because it actually sets the Autogenerated default. This was being called in bad places and destroying the stored autogenerated defaults

### Core

* Deprecated FPackageName::ConvertRootPathToContentPath and PackageFromPath as they were confusingly named and not used much. Also cleaned up header in general

* Any scripts or batch files using FixupRedirects should be switched to use ResavePackages with the -FixupRedirects command line option

* UEngine::OnPostEngineInit was deprecated, you should bind to FCoreDelegates instead. It's also now called for Commandlets like Cook

* Code directly accessing FAssetData::TagsAndValues may be broken because it was switched to a more efficient Map format. Code using the GetTagValue accessors should still be fine. In other changes to save memory GroupNames has also been removed from FAssetData, and tags with completely empty values are now stripped at load time.

* To make use of this feature, add a "WhitelistTargets" or "BlacklistTargets" array to you .uplugin file.

* Use BlueprintInternalUseOnly on base classes/structs that wish to expose properties but not be exposed as a BlueprintType themselves.

* PPF_Localized has been removed as nothing was using it.

* The ptr+size overload of Algo::IsSorted() has been deprecated and should be passed a TArrayView instead, so Algo::IsSorted(Ptr, Size[, Predicate]) will become Algo::IsSorted(MakeArrayView(Ptr, Size)[, Predicate]).

* The default User-Agent in all HTTP requests have been consolidated on all platforms. The format is now: game=<FApp::GetGameName()>, engine=UE4, version=<FEngineVersion::Current()>, platform=<FPlatformProperties::GetIniPlatform()>, osver=<FPlatformMisc::GetOSVersion()>

### Editor and Tools

* To use this feature, simple override USceneComponent's GetEditorPreviewInfo() method.

* Add UPhysicsAsset API function to know if a Skinned Mesh Component is able to calculate a valid bounding box.

		ENGINE_API bool CanCalculateValidAABB(const class USkinnedMeshComponent* MeshComponent, const FTransform& LocalToWorld) const;

#### Content Browser

* FAssetPathDragDropOp has been removed. Use FAssetDragDropOp instead.

#### Material Editor

* SResetToDefaultPropertyEditor now takes a property handle in the constructor, instead of an FPropertyEditor.

### Gameplay Framework

* Several Asset Manager functions have been renamed, and the feature is now out of early access and ready for production.

* To take advantage of this feature, simply add the component to the new HiddenComponents list in APlayerController.

* These functions now only call the virtual GetPredictionData_Client() and GetPredictionData_Server() functions if the ClientPredictionData or ServerPredictionData members are null.

* Directly accessing USceneComponent::ComponentToWorld has been deprecated. Use GetComponentTransform() instead.USceneComponent::bWorldToComponentUpdated has been made private instead of protected.

### Physics

* Upgraded SkeletalMeshComponent's TeleportDistanceThreshold and TeleportRotationThreshold UProperties to use the brand new BlueprintGetter and BlueprintSetter attributes.

### Rendering

* USH are shader files meant to be #include by other. Only USF should have shader entry points. Plugins including shaders from Private directory of Engine or other parent plugin are on their own for backward compatibility.

#### Optimizations

* SeparateTranslucency is now renamed to AfterDOF translucency

### VR

* New:

    * The previous experimental PSVR SocialScreen implementation has been refactored and extended into this cross platform SpectatorScreen implementation.

    * I also moved HeadMountedDisplayFunctionLibrary into the HeadMountedDisplay module, and moved some types from it into HeadMountedDisplayTypes.h to reduce dependencies.

    * There are large opportunities for optimization by running the Spectator Screen at a lower framerate than the HMD.

* Updated SetUnrealControllerIdAndHandToDeviceMap function signature in the Steam VR plugin header file. Previously it took a hard coded array of 2 device id's, the array has been updated to use the max tracked device count const variable instead.

