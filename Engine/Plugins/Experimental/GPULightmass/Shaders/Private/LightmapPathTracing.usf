// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================================
PathTracingRayGenShader.usf: Reference path tracing
===============================================================================================*/

#define FORCE_ALL_MATERIALS_DIFFUSE 1

// Needs to be defined before the uniform buffer struct header is included, very unfortunately
struct FIrradianceCacheRecord
{
	float4 WorldPosition;
	float4 WorldNormal;
	uint4 Irradiance;
};

#include "/Engine/Private/Common.ush"
#include "/Engine/Private/PostProcessCommon.ush"
#include "/Engine/Private/RectLight.ush"
#include "/Engine/Private/RayTracing/RayTracingCommon.ush"
#include "/Engine/Private/RayTracing/RayTracingDirectionalLight.ush"
#include "/Engine/Private/RayTracing/RayTracingRectLight.ush"
#include "/Engine/Private/RayTracing/RayTracingSphereLight.ush"
#include "/Engine/Private/RayTracing/RayTracingSpotLight.ush"
#include "/Engine/Private/RayTracing/RayTracingPointLight.ush"

#include "/Engine/Private/PathTracing/PathTracingCommon.ush"
#include "/Engine/Private/RayTracing/RayTracingHitGroupCommon.ush"

#include "BatchedTiles.ush"
#include "/Engine/Private/PathTracing/Material/FirstBounceRayGuidingCommon.ush"

int NumRayGuidingTrialSamples;
RWTexture2D<uint> RayGuidingLuminance;
Texture2D<float> RayGuidingCDFX;
Texture2D<float> RayGuidingCDFY;

#include "/Engine/Private/PathTracing/Utilities/PathTracingRandomSequence.ush"
#include "/Engine/Private/PathTracing/Light/PathTracingLightSampling.ush"
#include "/Engine/Private/PathTracing/Material/PathTracingMaterialSampling.ush"

#include "IrradianceCachingCommon.ush"

#include "LightmapEncoding.ush"

int LastInvalidationFrame;
int NumTotalSamples;

RaytracingAccelerationStructure TLAS;

Texture2D<float4> GBufferWorldPosition;
Texture2D<float4> GBufferWorldNormal;
Texture2D<float4> GBufferShadingNormal;
RWTexture2D<float4> IrradianceAndSampleCount;
RWTexture2D<float4> SHDirectionality;
RWTexture2D<float4> SHCorrectionAndStationarySkyLightBentNormal;

RWTexture2D<float4> OutputTileAtlas;

void GenerateCosineNormalRay(
	float3 WorldPosition,
	float3 WorldNormal,
	inout RandomSequence RandSequence,
	out float3 RayOrigin,
	out float3 RayDirection,
	out float3 TangentDirection,
	out float RayTMin,
	out float RayTMax,
	out float RayPdf
)
{
	// Draw random variable
	float2 BufferSize = View.BufferSizeAndInvSize.xy;
	uint DummyVariable;
	float2 RandSample = RandomSequence_GenerateSample2D(RandSequence, DummyVariable);

	// Perform cosine-hemispherical sampling and convert to world-space
	float4 Direction_Tangent = CosineSampleHemisphere(RandSample);
	TangentDirection = Direction_Tangent;
	float3 Direction_World = TangentToWorld(Direction_Tangent.xyz, WorldNormal);

	RayOrigin = WorldPosition;
	RayDirection = Direction_World;
	RayTMin = 0.01;
	RayTMax = 1e20;
	RayPdf = 1.0f;
}

struct FThreeBandSHVectorFloat
{
	float4 V0;
	float4 V1;
	float V2;
};

struct FThreeBandSHVectorRGBFloat
{
	FThreeBandSHVectorFloat R;
	FThreeBandSHVectorFloat G;
	FThreeBandSHVectorFloat B;
};

FThreeBandSHVectorFloat SHBasisFunction3Float(float3 InputVector)
{
	FThreeBandSHVectorFloat Result;
	// These are derived from simplifying SHBasisFunction in C++
	Result.V0.x = 0.282095f; 
	Result.V0.y = -0.488603f * InputVector.y;
	Result.V0.z = 0.488603f * InputVector.z;
	Result.V0.w = -0.488603f * InputVector.x;

	half3 VectorSquared = InputVector * InputVector;
	Result.V1.x = 1.092548f * InputVector.x * InputVector.y;
	Result.V1.y = -1.092548f * InputVector.y * InputVector.z;
	Result.V1.z = 0.315392f * (3.0f * VectorSquared.z - 1.0f);
	Result.V1.w = -1.092548f * InputVector.x * InputVector.z;
	Result.V2 = 0.546274f * (VectorSquared.x - VectorSquared.y);

	return Result;
}

#define WorldPositionScalar 0.00001f

#ifndef USE_IRRADIANCE_CACHING
	#define USE_IRRADIANCE_CACHING 0
#endif

void PathTracingKernel(
	in uint RenderPassIndex,
	float3 WorldPosition,
	float3 ShadingNormal,
	inout RandomSequence RandSequence,
	inout uint SampleIndex,
	inout bool bIsValidSample,
	inout float3 RadianceValue,
	inout float3 RadianceDirection,
	inout float3 DirectLightingNEERadianceValue,
	inout float3 DirectLightingNEERadianceDirection,
	inout float4 PrimaryRandSample)
{
	bool IsUnidirectionalEnabled = true;
	bool IsNextEventEstimationEnabled = true;
	
#if USE_IRRADIANCE_CACHING
	bool bShouldEmitGeometryHitPoint = false;
	bool bShouldAccumulateToCacheRecord = false;
	uint NewEntrySize = 32;
	int NearestCacheEntryID = -1;
#endif
	
	float3 Irradiance = 0;
	
	float3 RayThroughput = 1.0;
	float RayPdf = 1.0;
	
	RayDesc Ray;
	Ray.Origin = WorldPosition + ShadingNormal;
	Ray.Direction = -ShadingNormal;
	Ray.TMin = -0.01f;
	Ray.TMax = 1.01f;
	
	FMaterialClosestHitPayload Payload = (FMaterialClosestHitPayload)0;
	Payload.RayCone = (FRayCone)0;
	Payload.WorldPos = WorldPosition;
	Payload.WorldNormal = ShadingNormal;
	Payload.Radiance = float3(0, 0, 0);
	Payload.BaseColor = float3(1, 1, 1);
	Payload.DiffuseColor = float3(1, 1, 1);
	Payload.SpecularColor = float3(0, 0, 0);
	Payload.Specular = 0;
	Payload.Roughness = 1;
	Payload.Metallic = 0;
	Payload.Ior = 1;
	Payload.CustomData = float4(0, 0, 0, 0);
	Payload.Opacity = 1;
	Payload.ShadingModelID = SHADINGMODELID_DEFAULT_LIT;
	Payload.BlendingMode = RAY_TRACING_BLEND_MODE_OPAQUE;
	Payload.PrimitiveLightingChannelMask = 0b111;
	Payload.HitT = 1.0f;
	Payload.SetFrontFace();
	uint RayFlags = 0;
	FRayCone RayCone = (FRayCone)0;

	float MaterialPdf = 0.0;
	FMaterialClosestHitPayload PrevMaterialPayload = (FMaterialClosestHitPayload)0;
	uint Bounces = 0;
	bool bIsNeeValid = true;
	
	FIrradianceCacheRecord IrradianceCachePrimaryGIHitPoint = (FIrradianceCacheRecord)0;	
	float RadianceProbe_Pdf = 1.0f / (2 * PI);
	
	while (Bounces < 32)
	{
		// Environment contribution
		if (Payload.IsMiss())
		{
			// WARNING: Until ray payload encodes NEE LightId, the execution depends on this ordering!
			uint SkyLightId = 0;
			float3 EnvironmentRadiance = 0.0;
			SkyLight_EvalLight(SkyLightId, Ray.Direction, Ray, EnvironmentRadiance);
			if (length(EnvironmentRadiance) > 0.0)
			{
				if (IsUnidirectionalEnabled)
				{
					// Apply NEE Pdf for correct MIS weight
					float MisWeight = 1.0;
					if (IsNextEventEstimationEnabled && Bounces > 0 && bIsNeeValid)
					{
						float NeePdf = 0.0;
						float3 LightUV = GetLightUV(SkyLightId, Ray, Payload);
						PdfLight(Ray, PrevMaterialPayload, SkyLightId, LightUV, NeePdf);
	
						// Note: MaterialPdf will need to be stored on the ray for an iterative solution
						MisWeight = MaterialPdf / (MaterialPdf + NeePdf);
					}
					
					if (Bounces > 1 || SceneLightsData.Mobility[SkyLightId] == 0)
					{
						Irradiance += EnvironmentRadiance * RayThroughput * MisWeight / RayPdf;
					}
				}
				// Record primary environment hits with NEE
				else if (IsNextEventEstimationEnabled && Bounces == 0)
				{
					if (Bounces > 1 || SceneLightsData.Mobility[SkyLightId] == 0)
					{
						Irradiance += EnvironmentRadiance * RayThroughput / RayPdf;
					}
				}
			}
			break;
		}
		
		if (Payload.IsHit() && !Payload.IsFrontFace() && Payload.ShadingModelID != SHADINGMODELID_TWOSIDED_FOLIAGE)
		{
			bIsValidSample = false;
			break;
		}
	
		// Emissive geometry contribution
		float3 Emission = GetMaterialEmission(Payload);
		if (any(Emission) > 0.0)
		{
			if (IsUnidirectionalEnabled)
			{
				// Apply NEE Pdf for correct MIS weight
				float MisWeight = 1.0;
				if (IsNextEventEstimationEnabled && Bounces > 0 && bIsNeeValid)
				{
					float NeePdf = 0.0;
					int LightId = GetLightId(Payload);
					float3 LightUV = GetLightUV(LightId, Ray, Payload);
					PdfLight(Ray, PrevMaterialPayload, LightId, LightUV, NeePdf);
	
					float MisWeight = MaterialPdf / (MaterialPdf + NeePdf);
				}
	
				Irradiance += Emission * RayThroughput * MisWeight / RayPdf;
			}
			// Record primary environment hits with NEE
			else if (IsNextEventEstimationEnabled && Bounces == 0)
			{
				Irradiance += Emission * RayThroughput / RayPdf;
			}
			break;
		}
		
	#if USE_IRRADIANCE_CACHING
		uint CoarseLevelSpacing = IrradianceCachingParameters.Spacing;
		uint DetailLevelSpacing = IrradianceCachingParameters.Spacing;
		
		if (Bounces >= 1 && Payload.HitT >= DetailLevelSpacing * IrradianceCachingParameters.CornerRejection && !bShouldAccumulateToCacheRecord)
		{
			bool bIrradianceQuerySuccessful = false;
			bool bGeometryQuerySuccessful = false;
			
			uint NearestRecordIndex = 0;
			float3 RecordIrradiance;
			float3 RecordWorldNormal;
			
			uint3 Key = EncodeVoxelKey(floor((Ray.Origin + Ray.Direction * Payload.HitT) / (Payload.HitT >= CoarseLevelSpacing ? CoarseLevelSpacing : DetailLevelSpacing)));
			uint NormalDirectionBits = EncodeNormalBits(Payload.WorldNormal);			
			uint HashKey = 0;
			HashKey = MurmurAdd( HashKey, Key.x );
			HashKey = MurmurAdd( HashKey, Key.y );
			HashKey = MurmurAdd( HashKey, Key.z );
			HashKey = MurmurAdd( HashKey, NormalDirectionBits );
			HashKey = MurmurAdd( HashKey, Payload.HitT >= CoarseLevelSpacing ? CoarseLevelSpacing : DetailLevelSpacing );
			uint Index;
			if (ICHashTableFind(HashKey, Index))
			{
				uint RecordIndex = IrradianceCachingParameters.RWHashToIndex[Index];
				FIrradianceCacheRecord Record = IrradianceCachingParameters.IrradianceCacheRecords[RecordIndex];
				if (Record.Irradiance.w > IrradianceCachingParameters.Quality)
				{
					bIrradianceQuerySuccessful = true;
					
					RecordIrradiance = asfloat(Record.Irradiance.xyz) / Record.Irradiance.w;
				}
				
				bGeometryQuerySuccessful = true;
				RecordWorldNormal = Record.WorldNormal.xyz;
				NearestRecordIndex = RecordIndex;
			}
	
			if (bIrradianceQuerySuccessful)
			{
				// Successful query. Terminate path immediately. Can happen when accumulating for IC entries.
				Irradiance += RecordIrradiance * RayThroughput / RayPdf;
				break;
			}
			else
			{
				// Failed query.
				if (Bounces == 1)
				{
					if (!bGeometryQuerySuccessful)
					{
						bShouldEmitGeometryHitPoint = true;
						IrradianceCachePrimaryGIHitPoint.WorldPosition.xyz = Ray.Origin + Ray.Direction * Payload.HitT;
						IrradianceCachePrimaryGIHitPoint.WorldNormal.xyz = Payload.WorldNormal;
						NewEntrySize = Payload.HitT >= CoarseLevelSpacing ? CoarseLevelSpacing : DetailLevelSpacing;
					}
					else
					{
						bShouldAccumulateToCacheRecord = true;
						NearestCacheEntryID = NearestRecordIndex;
					}
				}
			}
		}
	#endif
	
		Bounces = Bounces + 1;
		// Update origin
		Ray.Origin = Ray.Origin + Ray.Direction * Payload.HitT;
		FMaterialClosestHitPayload RayHitInfo = Payload; 
	
		bIsNeeValid = IsNeeValidMaterial(RayHitInfo);

		// Perform next-event estimation
		if (IsNextEventEstimationEnabled && bIsNeeValid)
		{
			int LightId;
			float3 LightUV;
			float NeePdf = 0.0;
			float4 RandSample = RandomSequence_GenerateSample4D(RandSequence, SampleIndex);
			SampleLight(Ray, RayHitInfo, RandSample, LightId, LightUV, NeePdf);
	
			// Fire visibility ray
			if (NeePdf > 0.0)
			{
				RayDesc LightRay;
	
				GenerateLightRay(Ray, LightId, LightUV, LightRay);
				ApplyPositionBias(LightRay, Payload.WorldNormal, 0.01f);

				const uint RayFlags = RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH | RAY_FLAG_SKIP_CLOSEST_HIT_SHADER;
				const uint InstanceInclusionMask = RAY_TRACING_MASK_SHADOW;

				FMinimalPayload NeePayload = TraceVisibilityRay(
					TLAS,
					RayFlags,
					InstanceInclusionMask,
					uint2(0, 0),
					LightRay);
	
				if (NeePayload.IsMiss())
				{
					FMaterialClosestHitPayload RayHitInfo = Payload; 
				#if 0
					// DEBUG: Validate NEE PDF
					float NeePdfTmp;
					PdfLight(Ray, RayHitInfo, LightId, LightUV, NeePdfTmp);
					if (abs(NeePdf - NeePdfTmp) > 0.0001)
					{
						Irradiance = float3(-10, -10, -10);
						break;
					}
				#endif
					// Evaluate radiance
					float3 Radiance;
					EvalLight(LightId, LightUV, LightRay, Radiance);
	
					// Evaluate material
					float Ior1 = 1.0;
					float3 MaterialThroughput;
					float MaterialEvalPdf = 0.0;
					EvalMaterial(Ray.Direction, LightRay.Direction, RayHitInfo, Ior1, Bounces == 1, MaterialThroughput, MaterialEvalPdf);
	
					// Apply material Pdf for correct MIS weight
					float MisWeight = 1.0;
					if (IsUnidirectionalEnabled && IsPhysicalLight(LightId))
					{
					#if 0
						// DEBUG: Validate Material PDF
						float MaterialPdfTmp;
						PdfMaterial(Ray.Direction, LightRay, RayHitInfo, Ior1, Bounces == 1, MaterialPdfTmp);
						if (abs(MaterialPdf - MaterialPdfTmp) > 0.0001)
						{
							MaterialThroughput *= -1.f;
						}
					#endif
	
						MisWeight = NeePdf / (NeePdf + MaterialEvalPdf);
					}
	
					// Record the contribution
					if (Bounces == 1 && SceneLightsData.Mobility[LightId] == 0)
					{
						DirectLightingNEERadianceValue += Radiance * MaterialThroughput * RayThroughput * MisWeight / (NeePdf * RayPdf);
						DirectLightingNEERadianceDirection = LightRay.Direction;
					}
					else if (Bounces > 1 || SceneLightsData.Mobility[LightId] == 0)  
					{
						Irradiance += Radiance * MaterialThroughput * RayThroughput * MisWeight / (NeePdf * RayPdf);
					}
				}
			}
		}
	
		// Sample material
		float Ior1 = 1.0;
		float3 Direction;
		float3 Throughput;
		float4 RandSample = RandomSequence_GenerateSample4D(RandSequence, SampleIndex);
		float SignedPositionBias;
		float SamplePdf;
		SampleMaterial(Ray.Direction, RayHitInfo, Ior1, RandSample, Bounces == 1, Direction, Throughput, SamplePdf, SignedPositionBias);
		if (SamplePdf == 0.0)
		{
			break;
		}
	
		PdfMaterial(Ray.Direction, Direction, Payload, Ior1, Bounces == 1, MaterialPdf);
		// Debug: Evaluation of a candidate sample direction should maintain energy balance with pathspace MIS
		// EvalMaterial(Ray.Direction, Direction, RayHitInfo, Ior1, Bounces == 1, Throughput, MaterialPdf);
		// SamplePdf = MaterialPdf;

		// Update ray
		Ray.Direction = Direction;
		ApplyPositionBias(Ray, SignedPositionBias * Payload.WorldNormal, 0.01f);
		RayThroughput *= Throughput;
		RayPdf *= SamplePdf;
	
		// Russian roulette
		float PathEnergy = max(max(RayThroughput.x, RayThroughput.y), RayThroughput.z);
		float EnergyThreshold = 1.0; 
		if (PathEnergy < EnergyThreshold && 
		#if !USE_IRRADIANCE_CACHING
			Bounces > 4
		#else
			// A starting bounce of 4 is too early for relatively high reflectance scenes (0.8), which generates extreme variance that gets rejected by firefly rejection
			// and shows as missing energy. IC effectively extends the path so it is less subject to this effect. However due to retrace around corners it shows as contrast between cached and non-cached paths.
			// delay RR to a higher bounce numbmer
			Bounces > 16
		#endif
		)
		{
			float Q = 1.0 - PathEnergy;
			if (RandomSequence_GenerateSample1D(RandSequence, SampleIndex) < Q)
			{
				break;
			}
	
			RayThroughput /= (1.0 - Q);
		}
	
		// Firefly rejection
		PathEnergy = max(max(RayThroughput.x, RayThroughput.y), RayThroughput.z);
		float FireflyThreshold = 50.0;
		if (PathEnergy / RayPdf > FireflyThreshold)
		{
			break;
		}
	
		if (dot(Ray.Direction, Payload.WorldNormal) < 0) 
		{
			bIsValidSample = false;
			break;
		}
		
		if (Bounces == 1)
		{
			RadianceDirection = Ray.Direction;
			RadianceProbe_Pdf = SamplePdf;
			PrimaryRandSample = RandSample;
		}
	
		// Trace again
		//#dxr-todo: check ray flags when hit shaders are supported
		Ray.TMin = 0.01;
		Ray.TMax = 1e20;
		
		const uint RayFlags = 0; //RAY_FLAG_CULL_BACK_FACING_TRIANGLES;
		const uint InstanceInclusionMask = RAY_TRACING_MASK_ALL;
		const bool bDisableSkyLightContribution = false;
		const bool bIgnoreTranslucentMaterials = true;

		PrevMaterialPayload = Payload;
		Payload = TraceMaterialRay(
			TLAS,
			RayFlags,
			InstanceInclusionMask,
			Ray,
			RayCone,
			uint2(0, 0),
			bDisableSkyLightContribution,
			bIgnoreTranslucentMaterials);
	}

#if USE_IRRADIANCE_CACHING
	if(bIsValidSample)
	{
		if(bShouldEmitGeometryHitPoint)
		{
			EmitGeometryHitPoint(IrradianceCachePrimaryGIHitPoint, NewEntrySize);
		}
		
		if(bShouldAccumulateToCacheRecord)
		{
			float3 IrradianceToAccumulate = Irradiance * RadianceProbe_Pdf; // Revert the radiance probe pdf as we're caching the first bounce outgoing radiance
			ATOMIC_ADD_FLOAT(IrradianceCachingParameters.IrradianceCacheRecords[NearestCacheEntryID].Irradiance.r, IrradianceToAccumulate.r);
			ATOMIC_ADD_FLOAT(IrradianceCachingParameters.IrradianceCacheRecords[NearestCacheEntryID].Irradiance.g, IrradianceToAccumulate.g);
			ATOMIC_ADD_FLOAT(IrradianceCachingParameters.IrradianceCacheRecords[NearestCacheEntryID].Irradiance.b, IrradianceToAccumulate.b);
			InterlockedAdd(IrradianceCachingParameters.IrradianceCacheRecords[NearestCacheEntryID].Irradiance.a, 1);
		}
	}
#endif
	
	RadianceValue = Irradiance;
}

[shader("raygeneration")]
void LightmapPathTracingMainRG()
{
	uint2 BatchedLaunchIndex = DispatchRaysIndex().xy;

	uint2 LaunchIndex = uint2(BatchedLaunchIndex.x % GPreviewLightmapPhysicalTileSize, BatchedLaunchIndex.y);
	int TileIndex = BatchedLaunchIndex.x / GPreviewLightmapPhysicalTileSize;
	uint2 TexelIndexInPool = LaunchIndex + BatchedTiles[TileIndex].WorkingSetPosition;
	uint2 TexelIndexInScratch = LaunchIndex + BatchedTiles[TileIndex].ScratchPosition;

	float3 WorldPosition = GBufferWorldPosition[TexelIndexInScratch].xyz / WorldPositionScalar;
	float3 WorldNormal = GBufferWorldNormal[TexelIndexInScratch].xyz;
	float3 ShadingNormal = GBufferShadingNormal[TexelIndexInScratch].xyz;

	bool bIsValidSample = true;
	
	if (GBufferWorldPosition[TexelIndexInScratch].w == 0.0f) bIsValidSample = false;
	
	if (NumTotalSamples <= 0 || (NumTotalSamples > 0 && BatchedTiles[TileIndex].RenderPassIndex < NumTotalSamples - 1))
	{
		if (bIsValidSample)
		{			
			// Needs a seed that is only related to position in virtual space to avoid seams due to per-tile calculation
			uint2 VirtualTextureSpacePosition = BatchedTiles[TileIndex].VirtualTilePosition + LaunchIndex - uint2(2, 2);
			uint Seed = VirtualTextureSpacePosition.y * BatchedTiles[TileIndex].LightmapSize.x + VirtualTextureSpacePosition.x;
					
			float4 PrimaryRandSample = float4(-1, -1, -1, -1);
			
			{
				RandomSequence RandSequence;
				RandomSequence_Initialize(RandSequence, Seed, 
				#if USE_FIRST_BOUNCE_RAY_GUIDING
					BatchedTiles[TileIndex].RenderPassIndex >= NumRayGuidingTrialSamples ? 
						(BatchedTiles[TileIndex].RenderPassIndex - NumRayGuidingTrialSamples) : 
				#endif
						(BatchedTiles[TileIndex].RenderPassIndex)
				);
				
				RandSequence.Type = 2;
				RandSequence.HaltonDimensionIndex = 2; // 0 and 1 are used for image plane sampling (lightmap GBuffer)
				uint SampleIndex = 2;

				float3 RadianceValue = 0;
				float3 RadianceDirection = 0;				
				float3 DirectLightingNEERadianceValue = 0;
				float3 DirectLightingNEERadianceDirection = 0;
				
				if (bIsValidSample)
				{
					PathTracingKernel(
						BatchedTiles[TileIndex].RenderPassIndex,
						WorldPosition,
						WorldNormal,
						RandSequence,
						SampleIndex,
						bIsValidSample,
						RadianceValue,
						RadianceDirection,
						DirectLightingNEERadianceValue,
						DirectLightingNEERadianceDirection,
						PrimaryRandSample
					);
				}
				
				if (any(isnan(RadianceValue)) || any(RadianceValue < 0) || any(isinf(RadianceValue)))
				{
					bIsValidSample = false;
				}
				
				if (bIsValidSample)
				{
					#if USE_FIRST_BOUNCE_RAY_GUIDING						
						if (BatchedTiles[TileIndex].RenderPassIndex < NumRayGuidingTrialSamples)
						{
							int2 ClusterPosition = clamp((int2)LaunchIndex - int2(2, 2), int2(0, 0), int2(63, 63)) / TEXEL_CLUSTER_SIZE;
							float2 JitteredBin = PrimaryRandSample * DIRECTIONAL_BINS_ONE_DIM;// - float2(0.5f, 0.5f) + PrimaryRandSample.zw;
							int2 PositionInBin = clamp(JitteredBin, float2(0, 0), float2(DIRECTIONAL_BINS_ONE_DIM - 1, DIRECTIONAL_BINS_ONE_DIM - 1));
							int2 FinalPosition = ClusterPosition * DIRECTIONAL_BINS_ONE_DIM + PositionInBin;
							float Illuminance = Luminance(RadianceValue) * saturate(dot(RadianceDirection, ShadingNormal));
							// For positive floats we can cast them to uint and use atomic max directly
							InterlockedMax(RayGuidingLuminance[BatchedTiles[TileIndex].WorkingSetPosition / GPreviewLightmapPhysicalTileSize * CDF_TILE_SIZE + FinalPosition], asuint(max(Illuminance, 0)));
						}
					
						if (BatchedTiles[TileIndex].RenderPassIndex == NumRayGuidingTrialSamples) 
						{
							IrradianceAndSampleCount[TexelIndexInPool]= float4(0, 0, 0, 0);
							SHDirectionality[TexelIndexInPool] = float4(0, 0, 0, 0);
							SHCorrectionAndStationarySkyLightBentNormal[TexelIndexInPool].x = 0;
						}
					#endif
					
					{
						FL2SHAndCorrection SH = (FL2SHAndCorrection)0;
						
						float TangentZ = saturate(dot(RadianceDirection, ShadingNormal));
						SH.AddIncomingRadiance(Luminance(RadianceValue), RadianceDirection, TangentZ);
						
						IrradianceAndSampleCount[TexelIndexInPool].rgb += float3(RadianceValue * TangentZ / PI);
						SHDirectionality[TexelIndexInPool] += SH.L2SHCoefficients;					
						SHCorrectionAndStationarySkyLightBentNormal[TexelIndexInPool].x += SH.Correction;
					}
					
					{
						FL2SHAndCorrection SH = (FL2SHAndCorrection)0;
						
						float TangentZ = saturate(dot(DirectLightingNEERadianceDirection, ShadingNormal));
						SH.AddIncomingRadiance(Luminance(DirectLightingNEERadianceValue), DirectLightingNEERadianceDirection, TangentZ);
						
						IrradianceAndSampleCount[TexelIndexInPool].rgb += float3(DirectLightingNEERadianceValue * TangentZ / PI);
						SHDirectionality[TexelIndexInPool] += SH.L2SHCoefficients;					
						SHCorrectionAndStationarySkyLightBentNormal[TexelIndexInPool].x += SH.Correction;
					}
				}
			}
		}

		uint SampleCount = asuint(IrradianceAndSampleCount[TexelIndexInPool].w);

#if 0 // Smooth invalidation. This path is currently disabled to avoid inconsistency when saving baked results.
		if (BatchedTiles[TileIndex].FrameIndex < LastInvalidationFrame)
		{
			if (SampleCount > 0)
			{
				float L = Luminance(IrradianceAndSampleCount[TexelIndexInPool].rgb / SampleCount);
				int HistoryWeight = 2.0f / (1.0f + L * L);
				IrradianceAndSampleCount[TexelIndexInPool].rgb = IrradianceAndSampleCount[TexelIndexInPool].rgb / SampleCount * HistoryWeight;
				SHDirectionality[TexelIndexInPool] = SHDirectionality[TexelIndexInPool] / SampleCount * HistoryWeight;
				SampleCount = HistoryWeight;
			}
		}
#endif
		
		if (bIsValidSample)
			SampleCount++;
		
		IrradianceAndSampleCount[TexelIndexInPool].a = asfloat(SampleCount);
	}
			
	#if 0 // Debug: Ray guiding PDF visualization
		{
			int2 ClusterPosition = clamp((int2)LaunchIndex - int2(2, 2), int2(0, 0), int2(63, 63)) / TEXEL_CLUSTER_SIZE;
			int2 PositionInBin = clamp((int2)LaunchIndex - int2(2, 2), int2(0, 0), int2(63, 63)) % DIRECTIONAL_BINS_ONE_DIM;
			int2 FinalPosition = ClusterPosition * DIRECTIONAL_BINS_ONE_DIM + PositionInBin;

			IrradianceAndSampleCount[TexelIndexInPool].rgb = (
				asfloat(RayGuidingCDF[BatchedTiles[TileIndex].WorkingSetPosition / GPreviewLightmapPhysicalTileSize * CDF_TILE_SIZE + LaunchIndex]).xxx / (1 + asuint(IrradianceAndSampleCount[TexelIndexInPool].a))
			);
			
			SHDirectionality[TexelIndexInPool] = float4(1, 0, 0, 0);					
			SHCorrectionAndStationarySkyLightBentNormal[TexelIndexInPool].x = 1;
		}
	#endif

#if 0 // Debug: GBuffer shading normal visualization	
	{
		const half LogBlackPoint = 0.01858136;
	
		float3 ShadingNormal = GBufferShadingNormal[TexelIndexInScratch].xyz * 0.5f + 0.5f;
		
		IrradianceAndSampleCount[TexelIndexInPool].rgb = ShadingNormal;
		IrradianceAndSampleCount[TexelIndexInPool].a = asfloat(1);
		
		SHDirectionality[TexelIndexInPool] = float4(1, 0, 0, 0);					
		SHCorrectionAndStationarySkyLightBentNormal[TexelIndexInPool].x = 1;
	}
#endif
}

#include "BrickAllocationDefs.ush"

uint FrameNumber;
float4 VolumeMin;
float4 VolumeSize;
int3 IndirectionTextureDim;
Texture3D<uint4> IndirectionTexture;
Buffer<uint4> BrickRequests;
int NumTotalBricks;
int BrickBatchOffset;

RWTexture3D<float4> AmbientVector;
RWTexture3D<float4> SHCoefficients0R;
RWTexture3D<float4> SHCoefficients1R;
RWTexture3D<float4> SHCoefficients0G;
RWTexture3D<float4> SHCoefficients1G;
RWTexture3D<float4> SHCoefficients0B;
RWTexture3D<float4> SHCoefficients1B;

uint MortonEncode3(uint3 Pixel)
{
	uint Morton = MortonCode3(Pixel.x & 0xFF) | (MortonCode3(Pixel.y & 0xFF) << 1) | (MortonCode3(Pixel.z & 0xFF) << 1);
	return Morton;
}

[shader("raygeneration")]
void VolumetricLightmapPathTracingMainRG()
{
	uint BrickVolumeSize = 5 * 5 * 5;
	uint BrickIndex = DispatchRaysIndex().x / BrickVolumeSize + BrickBatchOffset;
	if (BrickIndex >= NumTotalBricks) return;
	uint CellIndex = DispatchRaysIndex().x % BrickVolumeSize;
	uint3 CellPosInBrick = ComputeBrickLayoutPosition(CellIndex, uint3(5, 5, 5));
	
	bool bIsValidSample = true;	
	
	int3 CellPosInVLM = (BrickRequests[BrickIndex].xyz * 4 + CellPosInBrick) * BrickRequests[BrickIndex].w;	
	uint Seed = ComputeBrickLinearAddress(CellPosInVLM, IndirectionTextureDim * 4);
	
	#if 0
		float3 Jitter = RandomSequence_GenerateSample3D(RandSequence, SampleIndex);
	#else
		float3 RandSample = float3(
			Halton(MortonEncode3(CellPosInVLM) + FrameNumber / 2, 2), 
			Halton(MortonEncode3(CellPosInVLM) + FrameNumber / 2, 3),
			Halton(MortonEncode3(CellPosInVLM) + FrameNumber / 2, 5)
		);
		float3 Jitter = RandSample;
	#endif		
	
	float3 JitteredCellPosInVLM = (BrickRequests[BrickIndex].xyz * 4 + CellPosInBrick + Jitter - float3(0.5, 0.5, 0.5)) * BrickRequests[BrickIndex].w;	
	float DetailCellSize = VolumeSize.xyz / IndirectionTextureDim / 4;
	float3 WorldPosition = VolumeMin + DetailCellSize * JitteredCellPosInVLM;
	float3 ShadingNormal = float3(0, 0, (FrameNumber % 2 == 0) ? 1 : -1);

	float3 RadianceValue = 0;
	float3 RadianceDirection = 0;				
	float3 DirectLightingNEERadianceValue = 0;
	float3 DirectLightingNEERadianceDirection = 0;
	float4 PrimaryRandSample;

	if (bIsValidSample)
	{
		RandomSequence RandSequence;
		RandomSequence_Initialize(RandSequence, Seed, FrameNumber / 2);	
		RandSequence.Type = 2;
		RandSequence.HaltonDimensionIndex = 3;
		uint SampleIndex = 4;
		
		PathTracingKernel(
			FrameNumber,
			WorldPosition,
			ShadingNormal,
			RandSequence,
			SampleIndex,
			bIsValidSample,
			RadianceValue,
			RadianceDirection,
			DirectLightingNEERadianceValue,
			DirectLightingNEERadianceDirection,
			PrimaryRandSample);
	}
	
	// Every even sample is upper hemisphere, odd sample is lower hemisphere
	// SampleCount stored is twice as the actual full sphere sample count
	RadianceValue *= 2;
	DirectLightingNEERadianceValue *= 2;

	if (any(isnan(RadianceValue)) || any(RadianceValue < 0))
	{
		bIsValidSample = false;
	}

	uint PaddedBrickSize = 4 + 1;
	uint3 VoxelPos = ComputeBrickLayoutPosition(BrickIndex, uint3(256, 256, 256)) * PaddedBrickSize + CellPosInBrick;

	if (FrameNumber == 0)
	{
		AmbientVector[VoxelPos] = float4(0, 0, 0, 0);
		
		SHCoefficients0R[VoxelPos] = float4(0, 0, 0, 0);
		SHCoefficients1R[VoxelPos] = float4(0, 0, 0, 0);
		
		SHCoefficients0G[VoxelPos] = float4(0, 0, 0, 0);
		SHCoefficients1G[VoxelPos] = float4(0, 0, 0, 0);		
		
		SHCoefficients0B[VoxelPos] = float4(0, 0, 0, 0);
		SHCoefficients1B[VoxelPos] = float4(0, 0, 0, 0);
	}
	
	if (bIsValidSample)
	{
		uint SampleCount = asuint(AmbientVector[VoxelPos].w);
		
		{
			FThreeBandSHVectorRGBFloat SH;
			SH.R.V0 = SHBasisFunction3Float(RadianceDirection).V0 * RadianceValue.r;
			SH.R.V1 = SHBasisFunction3Float(RadianceDirection).V1 * RadianceValue.r;
			SH.R.V2 = SHBasisFunction3Float(RadianceDirection).V2 * RadianceValue.r;
			SH.G.V0 = SHBasisFunction3Float(RadianceDirection).V0 * RadianceValue.g;
			SH.G.V1 = SHBasisFunction3Float(RadianceDirection).V1 * RadianceValue.g;
			SH.G.V2 = SHBasisFunction3Float(RadianceDirection).V2 * RadianceValue.g;
			SH.B.V0 = SHBasisFunction3Float(RadianceDirection).V0 * RadianceValue.b;
			SH.B.V1 = SHBasisFunction3Float(RadianceDirection).V1 * RadianceValue.b;
			SH.B.V2 = SHBasisFunction3Float(RadianceDirection).V2 * RadianceValue.b;
			
			AmbientVector[VoxelPos].x += SH.R.V0.x;
			AmbientVector[VoxelPos].y += SH.G.V0.x;
			AmbientVector[VoxelPos].z += SH.B.V0.x;
			
			SHCoefficients0R[VoxelPos] += float4(SH.R.V0.yzw, SH.R.V1.x);
			SHCoefficients1R[VoxelPos] += float4(SH.R.V1.yzw, SH.R.V2);
			
			SHCoefficients0G[VoxelPos] += float4(SH.G.V0.yzw, SH.G.V1.x);
			SHCoefficients1G[VoxelPos] += float4(SH.G.V1.yzw, SH.G.V2);		
			
			SHCoefficients0B[VoxelPos] += float4(SH.B.V0.yzw, SH.B.V1.x);
			SHCoefficients1B[VoxelPos] += float4(SH.B.V1.yzw, SH.B.V2);
		}
		
		{
			FThreeBandSHVectorRGBFloat SH;
			SH.R.V0 = SHBasisFunction3Float(DirectLightingNEERadianceDirection).V0 * DirectLightingNEERadianceValue.r;
			SH.R.V1 = SHBasisFunction3Float(DirectLightingNEERadianceDirection).V1 * DirectLightingNEERadianceValue.r;
			SH.R.V2 = SHBasisFunction3Float(DirectLightingNEERadianceDirection).V2 * DirectLightingNEERadianceValue.r;
			SH.G.V0 = SHBasisFunction3Float(DirectLightingNEERadianceDirection).V0 * DirectLightingNEERadianceValue.g;
			SH.G.V1 = SHBasisFunction3Float(DirectLightingNEERadianceDirection).V1 * DirectLightingNEERadianceValue.g;
			SH.G.V2 = SHBasisFunction3Float(DirectLightingNEERadianceDirection).V2 * DirectLightingNEERadianceValue.g;
			SH.B.V0 = SHBasisFunction3Float(DirectLightingNEERadianceDirection).V0 * DirectLightingNEERadianceValue.b;
			SH.B.V1 = SHBasisFunction3Float(DirectLightingNEERadianceDirection).V1 * DirectLightingNEERadianceValue.b;
			SH.B.V2 = SHBasisFunction3Float(DirectLightingNEERadianceDirection).V2 * DirectLightingNEERadianceValue.b;
			
			AmbientVector[VoxelPos].x += SH.R.V0.x;
			AmbientVector[VoxelPos].y += SH.G.V0.x;
			AmbientVector[VoxelPos].z += SH.B.V0.x;
			
			SHCoefficients0R[VoxelPos] += float4(SH.R.V0.yzw, SH.R.V1.x);
			SHCoefficients1R[VoxelPos] += float4(SH.R.V1.yzw, SH.R.V2);
			
			SHCoefficients0G[VoxelPos] += float4(SH.G.V0.yzw, SH.G.V1.x);
			SHCoefficients1G[VoxelPos] += float4(SH.G.V1.yzw, SH.G.V2);		
			
			SHCoefficients0B[VoxelPos] += float4(SH.B.V0.yzw, SH.B.V1.x);
			SHCoefficients1B[VoxelPos] += float4(SH.B.V1.yzw, SH.B.V2);
		}
		
		AmbientVector[VoxelPos].w = asfloat(SampleCount + 1);
	}
}

// Must match C++
struct FLightShaderConstants
{
	float3 Position;
	float  InvRadius;
	float3 Color;
	float  FalloffExponent;
	float3 Direction;
	float  SpecularScale;
	float3 Tangent;
	float  SourceRadius;
	float2 SpotAngles;
	float  SoftSourceRadius;
	float  SourceLength;
	float  RectLightBarnCosAngle;
	float  RectLightBarnLength;
	
	void FillLightShaderParameters(inout FLightShaderParameters LightShaderParameters)
	{
		LightShaderParameters.Position = Position;
		LightShaderParameters.InvRadius = InvRadius;
		LightShaderParameters.Color = Color;
		LightShaderParameters.FalloffExponent = FalloffExponent;
		LightShaderParameters.Direction = Direction;
		LightShaderParameters.SpecularScale = SpecularScale;
		LightShaderParameters.Tangent = Tangent;
		LightShaderParameters.SourceRadius = SourceRadius;
		LightShaderParameters.SpotAngles = SpotAngles;
		LightShaderParameters.SoftSourceRadius = SoftSourceRadius;
		LightShaderParameters.SourceLength = SourceLength;
		LightShaderParameters.RectLightBarnCosAngle = RectLightBarnCosAngle;
		LightShaderParameters.RectLightBarnLength = RectLightBarnLength;
	}
};

Buffer<int> LightTypeArray;
Buffer<int> ChannelIndexArray;
Buffer<int> LightSampleIndexArray;
StructuredBuffer<FLightShaderConstants> LightShaderParametersArray;
RWTexture2D<float4> ShadowMask;
RWTexture2D<float4> ShadowMaskSampleCount;

#define LIGHT_TYPE_DIRECTIONAL		0 
#define LIGHT_TYPE_POINT			1 
#define LIGHT_TYPE_SPOT				2 
#define LIGHT_TYPE_RECT				3 
#define LIGHT_TYPE_MAX				4 

bool GenerateOcclusionRay(
	int LightType,
	FLightShaderParameters LightParameters,
	float3 WorldPosition,
	float3 WorldNormal,
	float2 RandSample,
	inout float3 RayOrigin,
	inout float3 RayDirection,
	inout float RayTMin,
	inout float RayTMax
)
{
	if (LightType == LIGHT_TYPE_DIRECTIONAL)
	{
		GenerateDirectionalLightOcclusionRay(
			LightParameters,
			WorldPosition, WorldNormal,
			RandSample,
			/* out */ RayOrigin,
			/* out */ RayDirection,
			/* out */ RayTMin,
			/* out */ RayTMax);
	}
	else if (LightType == LIGHT_TYPE_POINT)
	{
		if (LightParameters.SourceRadius == 0)
		{
			return GeneratePointLightOcclusionRay(
				LightParameters,
				WorldPosition, WorldNormal,
				RandSample,
				/* out */ RayOrigin,
				/* out */ RayDirection,
				/* out */ RayTMin,
				/* out */ RayTMax);
		}
		else
		{
			float RayPdf;
			return GenerateSphereLightOcclusionRayWithSolidAngleSampling(
				LightParameters,
				WorldPosition, WorldNormal,
				RandSample,
				/* out */ RayOrigin,
				/* out */ RayDirection,
				/* out */ RayTMin,
				/* out */ RayTMax,
				/* out */ RayPdf);
		}
	}
	else if (LightType == LIGHT_TYPE_SPOT)
	{
		return GenerateSpotLightOcclusionRay(
			LightParameters,
			WorldPosition, WorldNormal,
			RandSample,
			/* out */ RayOrigin,
			/* out */ RayDirection,
			/* out */ RayTMin,
			/* out */ RayTMax);
	}
	else if (LightType == LIGHT_TYPE_RECT)
	{
		float RayPdf = 0.0;
		return GenerateRectLightOcclusionRay(
			LightParameters,
			WorldPosition, WorldNormal,
			RandSample,
			/* out */ RayOrigin,
			/* out */ RayDirection,
			/* out */ RayTMin,
			/* out */ RayTMax,
			/* out */ RayPdf);
	}

	return true;
}

[shader("raygeneration")]
void StationaryLightShadowTracingMainRG()
{
	uint2 BatchedLaunchIndex = DispatchRaysIndex().xy;

	uint2 LaunchIndex = uint2(BatchedLaunchIndex.x % GPreviewLightmapPhysicalTileSize, BatchedLaunchIndex.y);
	int TileIndex = BatchedLaunchIndex.x / GPreviewLightmapPhysicalTileSize;
	uint2 TexelIndexInPool = LaunchIndex + BatchedTiles[TileIndex].WorkingSetPosition;
	uint2 TexelIndexInScratch = LaunchIndex + BatchedTiles[TileIndex].ScratchPosition;

	int ChannelIndex = ChannelIndexArray[TileIndex];

	bool bIsValidSample = true;
	
	float3 WorldPosition = GBufferWorldPosition[TexelIndexInScratch].xyz / WorldPositionScalar;	
	if (GBufferWorldPosition[TexelIndexInScratch].w == 0.0f)
	{
		bIsValidSample = false;
	}
	
	if (bIsValidSample)
	{
		float3 WorldNormal = GBufferWorldNormal[TexelIndexInScratch].xyz;
		float3 ShadingNormal = GBufferShadingNormal[TexelIndexInScratch].xyz;
		
		// Needs a seed that is only related to position in virtual space to avoid seams due to per-tile calculation
		uint2 VirtualTextureSpacePosition = BatchedTiles[TileIndex].VirtualTilePosition + LaunchIndex - uint2(2, 2);
		uint Seed = VirtualTextureSpacePosition.y * BatchedTiles[TileIndex].LightmapSize.x + VirtualTextureSpacePosition.x;
		
		int LightType = LightTypeArray[TileIndex];
		FLightShaderParameters LightParameters;
		LightShaderParametersArray[TileIndex].FillLightShaderParameters(LightParameters);
		
		{
			float2 RandSample = float2(
				Halton(IntegerHash(Seed) + LightSampleIndexArray[TileIndex], 5), 
				Halton(IntegerHash(Seed) + LightSampleIndexArray[TileIndex], 7)
			);
			
			RayDesc Ray;
			bIsValidSample &= GenerateOcclusionRay(
				LightType,
				LightParameters,
				WorldPosition, WorldNormal,
				RandSample,
				/* out */ Ray.Origin,
				/* out */ Ray.Direction,
				/* out */ Ray.TMin,
				/* out */ Ray.TMax);
				
			Ray.Origin += Ray.Direction * 0.01f;
				
			if (bIsValidSample)
			{
				uint RayFlags = RAY_FLAG_SKIP_CLOSEST_HIT_SHADER | RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH;

				FMinimalPayload MinimalPayload = TraceVisibilityRay(
					TLAS,
					RayFlags,
					RAY_TRACING_MASK_SHADOW,
					uint2(0, 0),
					Ray);
				
				uint Visibility = asuint(ShadowMask[TexelIndexInPool][ChannelIndex]);
				uint SampleCount = asuint(ShadowMaskSampleCount[TexelIndexInPool][ChannelIndex]);
				Visibility += MinimalPayload.IsMiss() ? 1 : 0;
				SampleCount++;
				ShadowMask[TexelIndexInPool][ChannelIndex] = asfloat(Visibility);
				ShadowMaskSampleCount[TexelIndexInPool][ChannelIndex] = asfloat(SampleCount);
			}
		}
	}
}
