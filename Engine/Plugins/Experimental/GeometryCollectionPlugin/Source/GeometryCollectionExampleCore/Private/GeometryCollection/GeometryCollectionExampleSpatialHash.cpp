// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

#include "GeometryCollection/GeometryCollectionExampleSpatialHash.h"

#include "Chaos/SpatialHash.h"
#include "Chaos/Vector.h"
#include "Chaos/UniformGrid.h"

using namespace Chaos;

namespace GeometryCollectionExample
{
	TArray<TVector<float, 3>> Particles_1000 = {
		TVector<float, 3>(242.847260, 481.256165, -13.585100),
		TVector<float, 3>(435.885071, -282.438385, 139.666855),
		TVector<float, 3>(-445.298431, -480.780701, 249.928925),
		TVector<float, 3>(-366.115631, 188.174911, -100.105080),
		TVector<float, 3>(-39.497826, -355.566345, 410.021149),
		TVector<float, 3>(453.887482, 342.295929, -386.697174),
		TVector<float, 3>(-166.218842, 235.897385, 48.100235),
		TVector<float, 3>(-135.756531, -115.386566, 135.813873),
		TVector<float, 3>(-209.570068, -405.279755, 92.008408),
		TVector<float, 3>(116.359421, 442.871704, -340.068665),
		TVector<float, 3>(-199.028992, -455.636810, 149.907349),
		TVector<float, 3>(392.379395, -68.763680, -214.853882),
		TVector<float, 3>(424.941986, 118.032127, 241.568237),
		TVector<float, 3>(-138.925217, 207.964340, -467.774963),
		TVector<float, 3>(-293.256439, 327.879272, 431.063690),
		TVector<float, 3>(-443.070923, -242.276810, -466.837311),
		TVector<float, 3>(-295.278717, 113.062233, 255.074921),
		TVector<float, 3>(-485.050446, -376.803070, -363.403687),
		TVector<float, 3>(8.656306, 323.288849, -465.676056),
		TVector<float, 3>(-331.124115, 318.202667, 352.432983),
		TVector<float, 3>(219.598160, -427.561310, -292.257568),
		TVector<float, 3>(-324.289490, -38.059406, 411.193909),
		TVector<float, 3>(211.905167, -495.017914, -80.945450),
		TVector<float, 3>(93.131706, 79.776901, -300.230011),
		TVector<float, 3>(-144.997726, 221.176514, 226.593231),
		TVector<float, 3>(415.781769, -63.400192, 169.896378),
		TVector<float, 3>(-330.696533, -489.526794, -400.910492),
		TVector<float, 3>(251.829620, -31.448917, -382.271606),
		TVector<float, 3>(-425.152679, -458.614655, 51.982407),
		TVector<float, 3>(164.195389, 208.738022, -230.793777),
		TVector<float, 3>(-17.935198, 281.633972, -351.171600),
		TVector<float, 3>(173.350342, -437.429382, 91.033569),
		TVector<float, 3>(-70.044777, 193.334167, -457.776947),
		TVector<float, 3>(-110.712700, 394.487610, -117.631584),
		TVector<float, 3>(282.877594, -76.428200, -275.897461),
		TVector<float, 3>(-296.953613, 248.468033, 473.379364),
		TVector<float, 3>(31.360893, -333.663116, 46.762947),
		TVector<float, 3>(-198.153778, -445.840729, 79.908501),
		TVector<float, 3>(128.918915, -295.266418, 314.310822),
		TVector<float, 3>(316.397064, 492.675201, -22.353359),
		TVector<float, 3>(-491.591217, 69.599388, 231.100067),
		TVector<float, 3>(291.210999, 101.786095, 120.066353),
		TVector<float, 3>(423.432739, -116.051521, 63.189121),
		TVector<float, 3>(26.807938, -58.308739, 196.850739),
		TVector<float, 3>(304.386108, 20.512476, -332.404999),
		TVector<float, 3>(-58.052666, 446.858154, -268.646576),
		TVector<float, 3>(287.384186, -11.148350, -427.704193),
		TVector<float, 3>(-323.134003, -476.013550, -239.163696),
		TVector<float, 3>(-173.272537, 242.319489, -92.413162),
		TVector<float, 3>(-411.048706, -376.898102, -439.149384),
		TVector<float, 3>(-50.688236, -39.021629, -265.853241),
		TVector<float, 3>(-14.189429, 307.057281, -136.264999),
		TVector<float, 3>(411.916718, -84.504379, 176.262268),
		TVector<float, 3>(-301.438812, -16.466000, 452.945557),
		TVector<float, 3>(-388.439606, 173.828278, -251.492279),
		TVector<float, 3>(81.262894, 270.865540, 79.648582),
		TVector<float, 3>(269.125061, -165.186569, -418.280579),
		TVector<float, 3>(330.922028, -214.150269, -428.172791),
		TVector<float, 3>(-62.023949, 74.801361, 248.813751),
		TVector<float, 3>(-304.046417, 39.656052, -266.617676),
		TVector<float, 3>(22.606955, -18.725525, -447.961426),
		TVector<float, 3>(36.056423, -448.865997, -264.509033),
		TVector<float, 3>(137.205154, 346.061523, -321.620117),
		TVector<float, 3>(376.354828, -102.586586, 76.467255),
		TVector<float, 3>(-366.762238, 97.189377, 107.817734),
		TVector<float, 3>(115.618156, 320.713226, -234.216919),
		TVector<float, 3>(76.897949, -153.455826, -250.158554),
		TVector<float, 3>(-315.094116, 289.712494, -111.678459),
		TVector<float, 3>(404.938019, 78.903725, 311.296692),
		TVector<float, 3>(100.629440, -91.474968, 346.249451),
		TVector<float, 3>(-432.814850, 120.009628, -236.909195),
		TVector<float, 3>(474.372375, 89.540321, -218.007278),
		TVector<float, 3>(-323.821411, -233.918503, -91.109077),
		TVector<float, 3>(483.060181, 203.055328, -205.172928),
		TVector<float, 3>(-249.791428, 84.899841, 228.451096),
		TVector<float, 3>(294.685486, 325.919922, -0.660057),
		TVector<float, 3>(-14.357883, 335.928558, -161.407257),
		TVector<float, 3>(372.147278, -70.000824, -212.874008),
		TVector<float, 3>(-327.496155, -64.205551, -426.782471),
		TVector<float, 3>(436.892456, 172.015228, -332.489990),
		TVector<float, 3>(234.468964, -140.563171, -356.856842),
		TVector<float, 3>(393.857178, -456.811340, 215.239670),
		TVector<float, 3>(-435.665466, 161.061432, 380.296021),
		TVector<float, 3>(129.007431, -426.722839, 227.838455),
		TVector<float, 3>(194.553925, -36.660133, -377.745667),
		TVector<float, 3>(81.091064, -14.494259, -4.698598),
		TVector<float, 3>(477.823120, -10.339551, -7.439713),
		TVector<float, 3>(329.294647, 124.934334, -31.539204),
		TVector<float, 3>(-422.967651, -152.839935, 151.815918),
		TVector<float, 3>(-308.065582, -433.543488, 131.536697),
		TVector<float, 3>(-127.482574, 153.704529, 379.379822),
		TVector<float, 3>(-319.516907, -306.675568, -38.896194),
		TVector<float, 3>(-496.178192, 362.924774, 445.143158),
		TVector<float, 3>(-224.624146, -133.979889, 191.335220),
		TVector<float, 3>(-95.945503, -392.088684, -354.644684),
		TVector<float, 3>(-495.001221, -203.064224, 341.611084),
		TVector<float, 3>(215.307480, -8.802383, -109.866089),
		TVector<float, 3>(182.149399, 338.504395, -108.400612),
		TVector<float, 3>(-113.992783, -94.048676, 118.602669),
		TVector<float, 3>(-70.679138, -154.011536, 429.839661),
		TVector<float, 3>(332.228394, 87.196899, -45.364479),
		TVector<float, 3>(-175.798126, 103.366310, 385.613434),
		TVector<float, 3>(-25.403736, -189.473389, 107.609818),
		TVector<float, 3>(158.140579, 231.748474, -174.921295),
		TVector<float, 3>(484.330750, -382.601440, 355.660980),
		TVector<float, 3>(-404.474609, -274.204559, 452.758545),
		TVector<float, 3>(402.803925, 301.364594, -453.891449),
		TVector<float, 3>(502.352783, 36.137814, 337.968567),
		TVector<float, 3>(65.537506, -379.603210, -95.491714),
		TVector<float, 3>(89.513794, 281.446289, -234.911484),
		TVector<float, 3>(-102.142372, -439.478943, -174.701263),
		TVector<float, 3>(-20.548677, 473.107239, -323.945831),
		TVector<float, 3>(-155.732178, 68.468956, 191.888657),
		TVector<float, 3>(-246.176056, -293.127228, -238.780548),
		TVector<float, 3>(-95.137886, -473.429840, -335.837036),
		TVector<float, 3>(-322.929810, -116.150703, 106.371223),
		TVector<float, 3>(-151.638062, 294.123230, 165.768921),
		TVector<float, 3>(-10.748709, 189.459122, -180.566452),
		TVector<float, 3>(-344.513885, 127.258980, 310.102112),
		TVector<float, 3>(283.779053, -425.878815, 253.507355),
		TVector<float, 3>(-18.693506, -423.215637, 241.473343),
		TVector<float, 3>(35.291294, -463.113495, 182.119644),
		TVector<float, 3>(303.328033, -484.533508, -263.075684),
		TVector<float, 3>(87.316788, -224.655762, -103.466148),
		TVector<float, 3>(212.502106, 291.240143, -37.698509),
		TVector<float, 3>(-210.226746, -327.624908, 395.187469),
		TVector<float, 3>(-140.676331, -233.533524, -479.738281),
		TVector<float, 3>(497.348663, -369.330139, 444.607452),
		TVector<float, 3>(-238.005859, -224.585403, 4.934497),
		TVector<float, 3>(45.412025, 32.898960, -293.969574),
		TVector<float, 3>(98.159065, 9.253073, 4.286590),
		TVector<float, 3>(319.760895, 224.277390, -338.729858),
		TVector<float, 3>(-42.885143, 115.941803, -123.498299),
		TVector<float, 3>(108.643486, 313.689636, 187.122147),
		TVector<float, 3>(406.882111, -121.451370, -84.784233),
		TVector<float, 3>(146.114685, 38.404434, 407.395233),
		TVector<float, 3>(160.098679, 365.562958, 128.340561),
		TVector<float, 3>(-386.604553, 16.026035, -306.665375),
		TVector<float, 3>(-460.128113, -274.787689, 313.081543),
		TVector<float, 3>(-338.667877, -167.673691, 449.656464),
		TVector<float, 3>(-478.769501, -58.871258, 187.899368),
		TVector<float, 3>(298.361237, 172.653214, -422.237030),
		TVector<float, 3>(41.355042, 440.904236, -66.577209),
		TVector<float, 3>(-265.183990, 229.690628, -382.926849),
		TVector<float, 3>(-230.065567, 315.269165, 389.309387),
		TVector<float, 3>(-316.057129, -355.076782, 178.763885),
		TVector<float, 3>(85.727577, 147.384888, 168.909027),
		TVector<float, 3>(-47.438934, -140.508743, 389.811249),
		TVector<float, 3>(-430.916351, 442.169373, -481.091522),
		TVector<float, 3>(395.342865, 287.928619, 40.688911),
		TVector<float, 3>(217.577255, -229.733948, 39.387207),
		TVector<float, 3>(343.270477, 344.142456, 45.235668),
		TVector<float, 3>(-401.817596, 28.426838, -119.573418),
		TVector<float, 3>(128.027695, -406.198761, 284.970947),
		TVector<float, 3>(50.713970, 155.177231, -86.203201),
		TVector<float, 3>(-402.503448, -423.153809, -344.427216),
		TVector<float, 3>(-46.463890, 124.469421, 97.708450),
		TVector<float, 3>(-6.806405, -119.038109, -451.151428),
		TVector<float, 3>(-1.850709, 375.763916, 56.923214),
		TVector<float, 3>(-170.375183, -292.288879, 422.587708),
		TVector<float, 3>(-249.433105, 418.539520, 3.763342),
		TVector<float, 3>(468.953613, 416.916473, 418.092651),
		TVector<float, 3>(116.477264, -272.551880, -419.505920),
		TVector<float, 3>(-438.834564, 441.874298, -209.974182),
		TVector<float, 3>(179.419418, 468.942902, 178.058395),
		TVector<float, 3>(494.977844, -347.529480, -234.845490),
		TVector<float, 3>(-26.445614, 391.839844, -24.952581),
		TVector<float, 3>(357.358093, 347.280396, -111.459297),
		TVector<float, 3>(-296.790741, -460.193146, -227.551010),
		TVector<float, 3>(-319.615082, -463.213837, -440.750702),
		TVector<float, 3>(206.071945, -241.811203, 289.759521),
		TVector<float, 3>(-53.932663, 130.412476, 115.283928),
		TVector<float, 3>(-69.709816, 498.642181, 447.779358),
		TVector<float, 3>(407.621704, 476.327332, -256.166016),
		TVector<float, 3>(21.676502, 453.380371, 178.511337),
		TVector<float, 3>(-290.401917, 355.511597, 382.167267),
		TVector<float, 3>(504.071777, -360.653137, 229.144562),
		TVector<float, 3>(-243.678436, 155.493469, 183.954086),
		TVector<float, 3>(-467.052673, 352.004578, 52.671970),
		TVector<float, 3>(468.161835, -226.483109, 491.347473),
		TVector<float, 3>(217.355408, 362.222626, 89.066299),
		TVector<float, 3>(126.294121, 403.935944, 82.119270),
		TVector<float, 3>(293.756897, -428.025848, 391.344910),
		TVector<float, 3>(-325.266998, -277.345398, 286.974884),
		TVector<float, 3>(-480.968597, 94.638840, 83.035339),
		TVector<float, 3>(236.918701, 7.528419, -109.665215),
		TVector<float, 3>(139.164246, -93.484459, -48.898651),
		TVector<float, 3>(237.845810, -151.939453, 280.384460),
		TVector<float, 3>(333.581909, 479.386780, -278.951172),
		TVector<float, 3>(-341.485321, -93.856857, 207.125443),
		TVector<float, 3>(-86.909576, -188.278214, 143.421204),
		TVector<float, 3>(-66.238350, -203.608887, -37.058567),
		TVector<float, 3>(-64.851662, -66.259056, -397.260559),
		TVector<float, 3>(157.171814, 240.519943, -148.522537),
		TVector<float, 3>(-306.800476, 116.314789, -444.796082),
		TVector<float, 3>(-99.924103, 302.389313, 194.601913),
		TVector<float, 3>(415.608643, -107.468674, 450.370361),
		TVector<float, 3>(-165.727753, 219.635284, -200.704056),
		TVector<float, 3>(-263.506897, 386.968872, -347.490540),
		TVector<float, 3>(255.214966, 499.137726, -262.156403),
		TVector<float, 3>(346.128967, 359.255890, 0.684109),
		TVector<float, 3>(-286.785858, -440.778961, 215.371262),
		TVector<float, 3>(-51.834534, 389.829651, 318.104858),
		TVector<float, 3>(-97.144279, -466.515533, 252.337067),
		TVector<float, 3>(-416.057007, -230.970139, 75.810295),
		TVector<float, 3>(6.348568, 51.064812, -258.457550),
		TVector<float, 3>(442.648163, -426.150421, 101.559387),
		TVector<float, 3>(-265.301544, -145.404190, 271.145844),
		TVector<float, 3>(-96.758461, 78.118881, -384.166840),
		TVector<float, 3>(421.493286, -229.252975, 269.107758),
		TVector<float, 3>(-182.264236, -322.529449, -64.740425),
		TVector<float, 3>(-173.167313, -320.209869, -496.485718),
		TVector<float, 3>(106.462219, -307.318665, -279.109558),
		TVector<float, 3>(304.753632, -437.096771, -225.148392),
		TVector<float, 3>(458.123566, 113.099739, 207.414810),
		TVector<float, 3>(307.121307, 485.922760, 318.148193),
		TVector<float, 3>(-452.206238, 322.692352, 375.763641),
		TVector<float, 3>(263.728455, -362.559357, 400.060303),
		TVector<float, 3>(-309.801331, -220.855164, 279.631866),
		TVector<float, 3>(369.716461, -120.790161, 112.604385),
		TVector<float, 3>(-386.976440, 135.268738, -156.356934),
		TVector<float, 3>(-285.658813, -202.765656, -255.164474),
		TVector<float, 3>(420.791290, 258.702515, -423.125671),
		TVector<float, 3>(-16.065334, -74.793091, 111.739700),
		TVector<float, 3>(233.123444, -114.529510, 359.088043),
		TVector<float, 3>(-486.324463, 467.615784, -357.605743),
		TVector<float, 3>(63.094154, 280.725525, -317.769196),
		TVector<float, 3>(185.273453, -199.382828, 237.923233),
		TVector<float, 3>(-71.881752, 244.433304, -101.894142),
		TVector<float, 3>(-395.057831, -160.960007, -495.831970),
		TVector<float, 3>(22.908978, 276.191620, 60.804462),
		TVector<float, 3>(-101.668625, -405.397156, 417.193207),
		TVector<float, 3>(504.664032, -387.371979, -21.519670),
		TVector<float, 3>(378.585876, 24.861179, 118.139366),
		TVector<float, 3>(-329.140381, -56.256165, -10.868471),
		TVector<float, 3>(-439.060638, 462.255035, 488.677979),
		TVector<float, 3>(136.785736, 241.239883, -472.301270),
		TVector<float, 3>(364.087372, 398.172729, -340.828979),
		TVector<float, 3>(496.814514, 189.570526, -48.344467),
		TVector<float, 3>(-469.635376, -342.848877, -323.324615),
		TVector<float, 3>(297.816284, -133.993637, -180.453491),
		TVector<float, 3>(32.932522, 229.530457, 289.877899),
		TVector<float, 3>(151.280884, -456.170288, -319.627869),
		TVector<float, 3>(-420.404480, -293.554932, 270.833588),
		TVector<float, 3>(-166.668228, 109.309616, 405.425049),
		TVector<float, 3>(441.952728, 326.790924, 59.650425),
		TVector<float, 3>(214.444229, 332.840210, -372.769104),
		TVector<float, 3>(489.963867, 255.110016, -415.670074),
		TVector<float, 3>(466.107330, -350.707520, -219.496033),
		TVector<float, 3>(-8.776596, -270.673126, -425.700897),
		TVector<float, 3>(259.316559, 49.319492, -65.606682),
		TVector<float, 3>(186.495071, -473.441284, 73.194115),
		TVector<float, 3>(-136.528824, 235.461594, 330.558777),
		TVector<float, 3>(2.054496, -221.085983, -34.610844),
		TVector<float, 3>(-208.910797, -484.323486, 99.621880),
		TVector<float, 3>(-414.959259, 318.349701, 115.878944),
		TVector<float, 3>(154.392975, 297.179962, -326.410278),
		TVector<float, 3>(307.997650, -70.161720, -474.591980),
		TVector<float, 3>(-217.917801, -478.218353, -12.422220),
		TVector<float, 3>(467.680939, -2.456307, 58.813637),
		TVector<float, 3>(86.730492, 443.689087, 97.530373),
		TVector<float, 3>(-397.356812, 340.257629, 155.705902),
		TVector<float, 3>(69.964935, -70.281136, 419.339935),
		TVector<float, 3>(183.865814, -364.347839, 335.858521),
		TVector<float, 3>(-302.469086, 21.223116, -303.115265),
		TVector<float, 3>(-474.538330, 242.544510, 427.714325),
		TVector<float, 3>(-431.092438, -78.810555, 189.516037),
		TVector<float, 3>(6.765585, -67.465637, -115.456863),
		TVector<float, 3>(-276.002167, -472.678253, -253.048294),
		TVector<float, 3>(-199.849228, -227.568649, -160.294403),
		TVector<float, 3>(-108.410561, 44.930061, 423.044373),
		TVector<float, 3>(-346.054016, 418.617706, -19.676897),
		TVector<float, 3>(-342.096344, -477.604767, -477.088806),
		TVector<float, 3>(479.841034, 386.763885, -42.855141),
		TVector<float, 3>(-104.704468, 74.109421, -157.756973),
		TVector<float, 3>(191.766357, -450.928650, 10.097423),
		TVector<float, 3>(435.326416, 109.941628, -81.168564),
		TVector<float, 3>(342.072723, -276.451630, -209.329865),
		TVector<float, 3>(-202.457809, -140.131271, -85.280479),
		TVector<float, 3>(302.150665, 208.333298, 229.783981),
		TVector<float, 3>(97.332260, 285.877869, 132.989716),
		TVector<float, 3>(337.881348, 282.068085, -163.986832),
		TVector<float, 3>(289.349670, 283.998779, -73.085823),
		TVector<float, 3>(110.647957, -205.171188, -447.227661),
		TVector<float, 3>(468.525665, 292.997345, 101.583885),
		TVector<float, 3>(-291.419373, -53.174358, 253.407928),
		TVector<float, 3>(273.323639, -495.496765, 158.377808),
		TVector<float, 3>(-270.494995, 434.222015, -237.417007),
		TVector<float, 3>(194.389664, -381.760742, 4.799733),
		TVector<float, 3>(433.793304, 127.222366, -91.119720),
		TVector<float, 3>(417.663879, -82.795349, -385.559875),
		TVector<float, 3>(401.849792, -412.919983, 294.427124),
		TVector<float, 3>(254.382568, 390.357788, -143.784927),
		TVector<float, 3>(-241.637207, -393.453949, 0.316825),
		TVector<float, 3>(-179.876526, -43.772667, -200.043716),
		TVector<float, 3>(-442.323883, -441.111206, -10.510733),
		TVector<float, 3>(-240.411072, -155.672272, -47.652023),
		TVector<float, 3>(497.738770, -212.067123, 401.503906),
		TVector<float, 3>(402.815002, -143.715179, -188.653061),
		TVector<float, 3>(-489.982269, 316.128601, 345.323730),
		TVector<float, 3>(300.345062, -155.779419, 204.738510),
		TVector<float, 3>(77.386360, -36.566715, 102.221626),
		TVector<float, 3>(-335.144714, 280.103424, -292.268463),
		TVector<float, 3>(-186.268845, -359.714447, 255.017151),
		TVector<float, 3>(-482.140747, -277.856232, -99.578735),
		TVector<float, 3>(-25.758312, 457.362823, 445.665161),
		TVector<float, 3>(240.899567, -426.061676, -260.382721),
		TVector<float, 3>(55.926075, -427.102051, -359.296631),
		TVector<float, 3>(158.620926, -267.245697, -235.343918),
		TVector<float, 3>(245.058151, -199.262283, 225.736847),
		TVector<float, 3>(419.409363, 173.585281, 498.865143),
		TVector<float, 3>(-412.597717, 90.972641, 317.952545),
		TVector<float, 3>(-62.846321, 451.261017, -458.941254),
		TVector<float, 3>(-2.112951, 131.697693, -266.969543),
		TVector<float, 3>(-71.756104, 197.926178, -429.611969),
		TVector<float, 3>(11.005249, -204.399704, -209.509171),
		TVector<float, 3>(212.048920, -94.764648, 47.061363),
		TVector<float, 3>(41.838615, 315.251892, 358.783783),
		TVector<float, 3>(64.526154, 282.856964, 364.213318),
		TVector<float, 3>(-382.895752, -74.937675, -170.513199),
		TVector<float, 3>(-229.276535, 214.105637, -39.135128),
		TVector<float, 3>(75.192513, -194.803925, 495.327209),
		TVector<float, 3>(354.394287, 92.570404, 483.486603),
		TVector<float, 3>(-244.930145, 285.403839, 234.446716),
		TVector<float, 3>(275.039795, 364.044403, 393.990021),
		TVector<float, 3>(58.853001, -418.431580, 365.284119),
		TVector<float, 3>(48.189995, 429.757599, 459.396606),
		TVector<float, 3>(-330.372833, 186.196960, 256.824799),
		TVector<float, 3>(-166.618195, -74.863319, 187.036301),
		TVector<float, 3>(345.432831, -357.747986, 471.830658),
		TVector<float, 3>(-412.335114, 164.854645, 291.070343),
		TVector<float, 3>(-159.294495, -422.622314, -274.262207),
		TVector<float, 3>(460.284729, -490.375885, 370.148071),
		TVector<float, 3>(-495.377197, -483.675629, 125.418221),
		TVector<float, 3>(312.226471, -382.799805, -271.448212),
		TVector<float, 3>(231.756332, 343.922577, -237.322403),
		TVector<float, 3>(475.138306, -281.960419, -257.061768),
		TVector<float, 3>(109.477234, 137.296082, 328.897614),
		TVector<float, 3>(75.855858, -389.354401, -165.045700),
		TVector<float, 3>(-365.439606, 409.793213, -344.337372),
		TVector<float, 3>(190.476425, -101.289902, -414.852570),
		TVector<float, 3>(279.838470, 233.962219, -253.028793),
		TVector<float, 3>(494.554565, -19.035469, -454.912781),
		TVector<float, 3>(454.232025, 35.941002, -190.781250),
		TVector<float, 3>(-56.776436, -279.633240, 189.594269),
		TVector<float, 3>(310.733643, 398.778229, 115.157578),
		TVector<float, 3>(-263.777832, 172.952682, 282.845673),
		TVector<float, 3>(186.960114, 100.191246, -10.737085),
		TVector<float, 3>(42.900192, -386.867004, -338.782196),
		TVector<float, 3>(-478.718567, 366.690582, -20.681892),
		TVector<float, 3>(-472.947754, 143.301193, 470.928955),
		TVector<float, 3>(359.031982, 460.143951, 15.223279),
		TVector<float, 3>(154.614395, 25.273403, 294.822174),
		TVector<float, 3>(-241.822739, -151.170242, 406.183472),
		TVector<float, 3>(55.765213, -299.225281, 160.921265),
		TVector<float, 3>(-301.307129, -37.103012, -360.608032),
		TVector<float, 3>(305.408875, -40.611671, 76.352386),
		TVector<float, 3>(-497.209076, -469.388916, -459.909882),
		TVector<float, 3>(286.822144, -57.591499, 389.806213),
		TVector<float, 3>(162.141525, -503.654846, -275.600830),
		TVector<float, 3>(-182.711426, 315.135590, 404.320831),
		TVector<float, 3>(337.266113, 51.407089, 262.918945),
		TVector<float, 3>(-406.571289, -117.127121, 70.271652),
		TVector<float, 3>(114.971306, 195.756882, 243.510223),
		TVector<float, 3>(-362.377289, -262.646118, 91.277992),
		TVector<float, 3>(-392.248230, -211.562515, 154.876434),
		TVector<float, 3>(-292.514435, -322.307587, -351.594696),
		TVector<float, 3>(-182.941010, 423.471985, -404.903961),
		TVector<float, 3>(165.530823, -206.140228, -298.378845),
		TVector<float, 3>(-416.617889, -257.617523, 199.112396),
		TVector<float, 3>(436.571655, -452.221466, -363.210236),
		TVector<float, 3>(-389.141083, -448.004852, 467.495148),
		TVector<float, 3>(-208.353821, 1.455436, -61.053047),
		TVector<float, 3>(-348.666504, -360.129059, 108.620987),
		TVector<float, 3>(322.255554, 224.415009, 129.610779),
		TVector<float, 3>(148.647110, -171.054153, 380.197510),
		TVector<float, 3>(75.727539, -392.240784, 178.413345),
		TVector<float, 3>(461.597107, 276.866791, 259.316498),
		TVector<float, 3>(-188.851700, -506.120392, -319.079224),
		TVector<float, 3>(-289.873566, -213.433243, -476.541992),
		TVector<float, 3>(-429.349792, -436.986786, -341.291595),
		TVector<float, 3>(-450.236450, 293.807220, -95.385590),
		TVector<float, 3>(-148.397507, -481.259491, 60.426525),
		TVector<float, 3>(-38.914791, -320.977356, 239.912582),
		TVector<float, 3>(-236.772995, -13.772430, 18.371197),
		TVector<float, 3>(-154.725891, -247.160095, -457.026764),
		TVector<float, 3>(463.904083, 491.605286, -375.312134),
		TVector<float, 3>(-212.990738, 281.237244, 101.881554),
		TVector<float, 3>(323.667542, -288.400696, 309.234619),
		TVector<float, 3>(-326.013184, 373.602356, -51.600929),
		TVector<float, 3>(-190.772171, 474.976013, -433.544464),
		TVector<float, 3>(-333.529053, 315.955322, -257.584686),
		TVector<float, 3>(134.168442, -207.142593, -237.205246),
		TVector<float, 3>(296.645691, 365.430115, -112.621956),
		TVector<float, 3>(-468.717041, 170.278976, 195.752731),
		TVector<float, 3>(-438.273071, -493.193787, -182.837982),
		TVector<float, 3>(231.807053, 223.102142, 399.603668),
		TVector<float, 3>(-375.413666, 197.269531, 313.079163),
		TVector<float, 3>(-237.321411, 109.774902, -339.539185),
		TVector<float, 3>(-166.832520, 96.780251, 359.589966),
		TVector<float, 3>(-267.849762, -280.576569, 475.385895),
		TVector<float, 3>(-252.170349, -314.955566, 194.826065),
		TVector<float, 3>(-273.626068, -25.612484, 429.888763),
		TVector<float, 3>(-245.710617, -31.107174, 359.815826),
		TVector<float, 3>(338.739014, -305.491547, -372.876892),
		TVector<float, 3>(347.317963, -343.655151, -226.199097),
		TVector<float, 3>(289.561157, 391.568512, -474.444702),
		TVector<float, 3>(220.610565, -88.228981, -361.703247),
		TVector<float, 3>(-32.137150, 279.242523, 198.910324),
		TVector<float, 3>(-8.652587, 364.053284, 238.536423),
		TVector<float, 3>(40.961662, -460.244446, -364.799927),
		TVector<float, 3>(361.533600, 22.532135, -321.670197),
		TVector<float, 3>(171.925217, 220.863037, -46.238152),
		TVector<float, 3>(463.140991, 8.700814, -463.133301),
		TVector<float, 3>(-59.747097, 281.821930, 428.465240),
		TVector<float, 3>(257.694885, 466.107269, 318.531647),
		TVector<float, 3>(459.052460, -122.432251, 258.799042),
		TVector<float, 3>(-206.521057, -310.223267, 42.945801),
		TVector<float, 3>(-407.930511, 132.792847, 301.889709),
		TVector<float, 3>(-39.667675, -282.247284, 349.816925),
		TVector<float, 3>(-465.366119, 352.759094, -173.244797),
		TVector<float, 3>(-413.010193, -477.918304, 355.389771),
		TVector<float, 3>(-450.918243, -48.948486, 261.834137),
		TVector<float, 3>(437.413147, -346.686432, -68.407776),
		TVector<float, 3>(470.035217, -269.245605, -108.699028),
		TVector<float, 3>(-35.032028, 135.417145, 257.586334),
		TVector<float, 3>(75.725121, -276.935791, -326.210388),
		TVector<float, 3>(-304.540161, 423.531372, 42.857964),
		TVector<float, 3>(-345.388794, 171.240051, -295.388153),
		TVector<float, 3>(388.476990, 106.416595, 346.194427),
		TVector<float, 3>(-485.112671, -156.939224, -200.522675),
		TVector<float, 3>(-437.545441, 27.217869, 498.712799),
		TVector<float, 3>(204.316681, -224.850067, -339.840942),
		TVector<float, 3>(-151.853455, 248.350433, -187.171616),
		TVector<float, 3>(-307.778015, 163.964737, -86.852859),
		TVector<float, 3>(-205.014755, -419.126160, -385.212982),
		TVector<float, 3>(227.781250, -349.337646, 137.707748),
		TVector<float, 3>(-10.358829, -194.446289, 338.442078),
		TVector<float, 3>(-417.454987, -191.506866, 42.314259),
		TVector<float, 3>(82.920601, -52.581219, -3.668561),
		TVector<float, 3>(-274.859253, 197.977814, 290.917664),
		TVector<float, 3>(-4.264119, 305.476501, 124.254005),
		TVector<float, 3>(129.336411, 183.637756, 481.332550),
		TVector<float, 3>(173.257721, 443.100189, 135.882431),
		TVector<float, 3>(-87.686172, 9.278550, 95.688065),
		TVector<float, 3>(61.007362, -356.733215, 369.337708),
		TVector<float, 3>(1.323771, 453.525726, 54.349140),
		TVector<float, 3>(-16.970961, -330.322845, 438.671906),
		TVector<float, 3>(138.369293, -393.005615, -467.887878),
		TVector<float, 3>(-427.099731, -227.800430, 254.199707),
		TVector<float, 3>(-281.752869, 169.402893, -391.806885),
		TVector<float, 3>(-142.945038, 316.538391, 9.495449),
		TVector<float, 3>(-72.653976, -399.100006, 410.704193),
		TVector<float, 3>(231.520157, -316.594879, -272.584106),
		TVector<float, 3>(429.107941, 117.408150, -313.621460),
		TVector<float, 3>(452.603210, -146.106125, -427.421448),
		TVector<float, 3>(-375.593292, 94.462799, 53.581905),
		TVector<float, 3>(-55.000862, 72.902519, -214.643555),
		TVector<float, 3>(-248.467163, 87.782814, 257.279053),
		TVector<float, 3>(58.364777, 1.555672, -432.226685),
		TVector<float, 3>(179.784897, 296.020782, -493.251495),
		TVector<float, 3>(133.515884, 364.398621, 153.062073),
		TVector<float, 3>(-121.021133, 115.270088, 429.297211),
		TVector<float, 3>(437.074677, 340.916077, 321.067566),
		TVector<float, 3>(-333.861237, -36.074306, 279.406219),
		TVector<float, 3>(-290.295868, 300.841583, 455.068359),
		TVector<float, 3>(-124.641281, 30.949348, -411.464447),
		TVector<float, 3>(133.962753, -440.555389, -299.577881),
		TVector<float, 3>(396.931213, -245.877213, -190.799362),
		TVector<float, 3>(356.561005, 23.755669, -227.658783),
		TVector<float, 3>(-474.655884, 385.636536, -66.421341),
		TVector<float, 3>(139.589798, 69.430588, 170.049866),
		TVector<float, 3>(-180.300003, -298.759399, 258.781311),
		TVector<float, 3>(20.341511, -83.750069, 375.604584),
		TVector<float, 3>(-399.209808, 206.307449, -457.492279),
		TVector<float, 3>(-156.781555, -425.006805, 247.062256),
		TVector<float, 3>(-358.142517, 323.665619, 221.020615),
		TVector<float, 3>(-421.605438, -109.430000, 48.458839),
		TVector<float, 3>(196.358795, 387.362946, 200.109055),
		TVector<float, 3>(148.137253, -442.203552, 455.346405),
		TVector<float, 3>(-372.717529, -181.955505, -73.061211),
		TVector<float, 3>(290.558380, 108.710373, -495.497101),
		TVector<float, 3>(-31.508862, 83.961823, -477.688690),
		TVector<float, 3>(-292.825073, 401.452118, 40.023769),
		TVector<float, 3>(305.654327, 344.614014, -484.734528),
		TVector<float, 3>(-96.112999, 358.886139, 343.926056),
		TVector<float, 3>(-77.975006, -200.611725, 436.614349),
		TVector<float, 3>(-380.808777, -163.183243, -320.000305),
		TVector<float, 3>(62.807953, -454.936523, 7.864151),
		TVector<float, 3>(-187.136566, 436.261383, -459.129639),
		TVector<float, 3>(319.254303, -140.143600, 260.507874),
		TVector<float, 3>(364.995758, 234.210785, -314.793121),
		TVector<float, 3>(273.834473, 228.884338, -373.565582),
		TVector<float, 3>(-114.984818, -150.249619, 97.978058),
		TVector<float, 3>(-248.512909, -421.554565, 213.249817),
		TVector<float, 3>(-492.481293, 469.495331, -255.983932),
		TVector<float, 3>(-16.879589, 12.693143, 457.127899),
		TVector<float, 3>(-53.525154, -326.802917, 24.634113),
		TVector<float, 3>(-334.570618, -152.623810, 437.137939),
		TVector<float, 3>(90.214264, 175.983749, -8.492594),
		TVector<float, 3>(31.551510, 428.279022, -300.236816),
		TVector<float, 3>(317.410583, 254.281158, -45.379452),
		TVector<float, 3>(373.628571, 191.565323, -198.368378),
		TVector<float, 3>(64.589760, 398.502136, 497.781342),
		TVector<float, 3>(-0.037627, 84.928665, 97.766304),
		TVector<float, 3>(-8.477995, -301.029846, 501.411163),
		TVector<float, 3>(-280.640747, 77.739326, 76.746017),
		TVector<float, 3>(266.135651, -270.332184, -361.952667),
		TVector<float, 3>(-383.617249, 148.858490, 182.130127),
		TVector<float, 3>(403.772430, -251.491165, -221.811371),
		TVector<float, 3>(-294.830170, -490.427002, -170.026215),
		TVector<float, 3>(53.154369, 467.205048, -448.689087),
		TVector<float, 3>(-129.967773, 428.182007, -46.346104),
		TVector<float, 3>(191.463226, 266.097168, 264.876465),
		TVector<float, 3>(-437.797546, -450.429962, -259.037445),
		TVector<float, 3>(-215.436646, -151.502197, 194.260773),
		TVector<float, 3>(484.741058, -173.245331, 123.784691),
		TVector<float, 3>(34.323772, -78.265396, 57.515343),
		TVector<float, 3>(370.565460, 36.129570, 70.543785),
		TVector<float, 3>(180.909195, -214.449432, -177.712982),
		TVector<float, 3>(285.844330, -316.742218, 215.586060),
		TVector<float, 3>(35.213249, -146.679428, -493.202515),
		TVector<float, 3>(233.160828, -256.384430, 194.695938),
		TVector<float, 3>(-88.168633, 93.744286, -437.774414),
		TVector<float, 3>(271.689056, 471.789734, 45.359272),
		TVector<float, 3>(317.096863, 264.992401, -403.157959),
		TVector<float, 3>(-402.694550, 325.856262, 478.495819),
		TVector<float, 3>(316.440643, -246.744217, -93.578743),
		TVector<float, 3>(-395.915802, -468.904175, 130.210083),
		TVector<float, 3>(42.076511, -406.658875, -341.539703),
		TVector<float, 3>(36.240406, 141.743973, -193.116684),
		TVector<float, 3>(-152.039856, 77.129044, 398.644958),
		TVector<float, 3>(-355.971039, 425.330536, 460.346649),
		TVector<float, 3>(60.770130, -395.947510, 147.437332),
		TVector<float, 3>(-214.917877, 59.491798, -444.995972),
		TVector<float, 3>(140.642242, -59.842747, -38.536938),
		TVector<float, 3>(188.785370, -317.715149, 55.586563),
		TVector<float, 3>(295.941864, -399.058563, -309.803619),
		TVector<float, 3>(-112.782791, -464.218567, -28.075764),
		TVector<float, 3>(-82.076530, 38.060524, -20.929352),
		TVector<float, 3>(-469.907013, -281.681427, -78.295082),
		TVector<float, 3>(119.298927, -250.638474, -85.414314),
		TVector<float, 3>(-128.127975, 191.990936, 61.930561),
		TVector<float, 3>(239.815323, 462.536224, -400.664368),
		TVector<float, 3>(-287.905029, 272.487396, -464.064850),
		TVector<float, 3>(-494.923065, -497.227448, -166.287704),
		TVector<float, 3>(18.459965, -105.025818, 208.102951),
		TVector<float, 3>(-53.974419, 369.376190, -311.218903),
		TVector<float, 3>(-153.935562, -369.343689, 26.955284),
		TVector<float, 3>(146.761658, 265.337189, -393.263428),
		TVector<float, 3>(-146.298996, -136.789230, -325.342255),
		TVector<float, 3>(-100.364998, 41.565681, 457.100800),
		TVector<float, 3>(277.951416, -408.010315, 407.601990),
		TVector<float, 3>(147.904114, -311.830902, -218.217270),
		TVector<float, 3>(466.625061, 323.143860, 439.660309),
		TVector<float, 3>(-318.369232, 293.648956, -205.911560),
		TVector<float, 3>(-23.487226, 264.688660, -465.763947),
		TVector<float, 3>(-220.470505, -491.979248, 177.967453),
		TVector<float, 3>(140.845749, 402.280426, 62.372787),
		TVector<float, 3>(17.263393, -441.855255, 491.291290),
		TVector<float, 3>(214.466415, -32.933830, 294.420410),
		TVector<float, 3>(-346.603973, 9.985657, 60.781410),
		TVector<float, 3>(-195.714737, 199.831345, -430.127625),
		TVector<float, 3>(167.359177, -508.080200, 183.680038),
		TVector<float, 3>(-373.838013, 401.451385, 314.726532),
		TVector<float, 3>(41.688915, -286.448090, 122.907547),
		TVector<float, 3>(-382.816803, 425.577545, -39.088512),
		TVector<float, 3>(240.300323, 36.714249, -103.350105),
		TVector<float, 3>(23.932772, 139.608200, -13.257769),
		TVector<float, 3>(-21.746332, 276.681641, 79.779503),
		TVector<float, 3>(-283.722321, -67.413910, -375.658569),
		TVector<float, 3>(-271.633575, -485.069733, -366.141876),
		TVector<float, 3>(-348.512238, 47.829094, -129.952454),
		TVector<float, 3>(-252.011780, 158.338440, -257.046661),
		TVector<float, 3>(108.062462, -496.475952, -461.153839),
		TVector<float, 3>(262.097015, -56.576897, -440.833496),
		TVector<float, 3>(305.524475, -230.071289, 331.628082),
		TVector<float, 3>(-22.767382, -439.109314, 408.974548),
		TVector<float, 3>(141.733932, 246.540741, 311.647552),
		TVector<float, 3>(-264.110657, 381.439331, -446.906342),
		TVector<float, 3>(-275.137939, 88.810036, -264.103394),
		TVector<float, 3>(-53.893646, 18.765507, -275.342865),
		TVector<float, 3>(-41.145519, 198.195770, 86.848518),
		TVector<float, 3>(494.006226, -439.392975, -332.041748),
		TVector<float, 3>(196.101349, 47.783283, 449.556702),
		TVector<float, 3>(499.082855, -187.807938, 393.422974),
		TVector<float, 3>(453.721741, 91.746445, -412.286835),
		TVector<float, 3>(200.884109, 219.703476, -195.398315),
		TVector<float, 3>(-176.367020, -146.422821, 254.175781),
		TVector<float, 3>(-292.394165, -405.298157, -189.712097),
		TVector<float, 3>(-235.512955, 37.762169, -413.338989),
		TVector<float, 3>(375.974091, -172.405563, 394.345856),
		TVector<float, 3>(-475.005432, 114.267296, 8.441391),
		TVector<float, 3>(53.267559, -0.840073, -392.984711),
		TVector<float, 3>(461.063263, 253.957397, -328.321167),
		TVector<float, 3>(311.979065, -311.673889, -437.875366),
		TVector<float, 3>(397.504364, -382.269562, -348.164490),
		TVector<float, 3>(-412.530670, 487.768219, -494.902313),
		TVector<float, 3>(-12.422531, -108.480331, 389.718872),
		TVector<float, 3>(-498.177856, -10.606319, -468.527710),
		TVector<float, 3>(461.339600, -185.411560, -97.692200),
		TVector<float, 3>(-325.283905, -486.712250, 226.168793),
		TVector<float, 3>(30.354443, 204.111557, -467.552856),
		TVector<float, 3>(325.571350, 322.428223, 487.607727),
		TVector<float, 3>(250.228699, -267.591461, -280.306427),
		TVector<float, 3>(110.416611, -422.861145, 93.341728),
		TVector<float, 3>(-108.744652, -75.164307, -27.947912),
		TVector<float, 3>(-410.901947, 29.794373, -453.682526),
		TVector<float, 3>(227.952576, -149.207458, 97.670715),
		TVector<float, 3>(-217.920776, -446.394104, -330.747803),
		TVector<float, 3>(-493.794678, -136.821960, 89.575592),
		TVector<float, 3>(29.973211, -467.271637, 299.598663),
		TVector<float, 3>(-289.283325, 3.323531, 329.302887),
		TVector<float, 3>(-315.627838, 22.672043, -19.657959),
		TVector<float, 3>(290.506439, -245.193787, -283.277618),
		TVector<float, 3>(82.247894, 152.804947, 232.322479),
		TVector<float, 3>(-460.359863, 120.355774, 287.276947),
		TVector<float, 3>(-153.289673, -83.147911, -156.624023),
		TVector<float, 3>(90.157425, -19.796318, 273.277435),
		TVector<float, 3>(477.792419, -236.119202, 229.204010),
		TVector<float, 3>(-256.717163, -482.556976, 73.805763),
		TVector<float, 3>(193.965469, 335.502594, 407.249084),
		TVector<float, 3>(-317.301361, -150.861511, -267.027252),
		TVector<float, 3>(-234.212891, 169.193054, 12.468929),
		TVector<float, 3>(-122.958778, 184.225220, -281.832764),
		TVector<float, 3>(172.889267, -244.481308, -13.491559),
		TVector<float, 3>(-455.732452, 49.398464, -487.256653),
		TVector<float, 3>(-159.274445, 459.628967, -212.599030),
		TVector<float, 3>(-387.381226, -152.931030, -90.010475),
		TVector<float, 3>(307.135651, -367.885498, -283.762726),
		TVector<float, 3>(328.798981, -28.141937, 463.444977),
		TVector<float, 3>(380.734222, -358.904053, 189.726608),
		TVector<float, 3>(468.789429, 147.742126, -324.019531),
		TVector<float, 3>(42.212719, -194.596542, -74.217674),
		TVector<float, 3>(59.225803, 408.615936, -400.222412),
		TVector<float, 3>(370.151001, -91.616234, 261.225952),
		TVector<float, 3>(-470.818481, -468.467255, 78.603943),
		TVector<float, 3>(138.056259, 381.496429, 343.030334),
		TVector<float, 3>(193.678894, 455.798859, -211.394592),
		TVector<float, 3>(-229.254257, 221.660156, 389.758728),
		TVector<float, 3>(-5.426409, -338.579559, 312.063416),
		TVector<float, 3>(257.437988, -221.585373, 387.992676),
		TVector<float, 3>(252.890198, 253.480331, -242.888504),
		TVector<float, 3>(209.788422, -122.203262, -205.307999),
		TVector<float, 3>(-318.215576, -212.441605, -161.507248),
		TVector<float, 3>(-126.018051, -14.938378, -1.914866),
		TVector<float, 3>(459.003052, -27.093025, -119.271439),
		TVector<float, 3>(-135.497726, -67.959251, -299.740143),
		TVector<float, 3>(-80.400352, 405.449738, -25.305824),
		TVector<float, 3>(331.517822, 394.212524, 247.202957),
		TVector<float, 3>(-200.813217, -309.824463, -405.956848),
		TVector<float, 3>(-441.577362, -177.000031, 187.491730),
		TVector<float, 3>(74.007347, 374.367279, -95.020447),
		TVector<float, 3>(121.376175, -351.564667, -99.246315),
		TVector<float, 3>(-262.610840, 30.166679, 29.652109),
		TVector<float, 3>(-314.689545, 497.851013, -483.978546),
		TVector<float, 3>(313.566833, 81.872368, 127.936455),
		TVector<float, 3>(-188.062775, -27.774809, 115.440559),
		TVector<float, 3>(-341.138977, 357.470673, -145.548004),
		TVector<float, 3>(486.098114, 274.056396, 222.557999),
		TVector<float, 3>(-72.550583, 344.608856, 105.476044),
		TVector<float, 3>(264.338104, 74.919327, -229.340485),
		TVector<float, 3>(-175.829681, -369.921143, -270.168060),
		TVector<float, 3>(-439.134644, -89.340073, 31.625027),
		TVector<float, 3>(453.240509, -441.942139, 95.360649),
		TVector<float, 3>(154.489624, -154.061584, 400.117432),
		TVector<float, 3>(-313.318878, -33.365116, 106.443497),
		TVector<float, 3>(330.858704, -237.466278, 123.621101),
		TVector<float, 3>(-45.459476, 78.616837, -341.070862),
		TVector<float, 3>(441.839722, 32.821724, -157.368378),
		TVector<float, 3>(109.813148, -52.941776, 239.197540),
		TVector<float, 3>(427.729797, 150.852295, -305.669281),
		TVector<float, 3>(352.765961, -344.256653, -172.584900),
		TVector<float, 3>(220.896759, -161.305695, 178.608856),
		TVector<float, 3>(448.311707, 38.369102, 399.040466),
		TVector<float, 3>(472.728241, -392.619904, 241.380356),
		TVector<float, 3>(368.655579, -266.348083, 167.329361),
		TVector<float, 3>(-123.666168, 378.069885, -89.481934),
		TVector<float, 3>(-336.294861, 51.444096, -87.166710),
		TVector<float, 3>(-369.083496, -458.447845, 98.342430),
		TVector<float, 3>(-55.750771, 339.577606, -408.659973),
		TVector<float, 3>(-482.072876, 150.491394, 397.955597),
		TVector<float, 3>(409.708344, -323.285004, 156.616943),
		TVector<float, 3>(-314.299561, -338.588318, -299.799225),
		TVector<float, 3>(-192.229752, 106.959435, 207.915497),
		TVector<float, 3>(-452.993591, 259.077301, -69.118973),
		TVector<float, 3>(-197.157608, 70.561081, 64.728676),
		TVector<float, 3>(-114.701218, 134.810394, -192.752838),
		TVector<float, 3>(153.844879, 24.124008, 162.939880),
		TVector<float, 3>(67.719635, -194.299057, -166.483276),
		TVector<float, 3>(1.335489, 359.135803, 46.276474),
		TVector<float, 3>(424.380859, -412.495636, -53.856392),
		TVector<float, 3>(-139.507996, 313.362976, 41.137463),
		TVector<float, 3>(214.556305, -439.377991, 480.978149),
		TVector<float, 3>(-158.288101, -315.038330, -205.470322),
		TVector<float, 3>(379.632813, 49.237480, 417.151611),
		TVector<float, 3>(202.860367, -314.930786, -198.860855),
		TVector<float, 3>(-317.129272, -133.717133, 28.658985),
		TVector<float, 3>(63.951645, -112.618736, -89.152397),
		TVector<float, 3>(17.702831, 234.660385, 180.245789),
		TVector<float, 3>(-377.576660, -24.887493, -469.610931),
		TVector<float, 3>(345.185242, 213.848083, -256.143799),
		TVector<float, 3>(142.740067, 87.932396, -289.893524),
		TVector<float, 3>(-22.680691, -423.115723, -375.482117),
		TVector<float, 3>(129.229919, -20.208080, -435.842743),
		TVector<float, 3>(394.180267, 183.998291, 237.897949),
		TVector<float, 3>(-156.247345, -345.617188, -184.086685),
		TVector<float, 3>(364.063629, 24.309664, -5.958552),
		TVector<float, 3>(188.311218, -466.302551, 434.813477),
		TVector<float, 3>(-469.209778, -112.618576, -184.919434),
		TVector<float, 3>(-451.891876, 497.062286, -135.598953),
		TVector<float, 3>(378.478271, -145.985580, -348.906616),
		TVector<float, 3>(219.920868, -29.429941, -389.540527),
		TVector<float, 3>(-254.188583, -402.559814, 317.781769),
		TVector<float, 3>(27.369122, -331.625244, 274.275543),
		TVector<float, 3>(-217.105591, 367.324432, -38.490540),
		TVector<float, 3>(203.528549, -139.666687, -314.880646),
		TVector<float, 3>(154.908478, -25.651628, -420.904816),
		TVector<float, 3>(-469.438873, 87.876419, 66.652931),
		TVector<float, 3>(-333.965698, 360.856689, 72.119110),
		TVector<float, 3>(488.991943, -214.173782, 419.365845),
		TVector<float, 3>(-277.820953, -254.352295, -91.200630),
		TVector<float, 3>(439.502411, 26.660156, 426.572296),
		TVector<float, 3>(468.905945, -11.083944, 155.270737),
		TVector<float, 3>(-495.571320, 387.675476, 462.737518),
		TVector<float, 3>(-186.521759, 101.496666, -261.693604),
		TVector<float, 3>(90.920319, 71.203964, 109.361191),
		TVector<float, 3>(17.147041, 423.844116, -181.388031),
		TVector<float, 3>(369.990997, -292.010284, 288.890625),
		TVector<float, 3>(60.613506, 159.628769, -103.001495),
		TVector<float, 3>(-257.314941, -166.768173, -243.437576),
		TVector<float, 3>(77.085098, 3.844237, 419.141571),
		TVector<float, 3>(-458.424011, 453.982086, 335.668457),
		TVector<float, 3>(303.147461, -477.858582, -135.595367),
		TVector<float, 3>(-222.218338, 123.374260, -54.167019),
		TVector<float, 3>(-494.821838, -138.728119, 258.205933),
		TVector<float, 3>(-136.733047, -466.762512, -186.554367),
		TVector<float, 3>(204.075165, -192.734528, 433.739014),
		TVector<float, 3>(-319.658051, 292.774658, 32.510475),
		TVector<float, 3>(12.988228, 32.229332, -259.525146),
		TVector<float, 3>(-204.495483, 113.742813, 72.229324),
		TVector<float, 3>(-313.391907, 268.926453, 237.994965),
		TVector<float, 3>(242.856934, -416.193878, 40.125309),
		TVector<float, 3>(-165.330872, -395.039185, 418.327393),
		TVector<float, 3>(132.115372, -386.139526, -370.297211),
		TVector<float, 3>(-407.942047, 387.773682, -38.150467),
		TVector<float, 3>(147.654724, -210.536514, -391.827484),
		TVector<float, 3>(-30.641947, 302.514984, -240.807571),
		TVector<float, 3>(396.797455, 465.584167, -356.327606),
		TVector<float, 3>(-305.894348, 64.769714, -49.091156),
		TVector<float, 3>(250.053772, -158.923706, -142.490967),
		TVector<float, 3>(-401.443176, 418.603394, 176.916687),
		TVector<float, 3>(-359.780640, 400.231323, 497.037109),
		TVector<float, 3>(401.878052, 321.170319, 298.311890),
		TVector<float, 3>(181.906036, 267.527496, -17.216560),
		TVector<float, 3>(445.974976, 338.542999, 201.290375),
		TVector<float, 3>(89.655312, 379.368988, -201.071686),
		TVector<float, 3>(6.037948, 284.681519, 54.224926),
		TVector<float, 3>(387.153778, -196.234482, -233.471909),
		TVector<float, 3>(-217.539261, -418.254059, -285.199127),
		TVector<float, 3>(303.981140, 27.526760, -62.991222),
		TVector<float, 3>(-44.497070, 444.238495, 142.227112),
		TVector<float, 3>(-99.575264, 332.114532, 35.407833),
		TVector<float, 3>(195.880249, -260.194214, -362.574951),
		TVector<float, 3>(-310.030914, 3.017864, -272.879150),
		TVector<float, 3>(309.401825, 131.976395, -162.977493),
		TVector<float, 3>(177.787186, 331.832581, 483.424805),
		TVector<float, 3>(111.223648, 171.324600, 22.910141),
		TVector<float, 3>(-320.300995, 32.750374, 155.601318),
		TVector<float, 3>(136.154068, -243.289734, 435.059937),
		TVector<float, 3>(31.219498, -384.007172, -14.303829),
		TVector<float, 3>(346.465851, 161.306412, 51.708912),
		TVector<float, 3>(441.630371, -348.427002, -263.559570),
		TVector<float, 3>(-58.018818, -284.034180, 370.620483),
		TVector<float, 3>(295.010162, 259.240082, 449.701813),
		TVector<float, 3>(-202.479752, -105.063347, -493.480896),
		TVector<float, 3>(-429.426727, 434.960815, 393.926544),
		TVector<float, 3>(370.617340, -167.715836, -253.901047),
		TVector<float, 3>(447.859619, 319.031830, 391.865295),
		TVector<float, 3>(-418.072998, -350.835144, -340.582916),
		TVector<float, 3>(-71.606926, -98.131294, 311.736633),
		TVector<float, 3>(-12.847464, -193.450745, 191.561478),
		TVector<float, 3>(-287.912384, -489.076385, 170.124374),
		TVector<float, 3>(-468.832947, -202.537277, -48.793205),
		TVector<float, 3>(-10.518171, -6.994138, -135.136917),
		TVector<float, 3>(266.009308, -153.235062, -30.693954),
		TVector<float, 3>(37.256340, 385.157379, 87.387573),
		TVector<float, 3>(-140.082138, -425.385742, 341.019958),
		TVector<float, 3>(62.312660, -298.999664, -129.484314),
		TVector<float, 3>(234.936493, -375.094360, 175.418106),
		TVector<float, 3>(-497.933197, -132.034790, 32.442165),
		TVector<float, 3>(110.264862, 182.039871, -406.137421),
		TVector<float, 3>(91.399551, -66.263954, 47.827297),
		TVector<float, 3>(43.856106, -75.838997, 365.306824),
		TVector<float, 3>(-441.755920, 357.432800, 345.410248),
		TVector<float, 3>(219.876984, 198.773697, 237.144592),
		TVector<float, 3>(-159.568146, -90.452614, -18.121225),
		TVector<float, 3>(367.322815, -401.861237, -172.313202),
		TVector<float, 3>(136.421295, -497.713348, 263.639435),
		TVector<float, 3>(396.573547, -77.614662, 381.327637),
		TVector<float, 3>(-98.037285, -392.667755, -204.347610),
		TVector<float, 3>(-53.931679, 289.289734, 248.584946),
		TVector<float, 3>(231.024994, 250.363159, -5.442340),
		TVector<float, 3>(-402.099304, 243.218750, 361.723175),
		TVector<float, 3>(-1.935601, 307.764435, -339.409912),
		TVector<float, 3>(88.147064, -463.239990, 468.840607),
		TVector<float, 3>(-445.917816, -256.462616, 436.532898),
		TVector<float, 3>(485.821045, 273.518890, 78.126137),
		TVector<float, 3>(258.126770, 305.317322, 50.478436),
		TVector<float, 3>(346.955383, 222.997009, -72.118675),
		TVector<float, 3>(35.718273, -279.336914, -245.215576),
		TVector<float, 3>(17.232561, 221.282135, 280.632568),
		TVector<float, 3>(-246.400085, 304.329712, 486.540649),
		TVector<float, 3>(-418.094635, 188.411026, -260.046844),
		TVector<float, 3>(486.912903, 44.777508, 443.996185),
		TVector<float, 3>(17.106686, 218.798126, 386.416229),
		TVector<float, 3>(-199.415588, -120.824661, -229.835831),
		TVector<float, 3>(-142.555557, -216.238892, 442.719879),
		TVector<float, 3>(329.952850, 289.765747, 183.226959),
		TVector<float, 3>(337.699524, -415.055847, 380.550476),
		TVector<float, 3>(59.022850, -231.557846, 410.690521),
		TVector<float, 3>(77.245583, -351.342957, 472.001251),
		TVector<float, 3>(271.513184, 475.373505, -70.126228),
		TVector<float, 3>(425.505096, -439.727844, -181.198532),
		TVector<float, 3>(-192.034790, -414.214447, 324.280182),
		TVector<float, 3>(423.361084, 340.175171, -81.980225),
		TVector<float, 3>(-325.619263, -157.283859, 259.649689),
		TVector<float, 3>(-359.773743, -297.939148, -26.119272),
		TVector<float, 3>(200.246796, 246.236435, 323.897949),
		TVector<float, 3>(37.607941, 501.192535, -15.849398),
		TVector<float, 3>(-209.371429, 330.160065, 373.491333),
		TVector<float, 3>(70.644516, 442.666077, 72.106834),
		TVector<float, 3>(-310.009735, -379.638428, -89.026405),
		TVector<float, 3>(-249.964935, 434.356415, -299.653320),
		TVector<float, 3>(138.560974, -403.578217, 172.654572),
		TVector<float, 3>(-194.141479, -397.234161, -2.258315),
		TVector<float, 3>(304.175171, 101.337479, 357.824341),
		TVector<float, 3>(332.062500, 435.855438, -331.452698),
		TVector<float, 3>(-317.252686, 231.718094, -228.020706),
		TVector<float, 3>(-485.773590, -56.148117, 396.037659),
		TVector<float, 3>(372.522552, 288.538727, 248.570251),
		TVector<float, 3>(272.492981, -110.849731, -259.996185),
		TVector<float, 3>(-260.067932, 174.032272, -312.912628),
		TVector<float, 3>(-394.346222, -55.168137, -439.820313),
		TVector<float, 3>(-307.365601, -105.651131, 432.960999),
		TVector<float, 3>(48.140404, -479.203003, -443.260468),
		TVector<float, 3>(-330.982269, -367.176636, 114.752853),
		TVector<float, 3>(397.082916, 244.712494, 127.284767),
		TVector<float, 3>(343.038757, 18.491329, -69.749680),
		TVector<float, 3>(263.772644, 405.052185, 9.259210),
		TVector<float, 3>(-359.616364, -187.057220, -106.649704),
		TVector<float, 3>(-353.354492, -412.111328, 203.061890),
		TVector<float, 3>(102.048737, 495.084595, 442.758209),
		TVector<float, 3>(-456.208130, 31.061054, -7.214787),
		TVector<float, 3>(-87.615944, -60.893303, 490.913055),
		TVector<float, 3>(312.474152, 277.960449, 327.582214),
		TVector<float, 3>(419.000427, -340.344177, -202.477768),
		TVector<float, 3>(77.631340, -359.942352, 86.030457),
		TVector<float, 3>(-448.060791, -253.719330, 158.454056),
		TVector<float, 3>(-323.966583, 254.895660, 498.216370),
		TVector<float, 3>(-257.010193, -63.992962, -238.286270),
		TVector<float, 3>(-152.542801, 142.612427, 278.131805),
		TVector<float, 3>(-290.204071, 17.431198, 455.071289),
		TVector<float, 3>(-84.454140, -481.627380, -81.845963),
		TVector<float, 3>(-49.251705, 492.814240, -400.990356),
		TVector<float, 3>(133.434860, 211.286331, 264.486816),
		TVector<float, 3>(160.666306, -453.340088, -267.420532),
		TVector<float, 3>(-102.160011, -81.536636, 435.788422),
		TVector<float, 3>(-327.481659, 53.605957, -5.233283),
		TVector<float, 3>(-390.630493, 263.710205, 250.741226),
		TVector<float, 3>(-212.689941, -290.729736, -452.812622),
		TVector<float, 3>(323.304108, -189.292877, 282.542725),
		TVector<float, 3>(200.388931, 88.663307, 264.143341),
		TVector<float, 3>(395.102051, -342.192535, -432.549072),
		TVector<float, 3>(95.515923, 104.375679, -226.292114),
		TVector<float, 3>(-78.489449, 133.073410, 166.310944),
		TVector<float, 3>(59.702744, -322.175354, 64.118088),
		TVector<float, 3>(176.845703, -421.282440, -451.053467),
		TVector<float, 3>(23.051291, -238.145432, 124.031837),
		TVector<float, 3>(-322.084900, 336.274353, 475.586243),
		TVector<float, 3>(228.963364, 280.838470, 445.000275),
		TVector<float, 3>(-67.625320, 43.560417, 162.803314),
		TVector<float, 3>(313.961578, 144.568924, 27.833916),
		TVector<float, 3>(-437.552124, 39.851318, 246.364685),
		TVector<float, 3>(293.991394, 26.638645, -466.483185),
		TVector<float, 3>(-15.643284, -32.327515, -108.133560),
		TVector<float, 3>(-174.976273, 282.457123, 49.708904),
		TVector<float, 3>(-403.294220, 175.853073, -278.381775),
		TVector<float, 3>(260.787811, -468.081085, 73.374443),
		TVector<float, 3>(-298.561798, -196.181564, 296.001373),
		TVector<float, 3>(-108.103348, 341.735809, 404.463043),
		TVector<float, 3>(280.621155, -392.227814, 274.551453),
		TVector<float, 3>(48.302628, 274.015106, -217.826645),
		TVector<float, 3>(198.892838, -469.775574, -230.302353),
		TVector<float, 3>(146.142456, 13.736415, 198.004166),
		TVector<float, 3>(68.312065, 412.105286, -43.762749),
		TVector<float, 3>(414.404816, 439.540619, -112.330765),
		TVector<float, 3>(-108.059639, -180.368195, -196.176239),
		TVector<float, 3>(187.269501, 225.511902, 71.477402),
		TVector<float, 3>(485.541351, 122.598534, 324.112823),
		TVector<float, 3>(-31.154594, -159.426315, -140.581116),
		TVector<float, 3>(452.245392, 59.953800, 147.865860),
		TVector<float, 3>(-358.633209, 37.629639, -147.439911),
		TVector<float, 3>(363.269043, -186.428619, 180.844971),
		TVector<float, 3>(-362.337738, -259.660675, -238.166443),
		TVector<float, 3>(-290.981842, 248.433441, -320.657440),
		TVector<float, 3>(228.107422, -423.695282, 73.042740),
		TVector<float, 3>(-178.730164, -220.365707, -27.782463),
		TVector<float, 3>(-360.515015, 17.043581, 432.639526),
		TVector<float, 3>(88.342270, 184.069382, 491.987976),
		TVector<float, 3>(-112.328255, 366.327332, 269.742981),
		TVector<float, 3>(-93.778374, 263.024628, -443.282806),
		TVector<float, 3>(-63.793636, -481.682739, 401.505432),
		TVector<float, 3>(285.116882, -33.987297, 27.663197),
		TVector<float, 3>(-118.394234, -450.533020, 462.363037),
		TVector<float, 3>(-330.916351, 17.028519, 351.805328),
		TVector<float, 3>(386.197723, -264.465179, 262.607361),
		TVector<float, 3>(276.885010, -183.275894, -265.133789),
		TVector<float, 3>(-379.101471, 84.408394, -147.433487),
		TVector<float, 3>(342.329346, 268.923859, 253.932343),
		TVector<float, 3>(-435.106415, -184.667892, 463.423523),
		TVector<float, 3>(-100.211296, -182.488327, -477.911987),
		TVector<float, 3>(432.110748, 298.131561, -231.481735),
		TVector<float, 3>(366.625366, 466.135040, 240.753647),
		TVector<float, 3>(-483.727173, -109.737434, 47.036072),
		TVector<float, 3>(176.910110, 77.377747, 396.179718),
		TVector<float, 3>(-169.598343, -471.004517, 57.093140),
		TVector<float, 3>(-168.729630, 230.448380, 106.623581),
		TVector<float, 3>(-232.800537, 383.889404, -474.429871),
		TVector<float, 3>(61.024345, -219.489746, 263.532928),
		TVector<float, 3>(44.017464, -82.668983, -207.454208),
		TVector<float, 3>(-372.388428, 363.136261, -177.321442),
		TVector<float, 3>(221.367264, -486.005707, 42.866577),
		TVector<float, 3>(366.508972, -503.322815, 41.103863),
		TVector<float, 3>(-425.799866, 335.874146, 31.120129),
		TVector<float, 3>(-244.356094, -159.913300, -226.389099),
		TVector<float, 3>(-465.340149, 77.238518, -330.249329),
		TVector<float, 3>(54.811268, -224.414108, 391.816467),
		TVector<float, 3>(-416.615875, 253.186554, -183.422897),
		TVector<float, 3>(-471.347626, 111.408249, -131.995667),
		TVector<float, 3>(-328.718872, -181.054932, 308.038177),
		TVector<float, 3>(26.176086, -140.261536, -308.605072),
		TVector<float, 3>(452.054291, -152.797791, 105.357086),
		TVector<float, 3>(460.707245, -452.626190, -245.706589),
		TVector<float, 3>(144.994659, -173.984665, 20.164036),
		TVector<float, 3>(353.056702, 356.093658, -337.417816),
		TVector<float, 3>(420.200165, -369.286713, 53.554878),
		TVector<float, 3>(-498.443176, 397.906555, 161.707779),
		TVector<float, 3>(204.318344, 340.892700, 248.180893),
		TVector<float, 3>(-103.978828, 79.519547, -176.997665),
		TVector<float, 3>(300.538391, -106.618523, 376.380005),
		TVector<float, 3>(-88.699852, -298.883545, 463.044220),
		TVector<float, 3>(-189.133194, -120.374062, 471.720123),
		TVector<float, 3>(-232.826477, 191.292572, -386.231079),
		TVector<float, 3>(-503.215485, 422.156708, 227.584488),
		TVector<float, 3>(-41.182899, -445.773254, -311.649292),
		TVector<float, 3>(-170.514404, 504.357971, 228.764755),
		TVector<float, 3>(215.648605, 395.522705, -1.628571),
		TVector<float, 3>(-213.455185, -319.496399, 139.415359),
		TVector<float, 3>(-130.202209, 440.260559, -155.865982),
		TVector<float, 3>(67.849815, -280.295532, -388.072510),
		TVector<float, 3>(121.543549, -331.289948, -44.286308),
		TVector<float, 3>(-317.588348, 407.176056, -57.182713),
		TVector<float, 3>(-365.286926, 120.554642, 389.323456),
		TVector<float, 3>(-257.592987, 489.830963, -430.179535),
		TVector<float, 3>(-137.035355, 156.895401, -78.515114),
		TVector<float, 3>(252.097168, 391.660858, 476.311401),
		TVector<float, 3>(-67.612610, -471.811188, -409.967621),
		TVector<float, 3>(107.611862, -289.668182, 215.391602),
		TVector<float, 3>(42.352196, 391.627838, -207.757401),
		TVector<float, 3>(-131.048630, 400.819214, -298.737122),
		TVector<float, 3>(-33.783573, 291.254639, -107.200447),
		TVector<float, 3>(245.426544, -13.329924, 49.717831),
		TVector<float, 3>(-261.175873, -217.770386, -21.352859),
		TVector<float, 3>(-329.423218, 76.655823, -35.446362),
		TVector<float, 3>(-374.217041, -359.624146, -497.894775),
		TVector<float, 3>(99.257133, 494.434082, -181.241455),
		TVector<float, 3>(-132.451004, 406.858673, -34.047302),
		TVector<float, 3>(-131.861893, -321.896790, -94.569695),
		TVector<float, 3>(477.703705, -324.566528, -400.340240),
		TVector<float, 3>(-356.651123, -208.791153, 307.570404),
		TVector<float, 3>(412.649048, -390.665863, -121.070847),
		TVector<float, 3>(256.742371, -60.640480, -494.739807),
		TVector<float, 3>(489.897217, -288.228210, 456.471680),
		TVector<float, 3>(-508.189087, 95.922569, -32.517235),
		TVector<float, 3>(306.148956, 304.306885, -231.333603),
		TVector<float, 3>(85.316963, -304.270569, 292.722046),
		TVector<float, 3>(285.805328, -30.749529, 114.658882),
		TVector<float, 3>(63.009415, -470.683807, -199.886246),
		TVector<float, 3>(-387.160553, 54.602676, -190.766418),
		TVector<float, 3>(-176.493454, 415.552216, -223.084976),
		TVector<float, 3>(216.595490, -177.922791, 68.296440),
		TVector<float, 3>(308.156647, -350.138519, 148.473419),
		TVector<float, 3>(-209.073914, 424.546326, -465.904449),
		TVector<float, 3>(-433.986603, 384.053772, -36.132854),
		TVector<float, 3>(-478.188690, -490.482056, 117.804314),
		TVector<float, 3>(-357.817078, 212.460587, -371.945007),
		TVector<float, 3>(-259.424530, -339.205597, -341.291931),
		TVector<float, 3>(-359.928253, -54.288857, 190.037048),
		TVector<float, 3>(321.722168, -401.531952, 301.523346)
	};

	template<class T>
	bool GetClosestPointsTest1(ExampleResponse&& R)
	{
		TSpatialHash<float> SpatialHash(Particles_1000, 18.f);
		// TSpatialHash<T>::Init() Time is 0.000123
		TVector<T, 3> Particle_LookUp(122.0, 214.0, 3.0);

		// Get all the points in MaxRadius
		TArray<int32> ClosestPoints = SpatialHash.GetClosestPoints(Particle_LookUp, 122.0);
		// TSpatialHash<T>::GetClosestPoints() Time is 0.000096

		R.ExpectTrue(ClosestPoints.Num() == 7);

		TSet<int32> CPSet(ClosestPoints);
		R.ExpectTrue(CPSet.Contains(767));
		R.ExpectTrue(CPSet.Contains(499));
		R.ExpectTrue(CPSet.Contains(412));
		R.ExpectTrue(CPSet.Contains(754));
		R.ExpectTrue(CPSet.Contains(898));
		R.ExpectTrue(CPSet.Contains(55));
		R.ExpectTrue(CPSet.Contains(802));

		R.ExpectTrue(!CPSet.Contains(800));
		R.ExpectTrue(!CPSet.Contains(700));
		R.ExpectTrue(!CPSet.Contains(1));
		R.ExpectTrue(!CPSet.Contains(900));
		R.ExpectTrue(!CPSet.Contains(498));

		// ----------------------------------------------------------

		TVector<T, 3> Particle_LookUp1(-234.78, -19.31, 444.12);

		// Get all the points in MaxRadius
		TArray<int32> ClosestPoints1 = SpatialHash.GetClosestPoints(Particle_LookUp1, 199.0);
		// TSpatialHash<T>::GetClosestPoints() Time is 0.000121

		R.ExpectTrue(ClosestPoints1.Num() == 24);

		TSet<int32> CPSet1(ClosestPoints1);
		R.ExpectTrue(CPSet1.Contains(402));
		R.ExpectTrue(CPSet1.Contains(53));
		R.ExpectTrue(CPSet1.Contains(862));
		R.ExpectTrue(CPSet1.Contains(403));
		R.ExpectTrue(CPSet1.Contains(21));
		R.ExpectTrue(CPSet1.Contains(844));
		R.ExpectTrue(CPSet1.Contains(952));
		R.ExpectTrue(CPSet1.Contains(612));
		R.ExpectTrue(CPSet1.Contains(908));
		R.ExpectTrue(CPSet1.Contains(531));
		R.ExpectTrue(CPSet1.Contains(353));
		R.ExpectTrue(CPSet1.Contains(915));
		R.ExpectTrue(CPSet1.Contains(270));
		R.ExpectTrue(CPSet1.Contains(867));
		R.ExpectTrue(CPSet1.Contains(551));
		R.ExpectTrue(CPSet1.Contains(101));
		R.ExpectTrue(CPSet1.Contains(244));
		R.ExpectTrue(CPSet1.Contains(399));
		R.ExpectTrue(CPSet1.Contains(854));
		R.ExpectTrue(CPSet1.Contains(498));
		R.ExpectTrue(CPSet1.Contains(462));
		R.ExpectTrue(CPSet1.Contains(139));
		R.ExpectTrue(CPSet1.Contains(464));
		R.ExpectTrue(CPSet1.Contains(963));

		R.ExpectTrue(!CPSet1.Contains(1));

		// ----------------------------------------------------------

		TVector<T, 3> Particle_LookUp2(499.0, 222.0, -12.0);

		// Get all the points in MaxRadius
		TArray<int32> ClosestPoints2 = SpatialHash.GetClosestPoints(Particle_LookUp2, 52.0);
		// TSpatialHash<T>::GetClosestPoints() Time is 0.000008

		R.ExpectTrue(ClosestPoints2.Num() == 1);

		TSet<int32> CPSet2(ClosestPoints2);
		R.ExpectTrue(CPSet2.Contains(238));

		R.ExpectTrue(!CPSet2.Contains(403));

		// ----------------------------------------------------------

		TVector<T, 3> Particle_LookUp3(-333.0, -129.0, -489.0);

		// Get all the points in MaxRadius
		TArray<int32> ClosestPoints3 = SpatialHash.GetClosestPoints(Particle_LookUp3, 122.0);
		// TSpatialHash<T>::GetClosestPoints() Time is 0.000035

		R.ExpectTrue(ClosestPoints3.Num() == 5);

		TSet<int32> CPSet3(ClosestPoints3);
		R.ExpectTrue(CPSet3.Contains(229));
		R.ExpectTrue(CPSet3.Contains(78));
		R.ExpectTrue(CPSet3.Contains(379));
		R.ExpectTrue(CPSet3.Contains(843));
		R.ExpectTrue(CPSet3.Contains(700));

		R.ExpectTrue(!CPSet3.Contains(1));

		return !R.HasError();
	}
	template bool GetClosestPointsTest1<float>(ExampleResponse&& R);

	template<class T>
	bool GetClosestPointsTest2(ExampleResponse&& R)
	{
		TSpatialHash<float> SpatialHash(Particles_1000);
		// TSpatialHash<T>::Init() Time is 0.000080
		TVector<T, 3> Particle_LookUp(122.0, 214.0, 3.0);

		// Get all the points in MaxRadius
		TArray<int32> ClosestPoints = SpatialHash.GetClosestPoints(Particle_LookUp, 122.0);
		// TSpatialHash<T>::GetClosestPoints() Time is 0.000039

		R.ExpectTrue(ClosestPoints.Num() == 7);

		TSet<int32> CPSet(ClosestPoints);
		R.ExpectTrue(CPSet.Contains(767));
		R.ExpectTrue(CPSet.Contains(499));
		R.ExpectTrue(CPSet.Contains(412));
		R.ExpectTrue(CPSet.Contains(754));
		R.ExpectTrue(CPSet.Contains(898));
		R.ExpectTrue(CPSet.Contains(55));
		R.ExpectTrue(CPSet.Contains(802));

		R.ExpectTrue(!CPSet.Contains(900));
		R.ExpectTrue(!CPSet.Contains(498));

		// ----------------------------------------------------------

		TVector<T, 3> Particle_LookUp1(-234.78, -19.31, 444.12);

		// Get all the points in MaxRadius
		TArray<int32> ClosestPoints1 = SpatialHash.GetClosestPoints(Particle_LookUp1, 199.0);
		// TSpatialHash<T>::GetClosestPoints() Time is 0.000046

		R.ExpectTrue(ClosestPoints1.Num() == 24);

		TSet<int32> CPSet1(ClosestPoints1);
		R.ExpectTrue(CPSet1.Contains(402));
		R.ExpectTrue(CPSet1.Contains(53));
		R.ExpectTrue(CPSet1.Contains(862));
		R.ExpectTrue(CPSet1.Contains(403));
		R.ExpectTrue(CPSet1.Contains(21));
		R.ExpectTrue(CPSet1.Contains(844));
		R.ExpectTrue(CPSet1.Contains(952));
		R.ExpectTrue(CPSet1.Contains(612));
		R.ExpectTrue(CPSet1.Contains(908));
		R.ExpectTrue(CPSet1.Contains(531));
		R.ExpectTrue(CPSet1.Contains(353));
		R.ExpectTrue(CPSet1.Contains(915));
		R.ExpectTrue(CPSet1.Contains(270));
		R.ExpectTrue(CPSet1.Contains(867));
		R.ExpectTrue(CPSet1.Contains(551));
		R.ExpectTrue(CPSet1.Contains(101));
		R.ExpectTrue(CPSet1.Contains(244));
		R.ExpectTrue(CPSet1.Contains(399));
		R.ExpectTrue(CPSet1.Contains(854));
		R.ExpectTrue(CPSet1.Contains(498));
		R.ExpectTrue(CPSet1.Contains(462));
		R.ExpectTrue(CPSet1.Contains(139));
		R.ExpectTrue(CPSet1.Contains(464));
		R.ExpectTrue(CPSet1.Contains(963));

		R.ExpectTrue(!CPSet1.Contains(1));

		// ----------------------------------------------------------

		TVector<T, 3> Particle_LookUp2(499.0, 222.0, -12.0);

		// Get all the points in MaxRadius
		TArray<int32> ClosestPoints2 = SpatialHash.GetClosestPoints(Particle_LookUp2, 52.0);
		// TSpatialHash<T>::GetClosestPoints() Time is 0.000003

		R.ExpectTrue(ClosestPoints2.Num() == 1);

		TSet<int32> CPSet2(ClosestPoints2);
		R.ExpectTrue(CPSet2.Contains(238));

		R.ExpectTrue(!CPSet2.Contains(403));

		// ----------------------------------------------------------

		TVector<T, 3> Particle_LookUp3(-333.0, -129.0, -489.0);

		// Get all the points in MaxRadius
		TArray<int32> ClosestPoints3 = SpatialHash.GetClosestPoints(Particle_LookUp3, 122.0);
		// TSpatialHash<T>::GetClosestPoints() Time is 0.000020

		R.ExpectTrue(ClosestPoints3.Num() == 5);

		TSet<int32> CPSet3(ClosestPoints3);
		R.ExpectTrue(CPSet3.Contains(229));
		R.ExpectTrue(CPSet3.Contains(78));
		R.ExpectTrue(CPSet3.Contains(379));
		R.ExpectTrue(CPSet3.Contains(843));
		R.ExpectTrue(CPSet3.Contains(700));

		R.ExpectTrue(!CPSet3.Contains(1));

		return !R.HasError();

	}
	template bool GetClosestPointsTest2<float>(ExampleResponse&& R);

	template<class T>
	bool GetClosestPointsTest3(ExampleResponse&& R)
	{
		TSpatialHash<float> SpatialHash(Particles_1000);
		// TSpatialHash<T>::Init() Time is 0.000080
		TVector<T, 3> Particle_LookUp(122.0, 214.0, 3.0);

		// Get all the points in MaxRadius
		TArray<int32> ClosestPoints = SpatialHash.GetClosestPoints(Particle_LookUp, 122.0, 12);
		// TSpatialHash<T>::GetClosestPoints() Time is 0.000050

		R.ExpectTrue(ClosestPoints.Num() == 7);

		R.ExpectTrue(ClosestPoints[0] == 767);
		R.ExpectTrue(ClosestPoints[1] == 499);
		R.ExpectTrue(ClosestPoints[2] == 412);
		R.ExpectTrue(ClosestPoints[3] == 754);
		R.ExpectTrue(ClosestPoints[4] == 898);
		R.ExpectTrue(ClosestPoints[5] == 55);
		R.ExpectTrue(ClosestPoints[6] == 802);

		// ----------------------------------------------------------

		TVector<T, 3> Particle_LookUp1(-234.78, -19.31, 444.12);

		// Get all the points in MaxRadius
		TArray<int32> ClosestPoints1 = SpatialHash.GetClosestPoints(Particle_LookUp1, 199.0, 20);
		// TSpatialHash<T>::GetClosestPoints() Time is 0.000065

		R.ExpectTrue(ClosestPoints1.Num() == 20);

		R.ExpectTrue(ClosestPoints1[0] == 402);
		R.ExpectTrue(ClosestPoints1[1] == 53);
		R.ExpectTrue(ClosestPoints1[2] == 862);
		R.ExpectTrue(ClosestPoints1[3] == 403);
		R.ExpectTrue(ClosestPoints1[4] == 21);
		R.ExpectTrue(ClosestPoints1[5] == 844);
		R.ExpectTrue(ClosestPoints1[6] == 952);
		R.ExpectTrue(ClosestPoints1[7] == 612);
		R.ExpectTrue(ClosestPoints1[8] == 908);
		R.ExpectTrue(ClosestPoints1[9] == 531);
		R.ExpectTrue(ClosestPoints1[10] == 353);
		R.ExpectTrue(ClosestPoints1[11] == 915);
		R.ExpectTrue(ClosestPoints1[12] == 270);
		R.ExpectTrue(ClosestPoints1[13] == 867);
		R.ExpectTrue(ClosestPoints1[14] == 551);
		R.ExpectTrue(ClosestPoints1[15] == 101);
		R.ExpectTrue(ClosestPoints1[16] == 244);
		R.ExpectTrue(ClosestPoints1[17] == 399);
		R.ExpectTrue(ClosestPoints1[18] == 854);
		R.ExpectTrue(ClosestPoints1[19] == 498);

		// ----------------------------------------------------------

		TVector<T, 3> Particle_LookUp2(499.0, 222.0, -12.0);

		// Get all the points in MaxRadius
		TArray<int32> ClosestPoints2 = SpatialHash.GetClosestPoints(Particle_LookUp2, 200.0, 5);
		// TSpatialHash<T>::GetClosestPoints() Time is 0.000048

		R.ExpectTrue(ClosestPoints2.Num() == 5);

		R.ExpectTrue(ClosestPoints2[0] == 238);
		R.ExpectTrue(ClosestPoints2[1] == 807);
		R.ExpectTrue(ClosestPoints2[2] == 149);
		R.ExpectTrue(ClosestPoints2[3] == 284);
		R.ExpectTrue(ClosestPoints2[4] == 245);

		// ----------------------------------------------------------

		TVector<T, 3> Particle_LookUp3(-333.0, -129.0, -489.0);

		// Get all the points in MaxRadius
		TArray<int32> ClosestPoints3 = SpatialHash.GetClosestPoints(Particle_LookUp3, 122.0, 12);
		// TSpatialHash<T>::GetClosestPoints() Time is 0.000024

		R.ExpectTrue(ClosestPoints3.Num() == 5);

		R.ExpectTrue(ClosestPoints3[0] == 229);
		R.ExpectTrue(ClosestPoints3[1] == 78);
		R.ExpectTrue(ClosestPoints3[2] == 379);
		R.ExpectTrue(ClosestPoints3[3] == 843);
		R.ExpectTrue(ClosestPoints3[4] == 700);

		// ----------------------------------------------------------

		TVector<T, 3> Particle_LookUp4(1.1, 2.2, 3.3);

		// Get all the points in MaxRadius
		TArray<int32> ClosestPoints4 = SpatialHash.GetClosestPoints(Particle_LookUp4, 250.0, 100000);
		// TSpatialHash<T>::GetClosestPoints() Time is 0.000147

		R.ExpectTrue(ClosestPoints4.Num() == 63);

		// ----------------------------------------------------------

		TVector<T, 3> Particle_LookUp5(1.1, 2.2, 3.3);

		// Get all the points in MaxRadius
		TArray<int32> ClosestPoints5 = SpatialHash.GetClosestPoints(Particle_LookUp5, 1250.0, 100000);
		// TSpatialHash<T>::GetClosestPoints() Time is 0.000782

		R.ExpectTrue(ClosestPoints5.Num() == 1000);

		return !R.HasError();

	}
	template bool GetClosestPointsTest3<float>(ExampleResponse&& R);

	template<class T>
	bool GetClosestPointTest(ExampleResponse&& R)
	{
		TSpatialHash<float> SpatialHash(Particles_1000);
		// TSpatialHash<T>::Init() Time is 0.000087
		TVector<T, 3> Particle_LookUp(0.0, 122.0, -23.0);

		// Get all the points in MaxRadius
		int32 ClosestPoint = SpatialHash.GetClosestPoint(Particle_LookUp);
		// TSpatialHash<T>::GetClosestPoints() Time is 0.000005

		R.ExpectTrue(ClosestPoint == 568);

		// ----------------------------------------------------------

		TVector<T, 3> Particle_LookUp1(-34.0, -56.0, 444.0);

		// Get all the points in MaxRadius
		int32 ClosestPoint1 = SpatialHash.GetClosestPoint(Particle_LookUp1);
		// TSpatialHash<T>::GetClosestPoints() Time is 0.000005

		R.ExpectTrue(ClosestPoint1 == 854);

		// ----------------------------------------------------------

		TVector<T, 3> Particle_LookUp2(12.34, 437.8, -345.67);

		// Get all the points in MaxRadius
		int32 ClosestPoint2 = SpatialHash.GetClosestPoint(Particle_LookUp2);
		// TSpatialHash<T>::GetClosestPoints() Time is 0.000005

		R.ExpectTrue(ClosestPoint2 == 500);

		// ----------------------------------------------------------

		TVector<T, 3> Particle_LookUp3(10000.0, 10000.0, 10000.0);

		int32 ClosestPoint3 = SpatialHash.GetClosestPoint(Particle_LookUp3);
		// TSpatialHash<T>::GetClosestPoints() Time is 0.000005

		R.ExpectTrue(ClosestPoint3 == 161);

		// ----------------------------------------------------------

		TVector<T, 3> Particle_LookUp4(-1234.0, 0.1234, 1234.0);

		int32 ClosestPoint4 = SpatialHash.GetClosestPoint(Particle_LookUp4);
		// TSpatialHash<T>::GetClosestPoints() Time is 0.000005

		R.ExpectTrue(ClosestPoint4 == 431);

		return !R.HasError();

	}
	template bool GetClosestPointTest<float>(ExampleResponse&& R);

	template<class T>
	bool HashTableUpdateTest(ExampleResponse&& R)
	{
		TSpatialHash<float> SpatialHash(Particles_1000);
		// TSpatialHash<T>::Init() Time is 0.000087
		TVector<T, 3> Particle_LookUp(0.0, 122.0, -23.0);

		int32 ClosestPoint = SpatialHash.GetClosestPoint(Particle_LookUp);
		// TSpatialHash<T>::GetClosestPoints() Time is 0.000005

		R.ExpectTrue(ClosestPoint == 568);

		SpatialHash.Update(15.0);
		int32 ClosestPoint1 = SpatialHash.GetClosestPoint(Particle_LookUp);
		// TSpatialHash<T>::GetClosestPoints() Time is 0.000005

		R.ExpectTrue(ClosestPoint1 == 568);

		// ----------------------------------------------------------

		TSpatialHash<float> SpatialHash2(Particles_1000);
		TVector<T, 3> Particle_LookUp2(-333.0, -129.0, -489.0);

		// Get all the points in MaxRadius
		TArray<int32> ClosestPoints2 = SpatialHash2.GetClosestPoints(Particle_LookUp2, 122.0, 12);
		// TSpatialHash<T>::GetClosestPoints() Time is 0.000024

		R.ExpectTrue(ClosestPoints2.Num() == 5);

		R.ExpectTrue(ClosestPoints2[0] == 229);
		R.ExpectTrue(ClosestPoints2[1] == 78);
		R.ExpectTrue(ClosestPoints2[2] == 379);
		R.ExpectTrue(ClosestPoints2[3] == 843);
		R.ExpectTrue(ClosestPoints2[4] == 700);

		SpatialHash2.Update(35.0);
		TArray<int32> ClosestPoints3 = SpatialHash2.GetClosestPoints(Particle_LookUp2, 122.0, 12);
		// TSpatialHash<T>::GetClosestPoints() Time is 0.000005

		R.ExpectTrue(ClosestPoints3.Num() == 5);

		R.ExpectTrue(ClosestPoints3[0] == 229);
		R.ExpectTrue(ClosestPoints3[1] == 78);
		R.ExpectTrue(ClosestPoints3[2] == 379);
		R.ExpectTrue(ClosestPoints3[3] == 843);
		R.ExpectTrue(ClosestPoints3[4] == 700);

		return !R.HasError();

	}
	template bool HashTableUpdateTest<float>(ExampleResponse&& R);

	template<class T>
	bool HashTablePressureTest(ExampleResponse&& R)
	{
		const int32 NUM_PARTICLES = 1000000;
		const float BOUNDARY_MIN = -1000.0;
		const float BOUNDARY_MAX = 1000.0;
		TArray<TVector<float, 3>> Particles;
		for (int32 Idx = 0; Idx < NUM_PARTICLES; ++Idx)
		{
			Particles.Add(TVector<float, 3>(FMath::RandRange(BOUNDARY_MIN, BOUNDARY_MAX), FMath::RandRange(BOUNDARY_MIN, BOUNDARY_MAX), FMath::RandRange(BOUNDARY_MIN, BOUNDARY_MAX)));
		}

		TSpatialHash<float> SpatialHash(Particles);
		// TSpatialHash<T>::Init() Time is 0.029013
		
		TVector<T, 3> Particle_LookUp(0.0, 122.0, -23.0);
		TArray<int32> ClosestPoints = SpatialHash.GetClosestPoints(Particle_LookUp, 500.0, 150);
		// TSpatialHash<T>::GetClosestPoints() Time is 0.073857

		TArray<int32> ClosestPoints2 = SpatialHash.GetClosestPoints(Particle_LookUp, 500.0);
		// TSpatialHash<T>::GetClosestPoints() Time is 0.043953

		R.ExpectTrue(ClosestPoints.Num() == 150);

		return !R.HasError();

	}
	template bool HashTablePressureTest<float>(ExampleResponse&& R);

}

