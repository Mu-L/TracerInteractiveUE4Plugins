// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

#pragma once

/* -----------------------------------------------------------------
 * Stretch spring material
 * -----------------------------------------------------------------
 */

 void ResetStretchSpringMaterial(in int StrandsSize, in float YoungModulus, in float RodThickness, 
	in float RestLength, in float DeltaTime, in bool ProjectConstraint, in float MaterialDamping, out float OutMaterialCompliance, out float OutMaterialWeight, out float OutMaterialMultiplier, in int NodeOffset)
{
	// Compliance = 1.0 / (k * dt * dt)
	// with k = L * L * (Y * A / L) (the L*L term before is coming from the fact that our constraint is dL/L and not dL)
	// A is the cross section area (Pi * R * R), L is the rest length and Y is the young modulus
	OutMaterialCompliance = 4.0/(YoungModulus*PI*RodThickness*RestLength*RodThickness*DeltaTime*DeltaTime);

	const float SumInverseMass = !ProjectConstraint ? ( SharedInverseMass[GGroupThreadId.x] + SharedInverseMass[GGroupThreadId.x-1-NodeOffset] ) / (RestLength*RestLength) :
				SharedInverseMass[GGroupThreadId.x] / (RestLength*RestLength);

	const float SchurDiagonal = ( (1.0  + MaterialDamping / DeltaTime ) * SumInverseMass + OutMaterialCompliance );
	OutMaterialWeight = ( SchurDiagonal != 0.0 ) ? 1.0 / SchurDiagonal : 0.0;

	OutMaterialMultiplier = 0;
}


void UpdateStretchSpringMultiplier(in float RestLength, in float DeltaTime, in bool ProjectConstraint, in float MaterialDamping, in float MaterialCompliance, in float MaterialWeight, inout float OutMaterialMultiplier, in int NodeOffset)
{
	const int PreviousIndex = GGroupThreadId.x-1-NodeOffset;
	float3 EdgeDirection = SharedNodePosition[GGroupThreadId.x] - SharedNodePosition[PreviousIndex];
	const float3 DeltaVelocity = (EdgeDirection - ( SharedPreviousPosition[GGroupThreadId.x] - SharedPreviousPosition[PreviousIndex] ) ) / DeltaTime; 

	const float EdgeLength = length(EdgeDirection);
	EdgeDirection /= EdgeLength;

	// XPBD lagrange multiplier update : dL = -(C+compliance*L) / (dC * invM * dCt + alpha)
	const float DeltaLambda = -((EdgeLength-RestLength)/RestLength + OutMaterialMultiplier * MaterialCompliance + MaterialDamping * dot(EdgeDirection,DeltaVelocity)/RestLength ) * MaterialWeight;

	// L += dL
	OutMaterialMultiplier += DeltaLambda;

	// XPBD position update : dX = dL * dCt * invM
	const float3 PositionDelta = EdgeDirection * DeltaLambda / RestLength;

	// dX += dX
	SharedNodePosition[GGroupThreadId.x] += PositionDelta * SharedInverseMass[GGroupThreadId.x];
	if(!ProjectConstraint)
	{
		SharedNodePosition[PreviousIndex] -= PositionDelta * SharedInverseMass[PreviousIndex];
	}
}

void SetupStretchSpringMaterial(in int StrandsSize, in float YoungModulus, in float RodThickness, 
	in float RestLength, in float DeltaTime, in bool ProjectConstraint, in float MaterialDamping, out float OutMaterialCompliance, out float OutMaterialWeight, out float OutMaterialMultiplier)
{
	OutMaterialCompliance = 0.0;
	OutMaterialWeight = 0.0;
	OutMaterialMultiplier = 0.0;
	const int LocalIndex = (GGroupThreadId.x % StrandsSize);
	if( LocalIndex > 1 )
	{
		ResetStretchSpringMaterial(StrandsSize,YoungModulus,RodThickness,RestLength,DeltaTime,ProjectConstraint,MaterialDamping,OutMaterialCompliance,OutMaterialWeight,OutMaterialMultiplier,0);
	}
}

void SolveStretchSpringMaterial(in int StrandsSize, in float RestLength, in float DeltaTime, in float MaterialDamping, 
			in float MaterialCompliance, in float MaterialWeight, in float MaterialMultiplier, out float OutMaterialMultiplier)
{
	OutMaterialMultiplier = MaterialMultiplier;
	const int LocalIndex = (GGroupThreadId.x % StrandsSize);
	if( LocalIndex > 1)
	{
		const int IsRed = (GGroupThreadId.x % 2) == 0;
		// Process all the red rods
		if (IsRed)
		{	
			UpdateStretchSpringMultiplier(RestLength,DeltaTime,false,MaterialDamping,MaterialCompliance,MaterialWeight,OutMaterialMultiplier,0);
		}
		// Process all the black rods
		GroupMemoryBarrier(); 
		if (!IsRed)
		{
			UpdateStretchSpringMultiplier(RestLength,DeltaTime,false,MaterialDamping,MaterialCompliance,MaterialWeight,OutMaterialMultiplier,0);
		}
		GroupMemoryBarrier(); 
	}
} 

void ProjectStretchSpringMaterial(in int StrandsSize, in float YoungModulus, in float RodThickness, in float RestLength, in float NodeMass, in float DeltaTime, in float3 NodePosition, out float3 OutNodePosition)
{
	const int LocalIndex = (GGroupThreadId.x % StrandsSize);

	SharedNodePosition[GGroupThreadId.x] = NodePosition;
	SharedPreviousPosition[GGroupThreadId.x] = NodePosition;
	SharedInverseMass[GGroupThreadId.x] = (LocalIndex > 1 && NodeMass != 0.0) ? 1.0 / NodeMass : 0.0;
	GroupMemoryBarrier();

	if(DeltaTime != 0.0)
	{
		float MaterialCompliance = 0.0;
		float MaterialWeight = 0.0;
		float MaterialMultiplier = 0.0;

		if( LocalIndex > 1 )
		{
			ResetStretchSpringMaterial(StrandsSize,YoungModulus,RodThickness,RestLength,DeltaTime,true,0.0,MaterialCompliance,MaterialWeight,MaterialMultiplier,0);

			for(int i = 2; i < StrandsSize; ++i)
			{
				if( LocalIndex == i )
				{
					UpdateStretchSpringMultiplier(RestLength,DeltaTime,true,0.0,MaterialCompliance,MaterialWeight,MaterialMultiplier,0);
				}
				GroupMemoryBarrier(); 
			}
		}
		
	}
	GroupMemoryBarrier();
	OutNodePosition = SharedNodePosition[GGroupThreadId.x] ;
}

/* -----------------------------------------------------------------
 * Bend spring material
 * -----------------------------------------------------------------
 */

 void SetupBendSpringMaterial(in int StrandsSize, in float YoungModulus, in float RodThickness, 
	in float RestLength, in float DeltaTime, in bool ProjectConstraint, in float MaterialDamping, out float OutMaterialCompliance, out float OutMaterialWeight, out float OutMaterialMultiplier)
{
	OutMaterialCompliance = 0.0;
	OutMaterialWeight = 0.0;
	OutMaterialMultiplier = 0.0;
	const int LocalIndex = (GGroupThreadId.x % StrandsSize);
	if( LocalIndex > 1 )
	{
		ResetStretchSpringMaterial(StrandsSize,YoungModulus,RodThickness,RestLength,DeltaTime,ProjectConstraint,MaterialDamping,OutMaterialCompliance,OutMaterialWeight,OutMaterialMultiplier,1);
	}
}

void SolveBendSpringMaterial(in int StrandsSize, in float RestLength, in float DeltaTime, in float MaterialDamping, 
			in float MaterialCompliance, in float MaterialWeight, in float MaterialMultiplier, out float OutMaterialMultiplier)
{
	OutMaterialMultiplier = MaterialMultiplier;
	const int LocalIndex = (GGroupThreadId.x % StrandsSize);
	if( LocalIndex > 1)
	{
		const int IsRed = ((GGroupThreadId.x/2) % 2) == 0;
		// Process all the red rods
		if (IsRed)
		{	
			UpdateStretchSpringMultiplier(RestLength,DeltaTime,false,MaterialDamping,MaterialCompliance,MaterialWeight,OutMaterialMultiplier,1);
		}
		// Process all the black rods
		GroupMemoryBarrier(); 
		if (!IsRed)
		{
			UpdateStretchSpringMultiplier(RestLength,DeltaTime,false,MaterialDamping,MaterialCompliance,MaterialWeight,OutMaterialMultiplier,1);
		}
		GroupMemoryBarrier(); 
	}
} 

void ProjectBendSpringMaterial(in int StrandsSize, in float YoungModulus, in float RodThickness, in float RestLength, in float NodeMass, in float DeltaTime, in float3 NodePosition, out float3 OutNodePosition)
{
	const int LocalIndex = (GGroupThreadId.x % StrandsSize);

	SharedNodePosition[GGroupThreadId.x] = NodePosition;
	SharedPreviousPosition[GGroupThreadId.x] = NodePosition;
	SharedInverseMass[GGroupThreadId.x] = (LocalIndex > 1 && NodeMass != 0.0) ? 1.0 / NodeMass : 0.0;
	GroupMemoryBarrier();

	if(DeltaTime != 0.0)
	{
		float MaterialCompliance = 0.0;
		float MaterialWeight = 0.0;
		float MaterialMultiplier = 0.0;

		if( LocalIndex > 1 )
		{
			ResetStretchSpringMaterial(StrandsSize,YoungModulus,RodThickness,RestLength,DeltaTime,true,0.0,MaterialCompliance,MaterialWeight,MaterialMultiplier,1);

			for(int i = 2; i < StrandsSize; ++i)
			{
				if( LocalIndex == i )
				{
					UpdateStretchSpringMultiplier(RestLength,DeltaTime,true,0.0,MaterialCompliance,MaterialWeight,MaterialMultiplier,1);
				}
				GroupMemoryBarrier(); 
			}
		}
	}
	GroupMemoryBarrier();
	OutNodePosition = SharedNodePosition[GGroupThreadId.x];
}

/* -----------------------------------------------------------------
 * Twist spring material
 * -----------------------------------------------------------------
 */

 void SetupTwistSpringMaterial(in int StrandsSize, in float YoungModulus, in float RodThickness, 
	in float RestLength, in float DeltaTime, in bool ProjectConstraint, in float MaterialDamping, out float OutMaterialCompliance, out float OutMaterialWeight, out float OutMaterialMultiplier)
{
	OutMaterialCompliance = 0.0;
	OutMaterialWeight = 0.0;
	OutMaterialMultiplier = 0.0;
	const int LocalIndex = (GGroupThreadId.x % StrandsSize);
	if( LocalIndex > 2 )
	{
		ResetStretchSpringMaterial(StrandsSize,YoungModulus,RodThickness,RestLength,DeltaTime,ProjectConstraint,MaterialDamping,OutMaterialCompliance,OutMaterialWeight,OutMaterialMultiplier,2);
	}
}

void SolveTwistSpringMaterial(in int StrandsSize, in float RestLength, in float DeltaTime, in float MaterialDamping, 
			in float MaterialCompliance, in float MaterialWeight, in float MaterialMultiplier, out float OutMaterialMultiplier)
{
	OutMaterialMultiplier = MaterialMultiplier;
	const int LocalIndex = (GGroupThreadId.x % StrandsSize);
	if( LocalIndex > 2)
	{
		const int IsRed = ((GGroupThreadId.x/3) % 2) == 0;
		// Process all the red rods
		if (IsRed)
		{	
			UpdateStretchSpringMultiplier(RestLength,DeltaTime,false,MaterialDamping,MaterialCompliance,MaterialWeight,OutMaterialMultiplier,2);
		}
		// Process all the black rods
		GroupMemoryBarrier(); 
		if (!IsRed)
		{
			UpdateStretchSpringMultiplier(RestLength,DeltaTime,false,MaterialDamping,MaterialCompliance,MaterialWeight,OutMaterialMultiplier,2);
		}
		GroupMemoryBarrier(); 
	}
} 

void ProjectTwistSpringMaterial(in int StrandsSize, in float YoungModulus, in float RodThickness, in float RestLength, in float NodeMass, in float DeltaTime, in float3 NodePosition, out float3 OutNodePosition)
{
	const int LocalIndex = (GGroupThreadId.x % StrandsSize);

	SharedNodePosition[GGroupThreadId.x] = NodePosition;
	SharedPreviousPosition[GGroupThreadId.x] = NodePosition;
	SharedInverseMass[GGroupThreadId.x] = (LocalIndex > 1 && NodeMass != 0.0) ? 1.0 / NodeMass : 0.0;
	GroupMemoryBarrier();

	if(DeltaTime != 0.0)
	{
		float MaterialCompliance = 0.0;
		float MaterialWeight = 0.0;
		float MaterialMultiplier = 0.0;

		if( LocalIndex > 2 )
		{
			ResetStretchSpringMaterial(StrandsSize,YoungModulus,RodThickness,RestLength,DeltaTime,true,0.0,MaterialCompliance,MaterialWeight,MaterialMultiplier,2);

			for(int i = 3; i < StrandsSize; ++i)
			{
				if( LocalIndex == i )
				{
					UpdateStretchSpringMultiplier(RestLength,DeltaTime,true,0.0,MaterialCompliance,MaterialWeight,MaterialMultiplier,2);
				}
				GroupMemoryBarrier(); 
			}
		}
	}
	GroupMemoryBarrier();
	OutNodePosition = SharedNodePosition[GGroupThreadId.x];
}

/* -----------------------------------------------------------------
 * Compute Bishop frame
 * -----------------------------------------------------------------
 */

void ComputeMaterialFrame(in int StrandsSize)
{
	const int LocalIndex = (GGroupThreadId.x % StrandsSize);
	if( LocalIndex == 0 )
	{
		float4 NodeQuaternion = SharedNodeOrientation[GGroupThreadId.x];
		float3 TangentPrev = normalize(SharedNodePosition[GGroupThreadId.x+1] - SharedNodePosition[GGroupThreadId.x]);
		float3 TangentNext = TangentPrev;

		for (int EdgeIndex = 1, EdgeEnd = StrandsSize-1; EdgeIndex < EdgeEnd; ++EdgeIndex)
		{
			TangentPrev = TangentNext;
			TangentNext = normalize(SharedNodePosition[GGroupThreadId.x+EdgeIndex+1] - SharedNodePosition[GGroupThreadId.x+EdgeIndex]);

			NodeQuaternion = NormalizeQuat( MultiplyQuat( FindQuatBetweenNormals(TangentPrev,TangentNext), NodeQuaternion ) );
			SharedNodeOrientation[GGroupThreadId.x+EdgeIndex] = NodeQuaternion;
			GroupMemoryBarrier();
		}
		GroupMemoryBarrier();
	}
	GroupMemoryBarrier();
}

void UpdateMaterialFrame(in int StrandsSize)
{
	const int LocalIndex = (GGroupThreadId.x % StrandsSize);
	if( LocalIndex == 0 )
	{
		float4 NodeQuaternion = SharedPreviousOrientation[GGroupThreadId.x];
		float3 TangentPrev = normalize(SharedPreviousPosition[GGroupThreadId.x+1] - SharedPreviousPosition[GGroupThreadId.x]);
		float3 TangentNext = TangentPrev;

		for (int EdgeIndex = 1, EdgeEnd = StrandsSize-1; EdgeIndex < EdgeEnd; ++EdgeIndex)
		{
			TangentPrev = TangentNext;
			TangentNext = normalize(SharedPreviousPosition[GGroupThreadId.x+EdgeIndex+1] - SharedPreviousPosition[GGroupThreadId.x+EdgeIndex]);

			NodeQuaternion = NormalizeQuat( MultiplyQuat( FindQuatBetweenNormals(TangentPrev,TangentNext), NodeQuaternion ) );
			SharedNodeOrientation[GGroupThreadId.x+EdgeIndex] = NodeQuaternion;
			GroupMemoryBarrier();
		}
		GroupMemoryBarrier();
	}
	GroupMemoryBarrier();
}


/*void UpdateMaterialFrame(in int StrandsSize)
{
	const int LocalIndex = (GGroupThreadId.x % StrandsSize);
	if( (LocalIndex > 0) && (LocalIndex < StrandsSize-1) )
	{
		float4 NodeQuaternion = SharedPreviousOrientation[GGroupThreadId.x];
		//float3 TangentPrev = RotateVectorByQuat( float3(0,0,1), NodeQuaternion);
		//float3 TangentNext = normalize(SharedPreviousPosition[GGroupThreadId.x+1] - SharedPreviousPosition[GGroupThreadId.x]);

		float3 TangentPrev = normalize(SharedPreviousPosition[GGroupThreadId.x+1] - SharedPreviousPosition[GGroupThreadId.x]);
		float3 TangentNext = normalize(SharedNodePosition[GGroupThreadId.x+1] - SharedNodePosition[GGroupThreadId.x]);

		SharedNodeOrientation[GGroupThreadId.x] = NormalizeQuat( MultiplyQuat( FindQuatBetweenNormals(TangentPrev,TangentNext), NodeQuaternion) );
	}
	GroupMemoryBarrier();
}*/

/* -----------------------------------------------------------------
 * Bend spring material
 * -----------------------------------------------------------------
 */

 void SetupAngularSpringMaterial(in int StrandsSize, in float YoungModulus, in float RodThickness, 
	in float RestLength, in float DeltaTime, in bool ProjectConstraint, in float MaterialDamping, out float OutMaterialCompliance, out float OutMaterialWeight, out float3 OutMaterialMultiplier)
{
	OutMaterialCompliance = 0.0;
	OutMaterialWeight = 0.0;
	OutMaterialMultiplier = float3(0,0,0);

	float MaterialMultiplier = 0;
	SetupStretchSpringMaterial(StrandsSize,YoungModulus,RodThickness,RestLength,DeltaTime,ProjectConstraint,MaterialDamping,OutMaterialCompliance,OutMaterialWeight,MaterialMultiplier);
}

void UpdateAngularSpringMultiplier( in float RestLength, in float3 RestDirection, in float DeltaTime, in bool ProjectConstraint, in float MaterialDamping, in float InMaterialCompliance, in float InMaterialWeight, inout float3 OutMaterialMultiplier)
{
	const float3 EdgeDirection = SharedNodePosition[GGroupThreadId.x] - SharedNodePosition[GGroupThreadId.x-1];
	const float3 DeltaVelocity = (EdgeDirection - ( SharedPreviousPosition[GGroupThreadId.x] - SharedPreviousPosition[GGroupThreadId.x-1] ) ) / DeltaTime; 

	const float4 ParentFrame = SlerpQuat(SharedNodeOrientation[GGroupThreadId.x-2],SharedNodeOrientation[GGroupThreadId.x-2],0.5);
	const float3 TargetDirection = RotateVectorByQuat(RestDirection,ParentFrame);

	// XPBD lagrange multiplier update : dL = -(C+compliance*L) / (dC * invM * dCt + alpha)
	const float3 DeltaLambda = -((EdgeDirection - TargetDirection)/RestLength + 
					OutMaterialMultiplier * InMaterialCompliance  + MaterialDamping * DeltaVelocity /RestLength) * InMaterialWeight;

	// L += dL
	OutMaterialMultiplier += DeltaLambda;

	// XPBD position update : dX = dL * dCt * invM
	const float3 PositionDelta  = DeltaLambda/RestLength;

	// dX += dX
	SharedNodePosition[GGroupThreadId.x] += PositionDelta * SharedInverseMass[GGroupThreadId.x];
	if(!ProjectConstraint)
	{
		SharedNodePosition[GGroupThreadId.x-1] -= PositionDelta * SharedInverseMass[GGroupThreadId.x-1];
	}
}

void SolveAngularSpringMaterial(in int StrandsSize, in float RestLength, in float3 RestDirection, in float DeltaTime, in float MaterialDamping,
			in float MaterialCompliance, in float MaterialWeight, in float3 MaterialMultiplier, out float3 OutMaterialMultiplier)
{
	
	OutMaterialMultiplier = MaterialMultiplier;
	const int LocalIndex = (GGroupThreadId.x % StrandsSize);
	if( LocalIndex > 1)
	{
		const int IsRed = (GGroupThreadId.x % 2) == 0;
		// Process all the red rods
		if (!IsRed)
		{	
			UpdateAngularSpringMultiplier(RestLength,RestDirection,DeltaTime,false,MaterialDamping,MaterialCompliance,MaterialWeight,OutMaterialMultiplier);
		}
		GroupMemoryBarrier(); 

		if (IsRed)
		{
			UpdateAngularSpringMultiplier(RestLength,RestDirection,DeltaTime,false,MaterialDamping,MaterialCompliance,MaterialWeight,OutMaterialMultiplier);
		}
		GroupMemoryBarrier(); 
	}
}
/*
groupshared float4 SharedRestDatas[THREADGROUP_SIZE];
void SolveAngularSpringMaterial(in int StrandsSize, in float RestLength, in float3 RestDirection, in float DeltaTime, in float MaterialDamping,
			in float MaterialCompliance, in float MaterialWeight, in float3 MaterialMultiplier, out float3 OutMaterialMultiplier)
{
	SharedRestDatas[GGroupThreadId.x] = float4(RestDirection,RestLength);
	GroupMemoryBarrier(); 

	OutMaterialMultiplier = MaterialMultiplier;
	const int LocalIndex = (GGroupThreadId.x % StrandsSize);
	if( LocalIndex == 0)
	{
		for(int i = GGroupThreadId.x+2; i < GGroupThreadId.x+StrandsSize; ++i)
		{
			const float3 EdgeDirection = SharedNodePosition[i] - SharedNodePosition[i-1];

			const float4 ParentFrame = SharedNodeOrientation[i-2];
			const float3 TargetDirection = RotateVectorByQuat(SharedRestDatas[i].xyz,ParentFrame);

			// XPBD lagrange multiplier update : dL = -(C+compliance*L) / (dC * invM * dCt + alpha)
			const float3 DeltaLambda = -(EdgeDirection - TargetDirection) / (SharedInverseMass[i]+SharedInverseMass[i-1]);

			// XPBD position update : dX = dL * dCt * invM
			const float3 PositionDelta  = DeltaLambda;

			SharedDeltaPosition[i] = PositionDelta;
			GroupMemoryBarrier();

			// dX += dX
			SharedNodePosition[i] += PositionDelta * SharedInverseMass[i];
			GroupMemoryBarrier();
			SharedNodePosition[i-1] -= PositionDelta * SharedInverseMass[i-1];
			GroupMemoryBarrier();

			if( i > GGroupThreadId.x+2 )
			{
				const float3 TangentInit = normalize(SharedNodePosition[i-2] - SharedNodePosition[i-3]);
				const float3 TangentPrev = normalize(SharedNodePosition[i-1] - SharedNodePosition[i-2]);
				const float3 TangentNext = normalize(SharedNodePosition[i] - SharedNodePosition[i-1]);

				SharedNodeOrientation[i-2] = NormalizeQuat( MultiplyQuat( FindQuatBetweenNormals(TangentInit,TangentPrev), SharedNodeOrientation[i-3] ) );
				GroupMemoryBarrier();
				SharedNodeOrientation[i-1] = NormalizeQuat( MultiplyQuat( FindQuatBetweenNormals(TangentPrev,TangentNext), SharedNodeOrientation[i-2] ) );
				GroupMemoryBarrier();
			}
			else
			{
				const float3 TangentPrev = normalize(SharedNodePosition[i-1] - SharedNodePosition[i-2]);
				const float3 TangentNext = normalize(SharedNodePosition[i] - SharedNodePosition[i-1]);

				SharedNodeOrientation[i-1] = NormalizeQuat( MultiplyQuat( FindQuatBetweenNormals(TangentPrev,TangentNext), SharedNodeOrientation[i-2] ) );
				GroupMemoryBarrier();
			}
			GroupMemoryBarrier();
		}
		GroupMemoryBarrier();
		for(int i = GGroupThreadId.x+2; i < GGroupThreadId.x+StrandsSize; ++i)
		{
			SharedNodePosition[i] += SharedDeltaPosition[i] * SharedInverseMass[i];
			SharedNodePosition[i-1] -= SharedDeltaPosition[i] * SharedInverseMass[i-1];
			GroupMemoryBarrier();
		}
		GroupMemoryBarrier();
		for(int i = GGroupThreadId.x+2; i < GGroupThreadId.x+StrandsSize; ++i)
		{
			const float3 TangentPrev = normalize(SharedNodePosition[i-1] - SharedNodePosition[i-2]);
			const float3 TangentNext = normalize(SharedNodePosition[i] - SharedNodePosition[i-1]);

			SharedNodeOrientation[i-1] = NormalizeQuat( MultiplyQuat( FindQuatBetweenNormals(TangentPrev,TangentNext), SharedNodeOrientation[i-2] ) );
			GroupMemoryBarrier();
		}
		GroupMemoryBarrier();
	} 
}*/

void ProjectAngularSpringMaterial(in int StrandsSize, in float YoungModulus, in float RodThickness, in float RestLength, in float3 RestDirection, in float NodeMass, in float DeltaTime,
			 in float3 NodePosition, out float3 OutNodePosition)
{
	const int LocalIndex = (GGroupThreadId.x % StrandsSize);

	SharedNodePosition[GGroupThreadId.x] = NodePosition;
	SharedPreviousPosition[GGroupThreadId.x] = NodePosition;
	SharedInverseMass[GGroupThreadId.x] = (LocalIndex > 1 && NodeMass != 0.0) ? 1.0 / NodeMass : 0.0;
	GroupMemoryBarrier();

	if(DeltaTime != 0.0)
	{

		float MaterialCompliance = 0.0;
		float MaterialWeight = 0.0;
		float3 MaterialMultiplier = float3(0,0,0);

		//ComputeMaterialFrame(StrandsSize);
		SetupAngularSpringMaterial(StrandsSize, YoungModulus, RodThickness, RestLength, DeltaTime, true, 0.0, MaterialCompliance, MaterialWeight, MaterialMultiplier);

		//if( LocalIndex > 1 )
		{
			for(int i = 2; i < StrandsSize; ++i)
			{
				ComputeMaterialFrame(StrandsSize);
				if( LocalIndex == i )
				{
					UpdateAngularSpringMultiplier(RestLength,RestDirection,DeltaTime,true,0.0,MaterialCompliance,MaterialWeight,MaterialMultiplier);
				}
				GroupMemoryBarrier(); 
			}
		}
	}

	GroupMemoryBarrier();
	OutNodePosition = SharedNodePosition[GGroupThreadId.x];
}

/* -----------------------------------------------------------------
 * Compute Rest Direction and length
 * -----------------------------------------------------------------
 */

void ComputeRestDirection(in int StrandsSize, in float3 NodePosition, in float4 NodeOrientation, out float3 OutRestDirection)
{
	SharedNodePosition[GGroupThreadId.x] = NodePosition;
	SharedNodeOrientation[GGroupThreadId.x] = NodeOrientation;
	GroupMemoryBarrier(); 

	ComputeMaterialFrame(StrandsSize);

	OutRestDirection = float3(0,0,0);
	const int LocalIndex = (GGroupThreadId.x % StrandsSize);
	if( LocalIndex > 1 )
	{
		const float3 EdgeDirection = SharedNodePosition[GGroupThreadId.x] - SharedNodePosition[GGroupThreadId.x-1];

		const float4 ParentFrame = SlerpQuat(SharedNodeOrientation[GGroupThreadId.x-2],SharedNodeOrientation[GGroupThreadId.x-2],0.5);
		OutRestDirection = UnrotateVectorByQuat(EdgeDirection,ParentFrame);
	}
	GroupMemoryBarrier(); 
}
