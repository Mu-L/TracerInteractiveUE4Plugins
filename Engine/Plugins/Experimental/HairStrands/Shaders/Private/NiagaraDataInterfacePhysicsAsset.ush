// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

/*=============================================================================
NiagaraDataInterfacePhysicsAsset.ush 
=============================================================================*/

#pragma once

/* -----------------------------------------------------------------
 * Physics Asset constants and context
 * -----------------------------------------------------------------
 */

#define MAX_DISTANCE 1e+38
#define BOX_INDEX 0
#define SPHERE_INDEX 1
#define CAPSULE_INDEX 2

struct FDIPhysicsAssetContext
{
	uint4 ElementOffsets;
	Buffer<float4>		CurrentTransformBuffer;
	Buffer<float4>		InverseTransformBuffer;
	Buffer<float4>		RestTransformBuffer;
	Buffer<float4>		RestInverseBuffer;
	Buffer<float4>		PreviousTransformBuffer;
	Buffer<float4>		ElementExtentBuffer;
	float3				BoxOrigin;
	float3				BoxExtent;
}; 

#define DIPHYSICSASSET_DECLARE_CONSTANTS(NAME)\
uint4 ElementOffsets_##NAME;\
Buffer<float4>		CurrentTransformBuffer_##NAME;\
Buffer<float4>		InverseTransformBuffer_##NAME;\
Buffer<float4>		RestTransformBuffer_##NAME;\
Buffer<float4>		RestInverseBuffer_##NAME;\
Buffer<float4>		PreviousTransformBuffer_##NAME;\
Buffer<float4>		ElementExtentBuffer_##NAME;\
float3 BoxOrigin_##NAME;\
float3 BoxExtent_##NAME;\

#define DIPHYSICSASSET_MAKE_CONTEXT(NAME)\
FDIPhysicsAssetContext DIContext; \
DIContext.ElementOffsets = ElementOffsets_##NAME;\
DIContext.CurrentTransformBuffer = CurrentTransformBuffer_##NAME;\
DIContext.InverseTransformBuffer = InverseTransformBuffer_##NAME;\
DIContext.RestTransformBuffer = RestTransformBuffer_##NAME;\
DIContext.RestInverseBuffer = RestInverseBuffer_##NAME;\
DIContext.PreviousTransformBuffer = PreviousTransformBuffer_##NAME;\
DIContext.ElementExtentBuffer = ElementExtentBuffer_##NAME;\
DIContext.BoxOrigin = BoxOrigin_##NAME;\
DIContext.BoxExtent = BoxExtent_##NAME;\

/* -----------------------------------------------------------------
 * Element accessors
 * -----------------------------------------------------------------
 */

int DIPhysicsAsset_GetNumBoxes(in FDIPhysicsAssetContext DIContext)
{
	return DIContext.ElementOffsets[BOX_INDEX+1] - DIContext.ElementOffsets[BOX_INDEX];
}

int DIPhysicsAsset_GetNumSpheres(in FDIPhysicsAssetContext DIContext)
{
	return DIContext.ElementOffsets[SPHERE_INDEX+1] - DIContext.ElementOffsets[SPHERE_INDEX];
}

int DIPhysicsAsset_GetNumCapsules(in FDIPhysicsAssetContext DIContext)
{
	return DIContext.ElementOffsets[CAPSULE_INDEX+1] - DIContext.ElementOffsets[CAPSULE_INDEX];
}


/* -----------------------------------------------------------------
 * Position / Transform utils
 * -----------------------------------------------------------------
 */

float3 DIPhysicsAsset_GetCurrentPosition(in FDIPhysicsAssetContext DIContext, in int ElementIndex)
{
	const int BufferOffset = 3 * ElementIndex;
    return float3(DIContext.CurrentTransformBuffer[BufferOffset].w, DIContext.CurrentTransformBuffer[BufferOffset+1].w, DIContext.CurrentTransformBuffer[BufferOffset+2].w);
}

float3 DIPhysicsAsset_GetPreviousPosition(in FDIPhysicsAssetContext DIContext, in int ElementIndex)
{
	const int BufferOffset = 3 * ElementIndex;
    return float3(DIContext.PreviousTransformBuffer[BufferOffset].w, DIContext.PreviousTransformBuffer[BufferOffset+1].w, DIContext.PreviousTransformBuffer[BufferOffset+2].w);
}

float3x4 DIPhysicsAsset_GetCurrentTransform(in FDIPhysicsAssetContext DIContext, in int ElementIndex)
{
	const int BufferOffset = 3 * ElementIndex;
    return float3x4(DIContext.CurrentTransformBuffer[BufferOffset], DIContext.CurrentTransformBuffer[BufferOffset+1], DIContext.CurrentTransformBuffer[BufferOffset+2]);
}

float3x4 DIPhysicsAsset_GetInverseTransform(in FDIPhysicsAssetContext DIContext, in int ElementIndex)
{
	const int BufferOffset = 3 * ElementIndex;
    return float3x4(DIContext.InverseTransformBuffer[BufferOffset], DIContext.InverseTransformBuffer[BufferOffset+1], DIContext.InverseTransformBuffer[BufferOffset+2]);
}

float3x4 DIPhysicsAsset_GetPreviousTransform(in FDIPhysicsAssetContext DIContext, in int ElementIndex)
{
	const int BufferOffset = 3 * ElementIndex;
    return float3x4(DIContext.PreviousTransformBuffer[BufferOffset], DIContext.PreviousTransformBuffer[BufferOffset+1], DIContext.PreviousTransformBuffer[BufferOffset+2]);
}

float3x4 DIPhysicsAsset_GetRestTransform(in FDIPhysicsAssetContext DIContext, in int ElementIndex)
{
	const int BufferOffset = 3 * ElementIndex;
    return float3x4(DIContext.RestTransformBuffer[BufferOffset], DIContext.RestTransformBuffer[BufferOffset+1], DIContext.RestTransformBuffer[BufferOffset+2]);
}

float3x4 DIPhysicsAsset_GetRestInverse(in FDIPhysicsAssetContext DIContext, in int ElementIndex)
{
	const int BufferOffset = 3 * ElementIndex;
    return float3x4(DIContext.RestInverseBuffer[BufferOffset], DIContext.RestInverseBuffer[BufferOffset+1], DIContext.RestInverseBuffer[BufferOffset+2]);
}

/* -----------------------------------------------------------------
 * Collision detection utils
 * -----------------------------------------------------------------
 */

// Given a world space position (NodePosition) compute the sphere closest point (position,normal,velocity)
float DIPhysicsAsset_GetSphereProjection(in float3 LocalPosition, in float3 SphereCenter, in float SphereRadius, in int SphereIndex,
			inout float3 OutClosestPosition, inout float3 OutClosestNormal, inout int OutElementIndex, inout float OutMinDistance)
{
	const float3 DeltaPosition = LocalPosition - SphereCenter;
	const float DeltaLength = length(DeltaPosition);
	const float SphereDistance = DeltaLength - SphereRadius;

	if (SphereDistance < OutMinDistance)
	{
		OutMinDistance = SphereDistance;
		OutElementIndex = SphereIndex;

		OutClosestNormal = (DeltaLength > SMALL_NUMBER) ? DeltaPosition / DeltaLength : float3(0,0,0);
		OutClosestPosition = LocalPosition - OutClosestNormal*SphereDistance;
	}
	return SphereDistance;
}

// Given a world space position (NodePosition) compute the sphere closest point (position,normal,velocity)
float DIPhysicsAsset_GetCapsuleProjection(in float3 LocalPosition, in float2 CapsuleSize, in int CapsuleIndex,
			inout float3 OutClosestPosition, inout float3 OutClosestNormal, inout int OutElementIndex, inout float OutMinDistance)
{
	const float HalfLength = 0.5 * CapsuleSize.y;
	const float3 SphereCenter = float3(0,0,clamp(LocalPosition.z, -HalfLength, HalfLength));

	return DIPhysicsAsset_GetSphereProjection(LocalPosition,SphereCenter,CapsuleSize.x,CapsuleIndex,
			OutClosestPosition,OutClosestNormal,OutElementIndex,OutMinDistance);
}

// Given a world space position (NodePosition) compute the sphere closest point (position,normal,velocity)
float DIPhysicsAsset_GetBoxProjection(in float3 LocalPosition, in float3 BoxExtent, in int BoxIndex, 
			inout float3 OutClosestPosition, inout float3 OutClosestNormal, inout int OutElementIndex, inout float OutMinDistance)
{
	const float3 HalfExtent = 0.5 * BoxExtent;
	const float3 DeltaPosition = abs(LocalPosition) - HalfExtent;

	const int ClosestAxis = ((DeltaPosition.x > DeltaPosition.y) && (DeltaPosition.x > DeltaPosition.z)) ? 0 : ( DeltaPosition.y > DeltaPosition.z) ? 1 : 2;
	const float OutsideDistance = length(max(DeltaPosition,0.0));
	const float BoxDistance = OutsideDistance + min(DeltaPosition[ClosestAxis],0.0);

	if (BoxDistance < OutMinDistance)
	{
		OutMinDistance = BoxDistance;
		OutElementIndex = BoxIndex;

		if (BoxDistance <= 0)
		{
			const bool NegativeSide = LocalPosition[ClosestAxis] < 0.0;

			OutClosestPosition = LocalPosition;
			OutClosestNormal = float3(0,0,0);
			if( ClosestAxis == 0) 
			{
				OutClosestPosition.x = NegativeSide ? -HalfExtent.x : HalfExtent.x;
				OutClosestNormal.x = NegativeSide ? -1.0 : 1.0;
			}
			else if( ClosestAxis == 1) 
			{
				OutClosestPosition.y = NegativeSide ? -HalfExtent.y : HalfExtent.y;
				OutClosestNormal.y = NegativeSide ? -1.0 : 1.0;
			}
			else if( ClosestAxis == 2) 
			{
				OutClosestPosition.z = NegativeSide ? -HalfExtent.z : HalfExtent.z;
				OutClosestNormal.z = NegativeSide ? -1.0 : 1.0;
			}

			//OutClosestPosition[ClosestAxis] = NegativeSide ? -HalfExtent[ClosestAxis] : HalfExtent[ClosestAxis];
			//OutClosestNormal[ClosestAxis] = NegativeSide ? -1.0 : 1.0;
		}
		else
		{
			OutClosestPosition = clamp(LocalPosition,-HalfExtent,HalfExtent);
			OutClosestNormal = (LocalPosition - OutClosestPosition) / OutsideDistance;
		}
	}
	return BoxDistance;
}


/* -----------------------------------------------------------------
 * Get the closest element to the node position
 * -----------------------------------------------------------------
 */

// Given a world space position (NodePosition) compute the sphere closest point (position,normal,velocity)
int DIPhysicsAsset_GetClosestElement(in FDIPhysicsAssetContext DIContext, in float3 NodePosition, out float3 OutClosestPosition, 
										  out float3 OutClosestNormal, out float OutMinDistance )
{	
	float MinDistance = MAX_DISTANCE;
	int ElementIndex = -1;
	float3 CollisionPosition = float3(0,0,0);
	float3 CollisionNormal = float3(0,0,0);

	const int SpheresBegin = DIContext.ElementOffsets[SPHERE_INDEX];
	const int SpheresEnd = DIContext.ElementOffsets[SPHERE_INDEX+1];
	for (int SphereIndex = SpheresBegin; SphereIndex < SpheresEnd; ++SphereIndex)
	{
		const float3 LocalPosition = mul(DIPhysicsAsset_GetInverseTransform(DIContext,SphereIndex), float4(NodePosition,1.0)).xyz;

		DIPhysicsAsset_GetSphereProjection(LocalPosition, float3(0,0,0), DIContext.ElementExtentBuffer[SphereIndex].x, SphereIndex,
				CollisionPosition, CollisionNormal, ElementIndex, MinDistance);
	}

	const int CapsulesBegin = DIContext.ElementOffsets[CAPSULE_INDEX];
	const int CapsulesEnd = DIContext.ElementOffsets[CAPSULE_INDEX+1];
	for (int CapsuleIndex = CapsulesBegin; CapsuleIndex < CapsulesEnd; ++CapsuleIndex)
	{
		const float3 LocalPosition = mul(DIPhysicsAsset_GetInverseTransform(DIContext,CapsuleIndex), float4(NodePosition,1.0)).xyz;

		DIPhysicsAsset_GetCapsuleProjection(LocalPosition, DIContext.ElementExtentBuffer[CapsuleIndex].xy, CapsuleIndex,
				CollisionPosition, CollisionNormal, ElementIndex, MinDistance);
	}

	const int BoxesBegin = DIContext.ElementOffsets[BOX_INDEX];
	const int BoxesEnd = DIContext.ElementOffsets[BOX_INDEX+1];
	for (int BoxIndex = BoxesBegin; BoxIndex < BoxesEnd; ++BoxIndex)
	{
		const float3 LocalPosition = mul(DIPhysicsAsset_GetInverseTransform(DIContext,BoxIndex), float4(NodePosition,1.0)).xyz;

		DIPhysicsAsset_GetBoxProjection(LocalPosition, DIContext.ElementExtentBuffer[BoxIndex].xyz, BoxIndex,
				CollisionPosition, CollisionNormal, ElementIndex, MinDistance);
	}
	OutClosestPosition = CollisionPosition;
	OutClosestNormal = CollisionNormal;
	OutMinDistance = MinDistance;
	return ElementIndex;
}

/* -----------------------------------------------------------------
 * Get the closest point to the physics asset 
 * -----------------------------------------------------------------
 */

// Given a world space position (NodePosition) compute the sphere closest point (position,normal,velocity)
void DIPhysicsAsset_GetClosestPoint(in FDIPhysicsAssetContext DIContext, in float3 NodePosition, in float DeltaTime, out float3 OutClosestPosition, 
										  out float3 OutClosestNormal, out float3 OutClosestVelocity, out float OutClosestDistance)
{	
	float3 CollisionPosition = float3(0,0,0);
	float3 CollisionNormal = float3(0,0,0);
	float MinDistance = 0.0;

	const int ElementIndex = DIPhysicsAsset_GetClosestElement(DIContext,NodePosition,CollisionPosition,CollisionNormal,MinDistance);

	OutClosestNormal = float3(0,0,0);
	OutClosestPosition = float3(0,0,0);
	OutClosestVelocity = float3(0,0,0);
	OutClosestDistance = 0.0;

	if (ElementIndex != -1)
	{
		const float3 PreviousPosition = mul(DIPhysicsAsset_GetPreviousTransform(DIContext,ElementIndex), float4(CollisionPosition,1.0)).xyz;

		OutClosestPosition = mul(DIPhysicsAsset_GetCurrentTransform(DIContext,ElementIndex), float4(CollisionPosition,1.0)).xyz;
		OutClosestNormal = mul(DIPhysicsAsset_GetCurrentTransform(DIContext,ElementIndex), float4(CollisionNormal,0.0)).xyz;
		OutClosestVelocity = ( OutClosestPosition - PreviousPosition ) / DeltaTime;
		OutClosestDistance = MinDistance;
	}
}

/* -----------------------------------------------------------------
 * Get the closest point to the physics asset 
 * -----------------------------------------------------------------
 */

void DIPhysicsAsset_GetTexturePoint(in FDIPhysicsAssetContext DIContext, in float3 NodePosition, out int OutElementIndex, out float3 OutTexturePosition)
{
	float3 CollisionPosition = float3(0,0,0);
	float3 CollisionNormal = float3(0,0,0);
	float MinDistance = 0.0;

	OutTexturePosition = float3(0,0,0);

	OutElementIndex = DIPhysicsAsset_GetClosestElement(DIContext,NodePosition,CollisionPosition,CollisionNormal,MinDistance);

	const float AxisExtent = max( max(DIContext.BoxExtent.x, DIContext.BoxExtent.y), DIContext.BoxExtent.z );
	const float3 BoxExtent = float3(AxisExtent,AxisExtent,AxisExtent);

	const float3 BoxMinimum = DIContext.BoxOrigin - BoxExtent;
	const float3 BoxSize = 2.0 * BoxExtent;

	if (OutElementIndex != -1)
	{
		const float3 LocalPosition = mul(DIPhysicsAsset_GetInverseTransform(DIContext,OutElementIndex), float4(NodePosition,1.0)).xyz;
		const float3 RestPosition = mul(DIPhysicsAsset_GetRestTransform(DIContext,OutElementIndex), float4(LocalPosition,1.0)).xyz;

		OutTexturePosition = clamp( (RestPosition - BoxMinimum)/BoxSize, float3(0,0,0), float3(1,1,1) );
	}
}

void DIPhysicsAsset_GetProjectionPoint(in FDIPhysicsAssetContext DIContext, in float3 NodePosition, in float DeltaTime, in int ElementIndex,
			in float TextureValue, in float3 TextureGradient, out float3 OutClosestPosition, out float3 OutClosestNormal, out float3 OutClosestVelocity, out float OutClosestDistance)
{
	OutClosestNormal = float3(0,0,0);
	OutClosestPosition = float3(0,0,0);
	OutClosestVelocity = float3(0,0,0);
	OutClosestDistance = 0.0;

	if (ElementIndex != -1)
	{
		const float AxisExtent = max( max(DIContext.BoxExtent.x, DIContext.BoxExtent.y), DIContext.BoxExtent.z );

		const float3 LocalPosition = mul(DIPhysicsAsset_GetInverseTransform(DIContext,ElementIndex), float4(NodePosition,1.0)).xyz;
		const float3 RestPosition = mul(DIPhysicsAsset_GetRestTransform(DIContext,ElementIndex), float4(LocalPosition,1.0)).xyz;

		const float3 RestProjection = RestPosition - TextureValue * 2.0 * AxisExtent * TextureGradient;

		const float3 CollisionPosition = mul(DIPhysicsAsset_GetRestInverse(DIContext,ElementIndex), float4(RestProjection,1.0)).xyz;
		const float3 CollisionNormal = mul(DIPhysicsAsset_GetRestInverse(DIContext,ElementIndex), float4(TextureGradient,0.0)).xyz;

		const float3 PreviousPosition = mul(DIPhysicsAsset_GetPreviousTransform(DIContext,ElementIndex), float4(CollisionPosition,1.0)).xyz;

		OutClosestPosition = mul(DIPhysicsAsset_GetCurrentTransform(DIContext,ElementIndex), float4(CollisionPosition,1.0)).xyz;
		OutClosestNormal = mul(DIPhysicsAsset_GetCurrentTransform(DIContext,ElementIndex), float4(CollisionNormal,0.0)).xyz;
		OutClosestVelocity = ( OutClosestPosition - PreviousPosition ) / DeltaTime;
		OutClosestDistance = TextureValue * 2.0 * AxisExtent;
	}
}

