// Copyright Epic Games, Inc. All Rights Reserved.

#include "AssetGenerationUtil.h"
#include "InteractiveTool.h"
#include "InteractiveToolManager.h"
#include "Materials/Material.h"
#include "StaticMeshAttributes.h"
#include "DynamicMeshToMeshDescription.h"

#include "Components/StaticMeshComponent.h"
#include "Engine/StaticMesh.h"


// single material case
AActor* AssetGenerationUtil::GenerateStaticMeshActor(
	IToolsContextAssetAPI* AssetAPI,
	UWorld* TargetWorld,
	const FDynamicMesh3* Mesh,
	const FTransform3d& Transform,
	FString ObjectName,
	UMaterialInterface* Material
)
{
	return GenerateStaticMeshActor(AssetAPI, TargetWorld, Mesh, Transform, ObjectName, TArrayView<UMaterialInterface*>(&Material, Material != nullptr ? 1 : 0));
}

// N-material case
AActor* AssetGenerationUtil::GenerateStaticMeshActor(
	IToolsContextAssetAPI* AssetAPI,
	UWorld* TargetWorld,
	const FDynamicMesh3* Mesh,
	const FTransform3d& Transform,
	FString ObjectName,
	const TArrayView<UMaterialInterface*>& Materials
)
{
	FGeneratedStaticMeshAssetConfig AssetConfig;
	for (UMaterialInterface* Material : Materials)
	{
		AssetConfig.Materials.Add(Material);
	}

	AssetConfig.MeshDescription = MakeUnique<FMeshDescription>();
	FStaticMeshAttributes Attributes(*AssetConfig.MeshDescription);
	Attributes.Register();

	FDynamicMeshToMeshDescription Converter;
	Converter.Convert(Mesh, *AssetConfig.MeshDescription);

	return AssetAPI->GenerateStaticMeshActor(TargetWorld, (FTransform)Transform, ObjectName, MoveTemp(AssetConfig));
}



bool AssetGenerationUtil::SaveGeneratedTexture2D(
	IToolsContextAssetAPI* AssetAPI,
	UTexture2D* TransientTexture,
	FString ObjectName,
	const UObject* RelativeToAsset)
{
	return AssetAPI->SaveGeneratedTexture2D(TransientTexture, ObjectName, RelativeToAsset);
}



FString AssetGenerationUtil::GetComponentAssetBaseName( UPrimitiveComponent* Component, bool bRemoveAutoGeneratedSuffixes)
{
	if (!ensure(Component != nullptr))
	{
		return TEXT("InvalidComponent");
	}

	FString ResultName = Component->GetName();
	if (bRemoveAutoGeneratedSuffixes)
	{
		ResultName = AssetGenerationUtil::StripGeneratedAssetSuffixFromName(ResultName);
	}
	UStaticMeshComponent* StaticMeshComponent = Cast<UStaticMeshComponent>(Component);
	if (StaticMeshComponent != nullptr)
	{
		UStaticMesh* SourceMesh = StaticMeshComponent->GetStaticMesh();
		if (SourceMesh)
		{
			FString AssetName = FPaths::GetBaseFilename(SourceMesh->GetName());
			ResultName = (bRemoveAutoGeneratedSuffixes) ? AssetGenerationUtil::StripGeneratedAssetSuffixFromName(AssetName) : AssetName;
		}
	}

	return ResultName;
}


FString AssetGenerationUtil::StripGeneratedAssetSuffixFromName(FString InputName)
{
	// find final '_'
	int32 Index;
	if (!InputName.FindLastChar('_', Index))
	{
		return InputName;
	}
	// check that remaining characters are hex digits (from UUID)
	int32 Len = InputName.Len();
	int32 Count = 0, Letters = 0, Numbers = 0;
	for (int32 k = Index+1; k < Len; ++k)
	{
		if (FChar::IsHexDigit(InputName[k]) == false)
		{
			return InputName;
		}
		Count++;
		if (FChar::IsDigit(InputName[k]))
		{
			Numbers++;
		}
		else
		{
			Letters++;
		}
	}
	// currently assuming appended UUID is at least 8 characters
	if (Numbers == 0 || Letters == 0 || Count < 8)
	{
		return InputName;
	}

	return InputName.Left(Index);
}
