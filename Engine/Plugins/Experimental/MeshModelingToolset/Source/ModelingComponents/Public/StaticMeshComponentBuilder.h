// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

#pragma once

#include "CoreMinimal.h"

class AActor;
class UStaticMesh;
class UStaticMeshComponent;
struct FMeshDescription;


/**
 * FStaticMeshComponentBuilder is a utility class that can build a 
 * proper UStaticMeshComponent.
 */
class MODELINGCOMPONENTS_API FStaticMeshComponentBuilder
{
public:
	/** We will create this UStaticMesh */
	UStaticMesh* NewStaticMesh;
#if WITH_EDITOR
	/** This MeshDescription will be generated by calling NewStaticMesh->CreateMeshDescription(0) */
	FMeshDescription *MeshDescription;
#endif
	/** We will create this component and set NewStaticMesh as it's mesh */
	UStaticMeshComponent* NewMeshComponent;

	FStaticMeshComponentBuilder();

	/**
	 * Call this to create and configure NewStaticMesh and MeshDescription
	 * @param AssetPackage The asset package that the UStaticMesh will be saved into
	 * @param MeshName the name of the mesh asset
	 * @param NumMaterialSlots the number of material slots to create on the static mesh -- if the staticmesh does not have enough slots, corresponding override materials on the staticmeshcomponent will be discarded
	 */
	void Initialize(UPackage* AssetPackage, FName MeshName, int NumMaterialSlots = 1);

	// (do your mesh setup here)

	// 3) Create NewMeshComponent and add to Actor
	/**
	 * Create/Locate NewMeshComponent and assign NewStaticMesh to it, and then add it to the Actor.
	 * If Actor is a AStaticMeshActor instance, then NewMeshComponent will be it's existing StaticMeshComponent, and we will assign NewStaticMesh to it.
	 * Otherwise, we create new StaticMeshComponent, assign NewStaticMesh, and set it as the Root Component of the Actor
	 */
	void CreateAndSetAsRootComponent(AActor* Actor);
};
