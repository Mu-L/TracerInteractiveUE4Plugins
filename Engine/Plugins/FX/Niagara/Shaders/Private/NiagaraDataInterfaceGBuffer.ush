// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

#include "/Engine/Private/DeferredShadingCommon.ush"

#define NDIGBUFFER_ENABLED				(FEATURE_LEVEL >= FEATURE_LEVEL_SM5)
#define NDIGBUFFER_USE_GBUFFER_VELOCITY	0

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Texture2D NDIGBuffer_VelocityTexture;
SamplerState NDIGBuffer_VelocityTextureSampler;

void DIGBuffer_DecodeDiffuseColor(in float2 ScreenUV, out bool IsValid, out float3 OutValue)
{
#if NDIGBUFFER_ENABLED
	FGBufferData GBufferData = GetGBufferData(ScreenUV);
	IsValid = true;
	OutValue = GBufferData.DiffuseColor;
#else
	IsValid = false;
	OutValue = 0;
#endif
}

void DIGBuffer_DecodeWorldNormal(in float2 ScreenUV, out bool IsValid, out float3 OutValue)
{
#if NDIGBUFFER_ENABLED
	FGBufferData GBufferData = GetGBufferData(ScreenUV);
	IsValid = true;
	OutValue = GBufferData.WorldNormal;
#else
	IsValid = false;
	OutValue = 0;
#endif
}

void DIGBuffer_DecodeScreenVelocity(in float2 ScreenUV, out bool IsValid, out float3 OutValue)
{
	IsValid = false;
	OutValue = 0;
#if NDIGBUFFER_ENABLED
	float4 EncodedVelocity = 0;
	#if NDIGBUFFER_USE_GBUFFER_VELOCITY
		EncodedVelocity = GetGBufferData(ScreenUV).Velocity;
	#else
		EncodedVelocity = NDIGBuffer_VelocityTexture.SampleLevel(NDIGBuffer_VelocityTextureSampler, ScreenUV, 0);
	#endif
	IsValid = true;
	if ( EncodedVelocity.x > 0 )
	{
		OutValue.xy = DecodeVelocityFromTexture(EncodedVelocity).xy;
	}
#endif
}

void DIGBuffer_DecodeWorldVelocity(in float2 ScreenUV, out bool IsValid, out float3 OutValue)
{
	IsValid = false;
	OutValue = 0;
#if NDIGBUFFER_ENABLED
	float4 EncodedVelocity = 0;
	#if NDIGBUFFER_USE_GBUFFER_VELOCITY
		EncodedVelocity = GetGBufferData(ScreenUV).Velocity;
	#else
		EncodedVelocity = NDIGBuffer_VelocityTexture.SampleLevel(NDIGBuffer_VelocityTextureSampler, ScreenUV, 0);
	#endif
	IsValid = true;
	if ( EncodedVelocity.x > 0 )
	{
		float2 ScreenVelocity = DecodeVelocityFromTexture(EncodedVelocity).xy;
		ScreenVelocity.y = -ScreenVelocity.y;

		{
			float2 PrevScreenUV = ScreenUV - ScreenVelocity;

			float SceneDepth = CalcSceneDepth(ScreenUV);
			float2 ScreenPosition = (ScreenUV - View.ScreenPositionScaleBias.wz) / View.ScreenPositionScaleBias.xy;
			float3 WorldPosition = mul(float4(ScreenPosition * SceneDepth, SceneDepth, 1), View.ScreenToWorld).xyz;

			// Ideally we would use CalcPrevSceneDepth(PrevScreenUV) here to get an accurate location, however we do not store PrevSceneDepth so this is a very rough approximation
			float PrevSceneDepth = SceneDepth;	//CalcPrevSceneDepth(PrevScreenUV);
			float2 PrevScreenPosition = (PrevScreenUV - View.ScreenPositionScaleBias.wz) / View.ScreenPositionScaleBias.xy;
			float3 PrevWorldPosition = mul(float4(PrevScreenPosition * PrevSceneDepth, PrevSceneDepth, 1), View.ScreenToWorld).xyz;

			OutValue = WorldPosition - PrevWorldPosition;
		}
	}
#endif
}

void DIGBuffer_DecodeBaseColor(in float2 ScreenUV, out bool IsValid, out float3 OutValue)
{
#if NDIGBUFFER_ENABLED
	FGBufferData GBufferData = GetGBufferData(ScreenUV);
	IsValid = true;
	OutValue = GBufferData.BaseColor;
#else
	IsValid = false;
	OutValue = 0;
#endif
}

void DIGBuffer_DecodeMetallic(in float2 ScreenUV, out bool IsValid, out float OutValue)
{
#if NDIGBUFFER_ENABLED
	FGBufferData GBufferData = GetGBufferData(ScreenUV);
	IsValid = true;
	OutValue = GBufferData.Metallic;
#else
	IsValid = false;
	OutValue = 0;
#endif
}

void DIGBuffer_DecodeSpecular(in float2 ScreenUV, out bool IsValid, out float OutValue)
{
#if NDIGBUFFER_ENABLED
	FGBufferData GBufferData = GetGBufferData(ScreenUV);
	IsValid = true;
	OutValue = GBufferData.Specular;
#else
	IsValid = false;
	OutValue = 0;
#endif
}

void DIGBuffer_DecodeRoughness(in float2 ScreenUV, out bool IsValid, out float OutValue)
{
#if NDIGBUFFER_ENABLED
	FGBufferData GBufferData = GetGBufferData(ScreenUV);
	IsValid = true;
	OutValue = GBufferData.Roughness;
#else
	IsValid = false;
	OutValue = 0;
#endif
}

void DIGBuffer_DecodeDepth(in float2 ScreenUV, out bool IsValid, out float OutValue)
{
#if NDIGBUFFER_ENABLED
	FGBufferData GBufferData = GetGBufferData(ScreenUV);
	IsValid = true;
	OutValue = GBufferData.Depth;
#else
	IsValid = false;
	OutValue = 0;
#endif
}

void DIGBuffer_DecodeCustomDepth(in float2 ScreenUV, out bool IsValid, out float OutValue)
{
#if NDIGBUFFER_ENABLED
	FGBufferData GBufferData = GetGBufferData(ScreenUV);
	IsValid = true;
	OutValue = GBufferData.CustomDepth;
#else
	IsValid = false;
	OutValue = 0;
#endif
}

void DIGBuffer_DecodeCustomStencil(in float2 ScreenUV, out bool IsValid, out int OutValue)
{
#if NDIGBUFFER_ENABLED
	FGBufferData GBufferData = GetGBufferData(ScreenUV);
	IsValid = true;
	OutValue = GBufferData.CustomStencil;
#else
	IsValid = false;
	OutValue = 0;
#endif
}

void DIGBuffer_DecodeSceneColor(in float2 ScreenUV, out bool IsValid, out float4 OutValue)
{
#if NDIGBUFFER_ENABLED
	IsValid = true;
	OutValue = Texture2DSampleLevel(SceneTexturesStruct_SceneColorTexture, SceneTexturesStruct_SceneColorTextureSampler, ScreenUV, 0);
	#if USE_PREEXPOSURE
		OutValue.rgb *= View.OneOverPreExposure.xxx;
	#endif
#else
	IsValid = false;
	OutValue = 0;
#endif
}

