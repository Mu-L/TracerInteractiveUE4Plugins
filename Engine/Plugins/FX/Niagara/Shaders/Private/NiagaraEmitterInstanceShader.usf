// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

/*=============================================================================
NiagaraSimulationShader.usf: 
=============================================================================*/
#pragma warning(disable:4008)

#if GPU_SIMULATION
	#include "/Engine/Public/Platform.ush"
	#include "/Engine/Private/Common.ush"
	#include "/Engine/Private/GlobalDistanceFieldShared.ush"
#else
	const static float PI = 3.1415926535897932f;
#endif
	const static float TWO_PI = 3.1415926535897932f*2.0f;

#include "/Engine/Private/Definitions.usf"

// Most of the vector implementations work this way. This helps us keep proper precision.
float4 ModuloPrecise(float4 x, float4 y){ return x - y * trunc(x/y); }
float3 ModuloPrecise(float3 x, float3 y){ return x - y * trunc(x/y); }
float2 ModuloPrecise(float2 x, float2 y){ return x - y * trunc(x/y);}
float ModuloPrecise(float x, float y){ return x - y * trunc(x/y); }
int ModuloPrecise(int x, int y){ return x - y * (x/y); }
int Modulo(int x, int y){  return x - y * (x/y);  }

	
// using rcp is only 12 bits of precision, we should usually pay for perf
float4 Reciprocal(float4 x){ return 1.0f/x;}
float3 Reciprocal(float3 x){ return 1.0f/x; }
float2 Reciprocal(float2 x){ return 1.0f/x;}
float Reciprocal(float x){ return 1.0f/x; }

/* -----------------------------------------------------------------
 * GPU simulation utility functions
 * -----------------------------------------------------------------
 */
#if GPU_SIMULATION

	#include "/Engine/Private/SceneTexturesCommon.ush"

	static uint3 GDispatchThreadId;
	static uint GCurrentPhase;
	uint EmitterTickCounter;

	#define THREADGROUP_SIZE 64

	float4 Modulo(float4 x, float4 y){ return fmod(x,y); }
	float3 Modulo(float3 x, float3 y){ return fmod(x,y); }
	float2 Modulo(float2 x, float2 y){ return fmod(x,y); }
	float Modulo(float x, float y){ return fmod(x,y); }

	// utility function used for scene depth calculations
	float3 WorldPositionFromSceneDepth(float2 ScreenPosition, float SceneDepth)
	{
		float4 HomogeneousWorldPosition = mul(float4(ScreenPosition * SceneDepth, SceneDepth, 1), View.ScreenToWorld);
		return HomogeneousWorldPosition.xyz / HomogeneousWorldPosition.w;
	}

	// MASSIVE HACK - Tracked in JIRA UE-69298
	// Hardcoded random function accessible from inner part of node implementation.
	// It works for now at least and avoids exposing every random needed in the UI. 
	// Temporary solution, it will be replaced when a design is validated.
	float NiagaraInternalNoise(uint u, uint v, uint s)
	{
		static uint RandomSeedOffset = 0;
		uint Seed = (u * 1664525u + v) + s + RandomSeedOffset;
		RandomSeedOffset += Seed;
		return float(Rand3DPCG32(int3(u,v,Seed)).x) / 4294967296.0f;
	}
#endif

/* ----------------------------------------------------------------------------
 * Seeded/Deterministic random number generation functions
 *
 * This is a variant of NiagaraRand4DPCG32 from Random.ush. 
 *
 * uint is not fully supported in the VM so we simply use ints and drop the 
 * top and bottom bit swap. This should be fine since signed overflow should 
 * produce the same results as unsigned overflow when comparing bit-by-bit on 
 * all relevant architectures.
 *
 * Warning: Only contains 24 bits of randomness, since we produce values in 
 *          the unit interval. 
 *
 * Note: Deterministic as long as Seed1, Seed2 and Seed3 are the same *and* as 
 *       long as no Random or Seeded Random ops are inserted into or removed 
 *       from the current script.
 *
 * TODO(mv): Might want to use a special case based on NiagaraRand3DPCG32 if 
 *           only 3 or less components are needed, and we can drop one of the 
 *           seeds, to reduce the operation count
 * ----------------------------------------------------------------------------
 */

// static counter that is incremented every time rand3 or rand4 is called. 
static int RandomCounter = 0;

// Returns 4 random normalized floats based on 3 explicit integer seeds and one 
// implicit integer seed. 
float4 rand4(int Seed1, int Seed2, int Seed3)
{
	RandomCounter += 1;

	int4 v = int4(RandomCounter, Seed1, Seed2, Seed3) * 1664525 + 1013904223;

	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;
	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;

	// NOTE(mv): We can use 24 bits of randomness, as all integers in [0, 2^24] 
    //           are exactly representable in single precision floats.
    //           We use the upper 24 bits as they tend to be higher quality.

    // NOTE(mv): The divide can often be folded with the range scale in the rand functions

    return float4((v >> 8) & 0x00ffffff) / 16777216.0; // 0x01000000 == 16777216
    // return float4((v >> 8) & 0x00ffffff) * (1.0/16777216.0); // bugged, see UE-67738
}

// float3 specialization of the above:
// Returns 3 random normalized floats based on 3 explicit integer seeds and one 
// implicit integer seed. The implicit seed takes the upper 16 bits of the third 
// explicit seed, as this is often a global seed. 
// The expression 
// 
//    RandomCounter | (Seed3 << 16)
//
// should be optimized away at compile time, as the third seed is typically 
// a global constant.
float3 rand3(int Seed1, int Seed2, int Seed3)
{
    RandomCounter += 1;

    int3 v = int3(Seed1, Seed2, RandomCounter | (Seed3 << 16)) * 1664525 + 1013904223;

    v.x += v.y*v.z;
    v.y += v.z*v.x;
    v.z += v.x*v.y;
    v.x += v.y*v.z;
    v.y += v.z*v.x;
    v.z += v.x*v.y;

    return float3((v >> 8) & 0x00ffffff) / 16777216.0; // 0x01000000 == 16777216
}

// Cost using rand4: 6 imad, 1 itof, 1 ishr, 1 add, 2 mul
float rand(float x, int Seed1, int Seed2, int Seed3)
{
	return rand3(Seed1, Seed2, Seed3).x * x;
}

// Cost using rand4: 7 imad, 1 itof, 1 ishr, 1 add, 2 mul
float2 rand(float2 x, int Seed1, int Seed2, int Seed3)
{
	return rand3(Seed1, Seed2, Seed3).xy * x;
}

// Cost using rand4: 8 imad, 1 itof, 1 ishr, 1 add, 2 mul
float3 rand(float3 x, int Seed1, int Seed2, int Seed3)
{
	return rand3(Seed1, Seed2, Seed3).xyz * x;
}

// Cost using rand4: 9 imad, 1 itof, 1 ishr, 1 and, 2 mul
float4 rand(float4 x, int Seed1, int Seed2, int Seed3) 
{
    return rand4(Seed1, Seed2, Seed3).xyzw * x;
}

// Cost using rand4: 6 imad, 2 itof, 1 ishr, 1 add, 2 mul, 1 ftoi
int rand(int x, int Seed1, int Seed2, int Seed3)
{
	// NOTE: Scaling a uniform float range provides better distribution of 
	//       numbers than using %.
	// NOTE: Inclusive! So [0, x] instead of [0, x)
	return int(rand3(Seed1, Seed2, Seed3).x * (x+1));
}

/* -----------------------------------------------------------------
 * Un-seeded/Non-deterministic random number generation functions
 * -----------------------------------------------------------------
 */
#if GPU_SIMULATION
	// NOTE(mv): This simply calls the deterministic random number functions 
    //           from the Seeded RNG section, but uses non-deterministic seeds 
    //           as input. In particular, GDispatchThreadId for the first seed 
	//           and EmitterTickCounter for the second seed. Also note that 
	//           EmitterTickCounter does *not* reset for each frame, which 
	//           secures non-determinism across simulations.

	// TODO(mv): This could perhaps be optimized a little bit using slightly 
	//           cheaper functions, but the difference is likely negligible. 
	//           So for the sake of brevity and cleanliness, keep it like this.

	float rand(float x)
	{
		return rand4(GDispatchThreadId.x, EmitterTickCounter, 0).x * x;
	}

	float2 rand(float2 x)
	{
		return rand4(GDispatchThreadId.x, EmitterTickCounter, 0).xy * x;
	}

	float3 rand(float3 x)
	{
		return rand4(GDispatchThreadId.x, EmitterTickCounter, 0).xyz * x;
	}

	float4 rand(float4 x) 
	{
		return rand4(GDispatchThreadId.x, EmitterTickCounter, 0).xyzw * x;
	}

	// Note: integer randoms are INCLUSIVE, i.e. includes both the upper and lower limit
	int rand(int x)
	{
		return int(rand4(GDispatchThreadId.x, EmitterTickCounter, 0).x * (x+1));
	}
#else
	// Old unseeded, passthrough to FRandomStream
	float2 rand(float2 x)
	{
		return float2(rand(x.x), rand(x.y));
	}

	float3 rand(float3 x)
	{
		return float3(rand(x.x), rand(x.y), rand(x.z));
	}

	float4 rand(float4 x) 
	{
		return float4(rand(x.x), rand(x.y), rand(x.z), rand(x.w));
	}
	
	// NOTE(mv): Where's rand(float)? Seems to work regardless..
	int rand(int x);
#endif


/* -----------------------------------------------------------------
 * VM simulation function declarations
 * -----------------------------------------------------------------
 */
#if VM_SIMULATION
	float noise(float x);
	float noise(float2 x);
	float noise(float3 x);

	//Total hack to get around the cross compiler converting fmod() to "X - (Y * trunc(X/Y))";
	//On gpu just define these as fmod(x,y)
	float4 Modulo(float4 x, float4 y);
	float3 Modulo(float3 x, float3 y);
	float2 Modulo(float2 x, float2 y);
	float Modulo(float x, float y);

	/** Returns the index for this particle in the current execution context. On gpu this'll likely be derived from DispatchThreadId */
	int ExecIndex();

	//Some functions that we use to map to special VM operations for reading in data.
	//TODO: replace with proper buffer reading capability and use standard hlsl.
	int AcquireIndex(int DataSetID, bool DoAcquire);

	void AcquireID(int DataSetID, out int IDIndex, out int IDAcquireTag);
	void UpdateID(int DataSetID, int IDIndex, int InstanceIndex);

	float InputDataFloat(int DataSetIndex, int RegisterIdx);  //DataSetIndex is 0 for main dataset
	int InputDataInt(int DataSetIndex, int RegisterIdx);
	bool InputDataBool(int DataSetIndex, int RegisterIdx);

	float InputDataNoadvanceFloat(int DataSetIndex, int RegisterIdx);  //DataSetIndex is 0 for main dataset
	int InputDataNoadvanceInt(int DataSetIndex, int RegisterIdx);
	bool InputDataNoadvanceBool(int DataSetIndex, int RegisterIdx);

	void OutputDataFloat(int DataSetIndex, int RegisterIndex, int InstanceIndex, float Value);
	void OutputDataInt(int DataSetIndex, int RegisterIndex, int InstanceIndex, int Value);
	void OutputDataBool(int DataSetIndex, int RegisterIndex, int InstanceIndex, bool Value);
#endif




/* -----------------------------------------------------------------
 * GPU simulation code
 * -----------------------------------------------------------------
 */
#if GPU_SIMULATION
	static uint GSpawnStartInstance;
		
	/* Parameters for spawning and simulations
	 */
	uint UpdateStartInstance;
	uint SpawnedInstances;

	uint ComponentBufferSizeRead;
	uint ComponentBufferSizeWrite;
	int	NumEventsPerParticle;
	int NumParticlesPerEvent;
	uint CopyInstancesBeforeStart;


	/* Buffers for particle data and DrawIndirect calls
	 */
	Buffer<float> InputFloat;
	Buffer<int> InputInt;
	RWBuffer<int> RWOutputInt;
	RWBuffer<float> RWOutputFloat;

	RWBuffer<uint> RWInstanceCounts;
	uint ReadInstanceCountOffset;
	uint WriteInstanceCountOffset;

	//TODO: IDs for GPU
//	void AcquireID(int DataSetID, out int IDIndex, out int IDAcquireTag);
// 	void UpdateID(int DataSetID, int IDIndex, int InstanceIndex);

	/* Returns the current instance index relative to the operation (spawn/update)
	 */
	int ExecIndex()
	{
		if (GCurrentPhase == 0)
		{
			return UpdateStartInstance + GDispatchThreadId.x - GSpawnStartInstance;
		}
		else 
		{
			return UpdateStartInstance + GDispatchThreadId.x;
		}
	}


	/* Acquire an output index - the default index is the scratch instance; one additional instance is allocated 
	 *	at the end of the buffer, so no branching on -1 is necessary during OutputData operations
	 */
	int AcquireIndex(uniform int DataSetID, bool bDoAcquire)
	{
		// Begin static assert : GPU particles only support DataSetID 0
		int MustBe0[1];
		MustBe0[DataSetID] = 0;
		// End static assert

		int PrevIdx = GSpawnStartInstance + SpawnedInstances;	// scratch instance as default; write to that for dead particles
		if (bDoAcquire)
		{
			// Have to use uint's here to avoid PS4 compiler warnings about InterlockedAdd, cannot propagate uint due to CPU VM limitations...
			uint RetPrevIdx;
			// @TODO : add some TLS logic to avoid thread group for doing atomic for each thread. (gathering the actual required count)
			InterlockedAdd(RWInstanceCounts[WriteInstanceCountOffset], (uint)1U, RetPrevIdx);
			PrevIdx = (int)RetPrevIdx;
		}
		return PrevIdx;
	}



	/* ---------------------------------------------------------------------
	 * InputData operations 
	 * ---------------------------------------------------------------------
	 */
	float InputDataFloat(int DataSetIndex, int RegisterIdx, int InstanceIdx)
	{
		return InputFloat[RegisterIdx*ComponentBufferSizeRead + InstanceIdx];
	}

	int InputDataInt(int DataSetIndex, int RegisterIdx, int InstanceIdx)
	{
		return InputInt[RegisterIdx*ComponentBufferSizeRead + InstanceIdx];
	}
	
	bool InputDataBool(int DataSetIndex, int RegisterIdx, int InstanceIdx)
	{
		return InputInt[RegisterIdx*ComponentBufferSizeRead + InstanceIdx] == -1;
	}


	/* ---------------------------------------------------------------------
	 * OutputData operations 
	 * ---------------------------------------------------------------------
	 */
	void OutputDataFloat(int DataSetIndex, int RegisterIndex, int InstanceIndex, float Value)
	{
		RWOutputFloat[RegisterIndex*ComponentBufferSizeWrite + InstanceIndex + UpdateStartInstance] = Value;
	}

	void OutputDataInt(int DataSetIndex, int RegisterIndex, int InstanceIndex, int Value)
	{
		RWOutputInt[RegisterIndex*ComponentBufferSizeWrite + InstanceIndex + UpdateStartInstance] = Value;
	}

	void OutputDataBool(int DataSetIndex, int RegisterIndex, int InstanceIndex, bool Value)
	{
		RWOutputInt[RegisterIndex*ComponentBufferSizeWrite + InstanceIndex + UpdateStartInstance] = Value ? -1 : 0;
	}

	void EnterStatScope(int ID)	{}
	void ExitStatScope()	{}
#endif

//Include the simulation shader code generated by the node graph.
#include "/Engine/Generated/NiagaraEmitterInstance.ush"


#if GPU_SIMULATION

/* 
 *	CS wrapper for our generated code; calls spawn and update functions on the corresponding instances in the buffer
 */

[numthreads(THREADGROUP_SIZE, 1, 1)]
void SimulateMainComputeCS(
	uint3 GroupId : SV_GroupID,
	uint3 DispatchThreadId : SV_DispatchThreadID,
	uint3 GroupThreadId : SV_GroupThreadID)
{
	GDispatchThreadId = DispatchThreadId;

	/*
	if(CopyInstancesBeforeStart == 1)
	{
		UpdateStartInstance = 0;
	}
	*/

	uint InstanceID = UpdateStartInstance + DispatchThreadId.x;
	GSpawnStartInstance = RWInstanceCounts[ReadInstanceCountOffset];				// needed by ExecIndex()
	int MaxInstances = GSpawnStartInstance + SpawnedInstances;

	if(InstanceID < UpdateStartInstance + MaxInstances )
	{
		// calculate event index for the current instance; this is primarily for spawn events, where we do a single read from a secondary DataSet for a subset of particles
		//  for all-particle events, this will always end up being 0 because NumParticlesPerEvent = total particles in the set
		uint EventIndex = 0; //(InstanceID-SimulateStartInstance) / NumParticlesPerEvent;

		// before the simulation start - either update or copy
		//
		if(InstanceID < GSpawnStartInstance)
		{
			// copy instances before simulation start inst (e.g. for event spawns)
			/*
			if(CopyInstancesBeforeStart)
			{
				CopyInstance(InstanceID);
			}
			else
			*/
			{
				GCurrentPhase = 1;
				SimulateMain(InstanceID, EventIndex, 1);
			}

		}

		// after simulation start - spawn phase
		//
		else if(InstanceID >= GSpawnStartInstance)
		{
			GCurrentPhase = 0;
			SimulateMain(InstanceID, EventIndex, 0);		// SimulateMain spawn phase
		}
	}
}

#endif//GPU_SIMULATION
