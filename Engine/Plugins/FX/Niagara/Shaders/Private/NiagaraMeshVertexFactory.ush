// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	MeshParticleVertexFactory.usf: Mesh particle vertex factory shader code.
=============================================================================*/

#include "/Engine/Private/VertexFactoryCommon.ush"
#include "NiagaraVFParticleAccess.usf"

// These are only enabled for SM5 due to limited interpolators elsewhere
#define USE_PARTICLE_POSITION (FEATURE_LEVEL >= FEATURE_LEVEL_SM5 && NEEDS_PARTICLE_POSITION)
#define USE_PARTICLE_VELOCITY (FEATURE_LEVEL >= FEATURE_LEVEL_SM5 && NEEDS_PARTICLE_VELOCITY)
#define USE_PARTICLE_TIME (FEATURE_LEVEL >= FEATURE_LEVEL_SM5 && NEEDS_PARTICLE_TIME)
#define USE_PARTICLE_RANDOM (FEATURE_LEVEL >= FEATURE_LEVEL_SM5 && NEEDS_PARTICLE_RANDOM)
#define USE_PARTICLE_TRANSFORM (FEATURE_LEVEL >= FEATURE_LEVEL_SM5 && NEEDS_PARTICLE_TRANSFORM)

// Only support previous transform for deferred feature level
//#define USE_PREVIOUS_TRANSFORM (FEATURE_LEVEL >= FEATURE_LEVEL_SM4)
#define USE_PREVIOUS_TRANSFORM 0

uint MeshFacingMode;

#if USE_PREVIOUS_TRANSFORM
	Buffer<float4> PrevTransformBuffer;
#endif

#define MESH_FACING_DEFAULT 0
#define MESH_FACING_VELOCITY 1
#define MESH_FACING_CAMERA_POSITION 2
#define MESH_FACING_CAMERA_PLANE 3

/** Sorted index buffer for particles if we need to sort their draw order (translucency etc). */
Buffer<int> SortedIndices;
uint SortedIndicesOffset;

struct FVertexFactoryInput
{
	float4	Position	: ATTRIBUTE0;
	half3	TangentX	: ATTRIBUTE1;
	// TangentZ.w contains sign of tangent basis determinant
	half4	TangentZ	: ATTRIBUTE2;
	half4	VertexColor : ATTRIBUTE3;

#if NUM_MATERIAL_TEXCOORDS_VERTEX
	float2	TexCoords[NUM_MATERIAL_TEXCOORDS_VERTEX] : ATTRIBUTE4;
#elif USE_PARTICLE_SUBUVS
	float2	TexCoords[1] : ATTRIBUTE4;
#endif


	uint InstanceId	: SV_InstanceID;
};

struct FVertexFactoryInterpolantsVSToPS
{
	TANGENTTOWORLD_INTERPOLATOR_BLOCK

#if USE_PARTICLE_SUBUVS
	float4 SubUV0AndTexCoord0 : TEXCOORD1;
	float4 SubUV1AndLerp : TEXCOORD2;
#else
	#if  NUM_TEX_COORD_INTERPOLATORS
			#if (ES2_PROFILE || ES3_1_PROFILE)
				// Avoid dependent texture fetches, put all UVs in xy
				float2	TexCoords[ NUM_TEX_COORD_INTERPOLATORS] : TEXCOORD0;
			#else
				float4	TexCoords[( NUM_TEX_COORD_INTERPOLATORS+1)/2]	: TEXCOORD0;
			#endif
	#endif
#endif

#if INTERPOLATE_VERTEX_COLOR
	float4	VertexColor : COLOR0;
#endif

#if NEEDS_PARTICLE_COLOR
	float4	ParticleColor : COLOR1;
#endif

#if (DYNAMIC_PARAMETERS_MASK & 1)
	float4 DynamicParameter : COLOR2;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 2)
	float4 DynamicParameter1 : COLOR3;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 4)
	float4 DynamicParameter2 : COLOR4;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 8)
	float4 DynamicParameter3 : COLOR5;
#endif

#if USE_PARTICLE_POSITION
	/** Particle position in camera-centered translated world space */
	float3 ParticleTranslatedWorldPosition	: PARTICLE_POSITION;
#endif

#if USE_PARTICLE_VELOCITY
	/** The velocity of the particle, XYZ: direction, W: speed. */
	float4 ParticleVelocity	: PARTICLE_VELOCITY;
#endif

#if USE_PARTICLE_TIME
	/** Relative alive time of the particle */
	float RelativeTime : PARTICLE_TIME;
#endif

#if USE_PARTICLE_RANDOM
	float ParticleRandom : PARTICLE_RANDOM;
#endif

#if USE_PARTICLE_TRANSFORM
	float4 LocalToWorld[4] : PARTICLE_TRANSFORM;
#endif

#if INSTANCED_STEREO
	nointerpolation uint EyeIndex : PACKED_EYE_INDEX;
#endif
};

struct FVertexFactoryIntermediates
{
	/** The color of the vertex. */
	float4 VertexColor;

	/** The color of the particle. */
	float4 ParticleColor;

	/** The texture coordinates for the vertex. */
#if NUM_MATERIAL_TEXCOORDS_VERTEX
	float2	TexCoords[NUM_MATERIAL_TEXCOORDS_VERTEX];
#endif
#if USE_PARTICLE_SUBUVS
	float4 SubUVCoords;
	float SubUVLerp;
#endif

	/** Optional dynamic parameters for the particle. */
#if (DYNAMIC_PARAMETERS_MASK & 1)
	float4 DynamicParameter;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 2)
	float4 DynamicParameter1;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 4)
	float4 DynamicParameter2;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 8)
	float4 DynamicParameter3;
#endif

	/** The position of the particle, XYZ: direction. */
	float4 ParticlePosition;

	/** The velocity of the particle, XYZ: direction, W: speed. */
	float4 ParticleVelocity;

	/** Particle position in camera-centered translated world space. */
	float3 ParticleTranslatedWorldPosition;

#if USE_PARTICLE_TIME
	/** Relative time. */
	float RelativeTime;
#endif

#if USE_PARTICLE_RANDOM
	/** Particle Random value */
	float ParticleRandom;
#endif

	float4x4 LocalToWorld;
};

float4x4 GetParticleTransform(FVertexFactoryIntermediates Inters)
{
	return Inters.LocalToWorld;
}

#if USE_PREVIOUS_TRANSFORM
float4x4 GetParticlePrevTransform(FVertexFactoryInput Input)
{
	uint TransformBaseIdx = Input.InstanceId * 3;

	float4x4 PrevTransform4x4 = float4x4(
		PrevTransformBuffer[TransformBaseIdx + 0],
		PrevTransformBuffer[TransformBaseIdx + 1],
		PrevTransformBuffer[TransformBaseIdx + 2],
		float4(0, 0, 0, 1)
		);

	//Transform is transposed on CPU and position is packed into W. Transpose again to get the correct transform back.
	return transpose(PrevTransform4x4);
}
#endif

/** Converts from vertex factory specific interpolants to a FMaterialPixelParameters, which is used by material inputs. */
FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants, float4 SvPosition)
{
	// GetMaterialPixelParameters is responsible for fully initializing the result
	FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();

#if USE_PARTICLE_SUBUVS
	#if  NUM_TEX_COORD_INTERPOLATORS
		UNROLL
		for( int CoordinateIndex = 0; CoordinateIndex <  NUM_TEX_COORD_INTERPOLATORS; CoordinateIndex++ )
		{
			Result.TexCoords[CoordinateIndex] = Interpolants.SubUV0AndTexCoord0.zw;
		}
	#endif
	Result.Particle.SubUVCoords[0] = Interpolants.SubUV0AndTexCoord0.xy;
	Result.Particle.SubUVCoords[1] = Interpolants.SubUV1AndLerp.xy;
	Result.Particle.SubUVLerp = Interpolants.SubUV1AndLerp.z;
#elif  NUM_TEX_COORD_INTERPOLATORS
	#if (ES2_PROFILE || ES3_1_PROFILE)
		UNROLL
		for( int CoordinateIndex = 0; CoordinateIndex <  NUM_TEX_COORD_INTERPOLATORS; CoordinateIndex++ )
		{
			Result.TexCoords[CoordinateIndex] = Interpolants.TexCoords[CoordinateIndex].xy;
		}
	#else
		UNROLL
		for(int CoordinateIndex = 0;CoordinateIndex <  NUM_TEX_COORD_INTERPOLATORS;CoordinateIndex += 2)
		{
			Result.TexCoords[CoordinateIndex] = Interpolants.TexCoords[CoordinateIndex/2].xy;

			if(CoordinateIndex + 1 <  NUM_TEX_COORD_INTERPOLATORS)
			{
				Result.TexCoords[CoordinateIndex + 1] = Interpolants.TexCoords[CoordinateIndex/2].wz;
			}
		}
	#endif
#endif

	half3 TangentToWorld0 = Interpolants.TangentToWorld0.xyz;
	half4 TangentToWorld2 = Interpolants.TangentToWorld2;
	Result.UnMirrored = TangentToWorld2.w;

#if INTERPOLATE_VERTEX_COLOR
	Result.VertexColor = Interpolants.VertexColor;
#else
	Result.VertexColor = 0;
#endif

#if NEEDS_PARTICLE_COLOR
	Result.Particle.Color = Interpolants.ParticleColor;
#endif

#if (DYNAMIC_PARAMETERS_MASK != 0)
	Result.Particle.DynamicParameterValidMask = NiagaraMeshVF.MaterialParamValidMask;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 1)
	Result.Particle.DynamicParameter = Interpolants.DynamicParameter;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 2)
	Result.Particle.DynamicParameter1 = Interpolants.DynamicParameter1;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 4)
	Result.Particle.DynamicParameter2 = Interpolants.DynamicParameter2;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 8)
	Result.Particle.DynamicParameter3 = Interpolants.DynamicParameter3;
#endif

#if USE_PARTICLE_POSITION
	Result.Particle.TranslatedWorldPositionAndSize.xyz = Interpolants.ParticleTranslatedWorldPosition.xyz;
	Result.Particle.TranslatedWorldPositionAndSize.w = 1;
#endif

#if USE_PARTICLE_VELOCITY
	Result.Particle.Velocity = Interpolants.ParticleVelocity;
#endif

#if USE_PARTICLE_TIME
	Result.Particle.RelativeTime = Interpolants.RelativeTime;
#endif

#if USE_PARTICLE_RANDOM
	Result.Particle.Random = Interpolants.ParticleRandom;
#else
	Result.Particle.Random = 0.0f;
#endif

#if USE_PARTICLE_TRANSFORM
	Result.Particle.LocalToWorld[0] = float4(Interpolants.LocalToWorld[0].x, Interpolants.LocalToWorld[1].x, Interpolants.LocalToWorld[2].x, Interpolants.LocalToWorld[3].x);
	Result.Particle.LocalToWorld[1] = float4(Interpolants.LocalToWorld[0].y, Interpolants.LocalToWorld[1].y, Interpolants.LocalToWorld[2].y, Interpolants.LocalToWorld[3].y);
	Result.Particle.LocalToWorld[2] = float4(Interpolants.LocalToWorld[0].z, Interpolants.LocalToWorld[1].z, Interpolants.LocalToWorld[2].z, Interpolants.LocalToWorld[3].z);
	Result.Particle.LocalToWorld[3] = float4(Interpolants.LocalToWorld[0].w, Interpolants.LocalToWorld[1].w, Interpolants.LocalToWorld[2].w, Interpolants.LocalToWorld[3].w);
#endif

	Result.Particle.MotionBlurFade = 1.0f;
	Result.TangentToWorld = AssembleTangentToWorld( TangentToWorld0, TangentToWorld2 );
	Result.TwoSidedSign = 1;

#if USE_WORLDVERTEXNORMAL_CENTER_INTERPOLATION
	Result.WorldVertexNormal_Center = Interpolants.TangentToWorld2_Center.xyz;
#endif

	return Result;
}

/** Converts from vertex factory specific input to a FMaterialVertexParameters, which is used by vertex shader material inputs. */
FMaterialVertexParameters GetMaterialVertexParameters(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 WorldPosition, float3x3 TangentToLocal)
{
	FMaterialVertexParameters Result = (FMaterialVertexParameters)0;
	Result.WorldPosition = WorldPosition;
	Result.VertexColor = Intermediates.VertexColor;
	Result.PreSkinnedPosition = Input.Position.xyz;
	Result.PreSkinnedNormal = TangentBias(Input.TangentZ.xyz);

#if USE_PARTICLE_POSITION
	Result.Particle.TranslatedWorldPositionAndSize.xyz = Intermediates.ParticleTranslatedWorldPosition.xyz;
	Result.Particle.TranslatedWorldPositionAndSize.w = 1;
#endif

#if USE_PARTICLE_VELOCITY
	Result.Particle.Velocity = Intermediates.ParticleVelocity;
#endif

#if USE_PARTICLE_TIME
	Result.Particle.RelativeTime = Intermediates.RelativeTime;
#endif

#if USE_PARTICLE_RANDOM
	Result.Particle.Random = Intermediates.ParticleRandom;
#else
	Result.Particle.Random = 0.0f;
#endif

	Result.Particle.Color = Intermediates.ParticleColor;

#if (DYNAMIC_PARAMETERS_MASK != 0)
	Result.Particle.DynamicParameterValidMask = NiagaraMeshVF.MaterialParamValidMask;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 1)
	Result.Particle.DynamicParameter = Intermediates.DynamicParameter;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 2)
	Result.Particle.DynamicParameter1 = Intermediates.DynamicParameter1;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 4)
	Result.Particle.DynamicParameter2 = Intermediates.DynamicParameter2;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 8)
	Result.Particle.DynamicParameter3 = Intermediates.DynamicParameter3;
#endif

	float4x4 Transform = GetParticleTransform(Intermediates);
	Result.InstanceLocalToWorld = Transform;

#if USE_PARTICLE_TRANSFORM
	Result.Particle.LocalToWorld[0] = float4(Transform[0].x, Transform[1].x, Transform[2].x, Transform[3].x);
	Result.Particle.LocalToWorld[1] = float4(Transform[0].y, Transform[1].y, Transform[2].y, Transform[3].y);
	Result.Particle.LocalToWorld[2] = float4(Transform[0].z, Transform[1].z, Transform[2].z, Transform[3].z);
	Result.Particle.LocalToWorld[3] = float4(Transform[0].w, Transform[1].w, Transform[2].w, Transform[3].w);
#endif

	Result.TangentToWorld = mul(TangentToLocal, (float3x3)Transform );

#if USE_PREVIOUS_TRANSFORM
	Result.PrevFrameLocalToWorld = GetParticlePrevTransform(Input);
#else
	Result.PrevFrameLocalToWorld = GetParticleTransform(Intermediates);
#endif

#if NUM_MATERIAL_TEXCOORDS_VERTEX
	for(int CoordinateIndex = 0; CoordinateIndex < NUM_MATERIAL_TEXCOORDS_VERTEX; CoordinateIndex++)
	{
		Result.TexCoords[CoordinateIndex] = Intermediates.TexCoords[CoordinateIndex];
	}
#endif

	return Result;
}

float4 CalcWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	float4x4 Transform = GetParticleTransform(Intermediates);
	float3 WorldPosition = mul(Input.Position, Transform).xyz + ResolvedView.PreViewTranslation;
	return float4(WorldPosition, Input.Position.w);
}

float4 CalcPrevWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
#if USE_PREVIOUS_TRANSFORM
	if (MeshParticleVF.PrevTransformAvailable > 0)
	{
		float4x4 PrevTransform = GetParticlePrevTransform(Input);
		float3 PrevWorldPosition = mul(Input.Position, PrevTransform).xyz + ResolvedView.PrevPreViewTranslation;
		return float4(PrevWorldPosition, Input.Position.w);
	}
	else
#endif
	// if we don't have a full previous transform, we can at least calculate the position to get some motion blur
	{
		float3 WorldPosition = CalcWorldPosition(Input, Intermediates).xyz;

		// ParticleVelocity.xyz - normalized direction vector
		// ParticleVelocity.w - velocity magnitude
		float3 WorldDisplacement = -(Intermediates.ParticleVelocity.xyz * (Intermediates.ParticleVelocity.w * NiagaraMeshVF.DeltaSeconds));

		float3 PrevWorldPosition = WorldPosition - ResolvedView.PreViewTranslation;
		PrevWorldPosition += WorldDisplacement + ResolvedView.PrevPreViewTranslation;

		return float4(PrevWorldPosition.xyz, Input.Position.w);
	}
}

// From UnrealMath::FindBetween
float4 FindQuatBetween(float3 From, float3 To)
{
	float NormAB = 1.0f;
	float w = NormAB + dot(From, To);
	float4 Result;

	if (w >= 1e-6f * NormAB)
	{
		//Axis = cross(From, To);
		Result = float4(From.y * To.z - From.z * To.y,
					   From.z * To.x - From.x * To.z,
					   From.x * To.y - From.y * To.x,
					   w);
	}
	else
	{
		// From and To point in opposite directions
		w = 0.f;
		Result = abs(From.x) > abs(From.y)
				? float4(-From.z, 0.f, From.x, w)
				: float4(0.f, -From.z, From.y, w);
	}

	Result = normalize(Result);
	return Result;
}

float4x4 QuatTo4x4(float4 Q)
{
	float x2 = Q.x + Q.x;  float y2 = Q.y + Q.y;  float z2 = Q.z + Q.z;
	float xx = Q.x * x2;   float xy = Q.x * y2;   float xz = Q.x * z2;
	float yy = Q.y * y2;   float yz = Q.y * z2;   float zz = Q.z * z2;
	float wx = Q.w * x2;   float wy = Q.w * y2;   float wz = Q.w * z2;

	float4x4 Mat = {
	/*M[0][0]*/ 1.0f - (yy + zz),	/*M[1][0]*/ xy - wz,				/*M[2][0]*/ xz + wy,		0.0f,
	/*M[0][1]*/ xy + wz,			/*M[1][1]*/ 1.0f - (xx + zz),		/*M[2][1]*/ yz - wx,		0.0f,
	/*M[0][2]*/ xz - wy,			/*M[1][2]*/ yz + wx,				/*M[2][2]*/ 1.0f - (xx + yy),0.0f,
	0.0f,							0.0f,								0.0f,						1.0f
	};
	return Mat;
}

void AxisAngleToPitchYawRoll(float4 AxisAngle, out float Pitch, out float Yaw, out float Roll)
{
	AxisAngle.xyz= normalize(AxisAngle).xyz;
	Yaw = atan2(AxisAngle.y, AxisAngle.x) * (180.f / PI);
	if (AxisAngle.y == 0.0f && AxisAngle.x == 0.0f) // atan2 is undefined for 0,0
	{
		Yaw = 0.0f;
	}
	Pitch = atan2(AxisAngle.z,sqrt(AxisAngle.x*AxisAngle.x+AxisAngle.y*AxisAngle.y)) * (180.f / PI);
	Roll = AxisAngle.w* (180.f / PI);
}


float4 EulerToQuaternion(float Pitch, float Yaw, float Roll)
{
	float DEG_TO_RAD = PI/(180.f);
	float DIVIDE_BY_2 = DEG_TO_RAD/2.f;
	float SP = sin(Pitch*DIVIDE_BY_2);
	float SY = sin(Yaw*DIVIDE_BY_2);
	float SR = sin(Roll*DIVIDE_BY_2);
	float CP = cos(Pitch*DIVIDE_BY_2);
	float CY = cos(Yaw*DIVIDE_BY_2);
	float CR = cos(Roll*DIVIDE_BY_2);

	float4 RotationQuat;
	RotationQuat.x =  CR*SP*SY - SR*CP*CY;
	RotationQuat.y = -CR*SP*CY - SR*CP*SY;
	RotationQuat.z =  CR*CP*SY - SR*SP*CY;
	RotationQuat.w =  CR*CP*CY + SR*SP*SY;

	return RotationQuat;
}

float4x4 EulerToMat4x4(float Pitch, float Yaw, float Roll)
{
	float4 Quat = EulerToQuaternion(Pitch, Yaw, Roll);
	return QuatTo4x4(Quat);
}


FVertexFactoryIntermediates GetVertexFactoryIntermediates(FVertexFactoryInput Input)
{
	FVertexFactoryIntermediates Intermediates = (FVertexFactoryIntermediates)0;

#if !SHADOW_DEPTH_SHADER && !SPHERICAL_OPACITY_FOR_SHADOW_DEPTHS
	// Don't use sort buffer in the shadow because they are only valid after opaque.
	if (SortedIndicesOffset != 0xFFFFFFFF)
	{
		Input.InstanceId = SortedIndices[SortedIndicesOffset + Input.InstanceId];
	}
#endif

	if (NiagaraMeshVF.PositionDataOffset == -1)
	{
		Intermediates.ParticlePosition = NiagaraMeshVF.DefaultPos;
	}
	else
	{
		Intermediates.ParticlePosition = float4(GetVec3(NiagaraMeshVF.PositionDataOffset, Input.InstanceId), 1);
	}

	if (NiagaraMeshVF.ColorDataOffset == -1)
	{
		Intermediates.ParticleColor = float4(1.0f, 1.0f, 1.0f, 1.0f);
	}
	else
	{
		Intermediates.ParticleColor = GetVec4(NiagaraMeshVF.ColorDataOffset, Input.InstanceId);
	}

	float3 ParticleVelocity;
	if (NiagaraMeshVF.VelocityDataOffset == -1)
	{
		ParticleVelocity = float3(0.0f, 0.0f, 0.0f);
	}
	else
	{
		ParticleVelocity = float3(GetVec3(NiagaraMeshVF.VelocityDataOffset, Input.InstanceId));
	}

#if (DYNAMIC_PARAMETERS_MASK & 1)
	Intermediates.DynamicParameter = NiagaraMeshVF.MaterialParamDataOffset != -1 ? GetVec4(NiagaraMeshVF.MaterialParamDataOffset, Input.InstanceId) : float4(1, 1, 1, 1);
#endif
#if (DYNAMIC_PARAMETERS_MASK & 2)
	Intermediates.DynamicParameter1 = NiagaraMeshVF.MaterialParam1DataOffset != -1 ? GetVec4(NiagaraMeshVF.MaterialParam1DataOffset, Input.InstanceId) : float4(1, 1, 1, 1);
#endif
#if (DYNAMIC_PARAMETERS_MASK & 4)
	Intermediates.DynamicParameter2 = NiagaraMeshVF.MaterialParam2DataOffset != -1 ? GetVec4(NiagaraMeshVF.MaterialParam2DataOffset, Input.InstanceId) : float4(1, 1, 1, 1);
#endif
#if (DYNAMIC_PARAMETERS_MASK & 8)
	Intermediates.DynamicParameter3 = NiagaraMeshVF.MaterialParam3DataOffset != -1 ? GetVec4(NiagaraMeshVF.MaterialParam3DataOffset, Input.InstanceId) : float4(1, 1, 1, 1);
#endif

#if USE_PARTICLE_TIME
	if (NiagaraMeshVF.NormalizedAgeDataOffset == -1)
	{
		Intermediates.RelativeTime = 0;
	}
	else
	{
		Intermediates.RelativeTime = GetFloat(NiagaraMeshVF.NormalizedAgeDataOffset, Input.InstanceId);
	}
#endif

#if USE_PARTICLE_RANDOM
	if (NiagaraMeshVF.MaterialRandomDataOffset == -1)
	{
		Intermediates.ParticleRandom = 0;
	}
	else
	{
		Intermediates.ParticleRandom = GetFloat(NiagaraMeshVF.MaterialRandomDataOffset, Input.InstanceId);
	}
#endif

#if USE_PARTICLE_VELOCITY
	float ParticleVelocityMagnitude = length(ParticleVelocity);

	Intermediates.ParticleVelocity.xyz = (ParticleVelocityMagnitude > 0) ? normalize(ParticleVelocity) : float3(0.0f, 0.0f, 0.0f);
	Intermediates.ParticleVelocity.w = ParticleVelocityMagnitude;
#endif

	float4 Transform1 = float4(1.0f, 0.0f, 0.0f, Intermediates.ParticlePosition.x);
	float4 Transform2 = float4(0.0f, 1.0f, 0.0f, Intermediates.ParticlePosition.y);
	float4 Transform3 = float4(0.0f, 0.0f, 1.0f, Intermediates.ParticlePosition.z);

	if(NiagaraMeshVF.TransformDataOffset != -1)
	{
		float4 Quat = GetVec4(NiagaraMeshVF.TransformDataOffset, Input.InstanceId);

		//Transform axis to handle local space.
		//AxisAngle.xyz = mul(float4(AxisAngle.xyz, 0), NiagaraMeshVF.LocalToWorldInverseTransposed);


		float4x4 EulerToMat = QuatTo4x4(normalize(Quat));
		Transform1.xyz = EulerToMat[0].xyz;
		Transform2.xyz = EulerToMat[1].xyz;
		Transform3.xyz = EulerToMat[2].xyz;
	}
	float4x4 ScaleMatrix = float4x4(float4(1.0f, 0.0f, 0.0f, 0.0f), float4(0.0f, 1.0f, 0.0f, 0.0f), float4(0.0f, 0.0f, 1.0f, 0.0f), float4(0.0f, 0.0f, 0.0f, 1.0f));
	if(NiagaraMeshVF.ScaleDataOffset != -1)
	{
		float3 Scale = GetVec3(NiagaraMeshVF.ScaleDataOffset, Input.InstanceId);
		ScaleMatrix[0][0] *= Scale.x;
		ScaleMatrix[1][1] *= Scale.y;
		ScaleMatrix[2][2] *= Scale.z;
	}
	// Swizzle vertex color.
	Intermediates.VertexColor = Input.VertexColor FCOLOR_COMPONENT_SWIZZLE;

	// World position and localtoworld transform.
	float4x4 LocalToWorldMat = float4x4(Transform1, Transform2, Transform3, float4(0.0f, 0.0f, 0.0f, 1.0f));

	Intermediates.ParticleTranslatedWorldPosition = Intermediates.ParticlePosition.xyz + ResolvedView.PreViewTranslation.xyz;

	if (MeshFacingMode == MESH_FACING_VELOCITY)
	{
		float4 ToAlignmentQuat = FindQuatBetween(float3(1.0f, 0.0f, 0.0f), normalize(ParticleVelocity.xyz));
		float4x4 ToAlignmentMat = QuatTo4x4( normalize(ToAlignmentQuat) );
		Intermediates.LocalToWorld =  mul(LocalToWorldMat, mul(ToAlignmentMat, ScaleMatrix));
	}
	else if (MeshFacingMode == MESH_FACING_CAMERA_POSITION)
	{
		float3 WorldPosition = mul(Intermediates.ParticlePosition, NiagaraMeshVF.LocalToWorld).xyz;
		float3 CameraVector = ResolvedView.WorldCameraOrigin.xyz - WorldPosition.xyz;
		float3 CameraDirection = normalize(CameraVector);
		float4 ToAlignmentQuat = FindQuatBetween(float3(1.0f, 0.0f, 0.0f), CameraDirection);
		float4x4 ToAlignmentMat = QuatTo4x4( normalize(ToAlignmentQuat) );
		Intermediates.LocalToWorld = mul(LocalToWorldMat, mul(ToAlignmentMat, ScaleMatrix));
	}
	else if (MeshFacingMode == MESH_FACING_CAMERA_PLANE)
	{
		float3 CameraFacingVector = -ResolvedView.ViewForward;
		float4 ToAlignmentQuat = FindQuatBetween(float3(1.0f, 0.0f, 0.0f), CameraFacingVector);
		float4x4 ToAlignmentMat = QuatTo4x4( normalize(ToAlignmentQuat) );
		Intermediates.LocalToWorld =  mul(LocalToWorldMat, mul(ToAlignmentMat, ScaleMatrix));
	}
	else
	{
		Intermediates.LocalToWorld =  mul(LocalToWorldMat, ScaleMatrix);
	}

	//Handle local space. TODO: Optimize behind define.
	//Apply local space to local to world, also pretranspse here to avoid it in the vs&ps
	Intermediates.LocalToWorld = transpose(Intermediates.LocalToWorld);
	Intermediates.LocalToWorld = mul(Intermediates.LocalToWorld, NiagaraMeshVF.LocalToWorld);
	Intermediates.ParticlePosition = mul(Intermediates.ParticlePosition, NiagaraMeshVF.LocalToWorld);
	//Intermediates.ParticleVelocity.xyz = mul(float4(Intermediates.ParticleVelocity.xyz,0), NiagaraMeshVF.LocalToWorldInverseTransposed);

#if NUM_MATERIAL_TEXCOORDS_VERTEX
	for(int CoordinateIndex = 0; CoordinateIndex < NUM_MATERIAL_TEXCOORDS_VERTEX; CoordinateIndex++)
	{
		Intermediates.TexCoords[CoordinateIndex] = Input.TexCoords[CoordinateIndex].xy;
	}
#endif

#if USE_PARTICLE_SUBUVS
		Intermediates.SubUVCoords.xy = (float2( Input.SubUVParams.x, Input.SubUVParams.y ) + Input.TexCoords[0].xy) * MeshParticleVF.SubImageSize.xy;
		Intermediates.SubUVCoords.zw = (float2( Input.SubUVParams.z, Input.SubUVParams.w ) + Input.TexCoords[0].xy) * MeshParticleVF.SubImageSize.xy;
		//Intermediates.SubUVLerp = Input.SubUVLerpAndRelTime.x;
#endif

	//Intermediates.RelativeTime = Input.SubUVLerpAndRelTime.y;

	return Intermediates;
}

/**
* Get the 3x3 tangent basis vectors for this vertex factory
* this vertex factory will calculate the binormal on-the-fly
*
* @param Input - vertex input stream structure
* @return 3x3 matrix
*/
float3x3 VertexFactoryGetTangentToLocal( FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates )
{
	float3x3 Result=0;
	float3 TangentX = TangentBias(Input.TangentX);
	float4 TangentZ = TangentBias(Input.TangentZ);

	// pass-thru the tangent
	Result[0] = TangentX;
	// pass-thru the normal
	Result[2] = TangentZ.xyz;


	// derive the binormal by getting the cross product of the normal and tangent
	Result[1] = cross(Result[2], Result[0]) * TangentZ.w;
	// Recalculate TangentX off of the other two vectors
	// This corrects quantization error since TangentX was passed in as a quantized vertex input
	// The error shows up most in specular off of a mesh with a smoothed UV seam (normal is smooth, but tangents vary across the seam)
	Result[0] = cross(Result[1], Result[2]) * TangentZ.w;

	return Result;
}

// @return translated world position
float4 VertexFactoryGetWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return CalcWorldPosition(Input, Intermediates);
}

float4 VertexFactoryGetRasterizedWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float4 InWorldPosition)
{
	return InWorldPosition;
}

float3 VertexFactoryGetWorldNormal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.LocalToWorld[2].xyz;
}

float3 VertexFactoryGetPositionForVertexLighting(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 TranslatedWorldPosition)
{
	return TranslatedWorldPosition;
}

void CalcTangentToWorld(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, out float3 TangentToWorld0, out float4 TangentToWorld2)
{
	float3x3 TangentToLocal = VertexFactoryGetTangentToLocal(Input, Intermediates);

	float4x4 Transform = GetParticleTransform(Intermediates);
	float3x3 TangentToWorld = mul(TangentToLocal, (float3x3)Transform);

	// Normalize to remove scaling. Incorrect but faster than computing the inverse-transpose.
	TangentToWorld0 = normalize(TangentToWorld[0]);
	TangentToWorld2 = float4(normalize(TangentToWorld[2]), TangentBias(Input.TangentZ.w) * Primitive.InvNonUniformScaleAndDeterminantSign.w);
}

FVertexFactoryInterpolantsVSToPS VertexFactoryGetInterpolantsVSToPS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
{
	FVertexFactoryInterpolantsVSToPS Interpolants;

#if USE_PARTICLE_SUBUVS
	Interpolants.SubUV0AndTexCoord0.xy = Intermediates.SubUVCoords.xy;
	Interpolants.SubUV1AndLerp.xy = Intermediates.SubUVCoords.zw;
	Interpolants.SubUV1AndLerp.zw = Intermediates.SubUVLerp.xx;

	#if  NUM_TEX_COORD_INTERPOLATORS
		float2 CustomizedUVs[ NUM_TEX_COORD_INTERPOLATORS];
		GetMaterialCustomizedUVs(VertexParameters, CustomizedUVs);
		Interpolants.SubUV0AndTexCoord0.zw = CustomizedUVs[0];
	#else
		Interpolants.SubUV0AndTexCoord0.zw = 0;
	#endif
#elif  NUM_TEX_COORD_INTERPOLATORS
	#if (ES2_PROFILE || ES3_1_PROFILE)
		GetMaterialCustomizedUVs(VertexParameters, Interpolants.TexCoords);
	#else
		// Ensure the unused components of the last packed texture coordinate are initialized.
		Interpolants.TexCoords[( NUM_TEX_COORD_INTERPOLATORS + 1) / 2 - 1] = 0;

		float2 CustomizedUVs[ NUM_TEX_COORD_INTERPOLATORS];
		GetMaterialCustomizedUVs(VertexParameters, CustomizedUVs);
		GetCustomInterpolators(VertexParameters, CustomizedUVs);

		UNROLL
		for(int CoordinateIndex = 0;CoordinateIndex <  NUM_TEX_COORD_INTERPOLATORS;CoordinateIndex += 2)
		{
				Interpolants.TexCoords[CoordinateIndex / 2].xy = CustomizedUVs[CoordinateIndex];
			if(CoordinateIndex + 1 <  NUM_TEX_COORD_INTERPOLATORS)
			{
					Interpolants.TexCoords[CoordinateIndex / 2].wz = CustomizedUVs[CoordinateIndex + 1];
			}
		}
	#endif
#endif


	Interpolants.TangentToWorld0.w = 0;
	CalcTangentToWorld(Input, Intermediates, Interpolants.TangentToWorld0.xyz, Interpolants.TangentToWorld2);
#if USE_WORLDVERTEXNORMAL_CENTER_INTERPOLATION
	Interpolants.TangentToWorld2_Center = Interpolants.TangentToWorld2;
#endif

#if INTERPOLATE_VERTEX_COLOR
	Interpolants.VertexColor = Intermediates.VertexColor;
#endif

#if NEEDS_PARTICLE_COLOR
	Interpolants.ParticleColor = Intermediates.ParticleColor;
#endif

#if (DYNAMIC_PARAMETERS_MASK & 1)
	Interpolants.DynamicParameter = Intermediates.DynamicParameter;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 2)
	Interpolants.DynamicParameter1 = Intermediates.DynamicParameter1;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 4)
	Interpolants.DynamicParameter2 = Intermediates.DynamicParameter2;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 8)
	Interpolants.DynamicParameter3 = Intermediates.DynamicParameter3;
#endif


#if USE_PARTICLE_POSITION
	Interpolants.ParticleTranslatedWorldPosition = Intermediates.ParticleTranslatedWorldPosition;
#endif

#if USE_PARTICLE_VELOCITY
	Interpolants.ParticleVelocity = Intermediates.ParticleVelocity;
#endif

#if USE_PARTICLE_TIME
	Interpolants.RelativeTime = Intermediates.RelativeTime;
#endif

#if USE_PARTICLE_RANDOM
	Interpolants.ParticleRandom = Intermediates.ParticleRandom;
#endif

#if USE_PARTICLE_TRANSFORM
	Interpolants.LocalToWorld[0] = Intermediates.LocalToWorld[0];
	Interpolants.LocalToWorld[1] = Intermediates.LocalToWorld[1];
	Interpolants.LocalToWorld[2] = Intermediates.LocalToWorld[2];
	Interpolants.LocalToWorld[3] = Intermediates.LocalToWorld[3];
#endif

#if INSTANCED_STEREO
	Interpolants.EyeIndex = 0;
#endif

	return Interpolants;
}

// @return previous translated world position
float4 VertexFactoryGetPreviousWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return CalcPrevWorldPosition(Input, Intermediates);
}

uint VertexFactoryGetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{
    return 0;
}

#if USING_TESSELLATION
	struct FVertexFactoryInterpolantsVSToDS
	{
		FVertexFactoryInterpolantsVSToPS InterpolantsVSToPS;
	};

	float2 VertexFactoryGetTextureCoordinateDS( FVertexFactoryInterpolantsVSToDS Interpolants )
	{
	#if NUM_MATERIAL_TEXCOORDS
		return Interpolants.InterpolantsVSToPS.TexCoords[0].xy;
	#else // #if NUM_MATERIAL_TEXCOORDS
		return float2(0,0);
	#endif // #if NUM_MATERIAL_TEXCOORDS
	}

	FVertexFactoryInterpolantsVSToPS VertexFactoryAssignInterpolants(FVertexFactoryInterpolantsVSToDS Input)
	{
		return Input.InterpolantsVSToPS;
	}

	/** Converts from vertex factory specific interpolants to a FMaterialTessellationParameters, which is used by material inputs. */
	FMaterialTessellationParameters GetMaterialTessellationParameters(FVertexFactoryInterpolantsVSToDS Interpolants, float3 CameraLocalWorldPosition)
	{
		FMaterialTessellationParameters	Result;
	#if  NUM_TEX_COORD_INTERPOLATORS
		UNROLL
		for(int CoordinateIndex = 0;CoordinateIndex <  NUM_TEX_COORD_INTERPOLATORS;CoordinateIndex += 2)
		{
			Result.TexCoords[CoordinateIndex] = Interpolants.InterpolantsVSToPS.TexCoords[CoordinateIndex/2].xy;
			if(CoordinateIndex + 1 <  NUM_TEX_COORD_INTERPOLATORS)
			{
				Result.TexCoords[CoordinateIndex + 1] = Interpolants.InterpolantsVSToPS.TexCoords[CoordinateIndex/2].wz;
			}
		}
	#endif

		Result.VertexColor = float4(1,1,1,1);

		half3 TangentToWorld0 = Interpolants.InterpolantsVSToPS.TangentToWorld0.xyz;
		half4 TangentToWorld2 = Interpolants.InterpolantsVSToPS.TangentToWorld2;
		Result.TangentToWorld = AssembleTangentToWorld( TangentToWorld0, TangentToWorld2 );
		Result.TangentToWorldPreScale = 1;
		Result.WorldPosition = CameraLocalWorldPosition + ResolvedView.WorldCameraOrigin;

		return Result;
	}

	FVertexFactoryInterpolantsVSToDS VertexFactoryGetInterpolantsVSToDS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
	{
		FVertexFactoryInterpolantsVSToDS Interpolants;
		Interpolants.InterpolantsVSToPS = VertexFactoryGetInterpolantsVSToPS(Input, Intermediates, VertexParameters);
		return Interpolants;
	}

	FVertexFactoryInterpolantsVSToDS VertexFactoryInterpolate(FVertexFactoryInterpolantsVSToDS a, float aInterp, FVertexFactoryInterpolantsVSToDS b, float bInterp)
	{
		FVertexFactoryInterpolantsVSToDS O;

		// Do we really need to interpolate TangentToWorld2 here? It should be replaced by the
		// interpolated normal from 'whatever' interpolation scheme we're using

		TESSELLATION_INTERPOLATE_MEMBER(InterpolantsVSToPS.TangentToWorld0.xyz);
		TESSELLATION_INTERPOLATE_MEMBER(InterpolantsVSToPS.TangentToWorld2);
#if INTERPOLATE_VERTEX_COLOR
		TESSELLATION_INTERPOLATE_MEMBER(InterpolantsVSToPS.VertexColor);
#endif

#if NEEDS_PARTICLE_COLOR
		TESSELLATION_INTERPOLATE_MEMBER(InterpolantsVSToPS.ParticleColor);
#endif

#if  NUM_TEX_COORD_INTERPOLATORS
		for (int i = 0; i < ( NUM_TEX_COORD_INTERPOLATORS + 1) / 2; ++i)
		{
			TESSELLATION_INTERPOLATE_MEMBER(InterpolantsVSToPS.TexCoords[i]);
		}
#endif

#if (DYNAMIC_PARAMETERS_MASK & 1)
		TESSELLATION_INTERPOLATE_MEMBER(InterpolantsVSToPS.DynamicParameter);
#endif
#if (DYNAMIC_PARAMETERS_MASK & 2)
		TESSELLATION_INTERPOLATE_MEMBER(InterpolantsVSToPS.DynamicParameter1);
#endif
#if (DYNAMIC_PARAMETERS_MASK & 4)
		TESSELLATION_INTERPOLATE_MEMBER(InterpolantsVSToPS.DynamicParameter2);
#endif
#if (DYNAMIC_PARAMETERS_MASK & 8)
		TESSELLATION_INTERPOLATE_MEMBER(InterpolantsVSToPS.DynamicParameter3);
#endif

		return O;
	}

	float3x3 VertexFactoryGetTangentToLocalDS(FVertexFactoryInterpolantsVSToDS Interpolants)
	{
		// This duplicates stuff already going on in GetMaterialTessellationParameters(), so
		// maybe the hull shader could leverage that instead?
		half3 TangentToWorld0 = Interpolants.InterpolantsVSToPS.TangentToWorld0.xyz;
		half4 TangentToWorld2 = Interpolants.InterpolantsVSToPS.TangentToWorld2;
		float3x3 TangentToWorld = AssembleTangentToWorld( TangentToWorld0, TangentToWorld2 );

		return TangentToWorld;
	}
#endif // #if USING_TESSELLATION
