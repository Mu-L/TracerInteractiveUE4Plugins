// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

#include "CoreTypes.h"
#include "IMediaTextureSample.h"
#include "Math/IntPoint.h"
#include "Misc/Timespan.h"
#include "Templates/SharedPointer.h"

#include "IImgMediaReader.h"


/**
 * Texture sample generated by image sequence players.
 */
class FImgMediaTextureSample
	: public IMediaTextureSample
{
public:

	/** Default constructor. */
	FImgMediaTextureSample()
		: Duration(FTimespan::Zero())
		, OutputDim(FIntPoint::ZeroValue)
		, Time(FTimespan::Zero())
	{ }

public:

	/**
	 * Initialize the sample.
	 *
	 * @param InFrame The image frame to create the sample for.
	 * @param InOutputDim The sample's output width and height (in pixels).
	 * @param InTime The sample time (in the player's local clock).
	 * @param InDuration The duration for which the sample is valid.
	 */
	bool Initialize(FImgMediaFrame& InFrame, const FIntPoint& InOutputDim, FTimespan InTime, FTimespan InDuration)
	{
		Duration = InDuration;
		Frame = InFrame;
		OutputDim = InOutputDim;
		Time = InTime;

		return true;
	}

public:

	//~ IMediaTextureSample interface

	virtual const void* GetBuffer() override
	{
		return Frame.Data.Get();
	}

	virtual FIntPoint GetDim() const override
	{
		return Frame.Info.Dim;
	}

	virtual FTimespan GetDuration() const override
	{
		return Duration;
	}

	virtual EMediaTextureSampleFormat GetFormat() const override
	{
		return Frame.Format;
	}

	virtual FIntPoint GetOutputDim() const override
	{
		return OutputDim;
	}

	virtual uint32 GetStride() const override
	{
		return Frame.Stride;
	}

#if WITH_ENGINE
	virtual FRHITexture* GetTexture() const override
	{
		return nullptr;
	}
#endif //WITH_ENGINE

	virtual FTimespan GetTime() const override
	{
		return Time;
	}

	virtual bool IsCacheable() const override
	{
		return true;
	}

	virtual bool IsOutputSrgb() const override
	{
		return Frame.Info.Srgb;
	}

private:

	/** Duration for which the sample is valid. */
	FTimespan Duration;

	/** The image frame that this sample represents. */
	FImgMediaFrame Frame;

	/** Width and height of the output. */
	FIntPoint OutputDim;

	/** Play time for which the sample was generated. */
	FTimespan Time;
};
