// Copyright Epic Games, Inc. All Rights Reserved.
#pragma once

#include "UObject/Object.h"
#include "MovieRenderPipelineDataTypes.h"
#include "Engine/EngineTypes.h"
#include "MoviePipelineSetting.h"
#include "MoviePipelineOutputBase.generated.h"

class UMoviePipeline;

namespace UE
{
namespace MoviePipeline
{
	MOVIERENDERPIPELINECORE_API void ValidateOutputFormatString(FString& InOutFilenameFormatString, const bool bTestRenderPass, const bool bTestFrameNumber);
	MOVIERENDERPIPELINECORE_API void RemoveFrameNumberFormatStrings(FString& InOutFilenameFormatString, const bool bIncludeShots);
}
}

/**
* A base class for different output containers for the data generated by the Movie Pipeline,
* i.e: image sequences, video containers, etc.
*/
UCLASS(Blueprintable, Abstract)
class MOVIERENDERPIPELINECORE_API UMoviePipelineOutputBase : public UMoviePipelineSetting
{
	GENERATED_BODY()
public:

	/** 
	* Called when a frame is ready for output. This will contain all passes the user has requested for the given output frame. 
	* It also contains metrics about the output frame (such as frame number).
	*/
	void OnRecieveImageData(FMoviePipelineMergerOutputFrame* InMergedOutputFrame)
	{
		// If we were transiently added or the user has disabled us, don't try to produce any output
		// because if the user hasn't specified an output we don't want to make it by default.
		if (!GetIsUserCustomized() || !IsEnabled())
		{
			return;
		}

		OnRecieveImageDataImpl(InMergedOutputFrame);
	}

	/**
	* If alpha is supported and desired for this output. This adds about 30% to the accumulation cost so you should only return
	* true if you really want it (ie: Consider AND'ing it with a UI-exposed variable).
	*/
	bool IsAlphaSupported() const { return IsAlphaSupportedImpl(); }

	/** 
	* Called once when all frames have been produced for the pipeline. Use this as an indicator to start flushing to disk. 
	* Async processes can be started here and HasFinishedProcessing() will be called each frame until all all containers
	* return true, at which point Finalize will be called.
	*/
	void BeginFinalize() { BeginFinalizeImpl(); }

	/**
	* Called each frame to check to see if this output container has finished processing. Finalize won't be called until
	* all output containers return true for this. 
	*/
	bool HasFinishedProcessing() { return HasFinishedProcessingImpl(); }

	/** 
	* Called after all output containers have reported that they are done processing.
	*/
	void Finalize() { FinalizeImpl(); }

	/**
	* This is called when a new shot starts, before warm up happens. See OnFrameProductionStart.
	*/
	void OnShotInitialized(const TOptional<FMoviePipelineShotInfo> PrevShot, const FMoviePipelineShotInfo& NewShot) { OnShotInitializedImpl(PrevShot, NewShot); }
	
	/**
	* This is called when a shot ends, right after the last frame is rendered.
	*/
	void OnShotFinished(const FMoviePipelineShotInfo& Shot) { OnShotFinishedImpl(Shot); }

	/**
	* This is called during the Shutdown process of the Pipeline. This is after finalization.
	*/
	void OnPipelineFinished() { OnPipelineFinishedImpl(); }

	/**
	* Called at the end of the frame, before rendering has happened for that frame.
	*/
	void OnPostTick() { OnPostTickImpl(); }
	
protected:
	// UMoviePipelineOutputBase Interface
	virtual void OnRecieveImageDataImpl(FMoviePipelineMergerOutputFrame* InMergedOutputFrame) {}
	virtual bool IsAlphaSupportedImpl() const { return false; }
	virtual void BeginFinalizeImpl() {}
	virtual bool HasFinishedProcessingImpl() { return true; }
	virtual void FinalizeImpl() {}
	virtual void OnShotInitializedImpl(const TOptional<FMoviePipelineShotInfo> PrevShot, const FMoviePipelineShotInfo& NewShot) {}
	virtual void OnShotFinishedImpl(const FMoviePipelineShotInfo& Shot) {}
	virtual void OnPipelineFinishedImpl() {}
	virtual void OnPostTickImpl() {}
	// ~UMoviePipelineOutputBase

protected:
	virtual bool IsValidOnShots() const override { return false; }
	virtual bool IsValidOnMaster() const override { return true; }
#if WITH_EDITOR
	virtual FText GetCategoryText() const override { return NSLOCTEXT("MovieRenderPipeline", "OutputCategoryName_Text", "Output"); }
#endif
protected:
	virtual void ValidateStateImpl() override;

};