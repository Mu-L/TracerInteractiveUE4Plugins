// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

#include "/Engine/Private/Common.ush"

static const float2 QuadPos[6] = 
{
	float2(-1.0, 1.0),  
	float2( 1.0, 1.0),  
	float2( 1.0,-1.0),
	float2(-1.0,-1.0),
	float2( 1.0,-1.0),
	float2(-1.0, 1.0),
};

static const float2 QuadUVs[6] = 
{
	float2(0.0, 0.0),  
	float2(1.0, 0.0),  
	float2(1.0, 1.0),
	float2(0.0, 1.0),
	float2(1.0, 1.0),
	float2(0.0, 0.0),
};

static const float3x3 ColorTransform =
{
    1.164383f,  1.164383f, 1.164383f,
    0.000000f, -0.391762f, 2.017232f,
    1.596027f, -0.812968f, 0.000000f
};

static const float3 YUVOffset = float3(0.062745f, 0.501960f, 0.501960f);

Texture2D TextureY;
Texture2D TextureUV;
SamplerState PointClampedSamplerY;
SamplerState BilinearClampedSamplerUV;

void MainVS(
	in uint VertexId : SV_VertexID,
	out float2 TexCoord : TEXCOORD0,
	out float4 OutPosition : SV_POSITION
	)
{
	// Output vertex position.
	OutPosition = float4(QuadPos[VertexId], 0, 1);

	// Output top left originated UV of the vertex.
	TexCoord = QuadUVs[VertexId].xy;
}

void MainPS(
	in noperspective float2 InUV : TEXCOORD0,
	in float4 SvPosition : SV_POSITION,
	out float4 OutColor : SV_Target0
	)
{
	float3 YUV;

	YUV.x = TextureY.Sample(PointClampedSamplerY, InUV).x;
	YUV.yz = TextureUV.Sample(BilinearClampedSamplerUV, InUV).xy;

	YUV -= YUVOffset;

	OutColor.xyz = mul(YUV, ColorTransform);
	OutColor.w = 1.f;
}
