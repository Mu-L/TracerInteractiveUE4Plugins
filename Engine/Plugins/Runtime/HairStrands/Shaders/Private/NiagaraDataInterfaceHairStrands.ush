// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================
NiagaraDataInterfaceHairStrands.ush 
=============================================================================*/

#pragma once

/* -----------------------------------------------------------------
 * Hair Strands constants and context
 * -----------------------------------------------------------------
 */

static const float M_PI = 3.14159265;
static const float3 MAX_POS = float3(1e+8,1e+8,1e+8);

struct FDIHairStrandsContext
{
	RWBuffer<uint4>		DeformedPositionBuffer;
	Buffer<uint4>		RestPositionBuffer;
	Buffer<uint>		CurvesOffsetsBuffer;
	Buffer<float4>		RestTrianglePositionABuffer;
	Buffer<float4>		RestTrianglePositionBBuffer;
	Buffer<float4>		RestTrianglePositionCBuffer;
	Buffer<float4>		DeformedTrianglePositionABuffer;
	Buffer<float4>		DeformedTrianglePositionBBuffer;
	Buffer<float4>		DeformedTrianglePositionCBuffer;
	Buffer<uint>		RootBarycentricCoordinatesBuffer;
	float4x4			WorldTransform;
	float4x4			WorldInverse;
	float4				WorldRotation;
	int					NumStrands;
	int					StrandSize;
	int					InterpolationMode;
	float3				RestRootOffset;
	float3				DeformedRootOffset;
	float3				RestPositionOffset;
	float3				DeformedPositionOffset;
	bool				ResetSimulation;
	int					SampleCount;
	int4				BoundingBoxOffsets;
	Buffer<float4>		RestSamplePositionsBuffer;
	Buffer<float4>		MeshSampleWeightsBuffer;
	Buffer<float>		ParamsScaleBuffer;
}; 

#define DIHAIRSTRANDS_DECLARE_CONSTANTS(NAME)\
RWBuffer<uint4>		DeformedPositionBuffer_##NAME;\
Buffer<uint4>		RestPositionBuffer_##NAME;\
Buffer<uint>		CurvesOffsetsBuffer_##NAME;\
Buffer<float4>		RestTrianglePositionABuffer_##NAME;\
Buffer<float4>		RestTrianglePositionBBuffer_##NAME;\
Buffer<float4>		RestTrianglePositionCBuffer_##NAME;\
Buffer<float4>		DeformedTrianglePositionABuffer_##NAME;\
Buffer<float4>		DeformedTrianglePositionBBuffer_##NAME;\
Buffer<float4>		DeformedTrianglePositionCBuffer_##NAME;\
Buffer<uint>		RootBarycentricCoordinatesBuffer_##NAME;\
float4x4			WorldTransform_##NAME;\
float4x4			WorldInverse_##NAME;\
float4				WorldRotation_##NAME;\
int					NumStrands_##NAME;\
int					StrandSize_##NAME;\
int					InterpolationMode_##NAME;\
float3				RestRootOffset_##NAME;\
float3				DeformedRootOffset_##NAME;\
float3				RestPositionOffset_##NAME;\
float3				DeformedPositionOffset_##NAME;\
bool				ResetSimulation_##NAME;\
RWBuffer<uint>	    BoundingBoxBuffer_##NAME;\
int					SampleCount_##NAME;\
int4				BoundingBoxOffsets_##NAME;\
Buffer<float4>		RestSamplePositionsBuffer_##NAME;\
Buffer<float4>		MeshSampleWeightsBuffer_##NAME;\
Buffer<float>		ParamsScaleBuffer_##NAME;\

//@todo-lh: BoundingBoxBuffer is passed around separately as SPIRV-Cross cannot translate texture atomics properly atm.
#define DIHAIRSTRANDS_MAKE_CONTEXT(NAME)\
FDIHairStrandsContext DIContext;\
DIContext.DeformedPositionBuffer = DeformedPositionBuffer_##NAME;\
DIContext.RestPositionBuffer = RestPositionBuffer_##NAME;\
DIContext.CurvesOffsetsBuffer = CurvesOffsetsBuffer_##NAME;\
DIContext.RestTrianglePositionABuffer = RestTrianglePositionABuffer_##NAME;\
DIContext.RestTrianglePositionBBuffer = RestTrianglePositionBBuffer_##NAME;\
DIContext.RestTrianglePositionCBuffer = RestTrianglePositionCBuffer_##NAME;\
DIContext.DeformedTrianglePositionABuffer = DeformedTrianglePositionABuffer_##NAME;\
DIContext.DeformedTrianglePositionBBuffer = DeformedTrianglePositionBBuffer_##NAME;\
DIContext.DeformedTrianglePositionCBuffer = DeformedTrianglePositionCBuffer_##NAME;\
DIContext.RootBarycentricCoordinatesBuffer = RootBarycentricCoordinatesBuffer_##NAME;\
DIContext.WorldTransform = WorldTransform_##NAME;\
DIContext.WorldInverse = WorldInverse_##NAME;\
DIContext.WorldRotation = WorldRotation_##NAME;\
DIContext.NumStrands = NumStrands_##NAME;\
DIContext.StrandSize = StrandSize_##NAME;\
DIContext.InterpolationMode =	InterpolationMode_##NAME;\
DIContext.RestRootOffset =	RestRootOffset_##NAME;\
DIContext.DeformedRootOffset = DeformedRootOffset_##NAME;\
DIContext.RestPositionOffset =	RestPositionOffset_##NAME;\
DIContext.DeformedPositionOffset = DeformedPositionOffset_##NAME;\
DIContext.ResetSimulation = ResetSimulation_##NAME;\
RWBuffer<uint> DIContext_BoundingBoxBuffer = BoundingBoxBuffer_##NAME;\
DIContext.SampleCount = SampleCount_##NAME;\
DIContext.BoundingBoxOffsets = BoundingBoxOffsets_##NAME;\
DIContext.RestSamplePositionsBuffer = RestSamplePositionsBuffer_##NAME;\
DIContext.MeshSampleWeightsBuffer = MeshSampleWeightsBuffer_##NAME;\
DIContext.ParamsScaleBuffer = ParamsScaleBuffer_##NAME;\

/* -----------------------------------------------------------------
 * Vector utilities
 * -----------------------------------------------------------------
 */

 float3 Uint3ToFloat3( in uint3 Uint3Vector)
 {
	uint3 SignedVector = Uint3Vector;
	SignedVector.x ^= (((SignedVector.x >> 31)-1) | 0x80000000);
	SignedVector.y ^= (((SignedVector.y >> 31)-1) | 0x80000000);
	SignedVector.z ^= (((SignedVector.z >> 31)-1) | 0x80000000);

	return float3(asfloat(SignedVector.x),asfloat(SignedVector.y),asfloat(SignedVector.z));
 }

 uint3 Float3ToUint3( in float3 Float3Vector)
 {
	uint3 UnsignedVector = uint3(asuint(Float3Vector.x),asuint(Float3Vector.y),asuint(Float3Vector.z));
	UnsignedVector.x ^= (1+~(UnsignedVector.x >> 31) | 0x80000000);
	UnsignedVector.y ^= (1+~(UnsignedVector.y >> 31) | 0x80000000);
	UnsignedVector.z ^= (1+~(UnsignedVector.z >> 31) | 0x80000000);

	return UnsignedVector;
 }

 uint FloatToUint( in float FloatValue)
{
	uint UnsignedValue = asuint(FloatValue);
	UnsignedValue ^= (1+~(UnsignedValue >> 31) | 0x80000000);

	return UnsignedValue;
}

/* -----------------------------------------------------------------
 * Box utilities
 * -----------------------------------------------------------------
 */

// Get the boundingh box
void DIHairStrands_GetBoundingBox(in FDIHairStrandsContext DIContext, in RWBuffer<uint> DIContext_BoundingBoxBuffer, in int BoxIndex, out float3 OutBoxCenter, out float3 OutBoxExtent)
{
	const int BufferOffset = DIContext.BoundingBoxOffsets[BoxIndex] * 6;

	const float3 BoxMin = Uint3ToFloat3(uint3(DIContext_BoundingBoxBuffer[0+BufferOffset],
											  DIContext_BoundingBoxBuffer[1+BufferOffset],
											  DIContext_BoundingBoxBuffer[2+BufferOffset]));

	const float3 BoxMax = Uint3ToFloat3(uint3(DIContext_BoundingBoxBuffer[3+BufferOffset],
											  DIContext_BoundingBoxBuffer[4+BufferOffset],
											  DIContext_BoundingBoxBuffer[5+BufferOffset]));

	OutBoxExtent = (BoxMax-BoxMin);
	OutBoxCenter = 0.5 * (BoxMin+BoxMax);
}

// Reset the bounding box
void DIHairStrands_ResetBoundingBox(in FDIHairStrandsContext DIContext, in RWBuffer<uint> DIContext_BoundingBoxBuffer, out bool FunctionStatus)
{
	FunctionStatus = false;

	if(GLinearThreadId == 0)
	{
		FunctionStatus = true;

		const int BufferOffset = DIContext.BoundingBoxOffsets[3] * 6;

		const uint UINT_MAX = FloatToUint(1e+8);
		const uint UINT_MIN = FloatToUint(-1e+8);

		DIContext_BoundingBoxBuffer[0+BufferOffset] = UINT_MAX;
		DIContext_BoundingBoxBuffer[1+BufferOffset] = UINT_MAX;
		DIContext_BoundingBoxBuffer[2+BufferOffset] = UINT_MAX;

		DIContext_BoundingBoxBuffer[3+BufferOffset] = UINT_MIN;
		DIContext_BoundingBoxBuffer[4+BufferOffset] = UINT_MIN;
		DIContext_BoundingBoxBuffer[5+BufferOffset] = UINT_MIN;
	}
	DeviceMemoryBarrier();
}

void DIHairStrands_BuildBoundingBox(in FDIHairStrandsContext DIContext, in RWBuffer<uint> DIContext_BoundingBoxBuffer, in float3 NodePosition, out bool FunctionStatus)
{
	FunctionStatus = false;

	const uint3 LocalPosition = Float3ToUint3(NodePosition);

	if(isfinite(NodePosition.x) && isfinite(NodePosition.y) && isfinite(NodePosition.z))
	{
		FunctionStatus = true;

		const int BufferOffset = DIContext.BoundingBoxOffsets[2] * 6;

		InterlockedMin(DIContext_BoundingBoxBuffer[0+BufferOffset],LocalPosition.x);
		InterlockedMin(DIContext_BoundingBoxBuffer[1+BufferOffset],LocalPosition.y);
		InterlockedMin(DIContext_BoundingBoxBuffer[2+BufferOffset],LocalPosition.z);

		InterlockedMax(DIContext_BoundingBoxBuffer[3+BufferOffset],LocalPosition.x);
		InterlockedMax(DIContext_BoundingBoxBuffer[4+BufferOffset],LocalPosition.y);
		InterlockedMax(DIContext_BoundingBoxBuffer[5+BufferOffset],LocalPosition.z);
	}
	DeviceMemoryBarrier();
}

/* -----------------------------------------------------------------
 * Utilities regarding strands indexing
 * -----------------------------------------------------------------
 */

// Given a node index return the strand index and the local index within the strand
int DIHairStrands_GetNumNodes(in FDIHairStrandsContext DIContext)
{
	return DIContext.NumStrands * DIContext.StrandSize;
}

/* -----------------------------------------------------------------
 * Strands properties
 * -----------------------------------------------------------------
 */

// Given a strand index return the corresponding strand length
float DIHairStrands_ComputeStrandLength(in FDIHairStrandsContext DIContext, in int StrandIndex)
{
	float StrandLength = 0.0;
	if( StrandIndex < DIContext.NumStrands )
	{
		int PointOffset = DIContext.CurvesOffsetsBuffer[StrandIndex];
		const int EdgeCount = DIContext.CurvesOffsetsBuffer[StrandIndex+1]-PointOffset-1;

		float3 PointNext = f16tof32(DIContext.RestPositionBuffer[PointOffset++].xyz);
		float3 PointPrev = PointNext;

		for (int EdgeIndex = 0; EdgeIndex < EdgeCount; ++EdgeIndex)
		{
			PointPrev = PointNext;
			PointNext = f16tof32(DIContext.RestPositionBuffer[PointOffset++].xyz);
			StrandLength += length(PointNext-PointPrev);
		}
	}
	return StrandLength;
}

/* -----------------------------------------------------------------
 * Node Mass/Inertia/Position/Orientation computation
 * -----------------------------------------------------------------
 */

 // Compute the node mass
void DIHairStrands_ComputeNodeMass(in FDIHairStrandsContext DIContext, in float StrandsDensity, in float NodeThickness, out float OutNodeMass)
{
	const int ReducedSize =  DIContext.StrandSize-1;
	const float CoordScale = 1.0 / (ReducedSize-1.0);

	const int StrandIndex = ExecIndex() / DIContext.StrandSize;

	const float StrandLength = DIHairStrands_ComputeStrandLength(DIContext,StrandIndex);

	int  LocalIndex = GGroupThreadId.x % DIContext.StrandSize;
	const float EdgeLength = StrandLength * CoordScale;
	const float MeanRadius = 0.5 * NodeThickness;

	LocalIndex = max(0,LocalIndex - 1);
	const float EdgeScale = (LocalIndex == 0 || LocalIndex == (ReducedSize-1)) ? 0.5 : 1.0;

	OutNodeMass = StrandsDensity * EdgeLength * EdgeScale * M_PI * MeanRadius * MeanRadius;
}

// Compute the node inertia
void DIHairStrands_ComputeNodeInertia(in FDIHairStrandsContext DIContext, in float StrandsDensity, in float NodeThickness, out float3 OutNodeInertia)
{
	const int ReducedSize =  DIContext.StrandSize-1;
	const float CoordScale = 1.0 / (ReducedSize-1.0);

	const int StrandIndex = ExecIndex() / DIContext.StrandSize;

	const float StrandLength = DIHairStrands_ComputeStrandLength(DIContext,StrandIndex);

	const float EdgeLength = StrandLength * CoordScale;
	const float MeanRadius = 0.5 * NodeThickness;

	const float EdgeMass = StrandsDensity * EdgeLength * M_PI * MeanRadius * MeanRadius;
	const float RadialInertia = EdgeMass * ( 3.0 * MeanRadius * MeanRadius + EdgeLength * EdgeLength) / 12.0;
	OutNodeInertia = float3( RadialInertia, RadialInertia, EdgeMass * MeanRadius * MeanRadius * 0.5 );
}

// Set the node position by linear interpolation over the points
void DIHairStrands_SetNodePosition(in FDIHairStrandsContext DIContext, in bool RootNode, const float NodePoint, const float PointCount, 
		const float CoordScale, const int PointPrev, const int PointNext, const int PointOffset, in int StrandIndex, out float3 OutNodePosition)
{
	if(RootNode)
	{
		const float FirstPoint = CoordScale * PointCount;
		const int FirstPrev = floor(FirstPoint);
		const int FirstNext = PointPrev+1;

		const float FirstAlpha = FirstPoint - (float)FirstPrev;
		const float3 FirstPosition =  f16tof32(DIContext.RestPositionBuffer[PointOffset+FirstPrev].xyz) * (1.0-FirstAlpha) + 
						   f16tof32(DIContext.RestPositionBuffer[PointOffset+FirstNext].xyz) * FirstAlpha;
		const float3 DiffPosition = FirstPosition - f16tof32(DIContext.RestPositionBuffer[PointOffset].xyz);
		const float3 EdgeDirection =  normalize(DiffPosition);

		const float EdgeLength = DIHairStrands_ComputeStrandLength(DIContext,StrandIndex) * CoordScale;
		OutNodePosition = 	f16tof32(DIContext.RestPositionBuffer[PointOffset+PointPrev].xyz) - EdgeLength * normalize(EdgeDirection);					 
	}
	else
	{
		const float NodeAlpha = NodePoint - (float)PointPrev;
		OutNodePosition =  f16tof32(DIContext.RestPositionBuffer[PointOffset+PointPrev].xyz) * (1.0-NodeAlpha) + 
						   f16tof32(DIContext.RestPositionBuffer[PointOffset+PointNext].xyz) * NodeAlpha;
	}
	OutNodePosition = mul(float4( OutNodePosition+DIContext.RestPositionOffset, 1.0), DIContext.WorldTransform).xyz;
}

// Compute the node position by linear interpolation over the points
void DIHairStrands_ComputeNodePosition(in FDIHairStrandsContext DIContext, out float3 OutNodePosition)
{
	const int ReducedSize =  DIContext.StrandSize-1;
	const float CoordScale = 1.0 / (ReducedSize-1.0);

	int LocalIndex = GGroupThreadId.x % DIContext.StrandSize;
	int StrandIndex = ExecIndex() / DIContext.StrandSize;

	const bool RootNode = (LocalIndex == 0);
	LocalIndex = max(0,LocalIndex - 1);

	const int PointOffset = DIContext.CurvesOffsetsBuffer[StrandIndex];

	const float NodeCoord = (float)(LocalIndex) * CoordScale;
	const float PointCount = DIContext.CurvesOffsetsBuffer[StrandIndex+1]-PointOffset-1;

	const float NodePoint = NodeCoord * PointCount;
	const int PointPrev = (LocalIndex==0) ? 0 : (LocalIndex==(ReducedSize-1)) ? PointCount-1 : floor(NodePoint);
	const int PointNext = PointPrev+1;

	DIHairStrands_SetNodePosition( DIContext, RootNode, NodePoint, PointCount, CoordScale, PointPrev, PointNext, PointOffset, StrandIndex, OutNodePosition);
}

// Compute the node position by linear interpolation over the points
void DIHairStrands_SmoothNodePosition(in FDIHairStrandsContext DIContext, in float SmoothingFilter, inout float3 OutNodePosition)
{
	SharedNodePosition[GGroupThreadId.x] = OutNodePosition;
	GroupMemoryBarrier();

	const int LocalIndex = (GGroupThreadId.x % DIContext.StrandSize);
	if(LocalIndex == 0)
	{
		const float Beta = SmoothingFilter;
		float3 DirM1 = SharedNodePosition[GGroupThreadId.x+1] - SharedNodePosition[GGroupThreadId.x];
		float3 DirM2 = DirM1;

		const float Gamma1 = 2.0 * (1.0-Beta);
		const float Gamma2 = - (1.0-Beta)*(1.0-Beta);
		const float Gamma3 = Beta*Beta;

		float3 NodePosition = SharedNodePosition[GGroupThreadId.x];
		SharedPreviousPosition[GGroupThreadId.x] = NodePosition;
		
		for( int i = GGroupThreadId.x, end = GGroupThreadId.x+DIContext.StrandSize-1; i < end; ++i)
		{
			const float3 DirM3 = SharedNodePosition[i+1] - SharedNodePosition[i];
			const float3 DirMi = Gamma1 * DirM1 + Gamma2 * DirM2 + Gamma3 * DirM3;

			SharedPreviousPosition[i+1]  = SharedPreviousPosition[i] + DirMi;
			GroupMemoryBarrier();

			DirM2 = DirM1;
			DirM1 = DirMi;
		}
	}
	GroupMemoryBarrier();
	OutNodePosition = SharedPreviousPosition[GGroupThreadId.x];
}

// Compute the root orientation
void DIHairStrands_ComputeRootOrientation(in FDIHairStrandsContext DIContext)
{
	const int LocalIndex = (GGroupThreadId.x % DIContext.StrandSize);
	if(LocalIndex == 0)
	{
		const float3 EdgeDirection = normalize(SharedNodePosition[GGroupThreadId.x+1] - SharedNodePosition[GGroupThreadId.x]);
		const float4 RootQuaternion = FindQuatBetweenNormals(float3(0,0,1),EdgeDirection);

		//const float3 TangentPrev = normalize(RotateVectorByQuat( float3(1,0,0), RootQuaternion));
		//const float3 TangentNext = normalize(cross( normalize(cross(EdgeDirection,float3(0,0,1))), EdgeDirection));

		SharedNodeOrientation[GGroupThreadId.x] = RootQuaternion;

		//SharedNodeOrientation[GGroupThreadId.x] = NormalizeQuat( MultiplyQuat( RootQuaternion, FindQuatBetweenNormals(TangentPrev,TangentNext) ) );
	}
	GroupMemoryBarrier();
}

// Update the root orientation
void DIHairStrands_UpdateRootOrientation(in FDIHairStrandsContext DIContext)
{
	const int LocalIndex = (GGroupThreadId.x % DIContext.StrandSize);
	if(LocalIndex == 0)
	{
		float4 NodeQuaternion = SharedNodeOrientation[GGroupThreadId.x];
		float3 TangentPrev = RotateVectorByQuat( float3(0,0,1), NodeQuaternion);
		float3 TangentNext = normalize(SharedNodePosition[GGroupThreadId.x+1] - SharedNodePosition[GGroupThreadId.x]);

		SharedNodeOrientation[GGroupThreadId.x] = NormalizeQuat( MultiplyQuat( FindQuatBetweenNormals(TangentPrev,TangentNext), NodeQuaternion) );
	}
	GroupMemoryBarrier();
}

// Compute the node orientation
void DIHairStrands_ComputeNodeOrientation(in FDIHairStrandsContext DIContext, in float3 NodePosition, out float4 OutNodeOrientation)
{
	SharedNodePosition[GGroupThreadId.x] = NodePosition;
	SharedNodeOrientation[GGroupThreadId.x] = QUATERNION_IDENTITY;
	GroupMemoryBarrier();

	DIHairStrands_ComputeRootOrientation(DIContext);

	ComputeMaterialFrame(DIContext.StrandSize);
	OutNodeOrientation = 	SharedNodeOrientation[GGroupThreadId.x];
}

/* -----------------------------------------------------------------
 * Edge volume, length, rotation, direction
 * -----------------------------------------------------------------
 */

// Init the samples along the strands that will be used to transfer informations to the grid
void DIHairStrands_InitGridSamples(in FDIHairStrandsContext DIContext, in float3 NodePosition, in float3 NodeVelocity, 
	in float NodeMass, in float GridLength, out int OutNumSamples,
						out float3 OutDeltaPosition, out float3 OutDeltaVelocity, out float OutSampleMass)
{
	SharedNodePosition[GGroupThreadId.x] = NodePosition;
	SharedPreviousPosition[GGroupThreadId.x] = NodeVelocity;
	SharedInverseMass[GGroupThreadId.x] = NodeMass;
	GroupMemoryBarrier();

	const int LocalIndex = GGroupThreadId.x % DIContext.StrandSize;

	if( LocalIndex > 0 )
	{
		OutDeltaVelocity = SharedPreviousPosition[GGroupThreadId.x] - SharedPreviousPosition[GGroupThreadId.x-1];
		OutDeltaPosition = SharedNodePosition[GGroupThreadId.x] - SharedNodePosition[GGroupThreadId.x-1];

		const float2 SegmentWeight = (LocalIndex == 1) ? float2(1.0,0.5) : (LocalIndex == (DIContext.StrandSize-1) ) ? float2(0.5,1.0) : float2(0.5,0.5);
		const float SegmentMass =  (SharedInverseMass[GGroupThreadId.x-1] * SegmentWeight.x + SharedInverseMass[GGroupThreadId.x] * SegmentWeight.y);
		const float SegmentLength = length(OutDeltaPosition);

		OutNumSamples = ceil(SegmentLength / GridLength);
		OutSampleMass = SegmentMass / OutNumSamples;
	}
	else
	{
		OutNumSamples = 0;
		OutDeltaPosition = float3(0,0,0);
		OutDeltaVelocity = float3(0,0,0);
		OutSampleMass = 0.0;
	}
}

// Get the sample state given an index and a delta position/velocity
void DIHairStrands_GetSampleState(in FDIHairStrandsContext DIContext, in float3 NodePosition, in float3 NodeVelocity, in float3 DeltaPosition, in float3 DeltaVelocity, 
			in int NumSamples, in int SampleIndex, out float3 OutSamplePosition, out float3 OutSampleVelocity)
{
	const int LocalIndex = GGroupThreadId.x % DIContext.StrandSize;

	if( LocalIndex > 0 )
	{
		const float SampleCoord = (0.5+SampleIndex) / NumSamples;
		OutSamplePosition = NodePosition + SampleCoord * DeltaPosition;
		OutSampleVelocity = NodeVelocity + SampleCoord * DeltaVelocity;
	}
	else
	{
		OutSamplePosition = float3(0,0,0);
		OutSampleVelocity = float3(0,0,0);
	}
}

/* -----------------------------------------------------------------
 * Edge volume, length, rotation, direction
 * -----------------------------------------------------------------
 */

// Compute the edge volume value
void DIHairStrands_ComputeEdgeVolume(in FDIHairStrandsContext DIContext, in float3 NodePosition, out float OutEdgeVolume)
{
	SharedNodePosition[GGroupThreadId.x] = NodePosition;
	GroupMemoryBarrier(); 

	const int LocalIndex = (GGroupThreadId.x % DIContext.StrandSize);

	// L = ||P1-P0||
	OutEdgeVolume = 0.0;
	if(LocalIndex > 2)
	{
		const int NodeIndexA = GGroupThreadId.x;
		const int NodeIndexB = GGroupThreadId.x-1;
		const int NodeIndexC = GGroupThreadId.x-2;
		const int NodeIndexD = GGroupThreadId.x-3;

		const float3 EdgeVectorA = SharedNodePosition[NodeIndexB] - SharedNodePosition[NodeIndexA];
		const float3 EdgeVectorB = SharedNodePosition[NodeIndexC] - SharedNodePosition[NodeIndexA];
		const float3 EdgeVectorC = SharedNodePosition[NodeIndexD] - SharedNodePosition[NodeIndexA];

		OutEdgeVolume = dot(cross(EdgeVectorB,EdgeVectorC),EdgeVectorA);
	}
}

// Compute the edge length value
void DIHairStrands_ComputeEdgeLength(in FDIHairStrandsContext DIContext, in float3 NodePosition, in int NodeOffset, out float OutEdgeLength)
{
	SharedNodePosition[GGroupThreadId.x] = NodePosition;
	GroupMemoryBarrier(); 

	const int LocalIndex = (GGroupThreadId.x % DIContext.StrandSize);

	// L = ||P1-P0||
	OutEdgeLength = (LocalIndex>NodeOffset) ? length(SharedNodePosition[GGroupThreadId.x]- SharedNodePosition[GGroupThreadId.x-1-NodeOffset]) : 0.0;
}

// Compute the edge darboux vector (diff between consecutive edge orientations)
void DIHairStrands_ComputeEdgeRotation(in FDIHairStrandsContext DIContext, in float4 NodeOrientation, out float4 OutEdgeRotation)
{
	SharedNodeOrientation[GGroupThreadId.x] = NodeOrientation;
	GroupMemoryBarrier(); 

	const int LocalIndex = (GGroupThreadId.x % DIContext.StrandSize);

	// D = Q0^-1 * Q1
	if(LocalIndex>0)
	{
		float4 q0 = SharedNodeOrientation[GGroupThreadId.x-1];
		float4 q1 = SharedNodeOrientation[GGroupThreadId.x];
		OutEdgeRotation = float4(
				q1.xyz * q0.w - q0.xyz * q1.w + cross(-q0.xyz, q1.xyz),
				q0.w * q1.w - dot(-q0.xyz, q1.xyz));
		float4 OmegaPlus = OutEdgeRotation + float4(0,0,0,1);
		float4 OmegaMinus = OutEdgeRotation - float4(0,0,0,1);
		if( dot(OmegaMinus,OmegaMinus) > dot(OmegaPlus,OmegaPlus) ) OutEdgeRotation = -OutEdgeRotation;
		//OutEdgeRotation = MultiplyQuat(InverseQuat(SharedNodeOrientation[GGroupThreadId.x-1]),SharedNodeOrientation[GGroupThreadId.x]);
	}
	else
	{
		OutEdgeRotation = QUATERNION_IDENTITY;
	}
}

void DIHairStrands_ComputeEdgeDirection(in FDIHairStrandsContext DIContext, in float3 NodePosition, in float4 NodeOrientation, out float3 OutRestDirection)
{
	SharedNodePosition[GGroupThreadId.x] = NodePosition;
	SharedNodeOrientation[GGroupThreadId.x] = NodeOrientation;
	GroupMemoryBarrier(); 

	//ComputeMaterialFrame(StrandsSize);

	OutRestDirection = float3(0,0,0);
	const int LocalIndex = (GGroupThreadId.x % DIContext.StrandSize);
	if( LocalIndex > 1 )
	{
		const float3 EdgeDirection = SharedNodePosition[GGroupThreadId.x] - SharedNodePosition[GGroupThreadId.x-1];

		const float4 ParentFrame = SlerpQuat(SharedNodeOrientation[GGroupThreadId.x-2],SharedNodeOrientation[GGroupThreadId.x-2],0.5);
		OutRestDirection = UnrotateVectorByQuat(EdgeDirection,ParentFrame);
	}
	GroupMemoryBarrier(); 
}


/* -----------------------------------------------------------------
 * Points position update
 * -----------------------------------------------------------------
 */

// Reset the deformed points position to the rest ones
void DIHairStrands_ResetPointPosition(in FDIHairStrandsContext DIContext, out bool ReportStatus) 
{
	int LocalIndex = GGroupThreadId.x % DIContext.StrandSize;
	int StrandIndex = ExecIndex() / DIContext.StrandSize;

	ReportStatus = false;

	if(LocalIndex == 0)
	{
		const int PointBegin = DIContext.CurvesOffsetsBuffer[StrandIndex];
		const int PointEnd = DIContext.CurvesOffsetsBuffer[StrandIndex+1]; 
		const int PointCount = PointEnd - PointBegin;

		const uint4 PositionOffset = uint4( f32tof16(DIContext.RestPositionOffset - DIContext.DeformedPositionOffset), 0 );

		ReportStatus = true;
		for (int PointIndex = 0; PointIndex < PointCount; ++PointIndex)
		{
			DIContext.DeformedPositionBuffer[PointBegin+PointIndex] = DIContext.RestPositionBuffer[PointBegin+PointIndex] + PositionOffset;
		}
	}
}

// Report interpolated nodes displacements onto the points positions 
void DIHairStrands_UpdatePointPosition(in FDIHairStrandsContext DIContext, in float3 NodeDisplace, out bool ReportStatus) 
{
	const int ReducedSize =  DIContext.StrandSize-1;
	SharedNodePosition[GGroupThreadId.x] = NodeDisplace;
	GroupMemoryBarrier(); 

	int LocalIndex = GGroupThreadId.x % DIContext.StrandSize;
	int StrandIndex = ExecIndex() / DIContext.StrandSize;

	LocalIndex = LocalIndex - 1;
	ReportStatus = false;

	const int PointBegin = DIContext.CurvesOffsetsBuffer[StrandIndex];
	const int PointEnd = DIContext.CurvesOffsetsBuffer[StrandIndex+1]; 
	const int PointCount = PointEnd - PointBegin;

	const float3 PositionOffset = DIContext.RestPositionOffset - DIContext.DeformedPositionOffset;

	for (int PointIndex = 0; PointIndex < PointCount; ++PointIndex)
	{
		const float PointCoord = (float)(PointIndex) / (PointCount-1.0);
		const float PointNode = PointCoord * (ReducedSize-1.0);

		const int NodePrev = (PointIndex==0) ? 0 : (PointIndex==(PointCount-1.0)) ? ReducedSize-2 : floor(PointNode);
		const int NodeNext = NodePrev+1;

		if(NodePrev == LocalIndex)
		{
			ReportStatus = true;
			const float PointAlpha = PointNode - (float)NodePrev;
			const float3 LocalDisplace = SharedNodePosition[GGroupThreadId.x] * (1.0-PointAlpha) + SharedNodePosition[GGroupThreadId.x+1] * PointAlpha;
			const float3 DeformedPosition = f16tof32(DIContext.RestPositionBuffer[PointBegin+PointIndex].xyz) + LocalDisplace + PositionOffset;
			DIContext.DeformedPositionBuffer[PointBegin+PointIndex] = uint4( f32tof16(DeformedPosition), DIContext.RestPositionBuffer[PointBegin+PointIndex].w);
		}
	}
}

// Get the point position
void DIHairStrands_GetPointPosition(in FDIHairStrandsContext DIContext, in int PointIndex, out float3 OutPointPosition)
{
	OutPointPosition = mul(float4( f16tof32(DIContext.DeformedPositionBuffer[PointIndex].xyz)+DIContext.DeformedPositionOffset, 1.0), DIContext.WorldTransform).xyz;
}

/* -----------------------------------------------------------------
 * Nodes time integration
 * -----------------------------------------------------------------
 */

// Add external force to the linear velocity and advect node position
void DIHairStrands_AdvectNodePosition(in FDIHairStrandsContext DIContext, in float NodeMass, in bool IsPositionMobile, in float3 ExternalForce, in float3 ForceGradient, in float DeltaTime, inout float3 OutLinearVelocity, inout float3 OutNodePosition)
{	
	if(IsPositionMobile && NodeMass != 0.0)
	{
		const float3 ImplicitGradient =  float3(NodeMass,NodeMass,NodeMass) / DeltaTime - ForceGradient;
		const float3 InverseGradient = float3(1.0/ImplicitGradient.x, 1.0/ImplicitGradient.y, 1.0/ImplicitGradient.z);

		OutLinearVelocity += InverseGradient * ExternalForce;
		OutNodePosition += OutLinearVelocity * DeltaTime;
	}
}

// Add external torque to the angular velocity and advect node orientation
void DIHairStrands_AdvectNodeOrientation(in FDIHairStrandsContext DIContext, in float3 NodeInertia, in bool IsOrientationMobile, in float3 ExternalTorque, in float3 TorqueGradient, in float DeltaTime, inout float3 OutAngularVelocity, inout float4 OutNodeOrientation)
{	
	if(IsOrientationMobile && NodeInertia.x != 0.0 && NodeInertia.y != 0.0 && NodeInertia.z != 0.0)
	{
		const float3 ImplicitGradient = NodeInertia / DeltaTime - TorqueGradient;
		const float3 InverseGradient = float3(1.0/ImplicitGradient.x, 1.0/ImplicitGradient.y, 1.0/ImplicitGradient.z);

		OutAngularVelocity += InverseGradient * (ExternalTorque - cross(OutAngularVelocity, NodeInertia * OutAngularVelocity));

		OutNodeOrientation = OutNodeOrientation + 0.5 * DeltaTime * float4(
			OutAngularVelocity.xyz * OutNodeOrientation.w + cross(OutAngularVelocity.xyz, OutNodeOrientation.xyz),
			- dot(OutAngularVelocity.xyz, OutNodeOrientation.xyz));

		OutNodeOrientation = NormalizeQuat(OutNodeOrientation);
	}
}

// Update the node linear velocity based on the node position difference
void DIHairStrands_UpdateLinearVelocity(in FDIHairStrandsContext DIContext, in float3 PreviousPosition, in float3 NodePosition, in float DeltaTime, out float3 OutLinearVelocity)
{	
	OutLinearVelocity = (NodePosition-PreviousPosition) / DeltaTime;
}


// Update the node angular velocity based on the node orientation difference
void DIHairStrands_UpdateAngularVelocity(in FDIHairStrandsContext DIContext, in float4 PreviousOrientation, in float4 NodeOrientation, in float DeltaTime, out float3 OutAngularVelocity)
{
	const float4 DeltaQuat = MultiplyQuat(NodeOrientation,InverseQuat(PreviousOrientation));
	const float AxisLength = length( DeltaQuat.xyz );

	if (AxisLength<SMALL_NUMBER)
	{
		 OutAngularVelocity =  DeltaQuat.xyz * 2.0 / DeltaTime;
	}
	else
	{
		const float QuatAngle = 2.0 * atan2(AxisLength,DeltaQuat.w );
		OutAngularVelocity = DeltaQuat.xyz * QuatAngle / (AxisLength*DeltaTime);
	}
}

/* -----------------------------------------------------------------
 * Update node position orientation
 * -----------------------------------------------------------------
 */

// Compute rest position
void DIHairStrands_ComputeRestPosition(in FDIHairStrandsContext DIContext, in float3 NodePosition, out float3 OutRestPosition)
{	
	OutRestPosition = mul(float4( NodePosition, 1.0), DIContext.WorldInverse).xyz;
}

// Compute rest orientation
void DIHairStrands_ComputeRestOrientation(in FDIHairStrandsContext DIContext, in float4 NodeOrientation, out float4 OutRestOrientation)
{	
	OutRestOrientation = NormalizeQuat( MultiplyQuat(InverseQuat(DIContext.WorldRotation),NodeOrientation) );
}

// Update Node Position
void DIHairStrands_AttachNodePosition(in FDIHairStrandsContext DIContext, in float3 RestPosition, out float3 OutNodePosition)
{
	OutNodePosition = mul(float4( RestPosition, 1.0), DIContext.WorldTransform).xyz;
}

// Update Node Orientation
void DIHairStrands_AttachNodeOrientation(in FDIHairStrandsContext DIContext, in float4 RestOrientation, out float4 OutNodeOrientation)
{
	OutNodeOrientation = NormalizeQuat( MultiplyQuat(DIContext.WorldRotation,RestOrientation) );
}

/* -----------------------------------------------------------------
 * Attached the root to the skinned cache
 * -----------------------------------------------------------------
 */
// Duplicate from #include "HairStrands/HairStrandsMeshRBF.ush"
float3 ApplyRBF(
	float3 RestControlPoint,
	int InMaxSampleCount,
	Buffer<float4> InRestSamplePositionsBuffer,
	Buffer<float4> InMeshSampleWeightsBuffer)
{
	float3 ControlPoint = RestControlPoint;
	// Apply rbf interpolation from the samples set
	for (int i = 0; i < InMaxSampleCount; ++i)
	{
		const float3 PositionDelta = RestControlPoint - InRestSamplePositionsBuffer[i].xyz;
		const float FunctionValue = sqrt(dot(PositionDelta, PositionDelta) + 1);
		ControlPoint += FunctionValue * InMeshSampleWeightsBuffer[i].xyz;
	}
	ControlPoint += InMeshSampleWeightsBuffer[InMaxSampleCount].xyz;
	ControlPoint += InMeshSampleWeightsBuffer[InMaxSampleCount + 1].xyz * RestControlPoint.x;
	ControlPoint += InMeshSampleWeightsBuffer[InMaxSampleCount + 2].xyz * RestControlPoint.y;
	ControlPoint += InMeshSampleWeightsBuffer[InMaxSampleCount + 3].xyz * RestControlPoint.z;
	return ControlPoint;
}

 // Compute the global position
void DIHairStrands_EvalGlobalPosition(in FDIHairStrandsContext DIContext, in float3 RestPosition, out float3 OutGlobalPosition)
{
	const float3 RestSkinnedPosition = RestPosition;
	OutGlobalPosition = ApplyRBF(RestPosition, DIContext.SampleCount, DIContext.RestSamplePositionsBuffer, DIContext.MeshSampleWeightsBuffer);
}

// Compute the global position
void DIHairStrands_EvalGlobalOrientation(in FDIHairStrandsContext DIContext, in float3 GlobalPosition, inout float4 OutGlobalOrientation)
{
	SharedNodePosition[GGroupThreadId.x] = GlobalPosition;
	SharedNodeOrientation[GGroupThreadId.x] = OutGlobalOrientation;
	GroupMemoryBarrier(); 

	DIHairStrands_UpdateRootOrientation(DIContext);

	ComputeMaterialFrame(DIContext.StrandSize);
	OutGlobalOrientation = 	SharedNodeOrientation[GGroupThreadId.x];
}

float2 ExtractBarycentrics(in uint PackedCoordinates )
{
	return float2(f16tof32(PackedCoordinates & 0xFFFF), f16tof32((PackedCoordinates>>16) & 0xFFFF));
}

// Compuite rest position and orientation
void DIHairStrands_ComputeLocalState(in FDIHairStrandsContext DIContext, in float3 RestPosition, in float4 RestOrientation, 
												out float3 OutLocalPosition, out float4 OutLocalOrientation)
{
	OutLocalPosition = RestPosition;
	OutLocalOrientation = RestOrientation;

	if( DIContext.InterpolationMode >= 1)
	{
		const int StrandIndex = ExecIndex() / DIContext.StrandSize;
		const float2 RootUV = ExtractBarycentrics(DIContext.RootBarycentricCoordinatesBuffer[StrandIndex]);

		const float3 RootProjection = DIContext.RestTrianglePositionABuffer[StrandIndex].xyz * RootUV.x + 
									  DIContext.RestTrianglePositionBBuffer[StrandIndex].xyz * RootUV.y +
									  DIContext.RestTrianglePositionCBuffer[StrandIndex].xyz * (1.0 - RootUV.x - RootUV.y) + DIContext.RestRootOffset;
		const float3 DiffPosition = RestPosition - RootProjection;

		float3 TangentU = normalize(DIContext.RestTrianglePositionBBuffer[StrandIndex].xyz - DIContext.RestTrianglePositionABuffer[StrandIndex].xyz);
		float3 TangentV = normalize(DIContext.RestTrianglePositionCBuffer[StrandIndex].xyz - DIContext.RestTrianglePositionABuffer[StrandIndex].xyz);

		const float3 Normal = normalize(cross(TangentU,TangentV));
		TangentU = normalize(cross(TangentV,Normal));

		const float3 RotationMatrix[3] = {float3(TangentU.x,TangentV.x,Normal.x),
										  float3(TangentU.y,TangentV.y,Normal.y),
										  float3(TangentU.z,TangentV.z,Normal.z)};
		const float4 InverseOrientation = QuatFromMatrix(RotationMatrix);

		OutLocalPosition = RotateVectorByQuat(DiffPosition,InverseOrientation);
		//OutLocalPosition = float3( dot(DiffPosition,TangentU), dot(DiffPosition,TangentV), dot(DiffPosition,Normal) );
		OutLocalOrientation = NormalizeQuat( MultiplyQuat(InverseOrientation,RestOrientation) );
	}
}

// Update Node Position and orientation
void DIHairStrands_AttachNodeState(in FDIHairStrandsContext DIContext, in float3 LocalPosition, in float4 LocalOrientation, out float3 OutNodePosition, out float4 OutNodeOrientation)
{	
	float3 NodePosition =  LocalPosition;
	float4 NodeOrientation = LocalOrientation;

	if( DIContext.InterpolationMode >= 1)
	{
		const int StrandIndex = ExecIndex() / DIContext.StrandSize;
		const float2 RootUV = ExtractBarycentrics(DIContext.RootBarycentricCoordinatesBuffer[StrandIndex]);

		const float3 RootProjection = DIContext.DeformedTrianglePositionABuffer[StrandIndex].xyz * RootUV.x + 
									  DIContext.DeformedTrianglePositionBBuffer[StrandIndex].xyz * RootUV.y +
									  DIContext.DeformedTrianglePositionCBuffer[StrandIndex].xyz * (1.0 - RootUV.x - RootUV.y) + DIContext.DeformedRootOffset;

		float3 TangentU = normalize(DIContext.DeformedTrianglePositionBBuffer[StrandIndex].xyz - DIContext.DeformedTrianglePositionABuffer[StrandIndex].xyz);
		float3 TangentV = normalize(DIContext.DeformedTrianglePositionCBuffer[StrandIndex].xyz - DIContext.DeformedTrianglePositionABuffer[StrandIndex].xyz);

		const float3 Normal = normalize(cross(TangentU,TangentV));
		TangentU = normalize(cross(TangentV,Normal));
		
		const float3 RotationMatrix[3] = { TangentU, TangentV, Normal };
		const float4 TriangleOrientation = QuatFromMatrix(RotationMatrix);

		const float3 DiffPosition = RotateVectorByQuat(LocalPosition,TriangleOrientation);  
		//const float3 DiffPosition = LocalPosition.x * TangentU + LocalPosition.y * TangentV + LocalPosition.z * Normal;

		NodePosition = RootProjection + DiffPosition;
		NodeOrientation = NormalizeQuat( MultiplyQuat(TriangleOrientation,LocalOrientation) );
	}
	OutNodePosition = NodePosition;
	OutNodeOrientation = NodeOrientation;
	//DIHairStrands_AttachNodePosition(DIContext,NodePosition,OutNodePosition);
	//DIHairStrands_AttachNodeOrientation(DIContext,NodeOrientation,OutNodeOrientation);
}

void DIHairStrands_UpdateNodeState(in FDIHairStrandsContext DIContext, in float3 RestPosition, in float3 NodePosition, in float4 NodeOrientation, out float3 OutNodePosition, out float4 OutNodeOrientation)
{
	float3 GlobalPosition =  NodePosition;
	float4 GlobalOrientation = NodeOrientation;

	if(DIContext.InterpolationMode == 2)
	{
		DIHairStrands_EvalGlobalPosition(DIContext, RestPosition, GlobalPosition);
		DIHairStrands_EvalGlobalOrientation(DIContext,GlobalPosition,GlobalOrientation);
	}
	DIHairStrands_AttachNodePosition(DIContext,GlobalPosition,OutNodePosition);
	DIHairStrands_AttachNodeOrientation(DIContext,GlobalOrientation,OutNodeOrientation);
}












