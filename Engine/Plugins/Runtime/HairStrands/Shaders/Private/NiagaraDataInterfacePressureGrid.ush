// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================
NiagaraDataInterfacePressureGrid.ush 
=============================================================================*/

#pragma once

/* -----------------------------------------------------------------
 * Pressure Grid constants and context
 * -----------------------------------------------------------------
 */

static const int FLUID_PRESSURE_OFFSET = 6;
static const int SOLID_WEIGHT_OFFSET = 7;
static const int SOLID_VELOCITY_OFFSET = 10;
static const int SOLID_DISTANCE_OFFSET = 13;
static const int FLUID_DISTANCE_OFFSET = 14;
static const int FLUID_DENSITY_OFFSET = 15;

/* -----------------------------------------------------------------
 * Scale the velocity, mass and distance buffer from the current to the destination buffer
 * -----------------------------------------------------------------
 */

void DIVelocityGrid_ScaleCellDistance(in FDIVelocityGridContext DIContext, in RWTexture3D<int> DIContext_GridDestinationBuffer, in int3 GridIndex, in float GridLength )
{
	float FluidDistance = DIVelocityGrid_ConvertGridScalar(DIContext,GridIndex,FLUID_DISTANCE_OFFSET);

	[branch]
	if(FluidDistance < 0.5 * GridLength)
	{
		const float SolidDistance = (DIVelocityGrid_GetGridScalar(DIContext,int3(GridIndex.x+0,GridIndex.y+0,GridIndex.z+0),SOLID_DISTANCE_OFFSET) + 
									 DIVelocityGrid_GetGridScalar(DIContext,int3(GridIndex.x+0,GridIndex.y+0,GridIndex.z+1),SOLID_DISTANCE_OFFSET) +
									 DIVelocityGrid_GetGridScalar(DIContext,int3(GridIndex.x+0,GridIndex.y+1,GridIndex.z+0),SOLID_DISTANCE_OFFSET) +
									 DIVelocityGrid_GetGridScalar(DIContext,int3(GridIndex.x+0,GridIndex.y+1,GridIndex.z+1),SOLID_DISTANCE_OFFSET) +
									 DIVelocityGrid_GetGridScalar(DIContext,int3(GridIndex.x+1,GridIndex.y+0,GridIndex.z+0),SOLID_DISTANCE_OFFSET) +
									 DIVelocityGrid_GetGridScalar(DIContext,int3(GridIndex.x+1,GridIndex.y+0,GridIndex.z+1),SOLID_DISTANCE_OFFSET) +
									 DIVelocityGrid_GetGridScalar(DIContext,int3(GridIndex.x+1,GridIndex.y+1,GridIndex.z+0),SOLID_DISTANCE_OFFSET) +
									 DIVelocityGrid_GetGridScalar(DIContext,int3(GridIndex.x+1,GridIndex.y+1,GridIndex.z+1),SOLID_DISTANCE_OFFSET) ) / 8.0;

		if(SolidDistance < 0.0) FluidDistance = -0.5 * GridLength;
	}

	DIVelocityGrid_SetGridScalar(DIContext,DIContext_GridDestinationBuffer,GridIndex,FLUID_DISTANCE_OFFSET,FluidDistance);
}

void DIVelocityGrid_ScaleFaceVelocity(in FDIVelocityGridContext DIContext, in RWTexture3D<int> DIContext_GridDestinationBuffer, in int3 GridIndex, in int ComponentIndex)
{
	const float GridMomentum = DIVelocityGrid_ConvertGridScalar(DIContext,GridIndex,FLUID_VELOCITY_OFFSET+ComponentIndex);
	const float GridMass = DIVelocityGrid_ConvertGridScalar(DIContext,GridIndex,FLUID_MASS_OFFSET+ComponentIndex);

	float GridVelocity = (GridMass != 0.0) ? GridMomentum / GridMass : 0.0;

	DIVelocityGrid_SetGridScalar(DIContext,DIContext_GridDestinationBuffer,GridIndex,FLUID_VELOCITY_OFFSET+ComponentIndex,GridVelocity);
	DIVelocityGrid_SetGridScalar(DIContext,DIContext_GridDestinationBuffer,GridIndex,FLUID_MASS_OFFSET+ComponentIndex,GridMass);
}

void DIVelocityGrid_ScaleCellFields(in FDIVelocityGridContext DIContext, in RWTexture3D<int> DIContext_GridDestinationBuffer, in int GridHash, in float GridLength, in float DeltaTime, out bool OutTransferStatus)
{
	const int3 GridIndex = DIVelocityGrid_GetGridIndex(DIContext,GridHash);

	OutTransferStatus = false;
	if(DIVelocityGrid_IsFaceValid(DIContext,GridIndex,0))
	{
		DIVelocityGrid_ScaleFaceVelocity(DIContext,DIContext_GridDestinationBuffer,GridIndex,0);
	}
	if(DIVelocityGrid_IsFaceValid(DIContext,GridIndex,1))
	{
		DIVelocityGrid_ScaleFaceVelocity(DIContext,DIContext_GridDestinationBuffer,GridIndex,1);
	}
	if(DIVelocityGrid_IsFaceValid(DIContext,GridIndex,2))
	{
		DIVelocityGrid_ScaleFaceVelocity(DIContext,DIContext_GridDestinationBuffer,GridIndex,2);
	}
	if(DIVelocityGrid_IsCellValid(DIContext,GridIndex))
	{
		DIVelocityGrid_ScaleCellDistance(DIContext,DIContext_GridDestinationBuffer,GridIndex,GridLength);
	}
	if(DIVelocityGrid_IsCellValid(DIContext,GridIndex))
	{
		const float SourceDensity = DIVelocityGrid_ConvertGridScalar(DIContext,GridIndex,FLUID_DENSITY_OFFSET);

		const float CurrentDensity = max(1.0,SourceDensity);
		//const float DensityRatio = GridLength * (1.0-CurrentDensity) / DeltaTime;
		const float DensityRatio = (CurrentDensity != 0.0) ? GridLength * log(1.0/CurrentDensity) / DeltaTime : 0.0;

		DIVelocityGrid_SetGridScalar(DIContext,DIContext_GridDestinationBuffer,GridIndex,FLUID_DENSITY_OFFSET,DensityRatio);
	}
}

/* -----------------------------------------------------------------
 * Build Distance/Density Field from particles
 * -----------------------------------------------------------------
 */
 
// Compute the distance from the particle to the grid
void DIVelocityGrid_BuildDistanceField(in FDIVelocityGridContext DIContext, in RWTexture3D<int> DIContext_GridDestinationBuffer, in float3 GridOrigin, in float GridLength, in float3 ParticlePosition, out bool OutFunctionStatus )
{
	OutFunctionStatus = true;
	const float3 GridPosition = DIVelocityGrid_GetGridPosition(DIContext,ParticlePosition,GridOrigin);

	float3 GridFraction = float3(0,0,0);
	const int3 GridIndex = DIVelocityGrid_ComputeGridIndex(DIContext,GridPosition,float3(0.5,0.5,0.5),GridLength,GridFraction);

	const float NodeRadius = GridLength * 0.5 * 1.414213;

	for(int i = -2; i <= 2; ++i)
	for(int j = -2; j <= 2; ++j)
	for(int k = -2; k <= 2; ++k)
	{
		const int3 GridLocation = int3(GridIndex.x+i,GridIndex.y+j,GridIndex.z+k);

		if( DIVelocityGrid_IsCellValid(DIContext,GridLocation) )
		{
			const float3 CellPosition = (GridLocation+float3(0.5,0.5,0.5))*GridLength+GridOrigin;
			const float CellDistance = length(CellPosition-ParticlePosition) - NodeRadius; 

			DIVelocityGrid_InterlockedMinScalar(DIContext,DIContext_GridDestinationBuffer,GridLocation,FLUID_DISTANCE_OFFSET,CellDistance);
		}
	}
}

// Transfer the density from the particle to the grid
void DIVelocityGrid_BuildDensityField(in FDIVelocityGridContext DIContext, in RWTexture3D<int> DIContext_GridDestinationBuffer, in float3 GridOrigin, in float GridLength,
				in float3 ParticlePosition, in float ParticleMass, in float ParticleDensity, out bool OutFunctionStatus )
{
	OutFunctionStatus = true;
	const float3 GridPosition = DIVelocityGrid_GetGridPosition(DIContext,ParticlePosition,GridOrigin);

	float3 GridFraction = float3(0,0,0);
	const int3 GridIndex = DIVelocityGrid_ComputeGridIndex(DIContext,GridPosition,float3(0.5,0.5,0.5),GridLength,GridFraction);

	const float GridScale = 1.0 / (GridLength*GridLength*GridLength);

	for(int i = 0; i < 2; ++i)
	{
		const float GridWeightX = (i == 0) ? 1.0 - GridFraction.x : GridFraction.x;
		for(int j = 0; j < 2; ++j)
		{
			const float GridWeightY = (j == 0) ? 1.0 - GridFraction.y : GridFraction.y;
			for(int k = 0; k < 2; ++k)
			{
				const float GridWeightZ = (k == 0) ? 1.0 - GridFraction.z : GridFraction.z;
				const float GridWeightXYZ = GridWeightX*GridWeightY*GridWeightZ;

				const int3 GridLocation = int3(GridIndex.x+i,GridIndex.y+j,GridIndex.z+k);

				if( DIVelocityGrid_IsCellValid(DIContext,GridLocation) )
				{
					DIVelocityGrid_InterlockedAddScalar(DIContext,DIContext_GridDestinationBuffer,GridLocation,FLUID_DENSITY_OFFSET,GridWeightXYZ*ParticleMass*GridScale);
				}
			}
		}
	}
}

/* -----------------------------------------------------------------
 * Get Density field from grid
 * -----------------------------------------------------------------
 */

// Sample the grid velocity field and gradient at the particle world position 
void DIVelocityGrid_GetDensityField(in FDIVelocityGridContext DIContext, in float3 GridOrigin, in float GridLength, 
			in float3 ParticlePosition, out float OutParticleDensity)
{
	OutParticleDensity = 0.0;

	if(isfinite(GridLength))
	{
		const float3 GridPosition = DIVelocityGrid_GetGridPosition(DIContext,ParticlePosition,GridOrigin);

		float3 GridFraction = float3(0,0,0);
		const int3 GridIndex = DIVelocityGrid_ComputeGridIndex(DIContext,GridPosition,float3(0.5,0.5,0.5),GridLength,GridFraction);

		for(int i = 0; i < 2; ++i)
		{
			const float GridWeightX = (i == 0) ? 1.0 - GridFraction.x : GridFraction.x;
			for(int j = 0; j < 2; ++j)
			{
				const float GridWeightY = (j == 0) ? 1.0 - GridFraction.y : GridFraction.y;
				for(int k = 0; k < 2; ++k)
				{
					const float GridWeightZ = (k == 0) ? 1.0 - GridFraction.z : GridFraction.z;
					const float GridWeightXYZ = GridWeightX*GridWeightY*GridWeightZ;

					const int3 GridLocation = int3(GridIndex.x+i,GridIndex.y+j,GridIndex.z+k);

					if( DIVelocityGrid_IsCellValid(DIContext,GridLocation) )
					{
						OutParticleDensity += DIVelocityGrid_GetGridScalar(DIContext,GridLocation,FLUID_DENSITY_OFFSET) * GridWeightXYZ;
					}
				}
			}
		}
	}
}

// Sample the grid velocity field and gradient at the particle world position 
void DIVelocityGrid_UpdateDeformationGradient(in FDIVelocityGridContext DIContext, in float DeltaTime, in float4x4 VelocityGradient, 
				in float4x4 DeformationGradient, out float4x4 OutDeformationGradient, out float OutGradientDeterminant)
{
	float3x3 PositionGradient;
	PositionGradient[0] = VelocityGradient[0].xyz * DeltaTime;
	PositionGradient[1] = VelocityGradient[1].xyz * DeltaTime;
	PositionGradient[2] = VelocityGradient[2].xyz * DeltaTime;

	float3x3 ElasticGradient;
	ElasticGradient[0] = DeformationGradient[0].xyz;
	ElasticGradient[1] = DeformationGradient[1].xyz;
	ElasticGradient[2] = DeformationGradient[2].xyz;

	if(isfinite(PositionGradient[0][0]) && isfinite(PositionGradient[1][1]) && isfinite(PositionGradient[2][2]) )
	{
		ElasticGradient += mul(PositionGradient,ElasticGradient);
	}
	OutGradientDeterminant = determinant(ElasticGradient);

	OutDeformationGradient[0] = float4(ElasticGradient[0].xyz,0.0);
	OutDeformationGradient[1] = float4(ElasticGradient[1].xyz,0.0);
	OutDeformationGradient[2] = float4(ElasticGradient[2].xyz,0.0);
	OutDeformationGradient[3] = float4(0.0,0.0,0.0,0.0);
}

/* -----------------------------------------------------------------
 * Update boundary weights
 * -----------------------------------------------------------------
 */

 float DIVelocityGrid_GetFractionInsideEdge(in float SignedDistanceA, in float SignedDistanceB)
 {
	const bool IsInsideA = SignedDistanceA<0.0;
	const bool IsInsideB = SignedDistanceB<0.0;

	return (IsInsideA && IsInsideB) ? 1.0 : (IsInsideA && !IsInsideB) ? SignedDistanceA / (SignedDistanceA - SignedDistanceB) : 
		   (!IsInsideA && IsInsideB) ? SignedDistanceB / (SignedDistanceB - SignedDistanceA)  : 0.0;
 }

 float DIVelocityGrid_GetFractionInsideImplA(in float SignedDistanceA, in float SignedDistanceB, in float SignedDistanceD)
 {
	const float Side0 = 1.0 - DIVelocityGrid_GetFractionInsideEdge(SignedDistanceA,SignedDistanceD);
	const float Side1 = 1.0 - DIVelocityGrid_GetFractionInsideEdge(SignedDistanceA,SignedDistanceB);
	return 1.0 - 0.5 * Side0 * Side1;
 }

 float DIVelocityGrid_GetFractionInsideImplB(in float SignedDistanceA, in float SignedDistanceB, in float SignedDistanceC, in float SignedDistanceD)
 {
	const float Side0 = DIVelocityGrid_GetFractionInsideEdge(SignedDistanceA,SignedDistanceD);
	const float Side1 = DIVelocityGrid_GetFractionInsideEdge(SignedDistanceB,SignedDistanceC);
	return 0.5 * ( Side0 + Side1);
 }

 float DIVelocityGrid_GetFractionInsideImplC(in float SignedDistanceA, in float SignedDistanceB, in float SignedDistanceC, in float SignedDistanceD)
 {
	const float MiddlePoint = 0.25 * (SignedDistanceA+SignedDistanceB+SignedDistanceC+SignedDistanceD);
	if(MiddlePoint < 0.0)
	{
		float FaceArea = 0.0;

		const float Side1 = 1.0 - DIVelocityGrid_GetFractionInsideEdge(SignedDistanceA,SignedDistanceD);
		const float Side3 = 1.0 - DIVelocityGrid_GetFractionInsideEdge(SignedDistanceC,SignedDistanceD);
		FaceArea += 0.5 * Side3 * Side1;

		const float Side2 = 1.0 - DIVelocityGrid_GetFractionInsideEdge(SignedDistanceC,SignedDistanceB);
		const float Side0 = 1.0 - DIVelocityGrid_GetFractionInsideEdge(SignedDistanceA,SignedDistanceB);
		FaceArea += 0.5 * Side0 * Side2;

		return 1.0 - FaceArea;
	}
	else
	{
		float FaceArea = 0.0;

		const float Side0 = 1.0 - DIVelocityGrid_GetFractionInsideEdge(SignedDistanceA,SignedDistanceB);
		const float Side1 = 1.0 - DIVelocityGrid_GetFractionInsideEdge(SignedDistanceA,SignedDistanceD);
		FaceArea += 0.5 * Side0 * Side1;

		const float Side2 = 1.0 - DIVelocityGrid_GetFractionInsideEdge(SignedDistanceC,SignedDistanceB);
		const float Side3 = 1.0 - DIVelocityGrid_GetFractionInsideEdge(SignedDistanceC,SignedDistanceD);
		FaceArea += 0.5 * Side3 * Side2;

		return FaceArea;

	}
 }

 float DIVelocityGrid_GetFractionInsideImplD(in float SignedDistanceA, in float SignedDistanceB, in float SignedDistanceD)
 {
	const float Side0 = DIVelocityGrid_GetFractionInsideEdge(SignedDistanceA,SignedDistanceD);
	const float Side1 = DIVelocityGrid_GetFractionInsideEdge(SignedDistanceA,SignedDistanceB);
	return 0.5 * Side0 * Side1;
 }

 float DIVelocityGrid_GetFractionInsideFace(in float SignedDistanceA, in float SignedDistanceB, in float SignedDistanceC, in float SignedDistanceD )
 {
	const bool IsInsideA = SignedDistanceA<0.0;
	const bool IsInsideB = SignedDistanceB<0.0;
	const bool IsInsideC = SignedDistanceC<0.0;
	const bool IsInsideD = SignedDistanceD<0.0;

	const int InsideCount = IsInsideA + IsInsideB + IsInsideC + IsInsideD;

	[branch]
	if(InsideCount == 4)
	{
		return 1.0;
	}
	else if(InsideCount == 3)
	{
		[branch]
		if(!IsInsideA)
		{
			return DIVelocityGrid_GetFractionInsideImplA(SignedDistanceA,SignedDistanceB,SignedDistanceD);
		}
		else if(!IsInsideB)
		{
			return DIVelocityGrid_GetFractionInsideImplA(SignedDistanceB,SignedDistanceC,SignedDistanceA);
		}
		else if(!IsInsideC)
		{
			return DIVelocityGrid_GetFractionInsideImplA(SignedDistanceC,SignedDistanceD,SignedDistanceB);
		}
		else if(!IsInsideD)
		{
			return DIVelocityGrid_GetFractionInsideImplA(SignedDistanceD,SignedDistanceA,SignedDistanceC);
		}
	}
	else if(InsideCount == 2)
	{
		[branch]
		if(IsInsideA && IsInsideB)
		{
			return DIVelocityGrid_GetFractionInsideImplB(SignedDistanceA,SignedDistanceB,SignedDistanceC, SignedDistanceD);
		}
		else if(IsInsideB && IsInsideC)
		{
			return DIVelocityGrid_GetFractionInsideImplB(SignedDistanceB,SignedDistanceC,SignedDistanceD, SignedDistanceA);
		}
		else if(IsInsideC && IsInsideD)
		{
			return DIVelocityGrid_GetFractionInsideImplB(SignedDistanceC,SignedDistanceD,SignedDistanceA, SignedDistanceB);
		}
		else if(IsInsideD && IsInsideA)
		{
			return DIVelocityGrid_GetFractionInsideImplB(SignedDistanceD,SignedDistanceA,SignedDistanceB, SignedDistanceC);
		}
		else if(IsInsideA && IsInsideC)
		{
			return DIVelocityGrid_GetFractionInsideImplC(SignedDistanceA,SignedDistanceB,SignedDistanceC, SignedDistanceD);
		}
		else if(IsInsideB && IsInsideD)
		{
			return DIVelocityGrid_GetFractionInsideImplC(SignedDistanceB,SignedDistanceC,SignedDistanceD, SignedDistanceA);
		}
	}
	else if(InsideCount == 1)
	{
		[branch]
		if(IsInsideA)
		{
			return DIVelocityGrid_GetFractionInsideImplA(SignedDistanceA,SignedDistanceB,SignedDistanceD);
		}
		else if(IsInsideB)
		{
			return DIVelocityGrid_GetFractionInsideImplA(SignedDistanceB,SignedDistanceC,SignedDistanceA);
		}
		else if(IsInsideC)
		{
			return DIVelocityGrid_GetFractionInsideImplA(SignedDistanceC,SignedDistanceD,SignedDistanceB);
		}
		else if(IsInsideD)
		{
			return DIVelocityGrid_GetFractionInsideImplA(SignedDistanceD,SignedDistanceA,SignedDistanceC);
		}
	}
	return 0;
 }

// Update the solid weights and velocities
void DIVelocityGrid_SetSolidBoundary(in FDIVelocityGridContext DIContext, in RWTexture3D<int> DIContext_GridDestinationBuffer,
									in int GridHash, in float SolidDistance,
									in float3 SolidVelocity, out bool OutBoundaryStatus)
{
	const int3 GridIndex = DIVelocityGrid_GetGridIndex(DIContext,GridHash);
	OutBoundaryStatus = false;

	[branch]
	if( DIVelocityGrid_IsNodeValid(DIContext,GridIndex))
	{
		OutBoundaryStatus = true;
		DIVelocityGrid_SetGridScalar(DIContext,DIContext_GridDestinationBuffer,GridIndex,SOLID_DISTANCE_OFFSET,SolidDistance);
		DIVelocityGrid_SetGridVector(DIContext,DIContext_GridDestinationBuffer,GridIndex,SOLID_VELOCITY_OFFSET,SolidVelocity);
	}
}

void DIVelocityGrid_ComputeFaceWeights(in FDIVelocityGridContext DIContext, in RWTexture3D<int> DIContext_GridDestinationBuffer, in int3 GridLocation, in int ComponentIndex, out float SignedDistance, inout float ParticleVelocity )
{
	SignedDistance = DIVelocityGrid_GetGridScalar(DIContext,GridLocation,SOLID_DISTANCE_OFFSET);
	ParticleVelocity += DIVelocityGrid_GetGridScalar(DIContext,GridLocation,SOLID_VELOCITY_OFFSET+ComponentIndex);
}

void DIVelocityGrid_ComputeComponentWeights(in FDIVelocityGridContext DIContext, in RWTexture3D<int> DIContext_GridDestinationBuffer, in int3 GridIndex, in int ComponentIndex)
{
	[branch]
	if( DIVelocityGrid_IsFaceInside(DIContext,GridIndex,ComponentIndex))
	{
		float SignedDistance[4];
		float ParticleVelocity = 0.0;

		[branch]
		if(ComponentIndex == 0)
		{
			DIVelocityGrid_ComputeFaceWeights(DIContext,DIContext_GridDestinationBuffer,int3(GridIndex.x,GridIndex.y+0,GridIndex.z+0),ComponentIndex,SignedDistance[0],ParticleVelocity);
			DIVelocityGrid_ComputeFaceWeights(DIContext,DIContext_GridDestinationBuffer,int3(GridIndex.x,GridIndex.y+0,GridIndex.z+1),ComponentIndex,SignedDistance[1],ParticleVelocity);
			DIVelocityGrid_ComputeFaceWeights(DIContext,DIContext_GridDestinationBuffer,int3(GridIndex.x,GridIndex.y+1,GridIndex.z+0),ComponentIndex,SignedDistance[2],ParticleVelocity);
			DIVelocityGrid_ComputeFaceWeights(DIContext,DIContext_GridDestinationBuffer,int3(GridIndex.x,GridIndex.y+1,GridIndex.z+1),ComponentIndex,SignedDistance[3],ParticleVelocity);
		}
		else if(ComponentIndex == 1)
		{
			DIVelocityGrid_ComputeFaceWeights(DIContext,DIContext_GridDestinationBuffer,int3(GridIndex.x+0,GridIndex.y,GridIndex.z+0),ComponentIndex,SignedDistance[0],ParticleVelocity);
			DIVelocityGrid_ComputeFaceWeights(DIContext,DIContext_GridDestinationBuffer,int3(GridIndex.x+0,GridIndex.y,GridIndex.z+1),ComponentIndex,SignedDistance[1],ParticleVelocity);
			DIVelocityGrid_ComputeFaceWeights(DIContext,DIContext_GridDestinationBuffer,int3(GridIndex.x+1,GridIndex.y,GridIndex.z+0),ComponentIndex,SignedDistance[2],ParticleVelocity);
			DIVelocityGrid_ComputeFaceWeights(DIContext,DIContext_GridDestinationBuffer,int3(GridIndex.x+1,GridIndex.y,GridIndex.z+1),ComponentIndex,SignedDistance[3],ParticleVelocity);
		}
		else
		{
			DIVelocityGrid_ComputeFaceWeights(DIContext,DIContext_GridDestinationBuffer,int3(GridIndex.x+0,GridIndex.y+0,GridIndex.z),ComponentIndex,SignedDistance[0],ParticleVelocity);
			DIVelocityGrid_ComputeFaceWeights(DIContext,DIContext_GridDestinationBuffer,int3(GridIndex.x+0,GridIndex.y+1,GridIndex.z),ComponentIndex,SignedDistance[1],ParticleVelocity);
			DIVelocityGrid_ComputeFaceWeights(DIContext,DIContext_GridDestinationBuffer,int3(GridIndex.x+1,GridIndex.y+0,GridIndex.z),ComponentIndex,SignedDistance[2],ParticleVelocity);
			DIVelocityGrid_ComputeFaceWeights(DIContext,DIContext_GridDestinationBuffer,int3(GridIndex.x+1,GridIndex.y+1,GridIndex.z),ComponentIndex,SignedDistance[3],ParticleVelocity);
		}

		const float SolidWeight = max(0.0,min(1.0 - DIVelocityGrid_GetFractionInsideFace(SignedDistance[0],SignedDistance[1],SignedDistance[3],SignedDistance[2]),1.0));
		const float SolidVelocity = 0.25 * ParticleVelocity;

		DIVelocityGrid_SetGridScalar(DIContext,DIContext_GridDestinationBuffer,GridIndex,SOLID_WEIGHT_OFFSET+ComponentIndex,SolidWeight);
		DIVelocityGrid_SetGridScalar(DIContext,DIContext_GridDestinationBuffer,GridIndex,SOLID_VELOCITY_OFFSET+ComponentIndex,SolidVelocity);
	}
}

 // Update the solid weights and velocities
void DIVelocityGrid_ComputeBoundaryWeights(in FDIVelocityGridContext DIContext, in RWTexture3D<int> DIContext_GridDestinationBuffer, in int GridHash, out bool OutWeightsStatus)
{
	const int3 GridIndex = DIVelocityGrid_GetGridIndex(DIContext,GridHash);
	OutWeightsStatus = false;

	DIVelocityGrid_ComputeComponentWeights(DIContext,DIContext_GridDestinationBuffer,GridIndex,0);
	DIVelocityGrid_ComputeComponentWeights(DIContext,DIContext_GridDestinationBuffer,GridIndex,1);
	DIVelocityGrid_ComputeComponentWeights(DIContext,DIContext_GridDestinationBuffer,GridIndex,2);
}

/* -----------------------------------------------------------------
 * Sample Velocity field from grid
 * -----------------------------------------------------------------
 */

// Compute the grid pressure
// Mdv/dt = Jt * P with C = Volume * div(V) = 0.0 = ( vnx * wnx * dx * dx - vpx * wpx * dx * dx ) + ... (divergence theorem)
// -> dv = inv(M) * Jt * P * dt;
// Jnx = dC/dvnx = wnx * dx * dx, Jpx = dC/dvpx = -wpx * dx * dx
// since C = C0 + dC/dv * dv = C0 + J * dv = 0 = C0 + J * inv(M) * Jt * P * dt; and M = wnx * mnx
// the schur complement is J * inv(M) * Jt * P * dt = -C0 -> P * dt = -C0 / (wnx * dx * dx * wnx * dx * dx / ( wnx * mnx) + wpx * ....)
// P * dt = - sum( vnx * wnx * dx * dx - vpx * wpx * dx * dx ) / sum (wnx * dx * dx * wnx * dx * dx / ( wnx * mnx);
//        = - sum( vnx * wnx ) / sum( wnx * dx * dx / mnx ) = -sum( vnx * wnx ) / ( dx * dx * sum( wnx / mnx ) )
// P * dt * dx * dx = Pt = -sum( vnx * wnx ) / ( sum( wnx / mnx ) )
// dv = wnx * dx * dx * P * dt / (wnx * mnx) = Pt / mnx

float DIVelocityGrid_ComputeGridPressure(in FDIVelocityGridContext DIContext, in int3 PrevIndex, in float CentreDistance, out float3 PrevFraction, out float3 NextFraction)
{	
	float GridPressure = 0.0;
	float GridDivergence = 0.0;
	float GridFraction = 0.0;

	for(int ComponentIndex = 0; ComponentIndex < 3; ++ComponentIndex)
	{
		int3 NextIndex = PrevIndex; NextIndex[ComponentIndex] += 1;

		const float PrevDistance = DIVelocityGrid_GetGridScalar(DIContext,PrevIndex,FLUID_DISTANCE_OFFSET);
		PrevFraction[ComponentIndex] = (PrevDistance < 0.0) ? 1.0 : max(DIVelocityGrid_GetFractionInsideEdge(CentreDistance,PrevDistance),0.01);
		const float PrevWeight = DIVelocityGrid_GetGridScalar(DIContext,PrevIndex,SOLID_WEIGHT_OFFSET+ComponentIndex);
			
		GridDivergence -= DIVelocityGrid_GetGridScalar(DIContext,PrevIndex,SOLID_VELOCITY_OFFSET+ComponentIndex) * (1.0-PrevWeight);
		GridDivergence -= DIVelocityGrid_GetGridScalar(DIContext,PrevIndex,FLUID_VELOCITY_OFFSET+ComponentIndex) * PrevWeight;
		GridFraction += PrevWeight / PrevFraction[ComponentIndex];

		const float NextDistance = DIVelocityGrid_GetGridScalar(DIContext,NextIndex,FLUID_DISTANCE_OFFSET);
		NextFraction[ComponentIndex] = (NextDistance < 0.0) ? 1.0 : max(DIVelocityGrid_GetFractionInsideEdge(CentreDistance,NextDistance),0.01);
		const float NextWeight = DIVelocityGrid_GetGridScalar(DIContext,NextIndex,SOLID_WEIGHT_OFFSET+ComponentIndex);
			
		GridDivergence += DIVelocityGrid_GetGridScalar(DIContext,NextIndex,SOLID_VELOCITY_OFFSET+ComponentIndex) * (1.0-NextWeight);
		GridDivergence += DIVelocityGrid_GetGridScalar(DIContext,NextIndex,FLUID_VELOCITY_OFFSET+ComponentIndex) * NextWeight;
		GridFraction += NextWeight / NextFraction[ComponentIndex];
	}
	if( GridFraction > 0.0)
	{
		//GridDivergence += DIVelocityGrid_GetGridScalar(DIContext,PrevIndex,FLUID_DENSITY_OFFSET);
		GridPressure = -GridDivergence / (GridFraction);
	}
	return GridPressure;
}

// Project the pressure grid to be divergence free
void DIVelocityGrid_SolveGridPressure(in FDIVelocityGridContext DIContext, in RWTexture3D<int> DIContext_GridDestinationBuffer, in int GridHash, in int InitStage, out bool OutProjectStatus)
{	
	OutProjectStatus = false;

	const int3 PrevIndex = DIVelocityGrid_GetGridIndex(DIContext,GridHash);
	const bool IsInitStage = (SimulationStageIndex == InitStage) || (SimulationStageIndex == (InitStage+1));

	if(DIVelocityGrid_IsCellValid(DIContext,PrevIndex))
	{
		if( (PrevIndex.x+PrevIndex.y+PrevIndex.z+SimulationStageIndex) % 2 == 0)
		{
			OutProjectStatus = true;
			const float CentreDistance = DIVelocityGrid_GetGridScalar(DIContext,PrevIndex,FLUID_DISTANCE_OFFSET);
			if( CentreDistance < 0.0)
			{
				float3 PrevFraction = float3(0,0,0);
				float3 NextFraction = float3(0,0,0);

				float GridPressure = DIVelocityGrid_ComputeGridPressure(DIContext,PrevIndex,CentreDistance,PrevFraction,NextFraction);
				if(!IsInitStage)
				{
					DIVelocityGrid_AddGridScalar(DIContext,DIContext_GridDestinationBuffer,PrevIndex,FLUID_PRESSURE_OFFSET,GridPressure);
				}
				else 
				{
					GridPressure =  DIVelocityGrid_GetGridScalar(DIContext,PrevIndex,FLUID_PRESSURE_OFFSET);
				}

				for( int ComponentIndex = 0; ComponentIndex < 3; ++ComponentIndex)
				{
					int3 NextIndex = PrevIndex; NextIndex[ComponentIndex] += 1;

					const float PrevWeight = DIVelocityGrid_GetGridScalar(DIContext,PrevIndex,SOLID_WEIGHT_OFFSET+ComponentIndex);
					if( PrevWeight > 0.0 && PrevFraction[ComponentIndex] > 0.0)
					{
						DIVelocityGrid_AddGridScalar(DIContext,DIContext_GridDestinationBuffer,PrevIndex,FLUID_VELOCITY_OFFSET+ComponentIndex,-GridPressure/PrevFraction[ComponentIndex]);
					}
					else
					{
						const float SolidVelocity = DIVelocityGrid_GetGridScalar(DIContext,PrevIndex,SOLID_VELOCITY_OFFSET+ComponentIndex);
						DIVelocityGrid_SetGridScalar(DIContext,DIContext_GridDestinationBuffer,PrevIndex,FLUID_VELOCITY_OFFSET+ComponentIndex,SolidVelocity);
					}

					const float NextWeight = DIVelocityGrid_GetGridScalar(DIContext,NextIndex,SOLID_WEIGHT_OFFSET+ComponentIndex);
					if( NextWeight > 0.0 && NextFraction[ComponentIndex] > 0.0)
					{
						DIVelocityGrid_AddGridScalar(DIContext,DIContext_GridDestinationBuffer,NextIndex,FLUID_VELOCITY_OFFSET+ComponentIndex,GridPressure/NextFraction[ComponentIndex]);
					}
					else
					{
						const float SolidVelocity = DIVelocityGrid_GetGridScalar(DIContext,NextIndex,SOLID_VELOCITY_OFFSET+ComponentIndex);
						DIVelocityGrid_SetGridScalar(DIContext,DIContext_GridDestinationBuffer,NextIndex,FLUID_VELOCITY_OFFSET+ComponentIndex,SolidVelocity);
					}
				}
			}
			else
			{
				DIVelocityGrid_SetGridScalar(DIContext,DIContext_GridDestinationBuffer,PrevIndex,FLUID_PRESSURE_OFFSET,0.0);
			}
		}
	}
}










