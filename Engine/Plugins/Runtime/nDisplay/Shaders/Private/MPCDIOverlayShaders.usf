// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.
#include "MPCDIUtils.ush"

//Draw rectangle support
float4 DrawRectanglePosScaleBias;
float4 DrawRectangleInvTargetSizeAndTextureSize;
float4 DrawRectangleUVScaleBias;

// Pixel SHADER parameters
Texture2D PostprocessInput0;
SamplerState PostprocessInput0Sampler;

Texture2D	WarpMap;
SamplerState WarpMapSampler;

Texture2D	AlphaMap;
SamplerState AlphaMapSampler;

Texture2D	BetaMap;
SamplerState BetaMapSampler;

float		AlphaEmbeddedGamma;

float4x4	TextureProjectionMatrix;
float4x4	MultiViewportMatrix;

TextureCube  SceneCubemap;
SamplerState SceneCubemapSampler;

float3		EyePosition;
float3		EyeLookAt;
float		VignetteEV;


struct InputVS
{
	float4 Position : ATTRIBUTE0;
	float2 UV       : ATTRIBUTE1;
};

struct OutputVS
{
	float4	Position : SV_POSITION;
	float4	UV       : TEXCOORD0;
};

struct OutputPS
{
	float4 Color : SV_Target0;
};


/** Used for calculating vertex positions and UVs when drawing with DrawRectangle */
void DrawRectangle(in float4 InPosition, in float2 InTexCoord, out float4 OutPosition, out float2 OutTexCoord)
{
	OutPosition = InPosition;
	OutPosition.xy = -1.0f + 2.0f * (DrawRectanglePosScaleBias.zw + (InPosition.xy * DrawRectanglePosScaleBias.xy)) * DrawRectangleInvTargetSizeAndTextureSize.xy;
	OutPosition.xy *= float2(1, -1);
	OutTexCoord.xy = (DrawRectangleUVScaleBias.zw + (InTexCoord.xy * DrawRectangleUVScaleBias.xy)) * DrawRectangleInvTargetSizeAndTextureSize.zw;
}

float4 ApplyBlending(float3 color, OutputVS IN, float ColorAlphaValue)
{
	color = MPCDI_sRGBToLinear(color);

	// Load alpha
	float alpha = pow(AlphaMap.Sample(AlphaMapSampler, IN.UV.xy).r, AlphaEmbeddedGamma);

	// Load beta
	float beta = BetaMap.Sample(BetaMapSampler, IN.UV.xy).r;

	color = (color*alpha*(1 - beta)) + beta;

	return float4(MPCDI_LinearTosRGB(color), ColorAlphaValue);
}


OutputVS MainVS( InputVS IN)
{
	OutputVS OUT;
	DrawRectangle(IN.Position, IN.UV, OUT.Position, OUT.UV.xy);
	OUT.Position.zw = float2(0.f, 1.f);
	OUT.UV = float4(IN.UV, 0.f, 1.f);
	return OUT;
}

OutputPS Passthrough_PS( OutputVS IN )
{
	OutputPS OUT;
	float4 UV = mul(IN.UV, MultiViewportMatrix);
	OUT.Color = PostprocessInput0.Sample(PostprocessInput0Sampler, UV.xy);
	return OUT; 
}

OutputPS WarpAndBlend_PS( OutputVS IN )
{
	OutputPS OUT;

	// Load warped UV
	float4 WarpedUV = WarpMap.Sample(WarpMapSampler, IN.UV.xy);

	// Transform WarpedUV to ScreenSpaceUV
	float4 UV =  mul(WarpedUV, MultiViewportMatrix);

	// Load from color map
	float3 Color = PostprocessInput0.Sample(PostprocessInput0Sampler, UV.xy/UV.w).rgb;

#if RENDER_CASE_APPLYBLENDING
	// Apply blending
	OUT.Color = ApplyBlending(Color, IN, 1.f);
#else
	// No blending
	OUT.Color = float4(Color, 1.f);
#endif
	return OUT;
}


float Pow2(float X)
{
	return X * X;
}


float2       CameraSoftEdge;

float4x4     CameraProjectionMatrix;
Texture2D    CameraMap;
SamplerState CameraMapSampler;

Texture2D    ViewportOverlayMap;
SamplerState ViewportOverlayMapSampler;

Texture2D    ViewportOverlayBackMap;
SamplerState ViewportOverlayBackMapSampler;

OutputPS PicpMPCDIWarpAndBlendOverlay_PS(OutputVS IN)
{
	OutputPS OUT;

	float4 OutColor = float4(0, 0, 0, 0);

	// Load warped UV
	float4 WarpedUV = WarpMap.Sample(WarpMapSampler, IN.UV.xy);

#if RENDER_CASE_VIEWPORT
	// Transform WarpedUV to ScreenSpaceUV
	float4 ViewportUVW = mul(WarpedUV, MultiViewportMatrix);
	float2 ViewportUV = ViewportUVW.xy / ViewportUVW.w;
#endif
#if RENDER_CASE_VIEWPORT_BASE
	float4 ViewportBaseColor = float4(PostprocessInput0.Sample(PostprocessInput0Sampler, ViewportUV).rgb, 1.0f);
#endif


#if RENDER_CASE_VIEWPORT_OVERLAY
	float4 ViewportOverlayUVW = mul(WarpedUV, TextureProjectionMatrix);
	float2 ViewportOverlayUV = ViewportOverlayUVW.xy / ViewportOverlayUVW.w;
	float4 ViewportOverlayColor = ViewportOverlayMap.Sample(ViewportOverlayMapSampler, ViewportOverlayUV).rgba;
#endif

#if RENDER_CASE_CAMERA
	// Transform WarpedUV to Camera ScreenSpaceUV
	float4 CameraUVW = mul(WarpedUV, CameraProjectionMatrix);
	float2 CameraUV = CameraUVW.xy / CameraUVW.w;
	// Load from Cameramap
	float3 CameraBaseColor        = CameraMap.Sample(CameraMapSampler, CameraUV).rgb;

	float4 CameraColor = float4(CameraBaseColor, 0);

	if (CameraUVW.w > 0) // clip back plane
	{//Defined texel:
		float2 ToEdge = (CameraUV.xy * 2) - 1.0f; // -1..1
		float Weight = 1 - max(abs(ToEdge.x), abs(ToEdge.y));
		// Near clip Plane tests		
		if (Weight >= 0)
		{
			float2 ToSoftEdge = saturate((abs(ToEdge) - 1.0f + CameraSoftEdge) / CameraSoftEdge);
			float CameraTextureAlpha = Pow2(saturate(1 - Pow2(dot(ToSoftEdge, ToSoftEdge))));
			CameraColor.w = CameraTextureAlpha;
		}
	}

	OutColor = CameraColor;
#if RENDER_CASE_VIEWPORT_OVERLAY
	OutColor.xyz = lerp(OutColor.xyz, ViewportOverlayColor.xyz, saturate(1.0f - ViewportOverlayColor.w));
#endif

#else  //NOT CASE CAMERA

#if RENDER_CASE_VIEWPORT_BASE
	OutColor = ViewportBaseColor;
	#if RENDER_CASE_VIEWPORT_OVERLAY
		OutColor.xyz = lerp(OutColor.xyz, ViewportOverlayColor.xyz, saturate(1.0f - ViewportOverlayColor.w));
	#endif
#else // NOT VP BASE
	#if RENDER_CASE_VIEWPORT_OVERLAY
		OutColor = ViewportOverlayColor;
	#endif
#endif

#endif
	
	//!fixme: add LUT here


#if RENDER_CASE_APPLYBLENDING
	// Apply final mpcdi color blending
	OUT.Color = ApplyBlending(OutColor.xyz, IN, OutColor.w);
#else
	// No blending
	OUT.Color = OutColor;
#endif
	return OUT;
}


OutputPS PicpMPCDIWarpAndBlendViewportOverlay_PS(OutputVS IN)
{
	OutputPS OUT;

	// Load warped UV
	float4 WarpedUV = WarpMap.Sample(WarpMapSampler, IN.UV.xy);

	// Transform WarpedUV to ScreenSpaceUV
	float4 OverlayUVW = mul(WarpedUV, TextureProjectionMatrix);
	float2 OverlayUV = OverlayUVW.xy / OverlayUVW.w;
	
	float4 ViewportOverlayColor = ViewportOverlayMap.Sample(ViewportOverlayMapSampler, OverlayUV).rgba;

	//!fixme: add LUT here


#if RENDER_CASE_APPLYBLENDING
	// Apply final mpcdi color blending
	OUT.Color = ApplyBlending(ViewportOverlayColor.xyz, IN, ViewportOverlayColor.w);
#else
	// No blending
	OUT.Color = ViewportOverlayColor;
#endif
	return OUT;
}

OutputPS PicpMPCDIWarpAndBlendOneCameraFull_PS(OutputVS IN)
{
	OutputPS OUT;

	// Load warped UV
	float4 WarpedUV = WarpMap.Sample(WarpMapSampler, IN.UV.xy);

	// Transform WarpedUV to ScreenSpaceUV
	float4 ViewportUVW = mul(WarpedUV, MultiViewportMatrix);
	float2 ViewportUV = ViewportUVW.xy / ViewportUVW.w;

	float4 OverlayUVW = mul(WarpedUV, TextureProjectionMatrix);
	float2 OverlayUV = OverlayUVW.xy / OverlayUVW.w;


	float4 ViewportBaseColor = float4(PostprocessInput0.Sample(PostprocessInput0Sampler, ViewportUV).rgb, 1.0f);

#if USE_OVERLAY_BACK
	float4 ViewportOverlayBackColor = ViewportOverlayBackMap.Sample(ViewportOverlayBackMapSampler, OverlayUV).rgba;
#endif
#if USE_OVERLAY_FRONT
	float4 ViewportOverlayColor = ViewportOverlayMap.Sample(ViewportOverlayMapSampler, OverlayUV).rgba;

	//ViewportOverlayColor.rgb = float3(1, 0, 0);//!
#endif

	// Transform WarpedUV to Camera ScreenSpaceUV
	float4 CameraUVW = mul(WarpedUV, CameraProjectionMatrix);
	float2 CameraUV = CameraUVW.xy / CameraUVW.w;
	// Load from Cameramap
	float3 CameraBaseColor = CameraMap.Sample(CameraMapSampler, CameraUV).rgb;

	float4 CameraColor = float4(CameraBaseColor, 0);

	if (CameraUVW.w > 0) // clip back plane
	{//Defined texel:
		float2 ToEdge = (CameraUV.xy * 2) - 1.0f; // -1..1
		float Weight = 1 - max(abs(ToEdge.x), abs(ToEdge.y));
		// Near clip Plane tests
		//! UV.z <= UV.w &&
		if (Weight >= 0)
		{
			float2 ToSoftEdge = saturate((abs(ToEdge) - 1.0f + CameraSoftEdge) / CameraSoftEdge);
			float CameraTextureAlpha = Pow2(saturate(1 - Pow2(dot(ToSoftEdge, ToSoftEdge))));
			CameraColor.w = CameraTextureAlpha;
		}
	}

	float4 OutColor = ViewportBaseColor;
	
#if USE_OVERLAY_BACK	
	OutColor.xyz = lerp(OutColor.xyz, ViewportOverlayBackColor.xyz, saturate(1.0f - ViewportOverlayBackColor.w));
#endif

	OutColor.xyz = lerp(OutColor.xyz, CameraColor.xyz,  CameraColor.w);

#if USE_OVERLAY_FRONT
	OutColor.xyz = lerp(OutColor.xyz, ViewportOverlayColor.xyz, saturate(1.0f - ViewportOverlayColor.w));
#endif

	//!fixme: add LUT here


#if RENDER_CASE_APPLYBLENDING
	// Apply final mpcdi color blending
	OUT.Color = ApplyBlending(OutColor.xyz, IN, OutColor.w);
#else
	// No blending
	OUT.Color = OutColor;
#endif

	return OUT;
}

