// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

#include "Input/Devices/VRPN/Tracker/DisplayClusterVrpnTrackerInputDataHolder.h"
#include "DisplayClusterLog.h"


namespace
{
	// Create a FQuat from a string that is in the same format as generated by
	// FQuat::ToString.
	// FQuat is missing InitializeFromString member function.
	FQuat QuatFromString(const FString& InSourceString)
	{
		FQuat Result;
		const bool bSuccessful
			=  FParse::Value( *InSourceString, TEXT("X="), Result.X )
			&& FParse::Value( *InSourceString, TEXT("Y="), Result.Y )
			&& FParse::Value( *InSourceString, TEXT("Z="), Result.Z )
			&& FParse::Value( *InSourceString, TEXT("W="), Result.W );

		if (!bSuccessful)
		{
			UE_LOG(LogDisplayClusterInputVRPN, Error, TEXT("Parsing FQuat from string '%s' failed!"), *InSourceString);
			Result = FQuat::Identity;
		}

		return Result;
	}

} // namespace



FDisplayClusterVrpnTrackerInputDataHolder::FDisplayClusterVrpnTrackerInputDataHolder(const FDisplayClusterConfigInput& config) :
	FDisplayClusterInputDeviceBase<EDisplayClusterInputDeviceType::VrpnTracker>(config)
{
}

FDisplayClusterVrpnTrackerInputDataHolder::~FDisplayClusterVrpnTrackerInputDataHolder()
{
}


//////////////////////////////////////////////////////////////////////////////////////////////
// IDisplayClusterInputDevice
//////////////////////////////////////////////////////////////////////////////////////////////
bool FDisplayClusterVrpnTrackerInputDataHolder::Initialize()
{
	return true;
}


//////////////////////////////////////////////////////////////////////////////////////////////
// IDisplayClusterStringSerializable
//////////////////////////////////////////////////////////////////////////////////////////////
FString FDisplayClusterVrpnTrackerInputDataHolder::SerializeToString() const
{
	FString result;
	result.Reserve(256);

	for (auto it = DeviceData.CreateConstIterator(); it; ++it)
	{
		result += FString::Printf(TEXT("%d%s%s%s%s%s"),
			it->Key, SerializationDelimiter, *it->Value.trLoc.ToString(), SerializationDelimiter, *it->Value.trQuat.ToString(), SerializationDelimiter);
	}

	return result;
}

bool FDisplayClusterVrpnTrackerInputDataHolder::DeserializeFromString(const FString& data)
{
	TArray<FString> parsed;
	data.ParseIntoArray(parsed, SerializationDelimiter);

	if (parsed.Num() % SerializationItems)
	{
		UE_LOG(LogDisplayClusterInputVRPN, Error, TEXT("Wrong items amount after deserialization [%s]"), *data);
		return false;
	}

	for (int i = 0; i < parsed.Num(); i += SerializationItems)
	{
		const int  ch = FCString::Atoi(*parsed[i]);
		FVector  loc;
		FQuat    quat = QuatFromString(parsed[i + 2]);
		loc.InitFromString(parsed[i + 1]);

		DeviceData.Add(ch, FDisplayClusterVrpnTrackerChannelData{ loc, quat });
	}

	return true;
}

