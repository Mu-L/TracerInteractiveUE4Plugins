// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	BasePassTessellationShaders.usf: Base pass domain and hull shaders
=============================================================================*/

// Metal's include graph is different due to combined VS + HS stage.
#if COMPILER_METAL
	#pragma once
	#if !METAL_PROFILE
		#if DOMAINSHADER
			#include "BasePassVertexCommon.ush"
		#elif !TESSELLATIONSHADER
			#include "BasePassVertexShader.usf"
		#endif
	#endif
#else
	#include "BasePassVertexCommon.ush"
#endif

FBasePassVSToDS PassInterpolate(FBasePassVSToDS a, float aInterp, FBasePassVSToDS b, float bInterp)
{
	FBasePassVSToDS O;
	
	O.FactoryInterpolants = VertexFactoryInterpolate(a.FactoryInterpolants, aInterp, b.FactoryInterpolants, bInterp);

	#if NEEDS_BASEPASS_VERTEX_FOGGING
		TESSELLATION_INTERPOLATE_MEMBER(BasePassInterpolants.VertexFog);
	#endif

	#if TRANSLUCENCY_LIGHTING_VOLUMETRIC_PERVERTEX_NONDIRECTIONAL || TRANSLUCENCY_LIGHTING_VOLUMETRIC_PERVERTEX_DIRECTIONAL
		TESSELLATION_INTERPOLATE_MEMBER(BasePassInterpolants.AmbientLightingVector);
	#endif

	#if TRANSLUCENCY_LIGHTING_VOLUMETRIC_PERVERTEX_DIRECTIONAL
		TESSELLATION_INTERPOLATE_MEMBER(BasePassInterpolants.DirectionalLightingVector);
	#endif

	#if USE_WORLD_POSITION_EXCLUDING_SHADER_OFFSETS
		TESSELLATION_INTERPOLATE_MEMBER(BasePassInterpolants.WorldPositionExcludingWPO);
	#endif

	#if WRITES_VELOCITY_TO_GBUFFER
		TESSELLATION_INTERPOLATE_MEMBER(BasePassInterpolants.VelocityPrevScreenPosition);
		#if WRITES_VELOCITY_TO_GBUFFER_USE_POS_INTERPOLATOR
		TESSELLATION_INTERPOLATE_MEMBER(BasePassInterpolants.VelocityScreenPosition);
		#endif
	#endif

	return O;
}

FBasePassVSToPS PassFinalizeTessellationOutput(FBasePassVSToDS Interpolants, float4 WorldPosition, FMaterialTessellationParameters MaterialParameters)
{
	FBasePassVSToPS O;
	
	O.FactoryInterpolants = VertexFactoryAssignInterpolants(Interpolants.FactoryInterpolants);

	// Copy everything in the shared base class over to the pixel shader input
#if METAL_TESSELLATION_PROFILE

	#if NEEDS_BASEPASS_VERTEX_FOGGING
		O.BasePassInterpolants.VertexFog = Interpolants.BasePassInterpolants.VertexFog;
	#endif

	#if !TESSELLATION_SUPPORTED
		#if USE_WORLD_POSITION_EXCLUDING_SHADER_OFFSETS
		O.BasePassInterpolants.PixelPositionExcludingWPO = Interpolants.BasePassInterpolants.PixelPositionExcludingWPO;
		#endif
	#endif

	#if TRANSLUCENCY_PERVERTEX_LIGHTING_VOLUME
		O.BasePassInterpolants.AmbientLightingVector = Interpolants.BasePassInterpolants.AmbientLightingVector;
	#endif

	#if TRANSLUCENCY_PERVERTEX_LIGHTING_VOLUME && TRANSLUCENCY_LIGHTING_VOLUMETRIC_PERVERTEX_DIRECTIONAL
		O.BasePassInterpolants.DirectionalLightingVector = Interpolants.BasePassInterpolants.DirectionalLightingVector;
	#endif

	#if TRANSLUCENCY_PERVERTEX_FORWARD_SHADING
		O.BasePassInterpolants.VertexDiffuseLighting = Interpolants.BasePassInterpolants.VertexDiffuseLighting;
	#endif

	#if PRECOMPUTED_IRRADIANCE_VOLUME_LIGHTING
		#if TRANSLUCENCY_LIGHTING_VOLUMETRIC_PERVERTEX_NONDIRECTIONAL
			O.BasePassInterpolants.VertexIndirectAmbient = Interpolants.BasePassInterpolants.VertexIndirectAmbient;
		#elif TRANSLUCENCY_LIGHTING_VOLUMETRIC_PERVERTEX_DIRECTIONAL
			O.BasePassInterpolants.VertexIndirectSH[0] = Interpolants.BasePassInterpolants.VertexIndirectSH[0];
			O.BasePassInterpolants.VertexIndirectSH[1] = Interpolants.BasePassInterpolants.VertexIndirectSH[1];
			O.BasePassInterpolants.VertexIndirectSH[2] = Interpolants.BasePassInterpolants.VertexIndirectSH[2];
		#endif
	#endif

	#if WRITES_VELOCITY_TO_GBUFFER
		O.BasePassInterpolants.VelocityPrevScreenPosition = Interpolants.BasePassInterpolants.VelocityPrevScreenPosition;
		#if WRITES_VELOCITY_TO_GBUFFER_USE_POS_INTERPOLATOR
			O.BasePassInterpolants.VelocityScreenPosition = Interpolants.BasePassInterpolants.VelocityScreenPosition;
		#endif
	#endif
	
#else // METAL_TESSELLATION_PROFILE
	(FSharedBasePassInterpolants)O.BasePassInterpolants = (FSharedBasePassInterpolants)Interpolants.BasePassInterpolants;
#endif // METAL_TESSELLATION_PROFILE

	// Transform position to clip-space
	{
		O.Position = mul(WorldPosition, ResolvedView.TranslatedWorldToClip);
#if WRITES_VELOCITY_TO_GBUFFER
		O.BasePassInterpolants.VelocityPrevScreenPosition = mul(float4(Interpolants.BasePassInterpolants.VelocityPrevScreenPosition.xyz, 1), ResolvedView.PrevTranslatedWorldToClip);
		#if WRITES_VELOCITY_TO_GBUFFER_USE_POS_INTERPOLATOR
		O.BasePassInterpolants.VelocityScreenPosition = mul(float4(Interpolants.BasePassInterpolants.VelocityScreenPosition.xyz, 1), ResolvedView.TranslatedWorldToClip);
		#endif
#endif
	}

	#if USE_WORLD_POSITION_EXCLUDING_SHADER_OFFSETS
		O.BasePassInterpolants.PixelPositionExcludingWPO = Interpolants.BasePassInterpolants.WorldPositionExcludingWPO;
	#endif

#if COMPILER_HLSLCC && NEEDS_BASEPASS_VERTEX_FOGGING  // workaround for hlslcc miscompilation, see UE-39489
	O.BasePassInterpolants.VertexFog = Interpolants.BasePassInterpolants.VertexFog;
#endif // COMPILER_HLSLCC && NEEDS_BASEPASS_VERTEX_FOGGING

	return O;
}

// This gets us the MainHull and MainDomain shader definitions
#include "Tessellation.ush"
