// Copyright 1998-2018 Epic Games, Inc. All Rights Reserved.

#include "Common.ush"

uint SrcOffset;
uint DstOffset;
uint Size;

ByteAddressBuffer	SrcBuffer;
RWByteAddressBuffer	DstBuffer;

[numthreads(THREADGROUP_SIZE, 1, 1)]
void MemcpyBufferCS( uint3 DispatchThreadId : SV_DispatchThreadID ) 
{
	uint SrcIndex = SrcOffset + DispatchThreadId.x * 4;
	uint DstIndex = DstOffset + DispatchThreadId.x * 4;

	if( ( DispatchThreadId.x + 3 ) * 4 < Size )
	{
		uint4 SrcData = SrcBuffer.Load4( SrcIndex * 4 );
		DstBuffer.Store4( DstIndex * 4, SrcData );
	}
	else if( ( DispatchThreadId.x + 2 ) * 4 < Size )
	{
		uint3 SrcData = SrcBuffer.Load3( SrcIndex * 4 );
		DstBuffer.Store3( DstIndex * 4, SrcData );
	}
	else if( ( DispatchThreadId.x + 1 ) * 4 < Size )
	{
		uint2 SrcData = SrcBuffer.Load2( SrcIndex * 4 );
		DstBuffer.Store2( DstIndex * 4, SrcData );
	}
	else if( ( DispatchThreadId.x + 0 ) * 4 < Size )
	{
		uint SrcData = SrcBuffer.Load( SrcIndex * 4 );
		DstBuffer.Store( DstIndex * 4, SrcData );
	}
}


#ifndef UINT_COPY_SIZE
#define UINT_COPY_SIZE	1
#endif

uint NumScatters;

ByteAddressBuffer	ScatterBuffer;

[numthreads(THREADGROUP_SIZE, 1, 1)]
void ScatterCopyCS( uint3 DispatchThreadId : SV_DispatchThreadID ) 
{
#if 1
	uint ScatterIndex = DispatchThreadId.x;
	
	if( ScatterIndex < NumScatters )
	{
		uint DstIndex = ScatterBuffer.Load( ScatterIndex * 4 );
		uint SrcIndex = ScatterIndex;
		uint SrcData = SrcBuffer.Load( SrcIndex * 4 );
		DstBuffer.Store( DstIndex * 4, SrcData );
		//DstBuffer.Store( DstIndex * 4, DispatchThreadId.x );
		//DstBuffer.Store( SrcIndex, DstIndex );
	}
#else
	uint ScatterIndex = DispatchThreadId.x * 4;
	
	if( ScatterIndex < NumScatters )
	{
		uint4 DstIndex = ScatterBuffer.Load4( ScatterIndex * 4 );
		
#if UINT_COPY_SIZE == 1
		// uint copy, 4 per thread
		uint  SrcIndex = ScatterIndex;
		uint4 SrcData = SrcBuffer.Load4( SrcIndex * 4 );

		UNROLL
		for( uint i = 0; i < 4; i++ )
		{
			if( ScatterIndex + i < NumScatters )
			{
				DstBuffer.Store( DstIndex[i] * 4, SrcData[i] );
				//DstBuffer.Store( DstIndex[i] * 4, DispatchThreadId.x );
				//DstBuffer.Store( DstIndex[i] * 4, DstIndex[i] );
				//DstBuffer.Store( (SrcIndex +  i) * 4, DstIndex[i] );
			}
		}
#elif UINT_COPY_SIZE == 4
		// uint4 copy, 4 per thread
		UNROLL
		for( uint i = 0; i < 4; i++ )
		{
			if( ScatterIndex + i < NumScatters )
			{
				uint  SrcIndex = ScatterIndex + i;
				uint4 SrcData = SrcBuffer.Load4( SrcIndex * 4 );

				DstBuffer.Store4( DstIndex[i] * 16, SrcData );
			}
		}
#else
#error Bad copy size
#endif
	}
#endif
}