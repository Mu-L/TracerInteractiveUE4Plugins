// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	DeferredLightPixelShaders.usf: 
=============================================================================*/

#define SUPPORT_CONTACT_SHADOWS 1

#include "Common.ush"
#if USE_HAIR_LIGHTING
#include "HairStrands/HairStrandsCommon.ush"
#endif

#include "DeferredShadingCommon.ush"
#include "DeferredLightingCommon.ush"

#if USE_HAIR_LIGHTING
	#include "HairStrands/HairStrandsDeepShadowCommon.ush"
	#include "HairStrands/HairStrandsDeepTransmittanceCommon.ush"
	#include "HairStrands/HairStrandsDeepTransmittanceDualScattering.ush"
	#include "HairStrands/HairStrandsVisibilityCommon.ush"
	#if HAIR_CUSTOM_BSDF == 1
	#include "HairBsdf.ush"
	#endif
#endif

struct FInputParams
{
	float2 PixelPos;
	float4 ScreenPosition;
	float2 ScreenUV;
	float3 ScreenVector;
};

struct FDerivedParams
{
	float3 CameraVector;
	float3 WorldPosition;
};

FDerivedParams GetDerivedParams(in FInputParams Input, in float SceneDepth)
{
	FDerivedParams Out;
#if LIGHT_SOURCE_SHAPE > 0
	// With a perspective projection, the clip space position is NDC * Clip.w
	// With an orthographic projection, clip space is the same as NDC
	float2 ClipPosition = Input.ScreenPosition.xy / Input.ScreenPosition.w * (View.ViewToClip[3][3] < 1.0f ? SceneDepth : 1.0f);
	Out.WorldPosition = mul(float4(ClipPosition, SceneDepth, 1), View.ScreenToWorld).xyz;
	Out.CameraVector = normalize(Out.WorldPosition - View.WorldCameraOrigin);
#else
	Out.WorldPosition = Input.ScreenVector * SceneDepth + View.WorldCameraOrigin;
	Out.CameraVector = normalize(Input.ScreenVector);
#endif
	return Out;
}

FDeferredLightData SetupLightDataForStandardDeferred()
{
	// Build the light data struct using the DeferredLightUniforms and light defines
	// We are heavily relying on the shader compiler to optimize out constant subexpressions in GetDynamicLighting()
	FDeferredLightData LightData;
	LightData.Position = DeferredLightUniforms.Position;
	LightData.InvRadius = DeferredLightUniforms.InvRadius;
	LightData.Color = DeferredLightUniforms.Color;
	LightData.FalloffExponent = DeferredLightUniforms.FalloffExponent;
	LightData.Direction = DeferredLightUniforms.Direction;
	LightData.Tangent = DeferredLightUniforms.Tangent;
	LightData.SpotAngles = DeferredLightUniforms.SpotAngles;
	LightData.SourceRadius = DeferredLightUniforms.SourceRadius,
	LightData.SourceLength = DeferredLightUniforms.SourceLength;
    LightData.SoftSourceRadius = DeferredLightUniforms.SoftSourceRadius;
	LightData.SpecularScale = DeferredLightUniforms.SpecularScale;
	LightData.ContactShadowLength = abs(DeferredLightUniforms.ContactShadowLength);
	LightData.ContactShadowLengthInWS = DeferredLightUniforms.ContactShadowLength < 0.0f;
	LightData.DistanceFadeMAD = DeferredLightUniforms.DistanceFadeMAD;
	LightData.ShadowMapChannelMask = DeferredLightUniforms.ShadowMapChannelMask;
	LightData.ShadowedBits = DeferredLightUniforms.ShadowedBits;

	LightData.bInverseSquared = INVERSE_SQUARED_FALLOFF;
	LightData.bRadialLight = LIGHT_SOURCE_SHAPE > 0;
	//@todo - permutation opportunity
	LightData.bSpotLight = LIGHT_SOURCE_SHAPE > 0;
	LightData.bRectLight = LIGHT_SOURCE_SHAPE == 2;
	
	LightData.RectLightBarnCosAngle = DeferredLightUniforms.RectLightBarnCosAngle;
	LightData.RectLightBarnLength = DeferredLightUniforms.RectLightBarnLength;

	LightData.HairTransmittance = InitHairTransmittanceData();
	return LightData;
}

Texture2D<uint> LightingChannelsTexture;

uint GetLightingChannelMask(float2 UV)
{
	uint2 IntegerUV = UV * View.BufferSizeAndInvSize.xy;
	return LightingChannelsTexture.Load(uint3(IntegerUV, 0)).x;
}

#if USE_HAIR_LIGHTING

Texture2D<uint4> HairCategorizationTexture;
Texture2D<uint> HairVisibilityNodeOffsetAndCount;
StructuredBuffer<FNodeData> HairVisibilityNodeData;

Texture2D<float4> ScreenShadowMaskSubPixelTexture;

uint HairTransmittanceBufferMaxCount;
StructuredBuffer<float4> HairTransmittanceBuffer;
Texture3D<float4> HairLUTTexture;
SamplerState HairLUTSampler;
uint HairShadowMaskValid;
uint HairComponents; // R, TT, TRT, LocalScattering, GlobalScattering, MultipleScattering


float Luma(float3 Color)
{
	return 0.25f * ((Color.g * 2.0) + (Color.r + Color.b));
}

#define RESOLVE_IN_PERCEPTUAL_SPACE 0
	
float4 LinearToPerceptual(float4 Color)
{
#if RESOLVE_IN_PERCEPTUAL_SPACE
	return float4(Color.xyz / (1 + Luma(Color.xyz)), Color.a);
#else
	return Color;
#endif
}
float4 PerceptualToLinear(float4 Color) 
{
#if RESOLVE_IN_PERCEPTUAL_SPACE
	return float4(Color.xyz / (1 - Luma(Color.xyz)), Color.a);
#else
	return Color;
#endif
}

void ComputeHairLighting(
	in FInputParams InputParams,
	in FNodeDesc NodeDesc,
	in FCategorizationData CatData,
	inout float OutHairCoverage,
	inout float4 OutColor, 
	inout float4 OutColorSubPixel)
{
	float4 LocalColor = 0;
	LOOP
	for (uint SampleIt = 0; SampleIt < NodeDesc.Count; SampleIt++)
	{
		const uint LocalOffset = NodeDesc.Offset + SampleIt;
		const FNodeData NodeData = HairVisibilityNodeData[LocalOffset];
		float			SampleDepth;
		FVisibilityData SampleVisData;
		float3			SampleBaseColor;
		float			SampleRoughness;
		float			SampleSpecular;
		DecodeNodeData(NodeData, SampleDepth, SampleVisData, SampleBaseColor, SampleRoughness, SampleSpecular);

		// Inject material data from the visibility/mini-gbuffer for hair
		const float SceneDepth = ConvertFromDeviceZ(SampleDepth);
		FScreenSpaceData HairScreenSpaceData;
		HairScreenSpaceData.AmbientOcclusion = 1;
		HairScreenSpaceData.GBuffer.WorldNormal = SampleVisData.Tangent;
		HairScreenSpaceData.GBuffer.BaseColor = SampleBaseColor;
		HairScreenSpaceData.GBuffer.Roughness = SampleRoughness;
		HairScreenSpaceData.GBuffer.ShadingModelID = SHADINGMODELID_HAIR;
		HairScreenSpaceData.GBuffer.DiffuseColor = 0;
		HairScreenSpaceData.GBuffer.SpecularColor = 0;
		HairScreenSpaceData.GBuffer.Specular = SampleSpecular;
		HairScreenSpaceData.GBuffer.Metallic = 0;
		HairScreenSpaceData.GBuffer.Depth = SampleDepth;
		HairScreenSpaceData.GBuffer.GBufferAO = 1;
		HairScreenSpaceData.GBuffer.CustomData = 0;
		HairScreenSpaceData.GBuffer.IndirectIrradiance = 0;
		HairScreenSpaceData.GBuffer.PrecomputedShadowFactors = 1;

		const FDerivedParams DerivedParams = GetDerivedParams(InputParams, SceneDepth);
		FDeferredLightData LightData = SetupLightDataForStandardDeferred();
		LightData.HairTransmittance.ScatteringComponent = HairComponents;

		// Compute Hair transmittance
		{
			const float3 LightPosition = LightData.Position;
			float3 L = float3(0, 0, 1);
			if (LightData.bRadialLight)
				L = normalize(LightPosition - DerivedParams.WorldPosition);
			else
				L = LightData.Direction;

			const float3 V = normalize(-DerivedParams.CameraVector);
			LightData.HairTransmittance = GetHairTransmittance(
				V, 
				L,
				HairScreenSpaceData.GBuffer, 
				LocalOffset,
				HairTransmittanceBufferMaxCount,
				HairTransmittanceBuffer,
				HairLUTTexture,
				HairLUTSampler,
				HairComponents);
		}

		const float Dither = InterleavedGradientNoise(InputParams.PixelPos, View.StateFrameIndexMod8);
		const uint3 PixelCoord = uint3(floor(InputParams.PixelPos), 0);
		const float4 LightAttenuation = HairShadowMaskValid ? ScreenShadowMaskSubPixelTexture.Load(PixelCoord) : 1;

		FRectTexture RectTexture = InitRectTexture(DeferredLightUniforms.SourceTexture);
		float SurfaceShadow = 1.0f;
		const float4 Radiance = GetDynamicLighting(DerivedParams.WorldPosition, DerivedParams.CameraVector, HairScreenSpaceData.GBuffer, HairScreenSpaceData.AmbientOcclusion, HairScreenSpaceData.GBuffer.ShadingModelID, LightData, LightAttenuation, Dither, uint2(InputParams.PixelPos), RectTexture, SurfaceShadow);
		const float  Attenuation = ComputeLightProfileMultiplier(DerivedParams.WorldPosition, DeferredLightUniforms.Position, -DeferredLightUniforms.Direction, DeferredLightUniforms.Tangent);

		const float4 LinearColor = Radiance * Attenuation;
		const float4 PercepualColor = LinearToPerceptual(LinearColor);
		const float LocalCoverage = From8bitCoverage(SampleVisData.Coverage8bit);
		LocalColor += PercepualColor * LocalCoverage;
	}
	const float PixelCoverage = saturate(CatData.PixelCoverage);
	OutHairCoverage = PixelCoverage;

	OutColor = 0;
	OutColorSubPixel = 0;
	if (OutHairCoverage < 1)
	{
		OutColorSubPixel = LocalColor * PixelCoverage;
		OutColorSubPixel.a = OutHairCoverage;
	}
	else
	{
		OutColor = LocalColor;
	}
}

#endif // USE_HAIR_LIGHTING


void DeferredLightPixelMain(
#if LIGHT_SOURCE_SHAPE > 0
	float4 InScreenPosition : TEXCOORD0,
#else
	float2 ScreenUV			: TEXCOORD0,
	float3 ScreenVector		: TEXCOORD1,
#endif
	float4 SVPos			: SV_POSITION,
	out float4 OutColor		: SV_Target0
#if USE_HAIR_LIGHTING
,	out float4 OutColorSubPixel	: SV_Target1
#endif
	)
{
	const float2 PixelPos = SVPos.xy;
	OutColor = 0;

	// Convert input data (directional/local light)
	FInputParams InputParams = (FInputParams)0;
	InputParams.PixelPos		= SVPos.xy;
#if LIGHT_SOURCE_SHAPE > 0
	InputParams.ScreenPosition	= InScreenPosition;
	InputParams.ScreenUV		= InScreenPosition.xy / InScreenPosition.w * View.ScreenPositionScaleBias.xy + View.ScreenPositionScaleBias.wz;
	InputParams.ScreenVector	= 0;
#else
	InputParams.ScreenPosition	= 0;
	InputParams.ScreenUV		= ScreenUV;
	InputParams.ScreenVector	= ScreenVector;
#endif

#if USE_HAIR_LIGHTING
	const uint3 PixelCoord = uint3(floor(InputParams.PixelPos), 0);
	const FNodeDesc NodeDesc = DecodeNodeDesc(HairVisibilityNodeOffsetAndCount.Load(PixelCoord));
	const FCategorizationData CatData = DecodeCategorizationData(HairCategorizationTexture.Load(PixelCoord));
	
	// Only light pixels marked as using deferred shading
	OutColorSubPixel = 0;
	float HairCoverage = 0;
	BRANCH 
	if (NodeDesc.Count > 0
	#if USE_LIGHTING_CHANNELS
		&& (GetLightingChannelMask(InputParams.ScreenUV) & DeferredLightUniforms.LightingChannelMask)
	#endif
		)
	{
		ComputeHairLighting(InputParams, NodeDesc, CatData, HairCoverage, OutColor, OutColorSubPixel);
	#if USE_PREEXPOSURE
		OutColorSubPixel.rgb *= View.PreExposure;
	#endif
	}
#endif

	FScreenSpaceData ScreenSpaceData = GetScreenSpaceData(InputParams.ScreenUV);

	// Only light pixels marked as using deferred shading
	BRANCH if( ScreenSpaceData.GBuffer.ShadingModelID > 0 
#if USE_LIGHTING_CHANNELS
		&& (GetLightingChannelMask(InputParams.ScreenUV) & DeferredLightUniforms.LightingChannelMask)
#endif
		)
	{
		const float SceneDepth = CalcSceneDepth(InputParams.ScreenUV);
		const FDerivedParams DerivedParams = GetDerivedParams(InputParams, SceneDepth);

		FDeferredLightData LightData = SetupLightDataForStandardDeferred();

		float Dither = InterleavedGradientNoise(InputParams.PixelPos, View.StateFrameIndexMod8 );

		FRectTexture RectTexture = InitRectTexture(DeferredLightUniforms.SourceTexture);
		float SurfaceShadow = 1.0f;
		const float4 Radiance = GetDynamicLighting(DerivedParams.WorldPosition, DerivedParams.CameraVector, ScreenSpaceData.GBuffer, ScreenSpaceData.AmbientOcclusion, ScreenSpaceData.GBuffer.ShadingModelID, LightData, GetPerPixelLightAttenuation(InputParams.ScreenUV), Dither, uint2(InputParams.PixelPos), RectTexture, SurfaceShadow);
		const float  Attenuation = ComputeLightProfileMultiplier(DerivedParams.WorldPosition, DeferredLightUniforms.Position, -DeferredLightUniforms.Direction, DeferredLightUniforms.Tangent);

#if USE_HAIR_LIGHTING
		float OpaqueVisibility = 1.0f - HairCoverage;
		OutColor += LinearToPerceptual(Radiance * Attenuation) * OpaqueVisibility;
		OutColor  = PerceptualToLinear(OutColor);
#else
		OutColor += (Radiance * Attenuation);
#endif
	}
		
#if USE_PREEXPOSURE
		OutColor.rgb *= View.PreExposure;
#endif
}
