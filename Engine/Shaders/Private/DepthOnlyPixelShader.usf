// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	DepthOnlyPixelShader.hlsl: Depth-only pixel shader.
=============================================================================*/

#include "Common.ush"
#include "/Engine/Generated/Material.ush"
#include "/Engine/Generated/VertexFactory.ush"

#if OUTPUT_MOBILE_COLOR_VALUE
// used to write custom stencil values to color target
float MobileColorValue;
#endif

void Main(
#if !MATERIALBLENDING_SOLID || OUTPUT_PIXEL_DEPTH_OFFSET || OUTPUT_MOBILE_COLOR_VALUE
	in INPUT_POSITION_QUALIFIERS float4 SvPosition : SV_Position,
#endif

#if !MATERIALBLENDING_SOLID || OUTPUT_PIXEL_DEPTH_OFFSET
#if USE_WORLD_POSITION_EXCLUDING_SHADER_OFFSETS
	float3 PixelPositionExcludingWPO : TEXCOORD7,
#endif
	FVertexFactoryInterpolantsVSToPS FactoryInterpolants
	// float4 PixelPosition : TEXCOORD6 -- Not used currently
	OPTIONAL_IsFrontFace
	OPTIONAL_OutDepthConservative,
#endif
#if OUTPUT_MOBILE_COLOR_VALUE
	out half OutCustomDepth : SV_Target0,
	out half OutCustomStencil : SV_Target1
#else
	out float4 OutColor : SV_Target0
#endif
#if MATERIALBLENDING_MASKED_USING_COVERAGE
	, out uint OutCoverage : SV_Coverage
#endif
	)
{
#if !MATERIALBLENDING_SOLID || OUTPUT_PIXEL_DEPTH_OFFSET
	#if INSTANCED_STEREO
		ResolvedView = ResolveView(FactoryInterpolants.EyeIndex);
	#else
		ResolvedView = ResolveView();
	#endif

	FMaterialPixelParameters MaterialParameters = GetMaterialPixelParameters(FactoryInterpolants, SvPosition);
	FPixelMaterialInputs PixelMaterialInputs;

	#if USE_WORLD_POSITION_EXCLUDING_SHADER_OFFSETS
		float4 ScreenPosition = SvPositionToResolvedScreenPosition(SvPosition);
		float3 TranslatedWorldPosition = SvPositionToResolvedTranslatedWorld(SvPosition);
		CalcMaterialParametersEx(MaterialParameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, PixelPositionExcludingWPO);	
	#else
		CalcMaterialParameters(MaterialParameters, PixelMaterialInputs, SvPosition, bIsFrontFace);
	#endif

	#if OUTPUT_PIXEL_DEPTH_OFFSET
		#if ALLOW_DEBUG_VIEW_MODES
		OutDepth = SvPosition.z;
		if (!ResolvedView.DebugViewModeMask)
		#endif
		{
			ApplyPixelDepthOffsetToMaterialParameters(MaterialParameters, PixelMaterialInputs, OutDepth);
		}
	#endif

	#if MATERIALBLENDING_TRANSLUCENT
		clip(GetMaterialOpacity(PixelMaterialInputs) - GetMaterialOpacityMaskClipValue());
	#elif MATERIALBLENDING_MASKED_USING_COVERAGE
		OutCoverage = DiscardMaterialWithPixelCoverage(MaterialParameters, PixelMaterialInputs);
	#else
		GetMaterialCoverageAndClipping(MaterialParameters, PixelMaterialInputs);
	#endif
#endif

#if OUTPUT_MOBILE_COLOR_VALUE
	OutCustomDepth = min(SvPosition.w, 65500);
	OutCustomStencil = MobileColorValue;
#else
	OutColor = 0;
#endif
}
