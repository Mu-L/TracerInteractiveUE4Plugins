#pragma once

#define DEBUG_GPU_RENDERING 1

#if DEBUG_GPU_RENDERING

#define COLOR_RED		0
#define COLOR_GREEN		1
#define COLOR_BLUE		2
#define COLOR_YELLOW	3
#define COLOR_WHITE		4

// TODO abstract/add binding configuration based on define 
// Note: for pixel shader, UAV are in the output space, if one RT is bound, first available UAV is 1
RWTexture2D<uint>	OutputDebugPrimitiveCount	: register(u1);
RWTexture2D<float4>	OutputDebugPrimitive		: register(u2);

static bool	bGpuDebugEnable					= false;
static const uint MaxDebugPrimitiveCount	= 1024;		// Match GpuDebugRednering.cpp :: AllocateGpuDebugPrimitiveBuffers()

void SetGpuDebugEnable(bool Value) 	{ bGpuDebugEnable = Value; }
bool IsGpuDebugEnable() 			{ return bGpuDebugEnable; }

void AddLine(float3 StartPoint, float3 EndPoint, uint Color)
{
	uint Entry = -2;
    InterlockedAdd(OutputDebugPrimitiveCount[uint2(0, 0)], 2, Entry);
	if (Entry < MaxDebugPrimitiveCount+2)
    {
		OutputDebugPrimitive[uint2(Entry + 0, 0)] = float4(StartPoint, Color);
		OutputDebugPrimitive[uint2(Entry + 1, 0)] = float4(EndPoint, Color);
    }
}

void AddQuad(float3 P0, float3 P1, float3 P2, float3 P3, uint Color)
{
	uint Entry = -2;
    InterlockedAdd(OutputDebugPrimitiveCount[uint2(0, 0)], 8, Entry);
	if (Entry < MaxDebugPrimitiveCount+8)
    {
		OutputDebugPrimitive[uint2(Entry + 0, 0)] = float4(P0, Color);
		OutputDebugPrimitive[uint2(Entry + 1, 0)] = float4(P1, Color);
		OutputDebugPrimitive[uint2(Entry + 2, 0)] = float4(P1, Color);
		OutputDebugPrimitive[uint2(Entry + 3, 0)] = float4(P2, Color);
		OutputDebugPrimitive[uint2(Entry + 4, 0)] = float4(P2, Color);
		OutputDebugPrimitive[uint2(Entry + 5, 0)] = float4(P3, Color);
		OutputDebugPrimitive[uint2(Entry + 6, 0)] = float4(P3, Color);
		OutputDebugPrimitive[uint2(Entry + 7, 0)] = float4(P0, Color);
    }
}

void AddCross(float3 Center, float Size, uint Color)
{
	uint Entry = -2;
    InterlockedAdd(OutputDebugPrimitiveCount[uint2(0, 0)], 6, Entry);
	if (Entry < MaxDebugPrimitiveCount+6)
    {
		OutputDebugPrimitive[uint2(Entry + 0, 0)] = float4(Center+float3(-Size,0,0), Color);
		OutputDebugPrimitive[uint2(Entry + 1, 0)] = float4(Center+float3( Size,0,0), Color);

		OutputDebugPrimitive[uint2(Entry + 2, 0)] = float4(Center+float3(0,-Size,0), Color);
		OutputDebugPrimitive[uint2(Entry + 3, 0)] = float4(Center+float3(0, Size,0), Color);

		OutputDebugPrimitive[uint2(Entry + 4, 0)] = float4(Center+float3(0,0,-Size), Color);
		OutputDebugPrimitive[uint2(Entry + 5, 0)] = float4(Center+float3(0,0, Size), Color);
    }
}

#endif