// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	GpuSkinCacheComputeShader.usf: Perform vertex skinning into a buffer to avoid skinning in the vertex shader.
=============================================================================*/

#include "Common.ush"
#include "Definitions.usf"
#include "SceneData.ush"
#include "VertexFactoryCommon.ush"
#include "GpuSkinCommon.ush"

// 0/1 setup by CPU
// #define GPUSKIN_APEX_CLOTH

// 0/1 setup by CPU
// #define GPUSKIN_MORPH_BLEND

// Set to 1 to enable passing through values from vertex buffer (ie do not skin)
#define GPUSKIN_DEBUG_PASSTHROUGH	0

#define FBoneMatrix float3x4

STRONG_TYPE Buffer<float4> BoneMatrices;

#if GPUSKIN_MORPH_BLEND
// float3 DeltaPosition, PackedNormal, see FMorphGPUSkinVertex
STRONG_TYPE Buffer<float> MorphBuffer;
// data offset to start indexing the data in MorphBuffer, in float units
uint MorphBufferOffset;
	
void GetMorphBuffer(uint VertexIndex, out float3 DeltaPosition, out half3 DeltaTangentZ)
 {
	// see CPU code: "check(MorphStride == sizeof(float) * 6);"
	// in floats
	// 3 + 3 floats because of the format defined in InitMorphVertexFactoryComponents / FMorphGPUSkinVertex
	uint Offset = VertexIndex * (3 + 3);

	DeltaPosition = float3(
		MorphBuffer[Offset + 0],
		MorphBuffer[Offset + 1],
		MorphBuffer[Offset + 2]);

	DeltaTangentZ = float3(
		MorphBuffer[Offset + 3],
		MorphBuffer[Offset + 4],
		MorphBuffer[Offset + 5]);
}
#endif
#if GPUSKIN_APEX_CLOTH
Buffer<float4> ClothBuffer;
Buffer<float2> ClothPositionsAndNormalsBuffer;
uint ClothBufferOffset;
float ClothBlendWeight;
float4x4 ClothLocalToWorld;
float4x4 ClothWorldToLocal;

void GetClothBuffer(uint VertexIndex, out float4 PositionBaryCoordsAndDist, out float4 NormalBaryCoordsAndDist, out float4 TangentBaryCoordsAndDist, out uint4 SourceMeshVertIndices)
{
    uint Offset = VertexIndex * 4;

    PositionBaryCoordsAndDist = ClothBuffer[Offset];
    NormalBaryCoordsAndDist = ClothBuffer[Offset + 1];
    TangentBaryCoordsAndDist = ClothBuffer[Offset + 2];

	uint4 PackedIndices = asuint(ClothBuffer[Offset + 3]);
    SourceMeshVertIndices.yw = (PackedIndices.xy >> 16) & 0xffff;
    SourceMeshVertIndices.xz = PackedIndices.xy & 0xffff;
}
#endif

struct FVertexUnpacked
{
	float4	TangentX;
	float4	TangentZ;

	int4	BlendIndices;
#if GPUSKIN_USE_EXTRA_INFLUENCES
	int4	BlendIndices2;
#endif
	float4	BlendWeights;
#if GPUSKIN_USE_EXTRA_INFLUENCES
	float4	BlendWeights2;
#endif

#if GPUSKIN_MORPH_BLEND
	// morph target, added to the Position
	float3	DeltaPosition;
	// morph target, added to the TangentZ and then used to derive new TangentX and TangentY, -2..2
	half3	DeltaTangentZ;
#endif

#if GPUSKIN_APEX_CLOTH
    float4  PositionBaryCoordsAndDist;
    float4  NormalBaryCoordsAndDist;
    float4  TangentBaryCoordsAndDist;
    uint4   SourceMeshVertIndices;
#endif
};

struct FVertexFactoryIntermediates
{
	// Blend Matrix (used for position/tangents)
	FBoneMatrix BlendMatrix;

	// Unpacked position (includes DeltaPosition if GPUSKIN_MORPH_BLEND)
	float3 UnpackedPosition;
	
	// Tangent Basis (includes DeltaTangentZ if GPUSKIN_MORPH_BLEND)
	float3x3 TangentToLocal; 

	// Vertex Color
	float4 Color;

#if GPUSKIN_APEX_CLOTH
    float3 SimulatedPosition;
#endif

};

FBoneMatrix CalcBoneMatrix( FVertexUnpacked VertexUnpacked )
{
	FBoneMatrix BoneMatrix = VertexUnpacked.BlendWeights.x * FBoneMatrix(BoneMatrices[VertexUnpacked.BlendIndices.x*3], BoneMatrices[VertexUnpacked.BlendIndices.x*3+1], BoneMatrices[VertexUnpacked.BlendIndices.x*3+2]);
	BoneMatrix += VertexUnpacked.BlendWeights.y * FBoneMatrix(BoneMatrices[VertexUnpacked.BlendIndices.y*3], BoneMatrices[VertexUnpacked.BlendIndices.y*3+1], BoneMatrices[VertexUnpacked.BlendIndices.y*3+2]);
	BoneMatrix += VertexUnpacked.BlendWeights.z * FBoneMatrix(BoneMatrices[VertexUnpacked.BlendIndices.z*3], BoneMatrices[VertexUnpacked.BlendIndices.z*3+1], BoneMatrices[VertexUnpacked.BlendIndices.z*3+2]);
	BoneMatrix += VertexUnpacked.BlendWeights.w * FBoneMatrix(BoneMatrices[VertexUnpacked.BlendIndices.w*3], BoneMatrices[VertexUnpacked.BlendIndices.w*3+1], BoneMatrices[VertexUnpacked.BlendIndices.w*3+2]);
#if GPUSKIN_USE_EXTRA_INFLUENCES
	BoneMatrix += VertexUnpacked.BlendWeights2.x * FBoneMatrix(BoneMatrices[VertexUnpacked.BlendIndices2.x*3], BoneMatrices[VertexUnpacked.BlendIndices2.x*3+1], BoneMatrices[VertexUnpacked.BlendIndices2.x*3+2]);
	BoneMatrix += VertexUnpacked.BlendWeights2.y * FBoneMatrix(BoneMatrices[VertexUnpacked.BlendIndices2.y*3], BoneMatrices[VertexUnpacked.BlendIndices2.y*3+1], BoneMatrices[VertexUnpacked.BlendIndices2.y*3+2]);
	BoneMatrix += VertexUnpacked.BlendWeights2.z * FBoneMatrix(BoneMatrices[VertexUnpacked.BlendIndices2.z*3], BoneMatrices[VertexUnpacked.BlendIndices2.z*3+1], BoneMatrices[VertexUnpacked.BlendIndices2.z*3+2]);
	BoneMatrix += VertexUnpacked.BlendWeights2.w * FBoneMatrix(BoneMatrices[VertexUnpacked.BlendIndices2.w*3], BoneMatrices[VertexUnpacked.BlendIndices2.w*3+1], BoneMatrices[VertexUnpacked.BlendIndices2.w*3+2]);
#endif
	return BoneMatrix;
}

Buffer<SNORM float4> TangentInputBuffer;
RWBuffer<SNORM float4> TangentBufferUAV;
Buffer<float> PositionInputBuffer;
RWBuffer<float> PositionBufferUAV;

uint InputStreamStart;
uint SkinCacheStart;
uint NumVertices;

uint InputWeightStart;
uint InputWeightStride;
Buffer<uint> InputWeightStream;

// see r.SkinCache.Debug, default is 1.0f
float SkinCacheDebug;

FVertexUnpacked UnpackedVertex(uint MorphIndex, uint ClothIndex, uint VertexIndex, uint WeightOffset )
{
	FVertexUnpacked Unpacked;

	Unpacked.TangentX = TangentBias_SkinCache(TangentInputBuffer[2 * VertexIndex + GPUSKIN_VB_OFFSET_TANGENT_X]);
	Unpacked.TangentZ = TangentBias_SkinCache(TangentInputBuffer[2 * VertexIndex + GPUSKIN_VB_OFFSET_TANGENT_Z]);

	uint BlendIndices = InputWeightStream[WeightOffset + GPUSKIN_VB_OFFSET_INFLUENCEBONES];
	Unpacked.BlendIndices.x = BlendIndices & 0xff;
	Unpacked.BlendIndices.y = BlendIndices >> 8 & 0xff;
	Unpacked.BlendIndices.z = BlendIndices >> 16 & 0xff;
	Unpacked.BlendIndices.w = BlendIndices >> 24 & 0xff;
#if GPUSKIN_USE_EXTRA_INFLUENCES
	BlendIndices = InputWeightStream[WeightOffset + GPUSKIN_VB_OFFSET_INFLUENCEBONES + 1];
	Unpacked.BlendIndices2.x = BlendIndices & 0xff;
	Unpacked.BlendIndices2.y = BlendIndices >> 8 & 0xff;
	Unpacked.BlendIndices2.z = BlendIndices >> 16 & 0xff;
	Unpacked.BlendIndices2.w = BlendIndices >> 24 & 0xff;
#endif
	uint BlendWeights = InputWeightStream[WeightOffset + GPUSKIN_VB_OFFSET_INFLUENCEWEIGHTS];
	Unpacked.BlendWeights.x = float(BlendWeights & 0xff) / 255.0f;
	Unpacked.BlendWeights.y = float(BlendWeights >> 8 & 0xff) / 255.0f;
	Unpacked.BlendWeights.z = float(BlendWeights >> 16 & 0xff) / 255.0f;
	Unpacked.BlendWeights.w = float(BlendWeights >> 24 & 0xff) / 255.0f;
#if GPUSKIN_USE_EXTRA_INFLUENCES
	BlendWeights = InputWeightStream[WeightOffset + GPUSKIN_VB_OFFSET_INFLUENCEWEIGHTS + 1];
	Unpacked.BlendWeights2.x = float(BlendWeights & 0xff) / 255.0f;
	Unpacked.BlendWeights2.y = float(BlendWeights >> 8 & 0xff) / 255.0f;
	Unpacked.BlendWeights2.z = float(BlendWeights >> 16 & 0xff) / 255.0f;
	Unpacked.BlendWeights2.w = float(BlendWeights >> 24 & 0xff) / 255.0f;
#endif
#if GPUSKIN_MORPH_BLEND
	GetMorphBuffer(MorphIndex, Unpacked.DeltaPosition, Unpacked.DeltaTangentZ);
#endif
#if GPUSKIN_APEX_CLOTH
    GetClothBuffer(ClothIndex, Unpacked.PositionBaryCoordsAndDist, Unpacked.NormalBaryCoordsAndDist, Unpacked.TangentBaryCoordsAndDist, Unpacked.SourceMeshVertIndices);
#endif
	return Unpacked;
}

/** transform position by weighted sum of skinning matrices */
float3 SkinPosition( FVertexFactoryIntermediates Intermediates )
{
	float4 Position = float4(Intermediates.UnpackedPosition,1);

	// Note the use of mul(Matrix,Vector), bone matrices are stored transposed
	// for tighter packing.
	return mul( Intermediates.BlendMatrix, Position );
}

[numthreads(64,1,1)]
void SkinCacheUpdateBatchCS(uint3 GroupID : SV_GroupID,
 uint3 DispatchThreadID : SV_DispatchThreadID,
 uint3 GroupThreadID : SV_GroupThreadID)
{
	uint VertexIndex = DispatchThreadID.x;
		if (VertexIndex >= NumVertices)
	{
		return;
	}

	// Find offset for regular (position/tangent/UV) vertex buffer
	uint InputOffset = InputStreamStart + VertexIndex;
	uint OutputOffset = SkinCacheStart + VertexIndex;

	// Find offset for skin weight buffer
	uint WeightOffset = InputWeightStart + (VertexIndex * (InputWeightStride/4));

#if GPUSKIN_MORPH_BLEND
#if GPUSKIN_APEX_CLOTH
	FVertexUnpacked	Unpacked = UnpackedVertex(MorphBufferOffset + VertexIndex, ClothBufferOffset + VertexIndex, InputOffset, WeightOffset);
#else
	FVertexUnpacked	Unpacked = UnpackedVertex(MorphBufferOffset + VertexIndex, VertexIndex, InputOffset, WeightOffset);
#endif
#else
#if GPUSKIN_APEX_CLOTH
	FVertexUnpacked	Unpacked = UnpackedVertex(VertexIndex, ClothBufferOffset + VertexIndex, InputOffset, WeightOffset);
#else
	FVertexUnpacked	Unpacked = UnpackedVertex(VertexIndex, VertexIndex, InputOffset, WeightOffset);
#endif
#endif

	// Perform the skinning
	FVertexFactoryIntermediates	Intermediates = (FVertexFactoryIntermediates)0;
	
#if 1
	Intermediates.BlendMatrix = CalcBoneMatrix(Unpacked);
#else
	// Test no blend mtx
	Intermediates.BlendMatrix[0] = float4(1,0,0,0);
	Intermediates.BlendMatrix[1] = float4(0,1,0,0);
	Intermediates.BlendMatrix[2] = float4(0,0,1,0);
#endif

	Intermediates.UnpackedPosition.x = PositionInputBuffer[InputOffset * 3 + 0];
	Intermediates.UnpackedPosition.y = PositionInputBuffer[InputOffset * 3 + 1];
	Intermediates.UnpackedPosition.z = PositionInputBuffer[InputOffset * 3 + 2];

	float3 LocalTangentX = Unpacked.TangentX.xyz;
	float3 LocalTangentZ = Unpacked.TangentZ.xyz;

#if GPUSKIN_MORPH_BLEND
	{
		Intermediates.UnpackedPosition += Unpacked.DeltaPosition;

		// calc new normal by offseting it with the delta
		LocalTangentZ = normalize( LocalTangentZ + Unpacked.DeltaTangentZ);
		// derive the new tangent by orthonormalizing the new normal against
		// the base tangent vector (assuming these are normalized)
		LocalTangentX = normalize( LocalTangentX - (dot(LocalTangentX, LocalTangentZ) * LocalTangentZ) );
	}
#else
#if GPUSKIN_APEX_CLOTH
    float3 ClothTangentX;
    float3 ClothTangentZ;
	float TempClothBlendWeight = 0.0f;
	if( Unpacked.SourceMeshVertIndices.w < 0xFFFF )
	{ 
		TempClothBlendWeight = ClothBlendWeight;

		float3 A = float3(ClothPositionsAndNormalsBuffer[Unpacked.SourceMeshVertIndices.x * 3], ClothPositionsAndNormalsBuffer[Unpacked.SourceMeshVertIndices.x * 3 + 1].x);
		float3 B = float3(ClothPositionsAndNormalsBuffer[Unpacked.SourceMeshVertIndices.y * 3], ClothPositionsAndNormalsBuffer[Unpacked.SourceMeshVertIndices.y * 3 + 1].x);
		float3 C = float3(ClothPositionsAndNormalsBuffer[Unpacked.SourceMeshVertIndices.z * 3], ClothPositionsAndNormalsBuffer[Unpacked.SourceMeshVertIndices.z * 3 + 1].x);

		float3 NA = float3(ClothPositionsAndNormalsBuffer[Unpacked.SourceMeshVertIndices.x * 3 + 1].y, ClothPositionsAndNormalsBuffer[Unpacked.SourceMeshVertIndices.x * 3 + 2]);
		float3 NB = float3(ClothPositionsAndNormalsBuffer[Unpacked.SourceMeshVertIndices.y * 3 + 1].y, ClothPositionsAndNormalsBuffer[Unpacked.SourceMeshVertIndices.y * 3 + 2]);
		float3 NC = float3(ClothPositionsAndNormalsBuffer[Unpacked.SourceMeshVertIndices.z * 3 + 1].y, ClothPositionsAndNormalsBuffer[Unpacked.SourceMeshVertIndices.z * 3 + 2]);

		float3 NormalPosition = Unpacked.NormalBaryCoordsAndDist.x*(A+NA*Unpacked.NormalBaryCoordsAndDist.w)
								+ Unpacked.NormalBaryCoordsAndDist.y*(B+NB*Unpacked.NormalBaryCoordsAndDist.w)
								+ Unpacked.NormalBaryCoordsAndDist.z*(C+NC*Unpacked.NormalBaryCoordsAndDist.w);

		float3 TangentPosition = Unpacked.TangentBaryCoordsAndDist.x*(A+NA*Unpacked.TangentBaryCoordsAndDist.w)
								+ Unpacked.TangentBaryCoordsAndDist.y*(B+NB*Unpacked.TangentBaryCoordsAndDist.w)
								+ Unpacked.TangentBaryCoordsAndDist.z*(C+NC*Unpacked.TangentBaryCoordsAndDist.w);

	    Intermediates.SimulatedPosition = Unpacked.PositionBaryCoordsAndDist.x*(A+NA*Unpacked.PositionBaryCoordsAndDist.w)
					             + Unpacked.PositionBaryCoordsAndDist.y*(B+NB*Unpacked.PositionBaryCoordsAndDist.w)
					             + Unpacked.PositionBaryCoordsAndDist.z*(C+NC*Unpacked.PositionBaryCoordsAndDist.w);

		ClothTangentX = normalize(TangentPosition - Intermediates.SimulatedPosition);
		ClothTangentZ = normalize(NormalPosition - Intermediates.SimulatedPosition);

		// cloth data are all in world space so need to change into local space
		ClothTangentX = mul(ClothTangentX, (half3x3)ClothWorldToLocal);
		ClothTangentZ = mul(ClothTangentZ, (half3x3)ClothWorldToLocal);
	}
#endif // GPUSKIN_APEX_CLOTH
#endif // GPUSKIN_MORPH_BLEND

	float3 SPos = SkinPosition(Intermediates) * SkinCacheDebug;

#if GPUSKIN_APEX_CLOTH
    float4 TransformedSkinPos = mul(float4(SPos, 1), ClothLocalToWorld);
    float3 BlendedPos = lerp(TransformedSkinPos.xyz, Intermediates.SimulatedPosition, TempClothBlendWeight);
    SPos = mul(float4(BlendedPos, 1), ClothWorldToLocal).xyz;
#endif

	float3 TangentX = normalize(mul((float3x3)Intermediates.BlendMatrix, LocalTangentX));
	float3 TangentZ = normalize(mul((float3x3)Intermediates.BlendMatrix, LocalTangentZ));
	
#if GPUSKIN_APEX_CLOTH
    TangentX = ClothTangentX * TempClothBlendWeight + TangentX * (1.0f - TempClothBlendWeight);
    TangentZ = ClothTangentZ * TempClothBlendWeight + TangentZ * (1.0f - TempClothBlendWeight);
#endif

	PositionBufferUAV[OutputOffset * 3 + 0] = SPos.x;
	PositionBufferUAV[OutputOffset * 3 + 1] = SPos.y;
	PositionBufferUAV[OutputOffset * 3 + 2] = SPos.z;

	TangentBufferUAV[2 * OutputOffset + GPUSKIN_RWBUFFER_OFFSET_TANGENT_X] = TangentUnbias_SkinCache(float4(TangentX, Unpacked.TangentX.w));
	TangentBufferUAV[2 * OutputOffset + GPUSKIN_RWBUFFER_OFFSET_TANGENT_Z] = TangentUnbias_SkinCache(float4(TangentZ, Unpacked.TangentZ.w));

#if GPUSKIN_DEBUG_PASSTHROUGH
	// Passthrough debug code
	PositionBufferUAV[OutputOffset * 3 + 0] = PositionInputBuffer[InputOffset * 3 + 0];
	PositionBufferUAV[OutputOffset * 3 + 1] = PositionInputBuffer[InputOffset * 3 + 1];
	PositionBufferUAV[OutputOffset * 3 + 2] = PositionInputBuffer[InputOffset * 3 + 2];
	TangentBufferUAV[2 * OutputOffset + GPUSKIN_RWBUFFER_OFFSET_TANGENT_X] = TangentInputBuffer[2 * InputOffset + GPUSKIN_VB_OFFSET_TANGENT_X];
	TangentBufferUAV[2 * OutputOffset + GPUSKIN_RWBUFFER_OFFSET_TANGENT_Z] = TangentInputBuffer[2 * InputOffset + GPUSKIN_VB_OFFSET_TANGENT_Z];
#endif
}
