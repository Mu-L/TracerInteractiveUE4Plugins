// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

#include "../Common.ush"
#include "../ShaderPrintCommon.ush"
#include "HairStrandsVisibilityCommon.ush"

int2 PixelCoord;
int2 MaxResolution;
uint FastResolveMask;
uint2 GroupSize; 

Texture2D<uint4> CategorizationTexture;
Texture2D<uint2> DepthStencilTexture;
SamplerState LinearSampler;
Texture2D<uint> HairVisibilityNodeOffsetAndCount;
StructuredBuffer<FNodeData> HairVisibilityNodeData;

#define MATERIAL_DATA 0
#define DETAIL_DATA 0

float3 HUEtoRGB(in float H)
{
	float R = abs(H * 6 - 3) - 1;
	float G = 2 - abs(H * 6 - 2);
	float B = 2 - abs(H * 6 - 4);
	return saturate(float3(R, G, B));
}

float3 HSVtoRGB(in float3 HSV)
{
	float3 RGB = HUEtoRGB(HSV.x);
	return ((RGB - 1) * HSV.y + 1) * HSV.z;
}

float3 GetColorCode(float x)
{
	float c = (1 - saturate(x)) * 0.6; // Remap [0,1] to Blue-Red
	return x > 0 ? HSVtoRGB(float3(c, 1, 1)) : float3(0, 0, 0);
}

[numthreads(1, 1, 1)]
void MainCS(uint GroupIndex : SV_GroupIndex, uint3 DispatchThreadId : SV_DispatchThreadID)
{	
	const float2 PixelPos = PixelCoord;
	if (PixelCoord.x < 0 || PixelCoord.y < 0 || PixelCoord.x >= MaxResolution.x || PixelCoord.y >= MaxResolution.y)
		return;

	ShaderPrintFilter(true);

	const FCategorizationData CatData = DecodeCategorizationData(CategorizationTexture.Load(uint3(PixelPos,0)));
	const bool bIsValid = CatData.PixelCoverage > 0;
	if (!bIsValid)
		return;

	const float2 OriginalPos = PixelPos / float2(MaxResolution);
	float2 Pos = OriginalPos;

	uint Total8BitCoverage = 0;
	const FNodeDesc NodeDesc = DecodeNodeDesc(HairVisibilityNodeOffsetAndCount.Load(uint3(PixelCoord, 0)));
	for (uint SampleIt = 0; SampleIt < NodeDesc.Count; SampleIt++)
	{
		const uint LocalOffset = NodeDesc.Offset + SampleIt;
		const FNodeData NodeData = HairVisibilityNodeData[LocalOffset];
		float			SampleDepth;
		FVisibilityData SampleVisData;
		float3			SampleBaseColor;
		float			SampleRoughness;
		float			SampleSpecular;
		DecodeNodeData(NodeData, SampleDepth, SampleVisData, SampleBaseColor, SampleRoughness, SampleSpecular);
		Total8BitCoverage += SampleVisData.Coverage8bit;
	}

	// Pixel coord
	Pos = ShaderPrintSymbol(Pos, _P_);
	Pos = ShaderPrintSymbol(Pos, _I_);
	Pos = ShaderPrintSymbol(Pos, _X_);
	Pos = ShaderPrintSymbol(Pos, _E_);
	Pos = ShaderPrintSymbol(Pos, _L_);
	Pos = ShaderPrintSymbol(Pos, _SPC_);
	Pos = ShaderPrint(Pos, PixelCoord);

	Pos = ShaderPrintNewline(Pos);
	Pos.x = OriginalPos.x;

#if MATERIAL_DATA
	// Dispatch thread id
	Pos = ShaderPrintSymbol(Pos, _T_);
	Pos = ShaderPrintSymbol(Pos, _H_);
	Pos = ShaderPrintSymbol(Pos, _R_);
	Pos = ShaderPrintSymbol(Pos, _E_);
	Pos = ShaderPrintSymbol(Pos, _A_);
	Pos = ShaderPrintSymbol(Pos, _D_);
	Pos = ShaderPrintSymbol(Pos, _SPC_);
	Pos = ShaderPrintSymbol(Pos, _I_);
	Pos = ShaderPrintSymbol(Pos, _D_);
	Pos = ShaderPrintSymbol(Pos, _SPC_);
	Pos = ShaderPrint(Pos, uint4(PixelCoord.x/GroupSize.x, PixelCoord.x % GroupSize.x, PixelCoord.y / GroupSize.y, PixelCoord.y % GroupSize.y));

	Pos = ShaderPrintNewline(Pos);
	Pos.x = OriginalPos.x;
#endif

	// Max sample
	Pos = ShaderPrintSymbol(Pos, _M_);
	Pos = ShaderPrintSymbol(Pos, _A_);
	Pos = ShaderPrintSymbol(Pos, _X_);
	Pos = ShaderPrintSymbol(Pos, _SPC_);
	Pos = ShaderPrintSymbol(Pos, _S_);
	Pos = ShaderPrintSymbol(Pos, _A_);
	Pos = ShaderPrintSymbol(Pos, _M_);
	Pos = ShaderPrintSymbol(Pos, _P_);
	Pos = ShaderPrintSymbol(Pos, _L_);
	Pos = ShaderPrintSymbol(Pos, _E_);
	Pos = ShaderPrintSymbol(Pos, _SPC_);
	Pos = ShaderPrint(Pos, uint(HAIR_VISIBILITY_MAXSAMPLECOUNT));

	Pos = ShaderPrintNewline(Pos);
	Pos.x = OriginalPos.x;

	// Unique sample
	Pos = ShaderPrintSymbol(Pos, _S_);
	Pos = ShaderPrintSymbol(Pos, _A_);
	Pos = ShaderPrintSymbol(Pos, _M_);
	Pos = ShaderPrintSymbol(Pos, _P_);
	Pos = ShaderPrintSymbol(Pos, _L_);
	Pos = ShaderPrintSymbol(Pos, _E_);
	Pos = ShaderPrintSymbol(Pos, _SPC_);
	Pos = ShaderPrint(Pos, CatData.SampleCount);

	Pos = ShaderPrintNewline(Pos);
	Pos.x = OriginalPos.x;

	// Accurate coverage (if coverage pass is activated)
	Pos = ShaderPrintSymbol(Pos, _C_);
	Pos = ShaderPrintSymbol(Pos, _O_);
	Pos = ShaderPrintSymbol(Pos, _V_);
	Pos = ShaderPrintSymbol(Pos, _E_);
	Pos = ShaderPrintSymbol(Pos, _R_);
	Pos = ShaderPrintSymbol(Pos, _A_);
	Pos = ShaderPrintSymbol(Pos, _G_);
	Pos = ShaderPrintSymbol(Pos, _E_);
	Pos = ShaderPrintSymbol(Pos, _SPC_);
	Pos = ShaderPrint(Pos, CatData.PixelCoverage);

	Pos = ShaderPrintNewline(Pos);
	Pos.x = OriginalPos.x;

	// 8 bit Coverage (cateogory texture)
	Pos = ShaderPrintSymbol(Pos, _C_);
	Pos = ShaderPrintSymbol(Pos, _O_);
	Pos = ShaderPrintSymbol(Pos, _V_);
	Pos = ShaderPrintSymbol(Pos, _E_);
	Pos = ShaderPrintSymbol(Pos, _R_);
	Pos = ShaderPrintSymbol(Pos, _A_);
	Pos = ShaderPrintSymbol(Pos, _G_);
	Pos = ShaderPrintSymbol(Pos, _E_);
	Pos = ShaderPrintSymbol(Pos, _SPC_);
	Pos = ShaderPrintSymbol(Pos, _8_); 
	Pos = ShaderPrintSymbol(Pos, _B_);
	Pos = ShaderPrintSymbol(Pos, _I_);
	Pos = ShaderPrintSymbol(Pos, _T_);
	Pos = ShaderPrintSymbol(Pos, _S_);
	Pos = ShaderPrintSymbol(Pos, _SPC_);
	Pos = ShaderPrint(Pos, CatData.TotalCoverage8bit);
	Pos = ShaderPrint(Pos, CatData.TotalCoverage8bit / 255.f);
	
	Pos = ShaderPrintNewline(Pos);
	Pos.x = OriginalPos.x;

	// 8 bit Coverage (summed)
	Pos = ShaderPrintSymbol(Pos, _S_);
	Pos = ShaderPrintSymbol(Pos, _U_);
	Pos = ShaderPrintSymbol(Pos, _M_);
	Pos = ShaderPrintSymbol(Pos, _M_);
	Pos = ShaderPrintSymbol(Pos, _E_);
	Pos = ShaderPrintSymbol(Pos, _D_);
	Pos = ShaderPrintSymbol(Pos, _SPC_);
	Pos = ShaderPrintSymbol(Pos, _C_);
	Pos = ShaderPrintSymbol(Pos, _O_);
	Pos = ShaderPrintSymbol(Pos, _V_);
	Pos = ShaderPrintSymbol(Pos, _E_);
	Pos = ShaderPrintSymbol(Pos, _R_);
	Pos = ShaderPrintSymbol(Pos, _A_);
	Pos = ShaderPrintSymbol(Pos, _G_);
	Pos = ShaderPrintSymbol(Pos, _E_);
	Pos = ShaderPrintSymbol(Pos, _SPC_);
	Pos = ShaderPrintSymbol(Pos, _8_); 
	Pos = ShaderPrintSymbol(Pos, _B_);
	Pos = ShaderPrintSymbol(Pos, _I_);
	Pos = ShaderPrintSymbol(Pos, _T_);
	Pos = ShaderPrintSymbol(Pos, _S_);
	Pos = ShaderPrintSymbol(Pos, _SPC_);
	Pos = ShaderPrint(Pos, Total8BitCoverage);

	Pos = ShaderPrintNewline(Pos);
	Pos.x = OriginalPos.x;

	// Resolve type
	const uint Stencil = DepthStencilTexture.Load(uint3(PixelPos,0)).y;
	const bool bIsFastResolve = (Stencil & FastResolveMask) != 0;
	Pos = ShaderPrintSymbol(Pos, _R_);
	Pos = ShaderPrintSymbol(Pos, _E_);
	Pos = ShaderPrintSymbol(Pos, _S_);
	Pos = ShaderPrintSymbol(Pos, _O_);
	Pos = ShaderPrintSymbol(Pos, _L_);
	Pos = ShaderPrintSymbol(Pos, _V_);
	Pos = ShaderPrintSymbol(Pos, _E_);
	Pos = ShaderPrintSymbol(Pos, _SPC_);
	if (bIsFastResolve)
	{
		Pos = ShaderPrintSymbol(Pos, _F_);
		Pos = ShaderPrintSymbol(Pos, _A_);
		Pos = ShaderPrintSymbol(Pos, _S_);
		Pos = ShaderPrintSymbol(Pos, _T_);
	}
	else
	{
		Pos = ShaderPrintSymbol(Pos, _R_);
		Pos = ShaderPrintSymbol(Pos, _E_);
		Pos = ShaderPrintSymbol(Pos, _G_);
		Pos = ShaderPrintSymbol(Pos, _U_);
		Pos = ShaderPrintSymbol(Pos, _L_);
		Pos = ShaderPrintSymbol(Pos, _A_);
		Pos = ShaderPrintSymbol(Pos, _R_);
	}

	Pos = ShaderPrintNewline(Pos);
	Pos.x = OriginalPos.x;

	// Per sample description
	for (uint SampleIt = 0; SampleIt < NodeDesc.Count; SampleIt++)
	{
		const uint LocalOffset = NodeDesc.Offset + SampleIt;
		const FNodeData NodeData = HairVisibilityNodeData[LocalOffset];
		float			SampleDepth;
		FVisibilityData SampleVisData;
		float3			SampleBaseColor;
		float			SampleRoughness;
		float			SampleSpecular;
		DecodeNodeData(NodeData, SampleDepth, SampleVisData, SampleBaseColor, SampleRoughness, SampleSpecular);

		// Base Color
		Pos = ShaderPrintSymbol(Pos, _MINUS_);
		Pos = ShaderPrintSymbol(Pos, _MINUS_);
		Pos = ShaderPrintSymbol(Pos, _MINUS_);
		Pos = ShaderPrintSymbol(Pos, _MINUS_);
		Pos = ShaderPrintSymbol(Pos, _MINUS_);
		Pos = ShaderPrintSymbol(Pos, _MINUS_);
		Pos = ShaderPrintSymbol(Pos, _MINUS_);
		Pos = ShaderPrintSymbol(Pos, _MINUS_);
		Pos = ShaderPrintSymbol(Pos, _MINUS_);
		Pos = ShaderPrintSymbol(Pos, _MINUS_);
		Pos = ShaderPrintSymbol(Pos, _MINUS_);
		Pos = ShaderPrintSymbol(Pos, _MINUS_);
		Pos = ShaderPrintSymbol(Pos, _MINUS_);
		Pos = ShaderPrintSymbol(Pos, _MINUS_);
		Pos = ShaderPrintSymbol(Pos, _MINUS_);
		Pos = ShaderPrintSymbol(Pos, _MINUS_);
		Pos = ShaderPrintSymbol(Pos, _MINUS_);
		Pos = ShaderPrintSymbol(Pos, _MINUS_);
		Pos = ShaderPrintSymbol(Pos, _MINUS_);
		Pos = ShaderPrintSymbol(Pos, _MINUS_);

		Pos = ShaderPrintNewline(Pos);
		Pos.x = OriginalPos.x;

#if MATERIAL_DATA
		// Base Color
		Pos = ShaderPrintSymbol(Pos, _DOT_);
		Pos = ShaderPrintSymbol(Pos, _B_);
		Pos = ShaderPrintSymbol(Pos, _A_);
		Pos = ShaderPrintSymbol(Pos, _S_);
		Pos = ShaderPrintSymbol(Pos, _E_);
		Pos = ShaderPrintSymbol(Pos, _SPC_);
		Pos = ShaderPrintSymbol(Pos, _C_);
		Pos = ShaderPrintSymbol(Pos, _O_);
		Pos = ShaderPrintSymbol(Pos, _L_);
		Pos = ShaderPrintSymbol(Pos, _O_);
		Pos = ShaderPrintSymbol(Pos, _R_);
		Pos = ShaderPrintSymbol(Pos, _SPC_);
		Pos = ShaderPrint(Pos, SampleBaseColor);
		
		Pos = ShaderPrintNewline(Pos);
		Pos.x = OriginalPos.x;

		// Roughness
		Pos = ShaderPrintSymbol(Pos, _DOT_);
		Pos = ShaderPrintSymbol(Pos, _R_);
		Pos = ShaderPrintSymbol(Pos, _O_);
		Pos = ShaderPrintSymbol(Pos, _U_);
		Pos = ShaderPrintSymbol(Pos, _G_);
		Pos = ShaderPrintSymbol(Pos, _H_);
		Pos = ShaderPrintSymbol(Pos, _N_);
		Pos = ShaderPrintSymbol(Pos, _E_);
		Pos = ShaderPrintSymbol(Pos, _S_);
		Pos = ShaderPrintSymbol(Pos, _S_);
		Pos = ShaderPrintSymbol(Pos, _SPC_);
		Pos = ShaderPrint(Pos, SampleRoughness);

		Pos = ShaderPrintNewline(Pos);
		Pos.x = OriginalPos.x;


		// Tangent
		Pos = ShaderPrintSymbol(Pos, _DOT_);
		Pos = ShaderPrintSymbol(Pos, _T_);
		Pos = ShaderPrintSymbol(Pos, _A_);
		Pos = ShaderPrintSymbol(Pos, _N_);
		Pos = ShaderPrintSymbol(Pos, _G_);
		Pos = ShaderPrintSymbol(Pos, _E_);
		Pos = ShaderPrintSymbol(Pos, _N_);
		Pos = ShaderPrintSymbol(Pos, _T_);
		Pos = ShaderPrintSymbol(Pos, _SPC_);
		Pos = ShaderPrint(Pos, SampleVisData.Tangent);

		Pos = ShaderPrintNewline(Pos);
		Pos.x = OriginalPos.x;
#endif 

#if DETAIL_DATA
		// PrimitiveId
		Pos = ShaderPrintSymbol(Pos, _DOT_);
		Pos = ShaderPrintSymbol(Pos, _P_);
		Pos = ShaderPrintSymbol(Pos, _R_);
		Pos = ShaderPrintSymbol(Pos, _I_);
		Pos = ShaderPrintSymbol(Pos, _M_);
		Pos = ShaderPrintSymbol(Pos, _I_);
		Pos = ShaderPrintSymbol(Pos, _T_);
		Pos = ShaderPrintSymbol(Pos, _I_);
		Pos = ShaderPrintSymbol(Pos, _V_);
		Pos = ShaderPrintSymbol(Pos, _E_);
		Pos = ShaderPrintSymbol(Pos, _SPC_);
		Pos = ShaderPrint(Pos, SampleVisData.PrimitiveId);

		Pos = ShaderPrintNewline(Pos);
		Pos.x = OriginalPos.x;

		// ClusterId
		Pos = ShaderPrintSymbol(Pos, _DOT_);
		Pos = ShaderPrintSymbol(Pos, _C_);
		Pos = ShaderPrintSymbol(Pos, _L_);
		Pos = ShaderPrintSymbol(Pos, _U_);
		Pos = ShaderPrintSymbol(Pos, _S_);
		Pos = ShaderPrintSymbol(Pos, _T_);
		Pos = ShaderPrintSymbol(Pos, _E_);
		Pos = ShaderPrintSymbol(Pos, _R_);
		Pos = ShaderPrintSymbol(Pos, _SPC_);
		Pos = ShaderPrintSymbol(Pos, _I_);
		Pos = ShaderPrintSymbol(Pos, _D_);
		Pos = ShaderPrintSymbol(Pos, _SPC_);
		Pos = ShaderPrint(Pos, SampleVisData.ClusterId);

		Pos = ShaderPrintNewline(Pos);
		Pos.x = OriginalPos.x;		
#endif

		// Coverage8bit
		Pos = ShaderPrintSymbol(Pos, _DOT_);
		Pos = ShaderPrintSymbol(Pos, _C_);
		Pos = ShaderPrintSymbol(Pos, _O_);
		Pos = ShaderPrintSymbol(Pos, _V_);
		Pos = ShaderPrintSymbol(Pos, _E_);
		Pos = ShaderPrintSymbol(Pos, _R_);
		Pos = ShaderPrintSymbol(Pos, _A_);
		Pos = ShaderPrintSymbol(Pos, _G_);
		Pos = ShaderPrintSymbol(Pos, _E_);
		Pos = ShaderPrintSymbol(Pos, _SPC_);
		Pos = ShaderPrint(Pos, SampleVisData.Coverage8bit);

		Pos = ShaderPrintNewline(Pos);
		Pos.x = OriginalPos.x;
	}
}
