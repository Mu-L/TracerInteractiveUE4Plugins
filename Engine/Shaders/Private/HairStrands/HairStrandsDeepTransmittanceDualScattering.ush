// Copyright Epic Games, Inc. All Rights Reserved.

#ifndef HAIR_COMPONENT_LS
	#error HAIR_COMPONENT_LS is not defined, please include ShadingCommon.ush
#endif

#ifndef HAIR_COMPONENT_GS
	#error HAIR_COMPONENT_GS is not defined, please include ShadingCommon.ush
#endif

float Hair_g2(float B,float Theta)
{
	#if 0
	return Hair_g(B,Theta);
	#else
	// Unnormalized Gaussian
	return exp( -0.5 * Pow2( Theta ) / (B*B) );
	#endif
}

// Dual scattering computation are done here for faster iteration (i.e., does not invalidate tons of shaders)
void ComputeDualScatteringTerms(
	const FHairTransmittanceData TransmittanceData,
	const float Roughness,
	const float Backlit,
	const float3 V,
	const float3 L,
	const float3 T,
	const uint HairComponents,
	inout float3 OutGlobalScattering,
	inout float3 OutLocalScattering)
{
	const float SinThetaL = clamp(dot(T, L), -1, 1);
	const float SinThetaV = clamp(dot(T, V), -1, 1);

	const float MaxAverageScatteringValue = 0.99f;

	// Straight implementation of the dual scattering paper 
    const float3 af	 = min(MaxAverageScatteringValue.xxx, TransmittanceData.A_front);
	const float3 af2 = Pow2(af);
	const float3 ab  = min(MaxAverageScatteringValue.xxx, TransmittanceData.A_back);
	const float3 ab2 = Pow2(ab);
    const float3 OneMinusAf2 = 1 - af2;

	const float3 A1 = ab * af2 / OneMinusAf2;
	const float3 A3 = ab * ab2 * af2 / (OneMinusAf2*Pow2(OneMinusAf2));
	const float3 Ab = A1 + A3;

	// todo_hair: Should use the average roughness after k scattering event instead of the BSDF roughness
	const float Beta_R	 = Pow2( Roughness );
	const float Beta_TT	 = Pow2( Roughness / 2 ); 
	const float Beta_TRT = Pow2( Roughness * 2 ); 

	const float Shift     = 0.035;
	const float Shift_R   =-0.035*2;
	const float Shift_TT  = 0.035;
	const float Shift_TRT = 0.035*4;

	// Average density factor (This is the constant used in the original paper)
	const float df = 0.7f;
	const float db = 0.7f;

	// This is a coarse approximation of eq. 13. Normally, Beta_f should be weighted by the 'normalized' 
	// R, TT, and TRT terms 
	const float3 af_weights = af / (af.r + af.g + af.b);
    const float3 Beta_f  = dot(float3(Beta_R, Beta_TT, Beta_TRT), af_weights);
	const float3 Beta_f2 = Beta_f*Beta_f;
    const float3 sigma_f = Beta_f * max(1, TransmittanceData.HairCount);

    const float Theta_h = (asin(SinThetaL) + asin(SinThetaV)) * 0.5f;

	// Global scattering spread 'Sf'
	// It is unclear if this is correct to use a normalized Gaussian as in the original paper, as with an increase 
	// number of hair count the Gaussian will become more and more spread, and have less and less contribution. 
	// This is correct from an energy point of view, as long as the scattering is integrated over multiple scattering 
	// event, which is not our case here.
	// This is why there is a non-normalized Gaussian version in case this does not fly properly with regular 
	// normalized Gaussian
	// const float3 Sf = 1;
	// const float3 Sf = Hair_g_unnormalized(sigma_f, Theta_h) / PI; 
    float3 Sf = float3(	Hair_g2(sigma_f.r, Theta_h), 
						Hair_g2(sigma_f.g, Theta_h), 
						Hair_g2(sigma_f.b, Theta_h)) / PI;
	const float3 Tf = TransmittanceData.Transmittance;

	// Overall shift due to the various local scatteing event (all shift & roughnesss should vary with color)
	//const float3 shift_f = 0.33f * (Shift_R + Shift_TT + Shift_TRT);
    const float3 shift_f = dot(float3(Shift_R, Shift_TT, Shift_TRT), af_weights);
	const float3 shift_b = shift_f;
    const float3 delta_b = 0; //shift_b * (1 - 2*ab2 / Pow2(1 - af2)) * shift_f * (2 * Pow2(1 - af2) + 4*af2*ab2)/Pow3(1-af2);

	const float3 ab_weights = ab / (ab.r + ab.g + ab.b);
	const float3 Beta_b  = dot(float3(Beta_R, Beta_TT, Beta_TRT), ab_weights);
	const float3 Beta_b2 = Beta_f2;

    const float3 sigma_b = (1 + db*af2) * (ab*sqrt(2*Beta_f2 + Beta_b2) + ab*ab2*sqrt(2*Beta_f2 + Beta_b2)) / (ab + ab*ab2*(2*Beta_f + 3*Beta_b));

	// Local scattering Spread 'Sb'
    float3 Sb = float3(	Hair_g2(Pow2(sigma_b.r), Theta_h - delta_b.r),
						Hair_g2(Pow2(sigma_b.g), Theta_h - delta_b.g),
						Hair_g2(Pow2(sigma_b.b), Theta_h - delta_b.b))  / PI;

	// Override the spread function to cancel them
	//Sf = 1;
	//Sb = 1;

    // Different variant for managing sefl-occlusion issue for global scattering
	const bool bIsOccluded = TransmittanceData.HairCount > 0;
	const float3 GlobalScattering = bIsOccluded ? Tf * Sf * df : 1;
	//const float3 GlobalScattering = TransmittanceData.HairCount >= 1 ? Tf * Sf * df : 1;
    //const float3 GlobalScattering = lerp(1, Tf * Sf * df, saturate(TransmittanceData.HairCount));
	//const float3 GlobalScattering = Tf * Sf * df;

	const float Attenuation = lerp(1, Backlit, saturate(-dot(V,L)));

	const float3 LocalScattering  = 2 * Ab * Sb * db * Attenuation;
	
	// Decode if the Local/Global component should be enabled or not (for debug purpose)
	const float LocalWeights  = (HairComponents & HAIR_COMPONENT_LS) > 0 ? 1 : 0;

	OutGlobalScattering = (HairComponents & HAIR_COMPONENT_GS) > 0 ? GlobalScattering : 1;
	OutLocalScattering  = LocalScattering * LocalWeights;

	// Final computation is done in ShadingModels.ush with the following formula
	// GlobalScattering * (Fs + LocalScattering) * TransmittanceData.OpaqueVisibility;
}
	
FHairTransmittanceData GetHairTransmittance(
	const float3 V,
	const float3 L,
	FGBufferData GBuffer,
	FHairTransmittanceMask TransmittanceMask,
	Texture3D<float4> HairLUTTexture,
	SamplerState HairLUTSampler,
	const uint HairComponents)
{
	FHairTransmittanceData TransmittanceData = InitHairTransmittanceData();
	TransmittanceData.Transmittance = TransmittanceMask.Transmittance;
	TransmittanceData.HairCount = TransmittanceMask.HairCount;
	TransmittanceData.GlobalScattering = 1;
	TransmittanceData.LocalScattering = 0;
	TransmittanceData.ScatteringComponent = HairComponents | HAIR_COMPONENT_MULTISCATTER;
	TransmittanceData.OpaqueVisibility = TransmittanceMask.Visibility;

	// Hack: Override the actual roughness, with a different value to achieve a specific look
	const float Roughness = GBuffer.CustomData.x > 0 ? GBuffer.CustomData.x : GBuffer.Roughness;
	const float Backlit = GBuffer.CustomData.z;

	const float3 T = GBuffer.WorldNormal;
	{
		const float SinLightAngle = dot(L, T);

		// Compute the transmittance based on precompute Hair transmittance LUT
		HairAverageScattering AverageScattering = SampleHairLUT(HairLUTTexture, HairLUTSampler, GBuffer.BaseColor, Roughness, SinLightAngle);
		TransmittanceData.A_front = AverageScattering.A_front;
		TransmittanceData.A_back = AverageScattering.A_back;
	}

	ComputeDualScatteringTerms(
		TransmittanceData,
		Roughness,
		Backlit,
		V,
		L,
		T,
		HairComponents,
		TransmittanceData.GlobalScattering,
		TransmittanceData.LocalScattering);

	return TransmittanceData;
}

FHairTransmittanceData GetHairTransmittance(
	const float3 V,
	const float3 L,
	FGBufferData GBuffer,
	const uint SampleOffset,
	const uint HairTransmittanceBufferMaxCount,
	StructuredBuffer<FPackedHairTransmittanceMask> HairTransmittanceBuffer,
	Texture3D<float4> HairLUTTexture,
	SamplerState HairLUTSampler,
	const uint HairComponents)
{
	FHairTransmittanceMask TransmittanceMask = InitHairTransmittanceMask();
	if (SampleOffset < HairTransmittanceBufferMaxCount)
	{
		const FPackedHairTransmittanceMask Packed = HairTransmittanceBuffer[SampleOffset];
		TransmittanceMask = UnpackTransmittanceMask(Packed);
	}
	return GetHairTransmittance(
		V,
		L,
		GBuffer,
		TransmittanceMask,
		HairLUTTexture,
		HairLUTSampler,
		HairComponents);
}
