// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

float3 GetHairVoxelJitter(uint2 PixelCoord, uint Seed)
{
	return float3(
		InterleavedGradientNoise(PixelCoord.xy, Seed),
		InterleavedGradientNoise(PixelCoord.xy, Seed * 117),
		InterleavedGradientNoise(PixelCoord.xy, Seed * 7901));
}

float GetHairVoxelDensity(uint3 VolumeCoord, Texture3D<uint> InDensityTexture, uint Mip=0)
{
	const float VoxelFixPointScale = GetVoxelDensityFixPointScale();
	return InDensityTexture.Load(int4(VolumeCoord, Mip)) / VoxelFixPointScale;
}

bool IsInVoxelBounds(float3 P, float3 MinP, float3 MaxP)
{
	return
		P.x >= MinP.x && P.y >= MinP.y && P.z >= MinP.z &&
		P.x <= MaxP.x && P.y <= MaxP.y && P.z <= MaxP.z;
}

float ComputeHairCountVoxel(
	float3 WorldPosition, 
	float3 LightDirection, 
	float3 InVoxelAABBMin, 
	float3 InVoxelAABBMax, 
	float InVoxelResolution, 
	Texture3D<uint> InDensityTexture, 
	float DensityScale, 
	float CountThreshold,
	float DistanceThreshold)
{
	float OutHairCount = 0;

	const float3 VolumeBoundSize = InVoxelAABBMax - InVoxelAABBMin;
	const float3 VolumeBoundSizeInv = 1.0f / (InVoxelAABBMax - InVoxelAABBMin);
	const float VoxelWorldSize = VolumeBoundSize.x / InVoxelResolution;				// Only using voxel size along x for now...

	const float VoxelShadowMaxDistance = 100000.0; // 1 km shadow distance
	const float3 IntersectEndPoint = WorldPosition + LightDirection * VoxelShadowMaxDistance;
	const float2 HitT = LineBoxIntersect(WorldPosition, IntersectEndPoint, InVoxelAABBMin, InVoxelAABBMax);
	if (HitT.x < HitT.y)
	{
		// Count the number of fibers which are within a cylinder defined by the voxel size, 
		// and the distance between the origin and the extent of the volume
		// This assumes that the voxel volume is cubic (i.e. equal dimensions on all sides)
		float3 O = lerp(WorldPosition, IntersectEndPoint, HitT.xxx);
		float3 E = lerp(WorldPosition, IntersectEndPoint, HitT.yyy);
		const float OELength = min(length(E - O), DistanceThreshold);

		// Step according to voxel size
		const float StepCount = float(min(ceil(OELength / VoxelWorldSize), 256u));	// TO TRY: sample with fixed count budget and jitter temporally
		LightDirection *= VoxelWorldSize;

		for (float StepIt = 0.0f; StepIt < StepCount; ++StepIt)
		{
			const float3 HitP = O + StepIt * LightDirection;
			const float3 UVW = (HitP - InVoxelAABBMin) * VolumeBoundSizeInv;
			const int3 VolumeCoord = clamp(int3(UVW * InVoxelResolution), int3(0, 0, 0), int3(InVoxelResolution.xxx-1));
			const float Density = GetHairVoxelDensity(VolumeCoord, InDensityTexture) * DensityScale;
			OutHairCount += Density;
			if (CountThreshold != 0 && OutHairCount > CountThreshold)
				return OutHairCount;
		}
	}

	return OutHairCount;
}

float ComputeHairCountVoxelCone(
	float3 WorldPosition,
	float3 LightDirection,
	float3 InVoxelAABBMin,
	float3 InVoxelAABBMax,
	float InVoxelResolution,
	Texture3D<uint> InDensityTexture,
	float InVoxelDensityScale,
	float CountThreshold,
	float DistanceThreshold,
	float TanConeAngle)
{
	// Reverse-Z
	const float ConservativeAABBDiagonal = (InVoxelAABBMax.x - InVoxelAABBMin.x) * 3;
	const float3 O = WorldPosition;
	const float3 E = O + LightDirection * ConservativeAABBDiagonal;
	const float3 D = E - O;

	float OutHairCount = 0;

	// The rest of the code assumes O is within the AABB
	const bool bIsInAABB = IsInVoxelBounds(O, InVoxelAABBMin, InVoxelAABBMax);
	if (!bIsInAABB)
		return OutHairCount;

	const float2 HitT = LineBoxIntersect(O, E, InVoxelAABBMin, InVoxelAABBMax);
	if (HitT.x < HitT.y)
	{
		const float VolumeSize = (InVoxelAABBMax.x - InVoxelAABBMin.x);
		const float VoxelSize = VolumeSize / InVoxelResolution;

		// Count the number of fibers which are within a cylinder defined by the voxel size, 
		// and the distance between the origin and the extent of the volume
		// This assumes that the voxel volume is cubic (i.e. equal dimensions on all sides)
		const float DistanceThreshold2 = DistanceThreshold * DistanceThreshold;
		const float Distance = min(DistanceThreshold, length(HitT.y * D));
		const uint MaxStepCount = min(ceil(Distance / VoxelSize), 256u);
		float T = 0;
		float MipLevel = 0;
		float MipDensityScale = 1;
		for (uint StepIt = 0; StepIt < MaxStepCount; ++StepIt)
		{
			float3 StepOffset = 0;

			const float3 RaymarchOffset = T * LightDirection;
			const float3 HitP = O + RaymarchOffset + StepOffset;
			const float3 UVW = (HitP - InVoxelAABBMin) / (InVoxelAABBMax - InVoxelAABBMin);

			const float Distance2 = dot(RaymarchOffset, RaymarchOffset);
			if (Distance2 > DistanceThreshold2)
				return OutHairCount;

			if (!IsInVoxelBounds(UVW, 0, 1))
				return OutHairCount;

			const uint MipVoxelResolution = uint(InVoxelResolution) >> uint(MipLevel);
			const int3 VolumeCoord = clamp(int3(UVW * MipVoxelResolution), int3(0, 0, 0), int3(MipVoxelResolution.xxx - 1));
			const float Density = GetHairVoxelDensity(VolumeCoord, InDensityTexture, MipLevel) * InVoxelDensityScale * MipDensityScale;

			OutHairCount += Density;
			if (CountThreshold != 0 && OutHairCount > CountThreshold)
				return OutHairCount;

			const float VoxelRadius = T * TanConeAngle;
			const float NumVoxel = VolumeSize / max(2 * VoxelRadius, VoxelSize);

			const float ResolutionBias = InVoxelResolution / NumVoxel;
			float MipBias = log2(max(0.5f, ResolutionBias));
			MipBias = floor(MipBias);
			MipLevel = MipBias;

			const float MipVoxelSize = VoxelSize * (MipLevel + 1);
			{
				MipDensityScale = VoxelSize * rcp(MipVoxelSize);
				MipDensityScale = MipDensityScale * MipDensityScale * MipDensityScale;
			}
			T += MipVoxelSize;
		}
	}

	return OutHairCount;
}

float3 GetHairVoxelTangent(
	uint3 InVolumeCoord, 
	float InHairDensity,
	Texture3D<uint> InVoxelTangentXTexture,
	Texture3D<uint> InVoxelTangentYTexture,
	Texture3D<uint> InVoxelTangentZTexture)
{
	float3 T8Bits;
	T8Bits.x = InVoxelTangentXTexture.Load(int4(InVolumeCoord, 0));
	T8Bits.y = InVoxelTangentYTexture.Load(int4(InVolumeCoord, 0));
	T8Bits.z = InVoxelTangentZTexture.Load(int4(InVolumeCoord, 0));
	T8Bits /= InHairDensity;
	return From8bits(T8Bits);
}