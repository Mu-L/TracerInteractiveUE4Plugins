// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

#include "../Common.ush"
#include "HairStrandsMeshProjectionCommon.ush"

uint VertexCount;
uint DispatchCountX;
float3 InRenderHairPositionOffset;
float3 InSimHairPositionOffset;
float3 OutHairPositionOffset;
int2 HairStrandsCullIndex;

Buffer<uint4>  RenderRestPosePositionBuffer;
Buffer<uint4>  SimRestPosePositionBuffer;
Buffer<uint4>  DeformedSimPositionBuffer;
Buffer<uint4>  Interpolation0Buffer;
Buffer<uint4>  Interpolation1Buffer;

#if PERMUTATION_DYNAMIC_GEOMETRY == 1 || PERMUTATION_DEBUG == 2
Buffer<uint>   RenVertexToRootIndexBuffer;
Buffer<uint>   SimVertexToRootIndexBuffer;
#endif

RWBuffer<uint4> OutRenderDeformedPositionBuffer;

#if PERMUTATION_DYNAMIC_GEOMETRY == 1

// Compact all these buffers into 2 buffers: translation + quaternion
float3			RestPositionOffset;
Buffer<float4>  RestPosition0Buffer;
Buffer<float4>  RestPosition1Buffer;
Buffer<float4>  RestPosition2Buffer;

float3			DeformedPositionOffset;
Buffer<float4>  DeformedPosition0Buffer;
Buffer<float4>  DeformedPosition1Buffer;
Buffer<float4>  DeformedPosition2Buffer;

Buffer<uint>	RootBarycentricBuffer;
Buffer<uint>	RootToTriangleIndex;

float3			SimRestPositionOffset;
Buffer<float4>  SimRestPosition0Buffer;
Buffer<float4>  SimRestPosition1Buffer;
Buffer<float4>  SimRestPosition2Buffer;

float3			SimDeformedPositionOffset;
Buffer<float4>  SimDeformedPosition0Buffer;
Buffer<float4>  SimDeformedPosition1Buffer;
Buffer<float4>  SimDeformedPosition2Buffer;

Buffer<uint>	SimRootBarycentricBuffer;
Buffer<uint>	SimRootToTriangleIndex;
#endif

#if PERMUTATION_DEBUG == 1
Buffer<float4>	 SimAttributeBuffer;
RWBuffer<float4> OutRenderAttributeBuffer;
#endif

#if PERMUTATION_GROUP_SIZE == 0
	#define GROUP_SIZE 64
#elif PERMUTATION_GROUP_SIZE == 1
	#define GROUP_SIZE 32
#else
	#error Unknown group size	
#endif

float3 ComputeStaticGeometryOffset(uint GuideIndex, float GuideVertexWeight)
{	
	const float3 RestGuidePoint = f16tof32(SimRestPosePositionBuffer[GuideIndex].xyz) + InSimHairPositionOffset;

	const float3 DeformedGuidePoint = f16tof32(DeformedSimPositionBuffer[GuideIndex].xyz) + OutHairPositionOffset;
	return (DeformedGuidePoint - RestGuidePoint) * GuideVertexWeight;
}

float3 ComputeDynamicGeometryOffset(
	uint GuideIndex, 
	float GuideVertexWeight, 
	FHairMeshTriangle RestTriangle, 
	FHairMeshTriangle DeformedTriangle,
	float3 RootBarycentric)
{
	const float3 RestGuidePoint = f16tof32(SimRestPosePositionBuffer[GuideIndex].xyz) + InSimHairPositionOffset;
	const float3 LocalRestGuidePoint = ToTriangle(RestGuidePoint, RootBarycentric, RestTriangle);

	const float3 DeformedGuidePoint = f16tof32(DeformedSimPositionBuffer[GuideIndex].xyz) + OutHairPositionOffset;
	const float3 LocalDeformedGuidePoint = ToTriangle(DeformedGuidePoint, RootBarycentric, DeformedTriangle);

	return (LocalDeformedGuidePoint - LocalRestGuidePoint) * GuideVertexWeight;
}

[numthreads(GROUP_SIZE, 1, 1)]
void MainCS(uint2 DispatchThreadId : SV_DispatchThreadID)
{
	const uint VertexIndex = DispatchThreadId.x + DispatchThreadId.y * DispatchCountX * GROUP_SIZE;
	if (VertexIndex < VertexCount)
	{
		uint3 GuideVertexIndices = 0;
		float3 GuideVertexLerps = 0;
		float3 GuideVertexWeights = 0;
		#if PERMUTATION_SIMULATION == 1 || PERMUTATION_DEBUG == 1 || PERMUTATION_DEBUG == 2
		{
			const uint4 InterpolationData0	= Interpolation0Buffer[VertexIndex];
			const uint4 InterpolationData1	= Interpolation1Buffer[VertexIndex];

			GuideVertexIndices.x = InterpolationData0.x | ( (InterpolationData1.x & 0xFF) << 16);
			GuideVertexIndices.y = InterpolationData0.y | (((InterpolationData1.x >> 8) & 0xFF) << 16);
			GuideVertexIndices.z = InterpolationData0.z | ( (InterpolationData1.y & 0xFF) << 16);

			GuideVertexWeights   = float3(saturate((InterpolationData0.w & 0xFF) / 255.f), saturate(((InterpolationData0.w >> 8) & 0xFF) / 255.f), 0);
			GuideVertexWeights.z = saturate(1.0f - (GuideVertexWeights.x + GuideVertexWeights.y));

			GuideVertexLerps.x = saturate(((InterpolationData1.y >> 8) & 0xFF)/255.f);
			GuideVertexLerps.y = saturate(( InterpolationData1.z & 0xFF      )/255.f);
			GuideVertexLerps.z = saturate(((InterpolationData1.z >> 8) & 0xFF)/255.f);
		}
		#endif

		// 1. Rigid transformation
		// ControlPoint is in the local hair referential
		// CurrOffset takes only translation component into account, and is done in object local space (vs. triangle/hair local space)
		#if PERMUTATION_DYNAMIC_GEOMETRY == 0
		{
			float3 CurrOffset = 0;
			float3 ControlPoint = f16tof32(RenderRestPosePositionBuffer[VertexIndex].xyz) + InRenderHairPositionOffset;
			#if PERMUTATION_SIMULATION == 1
			[unroll]
			for (uint K = 0; K < 3; ++K)
			{
				const uint GuideIndex0 = GuideVertexIndices[K];
				const uint GuideIndex1 = GuideIndex0 + 1;

				const float3 Offset0 = ComputeStaticGeometryOffset(GuideIndex0, GuideVertexWeights[K]);
				const float3 Offset1 = ComputeStaticGeometryOffset(GuideIndex1, GuideVertexWeights[K]);

				CurrOffset += lerp(Offset0, Offset1, GuideVertexLerps[K]);
			}
			#endif
			OutRenderDeformedPositionBuffer[VertexIndex] = float4(f32tof16(ControlPoint + CurrOffset - OutHairPositionOffset), RenderRestPosePositionBuffer[VertexIndex].w);
		}
		#endif	

		// 2. Skin transformation
		// Apply dynamic mesh deformation (translation / rotation)
		#if PERMUTATION_DYNAMIC_GEOMETRY == 1
		{
			float3 ControlPoint = f16tof32(RenderRestPosePositionBuffer[VertexIndex].xyz) + InRenderHairPositionOffset;
			float3 CurrOffset = 0;

			// Compute the simulation offset in hair local space (i.e., triangle)
			#if PERMUTATION_SIMULATION == 1
			for (uint K = 0; K < 3; ++K)
			{
				const uint GuideIndex0 = GuideVertexIndices[K];
				const uint GuideIndex1 = GuideIndex0 + 1;

				const uint RootIndex = SimVertexToRootIndexBuffer[GuideIndex0];
				const float3 RootBarycentric = DecodeBarycentrics(SimRootBarycentricBuffer[RootIndex]);

				const FHairMeshTriangle RestTriangle		= GetTriangleTransformation(RootIndex, SimRestPosition0Buffer, SimRestPosition1Buffer, SimRestPosition2Buffer, SimRestPositionOffset);
				const FHairMeshTriangle DeformedTriangle	= GetTriangleTransformation(RootIndex, SimDeformedPosition0Buffer, SimDeformedPosition1Buffer, SimDeformedPosition2Buffer, SimDeformedPositionOffset);

				const float3 Offset0 = ComputeDynamicGeometryOffset(GuideIndex0, GuideVertexWeights[K], RestTriangle, DeformedTriangle, RootBarycentric);
				const float3 Offset1 = ComputeDynamicGeometryOffset(GuideIndex1, GuideVertexWeights[K], RestTriangle, DeformedTriangle, RootBarycentric);

				CurrOffset += VectorToWorld(lerp(Offset0, Offset1, GuideVertexLerps[K]),DeformedTriangle);
			}
			#endif		

			// Transform hair from rest post to deformed pose, based triangle deformation + simulation offset (optional depending of the simulation is actual running or not
			const uint RootIndex						= RenVertexToRootIndexBuffer[VertexIndex];
			const float3 RootBarycentric				= DecodeBarycentrics(RootBarycentricBuffer[RootIndex]);
			const FHairMeshTriangle RestTriangle		= GetTriangleTransformation(RootIndex, RestPosition0Buffer, RestPosition1Buffer, RestPosition2Buffer, RestPositionOffset);
			const FHairMeshTriangle DeformedTriangle	= GetTriangleTransformation(RootIndex, DeformedPosition0Buffer, DeformedPosition1Buffer, DeformedPosition2Buffer, DeformedPositionOffset);

			ControlPoint = ToTriangle(ControlPoint,RootBarycentric,RestTriangle);
			ControlPoint = ToWorld(ControlPoint,RootBarycentric,DeformedTriangle) + CurrOffset;

			OutRenderDeformedPositionBuffer[VertexIndex] = float4(f32tof16(ControlPoint - OutHairPositionOffset), RenderRestPosePositionBuffer[VertexIndex].w);

			// Debug
			#if 0
			{
				// Show the triangle normal use by hair fiber
				//ControlPoint = VertexIndex % 2 == 0 ? RestTriangle.P0 : RestTriangle.P0 + RestTriangle.N;

				// Measure the stretch of the projection (to identify if there any local transform issue during the projeciton steps
				ControlPoint = VertexIndex % 2 == 0 ? ControlPoint  : RestTriangle.P0;
			}
			#endif
		}
		#endif	

		#if PERMUTATION_DEBUG == 1
		{
			const uint GuideIndex = GuideVertexIndices[0]; // Take the closest guide
			const float4 GuideAttribute = SimAttributeBuffer[GuideIndex];
			OutRenderAttributeBuffer[VertexIndex] = GuideAttribute;
		}
		#endif

		// Cull hair strands or clusters which are not matching the provided index
		#if PERMUTATION_DEBUG == 2
		{
			bool bIsValid = false;
			if (HairStrandsCullIndex.y >= 0)
			{

				for (uint K = 0; K < 3; ++K)
				{
					const uint GuideIndex = GuideVertexIndices[K];
					const uint RootIndex = SimVertexToRootIndexBuffer[GuideIndex];
					if (HairStrandsCullIndex.y == RootIndex)
					{
						bIsValid = true;
						break;
					}
				}
			}
			else if (HairStrandsCullIndex.x >= 0)
			{
				const uint RootIndex = RenVertexToRootIndexBuffer[VertexIndex];
				bIsValid = HairStrandsCullIndex.x == RootIndex;
			}

			if (!bIsValid)
			{
				OutRenderDeformedPositionBuffer[VertexIndex] = float4(float3(1.#INF, 1.#INF, 1.#INF), 2);
			}
		}
		#endif
	}
}