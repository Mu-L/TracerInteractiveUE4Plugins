// Copyright Epic Games, Inc. All Rights Reserved.

#include "HairStrandsVisibilityCommon.ush" 

#define USE_FORCE_TEXTURE_MIP 1
#define FORCED_TEXTURE_MIP 0.0f
#include "../Common.ush"

#include "../SceneTexturesCommon.ush"
#include "HairStrandsDeepShadowCommon.ush"
#include "../DeferredShadingCommon.ush"
#include "../VelocityCommon.ush"

#include "/Engine/Generated/Material.ush"
#include "/Engine/Generated/VertexFactory.ush" 

#define SUPPORT_MATERIAL_PROPERTY 1
uint MaterialPass_MacroGroupId;
uint MaterialPass_MaterialId;  
uint MaterialPass_PrimitiveId;
uint MaterialPass_LightChannelMask;


#if VF_STRAND_HAIR
struct FEvaluateOutput
{
	FPackedHairSample NodeData;
	float2 NodeVelocity;
};

struct FHairVertexData
{
	float3 World_P;
	float3 World_P_Prev;
	float  Radius;
	bool   bIsValid;
};

FVertexFactoryInterpolantsVSToPS GetInterpolants(uint PrimitiveId, uint HairPrimitiveId, inout FHairVertexData OutHairVertex)
{
	FMaterialVertexParameters Empty = (FMaterialVertexParameters)0;

	FVertexFactoryInput Input;
	Input.PrimitiveId = PrimitiveId;
	Input.VertexId = HairPrimitiveId * 6; // 6: the vertex factory expect triangles list index. A quad is made of two triangles with indices: 0,1,2,3,4,5.

	FVertexFactoryIntermediates	Intermediates = GetVertexFactoryIntermediates(Input);
	FVertexFactoryInterpolantsVSToPS Interpolants = VertexFactoryGetInterpolantsVSToPS(Input, Intermediates, Empty);

	OutHairVertex.World_P = VertexFactoryGetWorldPositionRaw(Input, Intermediates, false).xyz;
	OutHairVertex.World_P_Prev = VertexFactoryGetPreviousWorldPosition(Input, Intermediates, false).xyz;

	const FHairControlPoint ControlPoint = GetVertexPosition(Input, false);
	OutHairVertex.Radius = ControlPoint.WorldRadius;
	OutHairVertex.bIsValid = ControlPoint.Type != HAIR_CONTROLPOINT_END;

	return Interpolants;
}

FEvaluateOutput Evaluate(
	in float2 SamplePixelCoord,
	in float SampleDepth,
	in uint SamplePrimitiveId,
	in uint SampleCoverage8bit,
	in uint PrimitiveId)
{
	// World_P / World_P0 / World_P1 are in translated world space
	const float SceneDepth = ConvertFromDeviceZ(SampleDepth);
	const float2 UV = SamplePixelCoord / float2(View.BufferSizeAndInvSize.xy);
	const float2 ScreenPosition = (UV - View.ScreenPositionScaleBias.wz) / View.ScreenPositionScaleBias.xy;
	const float3 World_P = mul(float4(ScreenPosition * SceneDepth, SceneDepth, 1), View.ScreenToTranslatedWorld).xyz;

	float3 Velocity_World_P;
	float3 Velocity_World_P_Prev;
	float U = 0;
	float WorldStrandRadius = 0;
	FVertexFactoryInterpolantsVSToPS Interpolants;
	{
		const uint HairPrimitiveId0 = SamplePrimitiveId;
		const uint HairPrimitiveId1 = HairPrimitiveId0 + 1; //TODO: min(HairPrimitiveId0 + 1, MaxVertexCount-1);

		FHairVertexData Vertex0;
		FHairVertexData Vertex1;

		FVertexFactoryInterpolantsVSToPS Interpolants0 = GetInterpolants(PrimitiveId, HairPrimitiveId0, Vertex0);
		FVertexFactoryInterpolantsVSToPS Interpolants1 = GetInterpolants(PrimitiveId, HairPrimitiveId1, Vertex1);

		Interpolants = Interpolants0;

		// Compute U
		// Use the projection of the current sample point onto the hair segment (which is in the middle of the hair strands)
		const float3 A = (World_P  - Vertex0.World_P);
		const float3 B = (Vertex1.World_P - Vertex0.World_P);
		const float CosA = dot(A, B);
		const float LengthB2 = dot(B, B);
		const float SegmentU = LengthB2 > 0 ? saturate(CosA / LengthB2) : 0;

		// Compute V
		float SegmentV = 0.5f;
		{
			const float3 W = cross(A, B);
			const bool bIsRight = dot(W, View.ViewForward) < 0;
			const float WorldV	= length(A - B * SegmentU);
			WorldStrandRadius	= lerp(Vertex0.Radius, Vertex1.Radius, SegmentU);
			SegmentV = WorldV / WorldStrandRadius;
			SegmentV = bIsRight ? SegmentV * 0.5f + 0.5f : (1 - SegmentV) * 0.5f;
		}

		Velocity_World_P	  = lerp(Vertex0.World_P, Vertex1.World_P, SegmentU);
		Velocity_World_P_Prev = lerp(Vertex0.World_P_Prev, Vertex1.World_P_Prev, SegmentU);

		Interpolants.TangentToWorld0 = lerp(Interpolants0.TangentToWorld0, Interpolants1.TangentToWorld0, SegmentU);
		Interpolants.TangentToWorld2 = lerp(Interpolants0.TangentToWorld2, Interpolants1.TangentToWorld2, SegmentU);

		Interpolants.TangentToWorld0 = normalize(Interpolants.TangentToWorld0);
		Interpolants.TangentToWorld2 = normalize(Interpolants.TangentToWorld2);

		Interpolants.PrimitiveId	 = PrimitiveId;
		Interpolants.HairPrimitiveId = HairPrimitiveId0;
		Interpolants.HairPrimitiveUV = float2(SegmentU, SegmentV);
	}
	

	#if 1
	float2 EncodedVelocity = 0;
	{
		const float4 ScreenPos		= mul(float4(Velocity_World_P.xyz, 1), ResolvedView.TranslatedWorldToClip);
		const float4 PrevScreenPos	= mul(float4(Velocity_World_P_Prev.xyz, 1), ResolvedView.PrevTranslatedWorldToClip);

		const float2 Velocity	= Calculate2DVelocity(ScreenPos, PrevScreenPos);
		EncodedVelocity			= EncodeVelocityToTexture(Velocity);
	}
	#endif

	// Sample Position < consider to be the center??
	// VS
	const float4 SvPosition = float4(SamplePixelCoord, SampleDepth, 1);

	// Coverage computation
	// We don't use the coverage information
	float Coverage = 1;
	if (MaterialPassParameters.bUpdateSampleCoverage)
	{
		const bool bUseStableRasterization = UseStableRasterization();

		FHairRenderInfo HairRenderInfo = GetHairRenderInfo(ResolvedView.HairRenderInfo, ResolvedView.HairRenderInfoBits, bUseStableRasterization);
		const float SceneDepth = ConvertFromDeviceZ(SvPosition.z); // Linear depth in world unit
		const float PixelRadius = HairRenderInfo.bIsOrthoView ? HairRenderInfo.RadiusAtDepth1Primary : SceneDepth * HairRenderInfo.RadiusAtDepth1Primary; // Not correct but the coverage is not used (we count instead the number of sub-sample covered)
		const float StrandRealRadius = WorldStrandRadius;
		Coverage = StrandRealRadius / max(StrandRealRadius, PixelRadius);

		SampleCoverage8bit = min(uint(Coverage * 0xFF), 0xFF);
	}

	// expressed the coverage relatively to the current pixel coverage?

	// PS
	FHairSample OutSample		= (FHairSample)0;
	OutSample.Depth				= SampleDepth;
	OutSample.Coverage8bit		= SampleCoverage8bit;
	OutSample.PrimitiveId		= SamplePrimitiveId;
	OutSample.MacroGroupId		= MaterialPass_MacroGroupId;
	OutSample.LightChannelMask	= MaterialPass_LightChannelMask;
	OutSample.bScatterSceneLighting = UseScatterSceneLighting();

	// Material computation
	{
		const bool bIsFrontFace = true;
		FMaterialPixelParameters MaterialParameters = GetMaterialPixelParameters(Interpolants, SvPosition);
		FPixelMaterialInputs PixelMaterialInputs;

		float4 ScreenPosition = SvPositionToResolvedScreenPosition(SvPosition);
		float3 TranslatedWorldPosition = SvPositionToResolvedTranslatedWorld(SvPosition);
		CalcMaterialParametersEx(MaterialParameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);

		OutSample.BaseColor = GetMaterialBaseColor(PixelMaterialInputs);
		OutSample.Roughness = GetMaterialRoughness(PixelMaterialInputs);
		OutSample.Specular = GetMaterialSpecular(PixelMaterialInputs);
		OutSample.Backlit = saturate(GetMaterialCustomData0(MaterialParameters));

		OutSample.Tangent = mul(normalize(GetMaterialNormalRaw(PixelMaterialInputs)), MaterialParameters.TangentToWorld);
		OutSample.Tangent = normalize(OutSample.Tangent);
	}

	FEvaluateOutput Out;
	Out.NodeData	 = PackHairSample(OutSample);
	Out.NodeVelocity = EncodedVelocity;
	return Out;
}
#endif

void Main(
	in float4 SvPosition: SV_Position
	, in uint2 Resolution : DISPATCH_RESOLUTION
	, out float4 OutColor0 : SV_Target0)
{
	ResolvedView = ResolveView();

	const uint3 PixelCoord = uint3(floor(SvPosition.xy), 0);
	const uint SampleIndex = PixelCoord.x + PixelCoord.y * Resolution.x;// MaterialPassParameters.MaxResolution.x;
	bool bIsValid = false;
	if (SampleIndex < MaterialPassParameters.MaxSampleCount)
	{
		const FNodeVis InNode = MaterialPassParameters.NodeVis.Load(SampleIndex);
		
		const uint PackedSamplePixelCoord = MaterialPassParameters.NodeCoord[SampleIndex];
		const float2 SamplePixelCoord = float2(PackedSamplePixelCoord & 0xFFFF, (PackedSamplePixelCoord>>16) & 0xFFFF) + float2(0.5f, 0.5f);

		float SampleDepth = InNode.Depth;
		uint SampleCoverage8bit = InNode.Coverage8bit;
		uint SamplePrimitiveId = InNode.PrimitiveId;
		uint SampleMaterialId = InNode.MaterialId;

		if (SampleMaterialId == MaterialPass_MaterialId)
		{
			FEvaluateOutput Out = Evaluate(SamplePixelCoord, SampleDepth, SamplePrimitiveId, SampleCoverage8bit, MaterialPass_PrimitiveId);
			MaterialPassParameters.OutNodeData[SampleIndex] = Out.NodeData;
			MaterialPassParameters.OutNodeVelocity[SampleIndex] = Out.NodeVelocity;

			bIsValid = true;
		}
	}

	OutColor0 = bIsValid? float4(0, 1, 0, 1) : float4(1, 0, 0, 1);
}


