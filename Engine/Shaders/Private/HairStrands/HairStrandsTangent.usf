// Copyright Epic Games, Inc. All Rights Reserved.

#include "../Common.ush"

uint VertexCount;
uint DispatchCountX;

Buffer<uint4>  	 PositionBuffer;
RWBuffer<float4> OutputTangentBuffer;

#if PERMUTATION_GROUP_SIZE == 0
	#define GROUP_SIZE 64
#elif PERMUTATION_GROUP_SIZE == 1
	#define GROUP_SIZE 32
#else
	#error Unknown group size	
#endif

float4 PackNormal(float3 V, uint A)
{
	return float4(clamp(V,float(-1).xxx,float(1).xxx), 1.0f);
}

[numthreads(GROUP_SIZE, 1, 1)]
void MainCS(uint2 DispatchThreadId : SV_DispatchThreadID)
{
	const int IndexCurr = DispatchThreadId.x + DispatchThreadId.y * DispatchCountX * GROUP_SIZE;
	const int MaxVertexCount = int(VertexCount);
	if (IndexCurr < MaxVertexCount)
	{
		const int IndexPrev = clamp(IndexCurr-1, 0, MaxVertexCount-1);
		const int IndexNext = clamp(IndexCurr+1, 0, MaxVertexCount-1);

		const uint4 DataCurr = PositionBuffer[IndexCurr];
		const uint4 DataPrev = PositionBuffer[IndexPrev];
		const uint4 DataNext = PositionBuffer[IndexNext];

		const float3 PCurr = f16tof32(DataCurr.xyz);
		float3 PPrev = f16tof32(DataPrev.xyz);
		float3 PNext = f16tof32(DataNext.xyz);

		// For more details about the vertex type, see StrandHairVertexFactor.ush
		const uint TypeCurr = asuint(DataCurr.a) & 0x3;
		const uint TypePrev = asuint(DataPrev.a) & 0x3;
		const uint TypeNext = asuint(DataNext.a) & 0x3;

		float3 T0 = 0;
		const bool bIsPrevValid = TypePrev == 0 || TypePrev == 1;
		if (bIsPrevValid)
		{
			T0 = normalize(PCurr - PPrev);
		}

		float3 T1 = 0;
		const bool bIsNextValid = TypeNext == 0 || TypeNext == 2;
		if (bIsNextValid)
		{
			T1 = normalize(PNext - PCurr);
		}

		const float3 T = normalize(T0 + T1);

		const float Norm2 = dot(T, float3(0,0,-1));
		float3 Right;
		if (Norm2 > 0e-3f)
		{
			Right = normalize(cross(T, float3(0,0,-1)));
		}
		else
		{
			Right = normalize(cross(T, float3(0,1,0)));
		}

		// Build ortho basis
		float3 TangentX = normalize(cross(Right, T));
		float3 TangentZ = T;

		OutputTangentBuffer[IndexCurr*2]   = PackNormal(TangentX, 0);
		OutputTangentBuffer[IndexCurr*2+1] = PackNormal(TangentZ, 127);
	}
}