// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

// Render modes
#define RENDER_MODE_MSAA 0
#define RENDER_MODE_TRANSMITTANCE 1
#define RENDER_MODE_PPLL 2
#define RENDER_MODE_MSAA_VISIBILITY 3
#define RENDER_MODE_TRANSMITTANCE_AND_HAIRCOUNT 4

#define INVALID_TILE_OFFSET ~0

#define HAIR_VISIBILITY_GROUP_COUNT_WIDTH 64

#include "HairStrandsVisibilityCommonStruct.ush"

 ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 // General util functions

float3 EncodeTangent(float3 N)
{
	return N * 0.5 + 0.5;
}

float3 DecodeTangent(float3 N)
{
	return N * 2 - 1;
}

uint float4ToUint(float4 v)
{
	uint4 i = v * 255;
	return (0xFF & i.w) << 24 | (0xFF & i.z) << 16 | (0xFF & i.y) << 8 | (0xFF & i.x);
}

float4 UintToFloat4(uint In)
{
	uint4 Out;
	Out.x = (0xFF &  In);
	Out.y = (0xFF & (In >> 8));
	Out.z = (0xFF & (In >> 16));
	Out.w = (0xFF & (In >> 24));
	return Out / 255.f;
}

uint Uint16ToUint32(uint2 In)
{
	return (In.x & 0xFFFF) | ((In.y & 0xFFFF) << 16);
}

uint2 Uint32ToUint16(uint In)
{
	uint2 A;
	A.x = In & 0xFFFF;
	A.y = (In >> 16) & 0xFFFF;
	return A;
}

uint Float16ToUint32(float2 In)
{
	return Uint16ToUint32(f32tof16(In));
}

float2 Uint32ToFloat16(uint In)
{
	return f16tof32(Uint32ToUint16(In));
}

uint To8bitCoverage(float Coverage)
{
	return min(uint(Coverage * 0x100), 0xFFu);
}

float From8bitCoverage(uint Coverage8bit)
{
	return float(Coverage8bit) / 255.f;
}

uint To16bitCoverage(float Coverage)
{
	return min(uint(Coverage * 0x10000u), 0xFFFFu);
}

float From16bitCoverage(uint Coverage16bit)
{
	return float(Coverage16bit) / float(0xFFFF);
}

uint3 QuantizeTo8Bits(float3 T)
{
	return saturate((T + float(1).xxx) * 0.5f) * 0xFF;
}

float3 From8bits(float3 In8bits)
{
	return (normalize(In8bits / 255.f) * 2) - float(1).xxx;
}

uint PackVelocity(float2 EncodedVelocity)
{
	return f32tof16(EncodedVelocity.x) << 16 | f32tof16(EncodedVelocity.y);
}

float2 UnpackVelocity(uint PackedVelocity)
{
	return float2(f16tof32(PackedVelocity >> 16), f16tof32(PackedVelocity));
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Hair samples

// Footprint: 128bits | 16bytes
// Option to reduce the footprint: 
// * we don't use PrimitiveID at the moment which is encoded on 3bytes
// * Deferred the evaluation of Coverage & material properties into some other pass?

struct FPackedHairSample
{
	float Depth;
	uint  PrimitiveID_MacroGroupID;
	uint  Tangent_Coverage8bit;
	uint  BaseColor_Roughness;
	uint  Specular_LightChannels_Backlit;
};

struct FHairSample
{
	float	Depth;
	float3	Tangent;
	uint	Coverage8bit;
	uint	PrimitiveId;
	uint	MacroGroupId;
	float3	BaseColor;
	float	Roughness;
	float	Specular;
	float	Backlit;
	uint	LightChannelMask;
	bool	bScatterSceneLighting;
};

// * Max 67,108,864 total nodes (This is 32 nodes per pixel at 1080p if all pixel were covered)
// * Max 63 nodes per pixel
// 26bits for offset | 6 bits for count (max 63 nodes)
//TODO rename FHairSamplesDesc
struct FNodeDesc
{
	uint Offset;
	uint Count;
};

uint EncodeNodeDesc(const FNodeDesc Desc)
{
	return (Desc.Offset & 0x03FFFFFF) | ((Desc.Count & 0x3F) << 26);
}

FNodeDesc DecodeNodeDesc(uint In)
{
	FNodeDesc Out;
	Out.Offset = In & 0x03FFFFFF;
	Out.Count  = (In >> 26) & 0x3F;
	return Out;
}

FPackedHairSample PackHairSample(const FHairSample In)
{
	FPackedHairSample Out;

	// Tangent and Coverage
	// Encode into 1 x 32bits uint
	// Coverage is clamped o 255 as we only have 8 bits to store its value
	const float3 T = saturate(EncodeTangent(In.Tangent));
	Out.Tangent_Coverage8bit =
		((0xFF & uint(T.x * 255)))      | 
		((0xFF & uint(T.y * 255)) << 8) |
		((0xFF & uint(T.z * 255)) << 16)| 
		(min(uint(0xFF), In.Coverage8bit) << 24);

	// PrimitiveId and MacroGroupId
	// Encode into 1 x 32bits uint
	// PrimitiveId is on 28bits | MacroGroupId is on 4bits
	Out.PrimitiveID_MacroGroupID = 
		((In.PrimitiveId  & 0x0FFFFFFF)) |
		((In.MacroGroupId & 0xF) << 28);

	Out.Depth					= In.Depth;																			// 32bits float
	Out.BaseColor_Roughness		= float4ToUint(float4(sqrt(In.BaseColor), In.Roughness));							// 32bits uint
	Out.Specular_LightChannels_Backlit = 
		clamp(uint(In.Specular * 0xFF), 0, 0xFF) | 
		((In.LightChannelMask & 0x7) << 8)  | 
		((In.bScatterSceneLighting ? 1 : 0) << 12) |
		(clamp(uint(In.Backlit * 0xFF), 0, 0xFF) << 16);

	return Out;
}

FHairSample UnpackHairSample(const FPackedHairSample In)
{
	FHairSample Out;
	Out.Depth = In.Depth;

	Out.Tangent = DecodeTangent(float3(
		float((In.Tangent_Coverage8bit)       & 0xFF) / 255.f,
		float((In.Tangent_Coverage8bit >> 8)  & 0xFF) / 255.f,
		float((In.Tangent_Coverage8bit >> 16) & 0xFF) / 255.f));
	Out.Coverage8bit = (In.Tangent_Coverage8bit >> 24) & 0xFF;

	Out.PrimitiveId  = In.PrimitiveID_MacroGroupID & 0x0FFFFFFF;
	Out.MacroGroupId = (In.PrimitiveID_MacroGroupID>>28) & 0xF;

	const float4 BaseColorAndRoughness = UintToFloat4(In.BaseColor_Roughness);
	Out.BaseColor			= BaseColorAndRoughness.xyz * BaseColorAndRoughness.xyz;
	Out.Roughness			= BaseColorAndRoughness.w;
	Out.Specular			= float(0xFF & In.Specular_LightChannels_Backlit) / 0xFF;
	Out.LightChannelMask	= (In.Specular_LightChannels_Backlit >>8) & 0x7;
	Out.Backlit				= float(0xFF & (In.Specular_LightChannels_Backlit>>16)) / 0xFF;
	Out.bScatterSceneLighting = (In.Specular_LightChannels_Backlit & (1<<12)) > 0;

	return Out;
}

void PatchPackedHairSampleCoverage(inout FPackedHairSample Out, uint Coverage8bit)
{
	Out.Tangent_Coverage8bit = (Out.Tangent_Coverage8bit & 0x00FFFFFF) | (min(uint(0xFF), Coverage8bit) << 24);
}

uint GetPackedHairSampleCoverage8bit(in FPackedHairSample In)
{
	return 0xFF & (In.Tangent_Coverage8bit>>24);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Hair categorization

// Rename FHairCatetorizationData
struct FCategorizationData
{
	uint  TotalCoverage8bit;
	uint  SampleCount;
	float PixelCoverage;
	float ClosestDepth;
};

uint4 EncodeCategorizationData(FCategorizationData Data)
{
	const uint ClosestDepthUint = asuint(Data.ClosestDepth);
	const uint ClosestDepthLow  = ClosestDepthUint & 0xFFFF;
	const uint ClosestDepthHigh	= (ClosestDepthUint >> 16) & 0xFFFF;
	const uint ComponentX		= min(Data.TotalCoverage8bit, uint(0xFF)) | ((Data.SampleCount & 0xFF)<<8);
	return uint4(ComponentX, f32tof16(Data.PixelCoverage), ClosestDepthLow, ClosestDepthHigh);
}

FCategorizationData DecodeCategorizationData(uint4 Data)
{
	FCategorizationData Out;
	Out.TotalCoverage8bit		= Data.x & 0xFF;
	Out.SampleCount				=(Data.x>>8) & 0xFF;
	Out.PixelCoverage			= f16tof32(Data.y);
	const uint ClosestDepthLow	= Data.z & 0xFFFF;
	const uint ClosestDepthHigh	=(Data.w & 0xFFFF) << 16;
	Out.ClosestDepth			= asfloat(ClosestDepthHigh | ClosestDepthLow);

	return Out;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Hair view info (used for overriding view constant/uniform buffer)

struct FHairRenderInfo
{
	float RadiusAtDepth1Primary;
	float RadiusAtDepth1Velocity;
	float VelocityMagnitudeScale;

	bool bIsOrthoView;
	bool bIsGPUDriven;

	float3 ViewForward;
	float3 TranslatedWorldCameraOrigin;
};

FHairRenderInfo GetHairRenderInfo(float4 ViewHairRenderInfo, uint ViewHairRenderInfoBits, bool bUseScableRasterization=false)
{
	FHairRenderInfo Info;
	Info.RadiusAtDepth1Primary  = bUseScableRasterization ? ViewHairRenderInfo.y : ViewHairRenderInfo.x;
	Info.RadiusAtDepth1Velocity = ViewHairRenderInfo.z;
	Info.VelocityMagnitudeScale = ViewHairRenderInfo.w;

	const uint BitField = ViewHairRenderInfoBits;
	Info.bIsOrthoView = (BitField & 0x1) != 0;
	Info.bIsGPUDriven = (BitField & 0x2) != 0;

	return Info;
}
 
struct FHairViewInfo
{
	float3 TranslatedWorldCameraOrigin;
	float3 ViewForward;
	float  RadiusAtDepth1;
	bool	bIsOrthoView;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Hair Attributes

struct FHairAttributes
{
	float2 RootUV;
	float	Seed;
	float	UCoord;
};

FHairAttributes DecodeHairAttribute(uint4 Attributes)
{
	float2 RootUV, RootIndex;
	RootUV.x	= (Attributes.x & 0xFF) / 255.f;
	RootUV.y	= 1-(((Attributes.x>>8) & 0xFF) / 255.f); // Invert V to compensate image origin flip
	RootIndex.x	= Attributes.z & 0xFF;
	RootIndex.y	= (Attributes.z >> 8) & 0xFF;

	FHairAttributes Out;
	Out.RootUV	= RootUV + RootIndex;
	Out.UCoord	= (Attributes.y & 0xFF) / 255.f;
	Out.Seed	= ((Attributes.y>>8) & 0xFF) / 255.f;
	return Out;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Hair PPLL

uint GetCoverage8Bits(FPPLLNodeData In)
{
	return (In.Tangent_Coverage8bit >> 24) & 0xFF;
}

uint GetCoverage16Bits(FPPLLNodeData In)
{
	return (In.Specular_LightChannel_Backlit_Coverage16bit >> 16) & 0xFFFF;
}

FPPLLNodeData CreatePPLLNodeData(
	float	Depth, 
	uint	PrimitiveId,
	uint	MacroGroupId,
	float3	Tangent,
	float	CoverageFullPrecision, 
	uint	Coverage8bit,
	float3	BaseColor,
	float	Roughness, 
	float	Specular, 
	float	Backlit, 
	uint	LightChannelMask, 
	float2	Velocity, 
	uint	NextNodeIndex)
{
	FHairSample S;
	S.Depth = Depth;
	S.PrimitiveId = PrimitiveId;
	S.MacroGroupId = MacroGroupId;
	S.Tangent = Tangent;
	S.Coverage8bit = Coverage8bit;
	S.BaseColor = BaseColor;
	S.Roughness = Roughness;
	S.Specular = 0;			// Custom encoding for PPLL
	S.Backlit = 0;			// Custom encoding for PPLL
	S.LightChannelMask = 0; // Custom encoding for PPLL
	
	const FPackedHairSample PackedS = PackHairSample(S);
	const uint Coverage16bit = To16bitCoverage(CoverageFullPrecision);

	FPPLLNodeData Out;
	Out.Depth = PackedS.Depth;
	Out.PrimitiveID_MacroGroupID = PackedS.PrimitiveID_MacroGroupID;
	Out.Tangent_Coverage8bit = PackedS.Tangent_Coverage8bit;
	Out.BaseColor_Roughness = PackedS.BaseColor_Roughness;
	Out.Specular_LightChannel_Backlit_Coverage16bit = clamp(uint(Specular * 0xFF), 0, 0xFF) |  (clamp(uint(Backlit * 0x1F), 0, 0x1F)<<11) | ((LightChannelMask & 0x7)<<8) |  ((0xFFFF & Coverage16bit) << 16);
	Out.NextNodeIndex = NextNodeIndex;
	Out.PackedVelocity = PackVelocity(Velocity);

	return Out;
}

FPackedHairSample ConvertToPackedHairSample(FPPLLNodeData In, uint InNewCoverage8bit)
{
	const uint Specular_LightChannel = In.Specular_LightChannel_Backlit_Coverage16bit & 0x7FF;
	const float Backlit = float((In.Specular_LightChannel_Backlit_Coverage16bit >> 11) & 0x1F) / float(0x1F);

	FPackedHairSample Out;
	Out.Depth = In.Depth;
	Out.PrimitiveID_MacroGroupID = In.PrimitiveID_MacroGroupID;
	Out.Tangent_Coverage8bit = (In.Tangent_Coverage8bit & 0x00FFFFFF) | ((InNewCoverage8bit & 0xFF)<<24);
	Out.BaseColor_Roughness = In.BaseColor_Roughness;
	Out.Specular_LightChannels_Backlit = Specular_LightChannel | (clamp(uint(Backlit * 0xFF), 0, 0xFF) << 16);

	return Out;
}

 ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 // Hair visibility buffer 

// Renamed into FHairNodeVisFat
struct FNodeVis // 128 bit aligments. TODO: Move the coverage computation into the material evaluation for saving 64 bits? 
{
	float Depth;		// 32 bits
	uint  PrimitiveId;	// 32 bits
	uint  MaterialId;	//  8 bits : this could be packed into a the 3 high bits of PrimitiveId: up to 8 material on screen
	uint  Coverage8bit;	//  8 bits
};

struct FHairVisSample
{
	uint PrimitiveId;
	uint MaterialId;
};

uint GetInvalidHairPrimitiveId()
{
return 0xFFFFFFFF;
}

uint PackHairVisSample(uint PrimitiveId, uint MaterialId)
{
	return (PrimitiveId & 0x0FFFFFFF) | ((MaterialId & 0xF) << 28);
}

FHairVisSample UnpackHairVisSample(uint RawVis)
{
	FHairVisSample Out;
	Out.PrimitiveId = RawVis & 0x0FFFFFFF;
	Out.MaterialId = (RawVis >> 28) & 0xF;
	return Out;
}
 
 ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 // Hair MSAA buffer 

bool IsValidHairData(uint2 MRT0Data)
{
	const uint InvalidSample = GetInvalidHairPrimitiveId();// &0x0FFFFFFF; // PrimitiveId mask, see EncodeVisSample()
	return MRT0Data.x != InvalidSample;
}

uint2 PackHairMRT0(uint PrimitiveId, uint MacroGroupId, uint Coverage8bit, float3 Tangent)
{
	uint2 Out;
	Out.x =
		((PrimitiveId & 0x0FFFFFFF)) |
		((MacroGroupId & 0xF) << 28);

	const float3 T = saturate(EncodeTangent(Tangent));
	Out.y =
		((0xFF & uint(T.x * 255))) |
		((0xFF & uint(T.y * 255)) << 8) |
		((0xFF & uint(T.z * 255)) << 16) |
		(min(uint(0xFF), Coverage8bit) << 24);

	return Out;
}

float4 PackHairMRT1(float3 BaseColor, float Roughness)
{
	return float4(sqrt(BaseColor), Roughness);
}

float4 PackHairMRT2(float Specular, uint LightChannelMask, float Backlit, bool bUseScatterSceneLighting)
{
	return float4(Specular, float(LightChannelMask) / 255.f, Backlit, bUseScatterSceneLighting? 1 : 0);
}

void UnpackHairMRT0(uint2 In, inout uint PrimitiveId, inout uint MacroGroupId, inout uint Coverage8bit, inout float3 Tangent)
{
	PrimitiveId  =  In.x & 0x0FFFFFFF;
	MacroGroupId = (In.x >> 28) & 0xF;

	Tangent = DecodeTangent(float3(
		float((In.y) & 0xFF) / 255.f,
		float((In.y >> 8) & 0xFF) / 255.f,
		float((In.y >> 16) & 0xFF) / 255.f));
	Coverage8bit = (In.y >> 24) & 0xFF;
}

void UnpackHairMRT1(float4 In, inout float3 BaseColor, inout float Roughness)
{
	// Cheap gamma encoding since this is encoded into 8bit target
	BaseColor = In.xyz * In.xyz;
	Roughness = In.w;
}

void UnpackHairMRT2(float4 In, inout float Specular, inout uint LightChannelMask, inout float Backlit, inout bool bUseScatterSceneLighting)
{
	Specular = In.x;
	LightChannelMask = uint(In.y * 0xFF);
	Backlit = In.z;
	bUseScatterSceneLighting = In.w > 0;
}