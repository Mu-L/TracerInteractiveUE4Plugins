// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

#pragma once

#define RENDER_MODE_MSAA 0
#define RENDER_MODE_TRANSMITTANCE 1
#define RENDER_MODE_PPLL 2
#define RENDER_MODE_MSAA_VISIBILITY 3
#define RENDER_MODE_TRANSMITTANCE_AND_HAIRCOUNT 4

struct FVisibilityData
{
	float3 Tangent;		// 24 bits
	uint   Coverage8bit;//  8 bits
	uint   PrimitiveId;	// 28 bits
	uint   ClusterId;	//  4 bits
};

struct FNodeVis // 128 bit aligments. TODO: Move the coverage computation into the material evaluation for saving 64 bits? 
{
	float Depth;		// 32 bits
	uint  PrimitiveId;	// 32 bits
	uint  MaterialId;	//  8 bits : this could be packed into a the 3 high bits of PrimitiveId: up to 8 material on screen
	uint  Coverage8bit;	//  8 bits
};

// Footprint: 128bits | 16bytes
// Option to reduce the footprint: 
// * we don't use PrimitiveID at the moment which is encoded on 3bytes
// * Deferred the evaluation of Coverage & material properties into some other pass?

struct FNodeData
{
	float Depth;
	uint  PrimitiveID_ClusterID;
	uint  Tangent_Coverage8bit;
	uint  BaseColor_Roughness;
	float Specular;
};

float3 EncodeTangent(float3 N)
{
	return N * 0.5 + 0.5;
}

float3 DecodeTangent(float3 N)
{
	return N * 2 - 1;
}

uint float4ToUint(float4 v)
{
	uint4 i = v * 255;
	return (0xFF & i.w) << 24 | (0xFF & i.z) << 16 | (0xFF & i.y) << 8 | (0xFF & i.x);
}

float4 UintToFloat4(uint In)
{
	uint4 Out;
	Out.x = (0xFF &  In);
	Out.y = (0xFF & (In >>  8));
	Out.z = (0xFF & (In >> 16));
	Out.w = (0xFF & (In >> 24));
	return Out / 255.f;
}

uint4 EncodeVisibilityData(FVisibilityData Data)
{
	uint4 Output;

	// Tangent and Coverage
	// Encode into 2 x 16bits
	// Coverage is clamped o 255 as we only have 8 bits to store its value
	float3 T = saturate(EncodeTangent(Data.Tangent));
	Output.xy = uint2(
		(0xFF & uint(T.x * 255)) | ((0xFF & uint(T.y * 255)) << 8),
		(0xFF & uint(T.z * 255)) | (min(0xFFu, Data.Coverage8bit) << 8));

	// PrimitiveId and ClusterId
	// Encode into 2 x 16bits
	// PrimitiveId is on 28bits | ClusterId is on 4bits
	Output.zw = uint2(
		0xFFFF & Data.PrimitiveId,
		((Data.ClusterId & 0x0F) << 12) | (0x0FFF & (uint(Data.PrimitiveId) >> 16)));

	return Output;
}

FVisibilityData DecodeVisibilityData(uint4 EncodedData)
{
	FVisibilityData Output;
	Output.Tangent = DecodeTangent(float3(
		float((EncodedData.x     ) & 0xFF) / 255.f,
		float((EncodedData.x >> 8) & 0xFF) / 255.f,
		float((EncodedData.y     ) & 0xFF) / 255.f));
	Output.Coverage8bit = (EncodedData.y >> 8) & 0xFF;

	Output.PrimitiveId = EncodedData.z | ((EncodedData.w & 0x0FFF) << 16);
	Output.ClusterId = (EncodedData.w & 0xF000) >> 12;

	return Output;
}

bool IsValidHairData(uint4 EncodedVisibilityData)
{
	const uint InvalidSample = 0xFFFF;
	return EncodedVisibilityData.w != InvalidSample;
}

uint DecodeClusterId(uint4 EncodedVisibilityData)
{
	return (EncodedVisibilityData.w >> 12) & 0xF;
}

// * Max 67,108,864 total nodes (This is 32 nodes per pixel at 1080p if all pixel were covered)
// * Max 63 nodes per pixel
// 26bits for offset | 6 bits for count (max 63 nodes)
struct FNodeDesc
{
	uint Offset;
	uint Count;
};

uint EncodeNodeDesc(const FNodeDesc Desc)
{
	return (Desc.Offset & 0x03FFFFFF) | ((Desc.Count & 0x3F) << 26);
}

FNodeDesc DecodeNodeDesc(uint In)
{
	FNodeDesc Out;
	Out.Offset = In & 0x03FFFFFF;
	Out.Count  = (In >> 26) & 0x3F;
	return Out;
}

FNodeData ConvertToNodeData(float Depth, FVisibilityData VisibilityData, float3 BaseColor, float Roughness, float Specular)
{
	// 4x16bits
	const uint4 EncodedVisibilityData = EncodeVisibilityData(VisibilityData);

	FNodeData Out;
	Out.Depth					= Depth;																			// 32bits float
	Out.Tangent_Coverage8bit	= (0xFFFF & EncodedVisibilityData.x) | ((0xFFFF & EncodedVisibilityData.y) << 16);	// 32bits uint
	Out.PrimitiveID_ClusterID	= (0xFFFF & EncodedVisibilityData.z) | ((0xFFFF & EncodedVisibilityData.w) << 16);	// 32bits uint
	Out.BaseColor_Roughness		= float4ToUint(float4(sqrt(BaseColor), Roughness));									// 32bits uint
	Out.Specular				= Specular;																			// 32bits float

	return Out;
}

 void DecodeNodeData(
	 const FNodeData		InNode, 
	 inout float			OutDepth, 
	 inout FVisibilityData	OutVisibilityData,
	 inout float3			OutBaseColor, 
	 inout float			OutRoughness,
	 inout float			OutSpecular)
{
	OutDepth = InNode.Depth;

	const uint4 EncodedVisibility = uint4(
		(InNode.Tangent_Coverage8bit & 0xFFFF),
		(InNode.Tangent_Coverage8bit >> 16) & 0xFFFF,
		(InNode.PrimitiveID_ClusterID & 0xFFFF),
		(InNode.PrimitiveID_ClusterID >> 16) & 0xFFFF);
	OutVisibilityData = DecodeVisibilityData(EncodedVisibility);

	const float4 BaseColorAndRoughness = UintToFloat4(InNode.BaseColor_Roughness);
	OutBaseColor = BaseColorAndRoughness.xyz * BaseColorAndRoughness.xyz;
	OutRoughness = BaseColorAndRoughness.w;
	OutSpecular = InNode.Specular;
}

#define HAIR_VISIBILITY_MAXSAMPLECOUNT 8
#define HAIR_VISIBILITY_GROUP_COUNT_WIDTH 64

 struct FSampleDesc
 {
	 uint   SampleId;
	 uint   ClusterId;
	 float  Depths;
	 float  Weights;
	 float3 Tangents;
	 uint   Coverage8bit;
	 float4 BaseColorAndRoughness;
	 float  Specular;
 };

 struct FSampleSetDesc
 {
	 uint   UniqueSampleCount;
	 uint   ValidSampleCount;
	 uint   HairSampleCount;
 };

 uint To8bitCoverage(float Coverage)
 {
	 return min(uint(Coverage * 0x100), 0xFFu);
 }

 float From8bitCoverage(uint Coverage8bit)
 {
	 return float(Coverage8bit) / 255.f;
 }

 float GetVoxelDensityFixPointScale()
 {
	 // Constant for scaling the hair coverage during the voxelization (done with atomic integer)
	 return 1000.f;
 }

 struct FCategorizationData
 {
	 uint  TotalCoverage8bit;
	 uint  SampleCount;
	 float PixelCoverage;
	 float ClosestDepth;
 };

 uint4 EncodeCategorizationData(FCategorizationData Data)
 {
	 const uint ClosestDepthUint = asuint(Data.ClosestDepth);
	 const uint ClosestDepthLow  = ClosestDepthUint & 0xFFFF;
	 const uint ClosestDepthHigh = (ClosestDepthUint >> 16) & 0xFFFF;
	 const uint ComponentX		 = min(Data.TotalCoverage8bit, 0xFFu) | ((Data.SampleCount & 0xFF)<<8);
	 return uint4(ComponentX, f32tof16(Data.PixelCoverage), ClosestDepthLow, ClosestDepthHigh);
 }

 FCategorizationData DecodeCategorizationData(uint4 Data)
 {
	 FCategorizationData Out;
	 Out.TotalCoverage8bit			= Data.x & 0xFF;
	 Out.SampleCount				=(Data.x>>8) & 0xFF;
	 Out.PixelCoverage				= f16tof32(Data.y);
	 const uint ClosestDepthLow		= Data.z & 0xFFFF;
	 const uint ClosestDepthHigh	=(Data.w & 0xFFFF) << 16;
	 Out.ClosestDepth				= asfloat(ClosestDepthHigh | ClosestDepthLow);

	 return Out;
 }

 uint3 QuantizeTo8Bits(float3 T)
 {
	 return saturate((T + float(1).xxx) * 0.5f) * 0xFF;
 }

 float3 From8bits(float3 In8bits)
 {
	 return (normalize(In8bits / 255.f) * 2) - float(1).xxx;
 }

 uint EncodeBaseColorAndRoughness(float3 BaseColor, float Roughness)
 {
	 return
		 (uint(BaseColor.x * 0xFF) & 0xFF) |
		 (uint(BaseColor.y * 0xFF) & 0xFF) << 8 |
		 (uint(BaseColor.z * 0xFF) & 0xFF) << 16 |
		 (uint(Roughness   * 0xFF) & 0xFF) << 24;
 }

 void DecodeBaseColorAndRoughness(uint Encoded, inout float3 BaseColor, out float Roughness)
 {
	 BaseColor.x = (float((Encoded) & 0xFF) / 255.f);
	 BaseColor.y = (float((Encoded >> 8) & 0xFF) / 255.f);
	 BaseColor.z = (float((Encoded >> 16) & 0xFF) / 255.f);
	 Roughness   = (float((Encoded >> 24) & 0xFF) / 255.f);
 }

 struct FHairRenderInfo
 {
	 float RadiusAtDepth1Primary;
	 float RadiusAtDepth1Velocity;
	 bool  bIsOrthoView;
	 float VelocityMagnitudeScale;
 };

 FHairRenderInfo GetHairRenderInfo(float4 ViewHairRenderInfo)
 {
	 FHairRenderInfo Info;
	 Info.RadiusAtDepth1Primary = ViewHairRenderInfo.x;
	 Info.RadiusAtDepth1Velocity = ViewHairRenderInfo.y;
	 Info.bIsOrthoView = ViewHairRenderInfo.z > 0.0f ? true : false;
	 Info.VelocityMagnitudeScale = ViewHairRenderInfo.w;
	 return Info;
 }

 struct FHairAttributes
 {
	 float2 RootUV;
	 float	Seed;
	 float	UCoord;
 };

 FHairAttributes DecodeHairAttribute(uint4 Attributes)
 {
	 float2 RootUV, RootIndex;
	 RootUV.x		= (Attributes.x & 0xFF) / 255.f;
	 RootUV.y		= ((Attributes.x>>8) & 0xFF) / 255.f;
	 RootIndex.x	= Attributes.z & 0xFF;
	 RootIndex.y	= (Attributes.z >> 8) & 0xFF;

	 FHairAttributes Out;
	 Out.RootUV		= RootUV + RootIndex;
	 Out.UCoord		= (Attributes.y & 0xFF) / 255.f;
	 Out.Seed		= ((Attributes.y>>8) & 0xFF) / 255.f;
	 return Out;
 }

 //////////
 // PPLL

// Footprint: 224bits | 28bytes
 struct FPPLLNodeData
 {
	 // (backloged)TODO try f16(depth) f16(Specular) and make sure depth does not lead to artefact
	 float Depth;
	 float Specular;
	 uint PrimitiveID_ClusterID;
	 uint Tangent_Coverage8bit;
	 uint BaseColor_Roughness;
	 uint NextNodeIndex;
	 uint PackedVelocity;
 };

 uint PackVelocity(float2 EncodedVelocity)
 {
	 return f32tof16(EncodedVelocity.x) << 16 | f32tof16(EncodedVelocity.y);
 }

 float2 UnpackVelocity(uint PackedVelocity)
 {
	 return float2(f16tof32(PackedVelocity >> 16), f16tof32(PackedVelocity));
 }

 FPPLLNodeData ConvertToPPLLNodeData(float Depth, FVisibilityData VisibilityData, float3 BaseColor, float Roughness, float Specular, float2 Velocity, uint NextNodeIndex)
 {
	 // 4x16bits
	 const uint4 EncodedVisibilityData = EncodeVisibilityData(VisibilityData);

	 FPPLLNodeData Out;
	 Out.Depth = Depth;
	 Out.Tangent_Coverage8bit = (0xFFFF & EncodedVisibilityData.x) | ((0xFFFF & EncodedVisibilityData.y) << 16);
	 Out.PrimitiveID_ClusterID = (0xFFFF & EncodedVisibilityData.z) | ((0xFFFF & EncodedVisibilityData.w) << 16);
	 Out.BaseColor_Roughness = float4ToUint(float4(sqrt(BaseColor), Roughness));
	 Out.Specular = Specular;
	 Out.NextNodeIndex = NextNodeIndex;
	 Out.PackedVelocity = PackVelocity(Velocity);

	 return Out;
 }

 FNodeData ConvertToNodeData(FPPLLNodeData In)
 {
	 FNodeData Out;
	 Out.Depth = In.Depth;
	 Out.PrimitiveID_ClusterID = In.PrimitiveID_ClusterID;
	 Out.Tangent_Coverage8bit = In.Tangent_Coverage8bit;
	 Out.BaseColor_Roughness = In.BaseColor_Roughness;
	 Out.Specular = In.Specular;
	 return Out;
 }

 uint Uint16ToUint32(uint2 In)
 {
	 return (In.x & 0xFFFF) | ((In.y & 0xFFFF) << 16);
 }

 uint2 Uint32ToUint16(uint In)
 {
	 uint2 A;
	 A.x = In & 0xFFFF;
	 A.y = (In >> 16) & 0xFFFF;
	 return A;
 }

 uint Float16ToUint32(float2 In)
 {
	 return Uint16ToUint32(f32tof16(In));
 }

 float2 Uint32ToFloat16(uint In)
 {
	return f16tof32(Uint32ToUint16(In));
 }

 struct FVisSample
 {
	 uint PrimitiveId;
	 uint MaterialId;
 };

 uint GetInvalidHairPrimitiveId()
 {
	return 0xFFFFFFFF;
 }

 uint EncodeVisSample(uint PrimitiveId, uint MaterialId)
 {
	 return (PrimitiveId & 0x0FFFFFFF) | ((MaterialId & 0xF) << 28);
 }

 FVisSample DecodeVisSample(uint RawVis)
 {
	 FVisSample Out;
	 Out.PrimitiveId = RawVis & 0x0FFFFFFF;
	 Out.MaterialId = (RawVis >> 28) & 0xF;
	 return Out;
 }
 
