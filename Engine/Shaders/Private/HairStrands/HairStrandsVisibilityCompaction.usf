// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

#pragma once

#include "../Common.ush"
#include "HairStrandsVisibilityCommon.ush"

#define RENDER_MODE_MSAA 0
#define VENDOR_AMD 0
#define VENDOR_NVIDIA 1
#define VENDOR_OTHER 2

#if PERMUTATION_MATERIAL_COMPACTION == 1
float DepthTheshold;
float CosTangentThreshold;
#endif

#if PERMUTATION_VENDOR == VENDOR_AMD
#define TILE_PIXEL_SIZE_X 8
#define TILE_PIXEL_SIZE_Y 8
#elif PERMUTATION_VENDOR == VENDOR_NVIDIA
#define TILE_PIXEL_SIZE_X 8
#define TILE_PIXEL_SIZE_Y 4
#else //VENDOR_OTHER
#define TILE_PIXEL_SIZE_X 8
#define TILE_PIXEL_SIZE_Y 8
#endif

uint2 OutputResolution;
uint MaxNodeCount;
uint HairVisibilityMSAASampleCount;
uint2 ResolutionOffset;

RWTexture2D<uint> OutCompactNodeCounter;
RWTexture2D<uint> OutCompactNodeIndex;
#if PERMUTATION_VISIBILITY
	RWStructuredBuffer<FNodeVis> OutCompactNodeData;
#else
	RWStructuredBuffer<FNodeData> OutCompactNodeData;
#endif
RWStructuredBuffer<uint> OutCompactNodeCoord;
RWTexture2D<uint4> OutCategorizationTexture;

#ifndef PERMUTATION_VELOCITY
	#error Velocity permutation needs to be defined
#endif

#define VELOCITY_TYPE_NONE 0
#define VELOCITY_TYPE_AVG 1  
#define VELOCITY_TYPE_CLOSEST 2
#define VELOCITY_TYPE_MAX 3
#if PERMUTATION_VELOCITY != VELOCITY_TYPE_NONE
	RWTexture2D<float2> OutVelocityTexture;
#endif


groupshared uint AllocationNodeCount;
groupshared uint AllocationNodeOffset;

#if PERMUTATION_PPLL
#define PPLL_MAX_RENDER_NODE_COUNT PERMUTATION_PPLL

Texture2D<uint> PPLLCounter;
Texture2D<uint> PPLLNodeIndex;
StructuredBuffer<FPPLLNodeData> PPLLNodeData;


[numthreads(TILE_PIXEL_SIZE_X, TILE_PIXEL_SIZE_Y, 1)]
void MainCS(uint GroupIndex : SV_GroupIndex, uint3 DispatchThreadId : SV_DispatchThreadID)
{
	uint2 PixelCoord = DispatchThreadId.xy + ResolutionOffset;
	const uint FirstNodeIndex = PPLLNodeIndex[PixelCoord];

	FCategorizationData Categorization = (FCategorizationData)0;

#if PERMUTATION_VELOCITY == VELOCITY_TYPE_AVG
	float2 AverageVelocity = 0;
	uint ValidVelocityCount = 0;
#elif PERMUTATION_VELOCITY == VELOCITY_TYPE_CLOSEST
	float2 ClosestVelocity = 0;
	float ClosestDepth = 0;
#elif PERMUTATION_VELOCITY == VELOCITY_TYPE_MAX
	float2 MaxVelocity = 0;
	float MaxVelocityMagnitude2 = 0;
#endif
	
	const bool bExecute = FirstNodeIndex != 0xFFFFFFFF && all(PixelCoord < OutputResolution);

	uint SortedIndex[PPLL_MAX_RENDER_NODE_COUNT];
	float SortedDepth[PPLL_MAX_RENDER_NODE_COUNT];
	for (int NodeIndex = 0; NodeIndex < PPLL_MAX_RENDER_NODE_COUNT; ++NodeIndex)
	{
		SortedDepth[NodeIndex] = 0.0f;
	}

	float TotalTransmittance = 1.0f;
	uint PixelNodeCount = 0;
	if (bExecute)
	{
		//////////
		// First pass: sort PPLL element into nodes we are going to render
		uint NodeIndex = FirstNodeIndex;
		while (NodeIndex != 0xFFFFFFFF)
		{
			FPPLLNodeData PPLLNode = PPLLNodeData[NodeIndex];

			// Decode data we need
			float			Depth = 0.0f;
			FVisibilityData	VisibilityData = (FVisibilityData)0;
			float3			BaseColor = 0.0f;
			float			Roughness = 0.0f;
			float			Specular = 0;
			DecodeNodeData(ConvertToNodeData(PPLLNode), Depth, VisibilityData, BaseColor, Roughness, Specular);

			const float Coverage = From8bitCoverage(VisibilityData.Coverage8bit);
			TotalTransmittance *= 1.0f - Coverage;

			int InsertPos;
			for (InsertPos = 0; InsertPos < PPLL_MAX_RENDER_NODE_COUNT; ++InsertPos)
			{
				if (PPLLNode.Depth > SortedDepth[InsertPos])
				{
					// The new node is closer
					break;
				}
			}

			if (InsertPos == PPLL_MAX_RENDER_NODE_COUNT)
			{
				// TODOAGREGATE Need to merge the node into last node
				// ==> cull it out for now
			}
			else
			{
				// Shift existing nodes from the end
				for (int Shift = PPLL_MAX_RENDER_NODE_COUNT - 1; Shift > InsertPos; --Shift) // TODO use PixelNodeCount in place of PPLL_MAX_RENDER_NODE_COUNT
				{
					SortedIndex[Shift] = SortedIndex[Shift-1];
					SortedDepth[Shift] = SortedDepth[Shift-1];
				}

				// TODOAGREGATE merge last node into agregated material

				// Insert new node
				SortedIndex[InsertPos] = NodeIndex;
				SortedDepth[InsertPos] = Depth;

				PixelNodeCount++;
			}

			NodeIndex = PPLLNode.NextNodeIndex;
		}
	}

	// Initialise group allocation node count
	if (GroupIndex == 0)
	{
		AllocationNodeCount = 0;
		AllocationNodeOffset= 0;
	}
	GroupMemoryBarrierWithGroupSync();
	// Now notify how many nodes this thread wants to allocate
	uint PixelDataSubOffsetInStorage = 0; 
	uint PixelRenderNodecount = min(PixelNodeCount, PPLL_MAX_RENDER_NODE_COUNT);
	InterlockedAdd(AllocationNodeCount, PixelRenderNodecount, PixelDataSubOffsetInStorage);
	GroupMemoryBarrierWithGroupSync();
	// Now allocate all the nodes for this group contiguously in memory
	if (GroupIndex == 0 && AllocationNodeCount > 0)
	{
		InterlockedAdd(OutCompactNodeCounter[uint2(0, 0)], AllocationNodeCount, AllocationNodeOffset);
	}
	GroupMemoryBarrierWithGroupSync();
	uint OffsetInStorage = AllocationNodeOffset + PixelDataSubOffsetInStorage;

	if(bExecute)
	{
		//////////
		// Second pass: compute total coverage for validated nodes we are going to render
		float ValidPixelSampleTotalCoverage = 0.0f;
		float SortedCoverage[PPLL_MAX_RENDER_NODE_COUNT];
		float TotalSortedTransmittance = 1.0f;
		for (int i = 0; i < PixelRenderNodecount; ++i)
		{
			const uint NodePPLLIndex = SortedIndex[i];
			FPPLLNodeData PPLLNode = PPLLNodeData[NodePPLLIndex];

			// Decode data we need
			float			Depth = 0.0f;
			FVisibilityData	VisibilityData = (FVisibilityData)0;
			float3			BaseColor = 0.0f;
			float			Roughness = 0.0f;
			float			Specular = 0;
			DecodeNodeData(ConvertToNodeData(PPLLNode), Depth, VisibilityData, BaseColor, Roughness, Specular);

			const float Coverage = From8bitCoverage(VisibilityData.Coverage8bit);

			// Update current node coverage as a function of previous nodes coverage
			SortedCoverage[i] = TotalSortedTransmittance * Coverage;
			
			// Update transmittance for the next strands
			TotalSortedTransmittance *= 1.0f - Coverage;

			// Accumulate total coverage.
			ValidPixelSampleTotalCoverage += SortedCoverage[i];
		}

		//////////
		// Third pass: write out compact nodes for rendering
		for (uint i = 0; i < PixelRenderNodecount; ++i)
		{
			const uint NodePPLLIndex = SortedIndex[i];
			FPPLLNodeData PPLLNode = PPLLNodeData[NodePPLLIndex];
			FNodeData OutNodeData = ConvertToNodeData(PPLLNode);
			float			Depth = 0.0f;
			FVisibilityData	VisibilityData = (FVisibilityData)0;
			float3			BaseColor = 0.0f;
			float			Roughness = 0.0f;
			float			Specular = 0.0f;
			DecodeNodeData(OutNodeData, Depth, VisibilityData, BaseColor, Roughness, Specular);

			// Coverage8bit is a weight normalising to 1 the contribution of all the compacted samples. Because later it is weighted by Categorization.PixelCoverage.
			uint Coverage8bit = To8bitCoverage(SortedCoverage[i] / float(ValidPixelSampleTotalCoverage));
			// Patch the coverage on the out node
			VisibilityData.Coverage8bit = Coverage8bit;
			OutNodeData = ConvertToNodeData(Depth, VisibilityData, BaseColor, Roughness, Specular);

			Categorization.TotalCoverage8bit += Coverage8bit;
			Categorization.ClosestDepth = max(Categorization.ClosestDepth, OutNodeData.Depth); // Inverse-Z



			// TODOAGREGATE if last, Create FVisibilityData and FNodeData from aggregated  data
			//FNodeData ConvertToNodeData(float Depth, FVisibilityData VisibilityData, float3 BaseColor, float Roughness, float Specular)
			OutCompactNodeData[OffsetInStorage + i] = OutNodeData;
			OutCompactNodeCoord[OffsetInStorage + i] = (PixelCoord.x & 0xFFFF) | ((PixelCoord.y & 0xFFFF) << 16);



		#if PERMUTATION_VELOCITY != VELOCITY_TYPE_NONE
			const float2 Velocity = UnpackVelocity(PPLLNode.PackedVelocity);
		#endif
		#if PERMUTATION_VELOCITY == VELOCITY_TYPE_AVG
			AverageVelocity += Velocity;
			++ValidVelocityCount;
		#elif PERMUTATION_VELOCITY == VELOCITY_TYPE_CLOSEST
			if (ClosestDepth < OutNodeData.Depth) // Inverse-Z
			{
				ClosestVelocity = Velocity;
				ClosestDepth = OutNodeData.Depth;
			}
		#elif PERMUTATION_VELOCITY == VELOCITY_TYPE_MAX
			const float2 CurrentVelocity = Velocity;
			const float CurrentVelocityMagnitude2 = dot(CurrentVelocity, CurrentVelocity);
			if (CurrentVelocityMagnitude2 > MaxVelocityMagnitude2)
			{
				MaxVelocity = Velocity;
				MaxVelocityMagnitude2 = CurrentVelocityMagnitude2;
			}
		#endif		
		}

		Categorization.PixelCoverage = 1.0f - TotalTransmittance;

	#if PERMUTATION_VELOCITY == VELOCITY_TYPE_AVG
		OutVelocityTexture[PixelCoord] = EncodeVelocityToTexture(AverageVelocity / max(ValidVelocityCount, 1));
	#elif PERMUTATION_VELOCITY == VELOCITY_TYPE_CLOSEST
		OutVelocityTexture[PixelCoord] = EncodeVelocityToTexture(ClosestVelocity);
	#elif PERMUTATION_VELOCITY == VELOCITY_TYPE_MAX
		OutVelocityTexture[PixelCoord] = EncodeVelocityToTexture(MaxVelocity);
	#endif		
	}

	FNodeDesc NodeDesc;
	NodeDesc.Count = PixelRenderNodecount;
	NodeDesc.Offset = OffsetInStorage;
	OutCompactNodeIndex[PixelCoord] = EncodeNodeDesc(NodeDesc);

	Categorization.SampleCount = PixelRenderNodecount;
	OutCategorizationTexture[PixelCoord] = EncodeCategorizationData(Categorization);
}


#else // PERMUTATION_PPLL //////////////////////////////////////////////////////////////////////////////////////////////////////////////


#if PERMUTATION_VISIBILITY

void ComputeUniqueSamplesWithoutDepthTest(
	inout uint3 OutSamples[HAIR_VISIBILITY_MAXSAMPLECOUNT],
	inout FSampleSetDesc OutSet,
	const uint2 PixelCoord,
	const uint SampleCount,
	const float OpaqueDepth,
	Texture2DMS<uint, HAIR_VISIBILITY_MAXSAMPLECOUNT>  InMSAA_IDTexture,
	Texture2DMS<float, HAIR_VISIBILITY_MAXSAMPLECOUNT>  InMSAA_DepthTexture)
{
	OutSet.UniqueSampleCount = 0;
	OutSet.ValidSampleCount = 0;

	OutSet.HairSampleCount = clamp(SampleCount, 0, HAIR_VISIBILITY_MAXSAMPLECOUNT);
	const uint InvalidSample = 0xFFFF;

	float ClosestDepth = 0; // Inverse-Z
	for (uint SampleIt = 0; SampleIt < OutSet.HairSampleCount; ++SampleIt)
	{
		// Note: InMSAA_IDTexture contains both the primitive ID and tha material ID. However 
		// the material ID is constant along the primitive, so it is correct to use this as a 
		// sorting/deduplication key
		const uint PrimitiveId = InMSAA_IDTexture.Load(PixelCoord, SampleIt);
		const bool bIsValid = PrimitiveId != GetInvalidHairPrimitiveId();
		if (!bIsValid)
			continue;

		const float SampleDepth = InMSAA_DepthTexture.Load(PixelCoord, SampleIt);
		if (OpaqueDepth > SampleDepth) // Reverse-Z
			continue;

		++OutSet.ValidSampleCount;

		bool bAlreadyExist = false;
		for (uint UniqueIt = 0; UniqueIt < OutSet.UniqueSampleCount; ++UniqueIt)
		{
			const bool bIsSimilar = PrimitiveId == OutSamples[UniqueIt].x;

			if (bIsSimilar)
			{
				OutSamples[UniqueIt].y += 1;
				if (ClosestDepth < SampleDepth)
				{
					OutSamples[OutSet.UniqueSampleCount].z = SampleIt;
					ClosestDepth = SampleDepth;
				}
				bAlreadyExist = true;
				break;
			}
		}
		// todo: always takes the closest depth?
		if (!bAlreadyExist)
		{
			OutSamples[OutSet.UniqueSampleCount].x = PrimitiveId;
			OutSamples[OutSet.UniqueSampleCount].y = 1;
			OutSamples[OutSet.UniqueSampleCount].z = SampleIt;
			++OutSet.UniqueSampleCount;
		}
	}
}

#ifndef HAIR_VISIBILITY_MAXSAMPLECOUNT
#error HAIR_VISIBILITY_MAXSAMPLECOUNT is not defined
#endif

Texture2DMS<uint, HAIR_VISIBILITY_MAXSAMPLECOUNT> MSAA_IDTexture;
Texture2DMS<float, HAIR_VISIBILITY_MAXSAMPLECOUNT> MSAA_DepthTexture;

#if PERMUTATION_VIEWTRANSMITTANCE == 1
Texture2D<float> ViewTransmittanceTexture;
#endif

[numthreads(TILE_PIXEL_SIZE_X, TILE_PIXEL_SIZE_Y, 1)]
void MainCS(uint GroupIndex : SV_GroupIndex, uint3 DispatchThreadId : SV_DispatchThreadID)
{
	if (GroupIndex == 0)
	{
		AllocationNodeCount = 0;
		AllocationNodeOffset = 0;
	}

	uint2 PixelCoord = DispatchThreadId.xy + ResolutionOffset;
	if (HairVisibilityMSAASampleCount == 0 || PixelCoord.x >= OutputResolution.x || PixelCoord.y >= OutputResolution.y)
		PixelCoord = uint2(0, 0);

	FSampleSetDesc SampleDesc;

	const float OpaqueDepth = SceneTexturesStruct.SceneDepthTexture.Load(uint3(PixelCoord, 0)).r;
	uint3 Samples[HAIR_VISIBILITY_MAXSAMPLECOUNT];		// x:PrimitiveId|MaterialId, y:Weight, z:SampleIt
	ComputeUniqueSamplesWithoutDepthTest(
		Samples,
		SampleDesc,
		PixelCoord,
		HairVisibilityMSAASampleCount,
		OpaqueDepth,
		MSAA_IDTexture, 
		MSAA_DepthTexture);

	FNodeDesc NodeDesc;
	NodeDesc.Count = SampleDesc.UniqueSampleCount;
	NodeDesc.Offset = 0;

	InterlockedAdd(AllocationNodeCount, NodeDesc.Count, NodeDesc.Offset);
	GroupMemoryBarrierWithGroupSync();
	if (GroupIndex == 0 && AllocationNodeCount > 0)
	{
		InterlockedAdd(OutCompactNodeCounter[uint2(0, 0)], AllocationNodeCount, AllocationNodeOffset);
	}
	GroupMemoryBarrierWithGroupSync();

	// Allocate node space
	FCategorizationData Categorization = (FCategorizationData)0;
	if (NodeDesc.Count > 0)
	{
		NodeDesc.Offset += AllocationNodeOffset;

		// Store final sort node data 
		if (NodeDesc.Offset + NodeDesc.Count < MaxNodeCount)
		{
			for (uint OutIndex = 0; OutIndex < NodeDesc.Count; ++OutIndex)
			{
				const FVisSample VisSample = DecodeVisSample(Samples[OutIndex].x);

				// VisibilityData.Coverage8bit is a weight normalising to 1 the contribution of all the compacted samples. Because later it is weighted by Categorization.PixelCoverage.
				FNodeVis OutNodeVis;
				OutNodeVis.PrimitiveId	= VisSample.PrimitiveId;
				OutNodeVis.Depth		= MSAA_DepthTexture.Load(PixelCoord, Samples[OutIndex].z);
				OutNodeVis.Coverage8bit = To8bitCoverage(Samples[OutIndex].y / float(SampleDesc.ValidSampleCount));
				OutNodeVis.MaterialId	= VisSample.MaterialId;

				Categorization.TotalCoverage8bit += OutNodeVis.Coverage8bit;
				Categorization.ClosestDepth = max(Categorization.ClosestDepth, OutNodeVis.Depth); // Inverse-Z

				const uint StoreIndex = NodeDesc.Offset + OutIndex;
				OutCompactNodeData[StoreIndex] = OutNodeVis;
				OutCompactNodeCoord[StoreIndex] = (PixelCoord.x & 0xFFFF) | ((PixelCoord.y & 0xFFFF) << 16);
			}

			NodeDesc.Count = NodeDesc.Count;
			Categorization.SampleCount = NodeDesc.Count;
		}
	}

#if PERMUTATION_VIEWTRANSMITTANCE == 1
	Categorization.PixelCoverage = 1.0f - ViewTransmittanceTexture.Load(uint3(PixelCoord, 0));
#else
	Categorization.PixelCoverage = SampleDesc.ValidSampleCount / float(HAIR_VISIBILITY_MAXSAMPLECOUNT);
#endif

	OutCompactNodeIndex[PixelCoord] = EncodeNodeDesc(NodeDesc);
	OutCategorizationTexture[PixelCoord] = EncodeCategorizationData(Categorization);
}

#else // PERMUTATION_VISIBILITY

void ComputeUniqueSamplesWithoutDepthTest(
	inout uint3 OutSamples[HAIR_VISIBILITY_MAXSAMPLECOUNT],
	inout FSampleSetDesc OutSet,
	const uint2 PixelCoord,
	const uint SampleCount,
	const float OpaqueDepth,
	Texture2DMS<uint4, HAIR_VISIBILITY_MAXSAMPLECOUNT>  InMSAA_IDTexture,
	Texture2DMS<float, HAIR_VISIBILITY_MAXSAMPLECOUNT>  InMSAA_DepthTexture)
{
	OutSet.UniqueSampleCount = 0;
	OutSet.ValidSampleCount = 0;

	OutSet.HairSampleCount = clamp(SampleCount, 0, HAIR_VISIBILITY_MAXSAMPLECOUNT);
	const uint InvalidSample = 0xFFFF;

#if PERMUTATION_MATERIAL_COMPACTION == 1
	float4 UniqueTangentAndDepths[HAIR_VISIBILITY_MAXSAMPLECOUNT];
#endif
	float ClosestDepth = 0; // Inverse-Z
	for (uint SampleIt = 0; SampleIt < OutSet.HairSampleCount; ++SampleIt)
	{
		const uint4 EncodedData = InMSAA_IDTexture.Load(PixelCoord, SampleIt);
		const bool bIsValid = IsValidHairData(EncodedData);
		if (!bIsValid)
			continue;

		const float SampleDepth = InMSAA_DepthTexture.Load(PixelCoord, SampleIt);
		if (OpaqueDepth > SampleDepth) // Inverse-Z
			continue;

		++OutSet.ValidSampleCount;

	#if PERMUTATION_MATERIAL_COMPACTION == 1
		const float SceneDepth = ConvertFromDeviceZ(SampleDepth);
	#endif

		const FVisibilityData VisibilityData = DecodeVisibilityData(EncodedData);
		bool bAlreadyExist = false;
		for (uint UniqueIt = 0; UniqueIt < OutSet.UniqueSampleCount; ++UniqueIt)
		{
		#if PERMUTATION_MATERIAL_COMPACTION == 1
			const bool bIsSimilar  = 
				VisibilityData.PrimitiveId == OutSamples[UniqueIt].x ||
				(abs(dot(UniqueTangentAndDepths[UniqueIt].xyz, VisibilityData.Tangent)) > CosTangentThreshold &&
					abs(UniqueTangentAndDepths[UniqueIt].w - SceneDepth) < DepthTheshold);
		#else
			const bool bIsSimilar = VisibilityData.PrimitiveId == OutSamples[UniqueIt].x;
		#endif

			if (bIsSimilar)
			{
				OutSamples[UniqueIt].y += 1;
				if (ClosestDepth < SampleDepth)
				{
					OutSamples[OutSet.UniqueSampleCount].z = SampleIt;
					ClosestDepth = SampleDepth;
				}
				bAlreadyExist = true;
				break;
			}
		}

		if (!bAlreadyExist)
		{
		#if PERMUTATION_MATERIAL_COMPACTION == 1
			UniqueTangentAndDepths[OutSet.UniqueSampleCount] = float4(VisibilityData.Tangent, SceneDepth);
		#endif

			OutSamples[OutSet.UniqueSampleCount].x = VisibilityData.PrimitiveId;
			OutSamples[OutSet.UniqueSampleCount].y = 1;
			OutSamples[OutSet.UniqueSampleCount].z = SampleIt;
			++OutSet.UniqueSampleCount;
		}
	}
}

#ifndef HAIR_VISIBILITY_MAXSAMPLECOUNT
#error HAIR_VISIBILITY_MAXSAMPLECOUNT is not defined
#endif

Texture2DMS<uint4, HAIR_VISIBILITY_MAXSAMPLECOUNT> MSAA_IDTexture;
Texture2DMS<float, HAIR_VISIBILITY_MAXSAMPLECOUNT> MSAA_DepthTexture;
Texture2DMS<float4,HAIR_VISIBILITY_MAXSAMPLECOUNT> MSAA_MaterialTexture;
Texture2DMS<float4,HAIR_VISIBILITY_MAXSAMPLECOUNT> MSAA_AttributeTexture;

#if PERMUTATION_VELOCITY != VELOCITY_TYPE_NONE
Texture2DMS<float2, HAIR_VISIBILITY_MAXSAMPLECOUNT> MSAA_VelocityTexture;
#endif

#if PERMUTATION_VIEWTRANSMITTANCE == 1
Texture2D<float> ViewTransmittanceTexture;
#endif

[numthreads(TILE_PIXEL_SIZE_X, TILE_PIXEL_SIZE_Y, 1)]
void MainCS(uint GroupIndex : SV_GroupIndex, uint3 DispatchThreadId : SV_DispatchThreadID)
{
	if (GroupIndex == 0)
	{
		AllocationNodeCount = 0;
		AllocationNodeOffset = 0;
	}

	uint2 PixelCoord = DispatchThreadId.xy + ResolutionOffset;
	if (HairVisibilityMSAASampleCount == 0 || PixelCoord.x >= OutputResolution.x || PixelCoord.y >= OutputResolution.y)
		PixelCoord = uint2(0, 0);

	FSampleSetDesc SampleDesc;

	const float OpaqueDepth = SceneTexturesStruct.SceneDepthTexture.Load(uint3(PixelCoord, 0)).r;
	uint3 Samples[HAIR_VISIBILITY_MAXSAMPLECOUNT]; // x:PrimitiveId, y:Weight, z:SampleIndex
	ComputeUniqueSamplesWithoutDepthTest(
		Samples,
		SampleDesc,
		PixelCoord,
		HairVisibilityMSAASampleCount,
		OpaqueDepth,
		MSAA_IDTexture, 
		MSAA_DepthTexture);

	FNodeDesc NodeDesc;
	NodeDesc.Count = SampleDesc.UniqueSampleCount;
	NodeDesc.Offset = 0;

	InterlockedAdd(AllocationNodeCount, NodeDesc.Count, NodeDesc.Offset);
	GroupMemoryBarrierWithGroupSync();
	if (GroupIndex == 0 && AllocationNodeCount > 0)
	{
		InterlockedAdd(OutCompactNodeCounter[uint2(0, 0)], AllocationNodeCount, AllocationNodeOffset);
	}
	GroupMemoryBarrierWithGroupSync();

	// Allocate node space
	FCategorizationData Categorization = (FCategorizationData)0;
	if (NodeDesc.Count > 0)
	{
		NodeDesc.Offset += AllocationNodeOffset;

		// Store final sort node data 
		if (NodeDesc.Offset + NodeDesc.Count < MaxNodeCount)
		{
			#if PERMUTATION_VELOCITY == VELOCITY_TYPE_AVG
			float2 AverageVelocity = 0;
			uint ValidVelocityCount = 0;
			#endif

			#if PERMUTATION_VELOCITY == VELOCITY_TYPE_CLOSEST
			float2 ClosestEncodedVelocity = 0;
			float ClosestDepth = 0; // Inverse-Z
			#endif		

			#if PERMUTATION_VELOCITY == VELOCITY_TYPE_MAX
			float2 MaxEncodedVelocity = 0;
			float MaxVelocityMagnitude2 = 0;
			#endif		

			for (uint OutIndex = 0; OutIndex < NodeDesc.Count; ++OutIndex)
			{
				const uint SampleIt = Samples[OutIndex].z;

				// Read all material data
				// #hair_todo: simplify the encoding. technically we don't need to decompress the visibility data, 
				// as we only need to patch the weight
				// #hair_todo: merge similar sample
				FNodeData OutNodeData;
				{
					const float SampleDepth = MSAA_DepthTexture.Load(PixelCoord, SampleIt);
					const uint4 EncodedData = MSAA_IDTexture.Load(PixelCoord, SampleIt);
					FVisibilityData VisibilityData = DecodeVisibilityData(EncodedData);
					// VisibilityData.Coverage8bit is a weight normalising to 1 the contribution of all the compacted samples. Because later it is weighted by Categorization.PixelCoverage.
					VisibilityData.Coverage8bit = To8bitCoverage(Samples[OutIndex].y / float(SampleDesc.ValidSampleCount));
					Categorization.TotalCoverage8bit += VisibilityData.Coverage8bit;
					Categorization.ClosestDepth = max(Categorization.ClosestDepth, SampleDepth); // Inverse-Z

					float4 BaseColorAndRoughness = MSAA_MaterialTexture.Load(PixelCoord, SampleIt);
					BaseColorAndRoughness.xyz = BaseColorAndRoughness.xyz * BaseColorAndRoughness.xyz; // Cheap gamma encoding since this is encoded into 8bit target
					const float Specular = MSAA_AttributeTexture.Load(PixelCoord, SampleIt).x;

					OutNodeData = ConvertToNodeData(
						SampleDepth,
						VisibilityData,
						BaseColorAndRoughness.xyz,
						BaseColorAndRoughness.w,
						Specular);

					#if PERMUTATION_VELOCITY == VELOCITY_TYPE_AVG
					const float2 EncodedVelocity = MSAA_VelocityTexture.Load(PixelCoord, SampleIt);
					AverageVelocity += DecodeVelocityFromTexture(EncodedVelocity);
					++ValidVelocityCount;
					#endif			

					#if PERMUTATION_VELOCITY == VELOCITY_TYPE_CLOSEST
					const float2 EncodedVelocity = MSAA_VelocityTexture.Load(PixelCoord, SampleIt);
					if (ClosestDepth < SampleDepth) // Inverse-Z
					{
						ClosestEncodedVelocity = EncodedVelocity;
						ClosestDepth = SampleDepth;
					}

					#endif

					#if PERMUTATION_VELOCITY == VELOCITY_TYPE_MAX
					const float2 EncodedVelocity = MSAA_VelocityTexture.Load(PixelCoord, SampleIt);
					const float2 CurrentVelocity = DecodeVelocityFromTexture(EncodedVelocity);
					const float CurrentVelocityMagnitude2 = dot(CurrentVelocity, CurrentVelocity);
					if (CurrentVelocityMagnitude2 > MaxVelocityMagnitude2)
					{
						MaxEncodedVelocity = EncodedVelocity;
						MaxVelocityMagnitude2 = CurrentVelocityMagnitude2;
					}
					#endif			
				}

				const uint StoreIndex = NodeDesc.Offset + OutIndex;
				OutCompactNodeData[StoreIndex] = OutNodeData;
				OutCompactNodeCoord[StoreIndex] = (PixelCoord.x & 0xFFFF) | ((PixelCoord.y & 0xFFFF) << 16);
			}

			#if PERMUTATION_VIEWTRANSMITTANCE == 1
			Categorization.PixelCoverage = 1.0f - ViewTransmittanceTexture.Load(uint3(PixelCoord,0));
			#else
			Categorization.PixelCoverage = SampleDesc.ValidSampleCount / float(HAIR_VISIBILITY_MAXSAMPLECOUNT);
			#endif

			#if PERMUTATION_VELOCITY == VELOCITY_TYPE_AVG
			OutVelocityTexture[PixelCoord] = EncodeVelocityToTexture(AverageVelocity / max(ValidVelocityCount, 1));
			#endif		

			#if PERMUTATION_VELOCITY == VELOCITY_TYPE_CLOSEST
			OutVelocityTexture[PixelCoord] = ClosestEncodedVelocity;
			#endif		

			#if PERMUTATION_VELOCITY == VELOCITY_TYPE_MAX
			OutVelocityTexture[PixelCoord] = MaxEncodedVelocity;
			#endif		

			NodeDesc.Count = NodeDesc.Count;
			Categorization.SampleCount = NodeDesc.Count;
		}
	}

	OutCompactNodeIndex[PixelCoord] = EncodeNodeDesc(NodeDesc);
	OutCategorizationTexture[PixelCoord] = EncodeCategorizationData(Categorization);
}

#endif  // PERMUTATION_VISIBILITY
#endif // PERMUTATION_PPLL


