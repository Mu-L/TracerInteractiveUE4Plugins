// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

#include "../Common.ush"

//#define SceneTexturesStruct DeepShadowPass.SceneTextures

#include "../SceneTexturesCommon.ush"
#include "HairStrandsDeepShadowCommon.ush"
#include "../DeferredShadingCommon.ush"
#include "HairStrandsVisibilityCommon.ush"
#include "../VelocityCommon.ush"

#include "/Engine/Generated/Material.ush"
#include "/Engine/Generated/VertexFactory.ush"

#ifndef HAIR_RENDER_MODE
#error Undefined hair render mode
#endif

#define SUPPORT_OPACITY_MASK 0

#if HAIR_RENDER_MODE == RENDER_MODE_MSAA || HAIR_RENDER_MODE == RENDER_MODE_PPLL
#define SUPPORT_MATERIAL_PROPERTY 1
#endif

#if HAIR_RENDER_MODE == RENDER_MODE_TRANSMITTANCE || HAIR_RENDER_MODE == RENDER_MODE_TRANSMITTANCE_AND_HAIRCOUNT
#define SUPPORT_MATERIAL_PROPERTY 0
#endif

#if HAIR_RENDER_MODE == RENDER_MODE_MSAA_VISIBILITY
#define SUPPORT_MATERIAL_PROPERTY 0
#endif

#if HAIR_RENDER_MODE == RENDER_MODE_PPLL 
uint HairVisibilityPass_MaxPPLLNodeCount;
RWTexture2D<uint> PPLLCounter;
RWTexture2D<uint> PPLLNodeIndex;
RWStructuredBuffer<FPPLLNodeData> PPLLNodes;
#endif

uint HairVisibilityPass_HairClusterIndex;
uint HairVisibilityPass_HairMaterialId;

#if HAIR_RENDER_MODE == RENDER_MODE_PPLL
EARLYDEPTHSTENCIL	// Required for UAV operations to not happen.
#endif
void MainVisibility(
#if HAIR_RENDER_MODE == RENDER_MODE_MSAA_VISIBILITY
	uint HairPrimitiveId : HAIR_PRIMITIVE_ID
#else
	centroid FVertexFactoryInterpolantsVSToPS Interpolants
#endif
	, in float4 SvPosition	: SV_Position
#if HAIR_RENDER_MODE == RENDER_MODE_MSAA || HAIR_RENDER_MODE == RENDER_MODE_PPLL
	, centroid in float WorldStrandRadius : TEXCOORD8
	, const float4 PackedVelocityA : TEXCOORD9
	, const float4 PackedVelocityC : TEXCOORD12
#elif HAIR_RENDER_MODE == RENDER_MODE_TRANSMITTANCE || HAIR_RENDER_MODE == RENDER_MODE_TRANSMITTANCE_AND_HAIRCOUNT
	, centroid in float WorldStrandRadius : TEXCOORD8
#endif
	  OPTIONAL_IsFrontFace
#if HAIR_RENDER_MODE == RENDER_MODE_TRANSMITTANCE
	, out float OutColor0 : SV_Target0
#elif HAIR_RENDER_MODE == RENDER_MODE_TRANSMITTANCE_AND_HAIRCOUNT
	, out float OutColor0 : SV_Target0
	, out float OutColor1 : SV_Target1
#elif HAIR_RENDER_MODE == RENDER_MODE_MSAA
	, out uint4 OutColor0	: SV_Target0
  #if SUPPORT_MATERIAL_PROPERTY
	, out float4 OutColor1	: SV_Target1
	, out float4 OutColor2	: SV_Target2
	, out float2 OutColor3	: SV_Target3
  #endif
#elif HAIR_RENDER_MODE == RENDER_MODE_MSAA_VISIBILITY
	, out uint OutColor0 : SV_Target0
#endif
)
{
	ResolvedView = ResolveView();

	#if SUPPORT_OPACITY_MASK
	{
		FMaterialPixelParameters MaterialParameters = GetMaterialPixelParameters(Interpolants, SvPosition);
		FPixelMaterialInputs PixelMaterialInputs;
		CalcMaterialParameters(MaterialParameters, PixelMaterialInputs, SvPosition, bIsFrontFace);
		clip(GetMaterialMask(PixelMaterialInputs));
	}
	#endif

#if HAIR_RENDER_MODE != RENDER_MODE_MSAA_VISIBILITY
	float Coverage = 1;
	{
		FHairRenderInfo HairRenderInfo = GetHairRenderInfo(ResolvedView.HairRenderInfo);
		const float SceneDepth = ConvertFromDeviceZ(SvPosition.z); // Linear depth in world unit
		const float PixelRadius = HairRenderInfo.bIsOrthoView ? HairRenderInfo.RadiusAtDepth1Primary : SceneDepth * HairRenderInfo.RadiusAtDepth1Primary; // Not correct but the coverage is not used (we count instead the number of sub-sample covered)
		const float StrandRealRadius = WorldStrandRadius;
		Coverage = StrandRealRadius / max(StrandRealRadius, PixelRadius);
	}
#endif

#if HAIR_RENDER_MODE == RENDER_MODE_TRANSMITTANCE
	OutColor0 = saturate(1.0f - Coverage);
#elif HAIR_RENDER_MODE == RENDER_MODE_TRANSMITTANCE_AND_HAIRCOUNT
	OutColor0 = saturate(1.0f - Coverage);
	OutColor1 = Coverage;
#endif

#if HAIR_RENDER_MODE == RENDER_MODE_MSAA || HAIR_RENDER_MODE == RENDER_MODE_PPLL
	FVisibilityData VisibilityData;
  #if VF_STRAND_HAIR
	VisibilityData.Tangent = normalize(Interpolants.TangentToWorld2.xyz);
	VisibilityData.PrimitiveId = Interpolants.HairPrimitiveId;
  #else
	VisibilityData.Tangent = float3(0, 0, 1);
	VisibilityData.PrimitiveId = 0;
  #endif
	VisibilityData.ClusterId = HairVisibilityPass_HairClusterIndex;
	VisibilityData.Coverage8bit = To8bitCoverage(Coverage);

	half3 BaseColor = 0;
	float Roughness = 0;
	float Specular  = 0;
	float2 Velocity = 0;
	float2 EncodedVelocity = 0;
#if SUPPORT_MATERIAL_PROPERTY
	{
		FMaterialPixelParameters MaterialParameters = GetMaterialPixelParameters(Interpolants, SvPosition);
		FPixelMaterialInputs PixelMaterialInputs;
	
		float4 ScreenPosition = SvPositionToResolvedScreenPosition(SvPosition);
		float3 TranslatedWorldPosition = SvPositionToResolvedTranslatedWorld(SvPosition);
		CalcMaterialParametersEx(MaterialParameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);

		BaseColor		 = GetMaterialBaseColor(PixelMaterialInputs);
		Roughness		 = GetMaterialRoughness(PixelMaterialInputs);
		half  Metallic	 = GetMaterialMetallic(PixelMaterialInputs);
		Specular		 = GetMaterialSpecular(PixelMaterialInputs);
		float MaterialAO = GetMaterialAmbientOcclusion(PixelMaterialInputs);

		VisibilityData.Tangent = mul(normalize(GetMaterialNormalRaw(PixelMaterialInputs)), MaterialParameters.TangentToWorld);
	}
	{
		Velocity = Calculate2DVelocity(PackedVelocityA, PackedVelocityC);
		EncodedVelocity = EncodeVelocityToTexture(Velocity);
	}
#endif
#endif

#if HAIR_RENDER_MODE == RENDER_MODE_MSAA
	OutColor0 = EncodeVisibilityData(VisibilityData);
	OutColor1 = float4(sqrt(BaseColor), Roughness);
	OutColor2 = float4(Specular,0,0,0);
	OutColor3 = EncodedVelocity;
#endif

#if HAIR_RENDER_MODE == RENDER_MODE_PPLL
	const uint2 PixelCoord = SvPosition.xy;

	float2 NDC = SvPosition.xy / SvPosition.w;
	float2 ScreenUV = NDC * ResolvedView.ScreenPositionScaleBias.xy + ResolvedView.ScreenPositionScaleBias.wz;

	// Allocate space for a new node
	uint NodeIndex;
	InterlockedAdd(PPLLCounter[uint2(0, 0)], 1, NodeIndex);

	if (NodeIndex < HairVisibilityPass_MaxPPLLNodeCount)
	{
		// If we can append new node, add it and make it point to the node previously in head of list
		uint NextNodeIndex;
		InterlockedExchange(PPLLNodeIndex[PixelCoord], NodeIndex, NextNodeIndex);
		const FPPLLNodeData Node = ConvertToPPLLNodeData(SvPosition.z, VisibilityData, BaseColor, Roughness, Specular, Velocity, NextNodeIndex);
		PPLLNodes[NodeIndex] = Node;
	}
#endif

#if HAIR_RENDER_MODE == RENDER_MODE_MSAA_VISIBILITY
  #if VF_STRAND_HAIR
	OutColor0 = EncodeVisSample(HairPrimitiveId, HairVisibilityPass_HairMaterialId);
  #else
	OutColor0 = 0;
  #endif
#endif
}


