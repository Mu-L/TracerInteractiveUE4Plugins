// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	HeightFogPixelShader.usf: Scene fogging pixel shader.
=============================================================================*/

#include "Common.ush"
#include "SceneTexturesCommon.ush"
#include "SHCommon.ush"
#include "HeightFogCommon.ush"

float bOnlyOnRenderedOpaque;

Texture2D OcclusionTexture;
SamplerState OcclusionSampler;

void ExponentialPixelMain(
	float2 TexCoord : TEXCOORD0,
	float3 ScreenVector : TEXCOORD1,
	float4 SVPos : SV_POSITION,
	out float4 OutColor : SV_Target0
	)
{
	#if SCENE_TEXTURES_DISABLED
		float SceneDepth = SCENE_TEXTURES_DISABLED_SCENE_DEPTH_VALUE;
	#else
		float DeviceZ = Texture2DSampleLevel(SceneTexturesStruct.SceneDepthTexture, SceneTexturesStruct.SceneDepthTextureSampler, TexCoord, 0).r;

		// Fetch the depth buffer Z / W value, solve for W
		float SceneDepth = ConvertFromDeviceZ(DeviceZ);
	#endif

	bool bIsRendered = (DeviceZ != 0.0);

	float3 WorldPositionRelativeToCamera = ScreenVector.xyz * SceneDepth;

	float ZSlice = log2(SceneDepth * View.VolumetricFogGridZParams.x + View.VolumetricFogGridZParams.y) * View.VolumetricFogGridZParams.z * View.VolumetricFogInvGridSize.z;
	float3 VolumeUV = float3((SVPos.xy - View.ViewRectMin.xy) * View.VolumetricFogSVPosToVolumeUV, ZSlice);

	float4 HeightFogInscatteringAndOpacity = CalculateHeightFog(WorldPositionRelativeToCamera);
	float4 FogInscatteringAndOpacity = CombineVolumetricFog(HeightFogInscatteringAndOpacity, VolumeUV);

	float LightShaftMask = Texture2DSample(OcclusionTexture, OcclusionSampler, TexCoord).x;
	FogInscatteringAndOpacity.rgb *= LightShaftMask;

#if USE_PREEXPOSURE 
	FogInscatteringAndOpacity.rgb *= View.PreExposure;
#endif

	if (bOnlyOnRenderedOpaque > 0.0 && !bIsRendered)
	{
		FogInscatteringAndOpacity.rgb = 0;
		FogInscatteringAndOpacity.a = 1;
	}

	OutColor = RETURN_COLOR(float4(FogInscatteringAndOpacity.rgb, FogInscatteringAndOpacity.w));
}
