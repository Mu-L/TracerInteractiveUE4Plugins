// Copyright 1998-2018 Epic Games, Inc. All Rights Reserved.

/*=============================================================================
NiagaraSimulationShader.usf: 
=============================================================================*/
#pragma warning(disable:4008)

#if GPU_SIMULATION
	#include "/Engine/Public/Platform.ush"
	#include "Common.ush"
#else
	const static float PI = 3.1415926535897932f;
#endif
	const static float TWO_PI = 3.1415926535897932f*2.0f;

#include "Definitions.usf"


/* -----------------------------------------------------------------
 * GPU simulation utility functions
 * -----------------------------------------------------------------
 */
#if GPU_SIMULATION

	#include "SceneTexturesCommon.ush"

	static uint3 GDispatchThreadId;
	static uint GCurrentPhase;
	uint EmitterTickCounter;

	#define THREADGROUP_SIZE 64

	float4 Modulo(float4 x, float4 y){ return fmod(x,y); }
	float3 Modulo(float3 x, float3 y){ return fmod(x,y); }
	float2 Modulo(float2 x, float2 y){ return fmod(x,y); }
	float Modulo(float x, float y){ return fmod(x,y); }


	// 4D random number generator inspired by PCGs (permuted congruential generator)
	// COPY FROM RANDOM.USH, which we can't easily include here due to a sizable dependency chain
	uint4 NiagaraRand4DPCG32(int4 p)
	{
		// taking a signed int then reinterpreting as unsigned gives good behavior for negatives
		uint4 v = uint4(p);

		// Linear congruential step.
		v = v * 1664525u + 1013904223u;

		// swapping low and high bits makes all 32 bits pretty good
		v = v * (1u << 16u) + (v >> 16u);

		// final shuffle
		v.x += v.y*v.w;
		v.y += v.z*v.x;
		v.z += v.x*v.y;
		v.w += v.y*v.z;
		v.x += v.y*v.w;
		v.y += v.z*v.x;
		v.z += v.x*v.y;
		v.w += v.y*v.z;

		return v;
	}



	// using Marc's PCG random implementation, sequentially; initially seed with DispatchThreadID and tick counter,
	// then repeat seeding with the result from the PRNG; should be deterministic
	// TODO: use this in the VM for CPU sims as well
	//
	static uint4 RandomVal = 2308975;
	float4 rand4()
	{
		RandomVal = NiagaraRand4DPCG32( int4(GDispatchThreadId+(RandomVal/573).xyz, RandomVal.x/921) + int4(EmitterTickCounter.xxxx));
		return float4(RandomVal.xyzw) / float4(0xFFFFFFFFu,0xFFFFFFFFu,0xFFFFFFFFu,0xFFFFFFFFu);
	}

	float rand(float x)
	{
		return rand4().x * x;
	}

	float2 rand(float2 x)
	{
		float4 rnd = rand4();
		return float2(rnd.x, rnd.y) * x;
	}

	float3 rand(float3 x)
	{
		float4 rnd = rand4();
		return float3(rnd.x, rnd.y, rnd.z) * x;
	}

	float4 rand(float4 x) 
	{
		return rand4() * x;
	}

	int rand(int x)
	{
		RandomVal = NiagaraRand4DPCG32(int4(GDispatchThreadId + (RandomVal / 57843).xyz, 54121) + int4(EmitterTickCounter.xxxx));
		return RandomVal.x % x+1;
	}

#else

	//Temporary random hacks
	float2 rand(float2 x)
	{
		return float2(rand(x.x), rand(x.y));
	}

	float3 rand(float3 x)
	{
		return float3(rand(x.x), rand(x.y), rand(x.z));
	}

	float4 rand(float4 x) 
	{
		return float4(rand(x.x), rand(x.y), rand(x.z), rand(x.w));
	}

	int rand(int x);
#endif


/* -----------------------------------------------------------------
 * VM simulation function declarations
 * -----------------------------------------------------------------
 */
#if VM_SIMULATION
	float noise(float x);
	float noise(float2 x);
	float noise(float3 x);

	//Total hack to get around the cross compiler converting fmod() to "X - (Y * trunc(X/Y))";
	//On gpu just define these as fmod(x,y)
	float4 Modulo(float4 x, float4 y);
	float3 Modulo(float3 x, float3 y);
	float2 Modulo(float2 x, float2 y);
	float Modulo(float x, float y);

	/** Returns the index for this particle in the current execution context. On gpu this'll likely be derived from DispatchThreadId */
	int ExecIndex();

	//Some functions that we use to map to special VM operations for reading in data.
	//TODO: replace with proper buffer reading capability and use standard hlsl.
	int AcquireIndex(int DataSetID, bool DoAcquire);

	void AcquireID(int DataSetID, out int IDIndex, out int IDAcquireTag);
	void UpdateID(int DataSetID, int IDIndex, int InstanceIndex);

	float InputDataFloat(int DataSetIndex, int RegisterIdx);  //DataSetIndex is 0 for main dataset
	int InputDataInt(int DataSetIndex, int RegisterIdx);
	bool InputDataBool(int DataSetIndex, int RegisterIdx);

	float InputDataNoadvanceFloat(int DataSetIndex, int RegisterIdx);  //DataSetIndex is 0 for main dataset
	int InputDataNoadvanceInt(int DataSetIndex, int RegisterIdx);
	bool InputDataNoadvanceBool(int DataSetIndex, int RegisterIdx);

	void OutputDataFloat(int DataSetIndex, int RegisterIndex, int InstanceIndex, float Value);
	void OutputDataInt(int DataSetIndex, int RegisterIndex, int InstanceIndex, int Value);
	void OutputDataBool(int DataSetIndex, int RegisterIndex, int InstanceIndex, bool Value);
#endif




/* -----------------------------------------------------------------
 * GPU simulation code
 * -----------------------------------------------------------------
 */
#if GPU_SIMULATION
	static uint GSpawnStartInstance;
		
	/* Parameters for spawning and simulations
	 */
	uint UpdateStartInstance;
	uint SpawnedInstances;
	uint NumIndicesPerInstance;

	uint ComponentBufferSizeRead;
	uint ComponentBufferSizeWrite;
	int	NumEventsPerParticle;
	int NumParticlesPerEvent;
	uint CopyInstancesBeforeStart;


	/* Buffers for particle data and DrawIndirect calls
	 */
	Buffer<float> InputFloat;
	Buffer<int> InputInt;
	RWBuffer<int> RWOutputInt;
	RWBuffer<float> RWOutputFloat;
	RWBuffer<uint> RWDataSetIndices;
	Buffer<uint> ReadDataSetIndices;


	//TODO: IDs for GPU
//	void AcquireID(int DataSetID, out int IDIndex, out int IDAcquireTag);
// 	void UpdateID(int DataSetID, int IDIndex, int InstanceIndex);



	/* Returns the current instance index relative to the operation (spawn/update)
	 */
	int ExecIndex()
	{
		if (GCurrentPhase == 0)
		{
			return UpdateStartInstance + GDispatchThreadId.x - GSpawnStartInstance;
		}
		else 
		{
			return UpdateStartInstance + GDispatchThreadId.x;
		}
	}


	/* Acquire an output index - the default index is the scratch instance; one additional instance is allocated 
	 *	at the end of the buffer, so no branching on -1 is necessary during OutputData operations
	 */
	int AcquireIndex(int DataSetID, bool bDoAcquire)
	{
		int PrevIdx = GSpawnStartInstance + SpawnedInstances;	// scratch instance as default; write to that for dead particles
		if(bDoAcquire == true)
		{
			// Have to use uint's here to avoid PS4 compiler warnings about InterlockedAdd, cannot propagate uint due to CPU VM limitations...
			uint RetPrevIdx;
			InterlockedAdd((uint)RWDataSetIndices[DataSetID*5+1], (uint)1U, RetPrevIdx);
			PrevIdx = (int)RetPrevIdx;
		}
		return PrevIdx;
	}



	/* ---------------------------------------------------------------------
	 * InputData operations 
	 * ---------------------------------------------------------------------
	 */
	float InputDataFloat(int DataSetIndex, int RegisterIdx, int InstanceIdx)
	{
		return InputFloat[RegisterIdx*ComponentBufferSizeRead + InstanceIdx];
	}

	float InputDataInt(int DataSetIndex, int RegisterIdx, int InstanceIdx)
	{
		return InputInt[RegisterIdx*ComponentBufferSizeRead + InstanceIdx];
	}
	
	bool InputDataBool(int DataSetIndex, int RegisterIdx, int InstanceIdx)
	{
		return InputInt[RegisterIdx*ComponentBufferSizeRead + InstanceIdx] == -1;
	}


	/* ---------------------------------------------------------------------
	 * OutputData operations 
	 * ---------------------------------------------------------------------
	 */
	void OutputDataFloat(int DataSetIndex, int RegisterIndex, int InstanceIndex, float Value)
	{
		RWOutputFloat[RegisterIndex*ComponentBufferSizeWrite + InstanceIndex + UpdateStartInstance] = Value;
	}

	void OutputDataInt(int DataSetIndex, int RegisterIndex, int InstanceIndex, int Value)
	{
		RWOutputInt[RegisterIndex*ComponentBufferSizeWrite + InstanceIndex + UpdateStartInstance] = Value;
	}

	void OutputDataBool(int DataSetIndex, int RegisterIndex, int InstanceIndex, bool Value)
	{
		RWOutputInt[RegisterIndex*ComponentBufferSizeWrite + InstanceIndex + UpdateStartInstance] = Value ? -1 : 0;
	}

	void EnterStatScope(int ID)	{}
	void ExitStatScope()	{}
#endif

//Include the simulation shader code generated by the node graph.
#include "/Engine/Generated/NiagaraEmitterInstance.ush"


#if GPU_SIMULATION

/* 
 *	CS wrapper for our generated code; calls spawn and update functions on the corresponding instances in the buffer
 */

[numthreads(THREADGROUP_SIZE, 1, 1)]
void SimulateMainComputeCS(
	uint3 GroupId : SV_GroupID,
	uint3 DispatchThreadId : SV_DispatchThreadID,
	uint3 GroupThreadId : SV_GroupThreadID)
{
	GDispatchThreadId = DispatchThreadId;

	/*
	if(CopyInstancesBeforeStart == 1)
	{
		UpdateStartInstance = 0;
	}
	*/

	uint InstanceID = UpdateStartInstance + DispatchThreadId.x;
	GSpawnStartInstance = ReadDataSetIndices[1];				// needed by ExecIndex()
	int MaxInstances = GSpawnStartInstance + SpawnedInstances;

	if(InstanceID < UpdateStartInstance + MaxInstances )
	{
		// calculate event index for the current instance; this is primarily for spawn events, where we do a single read from a secondary DataSet for a subset of particles
		//  for all-particle events, this will always end up being 0 because NumParticlesPerEvent = total particles in the set
		uint EventIndex = 0; //(InstanceID-SimulateStartInstance) / NumParticlesPerEvent;

		// before the simulation start - either update or copy
		//
		if(InstanceID < GSpawnStartInstance)
		{
			// copy instances before simulation start inst (e.g. for event spawns)
			/*
			if(CopyInstancesBeforeStart)
			{
				CopyInstance(InstanceID);
			}
			else
			*/
			{
				GCurrentPhase = 1;
				SimulateMain(InstanceID, EventIndex, 1);
			}

		}

		// after simulation start - spawn phase
		//
		else if(InstanceID >= GSpawnStartInstance)
		{
			GCurrentPhase = 0;
			SimulateMain(InstanceID, EventIndex, 0);		// SimulateMain spawn phase
		}
	}

	// fill in the rest of RWDataSetIndices for the DrawIndirect call for the main data set; number of instances is incremented in AcquireIndex
	if(InstanceID == 0)
	{
		RWDataSetIndices[0] = NumIndicesPerInstance;		// IndexCountPerInstance; passed in from the renderer - TODO: support multiple renderers with multiple indirect draw calls
		RWDataSetIndices[2] = 0;		// StartIndexLocation
		RWDataSetIndices[3] = 0;		// BaseVertexLocation
		RWDataSetIndices[4] = 0;		// StartInstanceLocation
	}
}

#endif//GPU_SIMULATION
