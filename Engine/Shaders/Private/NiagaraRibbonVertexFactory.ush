// Copyright 1998-2018 Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	ParticleBeamTrailVertexFactory.hlsl: Particle vertex factory shader code.
=============================================================================*/

#include "VertexFactoryCommon.ush"




float3 TransformPosition(float3 InPosition)
{
	return mul(float4(InPosition,1.0), NiagaraSpriteVF.LocalToWorld).xyz;
}

float3 TransformVector(float3 InVector)
{
	return mul(float4(InVector,0.0), NiagaraSpriteVF.LocalToWorldInverseTransposed).xyz;
}


/*********************************************************************************
 *							Particle specific
 *********************************************************************************/
/*
float3 GetNiagaraParticlePosition(uint InstanceID)
{
	if (NiagaraRibbonVF.PositionDataOffset == -1)
	{
		return TransformPosition(float3(0.0f, 0.0f, 0.0f));
	}
	return TransformPosition(GetVec3(NiagaraRibbonVF.PositionDataOffset, InstanceID));
}
float GetNiagaraParticleRibbonWidth(uint InstanceID)
{
	if (NiagaraRibbonVF.WidthDataOffset == -1)
	{
		return 1.0f;
	}
	return GetFloat(NiagaraRibbonVF.WidthDataOffset, InstanceID);
}
float GetNiagaraParticleRibbonTwist(uint InstanceID)
{
	if (NiagaraRibbonVF.TwistDataOffset == -1)
	{
		return 0.0f;
	}
	return GetFloat(NiagaraRibbonVF.TwistDataOffset, InstanceID);
}
float4 GetNiagaraParticleColor(uint InstanceID)
{
	if (NiagaraRibbonVF.ColorDataOffset == -1)
	{
		return float4(1.0f, 1.0f, 1.0f, 1.0f);
	}
	return GetVec4(NiagaraRibbonVF.ColorDataOffset, InstanceID);
}

#if NUM_DYNAMIC_PARAMETERS > 0
float4 GetNiagaraParticleDynamicParameters(uint InstanceID)
{
	if (NiagaraRibbonVF.MaterialParamDataOffset == -1)
	{
		return float4(1.0f, 1.0f, 1.0f, 1.0f);
	}
	return GetVec4(NiagaraRibbonVF.MaterialParamDataOffset, InstanceID);
}
#endif
#if NUM_DYNAMIC_PARAMETERS > 1
float4 GetNiagaraParticleDynamicParameters1(uint InstanceID)
{
	if (NiagaraRibbonVF.MaterialParam1DataOffset == -1)
	{
		return float4(1.0f, 1.0f, 1.0f, 1.0f);
	}
	return GetVec4(NiagaraRibbonVF.MaterialParam1DataOffset, InstanceID);
}
#endif
#if NUM_DYNAMIC_PARAMETERS > 2
float4 GetNiagaraParticleDynamicParameters2(uint InstanceID)
{
	if (NiagaraRibbonVF.MaterialParam2DataOffset == -1)
	{
		return float4(1.0f, 1.0f, 1.0f, 1.0f);
	}
	return GetVec4(NiagaraRibbonVF.MaterialParam2DataOffset, InstanceID);
}
#endif
#if NUM_DYNAMIC_PARAMETERS > 3
float4 GetNiagaraParticleDynamicParameters3(uint InstanceID)
{
	if (NiagaraRibbonVF.MaterialParam3DataOffset == -1)
	{
		return float4(1.0f, 1.0f, 1.0f, 1.0f);
	}
	return GetVec4(NiagaraRibbonVF.MaterialParam3DataOffset, InstanceID);
}
#endif


float3 GetNiagaraParticleFacingVector(uint InstanceID)
{
	float3 Val = float3(0.0f, 0.0f, 1.0f);
    if(NiagaraRibbonVF.FacingOffset != -1)
	{
		Val = GetVec3(NiagaraRibbonVF.FacingOffset, InstanceID);
	}
	return TransformVector(Val);
}
*/




struct FVertexFactoryInput
{
	float3	Position				: ATTRIBUTE0;
	float3 Direction				: ATTRIBUTE1;
	float	Size					: ATTRIBUTE2;
	float4	Color					: ATTRIBUTE3;
	float4	TexCoord				: ATTRIBUTE4;

	float Twist						: ATTRIBUTE5;
	float3 CustomFacingVector		: ATTRIBUTE6;

#if NUM_DYNAMIC_PARAMETERS > 0
	float4 DynamicParameter0		: ATTRIBUTE7;
#endif
#if NUM_DYNAMIC_PARAMETERS > 1
	float4 DynamicParameter1		: ATTRIBUTE8;
#endif
#if NUM_DYNAMIC_PARAMETERS > 2
	float4 DynamicParameter2		: ATTRIBUTE9;
#endif
#if NUM_DYNAMIC_PARAMETERS > 3
	float4 DynamicParameter3		: ATTRIBUTE10;
#endif

/** Optional instance ID for vertex layered rendering */
#if FEATURE_LEVEL >= FEATURE_LEVEL_SM4
	uint VertexID	: SV_VertexID;
#endif

/** Optional instance ID for vertex layered rendering */
#if FEATURE_LEVEL >= FEATURE_LEVEL_SM4 && ONEPASS_POINTLIGHT_SHADOW && USING_VERTEX_SHADER_LAYER
	uint InstanceId	: SV_InstanceID;
#endif

	// soon
	//float NormalizedAge			: ATTRIBUTE8;
};

struct FVertexFactoryInterpolantsVSToPS
{
	// First row of the tangent to world matrix
	float3	TangentToWorld0	: TANGENTTOWORLD0;
	// Last row of the tangent to world matrix in xyz
	float4	TangentToWorld2	: TANGENTTOWORLD2;

	float4	TexCoord			: TEXCOORD2;

#if NEEDS_PARTICLE_COLOR
	float4  Color				: TEXCOORD3;
#endif

#if NUM_DYNAMIC_PARAMETERS > 0
	float4 DynamicParameter0	: TEXCOORD4;
#endif
#if NUM_DYNAMIC_PARAMETERS > 1
	float4 DynamicParameter1	: TEXCOORD5;
#endif
#if NUM_DYNAMIC_PARAMETERS > 2
	float4 DynamicParameter2	: TEXCOORD6;
#endif
#if NUM_DYNAMIC_PARAMETERS > 3
	float4 DynamicParameter3	: TEXCOORD7;
#endif

#if INSTANCED_STEREO
	nointerpolation uint PackedEyeIndex : PACKED_EYE_INDEX;
#endif
};

struct FVertexFactoryIntermediates
{
	/** The color of the sprite. */
	float4 Color;
	float RibbonWidth;
	float3 Right, Up;
	float3 CameraDirection;
};

/** Converts from vertex factory specific interpolants to a FMaterialPixelParameters, which is used by material inputs. */
FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants, float4 SvPosition)
{
	// GetMaterialPixelParameters is responsible for fully initializing the result
	FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();

#if NUM_MATERIAL_TEXCOORDS
	#if NUM_MATERIAL_TEXCOORDS >= 1
		Result.TexCoords[0] = Interpolants.TexCoord.xy;
	#if NUM_MATERIAL_TEXCOORDS >= 2
		Result.TexCoords[1] = Interpolants.TexCoord.zw;
	#endif	// >= 2
	#endif	// >= 1
	#if NUM_MATERIAL_TEXCOORDS > 2
		UNROLL
		for(int CoordinateIndex = 2;CoordinateIndex < NUM_MATERIAL_TEXCOORDS;CoordinateIndex++)
		{
			Result.TexCoords[CoordinateIndex] = Interpolants.TexCoord.xy;
		}
	#endif	// > 2
#endif
	Result.VertexColor = 1;

#if NEEDS_PARTICLE_COLOR
	Result.Particle.Color = Interpolants.Color;
#endif

	half3 TangentToWorld0 = Interpolants.TangentToWorld0.xyz;
	half4 TangentToWorld2 = Interpolants.TangentToWorld2;
	Result.TangentToWorld = AssembleTangentToWorld( TangentToWorld0, TangentToWorld2 );
	Result.UnMirrored = 1;

#if LIGHTMAP_UV_ACCESS
	Result.LightmapUVs = Interpolants.TexCoord.xy;
#endif

	Result.TwoSidedSign = 1;
	
#if NUM_DYNAMIC_PARAMETERS > 0
	Result.Particle.DynamicParameter = Interpolants.DynamicParameter0;
#endif
#if NUM_DYNAMIC_PARAMETERS > 1
	Result.Particle.DynamicParameter1 = Interpolants.DynamicParameter1;
#endif
#if NUM_DYNAMIC_PARAMETERS > 2
	Result.Particle.DynamicParameter2 = Interpolants.DynamicParameter2;
#endif
#if NUM_DYNAMIC_PARAMETERS > 3
	Result.Particle.DynamicParameter3 = Interpolants.DynamicParameter3;
#endif

	return Result;
}

/** Converts from vertex factory specific input to a FMaterialVertexParameters, which is used by vertex shader material inputs. */
FMaterialVertexParameters GetMaterialVertexParameters(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 WorldPosition, float3x3 TangentToLocal)
{
	FMaterialVertexParameters Result = (FMaterialVertexParameters)0;
	Result.WorldPosition = WorldPosition;
	Result.VertexColor = Input.Color;
	Result.TangentToWorld = mul(TangentToLocal, GetLocalToWorld3x3()); 
	Result.Particle.Color = Intermediates.Color;
	Result.PreSkinnedPosition = Input.Position.xyz;
	Result.PreSkinnedNormal = TangentToLocal[2].xyz;

#if NUM_MATERIAL_TEXCOORDS_VERTEX
	for(int CoordinateIndex = 0; CoordinateIndex < NUM_MATERIAL_TEXCOORDS_VERTEX; CoordinateIndex++)
	{
		Result.TexCoords[CoordinateIndex] = Input.TexCoord.xy;
	}
#endif
	return Result;
}

void GetLightMapCoordinates(FVertexFactoryInterpolantsVSToPS Interpolants, out float2 LightmapUV0, out float2 LightmapUV1)
{
	LightmapUV0 = LightmapUV1 = 0;
}

half2 GetShadowMapCoordinate(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return 0;
}

float3 SafeNormalize(float3 V)
{
	return V / sqrt(max(dot(V,V),0.01));
}

void GetTangents(FVertexFactoryInput Input,out float3 Right,out float3 Up, out float3 CameraDirection)
{
	float4	Position			= TransformLocalToTranslatedWorld(Input.Position.xyz);

	CameraDirection				= SafeNormalize(ResolvedView.WorldCameraOrigin - Input.Position.xyz );		// TODO: handle local space
	float3 ParticleDirection	= Input.Direction;

	float4	Right_Square		= BeamTrailVF.CameraRight,
			Up_Square			= BeamTrailVF.CameraUp;		
			
	float4	Right_Rotated		= (-1.0 * cos(Input.Twist) * Up_Square) + (sin(Input.Twist) * Right_Square),
			Up_Rotated			= (       sin(Input.Twist) * Up_Square) + (cos(Input.Twist) * Right_Square);

	float4	Right_Velocity		= float4( SafeNormalize( cross( CameraDirection, ParticleDirection	) ), 0.0 ),
			Up_Velocity			= float4( ParticleDirection, 0.0 );

	float3 NormDir = SafeNormalize(ParticleDirection);
	float3 RightDir, Facing;


	/*if(NiagaraRibbonVF.UseCustomFacing)
	{
		Facing = Input.CustomFacingVector;
	}
	else*/
	{
		Facing = CameraDirection.xyz;
	}

	if(Input.Twist != 0.0f)
	{
		float cosa = cos(Input.Twist);
		Facing = Facing * cosa + cross(Facing, Input.Direction) * sin(Input.Twist) + Input.Direction * dot(Input.Direction, Facing) * (1-cosa);
	}

	if( abs(dot(NormDir, Facing)) < 0.999f)
	{
		RightDir = SafeNormalize(cross(NormDir, Facing));
	}
	else
	{
		RightDir = SafeNormalize(cross(NormDir, float3(0.0f, 0.0f, -1.0f)));
	}

	Right = RightDir;
	Up = NormDir;
	return;
	/*
	//	enum EParticleScreenAlignment
	//	{
	//		PSA_Square,
	//		PSA_Rectangle,
	//		PSA_Velocity
	//	};
	Right				= BeamTrailVF.ScreenAlignment.x > 1.5f ? Right_Velocity : Right_Rotated;
	Up					= BeamTrailVF.ScreenAlignment.x > 1.5f ? Up_Velocity	: Up_Rotated;
	*/
}

float4 CalcWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	// expand and align
	int Sgn = (((int)Input.VertexID & 0x1) * 2) - 1;
	float3 NormDir = SafeNormalize(Input.Direction.xyz);
	float3 RightDir = Intermediates.Right;
	float3 UpDir = Intermediates.Up;
	float3 Pos = Input.Position.xyz + RightDir * Sgn * Input.Size.xxx;
	return TransformLocalToTranslatedWorld(Pos);
}

/** derive basis vectors */
float3x3 CalcTangentBasis(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	float4	Right,
			Up;
	float3	CameraDir;
	//GetTangents(Input,Right,Up, CameraDir);
	return float3x3(
			Intermediates.Right.xyz,
			Intermediates.Up.xyz,
			-normalize(cross(Intermediates.Right.xyz, Intermediates.Up.xyz))
			);
}

FVertexFactoryIntermediates GetVertexFactoryIntermediates(FVertexFactoryInput Input)
{
	FVertexFactoryIntermediates Intermediates;

	Intermediates.Color = Input.Color;
    Intermediates.RibbonWidth = Input.Size;
	GetTangents(Input, Intermediates.Right, Intermediates.Up, Intermediates.CameraDirection);

	return Intermediates;
}

float4 VertexFactoryGetWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return CalcWorldPosition(Input, Intermediates);
}

float4 VertexFactoryGetRasterizedWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float4 InWorldPosition)
{
	return InWorldPosition;
}

float3 VertexFactoryGetPositionForVertexLighting(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 TranslatedWorldPosition)
{
	return TranslatedWorldPosition;
}

FVertexFactoryInterpolantsVSToPS VertexFactoryGetInterpolantsVSToPS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
{
	FVertexFactoryInterpolantsVSToPS Interpolants;
	Interpolants.TexCoord	= Input.TexCoord;

#if NEEDS_PARTICLE_COLOR
	Interpolants.Color		= Intermediates.Color;
#endif

#if NUM_DYNAMIC_PARAMETERS > 0
	Interpolants.DynamicParameter0 = Input.DynamicParameter0;
#endif
#if NUM_DYNAMIC_PARAMETERS > 1
	Interpolants.DynamicParameter1 = Input.DynamicParameter1;
#endif
#if NUM_DYNAMIC_PARAMETERS > 2
	Interpolants.DynamicParameter2 = Input.DynamicParameter2;
#endif
#if NUM_DYNAMIC_PARAMETERS > 3
	Interpolants.DynamicParameter3 = Input.DynamicParameter3;
#endif

	float3x3 TangentToLocal = CalcTangentBasis(Input, Intermediates);
	float3x3 TangentToWorld = mul(TangentToLocal, GetLocalToWorld3x3());

	Interpolants.TangentToWorld0 = TangentToWorld[0];
	Interpolants.TangentToWorld2 = float4(TangentToWorld[2], sign(determinant(TangentToLocal)));

#if INSTANCED_STEREO
	Interpolants.PackedEyeIndex = 0;
#endif

	return Interpolants;
}

float4 VertexFactoryGetPreviousWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return VertexFactoryGetWorldPosition(Input, Intermediates);
}

/**
* Get the 3x3 tangent basis vectors for this vertex factory
*
* @param Input - vertex input stream structure
* @return 3x3 matrix
*/
float3x3 VertexFactoryGetTangentToLocal( FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates )
{
	return CalcTangentBasis(Input, Intermediates);
}

#if INSTANCED_STEREO
uint VertexFactoryGetEyeIndex(uint InstanceId)
{
	return InstanceId & 1;
}
#endif

float4 VertexFactoryGetTranslatedPrimitiveVolumeBounds(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return 0;
}