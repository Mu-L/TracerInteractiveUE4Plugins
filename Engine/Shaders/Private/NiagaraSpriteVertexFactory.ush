// Copyright 1998-2018 Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	ParticleSpriteVertexFactory.hlsl: Particle vertex factory shader code.
	Shared by standard sprite particles and SubUV sprite particles.
=============================================================================*/

#include "VertexFactoryCommon.ush"
#include "ParticleVertexFactoryCommon.ush"
#include "NiagaraVFParticleAccess.usf"

// These are only enabled for SM5 due to limited interpolators elsewhere
#define USE_PARTICLE_LIGHTING_OFFSET (FEATURE_LEVEL >= FEATURE_LEVEL_SM5 && !MATERIAL_SHADINGMODEL_UNLIT)
#define USE_PARTICLE_POSITION (FEATURE_LEVEL >= FEATURE_LEVEL_SM5 && NEEDS_PARTICLE_POSITION)
#define USE_PARTICLE_VELOCITY (FEATURE_LEVEL >= FEATURE_LEVEL_SM5 && NEEDS_PARTICLE_VELOCITY)
#define USE_PARTICLE_TIME (FEATURE_LEVEL >= FEATURE_LEVEL_SM5 && NEEDS_PARTICLE_TIME)
#define USE_PARTICLE_SIZE (FEATURE_LEVEL >= FEATURE_LEVEL_SM5 && NEEDS_PARTICLE_SIZE)
#define USE_PARTICLE_RANDOM (FEATURE_LEVEL >= FEATURE_LEVEL_SM5 && NEEDS_PARTICLE_RANDOM)

uint ParticleAlignmentMode;
uint ParticleFacingMode;

// Must keep these in sync with ENiagaraSpriteAlignment in NiagaraSpriteRendererProperties.h
/** Only Particles.SpriteRotation and FacingMode impact the alignment of the particle.*/
#define ALIGNMENT_MODE_UNALIGNED 0
/** Imagine the particle texture having an arrow pointing up, this mode makes the arrow point in the direction of the Particles.Velocity attribute. Particles.SpriteRotation rotation is ignored.*/
#define ALIGNMENT_MODE_VELOCITYALIGNED 1
/** Imagine the particle texture having an arrow pointing up, this mode makes the arrow point towards the axis defined by the Particles.SpriteAlignment attribute, after taking Particles.SpriteRotation and the FacingMode into account.*/
#define ALIGNMENT_MODE_CUSTOMALIGNMENT 2

/** The sprite billboard origin is always "looking at" the camera origin, trying to keep its up axis aligned to the camera's up axis. */
#define FACING_MODE_FACECAMERA 0
/** The sprite billboard plane is completely parallel to the camera plane. Particle always looks "flat" */
#define FACING_MODE_FACECAMERAPLANE 1
/** The sprite billboard faces toward the "Particles.SpriteFacing" vector attribute, using the per-axis CustomFacingVectorMask as a lerp factor from the standard FaceCamera mode.*/
#define FACING_MODE_CUSTOMFACINGVECTOR 2
/** Faces the camera position, but is not dependent on the camera rotation.  This method produces more stable particles under camera rotation. Uses the up axis of (0,0,1).*/
#define FACING_MODE_FACECAMERAPOSITION 3 
/** Blends between FaceCamera and FaceCameraPosition.*/
#define FACING_MODE_FACECAMERADISTANCEBLEND 4

/** Sorted index buffer for particles if we need to sort their draw order (translucency etc). */
Buffer<int> SortedIndices;
uint SortedIndicesOffset;

struct FVertexFactoryInput
{
	float2	TexCoord				: ATTRIBUTE0;
	uint VertexId					: SV_VertexID;

/** Optional instance ID for vertex layered rendering */
//#if FEATURE_LEVEL >= FEATURE_LEVEL_SM4 && ONEPASS_POINTLIGHT_SHADOW && USING_VERTEX_SHADER_LAYER
	uint InstanceId	: SV_InstanceID;
//#endif
};

struct FVertexFactoryInterpolantsVSToPS
{
	// First row of the tangent to world matrix, Interp_Sizer used by SUBUV_PARTICLES in w
	float4	TangentToWorld0AndInterp_Sizer : TANGENTTOWORLD0;
	// Last row of the tangent to world matrix in xyz
	float4	TangentToWorld2	: TANGENTTOWORLD2;
	
#if NUM_DYNAMIC_PARAMETERS > 0
	float4 DynamicParameter	: PARTICLE_DYNAMIC_PARAM0;
#endif
#if NUM_DYNAMIC_PARAMETERS > 1
	float4 DynamicParameter1	: PARTICLE_DYNAMIC_PARAM1;
#endif
#if NUM_DYNAMIC_PARAMETERS > 2
	float4 DynamicParameter2	: PARTICLE_DYNAMIC_PARAM2;
#endif
#if NUM_DYNAMIC_PARAMETERS > 3
	float4 DynamicParameter3	: PARTICLE_DYNAMIC_PARAM3;
#endif

#if NEEDS_PARTICLE_COLOR
	float4	Color				: TEXCOORD2;
#endif

#if NUM_MATERIAL_TEXCOORDS
	float4	TexCoords[(NUM_MATERIAL_TEXCOORDS + 1) / 2]	: TEXCOORD3;
#endif

	//Not sure this is actually being used now and it's awkward to slot in now we're supporting custom UVs so I'm just giving this its own interpolant.
#if LIGHTMAP_UV_ACCESS
	float2 LightMapUVs : LIGHTMAP_UVS;
#endif

#if USE_PARTICLE_SUBUVS
	float4 ParticleSubUVs : PARTICLE_SUBUVS;
#endif

#if USE_PARTICLE_POSITION
	/** Cam-relative (translated) particle center and radius */
	float4 ParticleTranslatedWorldPositionAndSize	: PARTICLE_POSITION;
#endif

#if USE_PARTICLE_VELOCITY
	float4 ParticleVelocity : PARTICLE_VELOCITY;
#endif

#if USE_PARTICLE_TIME
	float ParticleTime : PARTICLE_TIME;
#endif

#if USE_PARTICLE_LIGHTING_OFFSET
	float3 LightingPositionOffset : PARTICLE_LIGHTING_OFFSET;
#endif

#if USE_PARTICLE_SIZE
	float2 ParticleSize : PARTICLE_SIZE;
#endif

#if USE_PARTICLE_RANDOM
	float ParticleRandom : PARTICLE_RANDOM;
#endif

#if INSTANCED_STEREO
	nointerpolation uint PackedEyeIndex : PACKED_EYE_INDEX;
#endif
};

struct FVertexFactoryIntermediates
{
	/** The position of the particle in non-translated world space. */
	float3 ParticleWorldPosition;
	/** The position of the vertex in translated world space. */
	float3 VertexWorldPosition;
	/** Last frame's position of the vertex in translated world space. */
	float3 PreviousVertexWorldPosition;
	/** Particle translated world space position and size. */
	float4 TranslatedWorldPositionAndSize;
	
#if USE_PARTICLE_LIGHTING_OFFSET
	float3 LightingPositionOffset;
#endif

	/** The texture coordinate at this vertex. */
	float4 TexCoord;
#if NUM_MATERIAL_TEXCOORDS >= 3 //Unflipped UVs are placed in UVs 2-3
	/** A second UV set. Always non-UV flipped. Allows use of UV flipping with Normal maps etc. */
	float4 TexCoord_Unflipped;
#endif
	/** The sprite tangent in world space (+V). */
	float3 TangentUp;
	/** The sprite tangent in world space (+U). */
	float3 TangentRight;
	/** The color of the sprite. */
	float4 Color;
	/** The velocity of the particle, XYZ: direction, W: speed. */
	float4 ParticleVelocity;

	float3 Position;
	float3 OldPosition;
	
	float4 SizeRotSubImage;
	
	float3 CustomFacingVector;
	float3 CustomAlignmentVector;

	float4 DynamicParameter;
#if NUM_DYNAMIC_PARAMETERS > 1
	float4 DynamicParameter1;
#endif
#if NUM_DYNAMIC_PARAMETERS > 2
	float4 DynamicParameter2;
#endif
#if NUM_DYNAMIC_PARAMETERS > 3
	float4 DynamicParameter3;
#endif

	/** The sub-image lerp. */
	float SubImageLerp;
	/** Relative time. */
	float RelativeTime;
	/** Transform from tangent space to local space. */
	float3x3 TangentToLocal;
	/** Size of the particle */
	float2 ParticleSize;
	/** Particle Random value */
	float ParticleRandom;
};

#if NUM_MATERIAL_TEXCOORDS
bool UVIndexUseZW(int UVIndex)
{
	#if COMPILER_GLSL_ES2
	return (frac((float)UVIndex / 2.0f) == 0.5f);
	#else
	return (UVIndex % 2) != 0;
	#endif
}

float2 GetUV(FVertexFactoryInterpolantsVSToPS Interpolants, int UVIndex)
{
	float4 UVVector = Interpolants.TexCoords[UVIndex / 2];
	return UVIndexUseZW(UVIndex) ? UVVector.zw : UVVector.xy;
}

void SetUV(inout FVertexFactoryInterpolantsVSToPS Interpolants, int UVIndex, float2 InValue)
{
	FLATTEN
	if (UVIndexUseZW(UVIndex))
	{
		Interpolants.TexCoords[UVIndex / 2].zw = InValue;
	}
	else
	{
		Interpolants.TexCoords[UVIndex / 2].xy = InValue;
	}
}
#endif

/** Converts from vertex factory specific interpolants to a FMaterialPixelParameters, which is used by material inputs. */
FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants, float4 SvPosition)
{
	// GetMaterialPixelParameters is responsible for fully initializing the result
	FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();

#if NUM_MATERIAL_TEXCOORDS
	UNROLL
	for (int CoordinateIndex = 0; CoordinateIndex < NUM_MATERIAL_TEXCOORDS; CoordinateIndex++)
	{
		Result.TexCoords[CoordinateIndex] = GetUV(Interpolants, CoordinateIndex);
	}
#endif	// NUM_MATERIAL_TEXCOORDS

	Result.VertexColor = 1;

	half4 TangentToWorld0 = Interpolants.TangentToWorld0AndInterp_Sizer;
	half4 TangentToWorld2 = Interpolants.TangentToWorld2;
	float SubImageLerp = Interpolants.TangentToWorld0AndInterp_Sizer.w;

	#if GENERATE_SPHERICAL_PARTICLE_NORMALS && USE_PARTICLE_POSITION
		{	
			// can be optimized
			float4 ScreenPosition = SvPositionToResolvedScreenPosition(SvPosition);
			float3 TranslatedWorldPosition = SvPositionToResolvedTranslatedWorld(SvPosition);
			Result.TangentToWorld = GetSphericalParticleNormal(TranslatedWorldPosition, Interpolants.ParticleTranslatedWorldPositionAndSize.xyz, Interpolants.ParticleTranslatedWorldPositionAndSize.w);
		}
	#else
		Result.TangentToWorld = AssembleTangentToWorld(TangentToWorld0.xyz, TangentToWorld2);
	#endif

	Result.UnMirrored = 1;
	Result.Particle.MacroUV = NiagaraSpriteVF.MacroUVParameters;

#if NEEDS_PARTICLE_COLOR
	Result.Particle.Color = Interpolants.Color;
#endif

#if NUM_DYNAMIC_PARAMETERS > 0
	Result.Particle.DynamicParameter = Interpolants.DynamicParameter;
#endif
#if NUM_DYNAMIC_PARAMETERS > 1
	Result.Particle.DynamicParameter1 = Interpolants.DynamicParameter1;
#endif
#if NUM_DYNAMIC_PARAMETERS > 2
	Result.Particle.DynamicParameter2 = Interpolants.DynamicParameter2;
#endif
#if NUM_DYNAMIC_PARAMETERS > 3
	Result.Particle.DynamicParameter3 = Interpolants.DynamicParameter3;
#endif

#if USE_PARTICLE_POSITION
	Result.Particle.TranslatedWorldPositionAndSize = Interpolants.ParticleTranslatedWorldPositionAndSize;
#endif

#if USE_PARTICLE_VELOCITY
	Result.Particle.Velocity = Interpolants.ParticleVelocity;
#endif

#if USE_PARTICLE_TIME
	Result.Particle.RelativeTime = Interpolants.ParticleTime;
#endif

	Result.Particle.MotionBlurFade = 1.0f;


#if USE_PARTICLE_LIGHTING_OFFSET
	Result.LightingPositionOffset = Interpolants.LightingPositionOffset;
#endif

#if USE_PARTICLE_SUBUVS
	Result.Particle.SubUVCoords[0] = Interpolants.ParticleSubUVs.xy;
	Result.Particle.SubUVCoords[1] = Interpolants.ParticleSubUVs.zw;
	Result.Particle.SubUVLerp = SubImageLerp;
#endif

#if LIGHTMAP_UV_ACCESS
	Result.LightmapUVs = Interpolants.LightMapUVs;
#endif

#if USE_PARTICLE_SIZE
	Result.Particle.Size = Interpolants.ParticleSize;
#endif

#if USE_PARTICLE_RANDOM
	Result.Particle.Random = Interpolants.ParticleRandom;
#else
	Result.Particle.Random = 0.0f;
#endif

	Result.TwoSidedSign = 1;
	return Result;
}

/** Converts from vertex factory specific input to a FMaterialVertexParameters, which is used by vertex shader material inputs. */
FMaterialVertexParameters GetMaterialVertexParameters(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 WorldPosition, float3x3 TangentToLocal)
{
	FMaterialVertexParameters Result = (FMaterialVertexParameters)0;
	Result.WorldPosition = WorldPosition;
	Result.VertexColor = Intermediates.Color;
	Result.TangentToWorld = mul(TangentToLocal, GetLocalToWorld3x3()); 
	Result.Particle.MacroUV = NiagaraSpriteVF.MacroUVParameters;
	Result.Particle.Color = Intermediates.Color;
	Result.Particle.MotionBlurFade = 1.0f;
	Result.PreSkinnedPosition = Intermediates.Position.xyz;
	Result.PreSkinnedNormal = TangentToLocal[2].xyz;

#if NUM_DYNAMIC_PARAMETERS > 0
	Result.Particle.DynamicParameter = Intermediates.DynamicParameter;
#endif
#if NUM_DYNAMIC_PARAMETERS > 1
	Result.Particle.DynamicParameter1 = Intermediates.DynamicParameter1;
#endif
#if NUM_DYNAMIC_PARAMETERS > 2
	Result.Particle.DynamicParameter2 = Intermediates.DynamicParameter2;
#endif
#if NUM_DYNAMIC_PARAMETERS > 3
	Result.Particle.DynamicParameter3 = Intermediates.DynamicParameter3;
#endif

#if USE_PARTICLE_POSITION
	Result.Particle.TranslatedWorldPositionAndSize = Intermediates.TranslatedWorldPositionAndSize;
#endif

#if USE_PARTICLE_VELOCITY
	Result.Particle.Velocity = Intermediates.ParticleVelocity;
#endif

#if USE_PARTICLE_TIME
	Result.Particle.RelativeTime = Intermediates.RelativeTime;
#endif

#if USE_PARTICLE_RANDOM
	Result.Particle.Random = Intermediates.ParticleRandom;
#else
	Result.Particle.Random = 0.0f;
#endif

#if NUM_MATERIAL_TEXCOORDS_VERTEX
	#if NUM_MATERIAL_TEXCOORDS_VERTEX >= 1
		Result.TexCoords[0] = Intermediates.TexCoord.xy;
	#if NUM_MATERIAL_TEXCOORDS_VERTEX >= 2
		Result.TexCoords[1] = Intermediates.TexCoord.zw;
	#if NUM_MATERIAL_TEXCOORDS_VERTEX >= 3
		Result.TexCoords[2] = Intermediates.TexCoord_Unflipped.xy;
	#if NUM_MATERIAL_TEXCOORDS_VERTEX >= 4
		Result.TexCoords[3] = Intermediates.TexCoord_Unflipped.zw;
	#endif	// >= 4
	#endif	// >= 3
	#endif	// >= 2
	#endif	// >= 1
#endif	//NUM_MATERIAL_TEXCOORDS_VERTEX

#if USE_PARTICLE_SUBUVS
	Result.Particle.SubUVCoords[0] = Intermediates.TexCoord.xy;
	Result.Particle.SubUVCoords[1] = Intermediates.TexCoord.zw;
#endif

#if USE_PARTICLE_SIZE
	Result.Particle.Size = Intermediates.ParticleSize;
#endif
	return Result;
}

void GetLightMapCoordinates(FVertexFactoryInterpolantsVSToPS Interpolants, out float2 LightmapUV0, out float2 LightmapUV1)
{
	LightmapUV0 = LightmapUV1 = 0;
}

half2 GetShadowMapCoordinate(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return 0;
}

float3 SafeNormalize(float3 V)
{
	return V * rsqrt(max(dot(V,V),0.01));
}

void GetTangents(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 WorldPosition, float3 OldWorldPosition, out float3 OutRight, out float3 OutUp)
{
	// Select camera up/right vectors.
	float3 ResolvedViewRight = lerp(ResolvedView.ViewRight, ResolvedView.HMDViewNoRollRight, NiagaraSpriteVF.RemoveHMDRoll);
	float3 ResolvedViewUp = lerp(ResolvedView.ViewUp, ResolvedView.HMDViewNoRollUp, NiagaraSpriteVF.RemoveHMDRoll);

	// The standard camera facing vectors
	float3 CameraRight = ResolvedViewRight;
	float3 CameraUp = -ResolvedViewUp;
	float3 CameraFacingVector = -ResolvedView.ViewForward;

	// Determine the vector from the particle to the camera and the particle's movement direction.
	float3 CameraVector = ResolvedView.WorldCameraOrigin.xyz - WorldPosition.xyz;
	float3 CameraDirection = SafeNormalize(CameraVector);
	float3 ParticleDirection	= SafeNormalize(WorldPosition.xyz - OldWorldPosition.xyz);

	// First interpolate between the base facing mode and the custom facing mode. We assume that the code setting up this call has the facing vector mask
	// set to 0,0,0,0 if not in FACING_MODE_CUSTOMFACINGVECTOR.
	float3 CustomFacingVectorMask =  NiagaraSpriteVF.CustomFacingVectorMask;
	float3 CustomFacingVector = Intermediates.CustomFacingVector * CustomFacingVectorMask + CameraDirection * (float3(1.0,1.0,1.0)-CustomFacingVectorMask);
	
	// the particle's movement direction.
	float3 DirectionVector	= lerp(ParticleDirection, Intermediates.CustomAlignmentVector, ParticleAlignmentMode == ALIGNMENT_MODE_CUSTOMALIGNMENT);
	
	// Tangent vectors for any non-default alignment mode.
	float3 CameraRightAligned	= SafeNormalize(cross(CustomFacingVector, DirectionVector));
	float3 CameraUpAligned = lerp(-DirectionVector, cross(CustomFacingVector, CameraRightAligned), ParticleFacingMode == FACING_MODE_CUSTOMFACINGVECTOR);

	// Tangent vectors for camera plane facing mode
	float3 CameraRightPlaneFacing = SafeNormalize(cross(CameraFacingVector,ResolvedViewUp));
	float3 CameraUpPlaneFacing = cross(CameraFacingVector, CameraRightPlaneFacing);

	// Tangent vectors for camera custom facing mode
	float3 CameraRightCustomFacing = SafeNormalize(cross(CustomFacingVector,ResolvedViewUp));
	float3 CameraUpCustomFacing = cross(CustomFacingVector, CameraRightCustomFacing);

	// Tangent vectors for camera facing position.
	float3 CameraRightPosition = SafeNormalize(cross(CameraDirection,float3(0,0,1)));
	float3 CameraUpPosition = cross(CameraDirection, CameraRightPosition);

	float3 Right;
	float3 Up;
	
	/**This could well be better as a branch*/
	FLATTEN
	if(ParticleAlignmentMode == ALIGNMENT_MODE_UNALIGNED)
	{
		FLATTEN
		if (ParticleFacingMode == FACING_MODE_FACECAMERADISTANCEBLEND)
		{
			float CameraDistanceSq = dot(CameraVector, CameraVector);
			float Interp = saturate(CameraDistanceSq * NiagaraSpriteVF.CameraFacingBlend.y - NiagaraSpriteVF.CameraFacingBlend.z);
			Right = cross(CameraDirection,float3(0,0,1));
			Up = cross(CameraDirection, Right);
			Right = lerp(Right, CameraRight.xyz, Interp);
			Up = lerp(Up, CameraUp.xyz, Interp);
		} 
		else if(ParticleFacingMode == FACING_MODE_FACECAMERA)
		{
			Right = CameraRight.xyz;
			Up = CameraUp.xyz;
		}		 
		else if(ParticleFacingMode == FACING_MODE_FACECAMERAPLANE)
		{
			Right = CameraRightPlaneFacing;
			Up = CameraUpPlaneFacing;
		}
		else if(ParticleFacingMode == FACING_MODE_CUSTOMFACINGVECTOR)
		{
			Right = CameraRightCustomFacing;
			Up = CameraUpCustomFacing;
		}
		else//(ParticleFacingMode == FACING_MODE_FACECAMERAPOSITION)
		{
			Right = CameraRightPosition;
			Up = CameraUpPosition;
		}
	}
	else 
	{	
		Right = CameraRightAligned;
		Up = CameraUpAligned;
	}


	// Determine the angle of rotation.
	float SinRotation;
	float CosRotation;
	const float SpriteRotation = Intermediates.SizeRotSubImage.z * NiagaraSpriteVF.RotationScale + NiagaraSpriteVF.RotationBias;
	sincos(SpriteRotation, SinRotation, CosRotation);

	float3 SR = Right * SinRotation;
	float3 SU = Up * SinRotation;
	float3 CR = Right * CosRotation;
	float3 CU = Up * CosRotation;
	OutRight = SU + CR;
	OutUp = CU - SR;
}

/** derive basis vectors */
float3x3 CalcTangentBasis(FVertexFactoryIntermediates Intermediates)
{
	// Using camera facing TangentX and TangentY.  The resulting tangent basis is not orthonormal with anything other than ENM_CameraFacing, 
	// So there are artifacts with tangent space calculations like the TransformVector node,
	// But this allows lighting based on a world space shape via the normal while still having normal maps camera aligned.
	float3x3 Result;
	Result[0] = Intermediates.TangentRight;
	Result[1] = Intermediates.TangentUp;

	// ENM_CameraFacing
	//@todo - use static branching
	if (NiagaraSpriteVF.NormalsType < .5f)
	{
		Result[2] = normalize(cross(Result[0],Result[1]));
	} 
	// ENM_Spherical
	else if (NiagaraSpriteVF.NormalsType < 1.5f)
	{
		float3 TangentZ = normalize(Intermediates.ParticleWorldPosition.xyz - NiagaraSpriteVF.NormalsSphereCenter.xyz);
		Result[2] = TangentZ;	
	}
	// ENM_Cylindrical
	else
	{
		float3 ClosestPointOnCylinder = NiagaraSpriteVF.NormalsSphereCenter.xyz + dot(NiagaraSpriteVF.NormalsCylinderUnitDirection.xyz, Intermediates.ParticleWorldPosition.xyz - NiagaraSpriteVF.NormalsSphereCenter.xyz) * NiagaraSpriteVF.NormalsCylinderUnitDirection.xyz;
		float3 TangentZ = normalize(Intermediates.ParticleWorldPosition.xyz - ClosestPointOnCylinder);
		Result[2] = TangentZ;	
	}

	return Result;
}

// Note: C++ geometry setup behavior has to match this define
/** Number of vertices in each SubUV frame of CutoutGeometry. */
uint NumCutoutVerticesPerFrame;

/** SubUV animation bounding geometry used to minimize overdraw.  Each frame has its own polygon. */
Buffer<float2> CutoutGeometry;

void ComputeBillboardUVs(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, out float2 UVForPosition, out float2 UVForTexturing, out float2 UVForTexturingUnflipped)
{
	// Encoding the UV flip in the sign of the size data.
	float2 UVFlip = sign(Intermediates.SizeRotSubImage.xy);

	BRANCH
	if (NumCutoutVerticesPerFrame > 0)
	{
		// Avoid uint divide which is extremely slow on GCN
		uint CutoutVertexIndex = (uint)fmod(Input.VertexId, NumCutoutVerticesPerFrame);
		float NumFrames = NiagaraSpriteVF.SubImageSize.x * NiagaraSpriteVF.SubImageSize.y;
		uint SubImageIndexInt = (uint)fmod(Intermediates.SizeRotSubImage.w, NumFrames);

		FLATTEN
		if (UVFlip.x * UVFlip.y < 0)
		{
			// Reverse the winding order of the polygon when only flipping in one direction to counteract UV flipping
			CutoutVertexIndex = NumCutoutVerticesPerFrame - 1 - CutoutVertexIndex;
		}

		// Fetch the billboard space positions from the appropriate frame of the preprocessed cutout geometry
		UVForTexturing = UVForTexturingUnflipped = CutoutGeometry[SubImageIndexInt * NumCutoutVerticesPerFrame + CutoutVertexIndex];

		// Invert positions on the billboard so that the cutout geometry still contains the visible portion
		// This changes the winding order when only one direction is flipped
		UVForPosition.x = UVFlip.x < 0.0 ? 1.0 - UVForTexturing.x : UVForTexturing.x;
		UVForPosition.y = UVFlip.y < 0.0 ? 1.0 - UVForTexturing.y : UVForTexturing.y;
	}
	else
	{
		UVForTexturing.x = UVFlip.x < 0.0 ? 1.0 - Input.TexCoord.x : Input.TexCoord.x;
		UVForTexturing.y = UVFlip.y < 0.0 ? 1.0 - Input.TexCoord.y : Input.TexCoord.y;

		// Note: not inverting positions, as that would change the winding order
		UVForPosition = UVForTexturingUnflipped = Input.TexCoord.xy;
	}
}

float3 TransformPosition(float3 InPosition)
{
	return mul(float4(InPosition,1.0), NiagaraSpriteVF.LocalToWorld).xyz;
}

float3 TransformVector(float3 InVector)
{
	return mul(float4(InVector,0.0), NiagaraSpriteVF.LocalToWorldInverseTransposed).xyz;
}

/*********************************************************************************
 *							Particle specific
 *********************************************************************************/

float3 GetNiagaraParticlePosition(uint InstanceID)
{
	if(NiagaraSpriteVF.PositionDataOffset  == -1)
	{
		// See FNiagaraConstants for a synchronized value...
		return TransformPosition(NiagaraSpriteVF.DefaultPos.xyz);
	}
	return TransformPosition(GetVec3(NiagaraSpriteVF.PositionDataOffset, InstanceID));
}
float3 GetNiagaraParticleVelocity(uint InstanceID)
{
	if(NiagaraSpriteVF.VelocityDataOffset  == -1)
	{
		// See FNiagaraConstants for a synchronized value...
		return TransformVector(float3(0.0f,0.0f,0.0f));
	}
	return TransformVector(GetVec3(NiagaraSpriteVF.VelocityDataOffset, InstanceID));
}
float2 GetNiagaraParticleSize(uint InstanceID)
{
	if(NiagaraSpriteVF.SizeDataOffset  == -1)
	{
		// See FNiagaraConstants for a synchronized value...
		return float2(50.0f, 50.0f);
	}
	return GetVec2(NiagaraSpriteVF.SizeDataOffset, InstanceID);
}
float GetNiagaraParticleRotation(uint InstanceID)
{
	if(NiagaraSpriteVF.RotationDataOffset  == -1)
	{
		// See FNiagaraConstants for a synchronized value...
		return 0.0f;
	}
	return (GetFloat(NiagaraSpriteVF.RotationDataOffset, InstanceID) / 180.0f) * PI;
}
float4 GetNiagaraParticleColor(uint InstanceID)
{
	if(NiagaraSpriteVF.ColorDataOffset  == -1)
	{
		// See FNiagaraConstants for a synchronized value...
		return float4(1.0f, 1.0f, 1.0f, 1.0f);
	}
	return GetVec4(NiagaraSpriteVF.ColorDataOffset, InstanceID);
}

float2 GetNiagaraUVScale(uint InstanceID)
{
	if(NiagaraSpriteVF.UVScaleOffset  == -1)
	{
		// See FNiagaraConstants for a synchronized value...
		return float2(1.0f, 1.0f);
	}
	return GetVec2(NiagaraSpriteVF.UVScaleOffset, InstanceID);	
}

float GetNiagaraParticleRandom(uint InstanceID)
{
	if(NiagaraSpriteVF.ParticleRandomOffset  == -1)
	{
		// See FNiagaraConstants for a synchronized value...
		return 0.0f;
	}
	return GetFloat(NiagaraSpriteVF.ParticleRandomOffset, InstanceID);	
}

float GetNiagaraCameraOffset(uint InstanceID)
{
	if (NiagaraSpriteVF.CameraOffsetOffset == -1)
	{
		// See FNiagaraConstants for a synchronized value...
		return 0.0f;
	}
	return GetFloat(NiagaraSpriteVF.CameraOffsetOffset, InstanceID);
}

#if NUM_DYNAMIC_PARAMETERS > 0
float4 GetNiagaraParticleDynamicParameters(uint InstanceID)
{
	return NiagaraSpriteVF.MaterialParamDataOffset != -1 ? GetVec4(NiagaraSpriteVF.MaterialParamDataOffset, InstanceID) : float4(1.0f, 1.0f, 1.0f, 1.0f);;
}
#endif
#if NUM_DYNAMIC_PARAMETERS > 1
float4 GetNiagaraParticleDynamicParameters1(uint InstanceID)
{
	return NiagaraSpriteVF.MaterialParam1DataOffset != -1 ? GetVec4(NiagaraSpriteVF.MaterialParam1DataOffset, InstanceID) : float4(1.0f, 1.0f, 1.0f, 1.0f);;
}
#endif
#if NUM_DYNAMIC_PARAMETERS > 2
float4 GetNiagaraParticleDynamicParameters2(uint InstanceID)
{
	return NiagaraSpriteVF.MaterialParam2DataOffset != -1 ? GetVec4(NiagaraSpriteVF.MaterialParam2DataOffset, InstanceID) : float4(1.0f, 1.0f, 1.0f, 1.0f);;
}
#endif
#if NUM_DYNAMIC_PARAMETERS > 3
float4 GetNiagaraParticleDynamicParameters3(uint InstanceID)
{
	return NiagaraSpriteVF.MaterialParam3DataOffset != -1 ? GetVec4(NiagaraSpriteVF.MaterialParam3DataOffset, InstanceID) : float4(1.0f, 1.0f, 1.0f, 1.0f);;
}
#endif


float GetNiagaraParticleSubimage(uint InstanceID)
{
	// See FNiagaraConstants for a synchronized value...
	float Val = 0.0f;
    if(NiagaraSpriteVF.SubimageDataOffset != -1)
	{
		Val = GetFloat(NiagaraSpriteVF.SubimageDataOffset, InstanceID);
	}
	return Val;
}

float3 GetNiagaraParticleFacingVector(uint InstanceID)
{
	// See FNiagaraConstants for a synchronized value...
	float3 Val = float3(1.0f, 0.0f, 0.0f);
    if(NiagaraSpriteVF.FacingOffset != -1)
	{
		Val = GetVec3(NiagaraSpriteVF.FacingOffset, InstanceID);
	}
	return TransformVector(Val);
}

float3 GetNiagaraParticleAlignmentVector(uint InstanceID)
{
	float3 Val = float3(1.0f, 0.0f, 0.0f);
    if(NiagaraSpriteVF.AlignmentOffset != -1)
	{
		Val = GetVec3(NiagaraSpriteVF.AlignmentOffset, InstanceID);
	}
	return TransformVector(Val);
}


FVertexFactoryIntermediates GetVertexFactoryIntermediates(FVertexFactoryInput Input)
{
	FVertexFactoryIntermediates Intermediates = (FVertexFactoryIntermediates)0;

	uint ParticleID = Input.InstanceId;
	if(SortedIndicesOffset != 0xFFFFFFFF)
	{
		ParticleID = SortedIndices[SortedIndicesOffset + Input.InstanceId];
	}

	Intermediates.Position = GetNiagaraParticlePosition(ParticleID);
	Intermediates.OldPosition = Intermediates.Position.xyz - GetNiagaraParticleVelocity(ParticleID) * NiagaraSpriteVF.DeltaSeconds;
	float2 ParticleSize = GetNiagaraParticleSize(ParticleID);
	Intermediates.SizeRotSubImage = float4(ParticleSize.x, ParticleSize.y, GetNiagaraParticleRotation(ParticleID), GetNiagaraParticleSubimage(ParticleID));
	Intermediates.Color	= GetNiagaraParticleColor(ParticleID);
	Intermediates.CustomFacingVector = SafeNormalize(GetNiagaraParticleFacingVector(ParticleID));
	Intermediates.CustomAlignmentVector = SafeNormalize(GetNiagaraParticleAlignmentVector(ParticleID));

#if NUM_DYNAMIC_PARAMETERS > 0
	Intermediates.DynamicParameter = GetNiagaraParticleDynamicParameters(ParticleID);
#endif
#if NUM_DYNAMIC_PARAMETERS > 1
	Intermediates.DynamicParameter1 = GetNiagaraParticleDynamicParameters1(ParticleID);
#endif
#if NUM_DYNAMIC_PARAMETERS > 2
	Intermediates.DynamicParameter2 = GetNiagaraParticleDynamicParameters2(ParticleID);
#endif
#if NUM_DYNAMIC_PARAMETERS > 3
	Intermediates.DynamicParameter3 = GetNiagaraParticleDynamicParameters3(ParticleID);
#endif


	// World position.
	
	float4 ParticleWorldPosition = mul(float4(Intermediates.Position.xyz,1), Primitive.LocalToWorld);
	float4 ParticleOldWorldPosition = mul(float4(Intermediates.OldPosition.xyz,1), Primitive.LocalToWorld); 
	float CameraOffset = GetNiagaraCameraOffset(ParticleID);
	float3 CameraVector = ResolvedView.WorldCameraOrigin.xyz - ParticleWorldPosition.xyz;
	float3 CameraDirection = SafeNormalize(CameraVector);

	// Do we need the hack that forces particles at the camera origin to be *really* behind the camera origin?
	float3 OffsetPosition = CameraDirection * CameraOffset;

	ParticleWorldPosition.xyz = ParticleWorldPosition.xyz + OffsetPosition;
	ParticleOldWorldPosition.xyz = ParticleOldWorldPosition.xyz + OffsetPosition;
	
	Intermediates.ParticleWorldPosition = ParticleWorldPosition.xyz;

	// Tangents.
	float3 Right,Up;
	GetTangents(Input, Intermediates, ParticleWorldPosition.xyz,ParticleOldWorldPosition.xyz,Right,Up);
	Intermediates.TangentUp = Up;
	Intermediates.TangentRight = Right;

	float2 UVForPosition;
	float2 UVForTexturing;
	float2 UVForTexturingUnflipped;
	ComputeBillboardUVs(Input, Intermediates, UVForPosition, UVForTexturing, UVForTexturingUnflipped);

	float2 UVScale = GetNiagaraUVScale(ParticleID);
	UVForTexturing.xy = float2(0.5f, 0.5f) + (UVForTexturing.xy - float2(0.5f, 0.5f) ) *  UVScale.xy; 

	// Vertex position.
	float4 VertexWorldPosition = float4(ParticleWorldPosition.xyz + ResolvedView.PreViewTranslation,1);
	float2 Size = abs(Intermediates.SizeRotSubImage.xy);
	VertexWorldPosition += Size.x * (UVForPosition.x + NiagaraSpriteVF.PivotOffset.x) * float4(Right,0);
	VertexWorldPosition += Size.y * (UVForPosition.y + NiagaraSpriteVF.PivotOffset.y) * float4(Up,0);
	Intermediates.VertexWorldPosition = VertexWorldPosition.xyz;

	// Previous vertex position.
	Intermediates.PreviousVertexWorldPosition = VertexWorldPosition.xyz + (ParticleOldWorldPosition.xyz - ParticleWorldPosition.xyz);
	
	// SubUV.
	float SubImageIndex = Intermediates.SizeRotSubImage.w;
	float SubImageLerp = frac(SubImageIndex);
	float SubImageA = SubImageIndex - SubImageLerp;
	float SubImageB = SubImageA + 1;
	float SubImageAH = fmod( SubImageA, NiagaraSpriteVF.SubImageSize.x );
	float SubImageBH = fmod( SubImageB, NiagaraSpriteVF.SubImageSize.x );
	float SubImageAV = floor( SubImageA * NiagaraSpriteVF.SubImageSize.z );
	float SubImageBV = floor( SubImageB * NiagaraSpriteVF.SubImageSize.z );
	Intermediates.TexCoord.xy = (float2( SubImageAH, SubImageAV ) + UVForTexturing) * NiagaraSpriteVF.SubImageSize.zw;
	Intermediates.TexCoord.zw = (float2(SubImageBH, SubImageBV) + UVForTexturing) * NiagaraSpriteVF.SubImageSize.zw;
#if NUM_MATERIAL_TEXCOORDS >= 3
	Intermediates.TexCoord_Unflipped.xy = (float2(SubImageAH, SubImageAV) + UVForTexturingUnflipped) * NiagaraSpriteVF.SubImageSize.zw;
	Intermediates.TexCoord_Unflipped.zw = (float2(SubImageBH, SubImageBV) + UVForTexturingUnflipped) * NiagaraSpriteVF.SubImageSize.zw;
#endif
	Intermediates.SubImageLerp = (NiagaraSpriteVF.SubImageBlendMode == 1) ? SubImageLerp : 0.0f;
	

#if USE_PARTICLE_POSITION
	float ParticleRadius = .5f * min(Intermediates.SizeRotSubImage.x, Intermediates.SizeRotSubImage.y);
	float3 ParticleTranslatedWorldPosition = ParticleWorldPosition.xyz + ResolvedView.PreViewTranslation.xyz;
	Intermediates.TranslatedWorldPositionAndSize = float4(ParticleTranslatedWorldPosition, ParticleRadius);

#if GENERATE_SPHERICAL_PARTICLE_NORMALS
	// Recenter the particle position for GENERATE_SPHERICAL_PARTICLE_NORMALS to use the right center.
	Intermediates.TranslatedWorldPositionAndSize.xyz += Size.x * (NiagaraSpriteVF.PivotOffset.x + .5) * Right + Size.y * (NiagaraSpriteVF.PivotOffset.y + .5) * Up;
#endif
#endif

#if USE_PARTICLE_VELOCITY
	float3 ParticleVelocity = (ParticleWorldPosition.xyz - ParticleOldWorldPosition.xyz) * (1.0f/NiagaraSpriteVF.DeltaSeconds);
	float3 DirectionVector = lerp(ParticleVelocity, Intermediates.CustomAlignmentVector, ParticleAlignmentMode == ALIGNMENT_MODE_CUSTOMALIGNMENT);
	Intermediates.ParticleVelocity.xyz = normalize(DirectionVector);
	Intermediates.ParticleVelocity.w = length(DirectionVector);
#endif

#if USE_PARTICLE_TIME
	Intermediates.RelativeTime = Intermediates.Position.w;
#endif

#if USE_PARTICLE_RANDOM
	Intermediates.ParticleRandom = GetNiagaraParticleRandom(ParticleID);
#endif

	Intermediates.TangentToLocal = CalcTangentBasis(Intermediates);

#if USE_PARTICLE_LIGHTING_OFFSET
	// Hash function based on the particle ID to generate a uniformly distributed 3d offset
	float3 RandomParticleOffset = frac(Square(ParticleID + 10) * float3(1361.456345, 2333.578, 3623.983)) * 2 - 1;
	Intermediates.LightingPositionOffset = .5f * View.TranslucencyLightingVolumeInvSize[0].w * RandomParticleOffset;
#endif

#if USE_PARTICLE_SIZE
	Intermediates.ParticleSize = Size;
#endif

	return Intermediates;
}

float4 VertexFactoryGetWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return float4(Intermediates.VertexWorldPosition,1);
}

float4 VertexFactoryGetRasterizedWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float4 TranslatedWorldPosition)
{
#if SPHERICAL_PARTICLE_OPACITY
	// For particles using spherical opacity, move the quad toward the viewer so that it lies in front of the sphere defined by the particle
	// This avoids opaque objects intersecting the particle from causing clipping artifacts due to depth testing
	// The downside is that the particle will clip the near plane sooner

	float Radius = .5f * min(Intermediates.SizeRotSubImage.x, Intermediates.SizeRotSubImage.y);
	return ReprojectPosition(TranslatedWorldPosition, Radius);
#else
	return TranslatedWorldPosition;
#endif
}

float3 VertexFactoryGetPositionForVertexLighting(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 TranslatedWorldPosition)
{
#if (TRANSLUCENCY_LIGHTING_VOLUMETRIC_PERVERTEX_DIRECTIONAL || TRANSLUCENCY_LIGHTING_VOLUMETRIC_PERVERTEX_NONDIRECTIONAL)
	// Do per-vertex lighting with particle position instead of vertex position when we're using SubUV cutouts, since the vertex positions vary per-frame which would cause popping
	return NumCutoutVerticesPerFrame > 0 ? (Intermediates.ParticleWorldPosition.xyz + ResolvedView.PreViewTranslation.xyz) : TranslatedWorldPosition;
#else
	return TranslatedWorldPosition;
#endif
}

FVertexFactoryInterpolantsVSToPS VertexFactoryGetInterpolantsVSToPS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
{
	FVertexFactoryInterpolantsVSToPS Interpolants;

	// Initialize the whole struct to 0
	Interpolants = (FVertexFactoryInterpolantsVSToPS)0;

#if NUM_MATERIAL_TEXCOORDS

	float2 CustomizedUVs[NUM_MATERIAL_TEXCOORDS];
	GetMaterialCustomizedUVs(VertexParameters, CustomizedUVs);

	UNROLL
	for (int CoordinateIndex = 0; CoordinateIndex < NUM_MATERIAL_TEXCOORDS; CoordinateIndex++)
	{
		SetUV(Interpolants, CoordinateIndex, CustomizedUVs[CoordinateIndex]);
	}
#endif

#if LIGHTMAP_UV_ACCESS
	Interpolants.LightMapUVs = Intermediates.TexCoord.xy;
#endif

#if USE_PARTICLE_SUBUVS
	Interpolants.ParticleSubUVs.xy = VertexParameters.Particle.SubUVCoords[0];
	Interpolants.ParticleSubUVs.zw = VertexParameters.Particle.SubUVCoords[1];
#endif

	// Calculate the transform from tangent to world space.
	// Note that "local" space for particles is actually oriented in world space! Therefore no rotation is needed.
	float3x3 TangentToWorld = Intermediates.TangentToLocal;

	Interpolants.TangentToWorld0AndInterp_Sizer.xyz = TangentToWorld[0];
	Interpolants.TangentToWorld0AndInterp_Sizer.w = Intermediates.SubImageLerp;
	Interpolants.TangentToWorld2 = float4(TangentToWorld[2], sign(determinant(Intermediates.TangentToLocal)));

#if NEEDS_PARTICLE_COLOR
	Interpolants.Color = Intermediates.Color;
#endif

#if NUM_DYNAMIC_PARAMETERS > 0
	Interpolants.DynamicParameter = Intermediates.DynamicParameter;
#endif
#if NUM_DYNAMIC_PARAMETERS > 1
	Interpolants.DynamicParameter1 = Intermediates.DynamicParameter1;
#endif
#if NUM_DYNAMIC_PARAMETERS > 2
	Interpolants.DynamicParameter2 = Intermediates.DynamicParameter2;
#endif
#if NUM_DYNAMIC_PARAMETERS > 3
	Interpolants.DynamicParameter3 = Intermediates.DynamicParameter3;
#endif

#if USE_PARTICLE_POSITION
	Interpolants.ParticleTranslatedWorldPositionAndSize = Intermediates.TranslatedWorldPositionAndSize;
#endif

#if USE_PARTICLE_VELOCITY
	Interpolants.ParticleVelocity = Intermediates.ParticleVelocity;
#endif

#if USE_PARTICLE_TIME
	Interpolants.ParticleTime = Intermediates.RelativeTime;
#endif

#if USE_PARTICLE_LIGHTING_OFFSET
	Interpolants.LightingPositionOffset = Intermediates.LightingPositionOffset;
#endif

#if USE_PARTICLE_SIZE
	Interpolants.ParticleSize = Intermediates.ParticleSize;
#endif

#if USE_PARTICLE_RANDOM
	Interpolants.ParticleRandom = Intermediates.ParticleRandom;
#endif


#if INSTANCED_STEREO
	Interpolants.PackedEyeIndex = 0;
#endif

	return Interpolants;
}

float4 VertexFactoryGetPreviousWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return float4(Intermediates.PreviousVertexWorldPosition, 1.0f);
}

/**
* Get the 3x3 tangent basis vectors for this vertex factory
*
* @param Input - vertex input stream structure
* @return 3x3 matrix
*/
float3x3 VertexFactoryGetTangentToLocal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.TangentToLocal;
}

#if INSTANCED_STEREO

// Instanced stereo sets the eye index explicitly for instanced geometry
uint InstancedEyeIndex;	 

uint VertexFactoryGetEyeIndex(uint InstanceId)
{
	return InstancedEyeIndex & bIsInstancedStereo;
}
#endif

float4 VertexFactoryGetTranslatedPrimitiveVolumeBounds(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return 0;
}