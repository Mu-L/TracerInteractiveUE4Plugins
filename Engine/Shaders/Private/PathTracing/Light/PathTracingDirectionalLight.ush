// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================================
DirectionalLight.usf: Light sampling functions for Directional light implementation
===============================================================================================*/

#pragma once

#include "PathTracingLightCommon.ush"

void DirectionalLight_GenerateLightRay(
	RayDesc Ray,
	int LightId,
	float3 LightUV,
	out RayDesc OutLightRay
)
{
	OutLightRay.Origin = Ray.Origin;
	OutLightRay.TMin = 0.0;
	OutLightRay.Direction = normalize(LightUV);
	OutLightRay.TMax = 1.0e27;
}

void DirectionalLight_PdfLight(
	RayDesc Ray,
	int LightId,
	float3 LightUV,
	out float OutPdf
)
{
	OutPdf = 0.0;
}

void DirectionalLight_EvalLight(
	int LightId,
	float3 LightUV,
	RayDesc Ray,
	out float3 OutRadiance
)
{
	float3 Color = GetColor(LightId);
	OutRadiance = Color;
}

void DirectionalLight_EstimateLight(
	int LightId,
	RayDesc Ray,
	FMaterialClosestHitPayload Payload,
	out float OutIrradiance
)
{
	float3 LightDirection = GetNormal(LightId);
	float3 SurfaceNormal = Payload.WorldNormal;
	float NoL = 1.0;
	if (GetRadius(LightId) == 0.0)
	{
		NoL = dot(SurfaceNormal, LightDirection);
		NoL = ENABLE_TRANSMISSION && HasTransmission(LightId) ? abs(NoL) : saturate(NoL);
	}

	float LightPower = Luminance(GetColor(LightId));
	OutIrradiance = LightPower * NoL;
}

void DirectionalLight_SampleLight(
	RayDesc Ray,
	FMaterialClosestHitPayload Payload,
	float4 RandSample,
	int LightId,
	out float3 OutLightUV,
	out float OutPdf
)
{
	float3 N = normalize(GetNormal(LightId));
	float3 dPdu = float3(1, 0, 0);
	if (dot(N, dPdu) != 0)
	{
		dPdu = cross(N, dPdu);
	}
	else
	{
		dPdu = cross(N, float3(0, 1, 0));
	}
	float3 dPdv = cross(dPdu, N);

	float Radius = GetRadius(LightId);
	float2 DiskUV = UniformSampleDiskConcentric(RandSample.yz) * Radius;

	float3 Direction = N;
	OutLightUV = Direction + dPdu * DiskUV.x + dPdv * DiskUV.y;
	OutPdf = 1.0;

#if 0
	// Pdf calculation for when directional light is visible to material rays
	if (Radius > 0.0)
	{
		float Area = PI * Radius * Radius;
		float SolidAngle = Area;
		OutPdf /= SolidAngle;
	}
#endif
}
