// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================================
	PathTracingClearCoat.usf: Path tracing BRDF model for clear coat material
===============================================================================================*/

#pragma once

#define EVAL_TOP_LAYER 1
#define EVAL_BOTTOM_LAYER 1
#define EVAL_REFRACTION 1

#include "PathTracingFresnel.ush"

float3 CalcThinTransmission(float NoL, float NoV, FMaterialClosestHitPayload Payload)
{
	float3 Transmission = 1.0;

	float AbsorptionMix = GetMetallic(Payload);
	if (AbsorptionMix > 0.0)
	{
		float LayerThickness = GetClearCoatThickness(Payload);
		float ThinDistance = LayerThickness * (rcp(NoV) + rcp(NoL));

		// Base color represents reflected color viewed at 0 incidence angle, after being absorbed through the substrate.
		// Because of this, extinction is normalized by traveling through layer thickness twice
		float3 TransmissionColor = Diffuse_Lambert(GetBaseColor(Payload) );
		float3 ExtinctionCoefficient = -log(TransmissionColor) / (2.0 * LayerThickness);
		float3 OpticalDepth = ExtinctionCoefficient * max(ThinDistance - 2.0 * LayerThickness, 0.0);
		Transmission = exp(-OpticalDepth);
		Transmission = lerp(1.0, Transmission, AbsorptionMix);
	}
	return Transmission;
}

float CalcClearCoatFresnel(float VoH, FMaterialClosestHitPayload HitInfo)
{
	float Ior1 = 1.0;
	float Ior2 = GetClearCoatIor(HitInfo);
	return FresnelReflectance(VoH, Ior1, Ior2);
}

float CalcClearCoatSelectionPdf(float3 V, float3 H, FMaterialClosestHitPayload Payload)
{
	// Lobe selection is determined by Fresnel term
	float VoH = saturate(dot(V, H));
	float Pdf = CalcClearCoatFresnel(VoH, Payload);

#if EVAL_TOP_LAYER == 0
	Pdf = 0.0;
#elif EVAL_BOTTOM_LAYER == 0
	Pdf = 1.0;
#endif
	return Pdf;
}

float ClearCoat_PdfMaterial(
	float3 IncomingDirection,
	float3 OutgoingDirection,
	FMaterialClosestHitPayload Payload
)
{
	// Compute GGX PDF
	float3 V = -IncomingDirection;
	float3 L = OutgoingDirection;
	float3 H = normalize(V + L);
	float3 N = GetWorldNormal(Payload);

	float NoH = saturate(dot(N, H));
	float HoV = saturate(dot(H, V));

	// Compute top-layer pdf
	float a2 = Pow4(GetClearCoatRoughness(Payload));
	float D = D_GGX(a2, NoH);
	float MicrofacetPdf = 0.0;
	if (HoV > 0.0)
	{
		MicrofacetPdf = D * NoH / (4.0 * HoV);
	}

	// Refract V and L
	float Eta = 1.0 / GetClearCoatIor(Payload);
	#if EVAL_REFRACTION == 1
	float3 V2;
	float3 L2;
	bool IsValidV2 = BSDF_Refract(V, H, Eta, V2);
	bool IsValidL2 = BSDF_Refract(L, H, Eta, L2);
	#else
		float3 V2 = -V;
		float3 L2 = -L;
		bool IsValidV2 = true;
		bool IsValidL2 = true;
	#endif

	// Compute bottom-layer pdf
	float BottomLayerPdf = 0.0;
	if (IsValidV2 && IsValidL2)
	{
		Payload.WorldNormal = GetClearCoatBottomNormal(Payload);
		BottomLayerPdf = DefaultLit_PdfMaterial(V2, -L2, Payload, GetClearCoatIor(Payload));
		Payload.WorldNormal = N;
	}
	
	// Return piecewise pdf
	float ClearCoatSelectionPdf = CalcClearCoatSelectionPdf(V, H, Payload);
	float Pdf = ClearCoatSelectionPdf * MicrofacetPdf + (1.0 - ClearCoatSelectionPdf) * BottomLayerPdf;
	return Pdf;
}

void ClearCoat_EvalMaterial(
	float3 IncomingDirection,
	float3 OutgoingDirection,
	inout FMaterialClosestHitPayload Payload,
	out float3 OutThroughput,
	out float OutPdf
)
{
	float3 V = -IncomingDirection;
	float3 L = OutgoingDirection;
	float3 H = normalize(V + L);
	float3 N = GetWorldNormal(Payload);

	float NoL = saturate(dot(N, L));
	float NoV = saturate(dot(N, V));
	float NoH = saturate(dot(N, H));
	float VoH = saturate(dot(V, H));

	// top-layer clear coat evaluation
	OutThroughput = 0.0;

#if EVAL_TOP_LAYER == 1
	float CC_a2 = Pow4(GetClearCoatRoughness(Payload));
	float CC_F = CalcClearCoatFresnel(VoH, Payload);
	float CC_D = D_GGX(CC_a2, NoH);
	float CC_G = Vis_SmithJointApprox(CC_a2, NoV, NoL) * (4.0 * NoV * NoL);

	float3 TopLayerThroughput = 0.0;
	if (NoV * NoL > 0.0)
	{
		float ClearCoat = GetClearCoat(Payload);
		// dxr_todo: NoL cancels
		TopLayerThroughput = ClearCoat * ((CC_F * CC_D * CC_G) / (4.0 * NoV * NoL)) * NoL;
	}

	OutThroughput += TopLayerThroughput;
#endif
	
	// bottom-layer clear coat evaluation
#if EVAL_BOTTOM_LAYER == 1
	float Eta = 1.0 / GetClearCoatIor(Payload);
	#if EVAL_REFRACTION == 1
	float3 V2;
	float3 L2;
	bool IsValidV2 = BSDF_Refract(V, H, Eta, V2);
	bool IsValidL2 = BSDF_Refract(L, H, Eta, L2);
	#else
		float3 V2 = -V;
		float3 L2 = -L;
		bool IsValidV2 = true;
		bool IsValidL2 = true;
	#endif
	if (IsValidV2 && IsValidL2)
	{
		V2 = -V2;
		L2 = -L2;
		float3 N2 = GetClearCoatBottomNormal(Payload);
		float N2oL2 = saturate(dot(N2, L2));
		float N2oV2 = saturate(dot(N2, V2));

		// Evaluate bottom coat
		Payload.WorldNormal = N2;
		float3 BottomLayerThroughput;
		float BottomLayerPdf;
		DefaultLit_EvalMaterial(-V2, L2, Payload, GetClearCoatIor(Payload), BottomLayerThroughput, BottomLayerPdf);
		Payload.WorldNormal = N;

		// Calculate transmission through substrate
		float3 Transmission = CalcThinTransmission(N2oL2, N2oV2, Payload);

		// Apply fresnel through exit interface
		float CC_F1 = CalcClearCoatFresnel(VoH, Payload);
		float HoL = saturate(dot(H, L));
		float CC_F2 = CalcClearCoatFresnel(HoL, Payload);

		OutThroughput += (1.0 - CC_F1) * (1.0 - CC_F2) * Transmission * BottomLayerThroughput;
	}
#endif

	OutPdf = ClearCoat_PdfMaterial(IncomingDirection, OutgoingDirection, Payload);
}

void ClearCoat_SampleMaterial(
	float3 RayDirection,
	FMaterialClosestHitPayload Payload,
	float4 RandSample,
	out float3 OutDirection,
	out float3 OutThroughput,
	out float OutPdf
)
{
	float3 N = GetWorldNormal(Payload);
	float3 V = -RayDirection;
	OutDirection = 0.0;
	OutThroughput = 0.0;
	OutPdf = 0.0;

	// Sample microfacet
	float a2 = Pow4(GetClearCoatRoughness(Payload));
	float4 Result = ImportanceSampleGGX(RandSample.zw, a2);
	float3 H = TangentToWorld(Result.xyz, N);
	float VoH = saturate(dot(V, H));

	float ClearCoatSelectionPdf = CalcClearCoatSelectionPdf(V, H, Payload);
	if (RandSample.x < ClearCoatSelectionPdf)
	{
		float NoH = saturate(dot(N, H));
		float D = D_GGX(a2, NoH);
		float MicrofacetPdf = 0.0;
		if (VoH > 0.0)
		{
			MicrofacetPdf = D * NoH / (4.0 * VoH);

			// Lighting direction is the reflection vector about the sampled microfacet
			float3 R = 2.0 * dot(V, H) * H - V;
			OutDirection = R;
			OutPdf = ClearCoatSelectionPdf * MicrofacetPdf;
			{
				// Calculate throughput
				float3 L = OutDirection;
				float NoL = saturate(dot(N, L));
				float NoV = saturate(dot(N, V));

				// top-layer clear coat evaluation
				float CC_a2 = Pow4(GetClearCoatRoughness(Payload));
				float CC_F = CalcClearCoatFresnel(VoH, Payload);
				float CC_D = D_GGX(CC_a2, NoH);
				float CC_G = Vis_SmithJointApprox(CC_a2, NoV, NoL) * (4.0 * NoV * NoL);

				if (NoV * NoL > 0.0)
				{
					float ClearCoat = GetClearCoat(Payload);
					// dxr_todo: NoL terms cancel
					OutThroughput = ClearCoat * ((CC_F * CC_D * CC_G) / (4.0 * NoV * NoL)) * NoL;
				}
			}
		}
	}
	else
	{
		RandSample.x -= ClearCoatSelectionPdf;
		RandSample.x /= (1.0 - ClearCoatSelectionPdf);

		// Refract V through clear coat
		float Eta = 1.0 / GetClearCoatIor(Payload);
		#if EVAL_REFRACTION == 1
		float3 V2;
		bool IsValidV2 = BSDF_Refract(V, N, Eta, V2);
		V2 = -V2;
		#else
			bool IsValidV2 = true;
			float3 V2 = V;
		#endif

		if (IsValidV2)
		{
			// Sample DefaultLit
			float3 N2 = GetClearCoatBottomNormal(Payload);
			Payload.WorldNormal = N2;

			float3 L2;
			float3 BottomLayerThroughput;
			float BottomLayerPdf;
			DefaultLit_SampleMaterial(-V2, Payload, GetClearCoatIor(Payload), RandSample, L2, BottomLayerThroughput, BottomLayerPdf);
			Payload.WorldNormal = N;

			// Refract outgoing ray
			#if EVAL_REFRACTION == 1
			bool IsValidL2 = BSDF_Refract(-L2, -N, 1.0 / Eta, OutDirection);
			#else
				OutDirection = L2;
				bool IsValidL2 = true;
			#endif
			if (BottomLayerPdf > 0.0 && IsValidL2)
			{
				// Calculate transmission through substrate
				float N2oL2 = saturate(dot(N2, L2));
				float N2oV2 = saturate(dot(N2, V2));
				float3 Transmission = CalcThinTransmission(N2oL2, N2oV2, Payload);

				// Apply fresnel through exit interface
				float NoV = saturate(dot(N, V));
				float CC_F1 = CalcClearCoatFresnel(NoV, Payload);
				float NoL = saturate(dot(N, OutDirection));
				float CC_F2 = CalcClearCoatFresnel(NoL, Payload);

				OutThroughput = (1.0 - CC_F1) * (1.0 - CC_F2) * Transmission * BottomLayerThroughput;
				OutPdf = (1.0 - ClearCoatSelectionPdf) * BottomLayerPdf;
			}
		}
	}
}
