// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================================
	PathTracingDefaultLit.usf: Path tracing BRDF model for default lit material
===============================================================================================*/

#pragma once

float CalcLobeSelectionPdf(float3 V, FMaterialClosestHitPayload Payload)
{
	// dxr_todo: Reinstate weighted lobe selection criteria (eg: roughness)
	return 0.5;

	float Pdf = min(GetRoughness(Payload), 0.9);
	return Pdf;
}

float DefaultLit_PdfMaterial(
	float3 IncomingDirection,
	float3 OutgoingDirection,
	FMaterialClosestHitPayload Payload
)
{
	float3 V_World = -IncomingDirection;
	float3 L_World = OutgoingDirection;
	float3 N_World = GetWorldNormal(Payload);
	float3 V = WorldToTangent(V_World, N_World);
	float3 L = WorldToTangent(L_World, N_World);
	float3 N = float3(0, 0, 1);
	float3 H = normalize(V + L);

	float NoL = saturate(dot(N, L));
	float NoH = saturate(dot(N, H));
	float HoV = saturate(dot(H, V));

	float LobeSelectionPdf = CalcLobeSelectionPdf(V_World, Payload);
	float Roughness = GetRoughness(Payload);
	float LambertPdf = NoL / PI;

	float a2 = Pow4(Roughness);
	float D = D_GGX(a2, NoH);
	float GlossyPdf = 0.0;
	if (HoV > 0.0)
	{
		GlossyPdf = D * NoH / (4.0 * HoV);
	}

	return LobeSelectionPdf * LambertPdf + (1.0 - LobeSelectionPdf) * GlossyPdf;
}

void DefaultLit_EvalMaterial(
	float3 IncomingDirection,
	float3 OutgoingDirection,
	FMaterialClosestHitPayload Payload,
	out float3 OutThroughput,
	out float OutPdf
);

void DefaultLit_SampleMaterial(
	float3 RayDirection,
	FMaterialClosestHitPayload Payload,
	float4 RandSample,
	out float3 OutDirection,
	out float3 OutThroughput,
	out float OutPdf
)
{
	float3 N = GetWorldNormal(Payload);
	float3 V = -RayDirection;
	
	float LobeSelectionPdf = CalcLobeSelectionPdf(V, Payload);

	float MisWeight = 0;
	// Choose lobe based on roughness
	if (RandSample.x < LobeSelectionPdf)
	{
		RandSample.x /= LobeSelectionPdf;

		// Lambert
		float4 Result = CosineSampleHemisphere(RandSample.xy);
		OutDirection = TangentToWorld(Result.xyz, N);
		float NoL = saturate(dot(N, OutDirection));
		OutThroughput = GetDiffuseColor(Payload) / PI * NoL;
		OutPdf = LobeSelectionPdf * Result.w;
	}
	else
	{
		RandSample.x -= LobeSelectionPdf;
		RandSample.x /= (1.0 - LobeSelectionPdf);

		// GGX
		float a2 = Pow4(GetRoughness(Payload));
		float4 Result = ImportanceSampleGGX(RandSample.xy, a2);
		float3 H = TangentToWorld(Result.xyz, N);
		float3 L = 2.0 * dot(V, H) * H - V;
		OutDirection = L;

		float NoV = saturate(dot(N, V));
		float NoH = saturate(dot(N, H));
		float NoL = saturate(dot(N, L));
		float VoH = saturate(dot(V, H));
		float3 F = F_Schlick(GetSpecularColor(Payload), VoH);
		float D = D_GGX(a2, NoH);
		// Note: Pedantic application of normalized weights is on purpose
		float G = Vis_SmithJointApprox(a2, NoV, NoL) * (4.0 * NoV * NoL);

		float MicrofacetPdf = 0.0;
		if (VoH > 0.0)
		{
			MicrofacetPdf = D * NoH / (4.0 * VoH);
		}

		OutThroughput = 0.0;
		if (NoV * NoL > 0.0)
		{
			OutThroughput = F * ((D * G) / (4.0 * NoV * NoL)) * NoL;
		}
		OutPdf = (1.0 - LobeSelectionPdf) * MicrofacetPdf;
	}
}

void DefaultLit_EvalMaterial(
	float3 IncomingDirection,
	float3 OutgoingDirection,
	FMaterialClosestHitPayload Payload,
	out float3 OutThroughput,
	out float OutPdf
)
{
	float3 V_World = -IncomingDirection;
	float3 L_World = OutgoingDirection;
	float3 N_World = GetWorldNormal(Payload);
	float3 V = WorldToTangent(V_World, N_World);
	float3 L = WorldToTangent(L_World, N_World);
	float3 N = float3(0, 0, 1);
	float3 H = normalize(V + L);

	float NoL = saturate(dot(N, L));
	float NoV = saturate(dot(N, V));
	float NoH = saturate(dot(N, H));
	float VoH = saturate(dot(V, H));

// dxr_todo:
// Disabling EvaluateBXDF path as hierarchical composition of materials does not apply the same Payload properties
//#ifndef PATH_TRACING
#if 1
	float a2 = Pow4(GetRoughness(Payload));
	float D = D_GGX(a2, NoH);
	// Note: Pedantic application of normalized weights is on purpose
	float G = Vis_SmithJointApprox(a2, NoV, NoL) * (4.0 * NoV * NoL);
	float3 F = F_Schlick(GetSpecularColor(Payload), VoH);

	float3 LambertThroughput = GetDiffuseColor(Payload) / PI;
	float3 GlossyThroughput = 0.0;
	if (NoV * NoL > 0.0)
	{
		 GlossyThroughput = F * ((D * G) / (4.0 * NoV * NoL));
	}
	OutThroughput = (LambertThroughput + GlossyThroughput) * NoL;
#else
	// Create faux GBuffer to use with EvaluateBxDF
	FGBufferData GBufferData = (FGBufferData)0;
	GBufferData.Depth = 1.f; // Do not use depth
	GBufferData.WorldNormal = Payload.WorldNormal;
	GBufferData.BaseColor = Payload.BaseColor;
	GBufferData.CustomData = Payload.CustomData;
	GBufferData.GBufferAO = Payload.GBufferAO;
	GBufferData.IndirectIrradiance = (Payload.IndirectIrradiance.x + Payload.IndirectIrradiance.y + Payload.IndirectIrradiance.z) / 3.f;
	GBufferData.SpecularColor = Payload.SpecularColor;
	GBufferData.DiffuseColor = Payload.DiffuseColor;
	GBufferData.Metallic = Payload.Metallic;
	GBufferData.Specular = Payload.Specular;
	GBufferData.Roughness = Payload.Roughness;
	GBufferData.ShadingModelID = Payload.ShadingModelID;
	GBufferData.CustomData = Payload.CustomData;

	FShadowTerms ShadowTerms = { 0.0, 0.0, 0.0, InitHairTransmittanceData() };
	FDirectLighting LightingSample = EvaluateBxDF(GBufferData, N, V, L, NoL, ShadowTerms);
	OutThroughput = LightingSample.Diffuse + LightingSample.Specular;
#endif

	OutPdf = DefaultLit_PdfMaterial(IncomingDirection, OutgoingDirection, Payload);
}