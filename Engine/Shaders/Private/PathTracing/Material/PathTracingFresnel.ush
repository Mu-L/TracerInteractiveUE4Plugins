// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================================
PathTracingFresnel.usf: Fresnel utilities for material sampling functions 
===============================================================================================*/
#pragma once


float FresnelDielectric(float CosThetaI, float IorI, float IorT)
{
	if (IorI == IorT)
	{
		return 1.0;
	}

	CosThetaI = clamp(CosThetaI, -1.0, 1.0);

	if (CosThetaI < 0.0)
	{
		// Swap indices
		CosThetaI = -CosThetaI;
		float IorTmp = IorI;
		IorI = IorT;
		IorT = IorTmp;
	}

	const float SinThetaI = 1.0 - (CosThetaI * CosThetaI);
	const float IorRatio = IorI / IorT;
	const float d = 1.0 - SinThetaI * IorRatio*IorRatio;
	if (d < 0.0)
	{
		return 1.0;
	}

	float CosThetaT = sqrt(d);
	float CosI_A = IorI * CosThetaI;
	float CosT_A = IorI * CosThetaT;
	float CosI_B = IorT * CosThetaI;
	float CosT_B = IorT * CosThetaT;

	float Parl = (CosT_A - CosI_B) / (CosT_A + CosI_B);
	float Perp = (CosI_A - CosT_B) / (CosI_A + CosT_B);
	float Fr = min(0.5*(Perp*Perp + Parl * Parl), 1.0);

	return Fr;
}

void CalcFresnelCoefficients(float CosTheta1, float N1, float N2, out float CosTheta2, out float Rs, out float Rp)
{
	Rs = 0.0;
	Rp = 0.0;
	CosTheta2 = 0.0;
	// Use Snell's law to compute CosTheta2:
	// N1 * sin(Theta1) = N2 * sin(Theta2)
	// [N1 * sin(Theta1)]^2 = [N2 * sin(Theta2)]^2
	float SinTheta1_Squared = 1.0 - CosTheta1 * CosTheta1;
	float SinTheta2_Squared = (SinTheta1_Squared * N1 * N1) / (N2 * N2);

	float CosTheta1_Squared = 1.0 - SinTheta1_Squared;
	float CosTheta2_Squared = 1.0 - SinTheta2_Squared;
	if (CosTheta2_Squared >= 0.0)
	{
		CosTheta2 = sqrt(CosTheta2_Squared);

		// Optimized Fresnel equations
		// Rs = (N1 * CosTheta1 - N2 * CosTheta2) / (N1 * CosTheta1 + N2 * CosTheta2);
		// Rp = (N2 * CosTheta1 - N1 * CosTheta2) / (N2 * CosTheta1 + N1 * CosTheta2);
		float N1_CosTheta1 = N1 * CosTheta1;
		float N1_CosTheta2 = N1 * CosTheta2;
		float N2_CosTheta1 = N2 * CosTheta1;
		float N2_CosTheta2 = N2 * CosTheta2;
		Rs = (N1_CosTheta1 - N2_CosTheta2) / (N1_CosTheta1 + N2_CosTheta2);
		Rp = (N2_CosTheta1 - N1_CosTheta2) / (N2_CosTheta1 + N1_CosTheta2);
	}
}

// TODO: Unify FresnelReflectance() and FresnelDielectric()
float FresnelReflectance(float CosTheta1, float N1, float N2)
{
	float CosTheta2;
	float Rs;
	float Rp;
	CalcFresnelCoefficients(CosTheta1, N1, N2, CosTheta2, Rs, Rp);

	float Fr = (Rs * Rs + Rp * Rp) / 2.0;
	return Fr;
}

float FresnelTransmittance(float CosTheta1, float N1, float N2)
{
	float Ft = 0.0;
	if (CosTheta1 > 0.0)
	{
		float CosTheta2;
		float Rs;
		float Rp;
		CalcFresnelCoefficients(CosTheta1, N1, N2, CosTheta2, Rs, Rp);

		float Ts = Rs + 1;
		float Tp = (Rp + 1) * N1 / N2;
		Ft = (Ts * Ts + Tp * Tp) / 2.0;
		Ft *= (N2 * CosTheta2) / (N1 * CosTheta1);
	}

	return Ft;
}