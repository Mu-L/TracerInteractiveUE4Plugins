// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

/*=============================================================================================
PathTracingMaterialCommon.usf: Brdf utility functions
===============================================================================================*/

#pragma once

#include "../PathTracingCommon.ush"
#include "/Engine/Private/BRDF.ush"


float3 GetMaterialEmission(FMaterialClosestHitPayload HitInfo)
{
	return HitInfo.Radiance;
}

float3 GetDiffuseColor(FMaterialClosestHitPayload HitInfo)
{
	return HitInfo.DiffuseColor;
}

float3 GetSpecularColor(FMaterialClosestHitPayload HitInfo)
{
	return HitInfo.SpecularColor;
}

float GetRoughness(FMaterialClosestHitPayload HitInfo)
{
	return HitInfo.Roughness;
}

float3 GetWorldNormal(FMaterialClosestHitPayload HitInfo)
{
	return HitInfo.WorldNormal;
}

bool IsPureSpecular(FMaterialClosestHitPayload HitInfo)
{
	return GetRoughness(HitInfo) < GLOSSY_MIN_ROUGHNESS;
}

bool IsPureSpecularReflection(FMaterialClosestHitPayload HitInfo)
{
	return IsPureSpecular(HitInfo) && HitInfo.BlendingMode == 0 && HitInfo.Metallic == 1;
}

bool IsPureSpecularTransmission(FMaterialClosestHitPayload HitInfo)
{
	return HitInfo.BlendingMode > RAY_TRACING_BLEND_MODE_OPAQUE;
}

bool IsLambert(FMaterialClosestHitPayload HitInfo)
{
	return GetRoughness(HitInfo) > GLOSSY_MAX_ROUGHNESS;
}

bool BSDF_Refract(float3 V, float3 N, float Eta, out float3 L)
{
	const float CosThetaI = dot(V, N);
	const float CosThetaT2 = 1.f - Eta * Eta * (1.0f - CosThetaI * CosThetaI);
	if (CosThetaT2 < 0.0f)
	{
		// Total internal reflection
		L = reflect(-V, N);
		return false;
	}

	const float CosThetaT = -(CosThetaI >= 0.0f ? 1.0f : -1.0f) * sqrt(CosThetaT2);
	L = (Eta * CosThetaI + CosThetaT) * N - Eta * V;

	return true;
}
