// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================================
PathTracingSpecularReflection.usf: Lambertian BRDF sampling functions
===============================================================================================*/
#pragma once

void SpecularReflection_SampleMaterial(
	float3 RayDirection,
	FMaterialClosestHitPayload Payload,
	out float3 OutDirection,
	out float3 OutThroughput,
	out float OutPdf)
{
	float3 N_World = GetWorldNormal(Payload);
	float3 SpecularColor = GetSpecularColor(Payload);

	float3 V_World = normalize(-RayDirection);
	OutDirection = reflect(-V_World, N_World);

	float NoV = saturate(dot(V_World, N_World));
	float VoH = NoV;
	OutThroughput = F_Schlick(SpecularColor, VoH);

	OutPdf = 1.0;
}

float SpecularReflection_Pdf()
{
	return 0.0;
}

void SpecularReflection_EvalMaterial(out float3 OutThroughput, out float OutPdf)
{
	OutThroughput = float3(0.0, 0.0, 0.0);
	OutPdf = SpecularReflection_Pdf();
}