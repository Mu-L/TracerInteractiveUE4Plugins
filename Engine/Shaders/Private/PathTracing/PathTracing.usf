// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

/*=============================================================================================
PathTracingRayGenShader.usf: Reference path tracing
===============================================================================================*/

#include "../Common.ush"
#include "../PostProcessCommon.ush"
#include "../RectLight.ush"
#include "../RayTracing/RayTracingCommon.ush"

#include "PathTracingCommon.ush"
#include "../RayTracing/RayTracingHitGroupCommon.ush"

#include "./Utilities/PathTracingRandomSequence.ush"
#include "./Light/PathTracingLightSampling.ush"
#include "./Material/PathTracingMaterialSampling.ush"
#include "PathTracingCamera.ush"


RWTexture2D<float4> RadianceRT;
RWTexture2D<uint>	SampleCountRT;
RWTexture2D<uint>   PixelPositionRT;
RWTexture2D<uint>	RayCountPerPixelRT;
RaytracingAccelerationStructure TLAS;


[shader("raygeneration")]
void PathTracingMainRG()
{
	uint2 LaunchIndex = DispatchRaysIndex().xy + View.ViewRectMin;
	
	bool IsUnidirectionalEnabled = true;
	bool IsNextEventEstimationEnabled = true;

	RadianceRT[LaunchIndex] = 0;
	SampleCountRT[LaunchIndex] = 0;
	PixelPositionRT[LaunchIndex] = 0;
	RayCountPerPixelRT[LaunchIndex] = 0;
	uint RayCounter = 0;
	
	// Initialize random sequence 
	float2 BufferSize = View.BufferSizeAndInvSize.xy; 
	uint LinearIndex = LaunchIndex.x + (LaunchIndex.y * BufferSize.x); 
	RandomSequence RandSequence;
	RandomSequence_Initialize(RandSequence, LinearIndex, AdaptiveSamplingData.Iteration);
	RandSequence.Type = AdaptiveSamplingData.RandomSequence;
	uint SampleIndex = 0;
	uint SampleCount = 1;

	for (uint i = 0; i < SampleCount; ++i) 
	{
		float3 Irradiance = 0;

		// Initialize ray and payload
		RayDesc Ray;
		uint2 Pixel;
		float EmitterPdf;
		SampleEmitter(LaunchIndex, RandSequence, SampleIndex, 0, 0, Ray, Pixel, EmitterPdf);
		if (EmitterPdf <= 0.0)
		{
			continue;
		}

		float3 RayThroughput = 1.0;
		float RayPdf = 1.0;

		FRayCone RayCone = (FRayCone)0;
		RayCone.SpreadAngle = View.EyeToPixelSpreadAngle;

		uint RayFlags = RAY_FLAG_CULL_BACK_FACING_TRIANGLES;

		// Cast ray
		FMaterialClosestHitPayload Payload = TraceRayInternal(
			TLAS,   // AccelerationStructure
			RayFlags,
			RAY_TRACING_MASK_ALL,
			RAY_TRACING_SHADER_SLOT_MATERIAL, // RayContributionToHitGroupIndex
			RAY_TRACING_NUM_SHADER_SLOTS,     // MultiplierForGeometryContributionToShaderIndex
			0,      // MissShaderIndex
			Ray,    // RayDesc
			RayCone
		);
		RayCounter++;

		float MaterialPdf = 0.0;
		uint Bounces = 0;
		while (Bounces < PathTracingData.MaxBounces)
		{
			// Environment contribution
			if (Payload.IsMiss())
			{
				// WARNING: Until ray payload encodes NEE LightId, the execution depends on this ordering!
				uint SkyLightId = 0;
				float3 EnvironmentRadiance = 0.0;
				SkyLight_EvalLight(SkyLightId, Ray.Direction, Ray, EnvironmentRadiance);
				if (length(EnvironmentRadiance) > 0.0)
				{
					if (IsUnidirectionalEnabled)
					{
						// Apply NEE Pdf for correct MIS weight
						float MisWeight = 1.0;
						if (IsNextEventEstimationEnabled && Bounces > 0)
						{
							float NeePdf = 0.0;
							float3 LightUV = GetLightUV(SkyLightId, Ray, Payload);
							PdfLight(Ray, Payload, SkyLightId, LightUV, NeePdf);

							// Note: MaterialPdf will need to be stored on the ray for an iterative solution
							MisWeight = MaterialPdf / (MaterialPdf + NeePdf);
						}
						Irradiance += EnvironmentRadiance * RayThroughput * MisWeight / RayPdf;
					}
					// Record primary environment hits with NEE
					else if (IsNextEventEstimationEnabled && Bounces == 0)
					{
						Irradiance += EnvironmentRadiance * RayThroughput / RayPdf;
					}
				}
				break;
			}

			// Emissive geometry contribution
			float3 Emission = GetMaterialEmission(Payload);
			if (any(Emission) > 0.0)
			{
				if (IsUnidirectionalEnabled)
				{
					// Apply NEE Pdf for correct MIS weight
					float MisWeight = 1.0;
					if (IsNextEventEstimationEnabled && Bounces > 0)
					{
						float NeePdf = 0.0;
						int LightId = GetLightId(Payload);
						float3 LightUV = GetLightUV(LightId, Ray, Payload);
						PdfLight(Ray, Payload, LightId, LightUV, NeePdf);

						float MisWeight = MaterialPdf / (MaterialPdf + NeePdf);
					}

					Irradiance += Emission * RayThroughput * MisWeight / RayPdf;
				}
				// Record primary environment hits with NEE
				else if (IsNextEventEstimationEnabled && Bounces == 0)
				{
					Irradiance += Emission * RayThroughput / RayPdf;
				}
				break;
			}

			Bounces = Bounces + 1;
			// Update origin
			Ray.Origin = Ray.Origin + Ray.Direction * Payload.HitT;
			FMaterialClosestHitPayload RayHitInfo = Payload; 

			// Perform next-event estimation
			bool bIsPureSpecular = IsPureSpecular(RayHitInfo);
			if (IsNextEventEstimationEnabled && !bIsPureSpecular)
			{
				int LightId;
				float3 LightUV;
				float NeePdf = 0.0;
				float4 RandSample = RandomSequence_GenerateSample4D(RandSequence, SampleIndex);
				SampleLight(Ray, RayHitInfo, RandSample, LightId, LightUV, NeePdf);

				// Fire visibility ray
				if (NeePdf > 0.0)
				{
					RayDesc LightRay;

					FRayCone LightRayCone = RayCone;

					GenerateLightRay(Ray, LightId, LightUV, LightRay);
					ApplyPositionBias(LightRay, Payload.WorldNormal, AdaptiveSamplingData.MaxNormalBias);
					
					uint RayFlags = RAY_FLAG_CULL_BACK_FACING_TRIANGLES;

					FMaterialClosestHitPayload NeePayload = TraceRayInternal(
						TLAS,      // AccelerationStructure
						RayFlags,
						RAY_TRACING_MASK_SHADOW,
						RAY_TRACING_SHADER_SLOT_SHADOW,   // RayContributionToHitGroupIndex
						RAY_TRACING_NUM_SHADER_SLOTS,     // MultiplierForGeometryContributionToShaderIndex
						0,         // MissShaderIndex
						LightRay,
						LightRayCone
					);
					RayCounter++;

					if (NeePayload.IsMiss())
					{
						FMaterialClosestHitPayload RayHitInfo = Payload; 
#if 0
						// DEBUG: Validate NEE PDF
						float NeePdfTmp;
						PdfLight(Ray, RayHitInfo, LightId, LightUV, NeePdfTmp);
						if (abs(NeePdf - NeePdfTmp) > 0.0001)
						{
							Irradiance = float3(-10, -10, -10);
							break;
						}
#endif
						// Evaluate radiance
						float3 Radiance;
						EvalLight(LightId, LightUV, LightRay, Radiance);

						// Evaluate material
						float3 MaterialThroughput;
						float MaterialEvalPdf = 0.0;
						EvalMaterial(Ray.Direction, LightRay.Direction, RayHitInfo, MaterialThroughput, MaterialEvalPdf);

						// Apply material Pdf for correct MIS weight
						float MisWeight = 1.0;
						if (IsUnidirectionalEnabled && IsPhysicalLight(LightId))
						{
#if 0
							// DEBUG: Validate Material PDF
							float MaterialPdfTmp;
							PdfMaterial(Ray.Direction, LightRay, RayHitInfo, MaterialPdfTmp);
							if (abs(MaterialPdf - MaterialPdfTmp) > 0.0001)
							{
								MaterialThroughput *= -1.f;
							}
#endif

							MisWeight = NeePdf / (NeePdf + MaterialEvalPdf);
						}

						// Record the contribution
						Irradiance += Radiance * MaterialThroughput * RayThroughput * MisWeight / (NeePdf * RayPdf);
					}
				}
			}

			// Sample material
			float3 Direction;
			float3 Throughput;
			float4 RandSample = RandomSequence_GenerateSample4D(RandSequence, SampleIndex);
			float SignedPositionBias;
			SampleMaterial(Ray.Direction, RayHitInfo, RandSample, Direction, Throughput, MaterialPdf, SignedPositionBias);
			if (MaterialPdf == 0.0)
			{
				break;
			}

			// Update ray
			Ray.Direction = Direction;
			ApplyPositionBias(Ray, SignedPositionBias * Payload.WorldNormal, AdaptiveSamplingData.MaxNormalBias);
			RayThroughput *= Throughput;
			RayPdf *= MaterialPdf;

			// Russian roulette
			float PathEnergy = max(max(RayThroughput.x, RayThroughput.y), RayThroughput.z);
			float EnergyThreshold = 1.0; 
			if (PathEnergy < EnergyThreshold && Bounces > 4)
			{
				float Q = 1.0 - PathEnergy;
				if (RandomSequence_GenerateSample1D(RandSequence, SampleIndex) < Q)
				{
					break;
				}

				RayThroughput /= (1.0 - Q);
			}

			// Firefly rejection
			PathEnergy = max(max(RayThroughput.x, RayThroughput.y), RayThroughput.z);
			float FireflyThreshold = 5.0;
			if (PathEnergy / RayPdf > FireflyThreshold)
			{
				break;
			}

			// Trace again
			Payload = TraceRayInternal(TLAS,
				RAY_FLAG_CULL_BACK_FACING_TRIANGLES,
				RAY_TRACING_MASK_ALL,
				RAY_TRACING_SHADER_SLOT_MATERIAL, // RayContributionToHitGroupIndex
				RAY_TRACING_NUM_SHADER_SLOTS,     // MultiplierForGeometryContributionToShaderIndex
				0,    // MissShaderIndex
				Ray,
				RayCone /* propagated by the material CHS */
			);
			RayCounter++;
		}

		uint2 RenderTargetPos = LaunchIndex.xy + View.ViewRectMin.xy;
		RadianceRT[RenderTargetPos].rgb += Irradiance;
		SampleCountRT[RenderTargetPos] += 1;
		PixelPositionRT[RenderTargetPos] = Pixel.y * BufferSize.x + Pixel.x;
		RayCountPerPixelRT[RenderTargetPos] += RayCounter;
	}
}
