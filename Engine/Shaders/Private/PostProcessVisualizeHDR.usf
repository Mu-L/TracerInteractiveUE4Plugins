// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

#include "Common.ush"
#include "ScreenPass.ush"
#include "PostProcessCommon.ush"
#include "PostProcessHistogramCommon.ush"
#include "DeferredShadingCommon.ush"
#include "TonemapCommon.ush"
#include "MiniFontCommon.ush"

// the prior frame's eye adaptation settings
Texture2D EyeAdaptationTexture;

Texture2D SceneColorTexture;
SamplerState SceneColorSampler;

Texture2D HDRSceneColorTexture;
SamplerState HDRSceneColorSampler;

Texture2D HistogramTexture;

SCREEN_PASS_TEXTURE_VIEWPORT(Input)
SCREEN_PASS_TEXTURE_VIEWPORT(Output)

// only needed for nice visualization
float ComputeHistogramMax(Texture2D HistogramTexture)
{
	float Max = 0;

	for(uint i = 0; i < HISTOGRAM_SIZE; ++i)
	{
		Max = max(Max, GetHistogramBucket(HistogramTexture, i));
	}

	return Max;
}

uint ComputeAdvice(float3 HDRColor)
{
	float Lum = max(HDRColor.r, max(HDRColor.g, HDRColor.b));

	if(Lum < EyeAdaptation_MinAverageLuminance)
	{
		return 1;
	}

	return 0;
}

uint ComputeAdviceUV(float2 UV)
{
	float3 HDRColor = Texture2DSample(HDRSceneColorTexture, HDRSceneColorSampler, UV).rgb;
	
	return ComputeAdvice(HDRColor);
}

// to highlight areas that have unrealistic materials
void HighlightAdvice(inout float3 OutColor, float2 UV, int2 PixelPos)
{
	uint AdviceInner = ComputeAdviceUV(UV);
	uint AdviceOuter = 0;

	bool SpecialDotInArea = ((PixelPos.x + PixelPos.y) % 6) == 0 && ((PixelPos.x - PixelPos.y) % 6) == 0;
	
	AdviceOuter = max(AdviceOuter, ComputeAdviceUV(UV + float2( 1,  0) * Input_ExtentInverse));
	AdviceOuter = max(AdviceOuter, ComputeAdviceUV(UV + float2( 0,  1) * Input_ExtentInverse));
	AdviceOuter = max(AdviceOuter, ComputeAdviceUV(UV + float2(-1,  0) * Input_ExtentInverse));
	AdviceOuter = max(AdviceOuter, ComputeAdviceUV(UV + float2( 0, -1) * Input_ExtentInverse));

	uint Advice = (AdviceInner == AdviceOuter && !SpecialDotInArea) ? 0 : AdviceOuter;

	FLATTEN if(Advice)
	{
		 FLATTEN if(Advice == 1)
		 {
			 // heavy shading cost
			 OutColor = float3(0, 0, 0.8f);
		 }
		 else
		 FLATTEN if(Advice == 2)
		 {
			 // warning
			 OutColor = float3(0.8f, 0.8f, 0);
		 }
		 else // if(Advice == 3)
		 {
			 // error
			 OutColor = float3(1, 0, 0);
		 }
	}
}

bool InUnitBox(float2 UV)
{
	return UV.x >= 0 && UV.y >= 0 && UV.y < 1 && UV.y < 1;
}


// @param x 0=cold..1=hot
float3 Colorize(float x)
{
	x = saturate(x);

	float3 Heat = float3(1.0f, 0.0f, 0.0f);
	float3 Middle = float3(0.0f, 1.0f, 0.0f);
	float3 Cold = float3(0.0f, 0.0f, 1.0f);

	float3 ColdHeat = lerp(Cold, Heat, x);

	return lerp(Middle, ColdHeat, abs(0.5f - x) * 2);
}

//
void MainPS(noperspective float4 UVAndScreenPos : TEXCOORD0, float4 SvPosition : SV_POSITION, out float4 OutColor : SV_Target0)
{
	float2 UV = UVAndScreenPos.xy;
	int2 PixelPos = (int2)SvPosition.xy;
	float2 ViewLocalUV = float2(UVAndScreenPos.z * 0.5f + 0.5f, 0.5f - 0.5f * UVAndScreenPos.w);

	// retrieve the exposure scale and target exposure scale from the eye-adaptation buffer.
	float EyeAdaptationResult = EyeAdaptationTexture.Load(int3(0, 0, 0)).r;
	float EyeAdaptationTarget = EyeAdaptationTexture.Load(int3(0, 0, 0)).g;

	int2 OutputViewportCenter = (int2)(Output_ViewportMin + Output_ViewportSize / 2);

	float2 UVViewportCenter = (Input_UVViewportMin + Input_UVViewportSize / 2);

	// Luminance meter at the center of the screen
	{
		const float PixelDx = abs(PixelPos.x - OutputViewportCenter.x);
		const float PixelDy = abs(PixelPos.y - OutputViewportCenter.y);
		if (PixelDx < 100 && PixelDy < 40)
		{
			float3 LuminanceAvg = 0.0f;
			float3 SceneColorAvg = 0.0f;
			float SampleCount = 0.0f;
			float MeterSize = 10.0f;
			for (float OffsetX = -MeterSize; OffsetX <= MeterSize; OffsetX++)
			{
				for (float OffsetY = -MeterSize; OffsetY <= MeterSize; OffsetY++)
				{
					float2 UV = UVViewportCenter + float2(OffsetX, OffsetY) * Input_ExtentInverse;
					LuminanceAvg  += Texture2DSample(HDRSceneColorTexture, HDRSceneColorSampler, UV).rgb;
					SceneColorAvg += Texture2DSample(SceneColorTexture, SceneColorSampler, UV).rgb;
					SampleCount++;
				}
			}
			LuminanceAvg  = LuminanceAvg / SampleCount;
			SceneColorAvg = SceneColorAvg / SampleCount;
		#if USE_PREEXPOSURE
			LuminanceAvg *= View.OneOverPreExposure;
		#endif
			if (PixelDx < MeterSize && PixelDy < MeterSize)
			{
				if (PixelDx == MeterSize-1 || PixelDy == MeterSize-1)
				{
					OutColor = float4(1.0, 1.0, 1.0, 1.0); // White border
				}
				else
				{
					OutColor = float4(SceneColorAvg, 1.0); // Inner visor average color
				}
			}
			else
			{
				OutColor = Texture2DSample(SceneColorTexture, SceneColorSampler, UV); // Influenced area default scene color
			}

			float MaxLuminance = max(LuminanceAvg.r, max(LuminanceAvg.g, LuminanceAvg.b));
			float MaxIlluminance = MaxLuminance * PI;

			// Luminance
			int2 TopLeft = OutputViewportCenter + int2(11, 11);
			if (MaxLuminance < 1000.0f)
			{
				PrintFloat(PixelPos, OutColor.xyz, float3(1, 1, 1), TopLeft, MaxLuminance);
			}
			else
			{
				PrintFloatNoFractionLarge(PixelPos, OutColor.xyz, float3(1, 1, 1), TopLeft, MaxLuminance);
			}
			TopLeft.x += 60;
			PrintCharacter(PixelPos, OutColor.xyz, float3(1, 1, 1), TopLeft, _N_);
			PrintCharacter(PixelPos, OutColor.xyz, float3(1, 1, 1), TopLeft, _I_);
			PrintCharacter(PixelPos, OutColor.xyz, float3(1, 1, 1), TopLeft, _T_);
			// Illuminance
			TopLeft = OutputViewportCenter + int2(11, 22);
			if (MaxIlluminance < 1000.0f)
			{
				PrintFloat(PixelPos, OutColor.xyz, float3(1, 1, 1), TopLeft, MaxIlluminance);
			}
			else
			{
				PrintFloatNoFractionLarge(PixelPos, OutColor.xyz, float3(1, 1, 1), TopLeft, MaxIlluminance);
			}
			TopLeft.x += 60;
			PrintCharacter(PixelPos, OutColor.xyz, float3(1, 1, 1), TopLeft, _L_);
			PrintCharacter(PixelPos, OutColor.xyz, float3(1, 1, 1), TopLeft, _U_);
			PrintCharacter(PixelPos, OutColor.xyz, float3(1, 1, 1), TopLeft, _X_);
			return;
		}
	}

	// background is the scene color
	float2 PIPTopLeft = float2(.6, .2);
	float2 PIPBottomRight = float2(.9, .5);
	float2 PIPUV = (ViewLocalUV - PIPTopLeft) / (PIPBottomRight - PIPTopLeft);

	if (PIPUV.x == saturate(PIPUV.x) && PIPUV.y == saturate(PIPUV.y))
	{
		// Remap from (0, 0) - (1, 1) to ViewportRect / BufferSize
		PIPUV = PIPUV * Input_ViewportSize * Input_ExtentInverse + Input_UVViewportBilinearMin;
		float4 SceneColor = Texture2DSample(HDRSceneColorTexture, HDRSceneColorSampler, PIPUV);
	#if USE_PREEXPOSURE
		SceneColor.xyz *= View.OneOverPreExposure;
	#endif
		float LuminanceVal = max(SceneColor.r, max(SceneColor.g, SceneColor.b));
		OutColor = float4(Colorize(ComputeHistogramPositionFromLuminance(LuminanceVal)), 1.0f);
	}
	else
	{
		OutColor = Texture2DSample(SceneColorTexture, SceneColorSampler, UV);
	}

	// Compute and apply weight value at this location 
	float WeightSlope = EyeAdaptation_WeightSlope;
	float2 NdPos = Output_ViewportSizeInverse * (PixelPos.xy - Output_ViewportMin);
	float weight = AdaptationWeight(NdPos.x, WeightSlope) * AdaptationWeight(NdPos.y, WeightSlope);
	OutColor *= max(weight, 0.05f);  

	float2 IDAreaLocalUV = ViewLocalUV * 2 + float2(-1, 0);

	// left top of the border
	const int2 HistogramLeftTop = int2(Output_ViewportMin.x + 64, Output_ViewportMax.y - 128 - 32);
	const int2 HistogramSize = int2(Output_ViewportMax.x - Output_ViewportMin.x - 64 * 2, 128);
	const int HistogramOuterBorder = 4;

	// (0, 0) .. (1, 1)
	float2 InsetPx = PixelPos - HistogramLeftTop;
	float2 InsetUV = InsetPx / HistogramSize;
	
	const float3 BorderColor = Colorize(InsetUV.x);

	float BorderDistance = ComputeDistanceToRect(PixelPos, HistogramLeftTop, HistogramSize);
	
	// thin black border around the histogram
	OutColor.xyz = lerp(float3(0, 0, 0), OutColor.xyz, saturate(BorderDistance - (HistogramOuterBorder + 2)));

	// big solid border around the histogram
	OutColor.xyz = lerp(BorderColor, OutColor.xyz, saturate(BorderDistance - (HistogramOuterBorder + 1)));

	// thin black border around the histogram
	OutColor.xyz = lerp(float3(0, 0, 0), OutColor.xyz, saturate(BorderDistance - 1));

	if(BorderDistance > 0)
	{
		// outside of the histogram
		return;
	}

	// inside the histogram
	uint Bucket = (uint)(InsetUV.x * HISTOGRAM_SIZE);

	float HistogramSum = ComputeHistogramSum(HistogramTexture);

	if(InsetUV.x < ComputeHistogramPositionFromLuminance(EyeAdaptation_MinAverageLuminance))
	{
		// < min: grey
		OutColor.xyz = lerp(OutColor.xyz, float3(0.5f, 0.5f, 0.5f), 0.5f);
	}
	else if(InsetUV.x < ComputeHistogramPositionFromLuminance(EyeAdaptation_MaxAverageLuminance))
	{
		// >= min && < max: green
		OutColor.xyz = lerp(OutColor.xyz, float3(0.5f, 0.8f, 0.5f), 0.5f);
	}
	else
	{
		// >= max: grey
		OutColor.xyz = lerp(OutColor.xyz, float3(0.5f, 0.5f, 0.5f), 0.5f);
	}

	float LocalHistogramValue = GetHistogramBucket(HistogramTexture, Bucket) / ComputeHistogramMax(HistogramTexture);
	if(LocalHistogramValue >= 1 - InsetUV.y)
	{
		// histogram bars
		OutColor.xyz = lerp(OutColor.xyz, Colorize(InsetUV.x), 0.5f);
	}

	{
		// HDR luminance >0
		float LuminanceVal = ComputeLuminanceFromHistogramPosition(InsetUV.x);
		// HDR > 0
		float3 AdpatedLuminance = EyeAdaptationResult * float3(LuminanceVal, LuminanceVal, LuminanceVal);
		// 0..1
		float3 TonemappedLuminance = FilmPostProcess(AdpatedLuminance);
		float3 DistMask = saturate(1.0 - 100.0 * abs(TonemappedLuminance - (1.0 - InsetUV.y)));
		OutColor = lerp(OutColor, float4(1, 1, 1, 0), float4(DistMask, 0.0));
	}

	{
		float ValuePx = ComputeHistogramPositionFromLuminance(1.0f / EyeAdaptationTarget)  * HistogramSize.x ;
		if(abs(InsetPx.x - ValuePx) < 3)
		{
			// blue line to show the clamped percentil
			OutColor = lerp(OutColor, float4(0, 0, 1, 0), 0.5f);
		}
	}

	// eye adaptation
	{
		const float OneOverEyeAdaptationResult = 1.0f / EyeAdaptationResult;

		const float EyeAdaptationValue = ComputeHistogramPositionFromLuminance(OneOverEyeAdaptationResult);
		const float ValuePx = EyeAdaptationValue * HistogramSize.x;

		const float EyeAdaptationEV100 = log2(OneOverEyeAdaptationResult / 1.2f);

		PrintSmallFloat(PixelPos, OutColor.xyz, float3(1, 1, 1), HistogramLeftTop + int2(ValuePx + - 3 * 8 - 3, 1), EyeAdaptationEV100);

		if(abs(InsetPx.x - ValuePx) < 2 && PixelPos.y > HistogramLeftTop.y + 9)
		{
			// white line to show the smoothed exposure
			OutColor = lerp(OutColor, float4(1, 1, 1, 0), 1.0f);
		}
	}
}