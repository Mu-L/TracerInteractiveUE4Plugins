// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

/*=============================================================================================
	MipTreeCommon.ush: Common utilities for MipTree-based sampling
===============================================================================================*/

#define USE_MORTON_CODE 1

uint2 DimensionsAtLevel(uint2 Dimensions, uint Level)
{
	return uint2(Dimensions.x >> Level, Dimensions.y >> Level);
}

// #dxr_todo: Discussing with Brian where these utility functions should live.
uint MortonEncode(uint2 Pixel)
{
	Pixel.x &= 0x0000ffff;
	Pixel.x = (Pixel.x ^ (Pixel.x << 8)) & 0x00ff00ff;
	Pixel.x = (Pixel.x ^ (Pixel.x << 4)) & 0x0f0f0f0f;
	Pixel.x = (Pixel.x ^ (Pixel.x << 2)) & 0x33333333;
	Pixel.x = (Pixel.x ^ (Pixel.x << 1)) & 0x55555555;

	Pixel.y &= 0x0000ffff;
	Pixel.y = (Pixel.y ^ (Pixel.y << 8)) & 0x00ff00ff;
	Pixel.y = (Pixel.y ^ (Pixel.y << 4)) & 0x0f0f0f0f;
	Pixel.y = (Pixel.y ^ (Pixel.y << 2)) & 0x33333333;
	Pixel.y = (Pixel.y ^ (Pixel.y << 1)) & 0x55555555;
	return Pixel.x | (Pixel.y << 1);
}

uint2 MortonDecode(uint Morton)
{
	uint2 Pixel = uint2(Morton, Morton >> 1);
	Pixel.x &= 0x55555555;
	Pixel.x = (Pixel.x ^ (Pixel.x >> 1)) & 0x33333333;
	Pixel.x = (Pixel.x ^ (Pixel.x >> 2)) & 0x0f0f0f0f;
	Pixel.x = (Pixel.x ^ (Pixel.x >> 4)) & 0x00ff00ff;
	Pixel.x = (Pixel.x ^ (Pixel.x >> 8)) & 0x0000ffff;

	Pixel.y &= 0x55555555;
	Pixel.y = (Pixel.y ^ (Pixel.y >> 1)) & 0x33333333;
	Pixel.y = (Pixel.y ^ (Pixel.y >> 2)) & 0x0f0f0f0f;
	Pixel.y = (Pixel.y ^ (Pixel.y >> 4)) & 0x00ff00ff;
	Pixel.y = (Pixel.y ^ (Pixel.y >> 8)) & 0x0000ffff;
	return Pixel;
}

uint BufferOffsetAtPixel(uint2 Pixel, uint Level, uint2 Dimensions)
{
	uint Offset = 0;
	for (uint LevelIndex = 0; LevelIndex < Level; ++LevelIndex)
	{
		uint2 MipLevelDimensions = DimensionsAtLevel(Dimensions, LevelIndex);
		Offset += MipLevelDimensions.x * MipLevelDimensions.y;
	}

	uint2 MipLevelDimensions = DimensionsAtLevel(Dimensions, Level);
#if USE_MORTON_CODE
	// NOTE: Morton encoding requires power-of-two dimensionality..
	Offset += MortonEncode(Pixel);
#else
	Offset += Pixel.y * MipLevelDimensions.x + Pixel.x;
#endif
	return Offset;
}
