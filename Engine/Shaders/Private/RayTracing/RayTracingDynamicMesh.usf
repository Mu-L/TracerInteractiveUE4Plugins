// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	RayTracingDynamicMesh.usf
=============================================================================*/

#include "/Engine/Private/Common.ush"
#include "/Engine/Generated/Material.ush"
#include "/Engine/Generated/VertexFactory.ush"
 
struct FRayTracingDynamicMeshVSToGS
{
	float4 WorldPosition : SV_POSITION;
};

void RayTracingDynamicMeshVS(
	FVertexFactoryInput Input,
	out FRayTracingDynamicMeshVSToGS Output
	)
{
	ResolvedView = ResolveView();

	FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);
	Output.WorldPosition = VertexFactoryGetWorldPosition(Input, VFIntermediates) - float4(ResolvedView.PreViewTranslation, 0.0f);
}

// Must match GetUniformMeshStreamOutLayout and TRIANGLE_VERTEX_DATA_STRIDE
struct FRayTracingDynamicMeshVertex
{
	float4 WorldPosition : SV_POSITION;
};

[maxvertexcount(3)]
void RayTracingDynamicMeshGS(triangle FRayTracingDynamicMeshVSToGS Inputs[3], inout TriangleStream<FRayTracingDynamicMeshVertex> OutStream)
{ 
	for (int i = 0; i < 3; i++)
	{
		FRayTracingDynamicMeshVSToGS Input = Inputs[i];

		FRayTracingDynamicMeshVertex Vertex;
		Vertex.WorldPosition = Input.WorldPosition;

		OutStream.Append(Vertex);
	}
}

#if COMPUTESHADER
uint VertexBufferSize;
uint NumVertices;
uint MinVertexIndex;
uint PrimitiveId;
RWBuffer<float> RWVertexPositions;

[numthreads(64, 1, 1)]
void RayTracingDynamicGeometryConverterCS(uint3 DispatchThreadId : SV_DispatchThreadID)
{ 
	ResolvedView = ResolveView();

	if (DispatchThreadId.x >= VertexBufferSize) return;

	bool bUsingIndirectDraw = GetNumRayTracingDynamicMeshVerticesIndirect() > 0;
	
	uint NumActualVertices = NumVertices > 0 ? NumVertices : GetNumRayTracingDynamicMeshVerticesIndirect();
	
	uint VertexIndex = MinVertexIndex + DispatchThreadId.x;
	
	if (DispatchThreadId.x <= NumActualVertices)
	{
		FVertexFactoryInput Input = LoadVertexFactoryInputForDynamicUpdate(VertexIndex / 3, VertexIndex % 3, PrimitiveId);
		FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);
		float4 WorldPosition = VertexFactoryGetWorldPosition(Input, VFIntermediates);
		float3x3 TangentToLocal = VertexFactoryGetTangentToLocal(Input, VFIntermediates);
		FMaterialVertexParameters VertexParameters = GetMaterialVertexParameters(Input, VFIntermediates, WorldPosition.xyz, TangentToLocal);

		WorldPosition.xyz -= ResolvedView.PreViewTranslation;
		WorldPosition.xyz += GetMaterialWorldPositionOffset(VertexParameters);

		RWVertexPositions[VertexIndex * 3 + 0] = WorldPosition.x;
		RWVertexPositions[VertexIndex * 3 + 1] = WorldPosition.y;
		RWVertexPositions[VertexIndex * 3 + 2] = WorldPosition.z;
	}
	else if (bUsingIndirectDraw)
	{
		RWVertexPositions[VertexIndex * 3 + 0] = asfloat(0xFFFFFFFF);
		RWVertexPositions[VertexIndex * 3 + 1] = 0;
		RWVertexPositions[VertexIndex * 3 + 2] = 0;
	}
}
#endif
