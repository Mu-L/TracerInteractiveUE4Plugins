// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

#include "../Common.ush"
#include "../MonteCarlo.ush"
#include "../DeferredShadingCommon.ush"
#include "../ShadingModels.ush"
#include "SkyLightMipTreeCommon.ush"
#include "RayTracingCommon.ush"
#include "RayTracingDirectionalLight.ush"
#include "RayTracingRectLight.ush"

RaytracingAccelerationStructure TLAS;
RWTexture2D<float4> RWOcclusionMaskUAV;
RWTexture2D<float2> RWRayDistanceUAV;

#define USE_MIP_PDF_TEXTURE 1
#define USE_SOLID_ANGLE_TEXTURE 1

uint CalcLinearIndex(uint2 PixelCoord)
{
	return PixelCoord.y * View.BufferSizeAndInvSize.x + PixelCoord.x;
}

// #dxr_todo: Copied from PathTracingSkyLight.ush
float3 EvalSkyLight(float3 Direction)
{
	return SkyLight.Color * TextureCubeSampleLevel(SkyLight.Texture, SkyLight.TextureSampler, Direction, 0).rgb;
}

float PdfSkyLightOcclusionRay(
	float3 WorldNormal,
	float3 WorldDirection
)
{
	// Determine primary direction
	uint MipCount = log2(SkyLight.MipDimensions.x);
	uint2 TextureRes;
	SkyLight.Texture.GetDimensions(TextureRes.x, TextureRes.y);
	uint3 TextureCoord = GetTextureCubeCoordinate(WorldDirection, TextureRes);
	float2 TextureUV = TextureCoord.xy / (float2)TextureRes;
	uint2 MipCoord = TextureUV * SkyLight.MipDimensions.xy;
	float FacePdf = PdfFace(MipCount, TextureCoord.z);

	// #dxr_todo: StopLevel can be customized for run-time performance
	uint StopLevel = min(SkyLight.SamplingStopLevel, MipCount);
#if USE_MIP_PDF_TEXTURE
	float MipPdf = PdfMipTree(uint3(MipCoord, TextureCoord.z), StopLevel);

#if USE_SOLID_ANGLE_TEXTURE
	uint LinearIndex = BufferOffsetAtPixel(MipCoord, StopLevel, SkyLight.MipDimensions.xy);
	float AreaPdf = SkyLight.SolidAnglePdf[LinearIndex];
#else
	float AreaPdf = 1.0 / TexelCoordSolidAngle(MipCoord, DimensionsAtLevel(SkyLight.MipDimensions, StopLevel));
#endif
	return FacePdf * MipPdf * AreaPdf;
#else
	uint2 MipPixel = 0;
	float MipPdf = 1.0;
	for (uint Index = 0; Index < MipCount - StopLevel; ++Index)
	{
		// Build Cdf
		uint MipIndex = MipCount - Index - 1;
#if USE_MORTON_CODE
		uint BufferOffset = BufferOffsetAtPixel(MipPixel, MipIndex, SkyLight.MipDimensions);
		uint4 BufferOffsets = uint4(BufferOffset, BufferOffset + 1, BufferOffset + 2, BufferOffset + 3);
#else
		uint4 BufferOffsets;
		BufferOffsets.x = BufferOffsetAtPixel(MipPixel, MipIndex, SkyLight.MipDimensions.xy);
		BufferOffsets.y = BufferOffsetAtPixel(MipPixel + uint2(1, 0), MipIndex, SkyLight.MipDimensions.xy);
		BufferOffsets.z = BufferOffsetAtPixel(MipPixel + uint2(0, 1), MipIndex, SkyLight.MipDimensions.xy);
		BufferOffsets.w = BufferOffsetAtPixel(MipPixel + uint2(1, 1), MipIndex, SkyLight.MipDimensions.xy);
#endif
		float4 Cdf = SampleMipTree(TextureCoord.z, BufferOffsets);
		Cdf.y += Cdf.x;
		Cdf.z += Cdf.y;
		Cdf.w += Cdf.z;
		Cdf /= Cdf.w;

		// Determine texel choice
		uint2 MipOffset = (MipCoord.xy >> MipIndex) - MipPixel;
		uint LinearIndex = MipOffset.y << 1 | MipOffset.x;
		MipPdf *= LinearIndex > 0 ? Cdf[LinearIndex] - Cdf[LinearIndex - 1] : Cdf[LinearIndex];
		MipPixel += MipOffset;

		MipPixel = MipPixel << 1;
	}
	MipPdf = max(MipPdf, 0.0);
	// DEBUG: assert that PdfMipTree is equivalent for evaluating the decision tree..
	//MipPdf = PdfMipTree(uint3(MipCoord, TextureCoord.z), StopLevel);

#if USE_SOLID_ANGLE_TEXTURE
	uint LinearIndex = BufferOffsetAtPixel(MipCoord, StopLevel, SkyLight.MipDimensions.xy);
	float AreaPdf = SkyLight.SolidAnglePdf[LinearIndex];
#else
	float AreaPdf = 1.0 / TexelCoordSolidAngle(MipCoord, DimensionsAtLevel(SkyLight.MipDimensions, StopLevel));
#endif
	return FacePdf * MipPdf * AreaPdf;
#endif
}

bool GenerateSkyLightOcclusionRay(
	float3 WorldPosition,
	float3 WorldNormal,
	float4 RandSample,
	out float3 RayOrigin,
	out float3 RayDirection,
	out float RayTMin,
	out float RayTMax,
	out float RayPdf
)
{
	// Determine the appropriate face to use
	uint MipCount = log2(SkyLight.MipDimensions.x);
	float FacePdf = 0.0;
	uint FaceIndex = SampleFace(MipCount, RandSample.x, FacePdf);

	uint2 MipPixel = 0;
	float MipPdf = 1.0;
	uint StopLevel = min(SkyLight.SamplingStopLevel, MipCount);
	for (uint Index = 0; Index < MipCount - StopLevel; ++Index)
	{
		uint MipIndex = MipCount - Index - 1;
#if USE_MORTON_CODE
		uint BufferOffset = BufferOffsetAtPixel(MipPixel, MipIndex, SkyLight.MipDimensions.xy);
		uint4 BufferOffsets = uint4(BufferOffset, BufferOffset + 1, BufferOffset + 2, BufferOffset + 3);
#else
		uint4 BufferOffsets;
		BufferOffsets.x = BufferOffsetAtPixel(MipPixel, MipIndex, SkyLight.MipDimensions);
		BufferOffsets.y = BufferOffsetAtPixel(MipPixel + uint2(1, 0), MipIndex, SkyLight.MipDimensions.xy);
		BufferOffsets.z = BufferOffsetAtPixel(MipPixel + uint2(0, 1), MipIndex, SkyLight.MipDimensions.xy);
		BufferOffsets.w = BufferOffsetAtPixel(MipPixel + uint2(1, 1), MipIndex, SkyLight.MipDimensions.xy);
#endif
		float4 Cdf = SampleMipTree(FaceIndex, BufferOffsets);
		Cdf.y += Cdf.x;
		Cdf.z += Cdf.y;
		Cdf.w += Cdf.z;
		Cdf /= Cdf.w;

		if (RandSample.y < Cdf.x)
		{
			MipPdf *= Cdf.x;
			RandSample.y /= Cdf.x;
		}
		else if (RandSample.y < Cdf.y)
		{
			MipPdf *= Cdf.y - Cdf.x;
			MipPixel.x += 1;
			RandSample.y = (RandSample.y - Cdf.x) / (Cdf.y - Cdf.x);
		}
		else if (RandSample.y < Cdf.z)
		{
			MipPdf *= Cdf.z - Cdf.y;
			MipPixel.y += 1;
			RandSample.y = (RandSample.y - Cdf.y) / (Cdf.z - Cdf.y);
		}
		else // if (RandSample.y < Cdf.w)
		{
			MipPdf *= Cdf.w - Cdf.z;
			MipPixel += 1;
			RandSample.y = (RandSample.y - Cdf.z) / (Cdf.w - Cdf.z);
		}

		MipPixel = uint2(MipPixel.x << 1, MipPixel.y << 1);
	}
	MipPixel = uint2(MipPixel.x >> 1, MipPixel.y >> 1);

	// DEBUG: assert cached PDF is equivalent to re-evaluation
	//MipPdf = PdfSkyLightOcclusionRay(WorldNormal, RayDirection);

	float2 PixelOffset = RandSample.yz;
	float2 MipPixelUV = (MipPixel + PixelOffset) / float2(DimensionsAtLevel(SkyLight.MipDimensions, StopLevel));

	// Construct Cubemap coordinate
	uint2 TextureDimensions;
	SkyLight.Texture.GetDimensions(TextureDimensions.x, TextureDimensions.y);
	float3 TexelCoord = float3(MipPixelUV * TextureDimensions, FaceIndex);

	// Determine area pdf
#if USE_SOLID_ANGLE_TEXTURE
	uint LinearIndex = BufferOffsetAtPixel(MipPixel, StopLevel, SkyLight.MipDimensions.xy);
	float AreaPdf = SkyLight.SolidAnglePdf[LinearIndex];
#else
	float AreaPdf = 1.0 / TexelCoordSolidAngle(MipPixel, DimensionsAtLevel(SkyLight.MipDimensions, StopLevel));
#endif

	RayOrigin = WorldPosition;
	RayDirection = normalize(GetTextureCubeVector(TexelCoord, TextureDimensions));
	RayTMin = 0.0;
	RayTMax = SkyLight.MaxRayDistance;
	RayPdf = FacePdf * MipPdf * AreaPdf;

	return true;
}

float PdfLambertOcclusionRay(
	float3 WorldNormal,
	float3 WorldDirection
)
{
	float Pdf = max(dot(WorldDirection, WorldNormal), 0.0) / PI;
	return Pdf;
}

bool GenerateLambertOcclusionRay(
	float3 WorldPosition,
	float3 WorldNormal,
	float2 RandSample,
	out float3 RayOrigin,
	out float3 RayDirection,
	out float RayTMin,
	out float RayTMax,
	out float RayPdf
)
{
	// Draw random variable
	float2 BufferSize = View.BufferSizeAndInvSize.xy;

	// Perform cosine-hemispherical sampling and convert to world-space
	float4 Direction_Tangent = CosineSampleHemisphere(RandSample);
	float3 Direction_World = TangentToWorld(Direction_Tangent.xyz, WorldNormal);

	RayOrigin = WorldPosition;
	RayDirection = Direction_World;
	RayTMin = 0.0;
	RayTMax = SkyLight.MaxRayDistance;
	RayPdf = Direction_Tangent.w;

	return true;
}

[shader("raygeneration")]
void SkyLightRGS()
{
	uint2 PixelCoord = DispatchRaysIndex().xy;

	RandomSequence RandSequence;
	uint LinearIndex = CalcLinearIndex(PixelCoord);

	// Get G-Buffer surface data
	float2 InvBufferSize = View.BufferSizeAndInvSize.zw;
	float2 UV = (float2(PixelCoord) + 0.5) * InvBufferSize;
	FScreenSpaceData ScreenSpaceData = GetScreenSpaceData(UV);
	FGBufferData GBuffer = ScreenSpaceData.GBuffer;
	float Depth = ScreenSpaceData.GBuffer.Depth;
	float3 WorldPosition = ReconstructWorldPositionFromDepth(UV, Depth);
	float3 CameraOrigin = ReconstructWorldPositionFromDepth(UV, 0.0f);
	float3 CameraDirection = normalize(WorldPosition - CameraOrigin);
	float3 WorldNormal = ScreenSpaceData.GBuffer.WorldNormal;
	float3 BaseColor = ScreenSpaceData.GBuffer.BaseColor;
	if (UseSubsurfaceProfile(GBuffer.ShadingModelID))
	{
		ScreenSpaceData.GBuffer.DiffuseColor = ScreenSpaceData.GBuffer.StoredBaseColor;
	}
	float3 SpecularColor = ScreenSpaceData.GBuffer.SpecularColor;
	float Roughness = ScreenSpaceData.GBuffer.Roughness;

	float RayDistance = 0.0;
	float HitCount = 0.0;
	uint SamplesPerPixel = SkyLight.SamplesPerPixel;
	uint FrameIndex = View.FrameNumber % SamplesPerPixel;

	// Mask out depth values that are infinitely far away
	float DeviceZ = SceneTexturesStruct.SceneDepthTexture.Load(int3(PixelCoord, 0)).r;
	bool IsFiniteDepth = DeviceZ > 0.0;
	bool bTraceRay = (
		IsFiniteDepth &&
		GBuffer.ShadingModelID != SHADINGMODELID_UNLIT);
	if (!bTraceRay)
	{
		SamplesPerPixel = 0.0;
	}

	float3 ExitantRadiance = 0.0;
	float3 DiffuseExitantRadiance = 0.0;
	for (uint SampleIndex = 0; SampleIndex < SamplesPerPixel; ++SampleIndex)
	{
		// Use Scrambled Halton sequence
		RandomSequence_Initialize(RandSequence, LinearIndex, FrameIndex * SamplesPerPixel + SampleIndex);
		RandSequence.Type = 2;

		RayDesc Ray;
		float RayPdf = 0.0;

		// Determine sky light or lambert ray
		uint DummyVariable;
		float4 RandSample = RandomSequence_GenerateSample4D(RandSequence, DummyVariable);
		// #dxr_todo: Should strategy selection be driven by CVar?
		float SkyLightSamplingStrategyPdf = 0.5;
		float MisWeight = 1.0;
		if (RandSample.x < SkyLightSamplingStrategyPdf)
		{
			RandSample.x /= SkyLightSamplingStrategyPdf;
			GenerateSkyLightOcclusionRay(WorldPosition, WorldNormal, RandSample, Ray.Origin, Ray.Direction, Ray.TMin, Ray.TMax, RayPdf);
			MisWeight = RayPdf / (SkyLightSamplingStrategyPdf * RayPdf + (1.0 - SkyLightSamplingStrategyPdf) * PdfLambertOcclusionRay(WorldNormal, Ray.Direction));
		}
		else
		{
			GenerateLambertOcclusionRay(WorldPosition, WorldNormal, RandSample.yz, Ray.Origin, Ray.Direction, Ray.TMin, Ray.TMax, RayPdf);
			MisWeight = RayPdf / ((1.0 - SkyLightSamplingStrategyPdf) * RayPdf + SkyLightSamplingStrategyPdf * PdfSkyLightOcclusionRay(WorldNormal, Ray.Direction));
		}

		ApplyPositionBias(Ray, WorldNormal, SkyLight.MaxNormalBias);

		// Surface-normal culling
		float NoL = dot(WorldNormal, Ray.Direction);
		if (RayPdf <= 0.0 || NoL <= 0.0)
		{
			continue;
		}

		uint RayFlags = 0
			| RAY_FLAG_FORCE_OPAQUE; // #dxr_todo: generate a special shader permutation for occlusion ray tracing that includes any-hit shaders for masked geometry
#if !ENABLE_TWO_SIDED_GEOMETRY
		RayFlags |= RAY_FLAG_CULL_BACK_FACING_TRIANGLES;
#endif
		FDefaultPayload Payload = (FDefaultPayload)0;

		TraceRay(
			TLAS,      // AccelerationStructure
			RayFlags,
			RAY_TRACING_MASK_SHADOW,          // InstanceInclusionMask
			RAY_TRACING_SHADER_SLOT_MATERIAL, // RayContributionToHitGroupIndex
			RAY_TRACING_NUM_SHADER_SLOTS,     // MultiplierForGeometryContributionToShaderIndex
			0,         // MissShaderIndex
			Ray,       // RayDesc
			Payload    // Payload
		);

		if (Payload.HitT >= 0.0)
		{
			RayDistance += Payload.HitT;
			HitCount += 1.0;
		}
		else
		{
			// Evaluate material
			half3 N = WorldNormal;
			half3 V = -CameraDirection;
			half3 L = Ray.Direction;
			FShadowTerms ShadowTerms = { 0.0, 0.0, 0.0 };
			FDirectLighting LightingSample = EvaluateBxDF(ScreenSpaceData.GBuffer, N, V, L, NoL, ShadowTerms);
			float3 Brdf = LightingSample.Diffuse + LightingSample.Transmission + LightingSample.Specular;

			float3 IncomingRadiance = EvalSkyLight(Ray.Direction);
			ExitantRadiance += IncomingRadiance * Brdf * MisWeight / RayPdf;
			DiffuseExitantRadiance += IncomingRadiance * (LightingSample.Diffuse + LightingSample.Transmission) * MisWeight / RayPdf;
		}
	}

	float AmbientOcclusion = HitCount;
	if (SamplesPerPixel > 0)
	{
		float SamplesPerPixelInv = rcp(SamplesPerPixel);
		ExitantRadiance *= SamplesPerPixelInv;
		DiffuseExitantRadiance *= SamplesPerPixelInv;
		AmbientOcclusion /= SamplesPerPixel;
	}

	// Pre-divide by albedo, to be recovered in compositing
	float3 Albedo = ScreenSpaceData.GBuffer.BaseColor;
	DiffuseExitantRadiance.r = Albedo.r > 0.0 ? DiffuseExitantRadiance.r / Albedo.r : DiffuseExitantRadiance.r;
	DiffuseExitantRadiance.g = Albedo.g > 0.0 ? DiffuseExitantRadiance.g / Albedo.g : DiffuseExitantRadiance.g;
	DiffuseExitantRadiance.b = Albedo.b > 0.0 ? DiffuseExitantRadiance.b / Albedo.b : DiffuseExitantRadiance.b;

#if USE_PREEXPOSURE
	DiffuseExitantRadiance.rgb *= View.PreExposure;
#endif

	RWOcclusionMaskUAV[PixelCoord] = float4(ClampToHalfFloatRange(DiffuseExitantRadiance.rgb), AmbientOcclusion);

	float HitDistance = -1.0;
	if (HitCount > 0.0)
	{
		HitDistance = RayDistance / HitCount;
	}

	RWRayDistanceUAV[PixelCoord] = float2(HitDistance, SamplesPerPixel);
}