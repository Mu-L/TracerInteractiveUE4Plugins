// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

#ifndef DIM_DENOISER_OUTPUT
	#define DIM_DENOISER_OUTPUT 0
#endif

#include "../Common.ush"

float2 SobolIndexToUniformUnitSquare(uint2 SobolRand)
{
	return float2(SobolRand) * rcp(65536.0) + rcp(65536.0 * 2.0);
}

#define SUPPORT_CONTACT_SHADOWS		0
#define USE_SOURCE_TEXTURE			1
#define USE_SOURCE_TEXTURE_ARRAY	1

#define LTCMatTexture				RaytracingLightsDataPacked.LTCMatTexture
#define LTCMatSampler				RaytracingLightsDataPacked.LTCMatSampler
#define LTCAmpTexture				RaytracingLightsDataPacked.LTCAmpTexture
#define LTCAmpSampler				RaytracingLightsDataPacked.LTCAmpSampler
#define PreIntegratedGF				ReflectionStruct.PreIntegratedGF			
#define PreIntegratedGFSampler		ReflectionStruct.PreIntegratedGFSampler	

#include "../DeferredShadingCommon.ush"
#include "../DeferredLightingCommon.ush"
#include "../ReflectionEnvironmentShared.ush"
#include "../Montecarlo.ush"
#include "../PathTracing/Utilities/PathTracingRandomSequence.ush" // #dxr-todo: move to a common folder
#include "../HeightFogCommon.ush"
#include "RayTracingCommon.ush"
#include "RayTracingHitGroupCommon.ush"
#include "RayTracingDirectionalLight.ush"
#include "RayTracingRectLight.ush"
#include "RayTracingSphereLight.ush"
#include "RayTracingSpotLight.ush"
#include "RayTracingPointLight.ush"

uint SamplesPerPixel;
uint MaxRefractionRays;
uint HeightFog;
uint ShouldDoDirectLighting;
uint ReflectedShadowsType;
uint ShouldDoEmissiveAndIndirectLighting;
uint UpscaleFactor;

float TranslucencyMinRayDistance;
float TranslucencyMaxRayDistance;
float TranslucencyMaxRoughness;
uint  TranslucencyRefraction;
float MaxNormalBias;

RaytracingAccelerationStructure TLAS;

RWTexture2D<float4> ColorOutput;
RWTexture2D<float> RayHitDistanceOutput;

#include "RayTracingLightingCommon.ush"

uint2 GetPixelCoord(uint2 DispatchThreadId)
{
	uint UpscaleFactorPow2 = UpscaleFactor * UpscaleFactor;

	// TODO: find a way to not interfer with TAA's jittering.
	uint SubPixelId = View.StateFrameIndex & (UpscaleFactorPow2 - 1);

	return DispatchThreadId * UpscaleFactor + uint2(SubPixelId & (UpscaleFactor - 1), SubPixelId / UpscaleFactor);
}

float FresnelDielectric(float Eta, float IoH, float ToH)
{
	float Rs = Square((Eta * IoH - ToH) / (Eta * IoH + ToH));
	float Rp = Square((Eta * ToH - IoH) / (Eta * ToH + IoH));
	return (Rs + Rp) / 2;
}

bool RefractRay(float3 V, float3 N, float Ior1, float Ior2, out float3 L, out float EventThroughput)
{
	float Eta = Ior1 / Ior2;

	//#dxr_todo: check HitKind functionality as bool bIsEntering = Payload.HitKind == HIT_KIND_TRIANGLE_FRONT_FACE;
	bool bIsEntering = (dot(V, N) < 0.0);
	if (bIsEntering)
	{
		Eta = 1.0f / Ior1;
	}

	V = -V;
	const float CosThetaI = dot(V, N);
	const float CosThetaT2 = 1.f - Eta * Eta * (1.0f - CosThetaI * CosThetaI);
	if (CosThetaT2 < 0.0f)
	{
		// Total internal reflection
		EventThroughput = 1.0f;
		L = reflect(-V, N); 
		return false;
	}

	const float CosThetaT = -(CosThetaI >= 0.0f ? 1.0f : -1.0f) * sqrt(CosThetaT2);
	L = (Eta * CosThetaI + CosThetaT) * N - Eta * V;

	float VoH = abs(dot(N, V));
	float ToH = abs(dot(N, L));
	EventThroughput = 1 - FresnelDielectric(Eta, VoH, ToH);
	return true;
}

float3 GetSkyRadiance(float3 Direction, float Roughness)
{
	float SkyAverageBrightness = 1.0f;
	return GetSkyLightReflection(Direction, Roughness, SkyAverageBrightness);
}

[shader("raygeneration")]
void RayTracingTranslucencyRGS()
{
	uint2 DispatchThreadId = DispatchRaysIndex().xy;
	uint2 PixelCoord = GetPixelCoord(DispatchThreadId);
	uint LinearIndex = PixelCoord.y * View.BufferSizeAndInvSize.x + PixelCoord.x; // TODO: PixelCoord or DispatchThreadId
	
	RandomSequence RandSequence;
	RandomSequence_Initialize(RandSequence, LinearIndex, View.FrameNumber);

	float2 InvBufferSize = View.BufferSizeAndInvSize.zw;
	float2 UV = (float2(PixelCoord) + 0.5) * InvBufferSize;
	FScreenSpaceData ScreenSpaceData = GetScreenSpaceData(UV);
	float Depth = ScreenSpaceData.GBuffer.Depth;
	float3 CameraOrigin = ReconstructWorldPositionFromDepth(UV, 0.0f);
	float3 WorldPosition = ReconstructWorldPositionFromDepth(UV, Depth);
	float3 CameraDirection = normalize(WorldPosition - CameraOrigin);	
	const float GBufferHitT = length(WorldPosition - CameraOrigin);

	// Trace rays from camera origin to (Gbuffer - epsilon) to only intersect translucent objects
	//#dxr_todo: a potential big optimization would be to include translucent objects in the GBuffer
	// and use the GBuffer shading ID to early return for non translucent objects 
	RayDesc Ray;
	Ray.Origin = CameraOrigin;
	Ray.TMin = 0.0;
	Ray.TMax = GBufferHitT - 0.1;
	Ray.Direction = CameraDirection;
	FRayCone RayCone = (FRayCone)0;
	RayCone.SpreadAngle = View.EyeToPixelSpreadAngle;

	// Sky is only sampled when infinite reflection rays are used.
	const bool bAllowSkySampling = TranslucencyMaxRayDistance < 0;
	const bool bRefractionBackFaceCulling = false;
	const bool bReflectionBackFaceCulling = true;

	// Integrated data by path tracing
	float3 PathRadiance = 0.0;
	float PathThroughput = 1.0;	// A float for now because UE does not support colored translucency as of today.
	float LastRoughness = 0.0;
	float LastIor = 1.0f;
	float HitDistance = 0.0f;
	bool bHasScattered = false;

	for (uint RefractionRayIndex = 0; RefractionRayIndex < MaxRefractionRays; ++RefractionRayIndex)
	{
		float3 PathVertexRadiance = float3(0, 0, 0);
		//#dxr-todo: RayFlags should be 0 for refraction rays
		const uint RayFlags = bRefractionBackFaceCulling ? RAY_FLAG_CULL_BACK_FACING_TRIANGLES : 0;
		FMaterialClosestHitPayload Payload = TraceRayAndAccumulateResults(Ray, RandSequence, RayFlags, MaxNormalBias, RAY_TRACING_MASK_ALL, RayCone, PathVertexRadiance);
		LastRoughness = Payload.Roughness;

		//
		// Handle no hit condition
		//
		if (!IsHit(Ray, Payload))
		{
			if (bHasScattered && bAllowSkySampling)
			{
				// We only sample the sky if the ray has scattered (i.e. been refracted or reflected). Otherwise we are going ot use the regular scene color.
				PathRadiance += PathThroughput * GetSkyRadiance(Ray.Direction, LastRoughness);
			}
			break;
		}
		float3 HitPoint = Ray.Origin + Ray.Direction * GetHitT(Payload);

		//
		// Handle surface lighting
		//

		float vertexRadianceWeight = Payload.Opacity;	// Opacity as coverage. This works for RAY_TRACING_BLEND_MODE_OPAQUE and RAY_TRACING_BLEND_MODE_TRANSLUCENT.
		// It is also needed for RAY_TRACING_BLEND_MODE_ADDITIVE and  RAY_TRACING_BLEND_MODE_ALPHA_COMPOSITE: radiance continbution is alway weighted by coverage.
		// #dxr_todo: I have not been able to setup a material using RAY_TRACING_BLEND_MODE_MODULATE.

		PathRadiance += PathThroughput * PathVertexRadiance * vertexRadianceWeight;


		//
		// Handle reflection tracing with a ray per vertex of the refraction path
		//

		// Shorten the rays on rougher surfaces between user-provided min and max ray lengths.
		// When a shortened ray misses the geometry, we fall back to local reflection capture sampling (similar to SSR).
		const float LocalMaxRayDistance = bAllowSkySampling ? 1e27f : lerp(TranslucencyMaxRayDistance, TranslucencyMinRayDistance, Payload.Roughness);
		if (Payload.Roughness < TranslucencyMaxRoughness)
		{
			// Trace reflection ray 
			uint DummyVariable;
			float2 RandSample = RandomSequence_GenerateSample2D(RandSequence, DummyVariable);

			RayDesc ReflectionRay;
			ReflectionRay.TMin = 0.01;
			ReflectionRay.TMax = LocalMaxRayDistance;
			ReflectionRay.Origin = HitPoint;
			ReflectionRay.Direction = GenerateReflectedRayDirection(Ray.Direction, Payload.WorldNormal, Payload.Roughness, RandSample);
			ApplyPositionBias(ReflectionRay, Payload.WorldNormal, MaxNormalBias);

			float3 ReflectionRadiance = float3(0, 0, 0);
			const uint RayFlags = bReflectionBackFaceCulling ? RAY_FLAG_CULL_BACK_FACING_TRIANGLES : 0;
			FMaterialClosestHitPayload ReflectionPayload = TraceRayAndAccumulateResults(ReflectionRay, RandSequence, RayFlags, MaxNormalBias, RAY_TRACING_MASK_ALL, RayCone, ReflectionRadiance);

			// If we have not hit anything, sample the distance sky radiance.
			if (!IsHit(ReflectionRay, ReflectionPayload))
			{
				ReflectionRadiance = GetSkyRadiance(ReflectionRay.Direction, LastRoughness);
			}

			// #dxr_todo: reflection IOR and clear coat also? This only handles default material.
			float NoV = saturate(dot(-Ray.Direction, Payload.WorldNormal));
			const float3 ReflectionThroughput = EnvBRDF(Payload.SpecularColor, Payload.Roughness, NoV);

			PathRadiance += PathThroughput * ReflectionThroughput * ReflectionRadiance * vertexRadianceWeight;
		}


		//
		// Handle refraction through the surface.
		//

		// Update the refraction path transmittance and check stop condition
		float PathVertexTransmittance = Payload.BlendingMode == RAY_TRACING_BLEND_MODE_ADDITIVE ? 1.0 : 1.0 - Payload.Opacity;
		PathThroughput *= PathVertexTransmittance;
		if (PathThroughput <= 0.0)
		{
			break;
		}

		// Set refraction ray for next iteration
		float3 RefractedDirection = Ray.Direction;
		if (TranslucencyRefraction)
		{
			float Ior1 = DielectricF0ToIor(DielectricSpecularToF0(Payload.Specular)); // Not using Payload.Ior but parameterisation from specular.
			float Ior2 = LastIor;
			bHasScattered |= Ior1 != Ior2;
			float ReflectionRefractionEventThroughput;
			if (!RefractRay(Ray.Direction, Payload.WorldNormal, Ior1, Ior2, RefractedDirection, ReflectionRefractionEventThroughput))
			{
				//#dxr_todo: handle total internal reflection ray event. We could jsuit continue form this path. And not use the new IOR.
				// We should combine that step with the one above reflection evaluation. For now we stop tracing.
				break;
			}
			LastIor = Ior1;
			PathThroughput *= ReflectionRefractionEventThroughput;
		}


		//
		// Setup refracted ray to be traced
		//

		Ray.Origin = HitPoint;
		Ray.TMin = 0.01;
		Ray.TMax = LocalMaxRayDistance;
		Ray.Direction = RefractedDirection;
		float SurfaceCurvature = 0.0f; /* #todo_dxr assume no curvature */
		RayCone = PropagateRayCone(RayCone, SurfaceCurvature, Depth);
	}

	if (!bHasScattered)
	{
		// Use the scene radiance for ray that has not been scattered/refracted (no surface or IORin=IORout). Still apply the throughtput in case we have traversed surfaces with opacity>0.
		PathRadiance += PathThroughput * Texture2DSampleLevel(SceneTexturesStruct.SceneColorTexture, SceneTexturesStruct.SceneColorTextureSampler, UV, 0).xyz;
	}

#if USE_PREEXPOSURE
	PathRadiance.rgb *= View.PreExposure;
#endif

	PathRadiance = ClampToHalfFloatRange(PathRadiance);
	ColorOutput[DispatchThreadId] = float4(PathRadiance, 0.0f);
	RayHitDistanceOutput[DispatchThreadId] = HitDistance;
}


[shader("miss")]
void RayTracingTranslucencyMainMS(inout FPackedMaterialClosestHitPayload PackedPayload)
{
	PackedPayload.HitT = -1;
}


[shader("closesthit")]
void RayTracingTranslucencyMainCHS(inout FPackedMaterialClosestHitPayload PackedPayload, in FDefaultAttributes Attributes)
{
	FMaterialClosestHitPayload Payload = (FMaterialClosestHitPayload)0;

	Payload.HitT = RayTCurrent();
	Payload.BaseColor = float3(0.2, 0.3, 0.4);

	FTriangleBaseAttributes Triangle = LoadTriangleBaseAttributes(PrimitiveIndex());
	float3 Edge0 = Triangle.LocalPositions[2] - Triangle.LocalPositions[0];
	float3 Edge1 = Triangle.LocalPositions[1] - Triangle.LocalPositions[0];
	float3x3 WorldToLocal = (float3x3)WorldToObject();
	float3x3 LocalToWorldNormal = transpose(WorldToLocal);
	Payload.WorldNormal = normalize(mul(LocalToWorldNormal, cross(Edge0, Edge1)));

	PackedPayload = PackRayTracingPayload(Payload, PackedPayload.RayCone);
}

