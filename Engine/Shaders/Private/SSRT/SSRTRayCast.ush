// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

#pragma once

#ifndef IS_SSGI_SHADER
#define IS_SSGI_SHADER 0
#endif

#include "../Common.ush"	

bool RayCast(
	Texture2D Texture, SamplerState Sampler,
	float3 RayOriginTranslatedWorld, float3 RayDirection,
	float Roughness, float SceneDepth,
	uint NumSteps, float StepOffset,
	float4 HZBUvFactorAndInvFactor, 
	out float3 OutHitUVz,
	out float Level
)
{
	// TODO provide RayStartUVz
	const float4 RayStartClip	= mul( float4( RayOriginTranslatedWorld, 1 ), View.TranslatedWorldToClip );
	const float4 RayEndClip		= mul( float4( RayOriginTranslatedWorld + RayDirection * SceneDepth, 1 ), View.TranslatedWorldToClip );

	const float3 RayStartScreen = RayStartClip.xyz / RayStartClip.w;
	const float3 RayEndScreen = RayEndClip.xyz / RayEndClip.w;

	const float4 RayDepthClip	= RayStartClip + mul( float4( 0, 0, SceneDepth, 0 ), View.ViewToClip );
	const float3 RayDepthScreen = RayDepthClip.xyz / RayDepthClip.w;

	float3 RayStepScreen = RayEndScreen - RayStartScreen;

	{
		// Computes the scale down factor for RayStepScreen required to fit on the X and Y axis in order to clip it in the viewport
		const float RayStepScreenInvFactor = 0.5 * length( RayStepScreen.xy );
		const float2 S = 1 - max(abs(RayStepScreen.xy + RayStartScreen.xy * RayStepScreenInvFactor) - RayStepScreenInvFactor, 0.0f) / abs(RayStepScreen.xy);

		// Rescales RayStepScreen accordingly
		const float RayStepFactor = min(S.x, S.y) / RayStepScreenInvFactor;
		RayStepScreen *= RayStepFactor;
	}

	float3 RayStartUVz = float3( (RayStartScreen.xy * float2( 0.5, -0.5 ) + 0.5) * HZBUvFactorAndInvFactor.xy, RayStartScreen.z );
	float3 RayStepUVz  = float3(  RayStepScreen.xy  * float2( 0.5, -0.5 )		 * HZBUvFactorAndInvFactor.xy, RayStepScreen.z );
	
	const float Step = 1.0 / NumSteps;
	#if IS_SSGI_SHADER
		float CompareTolerance = max( abs( RayStepUVz.z ), ( RayStartScreen.z - RayDepthScreen.z ) * 2 ) * Step;
	#else
		float CompareTolerance = max( abs( RayStepUVz.z ), ( RayStartScreen.z - RayDepthScreen.z ) * 4 ) * Step;
	#endif

	// avoid bugs with early returns inside of loops on certain platform compilers.
	bool bHit = false;
	OutHitUVz = float3( 0, 0, 0 );

	float LastDiff = 0;
	Level = 1;

	RayStepUVz *= Step;
	float3 RayUVz = RayStartUVz + RayStepUVz * StepOffset;

	LOOP
	for( uint i = 0; i < NumSteps; i += 4 )
	{
		// Vectorized to group fetches
		float4 SampleUV0 = RayUVz.xyxy + RayStepUVz.xyxy * float4( 1, 1, 2, 2 );
		float4 SampleUV1 = RayUVz.xyxy + RayStepUVz.xyxy * float4( 3, 3, 4, 4 );
		float4 SampleZ   = RayUVz.zzzz + RayStepUVz.zzzz * float4( 1, 2, 3, 4 );
		
		// Use lower res for farther samples
		float4 SampleDepth;
		SampleDepth.x = Texture.SampleLevel( Sampler, SampleUV0.xy, Level ).r;
		SampleDepth.y = Texture.SampleLevel( Sampler, SampleUV0.zw, Level ).r;
		Level += (8.0 / NumSteps) * Roughness;
		
		SampleDepth.z = Texture.SampleLevel( Sampler, SampleUV1.xy, Level ).r;
		SampleDepth.w = Texture.SampleLevel( Sampler, SampleUV1.zw, Level ).r;
		Level += (8.0 / NumSteps) * Roughness;

		float4 DepthDiff = SampleZ - SampleDepth;
		bool4 Hit = abs( DepthDiff + CompareTolerance ) < CompareTolerance;

		BRANCH if( any( Hit ) )
		{
			if(IS_SSGI_SHADER)
			{
				// If hit set to intersect time. If missed set to beyond end of ray
				float4 HitTime = Hit ? float4( 1, 2, 3, 4 ) : 5;

				// Take closest hit
				float Time1 = min( min3( HitTime.x, HitTime.y, HitTime.z ), HitTime.w );
				float Time0 = Time1 - 1;

				const uint NumBinarySteps = Roughness < 0.2 ? 4 : 0;

				// Binary search
				for( uint j = 0; j < NumBinarySteps; j++ )
				{
					CompareTolerance *= 0.5;

					float  MidTime = 0.5 * ( Time0 + Time1 );
					float3 MidUVz = RayUVz + RayStepUVz * MidTime;
					float  MidDepth = Texture.SampleLevel( Sampler, MidUVz.xy, Level ).r;
					float  MidDepthDiff = MidUVz.z - MidDepth;

					if( abs( MidDepthDiff + CompareTolerance ) < CompareTolerance )
					{
						Time1 = MidTime;
					}
					else
					{
						Time0 = MidTime;
					}
				}
			
				OutHitUVz = RayUVz + RayStepUVz * Time1;
			}
			else
			{
				float DepthDiff0 = DepthDiff[2];
				float DepthDiff1 = DepthDiff[3];
				float Time0 = 3;

				FLATTEN if( Hit[2] )
				{
					DepthDiff0 = DepthDiff[1];
					DepthDiff1 = DepthDiff[2];
					Time0 = 2;
				}
				FLATTEN if( Hit[1] )
				{
					DepthDiff0 = DepthDiff[0];
					DepthDiff1 = DepthDiff[1];
					Time0 = 1;
				}
				FLATTEN if( Hit[0] )
				{
					DepthDiff0 = LastDiff;
					DepthDiff1 = DepthDiff[0];
					Time0 = 0;
				}

				float Time1 = Time0 + 1;
	#if 0
				// Binary search
				for( uint j = 0; j < 4; j++ )
				{
					CompareTolerance *= 0.5;

					float  MidTime = 0.5 * ( Time0 + Time1 );
					float3 MidUVz = RayUVz + RayStepUVz * MidTime;
					float  MidDepth = Texture.SampleLevel( Sampler, MidUVz.xy, Level ).r;
					float  MidDepthDiff = MidUVz.z - MidDepth;

					if( abs( MidDepthDiff + CompareTolerance ) < CompareTolerance )
					{
						DepthDiff1	= MidDepthDiff;
						Time1		= MidTime;
					}
					else
					{
						DepthDiff0	= MidDepthDiff;
						Time0		= MidTime;
					}
				}
	#endif

				// Find more accurate hit using line segment intersection
				float TimeLerp = saturate( DepthDiff0 / (DepthDiff0 - DepthDiff1) );
				float IntersectTime = Time0 + TimeLerp;
				//float IntersectTime = lerp( Time0, Time1, TimeLerp );
				
				OutHitUVz = RayUVz + RayStepUVz * IntersectTime;
			}

			bHit = true;
			break;
		}

		LastDiff = DepthDiff.w;

		RayUVz += 4 * RayStepUVz;
	}
	
	OutHitUVz.xy *= HZBUvFactorAndInvFactor.zw;
	OutHitUVz.xy = OutHitUVz.xy * float2( 2, -2 ) + float2( -1, 1 );
	OutHitUVz.xy = OutHitUVz.xy * View.ScreenPositionScaleBias.xy + View.ScreenPositionScaleBias.wz;

	return bHit;
}

float ComputeHitVignetteFromScreenPos(float2 ScreenPos)
{
	float2 Vignette = saturate(abs(ScreenPos) * 5 - 4);
	
	//PrevScreen sometimes has NaNs or Infs.  DX11 is protected because saturate turns NaNs -> 0.
	//Do a SafeSaturate so other platforms get the same protection.
	return SafeSaturate(1.0 - dot(Vignette, Vignette));
}

void ReprojectHit(float4 PrevScreenPositionScaleBias, float3 HitUVz, out float2 OutPrevUV, out float OutVignette)
{
	// Camera motion for pixel (in ScreenPos space).
	float2 ThisScreen = (HitUVz.xy - View.ScreenPositionScaleBias.wz) / View.ScreenPositionScaleBias.xy;
	float4 ThisClip = float4( ThisScreen, HitUVz.z, 1 );
	float4 PrevClip = mul( ThisClip, View.ClipToPrevClip );
	float2 PrevScreen = PrevClip.xy / PrevClip.w;
	float2 PrevUV = PrevScreen.xy * PrevScreenPositionScaleBias.xy + PrevScreenPositionScaleBias.zw;

	OutVignette = min(ComputeHitVignetteFromScreenPos(ThisScreen), ComputeHitVignetteFromScreenPos(PrevScreen));
	OutPrevUV = PrevUV;
}

void ReprojectHit(float4 PrevScreenPositionScaleBias, Texture2D Texture, SamplerState Sampler, float3 HitUVz, out float2 OutPrevUV, out float OutVignette)
{
	// Camera motion for pixel (in ScreenPos space).
	float2 ThisScreen = (HitUVz.xy - View.ScreenPositionScaleBias.wz) / View.ScreenPositionScaleBias.xy;
	float4 ThisClip = float4( ThisScreen, HitUVz.z, 1 );
	float4 PrevClip = mul( ThisClip, View.ClipToPrevClip );
	float2 PrevScreen = PrevClip.xy / PrevClip.w;

	float2 Velocity = Texture.SampleLevel( Sampler, HitUVz.xy, 0 ).xy;
	if( Velocity.x > 0.0 )
	{
		PrevScreen = ThisClip.xy - DecodeVelocityFromTexture( Velocity );
	}

	float2 PrevUV = PrevScreen.xy * PrevScreenPositionScaleBias.xy + PrevScreenPositionScaleBias.zw;
	
	OutVignette = min(ComputeHitVignetteFromScreenPos(ThisScreen), ComputeHitVignetteFromScreenPos(PrevScreen));
	OutPrevUV = PrevUV;
}

float ComputeRayHitSqrDistance(float3 OriginTranslatedWorld, float3 HitUVz)
{
	// ALU get factored out with ReprojectHit.
	float2 HitScreenPos = (HitUVz.xy - View.ScreenPositionScaleBias.wz) / View.ScreenPositionScaleBias.xy;
	float HitSceneDepth = ConvertFromDeviceZ(HitUVz.z);

	float3 HitTranslatedWorld = mul(float4(HitScreenPos * HitSceneDepth, HitSceneDepth, 1), View.ScreenToTranslatedWorld).xyz;

	return length2(OriginTranslatedWorld - HitTranslatedWorld);
}

float4 SampleScreenColor(Texture2D Texture, SamplerState Sampler, float2 UV)
{
	float4 OutColor;

	OutColor.rgb = Texture.SampleLevel( Sampler, UV, 0 ).rgb;
	// Transform NaNs to black, transform negative colors to black.
	OutColor.rgb = -min(-OutColor.rgb, 0.0);
	OutColor.a = 1;
	
	return OutColor;
}

float4 SampleHCBLevel( Texture2D Texture, SamplerState Sampler, float2 UV, float Level, float4 HZBUvFactorAndInvFactor )
{
	float4 OutColor;

	OutColor.rgb = Texture.SampleLevel( Sampler, UV * HZBUvFactorAndInvFactor.xy, Level ).rgb;
	// Transform NaNs to black, transform negative colors to black.
	OutColor.rgb = -min(-OutColor.rgb, 0.0);
	OutColor.a = 1;

	return OutColor;
}