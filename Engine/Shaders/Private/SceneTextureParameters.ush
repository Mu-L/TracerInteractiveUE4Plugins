// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

#pragma once

#include "SceneTexturesCommon.ush"
#include "DeferredShadingCommon.ush"

uint bIsSceneLightingChannelsValid;

// Matches FSceneTextureParameters
Texture2D SceneDepthBuffer;
Texture2D SceneVelocityBuffer;
Texture2D SceneGBufferA;
Texture2D SceneGBufferB;
Texture2D SceneGBufferC;
Texture2D SceneGBufferD;
Texture2D SceneGBufferE;
Texture2D<uint> SceneLightingChannels;

#if SUPPORTS_INDEPENDENT_SAMPLERS
#define SceneDepthBufferSampler GlobalPointClampedSampler
#define SceneVelocityBufferSampler GlobalPointClampedSampler
#define SceneGBufferASampler GlobalPointClampedSampler
#define SceneGBufferBSampler GlobalPointClampedSampler
#define SceneGBufferCSampler GlobalPointClampedSampler
#define SceneGBufferDSampler GlobalPointClampedSampler
#define SceneGBufferESampler GlobalPointClampedSampler

#else
SamplerState SceneDepthBufferSampler;
SamplerState SceneVelocityBufferSampler;
SamplerState SceneGBufferASampler;
SamplerState SceneGBufferBSampler;
SamplerState SceneGBufferCSampler;
SamplerState SceneGBufferDSampler;
SamplerState SceneGBufferESampler;

#endif


// @param UV - UV space in the GBuffer textures (BufferSize resolution)
// TOOD: need to find a way to make this more convenient.
FGBufferData GetGBufferDataFromSceneTextures(float2 UV, bool bGetNormalizedNormal = true)
{
	float4 GBufferA = SceneGBufferA.SampleLevel(SceneGBufferASampler, UV, 0);
	float4 GBufferB = SceneGBufferB.SampleLevel(SceneGBufferBSampler, UV, 0);
	float4 GBufferC = SceneGBufferC.SampleLevel(SceneGBufferCSampler, UV, 0);
	float4 GBufferD = SceneGBufferD.SampleLevel(SceneGBufferDSampler, UV, 0);
	float4 GBufferE = SceneGBufferE.SampleLevel(SceneGBufferESampler, UV, 0);
	float4 GBufferVelocity = SceneVelocityBuffer.SampleLevel(SceneVelocityBufferSampler, UV, 0);

	uint CustomStencil = 0;
	float CustomNativeDepth = 0;

	float DeviceZ = SceneDepthBuffer.SampleLevel(SceneDepthBufferSampler, UV, 0).r;

	float SceneDepth = ConvertFromDeviceZ(DeviceZ);

	return DecodeGBufferData(GBufferA, GBufferB, GBufferC, GBufferD, GBufferE, GBufferVelocity, CustomNativeDepth, CustomStencil, SceneDepth, bGetNormalizedNormal, CheckerFromSceneColorUV(UV));
}

/** Returns the light channel mask that should be executed for this pixel. */
uint GetSceneLightingChannel(uint2 PixelCoord)
{
	BRANCH
	if (bIsSceneLightingChannelsValid)
	{
		return SceneLightingChannels.Load(uint3(PixelCoord, 0)).x;
	}
	return ~0;
}
