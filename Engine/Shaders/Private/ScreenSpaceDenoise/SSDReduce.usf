// Copyright Epic Games, Inc. All Rights Reserved.

#include "SSDDefinitions.ush"


//------------------------------------------------------- CONFIGS

#define TILE_PIXEL_SIZE 8

#define CONFIG_SIGNAL_PROCESSING DIM_SIGNAL_PROCESSING
#define CONFIG_SIGNAL_BATCH_SIZE DIM_SIGNAL_BATCH_SIZE

#define CONFIG_MIP_LEVEL_COUNT 2


// Configures all the pass for each individual signals.
#if CONFIG_SIGNAL_PROCESSING == SIGNAL_PROCESSING_DIFFUSE_SPHERICAL_HARMONIC
	#define MAX_SIGNAL_BATCH_SIZE 1
	#define SIGNAL_ARRAY_SIZE 1

	#define COMPILE_SIGNAL_COLOR_SH 1

	// Given it's a spherical harmonic that store directionality, only need position based rejection.
	#define CONFIG_VIEW_POSITION_BASED_BILATERAL 2

	#define CONFIG_INPUT_TEXTURE_COUNT 4
	#define CONFIG_OUTPUT_TEXTURE_COUNT 4

	#define CONFIG_BILATERAL_DISTANCE_COMPUTATION SIGNAL_WORLD_FREQUENCY_MIN_METADATA

	// Input and output layout.
	#define CONFIG_SIGNAL_INPUT_LAYOUT  SIGNAL_BUFFER_LAYOUT_DIFFUSE_INDIRECT_HARMONIC
	#define CONFIG_SIGNAL_INPUT_TEXTURE_TYPE   SIGNAL_TEXTURE_TYPE_UINT2
	#define CONFIG_SIGNAL_OUTPUT_LAYOUT SIGNAL_BUFFER_LAYOUT_DIFFUSE_INDIRECT_HARMONIC
	#define CONFIG_SIGNAL_OUTPUT_TEXTURE_TYPE   SIGNAL_TEXTURE_TYPE_UINT2

	// Spherical harmonics are a lot of data, need to shrink VGPR pressure to improve lattency hidding when fetching the buffer.
	// TODO(Denoiser): some shader compiler completly falls apparts with the current implementation of
	//       CONFIG_SIGNAL_VGPR_COMPRESSION and actually drops in occupency.
	//#define CONFIG_SIGNAL_VGPR_COMPRESSION SIGNAL_COMPRESSION_DIFFUSE_INDIRECT_HARMONIC
	//#define CONFIG_NEIGHBOR_TO_REF_COMPUTATION NEIGHBOR_TO_REF_LOWEST_VGPR_PRESSURE

#else
	#error Unknown signal processing.
#endif


//------------------------------------------------------- CONFIG DISABLED DEFAULTS

/** Selects how the world distance should be computed for bilateral rejection. */
#ifndef CONFIG_BILATERAL_DISTANCE_COMPUTATION
	#define CONFIG_BILATERAL_DISTANCE_COMPUTATION SIGNAL_WORLD_FREQUENCY_MIN_METADATA
#endif


//------------------------------------------------------- INCLUDES

#include "SSDSignalFramework.ush"
#include "SSDSignalArray.ush"
#include "SSDSpatialKernel.ush"


//------------------------------------------------------- PARAMETERS

uint MaxSampleCount;
uint UpscaleFactor;

#if !CONFIG_UPSCALE && CONFIG_CUSTOM_SPREAD_FACTOR
	float KernelSpreadFactor;
#endif


#if !defined(CONFIG_INPUT_TEXTURE_COUNT)
	#error Missing CONFIG_INPUT_TEXTURE_COUNT
#endif

FSSDTexture2D SignalInput_Textures_0;

#if CONFIG_INPUT_TEXTURE_COUNT > 1
FSSDTexture2D SignalInput_Textures_1;
#else
#define SignalInput_Textures_1 SignalInput_Textures_0
#endif

#if CONFIG_INPUT_TEXTURE_COUNT > 2
FSSDTexture2D SignalInput_Textures_2;
#else
#define SignalInput_Textures_2 SignalInput_Textures_0
#endif

#if CONFIG_INPUT_TEXTURE_COUNT > 3
FSSDTexture2D SignalInput_Textures_3;
#else
#define SignalInput_Textures_3 SignalInput_Textures_0
#endif


#if !defined(CONFIG_OUTPUT_TEXTURE_COUNT)
	#error Missing CONFIG_OUTPUT_TEXTURE_COUNT
#endif

FSSDRWTexture2D	SignalOutputMips_0_UAVs_0;
FSSDRWTexture2D	SignalOutputMips_1_UAVs_0;
FSSDRWTexture2D	SignalOutputMips_2_UAVs_0;

#if CONFIG_OUTPUT_TEXTURE_COUNT > 1
FSSDRWTexture2D	SignalOutputMips_0_UAVs_1;
FSSDRWTexture2D	SignalOutputMips_1_UAVs_1;
FSSDRWTexture2D	SignalOutputMips_2_UAVs_1;
#else
#define SignalOutputMips_0_UAVs_1 SignalOutputMips_0_UAVs_0
#define SignalOutputMips_1_UAVs_1 SignalOutputMips_1_UAVs_0
#define SignalOutputMips_2_UAVs_1 SignalOutputMips_2_UAVs_0
#endif

#if CONFIG_OUTPUT_TEXTURE_COUNT > 2
FSSDRWTexture2D	SignalOutputMips_0_UAVs_2;
FSSDRWTexture2D	SignalOutputMips_1_UAVs_2;
FSSDRWTexture2D	SignalOutputMips_2_UAVs_2;
#else
#define SignalOutputMips_0_UAVs_2 SignalOutputMips_0_UAVs_0
#define SignalOutputMips_1_UAVs_2 SignalOutputMips_1_UAVs_0
#define SignalOutputMips_2_UAVs_2 SignalOutputMips_2_UAVs_0
#endif

#if CONFIG_OUTPUT_TEXTURE_COUNT > 3
FSSDRWTexture2D	SignalOutputMips_0_UAVs_3;
FSSDRWTexture2D	SignalOutputMips_1_UAVs_3;
FSSDRWTexture2D	SignalOutputMips_2_UAVs_3;
#else
#define SignalOutputMips_0_UAVs_3 SignalOutputMips_0_UAVs_0
#define SignalOutputMips_1_UAVs_3 SignalOutputMips_1_UAVs_0
#define SignalOutputMips_2_UAVs_3 SignalOutputMips_2_UAVs_0
#endif


//------------------------------------------------------- ENTRY POINTS

[numthreads(TILE_PIXEL_SIZE, TILE_PIXEL_SIZE, 1)]
void MainCS(
	uint2 DispatchThreadId : SV_DispatchThreadID,
	uint2 GroupId : SV_GroupID,
	uint2 GroupThreadId : SV_GroupThreadID,
	uint GroupThreadIndex : SV_GroupIndex)
{
	// Find out scene buffer UV.
	float2 SceneBufferUV = DispatchThreadId * ThreadIdToBufferUV.xy + ThreadIdToBufferUV.zw;
	if (true)
	{
		SceneBufferUV = clamp(SceneBufferUV, BufferBilinearUVMinMax.xy, BufferBilinearUVMinMax.zw);
	}
	
	// Sample the reference sample.
	FSSDSignalArray RefSamples = SampleMultiplexedSignals(
		SignalInput_Textures_0,
		SignalInput_Textures_1,
		SignalInput_Textures_2,
		SignalInput_Textures_3,
		GlobalPointClampedSampler,
		CONFIG_SIGNAL_INPUT_LAYOUT,
		/* MultiplexedSampleId = */ 0,
		/* bNormalizeSample = */ false,
		SceneBufferUV);
	
	const uint MultiplexCount = CONFIG_SIGNAL_BATCH_SIZE;

	// Output the multiplexed signal in mip 0.
	{
		// Whitelists computation that needs to be done.
		FSSDSignalArray OutputSamples = CreateSignalArrayFromScalarValue(0.0);
		UNROLL
		for (uint MultiplexId = 0; MultiplexId < MultiplexCount; MultiplexId++)
		{
			OutputSamples.Array[MultiplexId] = RefSamples.Array[MultiplexId];
		}

		// TODO(Denoiser): reduce VGPR pressure here
		uint2 OutputPixelPostion = ViewportMax + DispatchThreadId;

		OutputMultiplexedSignal(
			SignalOutputMips_0_UAVs_0,
			SignalOutputMips_0_UAVs_1,
			SignalOutputMips_0_UAVs_2,
			SignalOutputMips_0_UAVs_3,
			CONFIG_SIGNAL_OUTPUT_LAYOUT, MultiplexCount,
			OutputPixelPostion, OutputSamples.Array);
	}

	UNROLL_N(2)
	for (uint MipLevel = 1; MipLevel < CONFIG_MIP_LEVEL_COUNT; MipLevel++)
	{
		// Whitelists computation that needs to be done.
		FSSDSignalArray OutputSamples = CreateSignalArrayFromScalarValue(0.0);
		UNROLL
		for (uint MultiplexId = 0; MultiplexId < MultiplexCount; MultiplexId++)
		{
			OutputSamples.Array[MultiplexId] = RefSamples.Array[MultiplexId];
		}

		uint2 OutputPixelPostion = (ViewportMax + DispatchThreadId) >> MipLevel;

		BRANCH
		if (all((OutputPixelPostion << MipLevel) == (ViewportMax + DispatchThreadId)))
		{
			if (MipLevel == 1)
			{
				OutputMultiplexedSignal(
					SignalOutputMips_1_UAVs_0,
					SignalOutputMips_1_UAVs_1,
					SignalOutputMips_1_UAVs_2,
					SignalOutputMips_1_UAVs_3,
					CONFIG_SIGNAL_OUTPUT_LAYOUT, MultiplexCount,
					OutputPixelPostion, OutputSamples.Array);
			}
			#if CONFIG_MIP_LEVEL_COUNT >= 3
			else if (MipLevel == 2)
			{
				OutputMultiplexedSignal(
					SignalOutputMips_2_UAVs_0,
					SignalOutputMips_2_UAVs_1,
					SignalOutputMips_2_UAVs_2,
					SignalOutputMips_2_UAVs_3,
					CONFIG_SIGNAL_OUTPUT_LAYOUT, MultiplexCount,
					OutputPixelPostion, OutputSamples.Array);
			}
			#endif
		} // if ((OutputPixelPostion << MipLevel) ==  DispatchThreadId)
	} // for (uint MipLevel = 1; MipLevel < 3; MipLevel++)
} // MainCS
