// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

#pragma once

#include "SSDSignalCore.ush"
#include "SSDPublicBufferEncoding.ush"

/** Whether the color should be clamped when encoding signal. */
#define CONFIG_ENCODING_CLAMP_COLOR 1

/** Selects the type that should be used when sampling a buffer */
#ifndef CONFIG_SIGNAL_INPUT_TEXTURE_TYPE
	#define CONFIG_SIGNAL_INPUT_TEXTURE_TYPE SIGNAL_TEXTURE_TYPE_FLOAT4
#endif

/** Selects the type that should be used when sampling a buffer */
#ifndef CONFIG_SIGNAL_OUTPUT_TEXTURE_TYPE
	#define CONFIG_SIGNAL_OUTPUT_TEXTURE_TYPE SIGNAL_TEXTURE_TYPE_FLOAT4
#endif


#if CONFIG_SIGNAL_INPUT_TEXTURE_TYPE == SIGNAL_TEXTURE_TYPE_FLOAT4
	#define FSSDRawSample float4
	#define FSSDTexture2D Texture2D
#elif CONFIG_SIGNAL_INPUT_TEXTURE_TYPE == SIGNAL_TEXTURE_TYPE_UINT1 || CONFIG_SIGNAL_INPUT_TEXTURE_TYPE == SIGNAL_TEXTURE_TYPE_UINT2 || CONFIG_SIGNAL_INPUT_TEXTURE_TYPE == SIGNAL_TEXTURE_TYPE_UINT3 || CONFIG_SIGNAL_INPUT_TEXTURE_TYPE == SIGNAL_TEXTURE_TYPE_UINT4
	#if CONFIG_SIGNAL_INPUT_TEXTURE_TYPE == SIGNAL_TEXTURE_TYPE_UINT1
		#define FSSDRawSample uint
	#elif CONFIG_SIGNAL_INPUT_TEXTURE_TYPE == SIGNAL_TEXTURE_TYPE_UINT2
		#define FSSDRawSample uint2
	#elif CONFIG_SIGNAL_INPUT_TEXTURE_TYPE == SIGNAL_TEXTURE_TYPE_UINT3
		#define FSSDRawSample uint3
	#elif CONFIG_SIGNAL_INPUT_TEXTURE_TYPE == SIGNAL_TEXTURE_TYPE_UINT4
		#define FSSDRawSample uint4
	#else
		#error Unknown input type for a signal texture.
	#endif
	#define FSSDTexture2D Texture2D<FSSDRawSample>
#else
	#error Unknown input type for a signal texture.
#endif

#if CONFIG_SIGNAL_OUTPUT_TEXTURE_TYPE == SIGNAL_TEXTURE_TYPE_FLOAT4
	#define FSSDOutputRawSample float4
#elif CONFIG_SIGNAL_OUTPUT_TEXTURE_TYPE == SIGNAL_TEXTURE_TYPE_UINT1
	#define FSSDOutputRawSample uint
#elif CONFIG_SIGNAL_OUTPUT_TEXTURE_TYPE == SIGNAL_TEXTURE_TYPE_UINT2
	#define FSSDOutputRawSample uint2
#elif CONFIG_SIGNAL_OUTPUT_TEXTURE_TYPE == SIGNAL_TEXTURE_TYPE_UINT3
	#define FSSDOutputRawSample uint3
#elif CONFIG_SIGNAL_OUTPUT_TEXTURE_TYPE == SIGNAL_TEXTURE_TYPE_UINT4
	#define FSSDOutputRawSample uint4
#else
	#error Unknown output type for a signal texture.
#endif

#define FSSDRWTexture2D RWTexture2D<FSSDOutputRawSample>


float3 ClampColorForEncoding(float3 Color)
{
	#if CONFIG_ENCODING_CLAMP_COLOR
		Color = min(Color, MaxHalfFloat);
	#endif
	return Color;
}

float4 ClampColorForEncoding(float4 Color)
{
	return float4(ClampColorForEncoding(Color.rgb), Color.a);
}


/** Raw data layout when sampling input texture of the denoiser. */
struct FSSDCompressedMultiplexedSample
{
	FSSDRawSample VGPRArray[MAX_MULTIPLEXED_TEXTURES];
};


/** Decode input signal sample from raw float. */
void DecodeMultiplexedSignalsFromFloat4(
	const uint SignalBufferLayout,
	const uint MultiplexedSampleId,
	const bool bNormalizeSample,
	float4 RawSample[MAX_MULTIPLEXED_TEXTURES],
	out FSSDSignalArray OutSamples)
{
	OutSamples = CreateSignalArrayFromScalarValue(0.0);

	if (0)
	{
	
	}
	#if 1
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_UNINITIALIZED)
	{
		// trash out the output sample to identify quickly a miss configured buffer layout.
		OutSamples = CreateSignalArrayFromScalarValue(-INFINITE_FLOAT);
	}
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_PENUMBRA_INPUT_NSPP)
	{
		UNROLL_N(MAX_SIGNAL_BATCH_SIZE)
		for (uint BatchSignalId = 0; BatchSignalId < MAX_SIGNAL_BATCH_SIZE; BatchSignalId++)
		{
			uint MultiplexId = BatchSignalId;
			// TODO(Denoiser): feed the actual number of sample.
			OutSamples.Array[MultiplexId].SampleCount = (RawSample[MultiplexId].g == DENOISER_INVALID_HIT_DISTANCE ? 0.0 : 1.0);
			OutSamples.Array[MultiplexId].MissCount = OutSamples.Array[MultiplexId].SampleCount * RawSample[MultiplexId].r;
			OutSamples.Array[MultiplexId].ClosestHitDistance = OutSamples.Array[MultiplexId].SampleCount * (RawSample[MultiplexId].g == DENOISER_MISS_HIT_DISTANCE ? 1000000 : RawSample[MultiplexId].g);
		}
	}
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_PENUMBRA_INJESTION_NSPP)
	{
		UNROLL_N(MAX_SIGNAL_BATCH_SIZE)
		for (uint BatchSignalId = 0; BatchSignalId < MAX_SIGNAL_BATCH_SIZE; BatchSignalId++)
		{
			uint MultiplexId = BatchSignalId;
			float2 Channels = float2(RawSample[MultiplexId / 2][2 * (MultiplexId % 2)], RawSample[MultiplexId / 2][2 * (MultiplexId % 2) + 1]);
	
			// TODO(Denoiser): feed the actual number of sample.
			OutSamples.Array[MultiplexId].SampleCount = (Channels.g == -2.0 ? 0.0 : 1.0);
			OutSamples.Array[MultiplexId].MissCount = OutSamples.Array[MultiplexId].SampleCount * Channels.r;
			OutSamples.Array[MultiplexId].WorldBluringRadius = OutSamples.Array[MultiplexId].SampleCount * (Channels.g == -1 ? WORLD_RADIUS_MISS : Channels.g);
		}
	}
	//else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_PENUMBRA_RECONSTRUCTION)
	//{
	//	UNROLL_N(SIGNAL_ARRAY_SIZE)
	//	for (uint MultiplexId = 0; MultiplexId < SIGNAL_ARRAY_SIZE; MultiplexId++)
	//	{
	//		float2 Channels = float2(RawSample[MultiplexId / 2][2 * (MultiplexId % 2)], RawSample[MultiplexId / 2][2 * (MultiplexId % 2) + 1]);
	//
	//		if (bNormalizeSample)
	//		{
	//			OutSamples.Array[MultiplexId].SampleCount = Channels.g > 0 ? 1 : 0;
	//			OutSamples.Array[MultiplexId].MissCount = Channels.g > 0 ? Channels.r : 0;
	//		}
	//		else
	//		{
	//			OutSamples.Array[MultiplexId].SampleCount = Channels.g;
	//			OutSamples.Array[MultiplexId].MissCount = Channels.r * Channels.g;
	//		}
	//	}
	//}
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_PENUMBRA_HISTORY || SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_PENUMBRA_RECONSTRUCTION)
	{
		UNROLL_N(MAX_SIGNAL_BATCH_SIZE)
		for (uint MultiplexId = 0; MultiplexId < MAX_SIGNAL_BATCH_SIZE; MultiplexId++)
		{
			float3 Channels = RawSample[MultiplexId].xyz;
			
			float SampleCount = bNormalizeSample ? (Channels.g > 0 ? 1 : 0) : (Channels.g);

			OutSamples.Array[MultiplexId].MissCount = Channels.r * SampleCount;
			OutSamples.Array[MultiplexId].SampleCount = SampleCount;
			OutSamples.Array[MultiplexId].WorldBluringRadius = (Channels.b == DENOISER_MISS_HIT_DISTANCE ? WORLD_RADIUS_MISS : Channels.b) * SampleCount;
		}
	}
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_PENUMBRA_REJECTION)
	{
		UNROLL_N(MAX_SIGNAL_BATCH_SIZE)
		for (uint BatchSignalId = 0; BatchSignalId < MAX_SIGNAL_BATCH_SIZE; BatchSignalId++)
		{
			uint MultiplexId = BatchSignalId * 2;
			float4 Channels = RawSample[BatchSignalId];
			float SampleCount = Channels.b;

			OutSamples.Array[MultiplexId + 0].SampleCount = SampleCount;
			OutSamples.Array[MultiplexId + 0].MissCount = Channels.r * SampleCount;
			OutSamples.Array[MultiplexId + 0].WorldBluringRadius = (Channels.a == -1 ? WORLD_RADIUS_MISS : Channels.a) * SampleCount;
			
			OutSamples.Array[MultiplexId + 1].SampleCount = SampleCount;
			OutSamples.Array[MultiplexId + 1].MissCount = Channels.g * SampleCount;
		}
	}
	#endif
	#if COMPILE_SIGNAL_COLOR_ARRAY >= 2
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_POLYCHROMATIC_PENUMBRA_HARMONIC_INPUT)
	{
		// The RGS output same weigth for diffuse and specular given it depends only on shading model id.
		float Weight = RawSample[0].a;

		if (bNormalizeSample)
		{
			Weight = Weight > 0.0 ? 1.0 : 0.0;
		}

		// Decode diffuse
		{
			const uint MultiplexId = 0;

			OutSamples.Array[MultiplexId].SampleCount = Weight;
			OutSamples.Array[MultiplexId].ColorArray[0] = RawSample[0].rgb * Weight;
			OutSamples.Array[MultiplexId].ColorArray[1] = RawSample[1].rgb * Weight;
		}
		
		// Decode specular
		{
			const uint MultiplexId = 1;

			OutSamples.Array[MultiplexId].SampleCount = Weight;
			OutSamples.Array[MultiplexId].ColorArray[0] = RawSample[2].rgb * Weight;
			OutSamples.Array[MultiplexId].ColorArray[1] = RawSample[3].rgb * Weight;
		}
	}
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_POLYCHROMATIC_PENUMBRA_HARMONIC_RECONSTRUCTION)
	{
		// Decode diffuse
		{
			const uint MultiplexId = 0;

			float Weight = RawSample[0].a;
			if (bNormalizeSample)
			{
				Weight = Weight > 0.0 ? 1.0 : 0.0;
			}

			OutSamples.Array[MultiplexId].SampleCount = Weight;
			OutSamples.Array[MultiplexId].ColorArray[0] = RawSample[0].rgb * Weight;
			OutSamples.Array[MultiplexId].ColorArray[1] = RawSample[1].rgb * Weight;
		}
		
		// Decode specular
		{
			const uint MultiplexId = 1;

			float Weight = RawSample[2].a;
			if (bNormalizeSample)
			{
				Weight = Weight > 0.0 ? 1.0 : 0.0;
			}

			OutSamples.Array[MultiplexId].SampleCount = Weight;
			OutSamples.Array[MultiplexId].ColorArray[0] = RawSample[2].rgb * Weight;
			OutSamples.Array[MultiplexId].ColorArray[1] = RawSample[3].rgb * Weight;
		}
	}
	#endif
	#if COMPILE_SIGNAL_COLOR
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_POLYCHROMATIC_PENUMBRA_HISTORY)
	{
		// Decode diffuse harmonic
		{
			const uint MultiplexId = 0;

			float Weight = RawSample[0].a;

			if (bNormalizeSample)
			{
				Weight = Weight > 0 ? 1 : 0;
			}

			OutSamples.Array[MultiplexId].SampleCount = Weight;
			OutSamples.Array[MultiplexId].SceneColor.rgb = RawSample[0].rgb * Weight;
		}
		
		// Decode specular harmonic
		{
			const uint MultiplexId = 1;

			float Weight = RawSample[1].a;

			if (bNormalizeSample)
			{
				Weight = Weight > 0 ? 1 : 0;
			}

			OutSamples.Array[MultiplexId].SampleCount = Weight;
			OutSamples.Array[MultiplexId].SceneColor.rgb = RawSample[1].rgb * Weight;
		}
	}
	#endif
	#if COMPILE_SIGNAL_COLOR
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_REFLECTIONS_INPUT)
	{
		OutSamples.Array[0].SampleCount = RawSample[1].r == DENOISER_INVALID_HIT_DISTANCE ? 0 : 1;
		OutSamples.Array[0].MissCount = OutSamples.Array[0].SampleCount * (1 - RawSample[0].a);
		OutSamples.Array[0].SceneColor = RawSample[0];

		// max() because ray hit distance is < 0 when miss / not ray has been shot.
		//OutSamples.Array[0].ClosestHitDistance = RawSample[1].r * OutSamples.Array[0].SampleCount;
		OutSamples.Array[0].ClosestHitDistance = ((RawSample[1].r == DENOISER_MISS_HIT_DISTANCE) ? 1.0e20 : RawSample[1].r) * OutSamples.Array[0].SampleCount;
	}
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_REFLECTIONS_REJECTION)
	{
		if (bNormalizeSample)
		{
			OutSamples.Array[0].SampleCount = RawSample[1].r > 0 ? 1 : 0;
		}
		else
		{
			OutSamples.Array[0].SampleCount = RawSample[1].r;
		}
		
		OutSamples.Array[0].MissCount = OutSamples.Array[0].SampleCount * (1 - RawSample[0].a);
		OutSamples.Array[0].SceneColor = OutSamples.Array[0].SampleCount * RawSample[0];

		OutSamples.Array[1].SampleCount = RawSample[1].g;
		OutSamples.Array[1].MissCount = OutSamples.Array[0].SampleCount * (1 - RawSample[2].a);
		OutSamples.Array[1].SceneColor = OutSamples.Array[0].SampleCount * RawSample[2];
	}
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_REFLECTIONS_HISTORY)
	{
		if (bNormalizeSample)
		{
			OutSamples.Array[0].SampleCount = RawSample[1].r > 0 ? 1 : 0;
		}
		else
		{
			OutSamples.Array[0].SampleCount = RawSample[1].r;
		}
		
		OutSamples.Array[0].MissCount = OutSamples.Array[0].SampleCount * (1 - RawSample[0].a);
		OutSamples.Array[0].SceneColor = OutSamples.Array[0].SampleCount * RawSample[0];

		// Temporal analysis of the history.
		#if SIGNAL_ARRAY_SIZE >= 3
			OutSamples.Array[1].SampleCount = OutSamples.Array[0].SampleCount;
			OutSamples.Array[1].SceneColor.x = OutSamples.Array[1].SampleCount * RawSample[1].g;
			OutSamples.Array[2].SampleCount = OutSamples.Array[0].SampleCount;
			OutSamples.Array[2].SceneColor.x = OutSamples.Array[2].SampleCount * RawSample[1].b;
		#endif
	}
	#endif
	#if 1
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_AO_INPUT)
	{
		OutSamples.Array[0].SampleCount = RawSample[1].r < 0 ? 0 : 1;
		OutSamples.Array[0].MissCount = OutSamples.Array[0].SampleCount * RawSample[0].r;
		OutSamples.Array[0].ClosestHitDistance = OutSamples.Array[0].SampleCount * RawSample[1].r;
	}
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_AO_REJECTION)
	{
		if (bNormalizeSample)
		{
			OutSamples.Array[0].SampleCount = RawSample[0].g > 0 ? 1 : 0;
			OutSamples.Array[0].MissCount = RawSample[0].g > 0 ? RawSample[0].r : 0;
			
			OutSamples.Array[1].SampleCount = RawSample[0].a > 0 ? 1 : 0;
			OutSamples.Array[1].MissCount = RawSample[0].a > 0 ? RawSample[0].b : 0;
		}
		else
		{
			OutSamples.Array[0].SampleCount = RawSample[0].g;
			OutSamples.Array[0].MissCount = RawSample[0].g * RawSample[0].r;
			
			OutSamples.Array[1].SampleCount = RawSample[0].a;
			OutSamples.Array[1].MissCount = RawSample[0].a * RawSample[0].b;
		}
	}
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_AO_HISTORY)
	{
		if (bNormalizeSample)
		{
			OutSamples.Array[0].SampleCount = RawSample[0].g > 0 ? 1 : 0;
			OutSamples.Array[0].MissCount = RawSample[0].g > 0 ? RawSample[0].r : 0;
		}
		else
		{
			OutSamples.Array[0].SampleCount = RawSample[0].g;
			OutSamples.Array[0].MissCount = RawSample[0].g * RawSample[0].r;
		}
	}
	#endif
	#if COMPILE_SIGNAL_COLOR
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_DIFFUSE_INDIRECT_AND_AO_INPUT_NSPP)
	{
		OutSamples.Array[0].SampleCount = RawSample[1].g;
		OutSamples.Array[0].MissCount = OutSamples.Array[0].SampleCount * (1 - RawSample[0].a);
		OutSamples.Array[0].SceneColor = OutSamples.Array[0].SampleCount * RawSample[0];

		// max() because ray hit distance is < 0 when miss / not ray has been shot.
		OutSamples.Array[0].ClosestHitDistance = RawSample[1].r * OutSamples.Array[0].SampleCount;
		OutSamples.Array[0].ClosestHitDistance = ((RawSample[1].r == -1.0) ? 1.0e20 : RawSample[1].r) * OutSamples.Array[0].SampleCount;
	}
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_DIFFUSE_INDIRECT_AND_AO_RECONSTRUCTION)
	{
		if (bNormalizeSample)
		{
			OutSamples.Array[0].SampleCount = RawSample[1].r > 0 ? 1 : 0;
		}
		else
		{
			OutSamples.Array[0].SampleCount = RawSample[1].r;
		}
		
		OutSamples.Array[0].MissCount = OutSamples.Array[0].SampleCount * (1 - RawSample[0].a);
		OutSamples.Array[0].SceneColor = OutSamples.Array[0].SampleCount * RawSample[0];
	}
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_DIFFUSE_INDIRECT_AND_AO_HISTORY)
	{
		if (bNormalizeSample)
		{
			OutSamples.Array[0].SampleCount = RawSample[1].r > 0 ? 1 : 0;
		}
		else
		{
			OutSamples.Array[0].SampleCount = RawSample[1].r;
		}
		
		OutSamples.Array[0].MissCount = OutSamples.Array[0].SampleCount * (1 - RawSample[0].a);
		OutSamples.Array[0].SceneColor = OutSamples.Array[0].SampleCount * RawSample[0];
		
		// Temporal analysis.
		#if SIGNAL_ARRAY_SIZE >= 3
			OutSamples.Array[1].SampleCount = OutSamples.Array[0].SampleCount;
			OutSamples.Array[1].SceneColor.x = OutSamples.Array[1].SampleCount * RawSample[1].g;
			OutSamples.Array[2].SampleCount = OutSamples.Array[0].SampleCount;
			OutSamples.Array[2].SceneColor.x = OutSamples.Array[2].SampleCount * RawSample[1].b;
		#endif
	}
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_SSGI_INPUT)
	{
		OutSamples.Array[0].SampleCount = RawSample[0].a;
		OutSamples.Array[0].MissCount = OutSamples.Array[0].SampleCount * RawSample[1].r;
		OutSamples.Array[0].SceneColor.rgb = OutSamples.Array[0].SampleCount * RawSample[0].rgb;
	}
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_SSGI_HISTORY_R11G11B10)
	{
		OutSamples.Array[0].SampleCount = RawSample[1].g * 64.0;
		OutSamples.Array[0].MissCount = OutSamples.Array[0].SampleCount * RawSample[1].r;
		OutSamples.Array[0].SceneColor.rgb = OutSamples.Array[0].SampleCount * RawSample[0].rgb;
	}
	#endif
} // DecodeMultiplexedSignalsFromFloat4()


/** Decode input signal sample from raw float. */
FSSDSignalArray DecodeMultiplexedSignals(
	const uint SignalBufferLayout,
	const uint MultiplexedSampleId,
	const bool bNormalizeSample,
	FSSDCompressedMultiplexedSample CompressedSample)
#if CONFIG_SIGNAL_INPUT_TEXTURE_TYPE == SIGNAL_TEXTURE_TYPE_FLOAT4
{
	FSSDSignalArray MultiplexedSamples;
	DecodeMultiplexedSignalsFromFloat4(
		SignalBufferLayout, MultiplexedSampleId, bNormalizeSample,
		CompressedSample.VGPRArray, /* out */ MultiplexedSamples);
	return MultiplexedSamples;
} // DecodeMultiplexedSignals()
#elif CONFIG_SIGNAL_INPUT_TEXTURE_TYPE == SIGNAL_TEXTURE_TYPE_UINT2
{
	FSSDSignalArray MultiplexedSamples = CreateSignalArrayFromScalarValue(0.0);
	
	if (0)
	{
	
	}
	#if COMPILE_SIGNAL_COLOR_SH
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_DIFFUSE_INDIRECT_HARMONIC)
	{
		const uint DecodeOptions = bNormalizeSample ? SSD_DECODE_NORMALIZE : 0x0;

		DecodeDiffuseSphericalHarmonicTexel(
			CompressedSample.VGPRArray,
			DecodeOptions,
			/* out */ MultiplexedSamples.Array[0].SampleCount,
			/* out */ MultiplexedSamples.Array[0].MissCount,
			/* out */ MultiplexedSamples.Array[0].ColorSH);

		// TODO(Denoiser): SRV on RG F32 and manually decode with f16tof32(), going to reduce VGPR pressure between fetch and result.
	}
	#endif
	// Uncompress assuming this is packed as 16bit floats.
	else
	{
		float4 FloatVGPRArray[MAX_MULTIPLEXED_TEXTURES];
		
		UNROLL_N(MAX_MULTIPLEXED_TEXTURES)
		for (uint TexId = 0; TexId < MAX_MULTIPLEXED_TEXTURES; TexId++)
			FloatVGPRArray[TexId] = Uncompress4Floats(CompressedSample.VGPRArray[TexId]);
		
		DecodeMultiplexedSignalsFromFloat4(
			SignalBufferLayout, MultiplexedSampleId, bNormalizeSample,
			FloatVGPRArray, /* out */ MultiplexedSamples);
	}

	return MultiplexedSamples;
} // DecodeMultiplexedSignals()
#endif

/** Encode output signal sample. */
void EncodeMultiplexedSignals(
	const uint SignalBufferLayout, const uint MultiplexCount,
	FSSDSignalSample Sample[SIGNAL_ARRAY_SIZE],
	out FSSDOutputRawSample OutRawSample[MAX_MULTIPLEXED_TEXTURES],
	out uint OutBufferCount)
#if CONFIG_SIGNAL_OUTPUT_TEXTURE_TYPE == SIGNAL_TEXTURE_TYPE_FLOAT4
{
	// Init all raw samples.
	UNROLL_N(MAX_MULTIPLEXED_TEXTURES)
	for (uint i = 0; i < MAX_MULTIPLEXED_TEXTURES; i++)
		OutRawSample[i] = 0;

	// Number of buffer the signal get encoded onto <= MAX_MULTIPLEXED_TEXTURES.
	OutBufferCount = 1;

	if (0)
	{
		// NOP
	}
	#if 1
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_PENUMBRA_INJESTION_NSPP)
	{
		UNROLL
		for (uint MultiplexId = 0; MultiplexId < MultiplexCount; MultiplexId++)
		{
			float2 EncodedChannels = float2(
				Sample[MultiplexId].MissCount,
				Sample[MultiplexId].WorldBluringRadius) * SafeRcp(Sample[MultiplexId].SampleCount);
			
			if (Sample[MultiplexId].SampleCount == 0)
			{
				EncodedChannels.y = -2;
			}
			else if (Sample[MultiplexId].WorldBluringRadius == WORLD_RADIUS_MISS)
			{
				EncodedChannels.y = -1;
			}

			if (MultiplexId % 2)
				OutRawSample[MultiplexId / 2].zw = EncodedChannels;
			else
				OutRawSample[MultiplexId / 2].xy = EncodedChannels;
		}
		OutBufferCount = (MultiplexCount + 1) / 2;
	}
	//else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_PENUMBRA_RECONSTRUCTION)
	//{
	//	UNROLL
	//	for (uint MultiplexId = 0; MultiplexId < MultiplexCount; MultiplexId++)
	//	{
	//		float2 EncodedChannels = float2(
	//			Sample[MultiplexId].MissCount * SafeRcp(Sample[MultiplexId].SampleCount),
	//			Sample[MultiplexId].SampleCount);
	//
	//		if (MultiplexId % 2)
	//			OutRawSample[MultiplexId / 2].zw = EncodedChannels;
	//		else
	//			OutRawSample[MultiplexId / 2].xy = EncodedChannels;
	//	}
	//	OutBufferCount = (MultiplexCount + 1) / 2;
	//}
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_PENUMBRA_HISTORY || SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_PENUMBRA_RECONSTRUCTION)
	{
		UNROLL
		for (uint MultiplexId = 0; MultiplexId < MultiplexCount; MultiplexId++)
		{
			float NormalizationFactor = SafeRcp(Sample[MultiplexId].SampleCount);

			float NormalizedWorldBluringRadius = Sample[MultiplexId].WorldBluringRadius * NormalizationFactor;

			OutRawSample[MultiplexId] = float4(
				Sample[MultiplexId].MissCount * NormalizationFactor,
				Sample[MultiplexId].SampleCount,
				NormalizedWorldBluringRadius == WORLD_RADIUS_MISS ? -1 : NormalizedWorldBluringRadius,
				0);
		}
		OutBufferCount = MultiplexCount;
	}
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_PENUMBRA_REJECTION)
	{
		const uint BatchSignalCount = MultiplexCount / 2;
		OutBufferCount = BatchSignalCount;

		UNROLL
		for (uint BatchSignalId = 0; BatchSignalId < BatchSignalCount; BatchSignalId++)
		{
			uint MultiplexId = BatchSignalId * 2;

			float NormalizationFactor = SafeRcp(Sample[MultiplexId + 0].SampleCount);

			float NormalizedWorldBluringRadius = Sample[MultiplexId + 0].WorldBluringRadius * NormalizationFactor;

			// Samples are normalised when doing history preconvolution, so the number of is either 0 or 1 on both momments. Therefore
			// Sample[MultiplexId + 0].SampleCount == Sample[MultiplexId + 1].SampleCount.
			OutRawSample[BatchSignalId] = float4(
				Sample[MultiplexId + 0].MissCount * NormalizationFactor,
				Sample[MultiplexId + 1].MissCount * NormalizationFactor,
				Sample[MultiplexId + 0].SampleCount,
				NormalizedWorldBluringRadius == WORLD_RADIUS_MISS ? -1 : NormalizedWorldBluringRadius);
		}
	}
	#endif
	#if COMPILE_SIGNAL_COLOR_ARRAY >= 2
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_POLYCHROMATIC_PENUMBRA_HARMONIC_RECONSTRUCTION)
	{
		// diffuse harmonic
		{
			const uint MultiplexId = 0;

			float NormalizationFactor = SafeRcp(Sample[MultiplexId].SampleCount);

			OutRawSample[0].rgb = Sample[MultiplexId].ColorArray[0] * NormalizationFactor;
			OutRawSample[0].a = Sample[MultiplexId].SampleCount;
			OutRawSample[1].rgb = Sample[MultiplexId].ColorArray[1] * NormalizationFactor;
		}
		
		// specular harmonic
		{
			const uint MultiplexId = 1;

			float NormalizationFactor = SafeRcp(Sample[1].SampleCount);
			
			OutRawSample[2].rgb = Sample[MultiplexId].ColorArray[0] * NormalizationFactor;
			OutRawSample[2].a = Sample[MultiplexId].SampleCount;
			OutRawSample[3].rgb = Sample[MultiplexId].ColorArray[1] * NormalizationFactor;
		}

		OutBufferCount = 4;
	}
	#endif
	#if COMPILE_SIGNAL_COLOR
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_POLYCHROMATIC_PENUMBRA_HISTORY)
	{
		// Encode diffuse harmonic
		{
			const uint MultiplexId = 0;

			float NormalizationFactor = SafeRcp(Sample[MultiplexId].SampleCount);

			OutRawSample[0].rgb = ClampColorForEncoding(Sample[MultiplexId].SceneColor.rgb * NormalizationFactor);
			OutRawSample[0].a = Sample[MultiplexId].SampleCount;
		}

		// Encode specular harmonic
		{
			const uint MultiplexId = 1;

			float NormalizationFactor = SafeRcp(Sample[MultiplexId].SampleCount);

			OutRawSample[1].rgb = ClampColorForEncoding(Sample[MultiplexId].SceneColor.rgb * NormalizationFactor);
			OutRawSample[1].a = Sample[MultiplexId].SampleCount;
		}

		OutBufferCount = 2;
	}
	#endif
	#if COMPILE_SIGNAL_COLOR
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_REFLECTIONS_REJECTION)
	{
		// Outputs scene color to be compatible with a SSR output.
		OutRawSample[0] = ClampColorForEncoding(Sample[0].SceneColor * (Sample[0].SampleCount > 0 ? rcp(Sample[0].SampleCount) : 0));
		OutRawSample[1].r = Sample[0].SampleCount;
		OutBufferCount = 2;

		if (MultiplexCount == 2)
		{
			OutRawSample[2] = ClampColorForEncoding(Sample[1].SceneColor * (Sample[1].SampleCount > 0 ? rcp(Sample[1].SampleCount) : 0));
			OutRawSample[1].g = Sample[1].SampleCount;
			OutBufferCount = 3;
		}
	}
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_REFLECTIONS_HISTORY)
	{
		float NormalizationFactor = SafeRcp(Sample[0].SampleCount);

		// Outputs scene color to be compatible with a SSR output.
		OutRawSample[0] = ClampColorForEncoding(Sample[0].SceneColor * NormalizationFactor);
		OutRawSample[1].r = Sample[0].SampleCount;
		OutBufferCount = 2;

		// Temporal analysis.
		#if SIGNAL_ARRAY_SIZE >= 3
		if (MultiplexCount == 3)
		{
			OutRawSample[1].g = Sample[1].SceneColor.x * NormalizationFactor;
			OutRawSample[1].b = Sample[2].SceneColor.x * NormalizationFactor;
			OutBufferCount = 3;
		}
		#endif
	}
	#endif
	#if 1
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_AO_REJECTION)
	{
		// Outputs number of ray miss in red to be compatible as a SSAO output.
		OutRawSample[0].r = Sample[0].SampleCount > 0 ? Sample[0].MissCount / Sample[0].SampleCount : 1.0;
		OutRawSample[0].g = Sample[0].SampleCount;
		
		if (MultiplexCount == 2)
		{
			OutRawSample[0].b = Sample[1].SampleCount > 0 ? Sample[1].MissCount / Sample[1].SampleCount : 1.0;
			OutRawSample[0].a = Sample[1].SampleCount;
		}
	}
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_AO_HISTORY)
	{
		// Outputs number of ray miss in red to be compatible as a SSAO output.
		OutRawSample[0].r = Sample[0].SampleCount > 0 ? Sample[0].MissCount / Sample[0].SampleCount : 1.0;
		OutRawSample[0].g = Sample[0].SampleCount;
	}
	#endif
	#if COMPILE_SIGNAL_COLOR
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_DIFFUSE_INDIRECT_AND_AO_RECONSTRUCTION)
	{
		float NormalizationFactor = SafeRcp(Sample[0].SampleCount);

		OutRawSample[0] = ClampColorForEncoding(Sample[0].SceneColor * NormalizationFactor);
		OutRawSample[1].r = Sample[0].SampleCount;
		OutBufferCount = 2;
	}
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_DIFFUSE_INDIRECT_AND_AO_HISTORY)
	{
		float NormalizationFactor = SafeRcp(Sample[0].SampleCount);

		OutRawSample[0] = ClampColorForEncoding(Sample[0].SceneColor * NormalizationFactor);
		OutRawSample[1].r = Sample[0].SampleCount;
		OutBufferCount = 2;

		// Temporal analysis.
		#if SIGNAL_ARRAY_SIZE >= 3
		if (MultiplexCount == 3)
		{
			OutRawSample[1].g = Sample[1].SceneColor.x * NormalizationFactor;
			OutRawSample[1].b = Sample[2].SceneColor.x * NormalizationFactor;
		}
		#endif
	}
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_SSGI_HISTORY_R11G11B10)
	{
		float NormalizationFactor = SafeRcp(Sample[0].SampleCount);

		OutRawSample[0].rgb = ClampColorForEncoding(Sample[0].SceneColor * NormalizationFactor).rgb;
		OutRawSample[1].g = saturate(Sample[0].SampleCount * rcp(64.0));
		OutRawSample[1].r = Sample[0].MissCount * NormalizationFactor;
		OutBufferCount = 2;
	}
	#endif
} // EncodeMultiplexedSignals()
#elif CONFIG_SIGNAL_OUTPUT_TEXTURE_TYPE == SIGNAL_TEXTURE_TYPE_UINT2
{
	// Init all raw samples.
	UNROLL_N(MAX_MULTIPLEXED_TEXTURES)
	for (uint i = 0; i < MAX_MULTIPLEXED_TEXTURES; i++)
		OutRawSample[i] = 0;

	// Number of buffer the signal get encoded onto <= MAX_MULTIPLEXED_TEXTURES.
	OutBufferCount = 1;

	#if COMPILE_SIGNAL_COLOR_SH
	if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_DIFFUSE_INDIRECT_HARMONIC)
	{
		const uint EncodeOptions = (CONFIG_ENCODING_CLAMP_COLOR ? SSD_ENCODE_CLAMP_COLOR : 0) | SSD_ENCODE_NORMALIZE;

		EncodeDiffuseSphericalHarmonicTexel(
			Sample[0].SampleCount,
			Sample[0].MissCount,
			Sample[0].ColorSH,
			EncodeOptions,
			/* out */ OutRawSample);

		OutBufferCount = 4;
	}
	#endif
} // EncodeMultiplexedSignals()
#else
	#error Unimplemented.
#endif


/** Sample the raw of multiple input signals that have been multiplexed. */
FSSDCompressedMultiplexedSample SampleCompressedMultiplexedSignals(
	FSSDTexture2D SignalBuffer0, FSSDTexture2D SignalBuffer1, FSSDTexture2D SignalBuffer2, FSSDTexture2D SignalBuffer3,
	SamplerState Sampler, float2 UV, float Level, uint2 PixelCoord)
{
	FSSDCompressedMultiplexedSample CompressedSample;

	// Isolate the texture fetches to force lattency hiding, to outsmart compilers that tries to
	// discard some of the texture fetches for instance when SampleCount == 0 in another texture.
	ISOLATE
	{
		#if CONFIG_SIGNAL_INPUT_TEXTURE_TYPE == SIGNAL_TEXTURE_TYPE_FLOAT4
		{
			CompressedSample.VGPRArray[0] = SignalBuffer0.SampleLevel(Sampler, UV, Level);
			CompressedSample.VGPRArray[1] = SignalBuffer1.SampleLevel(Sampler, UV, Level);
			CompressedSample.VGPRArray[2] = SignalBuffer2.SampleLevel(Sampler, UV, Level);
			CompressedSample.VGPRArray[3] = SignalBuffer3.SampleLevel(Sampler, UV, Level);
		}
		#elif CONFIG_SIGNAL_INPUT_TEXTURE_TYPE >= SIGNAL_TEXTURE_TYPE_UINT1 && CONFIG_SIGNAL_INPUT_TEXTURE_TYPE <= SIGNAL_TEXTURE_TYPE_UINT4
		{
			// TODO(Denoiser): Exposed the int3 instead as function parameter.
			int3 Coord = int3(PixelCoord >> uint(Level), int(Level));
			CompressedSample.VGPRArray[0] = SignalBuffer0.Load(Coord);
			CompressedSample.VGPRArray[1] = SignalBuffer1.Load(Coord);
			CompressedSample.VGPRArray[2] = SignalBuffer2.Load(Coord);
			CompressedSample.VGPRArray[3] = SignalBuffer3.Load(Coord);
		}
		#else
			#error Unimplemented.
		#endif
	}

	return CompressedSample;
}


/** Sample multiple input signals that have been multiplexed. */
FSSDSignalArray SampleMultiplexedSignals(
	FSSDTexture2D SignalBuffer0, FSSDTexture2D SignalBuffer1, FSSDTexture2D SignalBuffer2, FSSDTexture2D SignalBuffer3,
	SamplerState Sampler,
	const uint SignalBufferLayout, const uint MultiplexedSampleId,
	const bool bNormalizeSample,
	float2 UV, float Level = 0)
{
	uint2 PixelCoord = BufferUVToBufferPixelCoord(UV);

	FSSDCompressedMultiplexedSample CompressedSample = SampleCompressedMultiplexedSignals(
		SignalBuffer0, SignalBuffer1, SignalBuffer2, SignalBuffer3,
		Sampler, UV, Level, PixelCoord);

	return DecodeMultiplexedSignals(
		SignalBufferLayout, MultiplexedSampleId, bNormalizeSample, CompressedSample);
}


/** Outputs multiplexed signal. */
void OutputMultiplexedSignal(
	FSSDRWTexture2D OutputSignalBuffer0,
	FSSDRWTexture2D OutputSignalBuffer1,
	FSSDRWTexture2D OutputSignalBuffer2,
	FSSDRWTexture2D OutputSignalBuffer3,
	const uint SignalBufferLayout, const uint MultiplexCount,
	const uint2 PixelPosition, FSSDSignalSample MultiplexedSamples[SIGNAL_ARRAY_SIZE])
{
	// Encode the output signal.
	FSSDOutputRawSample RawSample[MAX_MULTIPLEXED_TEXTURES];
	uint BufferCount;
	EncodeMultiplexedSignals(
		SignalBufferLayout, MultiplexCount,
		MultiplexedSamples,
		/* out */ RawSample, /* out */ BufferCount);

	// Output the raw encoded sample according to number of RT they requires.
	if (BufferCount >= 1)
		OutputSignalBuffer0[PixelPosition] = RawSample[0];
	if (BufferCount >= 2)
		OutputSignalBuffer1[PixelPosition] = RawSample[1];
	if (BufferCount >= 3)
		OutputSignalBuffer2[PixelPosition] = RawSample[2];
	if (BufferCount >= 4)
		OutputSignalBuffer3[PixelPosition] = RawSample[3];
}
