// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

#pragma once

#include "SSDCommon.ush"


//------------------------------------------------------- STRUCTURE

/** Generic data structure to manipulate any kind of signal. */
struct FSSFSignalSample
{
	// Number of sample accumulated.
	float AccumulatedSampleCount;

	// Scene color and alpha.
	float4 SceneColor;

	// Number of ray that did not find any intersections.
	float LeavingRayCount;

	// Number of ray that are uncertain due to occlusion with higher frequency.
	float UncertainRayCount;

	// Hit distance of a this sample, valid only if AccumulatedSampleCount == 1.
	float PenumbraClosestHit;
	
	// Blur radius allowed for this sample, valid only if AccumulatedSampleCount == 1.
	float WorldBluringRadius;
};

/** Array of signal samples. Technically should be a typedef, but there is a bug in HLSL with the out operator of an array. */
struct FSSDSignalArray
{
	FSSFSignalSample Array[MAX_SIGNAL_MULTIPLEXING];
};


FSSFSignalSample CreateSignalSampleFromScalarValue(float Scalar)
{
	FSSFSignalSample OutSample;
	OutSample.SceneColor = Scalar;
	OutSample.AccumulatedSampleCount = Scalar;
	OutSample.LeavingRayCount = Scalar;
	OutSample.PenumbraClosestHit = Scalar;
	OutSample.UncertainRayCount = Scalar;
	OutSample.WorldBluringRadius = Scalar;
	return OutSample;
}

FSSFSignalSample CreateSignalSample()
{
	return CreateSignalSampleFromScalarValue(0.0);
}

FSSDSignalArray CreateSignalArrayFromScalarValue(float Scalar)
{
	FSSDSignalArray OutSamples;
	FIX_UNROLL(MAX_SIGNAL_MULTIPLEXING)
	for (uint BatchedSignalId = 0; BatchedSignalId < MAX_SIGNAL_MULTIPLEXING; BatchedSignalId++)
	{
		OutSamples.Array[BatchedSignalId] = CreateSignalSampleFromScalarValue(Scalar);
	}
	return OutSamples;
}


//------------------------------------------------------- SIGNAL OPERATORS

FSSFSignalSample Mul(FSSFSignalSample Sample, float Scalar)
{
	FSSFSignalSample OutSample;
	OutSample.SceneColor             = Sample.SceneColor * Scalar;
	OutSample.AccumulatedSampleCount = Sample.AccumulatedSampleCount * Scalar;
	OutSample.LeavingRayCount        = Sample.LeavingRayCount * Scalar;
	OutSample.PenumbraClosestHit     = Sample.PenumbraClosestHit * Scalar;
	OutSample.UncertainRayCount      = Sample.UncertainRayCount * Scalar;
	OutSample.WorldBluringRadius     = Sample.WorldBluringRadius * Scalar;
	return OutSample;
}

FSSFSignalSample Add(FSSFSignalSample SampleA, FSSFSignalSample SampleB)
{
	SampleA.SceneColor             += SampleB.SceneColor;
	SampleA.AccumulatedSampleCount += SampleB.AccumulatedSampleCount;
	SampleA.LeavingRayCount        += SampleB.LeavingRayCount;
	SampleA.PenumbraClosestHit     += SampleB.PenumbraClosestHit;
	SampleA.UncertainRayCount      += SampleB.UncertainRayCount;
	SampleA.WorldBluringRadius     += SampleB.WorldBluringRadius;
	return SampleA;
}

FSSFSignalSample Minus(FSSFSignalSample Sample)
{
	Sample.SceneColor             = -Sample.SceneColor;
	Sample.AccumulatedSampleCount = -Sample.AccumulatedSampleCount;
	Sample.LeavingRayCount        = -Sample.LeavingRayCount;
	Sample.PenumbraClosestHit     = -Sample.PenumbraClosestHit;
	Sample.UncertainRayCount      = -Sample.UncertainRayCount;
	Sample.WorldBluringRadius     = -Sample.WorldBluringRadius;
	return Sample;
}

FSSFSignalSample Subtract(FSSFSignalSample SampleA, FSSFSignalSample SampleB)
{
	return Add(SampleA, Minus(SampleB));
}

FSSFSignalSample Abs(FSSFSignalSample Sample)
{
	Sample.SceneColor             = abs(Sample.SceneColor);
	Sample.AccumulatedSampleCount = abs(Sample.AccumulatedSampleCount);
	Sample.LeavingRayCount        = abs(Sample.LeavingRayCount);
	Sample.PenumbraClosestHit     = abs(Sample.PenumbraClosestHit);
	Sample.UncertainRayCount      = abs(Sample.UncertainRayCount);
	Sample.WorldBluringRadius     = abs(Sample.WorldBluringRadius);
	return Sample;
}

FSSFSignalSample Sqrt(FSSFSignalSample Sample)
{
	Sample.SceneColor             = sqrt(Sample.SceneColor);
	Sample.AccumulatedSampleCount = sqrt(Sample.AccumulatedSampleCount);
	Sample.LeavingRayCount        = sqrt(Sample.LeavingRayCount);
	Sample.PenumbraClosestHit     = sqrt(Sample.PenumbraClosestHit);
	Sample.UncertainRayCount      = sqrt(Sample.UncertainRayCount);
	Sample.WorldBluringRadius     = sqrt(Sample.WorldBluringRadius);
	return Sample;
}

FSSFSignalSample Power(FSSFSignalSample Sample, float Exponent)
{
	Sample.SceneColor.r           = pow(Sample.SceneColor.r, Exponent);
	Sample.SceneColor.g           = pow(Sample.SceneColor.g, Exponent);
	Sample.SceneColor.b           = pow(Sample.SceneColor.b, Exponent);
	Sample.SceneColor.a           = pow(Sample.SceneColor.a, Exponent);
	Sample.AccumulatedSampleCount = pow(Sample.AccumulatedSampleCount, Exponent);
	Sample.LeavingRayCount        = pow(Sample.LeavingRayCount, Exponent);
	Sample.PenumbraClosestHit     = pow(Sample.PenumbraClosestHit, Exponent);
	Sample.UncertainRayCount      = pow(Sample.UncertainRayCount, Exponent);
	Sample.WorldBluringRadius     = pow(Sample.WorldBluringRadius, Exponent);
	return Sample;
}

FSSFSignalSample Min(FSSFSignalSample SampleA, FSSFSignalSample SampleB)
{
	FSSFSignalSample OutSample;
	OutSample.SceneColor = min(SampleA.SceneColor, SampleB.SceneColor);
	OutSample.AccumulatedSampleCount = min(SampleA.AccumulatedSampleCount, SampleB.AccumulatedSampleCount);
	OutSample.LeavingRayCount = min(SampleA.LeavingRayCount, SampleB.LeavingRayCount);
	OutSample.PenumbraClosestHit = min(SampleA.PenumbraClosestHit, SampleB.PenumbraClosestHit);
	OutSample.UncertainRayCount = min(SampleA.UncertainRayCount, SampleB.UncertainRayCount);
	OutSample.WorldBluringRadius = min(SampleA.WorldBluringRadius, SampleB.WorldBluringRadius);
	return OutSample;
}

FSSFSignalSample Max(FSSFSignalSample SampleA, FSSFSignalSample SampleB)
{
	FSSFSignalSample OutSample;
	OutSample.SceneColor = max(SampleA.SceneColor, SampleB.SceneColor);
	OutSample.AccumulatedSampleCount = max(SampleA.AccumulatedSampleCount, SampleB.AccumulatedSampleCount);
	OutSample.LeavingRayCount = max(SampleA.LeavingRayCount, SampleB.LeavingRayCount);
	OutSample.PenumbraClosestHit = max(SampleA.PenumbraClosestHit, SampleB.PenumbraClosestHit);
	OutSample.UncertainRayCount = max(SampleA.UncertainRayCount, SampleB.UncertainRayCount);
	OutSample.WorldBluringRadius = max(SampleA.WorldBluringRadius, SampleB.WorldBluringRadius);
	return OutSample;
}

FSSFSignalSample Clamp(FSSFSignalSample Sample, FSSFSignalSample SampleMin, FSSFSignalSample SampleMax)
{
	FSSFSignalSample OutSample;
	OutSample.SceneColor = clamp(Sample.SceneColor, SampleMin.SceneColor, SampleMax.SceneColor);
	OutSample.AccumulatedSampleCount = clamp(Sample.AccumulatedSampleCount, SampleMin.AccumulatedSampleCount, SampleMax.AccumulatedSampleCount);
	OutSample.LeavingRayCount = clamp(Sample.LeavingRayCount, SampleMin.LeavingRayCount, SampleMax.LeavingRayCount);
	OutSample.PenumbraClosestHit = clamp(Sample.PenumbraClosestHit, SampleMin.PenumbraClosestHit, SampleMax.PenumbraClosestHit);
	OutSample.UncertainRayCount = clamp(Sample.UncertainRayCount, SampleMin.UncertainRayCount, SampleMax.UncertainRayCount);
	OutSample.WorldBluringRadius = clamp(Sample.WorldBluringRadius, SampleMin.WorldBluringRadius, SampleMax.WorldBluringRadius);
	return OutSample;
}

FSSFSignalSample Lerp(FSSFSignalSample Sample0, FSSFSignalSample Sample1, float Interp)
{
	return Add(Sample0, Mul(Subtract(Sample1, Sample0), Interp));
}

/** Normalize the signal sample to one. */
FSSFSignalSample NormalizeToOneSample(FSSFSignalSample Sample)
{
	FSSFSignalSample OutSample = Mul(Sample, Sample.AccumulatedSampleCount > 0 ? rcp(Sample.AccumulatedSampleCount) : 0);
	OutSample.AccumulatedSampleCount = Sample.AccumulatedSampleCount > 0 ? 1 : 0;
	return OutSample;
}


//------------------------------------------------------- INPUT/OUTPUT

/** Decode input signal sample. */
void DecodeMultiplexedSignals(
	const uint SignalBufferLayout,
	const uint MultiplexedSampleId,
	const bool bNormalizeSample,
	float4 RawSample[MAX_MULTIPLEXED_TEXTURES],
	out FSSDSignalArray OutSamples)
{
	OutSamples = CreateSignalArrayFromScalarValue(0.0);

	if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_UNINITIALIZED)
	{
		// trash out the output sample to identify quickly a miss configured buffer layout.
		OutSamples = CreateSignalArrayFromScalarValue(-1.#INF);
	}
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_PENUMBRA_INPUT_1SPP)
	{
		FIX_UNROLL(MAX_SIGNAL_BATCH_SIZE)
		for (uint BatchSignalId = 0; BatchSignalId < MAX_SIGNAL_BATCH_SIZE; BatchSignalId++)
		{
			uint MultiplexId = BatchSignalId;
			OutSamples.Array[MultiplexId].AccumulatedSampleCount = (RawSample[MultiplexId].r == -2.0 ? 0.0 : 1.0);
			OutSamples.Array[MultiplexId].LeavingRayCount = OutSamples.Array[MultiplexId].AccumulatedSampleCount * (RawSample[MultiplexId].r > 0.0 ? 0.0 : 1.0);
			OutSamples.Array[MultiplexId].PenumbraClosestHit = OutSamples.Array[MultiplexId].AccumulatedSampleCount * (RawSample[MultiplexId].r == -1 ? 1000000 : RawSample[MultiplexId].r);
		}
	}
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_PENUMBRA_INPUT_NSPP)
	{
		FIX_UNROLL(MAX_SIGNAL_BATCH_SIZE)
		for (uint BatchSignalId = 0; BatchSignalId < MAX_SIGNAL_BATCH_SIZE; BatchSignalId++)
		{
			uint MultiplexId = BatchSignalId;
			// TODO: feed the actual number of sample.
			OutSamples.Array[MultiplexId].AccumulatedSampleCount = (RawSample[MultiplexId].g == -2.0 ? 0.0 : 1.0);
			OutSamples.Array[MultiplexId].LeavingRayCount = OutSamples.Array[MultiplexId].AccumulatedSampleCount * RawSample[MultiplexId].r;
			OutSamples.Array[MultiplexId].PenumbraClosestHit = OutSamples.Array[MultiplexId].AccumulatedSampleCount * (RawSample[MultiplexId].g == -1 ? 1000000 : RawSample[MultiplexId].g);
		}
	}
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_PENUMBRA_INJESTION_1SPP)
	{
		FIX_UNROLL(MAX_SIGNAL_BATCH_SIZE)
		for (uint BatchSignalId = 0; BatchSignalId < MAX_SIGNAL_BATCH_SIZE; BatchSignalId++)
		{
			uint MultiplexId = BatchSignalId;
			float EncodedWorldBluringRadius = RawSample[MultiplexId / 4][MultiplexId % 4];
			OutSamples.Array[MultiplexId].AccumulatedSampleCount = (EncodedWorldBluringRadius == -2.0 ? 0.0 : 1.0);
			OutSamples.Array[MultiplexId].LeavingRayCount = OutSamples.Array[MultiplexId].AccumulatedSampleCount * (EncodedWorldBluringRadius > 0.0 ? 0.0 : 1.0);
			OutSamples.Array[MultiplexId].WorldBluringRadius = OutSamples.Array[MultiplexId].AccumulatedSampleCount * (EncodedWorldBluringRadius == -1 ? WORLD_RADIUS_MISS : EncodedWorldBluringRadius);
		}
	}
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_PENUMBRA_INJESTION_NSPP)
	{
		FIX_UNROLL(MAX_SIGNAL_BATCH_SIZE)
		for (uint BatchSignalId = 0; BatchSignalId < MAX_SIGNAL_BATCH_SIZE; BatchSignalId++)
		{
			uint MultiplexId = BatchSignalId;
			float2 Channels = float2(RawSample[MultiplexId / 2][2 * (MultiplexId % 2)], RawSample[MultiplexId / 2][2 * (MultiplexId % 2) + 1]);
	
			// TODO: feed the actual number of sample.
			OutSamples.Array[MultiplexId].AccumulatedSampleCount = (Channels.g == -2.0 ? 0.0 : 1.0);
			OutSamples.Array[MultiplexId].LeavingRayCount = OutSamples.Array[MultiplexId].AccumulatedSampleCount * Channels.r;
			OutSamples.Array[MultiplexId].WorldBluringRadius = OutSamples.Array[MultiplexId].AccumulatedSampleCount * (Channels.g == -1 ? WORLD_RADIUS_MISS : Channels.g);
		}
	}
	//else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_PENUMBRA_RECONSTRUCTION)
	//{
	//	FIX_UNROLL(MAX_SIGNAL_MULTIPLEXING)
	//	for (uint MultiplexId = 0; MultiplexId < MAX_SIGNAL_MULTIPLEXING; MultiplexId++)
	//	{
	//		float2 Channels = float2(RawSample[MultiplexId / 2][2 * (MultiplexId % 2)], RawSample[MultiplexId / 2][2 * (MultiplexId % 2) + 1]);
	//
	//		if (bNormalizeSample)
	//		{
	//			OutSamples.Array[MultiplexId].AccumulatedSampleCount = Channels.g > 0 ? 1 : 0;
	//			OutSamples.Array[MultiplexId].LeavingRayCount = Channels.g > 0 ? Channels.r : 0;
	//		}
	//		else
	//		{
	//			OutSamples.Array[MultiplexId].AccumulatedSampleCount = Channels.g;
	//			OutSamples.Array[MultiplexId].LeavingRayCount = Channels.r * Channels.g;
	//		}
	//	}
	//}
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_PENUMBRA_HISTORY || SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_PENUMBRA_RECONSTRUCTION)
	{
		FIX_UNROLL(MAX_SIGNAL_BATCH_SIZE)
		for (uint MultiplexId = 0; MultiplexId < MAX_SIGNAL_BATCH_SIZE; MultiplexId++)
		{
			float3 Channels = RawSample[MultiplexId].xyz;
			
			float SampleCount = bNormalizeSample ? (Channels.g > 0 ? 1 : 0) : (Channels.g);

			OutSamples.Array[MultiplexId].LeavingRayCount = Channels.r * SampleCount;
			OutSamples.Array[MultiplexId].AccumulatedSampleCount = SampleCount;
			OutSamples.Array[MultiplexId].WorldBluringRadius = (Channels.b == -1 ? WORLD_RADIUS_MISS : Channels.b) * SampleCount;
		}
	}
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_PENUMBRA_REJECTION)
	{
		FIX_UNROLL(MAX_SIGNAL_BATCH_SIZE)
		for (uint BatchSignalId = 0; BatchSignalId < MAX_SIGNAL_BATCH_SIZE; BatchSignalId++)
		{
			uint MultiplexId = BatchSignalId * 2;
			float4 Channels = RawSample[BatchSignalId];
			float SampleCount = Channels.b;

			OutSamples.Array[MultiplexId + 0].AccumulatedSampleCount = SampleCount;
			OutSamples.Array[MultiplexId + 0].LeavingRayCount = Channels.r * SampleCount;
			OutSamples.Array[MultiplexId + 0].WorldBluringRadius = (Channels.a == -1 ? WORLD_RADIUS_MISS : Channels.a) * SampleCount;
			
			OutSamples.Array[MultiplexId + 1].AccumulatedSampleCount = SampleCount;
			OutSamples.Array[MultiplexId + 1].LeavingRayCount = Channels.g * SampleCount;
		}
	}
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_REFLECTIONS_INPUT)
	{
		OutSamples.Array[0].AccumulatedSampleCount = RawSample[1].r == -2 ? 0 : 1;
		OutSamples.Array[0].LeavingRayCount = OutSamples.Array[0].AccumulatedSampleCount * (1 - RawSample[0].a);
		OutSamples.Array[0].SceneColor = RawSample[0];

		// max() because ray hit distance is < 0 when miss / not ray has been shot.
		//OutSamples.Array[0].PenumbraClosestHit = RawSample[1].r * OutSamples.Array[0].AccumulatedSampleCount;
		OutSamples.Array[0].PenumbraClosestHit = ((RawSample[1].r == -1.0) ? 1.0e20 : RawSample[1].r) * OutSamples.Array[0].AccumulatedSampleCount;
	}
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_REFLECTIONS_REJECTION)
	{
		if (bNormalizeSample)
		{
			OutSamples.Array[0].AccumulatedSampleCount = RawSample[1].r > 0 ? 1 : 0;
		}
		else
		{
			OutSamples.Array[0].AccumulatedSampleCount = RawSample[1].r;
		}
		
		OutSamples.Array[0].LeavingRayCount = OutSamples.Array[0].AccumulatedSampleCount * (1 - RawSample[0].a);
		OutSamples.Array[0].SceneColor = OutSamples.Array[0].AccumulatedSampleCount * RawSample[0];

		OutSamples.Array[1].AccumulatedSampleCount = RawSample[1].g;
		OutSamples.Array[1].LeavingRayCount = OutSamples.Array[0].AccumulatedSampleCount * (1 - RawSample[2].a);
		OutSamples.Array[1].SceneColor = OutSamples.Array[0].AccumulatedSampleCount * RawSample[2];
	}
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_REFLECTIONS_HISTORY)
	{
		if (bNormalizeSample)
		{
			OutSamples.Array[0].AccumulatedSampleCount = RawSample[1].r > 0 ? 1 : 0;
		}
		else
		{
			OutSamples.Array[0].AccumulatedSampleCount = RawSample[1].r;
		}
		
		OutSamples.Array[0].LeavingRayCount = OutSamples.Array[0].AccumulatedSampleCount * (1 - RawSample[0].a);
		OutSamples.Array[0].SceneColor = OutSamples.Array[0].AccumulatedSampleCount * RawSample[0];

		OutSamples.Array[1].AccumulatedSampleCount = OutSamples.Array[0].AccumulatedSampleCount;
		OutSamples.Array[1].SceneColor.x = OutSamples.Array[1].AccumulatedSampleCount * RawSample[1].g;
		
		OutSamples.Array[2].AccumulatedSampleCount = OutSamples.Array[0].AccumulatedSampleCount;
		OutSamples.Array[2].SceneColor.x = OutSamples.Array[2].AccumulatedSampleCount * RawSample[1].b;
	}
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_AO_INPUT)
	{
		OutSamples.Array[0].AccumulatedSampleCount = RawSample[1].r < 0 ? 0 : 1;
		OutSamples.Array[0].LeavingRayCount = OutSamples.Array[0].AccumulatedSampleCount * RawSample[0].r;
		OutSamples.Array[0].PenumbraClosestHit = OutSamples.Array[0].AccumulatedSampleCount * RawSample[1].r;
	}
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_AO_HISTORY)
	{
		if (bNormalizeSample)
		{
			OutSamples.Array[0].AccumulatedSampleCount = RawSample[0].g > 0 ? 1 : 0;
			OutSamples.Array[0].LeavingRayCount = RawSample[0].g > 0 ? RawSample[0].r : 0;
		}
		else
		{
			OutSamples.Array[0].AccumulatedSampleCount = RawSample[0].g;
			OutSamples.Array[0].LeavingRayCount = RawSample[0].g * RawSample[0].r;
		}
	}
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_GI_AND_AO_INPUT)
	{
		OutSamples.Array[0].AccumulatedSampleCount = RawSample[1].g;
		OutSamples.Array[0].LeavingRayCount = OutSamples.Array[0].AccumulatedSampleCount * (1 - RawSample[0].a);
		OutSamples.Array[0].SceneColor = OutSamples.Array[0].AccumulatedSampleCount * RawSample[0];

		// max() because ray hit distance is < 0 when miss / not ray has been shot.
		OutSamples.Array[0].PenumbraClosestHit = RawSample[1].r * OutSamples.Array[0].AccumulatedSampleCount;
		OutSamples.Array[0].PenumbraClosestHit = ((RawSample[1].r == -1.0) ? 1.0e20 : RawSample[1].r) * OutSamples.Array[0].AccumulatedSampleCount;
	}
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_GI_AND_AO_RECONSTRUCTION)
	{
		if (bNormalizeSample)
		{
			OutSamples.Array[0].AccumulatedSampleCount = RawSample[1].r > 0 ? 1 : 0;
		}
		else
		{
			OutSamples.Array[0].AccumulatedSampleCount = RawSample[1].r;
		}
		
		OutSamples.Array[0].LeavingRayCount = OutSamples.Array[0].AccumulatedSampleCount * (1 - RawSample[0].a);
		OutSamples.Array[0].SceneColor = OutSamples.Array[0].AccumulatedSampleCount * RawSample[0];
	}
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_GI_AND_AO_HISTORY)
	{
		if (bNormalizeSample)
		{
			OutSamples.Array[0].AccumulatedSampleCount = RawSample[1].r > 0 ? 1 : 0;
		}
		else
		{
			OutSamples.Array[0].AccumulatedSampleCount = RawSample[1].r;
		}
		
		OutSamples.Array[0].LeavingRayCount = OutSamples.Array[0].AccumulatedSampleCount * (1 - RawSample[0].a);
		OutSamples.Array[0].SceneColor = OutSamples.Array[0].AccumulatedSampleCount * RawSample[0];
		
		OutSamples.Array[1].AccumulatedSampleCount = OutSamples.Array[0].AccumulatedSampleCount;
		OutSamples.Array[1].SceneColor.x = OutSamples.Array[1].AccumulatedSampleCount * RawSample[1].g;
		
		OutSamples.Array[2].AccumulatedSampleCount = OutSamples.Array[0].AccumulatedSampleCount;
		OutSamples.Array[2].SceneColor.x = OutSamples.Array[2].AccumulatedSampleCount * RawSample[1].b;
	}
} // DecodeMultiplexedSignals()

/** Encode output signal sample. */
void EncodeMultiplexedSignals(
	const uint SignalBufferLayout, const uint MultiplexCount,
	FSSFSignalSample Sample[MAX_SIGNAL_MULTIPLEXING],
	out float4 OutRawSample[MAX_MULTIPLEXED_TEXTURES],
	out uint OutBufferCount)
{
	// Init all raw samples.
	FIX_UNROLL(MAX_MULTIPLEXED_TEXTURES)
	for (uint i = 0; i < MAX_MULTIPLEXED_TEXTURES; i++)
		OutRawSample[i] = 0;

	// Number of buffer the signal get encoded onto <= MAX_MULTIPLEXED_TEXTURES.
	OutBufferCount = 1;

	if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_PENUMBRA_INJESTION_1SPP)
	{
		UNROLL
		for (uint MultiplexId = 0; MultiplexId < MultiplexCount; MultiplexId++)
		{
			float EncodedChannel = Sample[MultiplexId].WorldBluringRadius;
			if (Sample[MultiplexId].AccumulatedSampleCount == 0)
			{
				EncodedChannel = -2;
			}
			else if (Sample[MultiplexId].WorldBluringRadius == WORLD_RADIUS_MISS)
			{
				EncodedChannel = -1;
			}

			OutRawSample[MultiplexId / 4][MultiplexId % 4] = EncodedChannel;
		}
		OutBufferCount = (MultiplexCount + 3) / 4;
	}
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_PENUMBRA_INJESTION_NSPP)
	{
		UNROLL
		for (uint MultiplexId = 0; MultiplexId < MultiplexCount; MultiplexId++)
		{
			float2 EncodedChannels = float2(
				Sample[MultiplexId].LeavingRayCount,
				Sample[MultiplexId].WorldBluringRadius) * SafeRcp(Sample[MultiplexId].AccumulatedSampleCount);
			
			if (Sample[MultiplexId].AccumulatedSampleCount == 0)
			{
				EncodedChannels.y = -2;
			}
			else if (Sample[MultiplexId].WorldBluringRadius == WORLD_RADIUS_MISS)
			{
				EncodedChannels.y = -1;
			}

			if (MultiplexId % 2)
				OutRawSample[MultiplexId / 2].zw = EncodedChannels;
			else
				OutRawSample[MultiplexId / 2].xy = EncodedChannels;
		}
		OutBufferCount = (MultiplexCount + 1) / 2;
	}
	//else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_PENUMBRA_RECONSTRUCTION)
	//{
	//	UNROLL
	//	for (uint MultiplexId = 0; MultiplexId < MultiplexCount; MultiplexId++)
	//	{
	//		float2 EncodedChannels = float2(
	//			Sample[MultiplexId].LeavingRayCount * SafeRcp(Sample[MultiplexId].AccumulatedSampleCount),
	//			Sample[MultiplexId].AccumulatedSampleCount);
	//
	//		if (MultiplexId % 2)
	//			OutRawSample[MultiplexId / 2].zw = EncodedChannels;
	//		else
	//			OutRawSample[MultiplexId / 2].xy = EncodedChannels;
	//	}
	//	OutBufferCount = (MultiplexCount + 1) / 2;
	//}
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_PENUMBRA_HISTORY || SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_PENUMBRA_RECONSTRUCTION)
	{
		UNROLL
		for (uint MultiplexId = 0; MultiplexId < MultiplexCount; MultiplexId++)
		{
			float NormalizationFactor = SafeRcp(Sample[MultiplexId].AccumulatedSampleCount);

			float NormalizedWorldBluringRadius = Sample[MultiplexId].WorldBluringRadius * NormalizationFactor;

			OutRawSample[MultiplexId] = float4(
				Sample[MultiplexId].LeavingRayCount * NormalizationFactor,
				Sample[MultiplexId].AccumulatedSampleCount,
				NormalizedWorldBluringRadius == WORLD_RADIUS_MISS ? -1 : NormalizedWorldBluringRadius,
				0);
		}
		OutBufferCount = MultiplexCount;
	}
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_PENUMBRA_REJECTION)
	{
		const uint BatchSignalCount = MultiplexCount / 2;
		OutBufferCount = BatchSignalCount;

		UNROLL
		for (uint BatchSignalId = 0; BatchSignalId < BatchSignalCount; BatchSignalId++)
		{
			uint MultiplexId = BatchSignalId * 2;

			float NormalizationFactor = SafeRcp(Sample[MultiplexId + 0].AccumulatedSampleCount);

			float NormalizedWorldBluringRadius = Sample[MultiplexId + 0].WorldBluringRadius * NormalizationFactor;

			// Samples are normalised when doing history preconvolution, so the number of is either 0 or 1 on both momments. Therefore
			// Sample[MultiplexId + 0].AccumulatedSampleCount == Sample[MultiplexId + 1].AccumulatedSampleCount.
			OutRawSample[BatchSignalId] = float4(
				Sample[MultiplexId + 0].LeavingRayCount * NormalizationFactor,
				Sample[MultiplexId + 1].LeavingRayCount * NormalizationFactor,
				Sample[MultiplexId + 0].AccumulatedSampleCount,
				NormalizedWorldBluringRadius == WORLD_RADIUS_MISS ? -1 : NormalizedWorldBluringRadius);
		}
	}
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_REFLECTIONS_REJECTION)
	{
		// Outputs scene color to be compatible with a SSR output.
		OutRawSample[0] = Sample[0].SceneColor * (Sample[0].AccumulatedSampleCount > 0 ? rcp(Sample[0].AccumulatedSampleCount) : 0);
		OutRawSample[1].r = Sample[0].AccumulatedSampleCount;
		OutBufferCount = 2;

		if (MultiplexCount == 2)
		{
			OutRawSample[2] = Sample[1].SceneColor * (Sample[1].AccumulatedSampleCount > 0 ? rcp(Sample[1].AccumulatedSampleCount) : 0);
			OutRawSample[1].g = Sample[1].AccumulatedSampleCount;
			OutBufferCount = 3;
		}
	}
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_REFLECTIONS_HISTORY)
	{
		float NormalizationFactor = SafeRcp(Sample[0].AccumulatedSampleCount);

		// Outputs scene color to be compatible with a SSR output.
		OutRawSample[0] = Sample[0].SceneColor * NormalizationFactor;
		OutRawSample[1].r = Sample[0].AccumulatedSampleCount;
		OutBufferCount = 2;

		if (MultiplexCount == 3)
		{
			OutRawSample[1].g = Sample[1].SceneColor.x * NormalizationFactor;
			OutRawSample[1].b = Sample[2].SceneColor.x * NormalizationFactor;
			OutBufferCount = 3;
		}
	}
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_AO_HISTORY)
	{
		// Outputs number of ray miss in red to be compatible as a SSAO output.
		OutRawSample[0].r = Sample[0].AccumulatedSampleCount > 0 ? Sample[0].LeavingRayCount / Sample[0].AccumulatedSampleCount : 1.0;
		OutRawSample[0].g = Sample[0].AccumulatedSampleCount;
	}
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_GI_AND_AO_RECONSTRUCTION)
	{
		float NormalizationFactor = SafeRcp(Sample[0].AccumulatedSampleCount);

		OutRawSample[0] = Sample[0].SceneColor * NormalizationFactor;
		OutRawSample[1].r = Sample[0].AccumulatedSampleCount;
		OutBufferCount = 2;
	}
	else if (SignalBufferLayout == SIGNAL_BUFFER_LAYOUT_GI_AND_AO_HISTORY)
	{
		float NormalizationFactor = SafeRcp(Sample[0].AccumulatedSampleCount);

		OutRawSample[0] = Sample[0].SceneColor * NormalizationFactor;
		OutRawSample[1].r = Sample[0].AccumulatedSampleCount;
		OutBufferCount = 2;

		if (MultiplexCount == 3)
		{
			OutRawSample[1].g = Sample[1].SceneColor.x * NormalizationFactor;
			OutRawSample[1].b = Sample[2].SceneColor.x * NormalizationFactor;
		}
	}
} // EncodeMultiplexedSignals()

/** Sample multiple input signals that have been multiplexed. */
FSSDSignalArray SampleMultiplexedSignals(
	Texture2D SignalBuffer0, Texture2D SignalBuffer1, Texture2D SignalBuffer2, Texture2D SignalBuffer3,
	SamplerState Sampler,
	const uint SignalBufferLayout, const uint MultiplexedSampleId,
	const bool bNormalizeSample,
	float2 UV, float Level = 0)
{
	float4 RawSample[MAX_MULTIPLEXED_TEXTURES];
	RawSample[0] = SignalBuffer0.SampleLevel(Sampler, UV, Level);
	RawSample[1] = SignalBuffer1.SampleLevel(Sampler, UV, Level);
	RawSample[2] = SignalBuffer2.SampleLevel(Sampler, UV, Level);
	RawSample[3] = SignalBuffer3.SampleLevel(Sampler, UV, Level);

	FSSDSignalArray MultiplexedSamples;
	DecodeMultiplexedSignals(
		SignalBufferLayout,
		MultiplexedSampleId,
		bNormalizeSample,
		RawSample,
		/* out */ MultiplexedSamples);

	return MultiplexedSamples;
}


/** Outputs multiplexed signal. */
void OutputMultiplexedSignal(
	RWTexture2D<float4> OutputSignalBuffer0,
	RWTexture2D<float4> OutputSignalBuffer1,
	RWTexture2D<float4> OutputSignalBuffer2,
	RWTexture2D<float4> OutputSignalBuffer3,
	const uint SignalBufferLayout, const uint MultiplexCount,
	const uint2 PixelPosition, FSSFSignalSample MultiplexedSamples[MAX_SIGNAL_MULTIPLEXING])
{
	// Encode the output signal.
	float4 RawSample[MAX_MULTIPLEXED_TEXTURES];
	uint BufferCount;
	EncodeMultiplexedSignals(
		SignalBufferLayout, MultiplexCount,
		MultiplexedSamples,
		/* out */ RawSample, /* out */ BufferCount);

	// Output the raw encoded sample according to number of RT they requires.
	if (BufferCount >= 1)
		OutputSignalBuffer0[PixelPosition] = min(RawSample[0], MaxHalfFloat);
	if (BufferCount >= 2)
		OutputSignalBuffer1[PixelPosition] = min(RawSample[1], MaxHalfFloat);
	if (BufferCount >= 3)
		OutputSignalBuffer2[PixelPosition] = min(RawSample[2], MaxHalfFloat);
	if (BufferCount >= 4)
		OutputSignalBuffer3[PixelPosition] = min(RawSample[3], MaxHalfFloat);
}
