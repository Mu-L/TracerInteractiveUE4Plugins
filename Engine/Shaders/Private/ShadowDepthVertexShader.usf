// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	ShadowDepthVertexShader.usf: Vertex shader for writing shadow depth.
=============================================================================*/

// needs to before Common.usf
#define SHADOW_DEPTH_SHADER 1
#define USE_STENCIL_LOD_DITHER	0

#include "Common.ush"

// Reroute SceneTexturesStruct uniform buffer references to the shadow depth pass uniform buffer
#if FEATURE_LEVEL >= FEATURE_LEVEL_SM4
#define PassStruct ShadowDepthPass
#define SceneTexturesStruct ShadowDepthPass.SceneTextures 
#else
#define PassStruct MobileShadowDepthPass
#define SceneTexturesStruct MobileShadowDepthPass.SceneTextures 
#endif

#include "/Engine/Generated/Material.ush"
#include "/Engine/Generated/VertexFactory.ush"
#include "ShadowDepthCommon.ush"

void SetShadowDepthOutputs(float4 WorldPosition, out float4 OutPosition, out float ShadowDepth)
{
	OutPosition = mul(WorldPosition, PassStruct.ProjectionMatrix);

	// Clamp the vertex to the near plane if it is in front of the near plane
	// This has problems if some vertices of a triangle get clamped and others do not, also causes artifacts with non-ortho projections
	if (PassStruct.bClampToNearPlane > 0 && OutPosition.z < 0)
	{
		OutPosition.z = 0.000001f;
		OutPosition.w = 1.0f;
	}

	#if PERSPECTIVE_CORRECT_DEPTH
		ShadowDepth = OutPosition.z;
	#else
		float DepthBias = PassStruct.ShadowParams.x;
		float InvMaxSubjectDepth = PassStruct.ShadowParams.y;

		// Output linear, normalized depth
		ShadowDepth = OutPosition.z * InvMaxSubjectDepth + DepthBias;
		OutPosition.z = ShadowDepth * OutPosition.w;
	#endif
}

#if FEATURE_LEVEL >= FEATURE_LEVEL_SM4 && ONEPASS_POINTLIGHT_SHADOW

// Layer Id per draw call for Vertex-Shader-Layer implementation
#if VERTEXSHADER && USING_VERTEX_SHADER_LAYER
uint LayerId;
#endif

struct FShadowDepthGSToPS
{
#if INTERPOLATE_VF_ATTRIBUTES
	FShadowDepthVSToPS PSInputs;
#endif
	float4 OutPosition : SV_POSITION;

	/** Controls which of the cube map faces to rasterize the primitive to, only the value from the first vertex is used. */
	uint RTIndex : SV_RenderTargetArrayIndex;
};

bool IsTriangleInFrustum(float4 ClipSpacePositions[3])
{
	float4 FrustumTests0 = saturate(ClipSpacePositions[0].xyxy * float4(-1, -1, 1, 1) - ClipSpacePositions[0].w);
	float4 FrustumTests1 = saturate(ClipSpacePositions[1].xyxy * float4(-1, -1, 1, 1) - ClipSpacePositions[1].w);
	float4 FrustumTests2 = saturate(ClipSpacePositions[2].xyxy * float4(-1, -1, 1, 1) - ClipSpacePositions[2].w);
	float4 FrustumTests = FrustumTests0 * FrustumTests1 * FrustumTests2;

	float2 FrustumTestsZ0 = saturate(ClipSpacePositions[0].zz * float2(-1, 1) - ClipSpacePositions[0].w);
	float2 FrustumTestsZ1 = saturate(ClipSpacePositions[1].zz * float2(-1, 1) - ClipSpacePositions[1].w);
	float2 FrustumTestsZ2 = saturate(ClipSpacePositions[2].zz * float2(-1, 1) - ClipSpacePositions[2].w);
	float2 FrustumTestsZ = FrustumTestsZ0 * FrustumTestsZ1 * FrustumTestsZ2;
	return !( any(FrustumTests != 0) || any(FrustumTestsZ != 0) );
}

/** Allocate space for cloning to all 6 faces which is the worst case. */
[maxvertexcount(18)]
void MainOnePassPointLightGS(triangle FShadowDepthVSToGS Input[3], inout TriangleStream<FShadowDepthGSToPS> OutStream)
{
	UNROLL
	// Clone the triangle to each face
	for (int CubeFaceIndex = 0; CubeFaceIndex < 6; CubeFaceIndex++)
	{
		float4 ClipSpacePositions[3];
		UNROLL
		for (int VertexIndex = 0; VertexIndex < 3; VertexIndex++)
		{
			// Calculate the clip space position for each cube face
			ClipSpacePositions[VertexIndex] = mul(Input[VertexIndex].GSPosition, PassStruct.ShadowViewProjectionMatrices[CubeFaceIndex]);
		}
		// Frustum culling, saves GPU time with high poly meshes
		BRANCH
		if (IsTriangleInFrustum(ClipSpacePositions))
		{
			FShadowDepthGSToPS Output;
			Output.RTIndex = CubeFaceIndex;

			UNROLL
			for (int VertexIndex = 0; VertexIndex < 3; VertexIndex++)
			{
				Output.OutPosition = ClipSpacePositions[VertexIndex];

				#if INTERPOLATE_VF_ATTRIBUTES
					Output.PSInputs.FactoryInterpolants = Input[VertexIndex].FactoryInterpolants;
				#endif

#if INTERPOLATE_POSITION
				Output.PSInputs.PixelPosition = Input[VertexIndex].GSPosition.xyz;
#endif
				OutStream.Append(Output);
			}
			OutStream.RestartStrip();
		}
	}
}

#endif

#if USING_TESSELLATION

struct FShadowDepthVSToDS
{
	FVertexFactoryInterpolantsVSToDS FactoryInterpolants;
	float4 Position : VS_to_DS_Position;
	OPTIONAL_VertexID_VS_To_DS
#if ONEPASS_POINTLIGHT_SHADOW && USING_VERTEX_SHADER_LAYER
	uint LayerIndex : VS_to_DS_RenderTargetArrayIndex;
#endif
};

struct FShadowDepthDSToPS : FShadowDepthVSToPS
{
#if ONEPASS_POINTLIGHT_SHADOW
#if USING_VERTEX_SHADER_LAYER
	float4 Position : SV_POSITION;
	float4 InterpPosition : TEXCOORD6;
	uint LayerIndex : SV_RenderTargetArrayIndex;
#else
	float4 Position : TEXCOORD6;
#endif
#else
	float4 Position : SV_POSITION;
#endif
};

#define FPassSpecificVSToDS FShadowDepthVSToDS
#define FPassSpecificVSToPS FShadowDepthDSToPS

FShadowDepthVSToDS PassInterpolate(FShadowDepthVSToDS a, float aInterp, FShadowDepthVSToDS b, float bInterp)
{
	FShadowDepthVSToDS O;
	O.FactoryInterpolants = VertexFactoryInterpolate(a.FactoryInterpolants, aInterp, b.FactoryInterpolants, bInterp);
#if ONEPASS_POINTLIGHT_SHADOW && USING_VERTEX_SHADER_LAYER
	O.LayerIndex = a.LayerIndex;
#endif
	return O;
}

FShadowDepthDSToPS PassFinalizeTessellationOutput(FShadowDepthVSToDS Interpolants, float4 WorldPosition, FMaterialTessellationParameters MaterialParameters)
{
	FShadowDepthDSToPS O;
	
#if INTERPOLATE_VF_ATTRIBUTES
	O.FactoryInterpolants = VertexFactoryAssignInterpolants(Interpolants.FactoryInterpolants);
#endif


#if ONEPASS_POINTLIGHT_SHADOW
	O.Position = WorldPosition;
#if USING_VERTEX_SHADER_LAYER
	O.LayerIndex = Interpolants.LayerIndex;
	O.Position = WorldPosition = mul(WorldPosition, PassStruct.ShadowViewProjectionMatrices[Interpolants.LayerIndex]);
#endif
#else

	float ShadowDepth;
	SetShadowDepthOutputs(
		WorldPosition, 
		O.Position, 
#if PERSPECTIVE_CORRECT_DEPTH
		O.ShadowDepth
#else
		ShadowDepth
#endif
		);
#endif

// Conditions below are derived. See struct FShadowDepthVSToPS in ShadowDepthCommon.ush
#if !PERSPECTIVE_CORRECT_DEPTH && !COMPILER_SUPPORTS_EMPTY_STRUCTS && !ONEPASS_POINTLIGHT_SHADOW
	O.Dummy = 0;
#endif

#if INTERPOLATE_POSITION
	O.PixelPosition = WorldPosition.xyz;
#endif

	return O;
}
	
#include "Tessellation.ush"

#endif // #if USING_TESSELLATION

void Main(
	FVertexFactoryInput Input,
#if USING_TESSELLATION
	out FShadowDepthVSToDS OutParameters,
#elif ONEPASS_POINTLIGHT_SHADOW
	out FShadowDepthVSToGS OutParameters,
#if FEATURE_LEVEL >= FEATURE_LEVEL_SM4 && USING_VERTEX_SHADER_LAYER
	out uint LayerIndex : SV_RenderTargetArrayIndex,
#endif
#else
	out FShadowDepthVSToPS OutParameters,
#endif
	OPTIONAL_VertexID
	out float4 OutPosition : SV_POSITION
	)
{
	ResolvedView = ResolveView();
	
	FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);
	float4 WorldPos = VertexFactoryGetWorldPosition(Input, VFIntermediates);
	float3x3 TangentToLocal = VertexFactoryGetTangentToLocal(Input, VFIntermediates);

	FMaterialVertexParameters VertexParameters = GetMaterialVertexParameters(Input, VFIntermediates, WorldPos.xyz, TangentToLocal);
	WorldPos.xyz += GetMaterialWorldPositionOffset(VertexParameters);

#if USING_TESSELLATION
	OutPosition = OutParameters.Position = WorldPos;
	
	// Tessellated materials need vertex coords for displacement
	OutParameters.FactoryInterpolants = VertexFactoryGetInterpolantsVSToDS(Input, VFIntermediates, VertexParameters);

	#if ONEPASS_POINTLIGHT_SHADOW && USING_VERTEX_SHADER_LAYER && VERTEXSHADER
		OutParameters.LayerIndex = LayerId;
	#endif

#elif ONEPASS_POINTLIGHT_SHADOW

	OutPosition = OutParameters.GSPosition = WorldPos;

	#if INTERPOLATE_VF_ATTRIBUTES
		// Masked materials need texture coords to clip
		OutParameters.FactoryInterpolants = VertexFactoryGetInterpolantsVSToPS(Input, VFIntermediates, VertexParameters);
	#endif

	#if INTERPOLATE_POSITION
		OutParameters.PixelPosition = WorldPos.xyz;
	#endif

	#if USING_VERTEX_SHADER_LAYER && VERTEXSHADER
		LayerIndex = LayerId;
		OutPosition = mul(WorldPos, PassStruct.ShadowViewProjectionMatrices[LayerIndex]);
		#if INTERPOLATE_VF_ATTRIBUTES
			OutParameters.GSPosition = OutPosition;
		#endif
	#endif

#else
	float Dummy;

	SetShadowDepthOutputs(
		WorldPos, 
		OutPosition, 
#if !PERSPECTIVE_CORRECT_DEPTH
		Dummy
#else
		OutParameters.ShadowDepth
#endif
		);
	
	#if INTERPOLATE_VF_ATTRIBUTES
		// Masked materials need texture coords to clip
		OutParameters.FactoryInterpolants = VertexFactoryGetInterpolantsVSToPS(Input, VFIntermediates, VertexParameters);
	#endif

	#if INTERPOLATE_POSITION
		OutParameters.PixelPosition = WorldPos.xyz;
	#endif

	#if !PERSPECTIVE_CORRECT_DEPTH && !COMPILER_SUPPORTS_EMPTY_STRUCTS
		OutParameters.Dummy = 0;
	#endif
#endif

	OutputVertexID( OutParameters );
}

void MainForGS(
	FVertexFactoryInput Input,
#if USING_TESSELLATION
	out FShadowDepthVSToDS OutParameters,
#elif ONEPASS_POINTLIGHT_SHADOW
	out FShadowDepthVSToGS OutParameters,
#if FEATURE_LEVEL >= FEATURE_LEVEL_SM4 && USING_VERTEX_SHADER_LAYER
	out uint LayerIndex : SV_RenderTargetArrayIndex,
#endif
#else
	out FShadowDepthVSToPS OutParameters,
#endif
	OPTIONAL_VertexID
	out float4 OutPosition : SV_POSITION
	)
{
	Main(Input,
		OutParameters,
		OPTIONAL_VertexID_PARAM
#if !USING_TESSELLATION && (FEATURE_LEVEL >= FEATURE_LEVEL_SM4 && ONEPASS_POINTLIGHT_SHADOW && USING_VERTEX_SHADER_LAYER)
		LayerIndex,
#endif
		OutPosition);
}

#define USING_ONEPASS_POINT_VERTEX_LAYER	(FEATURE_LEVEL >= FEATURE_LEVEL_SM4 && ONEPASS_POINTLIGHT_SHADOW && USING_VERTEX_SHADER_LAYER)

#if POSITION_ONLY
void PositionOnlyMain(
	in FPositionOnlyVertexFactoryInput Input,
#if USING_ONEPASS_POINT_VERTEX_LAYER
	out uint LayerIndex : SV_RenderTargetArrayIndex,
#endif
#if ONEPASS_POINTLIGHT_SHADOW
	out FShadowDepthVSToGS OutParameters,
#else
	out FShadowDepthVSToPS OutParameters,
#endif
	out float4 OutPosition : SV_POSITION
	)
{
	ResolvedView = ResolveView();

	float4 WorldPos = VertexFactoryGetWorldPosition(Input);

#if INTERPOLATE_VF_ATTRIBUTES
	OutParameters.FactoryInterpolants = (FVertexFactoryInterpolantsVSToPS)0;
#endif

#if ONEPASS_POINTLIGHT_SHADOW
	OutPosition = OutParameters.GSPosition = WorldPos;

	#if USING_ONEPASS_POINT_VERTEX_LAYER
		LayerIndex = LayerId;
		OutPosition = mul(WorldPos, PassStruct.ShadowViewProjectionMatrices[LayerIndex]);
		#if INTERPOLATE_VF_ATTRIBUTES
			OutParameters.GSPosition = OutPosition;
		#endif
	#endif

#else // #if ONEPASS_POINTLIGHT_SHADOW
	float ShadowDepth;
	SetShadowDepthOutputs(WorldPos,OutPosition,ShadowDepth);
	#if PERSPECTIVE_CORRECT_DEPTH
		OutParameters.ShadowDepth = ShadowDepth;
	#elif !COMPILER_SUPPORTS_EMPTY_STRUCTS
		OutParameters.Dummy = 0;
	#endif
#endif // #if ONEPASS_POINTLIGHT_SHADOW

#if INTERPOLATE_POSITION
	OutParameters.PixelPosition = WorldPos;
#endif
}


void PositionOnlyMainForGS(
	in FPositionOnlyVertexFactoryInput Input,
#if USING_ONEPASS_POINT_VERTEX_LAYER
	out uint LayerIndex : SV_RenderTargetArrayIndex,
#endif
#if ONEPASS_POINTLIGHT_SHADOW
	out FShadowDepthVSToGS OutParameters,
#else
	out FShadowDepthVSToPS OutParameters,
#endif
	out float4 OutPosition : SV_POSITION
	)
{
	PositionOnlyMain(Input,
#if USING_ONEPASS_POINT_VERTEX_LAYER
		LayerIndex,
#endif
		OutParameters, OutPosition);
}

#endif
