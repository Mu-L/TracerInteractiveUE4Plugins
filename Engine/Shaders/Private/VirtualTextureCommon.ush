// Copyright 1998-2018 Epic Games, Inc. All Rights Reserved.

#ifndef VirtualTextureCommon_ush__
#define VirtualTextureCommon_ush__

#include "Common.ush"
#include "Random.ush"

float MipLevel2D( float2 UV, inout float2 dUVdx, inout float2 dUVdy )
{
	dUVdx = ddx( dUVdy );
	dUVdy = ddy( dUVdy );
	
	float px = dot( dUVdx, dUVdx );
	float py = dot( dUVdy, dUVdy );

	float MinLevel = 0.5 * log2( min( px, py ) );
	float MaxLevel = 0.5 * log2( max( px, py ) );
	
	float Level = MaxLevel;
	return Level;
}

float MipLevelAniso2D( float2 UV, inout float2 dUVdx, inout float2 dUVdy, const float MaxAnisoLog2 )
{
	dUVdx = ddx( UV );
	dUVdy = ddy( UV );
	
	float px = dot( dUVdx, dUVdx );
	float py = dot( dUVdy, dUVdy );

	float MinLevel = 0.5 * log2( min( px, py ) );
	float MaxLevel = 0.5 * log2( max( px, py ) );
	
	float AnisoBias = min( MaxLevel - MinLevel, MaxAnisoLog2 );
	float Level = MaxLevel - AnisoBias;
	
	return Level;
}

// Pack 16bit 6:6:4
// 64 x 64 physical pages
// 16 mip levels
void PageTable2DTranslation16( Texture2D<uint> PageTable, uint PageTableSize, uint2 vPage, uint vLevel, out uint2 pPage, out uint vPagesWideInLevel )
{
	uint PageTableEntry = PageTable.Load( int3( vPage >> vLevel, vLevel ) );

	pPage.x = ( PageTableEntry >>  0 ) & 0x3F;
	pPage.y = ( PageTableEntry >>  6 ) & 0x3F;
	vLevel  = ( PageTableEntry >> 12 ) & 0xF;

	vPagesWideInLevel = PageTableSize >> vLevel;
}

// 8:8:8:8 page table format
// [van Waveren 2012, "Software Virtual Textures"]
// 256 x 256 physical pages
void PageTable2DTranslation32( Texture2D PageTable, SamplerState PageTableSampler, float2 vUV, float vLevel, out float2 pPage, out float vPagesWideInLevel )
{
	float4 PageTableEntry = PageTable.SampleLevel( PageTableSampler, vUV, vLevel );
	
	pPage = PageTableEntry.xy * 255.0;
	vPagesWideInLevel = dot( PageTableEntry.zw, float2( 1.0 / 16.0, 256.0 / 16.0 ) * 255.0 );
}

float2 VirtualToPhysical2D(	const float2 pTextureSize, const float vPageSize, const float pPageSize,
							float2 pPage, float vPagesWideInLevel,
							float2 vUV, inout float2 dUVdx, inout float2 dUVdy )
{
	const float2 pPageScale = pPageSize / pTextureSize;
	const float2 vPageScale = vPageSize / pTextureSize;
	const float2 vPageBias = ( 0.5 * ( pPageSize - vPageSize ) ) / pTextureSize;

	float2 vPageFrac = frac( vUV * vPagesWideInLevel );
	float2 pUV = vPageFrac * vPageScale + vPageBias + pPage.xy * pPageScale;
	
	float2 ddxyScale = vPageScale * vPagesWideInLevel;
	dUVdx *= ddxyScale;
	dUVdy *= ddxyScale;
	
	return pUV;
}

float GetVirtualTextureSpaceID(float4x4 VirtualTextureUniformData)
{
	return VirtualTextureUniformData[0][0];
}

float GetVirtualTexturePageTableSize(float4x4 VirtualTextureUniformData)
{
	return VirtualTextureUniformData[0][1];
}

float GetVirtualTexturePageSize(float4x4 VirtualTextureUniformData)
{
	return VirtualTextureUniformData[0][2];
}

float GetVirtualTexturePageBorder(float4x4 VirtualTextureUniformData)
{
	return VirtualTextureUniformData[0][3];
}

float2 GetVirtualTextureCacheSize(float4x4 VirtualTextureUniformData)
{
	return float2(VirtualTextureUniformData[1][0], VirtualTextureUniformData[1][1]) ;
}

float GetVirtualTextureMaxAnisoTropicLog2(float4x4 VirtualTextureUniformData)
{
	return VirtualTextureUniformData[1][2];
}

float GetVirtualTextureMaxLevel(float4x4 VirtualTextureUniformData)
{
	return VirtualTextureUniformData[1][3];
}

struct VTSampleInfo
{
	float2 dUVdx;
	float2 dUVdy;
	uint2 vPage;
	uint  Level; //on 16 TT this is Vlevel, 32 bit this is level
	uint Request;
};

VTSampleInfo GetVTSampleInfo(float4x4 VirtualTextureUniformData, float2 UV, bool TranslationTable16Bit, float2 SvPositionXY)
{
	const float PageTableSize	= GetVirtualTexturePageTableSize(VirtualTextureUniformData);
	const float PageTableBias	= log2( PageTableSize );
	const float vPageSize		= GetVirtualTexturePageSize(VirtualTextureUniformData);
	const float vPageSizeLog2	= log2( vPageSize );
	const float pPageBorder		= GetVirtualTexturePageBorder(VirtualTextureUniformData);
	const float pPageSize		= vPageSize + 2 * pPageBorder;
	const float2 pTextureSize	= GetVirtualTextureCacheSize(VirtualTextureUniformData);
	const float MaxAnisoLog2	= GetVirtualTextureMaxAnisoTropicLog2(VirtualTextureUniformData);
	const uint ID				= GetVirtualTextureSpaceID(VirtualTextureUniformData);
	const float MaxLevel		= GetVirtualTextureMaxLevel(VirtualTextureUniformData);

	VTSampleInfo VTInfo;
	
	float Level = MipLevelAniso2D( UV, VTInfo.dUVdx, VTInfo.dUVdy, MaxAnisoLog2 ) + PageTableBias + vPageSizeLog2;

	// Stochastic trilinear
    float Noise = InterleavedGradientNoise(SvPositionXY, View.StateFrameIndexMod8);
	Level += ( Noise * 0.5 - 0.25 );

	Level = clamp( Level, 0, MaxLevel );
	
	VTInfo.vPage = uint2( UV * PageTableSize );
	const uint vLevel = uint( Level );
	VTInfo.Level = TranslationTable16Bit ? vLevel : Level;

	VTInfo.Request  = VTInfo.vPage.x	<<  0;
	VTInfo.Request |= VTInfo.vPage.y	<< 12;
	VTInfo.Request |= vLevel			<< 24;
	VTInfo.Request |= ID				<< 28;

	return VTInfo;
}

#endif //VirtualTextureCommon_ush__