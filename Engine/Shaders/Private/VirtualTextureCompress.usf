// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	VirtualTextureCompress.usf: 
	Compression pass for runtime virtual texture
	todo[vt]: Lots of possible optimizations to do...
=============================================================================*/

#include "Common.ush"
#include "BCCompressionCommon.ush"

uint4 DestRect;
Texture2D<float4> RenderTexture0;
SamplerState TextureSampler0;
Texture2D<float4> RenderTexture1;
SamplerState TextureSampler1;
Texture2D<float4> RenderTexture2;
SamplerState TextureSampler2;
RWTexture2D<uint2> OutCompressTexture0_u2;
RWTexture2D<uint4> OutCompressTexture0_u4;
RWTexture2D<uint4> OutCompressTexture1;
RWTexture2D<uint2> OutCompressTexture2;


/** Trivial vertex shader for copy shaders. */
void CopyVS(in uint VertexId : SV_VertexID, out float4 OutPosition : SV_POSITION, out float2 OutTexCoord : TEXCOORD0)
{
	OutTexCoord = float2(((VertexId + 1) / 3) & 1, VertexId & 1);
	OutPosition.xy = float2(OutTexCoord.x, 1.f - OutTexCoord.y) * 2.f - 1.f;
	OutPosition.zw = float2(0, 1);
}

/** Read a 4x4 color block ready for BC1 compression. */
void ReadBlockRGB( Texture2D<float4> SourceTexture, SamplerState TextureSampler, float2 UV, float2 TexelUVSize, out float3 Block[16] )
{
	{
		float4 Red = SourceTexture.GatherRed(TextureSampler, UV);
		float4 Green = SourceTexture.GatherGreen(TextureSampler, UV);
		float4 Blue = SourceTexture.GatherBlue(TextureSampler, UV);
		Block[0] = float3(Red[3], Green[3], Blue[3]);
		Block[1] = float3(Red[2], Green[2], Blue[2]);
		Block[4] = float3(Red[0], Green[0], Blue[0]);
		Block[5] = float3(Red[1], Green[1], Blue[1]);
	}
	{
		float2 UVOffset = UV + float2(2.f * TexelUVSize.x, 0);
		float4 Red = SourceTexture.GatherRed(TextureSampler, UVOffset);
		float4 Green = SourceTexture.GatherGreen(TextureSampler, UVOffset);
		float4 Blue = SourceTexture.GatherBlue(TextureSampler, UVOffset);
		Block[2] = float3(Red[3], Green[3], Blue[3]);
		Block[3] = float3(Red[2], Green[2], Blue[2]);
		Block[6] = float3(Red[0], Green[0], Blue[0]);
		Block[7] = float3(Red[1], Green[1], Blue[1]);
	}
	{
		float2 UVOffset = UV + float2(0, 2.f * TexelUVSize.y);
		float4 Red = SourceTexture.GatherRed(TextureSampler, UVOffset);
		float4 Green = SourceTexture.GatherGreen(TextureSampler, UVOffset);
		float4 Blue = SourceTexture.GatherBlue(TextureSampler, UVOffset);
		Block[8] = float3(Red[3], Green[3], Blue[3]);
		Block[9] = float3(Red[2], Green[2], Blue[2]);
		Block[12] = float3(Red[0], Green[0], Blue[0]);
		Block[13] = float3(Red[1], Green[1], Blue[1]);
	}
	{
		float2 UVOffset = UV + 2.f * TexelUVSize;
		float4 Red = SourceTexture.GatherRed(TextureSampler, UVOffset);
		float4 Green = SourceTexture.GatherGreen(TextureSampler, UVOffset);
		float4 Blue = SourceTexture.GatherBlue(TextureSampler, UVOffset);
		Block[10] = float3(Red[3], Green[3], Blue[3]);
		Block[11] = float3(Red[2], Green[2], Blue[2]);
		Block[14] = float3(Red[0], Green[0], Blue[0]);
		Block[15] = float3(Red[1], Green[1], Blue[1]);
	}
}

/** Read a 4x4 block of XY channels from a normal texture ready for BC5 compression. */
void ReadBlockRG( Texture2D<float4> SourceTexture, SamplerState TextureSampler, float2 UV, float2 TexelUVSize, out float BlockR[16], out float BlockG[16] )
{
	{
		float4 Red = SourceTexture.GatherRed(TextureSampler, UV);
		float4 Green = SourceTexture.GatherGreen(TextureSampler, UV);
		BlockR[0] = Red[3]; BlockG[0] = Green[3];
		BlockR[1] = Red[2]; BlockG[1] = Green[2];
		BlockR[4] = Red[0]; BlockG[4] = Green[0];
		BlockR[5] = Red[1]; BlockG[5] = Green[1];
	}
	{
		float2 UVOffset = UV + float2(2.f * TexelUVSize.x, 0);
		float4 Red = SourceTexture.GatherRed(TextureSampler, UVOffset);
		float4 Green = SourceTexture.GatherGreen(TextureSampler, UVOffset);
		BlockR[2] = Red[3]; BlockG[2] = Green[3];
		BlockR[3] = Red[2]; BlockG[3] = Green[2];
		BlockR[6] = Red[0]; BlockG[6] = Green[0];
		BlockR[7] = Red[1]; BlockG[7] = Green[1];
	}
	{
		float2 UVOffset = UV + float2(0, 2.f * TexelUVSize.y);
		float4 Red = SourceTexture.GatherRed(TextureSampler, UVOffset);
		float4 Green = SourceTexture.GatherGreen(TextureSampler, UVOffset);
		BlockR[8]  = Red[3]; BlockG[8]  = Green[3];
		BlockR[9]  = Red[2]; BlockG[9]  = Green[2];
		BlockR[12] = Red[0]; BlockG[12] = Green[0];
		BlockR[13] = Red[1]; BlockG[13] = Green[1];
	}
	{
		float2 UVOffset = UV + 2.f * TexelUVSize;
		float4 Red = SourceTexture.GatherRed(TextureSampler, UVOffset);
		float4 Green = SourceTexture.GatherGreen(TextureSampler, UVOffset);
		BlockR[10] = Red[3]; BlockG[10] = Green[3];
		BlockR[11] = Red[2]; BlockG[11] = Green[2];
		BlockR[14] = Red[0]; BlockG[14] = Green[0];
		BlockR[15] = Red[1]; BlockG[15] = Green[1];
	}
}

/** Compress base color to a single BC1 target. */
[numthreads(8,8,1)]
void CompressBaseColorCS(
	uint3 ThreadId : SV_DispatchThreadID 
	)
{
	uint2 SamplePos = ThreadId.xy * 4;
	if (any(ThreadId.xy >= DestRect.zw))
		return;

	float2 TexelUVSize = 1.f / float2(DestRect.zw);
	float2 SampleUV = (float2(SamplePos) + 0.5f) * TexelUVSize;

	float3 BlockBaseColor[16];
	ReadBlockRGB(RenderTexture0, TextureSampler0, SampleUV, TexelUVSize, BlockBaseColor);

	OutCompressTexture0_u2[ThreadId.xy + DestRect.xy] = CompressBC1Block_SRGB(BlockBaseColor);
}

/** Simple copy used for thumbnails. */
void CopyBaseColorPS(
	in float4 InPosition : SV_POSITION, 
	in noperspective float2 InTexCoord : TEXCOORD0, 
	out float4 OutColor0 : SV_Target0)
{
	float3 BaseColor = RenderTexture0.SampleLevel(TextureSampler0, InTexCoord, 0).xyz;
	OutColor0 = float4(BaseColor, 1.f);
}

/** Compress base color, normal, roughness and specular to BC3 target pair. */
[numthreads(8,8,1)]
void CompressBaseColorNormalSpecularCS(
	uint3 ThreadId : SV_DispatchThreadID 
	)
{
	uint2 SamplePos = ThreadId.xy * 4;
	if (any(SamplePos >= DestRect.zw))
		return;

	float2 TexelUVSize = 1.f / float2(DestRect.zw);
	float2 SampleUV = (float2(SamplePos) + 0.5f) * TexelUVSize;

	float3 BlockBaseColor[16];
	ReadBlockRGB(RenderTexture0, TextureSampler0, SampleUV, TexelUVSize, BlockBaseColor);

	float BlockNormalX[16];
	float BlockNormalY[16];
	ReadBlockRG(RenderTexture1, TextureSampler1, SampleUV, TexelUVSize, BlockNormalX, BlockNormalY);

	float3 BlockSpecular[16];
	ReadBlockRGB(RenderTexture2, TextureSampler2, SampleUV, TexelUVSize, BlockSpecular);

	for (int i=0; i<16; i++)
	{
		BlockSpecular[i].z = round(BlockSpecular[i].z);
	}

	OutCompressTexture0_u4[ThreadId.xy + DestRect.xy] = CompressBC3Block_SRGB(BlockBaseColor, BlockNormalX);
	OutCompressTexture1[ThreadId.xy + DestRect.xy] = CompressBC3Block(BlockSpecular, BlockNormalY);
}

/** Copy normal X and Y to the alpha channels of the final target textures (without compression)
  * This path is used when we disable texture compression, because we need to keep the same final channel layout. */
void CopyBaseColorNormalSpecularPS(
	in float4 InPosition : SV_POSITION, 
	in noperspective float2 InTexCoord : TEXCOORD0, 
	out float4 OutColor0 : SV_Target0,
	out float4 OutColor1 : SV_Target1)
{
	float3 BaseColor = RenderTexture0.SampleLevel(TextureSampler0, InTexCoord, 0).xyz;
	float2 NormalXY = RenderTexture1.SampleLevel(TextureSampler1, InTexCoord, 0).xy;
	float3 RoughnessSpecularNormalZ = RenderTexture2.SampleLevel(TextureSampler2, InTexCoord, 0).xyz;
	
	RoughnessSpecularNormalZ.z = round(RoughnessSpecularNormalZ.z);
	
	OutColor0 = float4(BaseColor, NormalXY.x);
	OutColor1 = float4(RoughnessSpecularNormalZ, NormalXY.y);
}

/** Compress base color, normal, roughness and specular to BC3, BC5, BC1 target set. */
[numthreads(8,8,1)]
void CompressBaseColorNormalSpecularYCoCgCS(
	uint3 ThreadId : SV_DispatchThreadID 
	)
{
	uint2 SamplePos = ThreadId.xy * 4;
	if (any(SamplePos >= DestRect.zw))
		return;

	float2 TexelUVSize = 1.f / float2(DestRect.zw);
	float2 SampleUV = (float2(SamplePos) + 0.5f) * TexelUVSize;

	float3 BlockBaseColor[16];
	ReadBlockRGB(RenderTexture0, TextureSampler0, SampleUV, TexelUVSize, BlockBaseColor);

	float BlockNormalX[16];
	float BlockNormalY[16];
	ReadBlockRG(RenderTexture1, TextureSampler1, SampleUV, TexelUVSize, BlockNormalX, BlockNormalY);

	float3 BlockSpecular[16];
	ReadBlockRGB(RenderTexture2, TextureSampler2, SampleUV, TexelUVSize, BlockSpecular);

	for (int i=0; i<16; i++)
	{
		BlockSpecular[i].z = round(BlockSpecular[i].z);
	}

	OutCompressTexture0_u4[ThreadId.xy + DestRect.xy] = CompressBC3BlockYCoCg(BlockBaseColor);
	OutCompressTexture1[ThreadId.xy + DestRect.xy] = CompressBC5Block(BlockNormalX, BlockNormalY);
	OutCompressTexture2[ThreadId.xy + DestRect.xy] = CompressBC1Block(BlockSpecular);
}

/** Copy normal X and Y to the alpha channels of the final target textures (without compression)
  * This path is used when we disable texture compression, because we need to keep the same final channel layout. */
void CopyBaseColorNormalSpecularYCoCgPS(
	in float4 InPosition : SV_POSITION, 
	in noperspective float2 InTexCoord : TEXCOORD0, 
	out float4 OutColor0 : SV_Target0,
	out float4 OutColor1 : SV_Target1,
	out float4 OutColor2 : SV_Target2)
{
	float3 YCoCg = RGB2YCoCg(RenderTexture0.SampleLevel(TextureSampler0, InTexCoord, 0).xyz);
	float2 NormalXY = RenderTexture1.SampleLevel(TextureSampler1, InTexCoord, 0).xy;
	float3 RoughnessSpecularNormalZ = RenderTexture2.SampleLevel(TextureSampler2, InTexCoord, 0).xyz;
	
	RoughnessSpecularNormalZ.z = round(RoughnessSpecularNormalZ.z);
	
	OutColor0 = float4(YCoCg.yz, 0, YCoCg.x);
	OutColor1 = float4(NormalXY.xy, 0, 1);
	OutColor2 = float4(RoughnessSpecularNormalZ, 1);
}

/** Copy world height (without compression)
  * This path is used when want to copy the world height data into a thumbnail. */
void CopyWorldHeightPS(
	in float4 InPosition : SV_POSITION, 
	in noperspective float2 InTexCoord : TEXCOORD0, 
	out float4 OutColor0 : SV_Target0)
{
	float WorldHeight = RenderTexture0.SampleLevel(TextureSampler0, InTexCoord, 0).r;
	OutColor0 = float4(WorldHeight.xxx, 1.f);
}
