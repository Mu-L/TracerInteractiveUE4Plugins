// Copyright Epic Games, Inc. All Rights Reserved.

//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class FDatasmithFacadeMesh : FDatasmithFacadeElement {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal FDatasmithFacadeMesh(global::System.IntPtr cPtr, bool cMemoryOwn) : base(DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeMesh_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FDatasmithFacadeMesh obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~FDatasmithFacadeMesh() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          DatasmithFacadeCSharpPINVOKE.delete_FDatasmithFacadeMesh(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public FDatasmithFacadeMesh(string InElementName, string InElementLabel) : this(DatasmithFacadeCSharpPINVOKE.new_FDatasmithFacadeMesh(InElementName, InElementLabel), true) {
  }

  public void AddVertex(float InX, float InY, float InZ) {
    DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeMesh_AddVertex(swigCPtr, InX, InY, InZ);
  }

  public void AddUV(int InChannel, float InU, float InV) {
    DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeMesh_AddUV(swigCPtr, InChannel, InU, InV);
  }

  public void AddTriangle(int InVertex1, int InVertex2, int InVertex3, int InMaterialID) {
    DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeMesh_AddTriangle__SWIG_0(swigCPtr, InVertex1, InVertex2, InVertex3, InMaterialID);
  }

  public void AddTriangle(int InVertex1, int InVertex2, int InVertex3) {
    DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeMesh_AddTriangle__SWIG_1(swigCPtr, InVertex1, InVertex2, InVertex3);
  }

  public void AddTriangle(int InVertex1, int InVertex2, int InVertex3, string InMaterialName) {
    DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeMesh_AddTriangle__SWIG_2(swigCPtr, InVertex1, InVertex2, InVertex3, InMaterialName);
  }

  public void AddNormal(float InX, float InY, float InZ) {
    DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeMesh_AddNormal(swigCPtr, InX, InY, InZ);
  }

  public void AddMaterial(int InMaterialId, string InMaterialName) {
    DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeMesh_AddMaterial(swigCPtr, InMaterialId, InMaterialName);
  }

  public int GetVertexCount() {
    int ret = DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeMesh_GetVertexCount(swigCPtr);
    return ret;
  }

  public int GetTriangleCount() {
    int ret = DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeMesh_GetTriangleCount(swigCPtr);
    return ret;
  }

  public override void AddMetadataString(string InPropertyName, string InPropertyValue) {
    DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeMesh_AddMetadataString(swigCPtr, InPropertyName, InPropertyValue);
  }

}
