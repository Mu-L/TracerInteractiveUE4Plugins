// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	AnimationUtils.h: Skeletal mesh animation utilities.
=============================================================================*/ 

#pragma once

#include "CoreMinimal.h"
#include "Animation/AnimSequence.h"

class UAnimCompress;
class UAnimSet;
struct FAnimCompressContext;

ENGINE_API DECLARE_LOG_CATEGORY_EXTERN(LogMatinee, Warning, All);
ENGINE_API DECLARE_LOG_CATEGORY_EXTERN(LogAnimNotify, Warning, All);
ENGINE_API DECLARE_LOG_CATEGORY_EXTERN(LogAnimMontage, Warning, All);
ENGINE_API DECLARE_LOG_CATEGORY_EXTERN(LogAnimMarkerSync, Warning, All);

// Forward declarations.
class UAnimCompress;
class UAnimSet;
struct FTransform;

/**
 * Error statistics for an animation generated by TallyErrorsFromPerturbation, representing errors in translation or rotation due to a small incremental translation or rotation
 */
struct FAnimPerturbationError
{
	float MaxErrorInTransDueToTrans;
	float MaxErrorInRotDueToTrans;
	float MaxErrorInScaleDueToTrans;
	float MaxErrorInTransDueToRot;
	float MaxErrorInRotDueToRot;
	float MaxErrorInScaleDueToRot;
	float MaxErrorInTransDueToScale;
	float MaxErrorInRotDueToScale;
	float MaxErrorInScaleDueToScale;
};

/**
 * A set of error statistics for an animation, gathered by FAnimationUtils::ComputeCompressionError
 */
struct AnimationErrorStats
{
	/** Average world-space translation error across all end-effectors **/
	float AverageError;
	/** The worst error encountered across all end effectors **/
	float MaxError;
	/** Time at which the worst error occurred */
	float MaxErrorTime;
	/** Bone on which the worst error occurred */
	int32 MaxErrorBone;

	AnimationErrorStats()
		: AverageError(0.f)
		, MaxError(0.f)
		, MaxErrorTime(0.f)
		, MaxErrorBone(0)
	{}
};

/** Different ways to create an additive animation */
enum EConvertToAdditive
{
	/** Delta against SkelMesh Reference pose */
	CTA_RefPose,
	/** Delta against the first frame of another animation */
	CTA_AnimFirstFrame,
	/** Delta against another animation. Other animation scaled to match first anim's length */
	CTA_AnimScaled,
	CTA_MAX	// Always last one
};

/**
 * A collection of useful functions for skeletal mesh animation.
 */
class FAnimationUtils
{
public:


	/**
	* Builds the local-to-component matrix for the specified bone.
	*/
	static void BuildComponentSpaceTransform(FTransform& OutTransform,
												int32 BoneIndex,
												const TArray<FTransform>& BoneSpaceTransforms,
												const TArray<FBoneData>& BoneData);

	static void BuildSkeletonMetaData(USkeleton* Skeleton, TArray<FBoneData>& OutBoneData);

	static int32 GetAnimTrackIndexForSkeletonBone(const int32 InSkeletonBoneIndex, const TArray<FTrackToSkeletonMap>& TrackToSkelMap);

#if WITH_EDITOR
	/**
	 * Utility function to measure the accuracy of a compressed animation. Each end-effector is checked for 
	 * world-space movement as a result of compression.
	 *
	 * @param	AnimSet		The animset to calculate compression error for.
	 * @param	BoneData	BoneData array describing the hierarchy of the animated skeleton
	 * @param	ErrorStats	Output structure containing the final compression error values
	 * @return				None.
	 */
	static void ComputeCompressionError(const FCompressibleAnimData& CompressibleAnimData, FCompressibleAnimDataResult& CompressedData, AnimationErrorStats& ErrorStats);
#endif

	/**
	 * Utility function to compress an animation. If the animation is currently associated with a codec, it will be used to 
	 * compress the animation. Otherwise, the default codec will be used. The CompressContext can specify whether an
	 * alternative compression codec can be used. If the alternative codec produces better compression and the accuracy
	 * of the compressed animation remains within tolerances, the alternative codec will be used. 
	 * See GetAlternativeCompressionThreshold for information on the tolerance value used.
	 *
	 * @param	CompressibleAnimData	The animation data to compress.
	 * @param	CompressContext			Context for applying compression, tracking memory saved etc
	 * @return							The compressed animation data
	 */
	ENGINE_API static void CompressAnimSequence(const FCompressibleAnimData& CompressibleAnimData, FCompressibleAnimDataResult& OutCompressedData, FAnimCompressContext& CompressContext);

	/**
	 * Utility function to compress an animation. If the animation is currently associated with a codec, it will be used to
	 * compress the animation. Otherwise, the default codec will be used. The CompressContext can specify whether an
	 * alternative compression codec can be used. If the alternative codec produces better compression and the accuracy
	 * of the compressed animation remains within tolerances, the alternative codec will be used.
	 * See GetAlternativeCompressionThreshold for information on the tolerance value used.
	 *
	 * @param	CompressibleAnimData					The animation data to compress.
	 * @param	OriginalCompressedData					The original compressed data (if it exists).
	 * @param	CompressContext							Context for applying compression, tracking memory saved etc*
	 * @param	MasterTolerance							The alternate error threshold (0.0 means don't try anything other than the current / default scheme)
	 * @param	bFirstRecompressUsingCurrentOrDefault	If true, then the animation will be first recompressed with it's current compressor if non-NULL, or with the global default compressor (specified in the engine ini)
	 * @param	bForceBelowThreshold					If true and the existing compression error is greater than MasterTolerance, then any compression technique (even one that increases the size) with a lower error will be used until it falls below the threshold
	 * @param	bRaiseMaxErrorToExisting				If true and the existing compression error is greater than MasterTolerance, then MasterTolerance will be effectively raised to the existing error level
	 * @param	bTryExhaustiveSearch					If true, then an exhaustive search is used otherwise only a short list of the best methods is tried
	 *
	 * @return											The compressed animation data
	 */
	static void CompressAnimSequenceExplicit(
		const FCompressibleAnimData& CompressibleAnimData,
		FCompressibleAnimDataResult& OutCompressedData,
		FAnimCompressContext& CompressContext,
		float MasterTolerance,
		bool bFirstRecompressUsingCurrentOrDefault,
		bool bForceBelowThreshold,
		bool bRaiseMaxErrorToExisting,
		bool bTryExhaustiveSearch,
		bool bEnableSegmenting,
		int32 IdealNumFramesPerSegment,
		int32 MaxNumFramesPerSegment);

	/**
	 * Determines the current setting for world-space error tolerance in the animation compressor.
	 * When requested, animation being compressed will also consider an alternative compression
	 * method if the end result of that method produces less error than the AlternativeCompressionThreshold.
	 * The default tolerance value is 0.0f (no alternatives allowed) but may be overridden using a field in the base engine INI file.
	 *
	 * @return				World-space error tolerance for considering an alternative compression method
	 */
	static float GetAlternativeCompressionThreshold();
	
	/**
	 * Determines the current setting for recompressing all animations upon load. The default value 
	 * is False, but may be overridden by an optional field in the base engine INI file. 
	 *
	 * @return				true if the engine settings request that all animations be recompiled
	 */
	static bool GetForcedRecompressionSetting();

	/** Get default Outer for AnimSequences contained in this AnimSet.
	 *  The intent is to use that when Constructing new AnimSequences to put into that set.
	 *  The Outer will be Package.<AnimSetName>_Group.
	 *  @param bCreateIfNotFound if true, Group will be created. This is only in the editor.
	 */
	static UObject* GetDefaultAnimSequenceOuter(UAnimSet* InAnimSet, bool bCreateIfNotFound);

	/**
	 * Converts an animation codec format into a human readable string
	 *
	 * @param	InFormat	The format to convert into a string
	 * @return				The format as a string
	 */
	static FString GetAnimationKeyFormatString(enum AnimationKeyFormat InFormat);

	/**
	 * Converts an animation compression type into a human readable string
	 *
	 * @param	InFormat	The compression format to convert into a string
	 * @return				The format as a string
	 */
	ENGINE_API static FString GetAnimationCompressionFormatString(enum AnimationCompressionFormat InFormat);

	/**
	 * Computes the 'height' of each track, relative to a given animation linkup.
	 *
	 * The track height is defined as the minimal number of bones away from an end effector (end effectors are 0, their parents are 1, etc...)
	 *
	 * @param AnimLinkup			The animation linkup
	 * @param NumTracks				The number of tracks
	 * @param TrackHeights [OUT]	The computed track heights
	 *
	 */
	static void CalculateTrackHeights(const FCompressibleAnimData& CompressibleAnimData, int NumTracks, TArray<int32>& TrackHeights);

	/**
	 * Checks a set of key times to see if the spacing is uniform or non-uniform.
	 * Note: If there are as many times as frames, they are automatically assumed to be uniformly spaced.
	 * Note: If there are two or fewer times, they are automatically assumed to be uniformly spaced.
	 *
	 * @param AnimSeq		The number of frames in the source animation data
	 * @param Times			The array of key times
	 *
	 * @return				true if the keys are uniformly spaced (or one of the trivial conditions is detected).  false if any key spacing is greater than 1e-4 off.
	 */
	static bool HasUniformKeySpacing(int32 NumFrames, const TArray<float>& Times);

	/**
	 * Perturbs the bone(s) associated with each track in turn, measuring the maximum error introduced in end effectors as a result
	 */
	static void TallyErrorsFromPerturbation(
		const FCompressibleAnimData& CompressibleAnimData,
		int32 NumTracks,
		const FVector& PositionNudge,
		const FQuat& RotationNudge,
		const FVector& ScaleNudge,
		TArray<FAnimPerturbationError>& InducedErrors);

	/**
	 * @return		The default animation compression algorithm singleton, instantiating it if necessary.
	 */
	ENGINE_API static UAnimCompress* GetDefaultAnimationCompressionAlgorithm();

	/** Returns the default animation curve compression settings, can never by null. */
	ENGINE_API static UAnimCurveCompressionSettings* GetDefaultAnimationCurveCompressionSettings();

	static void ExtractTransformFromTrack(float Time, int32 NumFrames, float SequenceLength, const struct FRawAnimSequenceTrack& RawTrack, EAnimInterpolationType Interpolation, FTransform &OutAtom);

#if WITH_EDITOR
	static void ExtractTransformFromCompressionData(const FCompressibleAnimData& CompressibleAnimData, FCompressibleAnimDataResult& CompressedAnimData, float Time, int32 TrackIndex, bool bUseRawData, FTransform& OutBoneTransform);
	/**
	 * Compresses the animation curves within a sequence with the chosen settings.
	 * Note: This modifies the sequence.
	 *
	 * @return		Returns true on success, false it we fail to compress
	 */
	ENGINE_API static bool CompressAnimCurves(FCompressibleAnimData& AnimSeq, FCompressedAnimSequence& Target);
#endif
};
