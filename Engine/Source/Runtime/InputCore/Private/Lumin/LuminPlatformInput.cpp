// Copyright Epic Games, Inc. All Rights Reserved.

#include "Lumin/LuminPlatformInput.h"
#include <ml_lifecycle.h>
#include <ml_keycodes.h>


uint32 FLuminPlatformInput::GetCharKeyMap(uint32* KeyCodes, FString* KeyNames, uint32 MaxMappings)
{
#define ADDKEYMAP(KeyCode, KeyName)		if (NumMappings<MaxMappings) { KeyCodes[NumMappings]=KeyCode; if(KeyNames) { KeyNames[NumMappings]=KeyName; } ++NumMappings; };

	uint32 NumMappings = 0;

	if (KeyCodes && (MaxMappings > 0))
	{
		ADDKEYMAP(MLKEYCODE_0, TEXT("Zero"));
		ADDKEYMAP(MLKEYCODE_1, TEXT("One"));
		ADDKEYMAP(MLKEYCODE_2, TEXT("Two"));
		ADDKEYMAP(MLKEYCODE_3, TEXT("Three"));
		ADDKEYMAP(MLKEYCODE_4, TEXT("Four"));
		ADDKEYMAP(MLKEYCODE_5, TEXT("Five"));
		ADDKEYMAP(MLKEYCODE_6, TEXT("Six"));
		ADDKEYMAP(MLKEYCODE_7, TEXT("Seven"));
		ADDKEYMAP(MLKEYCODE_8, TEXT("Eight"));
		ADDKEYMAP(MLKEYCODE_9, TEXT("Nine"));

		ADDKEYMAP(MLKEYCODE_A, TEXT("A"));
		ADDKEYMAP(MLKEYCODE_B, TEXT("B"));
		ADDKEYMAP(MLKEYCODE_C, TEXT("C"));
		ADDKEYMAP(MLKEYCODE_D, TEXT("D"));
		ADDKEYMAP(MLKEYCODE_E, TEXT("E"));
		ADDKEYMAP(MLKEYCODE_F, TEXT("F"));
		ADDKEYMAP(MLKEYCODE_G, TEXT("G"));
		ADDKEYMAP(MLKEYCODE_H, TEXT("H"));
		ADDKEYMAP(MLKEYCODE_I, TEXT("I"));
		ADDKEYMAP(MLKEYCODE_J, TEXT("J"));
		ADDKEYMAP(MLKEYCODE_K, TEXT("K"));
		ADDKEYMAP(MLKEYCODE_L, TEXT("L"));
		ADDKEYMAP(MLKEYCODE_M, TEXT("M"));
		ADDKEYMAP(MLKEYCODE_N, TEXT("N"));
		ADDKEYMAP(MLKEYCODE_O, TEXT("O"));
		ADDKEYMAP(MLKEYCODE_P, TEXT("P"));
		ADDKEYMAP(MLKEYCODE_Q, TEXT("Q"));
		ADDKEYMAP(MLKEYCODE_R, TEXT("R"));
		ADDKEYMAP(MLKEYCODE_S, TEXT("S"));
		ADDKEYMAP(MLKEYCODE_T, TEXT("T"));
		ADDKEYMAP(MLKEYCODE_U, TEXT("U"));
		ADDKEYMAP(MLKEYCODE_V, TEXT("V"));
		ADDKEYMAP(MLKEYCODE_W, TEXT("W"));
		ADDKEYMAP(MLKEYCODE_X, TEXT("X"));
		ADDKEYMAP(MLKEYCODE_Y, TEXT("Y"));
		ADDKEYMAP(MLKEYCODE_Z, TEXT("Z"));

		ADDKEYMAP(MLKEYCODE_SEMICOLON, TEXT("Semicolon"));
		ADDKEYMAP(MLKEYCODE_EQUALS, TEXT("Equals"));
		ADDKEYMAP(MLKEYCODE_COMMA, TEXT("Comma"));
		//ADDKEYMAP( '-', TEXT("Underscore") );
		ADDKEYMAP(MLKEYCODE_PERIOD, TEXT("Period"));
		ADDKEYMAP(MLKEYCODE_SLASH, TEXT("Slash"));
		ADDKEYMAP(MLKEYCODE_GRAVE, TEXT("Tilde"));
		ADDKEYMAP(MLKEYCODE_LEFT_BRACKET, TEXT("LeftBracket"));
		ADDKEYMAP(MLKEYCODE_BACKSLASH, TEXT("Backslash"));
		ADDKEYMAP(MLKEYCODE_RIGHT_BRACKET, TEXT("RightBracket"));
		ADDKEYMAP(MLKEYCODE_APOSTROPHE, TEXT("Quote"));
		ADDKEYMAP(MLKEYCODE_SPACE, TEXT("SpaceBar"));

		//ADDKEYMAP( VK_LBUTTON, TEXT("LeftMouseButton") );
		//ADDKEYMAP( VK_RBUTTON, TEXT("RightMouseButton") );
		//ADDKEYMAP( VK_MBUTTON, TEXT("MiddleMouseButton") );

		//ADDKEYMAP( MLKEYCODE_BUTTON_THUMBL, TEXT("ThumbMouseButton") );
		//ADDKEYMAP( MLKEYCODE_BUTTON_THUMBR, TEXT("ThumbMouseButton2") );

		ADDKEYMAP(MLKEYCODE_DEL, TEXT("BackSpace"));
		ADDKEYMAP(MLKEYCODE_TAB, TEXT("Tab"));
		ADDKEYMAP(MLKEYCODE_ENTER, TEXT("Enter"));
		ADDKEYMAP(MLKEYCODE_BREAK, TEXT("Pause"));

		//ADDKEYMAP( VK_CAPITAL, TEXT("CapsLock") );
		ADDKEYMAP(MLKEYCODE_BACK, TEXT("Escape"));
		ADDKEYMAP(MLKEYCODE_SPACE, TEXT("SpaceBar"));
		ADDKEYMAP(MLKEYCODE_PAGE_UP, TEXT("PageUp"));
		ADDKEYMAP(MLKEYCODE_PAGE_DOWN, TEXT("PageDown"));
		//ADDKEYMAP( VK_END, TEXT("End") );
		//ADDKEYMAP( VK_HOME, TEXT("Home") );

		//ADDKEYMAP( MLKEYCODE_DPAD_LEFT, TEXT("Left") );
		//ADDKEYMAP( MLKEYCODE_DPAD_UP, TEXT("Up") );
		//ADDKEYMAP( MLKEYCODE_DPAD_RIGHT, TEXT("Right") );
		//ADDKEYMAP( MLKEYCODE_DPAD_DOWN, TEXT("Down") );

		//ADDKEYMAP( VK_INSERT, TEXT("Insert") );
		ADDKEYMAP(MLKEYCODE_FORWARD_DEL, TEXT("Delete"));

		ADDKEYMAP(MLKEYCODE_STAR, TEXT("Multiply"));
		ADDKEYMAP(MLKEYCODE_PLUS, TEXT("Add"));
		ADDKEYMAP(MLKEYCODE_MINUS, TEXT("Subtract"));
		ADDKEYMAP(MLKEYCODE_COMMA, TEXT("Decimal"));
		//ADDKEYMAP( MLKEYCODE_SLASH, TEXT("Divide") );

		ADDKEYMAP(MLKEYCODE_F1, TEXT("F1"));
		ADDKEYMAP(MLKEYCODE_F2, TEXT("F2"));
		ADDKEYMAP(MLKEYCODE_F3, TEXT("F3"));
		ADDKEYMAP(MLKEYCODE_F4, TEXT("F4"));
		ADDKEYMAP(MLKEYCODE_F5, TEXT("F5"));
		ADDKEYMAP(MLKEYCODE_F6, TEXT("F6"));
		ADDKEYMAP(MLKEYCODE_F7, TEXT("F7"));
		ADDKEYMAP(MLKEYCODE_F8, TEXT("F8"));
		ADDKEYMAP(MLKEYCODE_F9, TEXT("F9"));
		ADDKEYMAP(MLKEYCODE_F10, TEXT("F10"));
		ADDKEYMAP(MLKEYCODE_F11, TEXT("F11"));
		ADDKEYMAP(MLKEYCODE_F12, TEXT("F12"));

		//ADDKEYMAP( MLKEYCODE_NUM, TEXT("NumLock") );

		//ADDKEYMAP( VK_SCROLL, TEXT("ScrollLock") );

		ADDKEYMAP(MLKEYCODE_SHIFT_LEFT, TEXT("LeftShift"));
		ADDKEYMAP(MLKEYCODE_SHIFT_RIGHT, TEXT("RightShift"));
		ADDKEYMAP(MLKEYCODE_CTRL_LEFT, TEXT("LeftControl"));
		ADDKEYMAP(MLKEYCODE_CTRL_RIGHT, TEXT("RightControl"));
		ADDKEYMAP(MLKEYCODE_ALT_LEFT, TEXT("LeftAlt"));
		ADDKEYMAP(MLKEYCODE_ALT_RIGHT, TEXT("RightAlt"));
		ADDKEYMAP(MLKEYCODE_META_LEFT, TEXT("LeftCommand"));
		ADDKEYMAP(MLKEYCODE_META_RIGHT, TEXT("RightCommand"));
	}

	check(NumMappings < MaxMappings);
	return NumMappings;
#undef ADDKEYMAP	
}

uint32 FLuminPlatformInput::GetKeyMap(uint32* KeyCodes, FString* KeyNames, uint32 MaxMappings)
{
#define ADDKEYMAP(KeyCode, KeyName)		if (NumMappings<MaxMappings) { KeyCodes[NumMappings]=KeyCode; if(KeyNames) { KeyNames[NumMappings]=KeyName; } ++NumMappings; };

	uint32 NumMappings = 0;

	if (KeyCodes && (MaxMappings > 0))
	{
		ADDKEYMAP(MLKEYCODE_0, TEXT("Zero"));
		ADDKEYMAP(MLKEYCODE_1, TEXT("One"));
		ADDKEYMAP(MLKEYCODE_2, TEXT("Two"));
		ADDKEYMAP(MLKEYCODE_3, TEXT("Three"));
		ADDKEYMAP(MLKEYCODE_4, TEXT("Four"));
		ADDKEYMAP(MLKEYCODE_5, TEXT("Five"));
		ADDKEYMAP(MLKEYCODE_6, TEXT("Six"));
		ADDKEYMAP(MLKEYCODE_7, TEXT("Seven"));
		ADDKEYMAP(MLKEYCODE_8, TEXT("Eight"));
		ADDKEYMAP(MLKEYCODE_9, TEXT("Nine"));

		ADDKEYMAP(MLKEYCODE_A, TEXT("A"));
		ADDKEYMAP(MLKEYCODE_B, TEXT("B"));
		ADDKEYMAP(MLKEYCODE_C, TEXT("C"));
		ADDKEYMAP(MLKEYCODE_D, TEXT("D"));
		ADDKEYMAP(MLKEYCODE_E, TEXT("E"));
		ADDKEYMAP(MLKEYCODE_F, TEXT("F"));
		ADDKEYMAP(MLKEYCODE_G, TEXT("G"));
		ADDKEYMAP(MLKEYCODE_H, TEXT("H"));
		ADDKEYMAP(MLKEYCODE_I, TEXT("I"));
		ADDKEYMAP(MLKEYCODE_J, TEXT("J"));
		ADDKEYMAP(MLKEYCODE_K, TEXT("K"));
		ADDKEYMAP(MLKEYCODE_L, TEXT("L"));
		ADDKEYMAP(MLKEYCODE_M, TEXT("M"));
		ADDKEYMAP(MLKEYCODE_N, TEXT("N"));
		ADDKEYMAP(MLKEYCODE_O, TEXT("O"));
		ADDKEYMAP(MLKEYCODE_P, TEXT("P"));
		ADDKEYMAP(MLKEYCODE_Q, TEXT("Q"));
		ADDKEYMAP(MLKEYCODE_R, TEXT("R"));
		ADDKEYMAP(MLKEYCODE_S, TEXT("S"));
		ADDKEYMAP(MLKEYCODE_T, TEXT("T"));
		ADDKEYMAP(MLKEYCODE_U, TEXT("U"));
		ADDKEYMAP(MLKEYCODE_V, TEXT("V"));
		ADDKEYMAP(MLKEYCODE_W, TEXT("W"));
		ADDKEYMAP(MLKEYCODE_X, TEXT("X"));
		ADDKEYMAP(MLKEYCODE_Y, TEXT("Y"));
		ADDKEYMAP(MLKEYCODE_Z, TEXT("Z"));

		ADDKEYMAP(MLKEYCODE_SEMICOLON, TEXT("Semicolon"));
		ADDKEYMAP(MLKEYCODE_EQUALS, TEXT("Equals"));
		ADDKEYMAP(MLKEYCODE_COMMA, TEXT("Comma"));
		//ADDKEYMAP( '-', TEXT("Underscore") );
		ADDKEYMAP(MLKEYCODE_PERIOD, TEXT("Period"));
		ADDKEYMAP(MLKEYCODE_SLASH, TEXT("Slash"));
		ADDKEYMAP(MLKEYCODE_GRAVE, TEXT("Tilde"));
		ADDKEYMAP(MLKEYCODE_LEFT_BRACKET, TEXT("LeftBracket"));
		ADDKEYMAP(MLKEYCODE_BACKSLASH, TEXT("Backslash"));
		ADDKEYMAP(MLKEYCODE_RIGHT_BRACKET, TEXT("RightBracket"));
		ADDKEYMAP(MLKEYCODE_APOSTROPHE, TEXT("Quote"));
		ADDKEYMAP(MLKEYCODE_SPACE, TEXT("SpaceBar"));

		//ADDKEYMAP( VK_LBUTTON, TEXT("LeftMouseButton") );
		//ADDKEYMAP( VK_RBUTTON, TEXT("RightMouseButton") );
		//ADDKEYMAP( VK_MBUTTON, TEXT("MiddleMouseButton") );

		ADDKEYMAP(MLKEYCODE_BUTTON_THUMBL, TEXT("ThumbMouseButton"));
		ADDKEYMAP(MLKEYCODE_BUTTON_THUMBR, TEXT("ThumbMouseButton2"));

		ADDKEYMAP(MLKEYCODE_DEL, TEXT("BackSpace"));
		ADDKEYMAP(MLKEYCODE_TAB, TEXT("Tab"));
		ADDKEYMAP(MLKEYCODE_ENTER, TEXT("Enter"));
		//ADDKEYMAP( VK_PAUSE, TEXT("Pause") );

		//ADDKEYMAP( VK_CAPITAL, TEXT("CapsLock") );
		ADDKEYMAP(MLKEYCODE_BACK, TEXT("Escape"));
		ADDKEYMAP(MLKEYCODE_SPACE, TEXT("SpaceBar"));
		ADDKEYMAP(MLKEYCODE_PAGE_UP, TEXT("PageUp"));
		ADDKEYMAP(MLKEYCODE_PAGE_DOWN, TEXT("PageDown"));
		//ADDKEYMAP( VK_END, TEXT("End") );
		//ADDKEYMAP( VK_HOME, TEXT("Home") );

		ADDKEYMAP(MLKEYCODE_DPAD_LEFT, TEXT("Left"));
		ADDKEYMAP(MLKEYCODE_DPAD_UP, TEXT("Up"));
		ADDKEYMAP(MLKEYCODE_DPAD_RIGHT, TEXT("Right"));
		ADDKEYMAP(MLKEYCODE_DPAD_DOWN, TEXT("Down"));

		//ADDKEYMAP( VK_INSERT, TEXT("Insert") );
		//ADDKEYMAP( MLKEYCODE_DEL, TEXT("Delete") );

		ADDKEYMAP(MLKEYCODE_STAR, TEXT("Multiply"));
		ADDKEYMAP(MLKEYCODE_PLUS, TEXT("Add"));
		ADDKEYMAP(MLKEYCODE_MINUS, TEXT("Subtract"));
		ADDKEYMAP(MLKEYCODE_COMMA, TEXT("Decimal"));
		//ADDKEYMAP( MLKEYCODE_SLASH, TEXT("Divide") );

		//ADDKEYMAP( VK_F1, TEXT("F1") );
		//ADDKEYMAP( VK_F2, TEXT("F2") );
		//ADDKEYMAP( VK_F3, TEXT("F3") );
		//ADDKEYMAP( VK_F4, TEXT("F4") );
		//ADDKEYMAP( VK_F5, TEXT("F5") );
		//ADDKEYMAP( VK_F6, TEXT("F6") );
		//ADDKEYMAP( VK_F7, TEXT("F7") );
		//ADDKEYMAP( VK_F8, TEXT("F8") );
		//ADDKEYMAP( VK_F9, TEXT("F9") );
		//ADDKEYMAP( VK_F10, TEXT("F10") );
		//ADDKEYMAP( VK_F11, TEXT("F11") );
		//ADDKEYMAP( VK_F12, TEXT("F12") );

		ADDKEYMAP(MLKEYCODE_NUM, TEXT("NumLock"));

		//ADDKEYMAP( VK_SCROLL, TEXT("ScrollLock") );

		ADDKEYMAP(MLKEYCODE_SHIFT_LEFT, TEXT("LeftShift"));
		ADDKEYMAP(MLKEYCODE_SHIFT_LEFT, TEXT("RightShift"));
		//ADDKEYMAP( VK_LCONTROL, TEXT("LeftControl") );
		//ADDKEYMAP( VK_RCONTROL, TEXT("RightControl") );
		ADDKEYMAP(MLKEYCODE_ALT_LEFT, TEXT("LeftAlt"));
		ADDKEYMAP(MLKEYCODE_ALT_RIGHT, TEXT("RightAlt"));
		//ADDKEYMAP( VK_LWIN, TEXT("LeftCommand") );
		//ADDKEYMAP( VK_RWIN, TEXT("RightCommand") );

		ADDKEYMAP(MLKEYCODE_BACK, TEXT("Lumin_Back"));
		ADDKEYMAP(MLKEYCODE_VOLUME_UP, TEXT("Lumin_Volume_Up"));
		ADDKEYMAP(MLKEYCODE_VOLUME_DOWN, TEXT("Lumin_Volume_Down"));
		ADDKEYMAP(MLKEYCODE_MENU, TEXT("Lumin_Menu"));

	}

	check(NumMappings < MaxMappings);
	return NumMappings;
#undef ADDKEYMAP
}

