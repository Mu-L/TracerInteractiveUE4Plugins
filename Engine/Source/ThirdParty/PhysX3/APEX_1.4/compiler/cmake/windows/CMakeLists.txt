cmake_minimum_required(VERSION 3.3)
include(../common/CMakeLists.txt)


IF(NOT DEFINED TARGET_BUILD_PLATFORM) # Not defined, default to windows
	SET(TARGET_BUILD_PLATFORM "windows")
ENDIF()

SET(PLATFORM_LIST windows)

IF (NOT ${TARGET_BUILD_PLATFORM} IN_LIST PLATFORM_LIST)
	MESSAGE(FATAL_ERROR "Invalid platform:" ${TARGET_BUILD_PLATFORM})
ENDIF()

# TODO: Get real flags
# NOTE: Not sure all projects use all of these flags. 
SET(APEX_ALL_WARNINGS "/Wall /wd4201 /wd4577  /wd4464 /wd4777 /wd4458 /wd4459 /wd4324 /wd4514 /wd4820 /wd4127 /wd4710 /wd4711 /wd4061 /wd4668 /wd4626 /wd4266 /wd4263 /wd4264 /wd4640 /wd4625 /wd4574 /wd4191 /wd4987 /wd4986 /wd4946 /wd4836 /wd4571 /wd4826 /wd4456 /wd4457 /wd4548 /wd4623 /wd4365 /wd5045 /wd5038 /wd4746")

# NOTE: Version here is the version of cl.exe, not Visual Studio.
IF(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC" AND
	NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS 19.0)

	SET(APEX_ALL_WARNINGS "${APEX_ALL_WARNINGS} /wd5026 /wd5027 /wd5032")
ENDIF()


# Removed /arch:SSE2 - generated warning spam and is normal for 64 bit builds. 
# TODO: Make sure it's in the 32 bit build!
SET(CMAKE_CXX_FLAGS "${APEX_ALL_WARNINGS} /GR- /GF /WX /fp:fast /MP")

IF(DEFINED STATIC_WINCRT)
    SET(WINCRT_NDEBUG "/MT")
    SET(WINCRT_DEBUG "/MTd")
ELSE()
    SET(WINCRT_NDEBUG "/MD")
    SET(WINCRT_DEBUG "/MDd")
ENDIF()

SET(CMAKE_CXX_FLAGS_DEBUG "/Od ${WINCRT_DEBUG} /RTCu /Zi")
SET(CMAKE_CXX_FLAGS_CHECKED "/Ox ${WINCRT_NDEBUG} /Zi")
SET(CMAKE_CXX_FLAGS_PROFILE "/Ox ${WINCRT_NDEBUG} /Zi")
SET(CMAKE_CXX_FLAGS_RELEASE "/Ox ${WINCRT_NDEBUG} /Zi")

# Controls PX_NVTX for all projects on windows
SET(APEX_WINDOWS_ENABLE_NVTX 0)

SET(APEX_WINDOWS_COMPILE_DEFS WIN32;_CRT_SECURE_NO_DEPRECATE;_CRT_NONSTDC_NO_DEPRECATE)
SET(APEX_WINDOWS_DEBUG_COMPILE_DEFS _DEBUG;PX_DEBUG;PX_CHECKED;PHYSX_PROFILE_SDK;PX_SUPPORT_VISUAL_DEBUGGER;PX_PROFILE;PX_NVTX=${APEX_WINDOWS_ENABLE_NVTX})
SET(APEX_WINDOWS_CHECKED_COMPILE_DEFS NDEBUG;PX_CHECKED;PHYSX_PROFILE_SDK;PX_SUPPORT_VISUAL_DEBUGGER;PX_ENABLE_CHECKED_ASSERTS;PX_NVTX=${APEX_WINDOWS_ENABLE_NVTX};_SECURE_SCL=0;_ITERATOR_DEBUG_LEVEL=0)
SET(APEX_WINDOWS_PROFILE_COMPILE_DEFS NDEBUG;PHYSX_PROFILE_SDK;PX_SUPPORT_VISUAL_DEBUGGER;PX_PROFILE;PX_NVTX=${APEX_WINDOWS_ENABLE_NVTX};_SECURE_SCL=0;_ITERATOR_DEBUG_LEVEL=0)
SET(APEX_WINDOWS_RELEASE_COMPILE_DEFS NDEBUG;APEX_SHIPPING;_SECURE_SCL=0;_ITERATOR_DEBUG_LEVEL=0)

# Build PDBs for all configurations
SET(CMAKE_SHARED_LINKER_FLAGS "/DEBUG")

FIND_PACKAGE(PxShared REQUIRED)

IF(CMAKE_CL_64)
	ADD_DEFINITIONS(-DWIN64)
ENDIF(CMAKE_CL_64)				

if("${CMAKE_SYSTEM_NAME}" STREQUAL "WindowsStore")
	ADD_DEFINITIONS(-DPX_HOLOLENS)
endif()

if( "${CMAKE_GENERATOR_PLATFORM}" MATCHES "ARM*" ) 
	IF(CMAKE_CL_64)
		SET(LIBPATH_SUFFIX "arm64")
	ELSE(CMAKE_CL_64)
		SET(LIBPATH_SUFFIX "arm")
	ENDIF(CMAKE_CL_64)				
else()
	IF(CMAKE_CL_64)
		SET(LIBPATH_SUFFIX "x64")
	ELSE(CMAKE_CL_64)
		SET(LIBPATH_SUFFIX "x86")
	ENDIF(CMAKE_CL_64)				
endif()

SET(CMAKE_DEBUG_POSTFIX "${CMAKE_DEBUG_POSTFIX}_${LIBPATH_SUFFIX}")
SET(CMAKE_PROFILE_POSTFIX "${CMAKE_PROFILE_POSTFIX}_${LIBPATH_SUFFIX}")
SET(CMAKE_CHECKED_POSTFIX "${CMAKE_CHECKED_POSTFIX}_${LIBPATH_SUFFIX}")
SET(CMAKE_RELEASE_POSTFIX "${CMAKE_RELEASE_POSTFIX}_${LIBPATH_SUFFIX}")

# Add PhysX as a dependency so that we can use project references
ADD_SUBDIRECTORY(${PHYSX_ROOT_DIR}/Source/compiler/cmake/windows "${CMAKE_CURRENT_BINARY_DIR}/physx_bin")

#Include projects
INCLUDE(ApexCommon.cmake)
INCLUDE(ApexClothing.cmake)
INCLUDE(ApexDestructible.cmake)
INCLUDE(ApexLegacy.cmake)
INCLUDE(ApexLoader.cmake)
INCLUDE(ApexFramework.cmake)
INCLUDE(ApexShared.cmake)
INCLUDE(NvParameterized.cmake)
INCLUDE(RenderDebug.cmake)
