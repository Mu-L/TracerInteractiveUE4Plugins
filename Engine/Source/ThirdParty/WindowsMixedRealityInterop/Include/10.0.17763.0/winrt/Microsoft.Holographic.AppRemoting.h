// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.180821.2

#pragma once

#include "winrt/base.h"


static_assert(winrt::check_version(CPPWINRT_VERSION, "1.0.180821.2"), "Mismatched component and base headers.");
#include "winrt/Windows.Foundation.h"
#include "winrt/Windows.Foundation.Collections.h"
#include "winrt/impl/Windows.Graphics.DirectX.Direct3D11.2.h"
#include "winrt/impl/Windows.Media.SpeechRecognition.2.h"
#include "winrt/impl/Windows.Storage.2.h"
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Microsoft.Holographic.AppRemoting.2.h"

namespace winrt::impl {

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IAuthenticationProvider<D>::GetToken(Microsoft::Holographic::AppRemoting::IAuthenticationProviderCallback const& callback) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IAuthenticationProvider)->GetToken(get_abi(callback)));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IAuthenticationProviderCallback<D>::TokenReceived(param::hstring const& token) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IAuthenticationProviderCallback)->TokenReceived(get_abi(token)));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IAuthenticationProviderCallback<D>::Cancel() const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IAuthenticationProviderCallback)->Cancel());
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IAuthenticationReceiver<D>::ValidateToken(param::hstring const& token, Microsoft::Holographic::AppRemoting::IAuthenticationReceiverCallback const& callback) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IAuthenticationReceiver)->ValidateToken(get_abi(token), get_abi(callback)));
}

template <typename D> hstring consume_Microsoft_Holographic_AppRemoting_IAuthenticationReceiver<D>::GetRealm() const
{
    hstring result{};
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IAuthenticationReceiver)->GetRealm(put_abi(result)));
    return result;
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IAuthenticationReceiverCallback<D>::ValidationCompleted(param::hstring const& token, bool isValid) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IAuthenticationReceiverCallback)->ValidationCompleted(get_abi(token), isValid));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IAuthenticationReceiverCallback<D>::Cancel() const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IAuthenticationReceiverCallback)->Cancel());
}

template <typename D> com_array<uint8_t> consume_Microsoft_Holographic_AppRemoting_ICertificate<D>::GetCertificatePfx() const
{
    com_array<uint8_t> result;
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::ICertificate)->GetCertificatePfx(impl::put_size_abi(result), put_abi(result)));
    return result;
}

template <typename D> hstring consume_Microsoft_Holographic_AppRemoting_ICertificate<D>::GetSubjectName() const
{
    hstring result{};
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::ICertificate)->GetSubjectName(put_abi(result)));
    return result;
}

template <typename D> hstring consume_Microsoft_Holographic_AppRemoting_ICertificate<D>::GetPfxPassword() const
{
    hstring result{};
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::ICertificate)->GetPfxPassword(put_abi(result)));
    return result;
}

template <typename D> com_array<uint8_t> consume_Microsoft_Holographic_AppRemoting_ICertificateChain<D>::GetCertificate(uint32_t index) const
{
    com_array<uint8_t> result;
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::ICertificateChain)->GetCertificate(index, impl::put_size_abi(result), put_abi(result)));
    return result;
}

template <typename D> uint32_t consume_Microsoft_Holographic_AppRemoting_ICertificateChain<D>::Length() const
{
    uint32_t value{};
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::ICertificateChain)->get_Length(&value));
    return value;
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_ICertificateProvider<D>::GetCertificate(Microsoft::Holographic::AppRemoting::ICertificateProviderCallback const& callback) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::ICertificateProvider)->GetCertificate(get_abi(callback)));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_ICertificateProviderCallback<D>::CertificateReceived(Microsoft::Holographic::AppRemoting::ICertificate const& certificate) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::ICertificateProviderCallback)->CertificateReceived(get_abi(certificate)));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_ICertificateProviderCallback<D>::Cancel() const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::ICertificateProviderCallback)->Cancel());
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_ICertificateValidationCallback<D>::CertificateValidated(Microsoft::Holographic::AppRemoting::CertificateValidationResult const& result) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::ICertificateValidationCallback)->CertificateValidated(get_abi(result)));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_ICertificateValidationCallback<D>::Cancel() const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::ICertificateValidationCallback)->Cancel());
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_ICertificateValidator<D>::ValidateCertificate(Microsoft::Holographic::AppRemoting::ICertificateChain const& certificateChain, param::hstring const& serverName, bool forceRevocationCheck, optional<Microsoft::Holographic::AppRemoting::CertificateValidationResult> const& systemValidationResult, Microsoft::Holographic::AppRemoting::ICertificateValidationCallback const& callback) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::ICertificateValidator)->ValidateCertificate(get_abi(certificateChain), get_abi(serverName), forceRevocationCheck, get_abi(systemValidationResult), get_abi(callback)));
}

template <typename D> bool consume_Microsoft_Holographic_AppRemoting_ICertificateValidator<D>::PerformSystemValidation() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::ICertificateValidator)->get_PerformSystemValidation(&value));
    return value;
}

template <typename D> winrt::event_token consume_Microsoft_Holographic_AppRemoting_IDataChannel<D>::OnDataReceived(Microsoft::Holographic::AppRemoting::DataChannelReceivedHandler const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IDataChannel)->add_OnDataReceived(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_Holographic_AppRemoting_IDataChannel<D>::OnDataReceived_revoker consume_Microsoft_Holographic_AppRemoting_IDataChannel<D>::OnDataReceived(auto_revoke_t, Microsoft::Holographic::AppRemoting::DataChannelReceivedHandler const& handler) const
{
    return impl::make_event_revoker<D, OnDataReceived_revoker>(this, OnDataReceived(handler));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IDataChannel<D>::OnDataReceived(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::Holographic::AppRemoting::IDataChannel)->remove_OnDataReceived(get_abi(token)));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IDataChannel<D>::SendData(array_view<uint8_t const> data, bool guaranteedDelivery) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IDataChannel)->SendData(data.size(), get_abi(data), guaranteedDelivery));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IDataChannel<D>::Close() const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IDataChannel)->Close());
}

template <typename D> winrt::event_token consume_Microsoft_Holographic_AppRemoting_IDataChannel<D>::OnClosed(Microsoft::Holographic::AppRemoting::DataChannelCloseHandler const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IDataChannel)->add_OnClosed(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_Holographic_AppRemoting_IDataChannel<D>::OnClosed_revoker consume_Microsoft_Holographic_AppRemoting_IDataChannel<D>::OnClosed(auto_revoke_t, Microsoft::Holographic::AppRemoting::DataChannelCloseHandler const& handler) const
{
    return impl::make_event_revoker<D, OnClosed_revoker>(this, OnClosed(handler));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IDataChannel<D>::OnClosed(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::Holographic::AppRemoting::IDataChannel)->remove_OnClosed(get_abi(token)));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IPlayerContext<D>::Connect(param::hstring const& hostname, uint16_t port) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IPlayerContext)->Connect(get_abi(hostname), port));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IPlayerContext<D>::ConnectSecure(param::hstring const& hostname, uint16_t port, Microsoft::Holographic::AppRemoting::IAuthenticationProvider const& authProvider, Microsoft::Holographic::AppRemoting::ICertificateValidator const& certValidator) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IPlayerContext)->ConnectSecure(get_abi(hostname), port, get_abi(authProvider), get_abi(certValidator)));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IPlayerContext<D>::Listen(param::hstring const& localHostname, uint16_t handshakePort, uint16_t primaryTransportPort) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IPlayerContext)->Listen(get_abi(localHostname), handshakePort, primaryTransportPort));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IPlayerContext<D>::ListenSecure(param::hstring const& localHostname, uint16_t handshakePort, uint16_t primaryTransportPort, Microsoft::Holographic::AppRemoting::ICertificateProvider const& provider, Microsoft::Holographic::AppRemoting::IAuthenticationReceiver const& receiver) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IPlayerContext)->ListenSecure(get_abi(localHostname), handshakePort, primaryTransportPort, get_abi(provider), get_abi(receiver)));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IPlayerContext<D>::Disconnect() const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IPlayerContext)->Disconnect());
}

template <typename D> Microsoft::Holographic::AppRemoting::ConnectionState consume_Microsoft_Holographic_AppRemoting_IPlayerContext<D>::ConnectionState() const
{
    Microsoft::Holographic::AppRemoting::ConnectionState value{};
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IPlayerContext)->get_ConnectionState(put_abi(value)));
    return value;
}

template <typename D> winrt::event_token consume_Microsoft_Holographic_AppRemoting_IPlayerContext<D>::OnConnected(Microsoft::Holographic::AppRemoting::OnConnectedHandler const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IPlayerContext)->add_OnConnected(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_Holographic_AppRemoting_IPlayerContext<D>::OnConnected_revoker consume_Microsoft_Holographic_AppRemoting_IPlayerContext<D>::OnConnected(auto_revoke_t, Microsoft::Holographic::AppRemoting::OnConnectedHandler const& handler) const
{
    return impl::make_event_revoker<D, OnConnected_revoker>(this, OnConnected(handler));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IPlayerContext<D>::OnConnected(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::Holographic::AppRemoting::IPlayerContext)->remove_OnConnected(get_abi(token)));
}

template <typename D> winrt::event_token consume_Microsoft_Holographic_AppRemoting_IPlayerContext<D>::OnDisconnected(Microsoft::Holographic::AppRemoting::OnDisconnectedHandler const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IPlayerContext)->add_OnDisconnected(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_Holographic_AppRemoting_IPlayerContext<D>::OnDisconnected_revoker consume_Microsoft_Holographic_AppRemoting_IPlayerContext<D>::OnDisconnected(auto_revoke_t, Microsoft::Holographic::AppRemoting::OnDisconnectedHandler const& handler) const
{
    return impl::make_event_revoker<D, OnDisconnected_revoker>(this, OnDisconnected(handler));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IPlayerContext<D>::OnDisconnected(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::Holographic::AppRemoting::IPlayerContext)->remove_OnDisconnected(get_abi(token)));
}

template <typename D> winrt::event_token consume_Microsoft_Holographic_AppRemoting_IPlayerContext<D>::OnListening(Microsoft::Holographic::AppRemoting::OnListeningHandler const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IPlayerContext)->add_OnListening(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_Holographic_AppRemoting_IPlayerContext<D>::OnListening_revoker consume_Microsoft_Holographic_AppRemoting_IPlayerContext<D>::OnListening(auto_revoke_t, Microsoft::Holographic::AppRemoting::OnListeningHandler const& handler) const
{
    return impl::make_event_revoker<D, OnListening_revoker>(this, OnListening(handler));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IPlayerContext<D>::OnListening(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::Holographic::AppRemoting::IPlayerContext)->remove_OnListening(get_abi(token)));
}

template <typename D> Microsoft::Holographic::AppRemoting::BlitResult consume_Microsoft_Holographic_AppRemoting_IPlayerContext<D>::BlitRemoteFrame() const
{
    Microsoft::Holographic::AppRemoting::BlitResult result{};
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IPlayerContext)->BlitRemoteFrame(put_abi(result)));
    return result;
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IPlayerContext<D>::CreateDataChannel(uint8_t channelId, Microsoft::Holographic::AppRemoting::DataChannelPriority const& priority) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IPlayerContext)->CreateDataChannel(channelId, get_abi(priority)));
}

template <typename D> winrt::event_token consume_Microsoft_Holographic_AppRemoting_IPlayerContext<D>::OnDataChannelCreated(Microsoft::Holographic::AppRemoting::OnDataChannelCreatedHandler const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IPlayerContext)->add_OnDataChannelCreated(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_Holographic_AppRemoting_IPlayerContext<D>::OnDataChannelCreated_revoker consume_Microsoft_Holographic_AppRemoting_IPlayerContext<D>::OnDataChannelCreated(auto_revoke_t, Microsoft::Holographic::AppRemoting::OnDataChannelCreatedHandler const& handler) const
{
    return impl::make_event_revoker<D, OnDataChannelCreated_revoker>(this, OnDataChannelCreated(handler));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IPlayerContext<D>::OnDataChannelCreated(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::Holographic::AppRemoting::IPlayerContext)->remove_OnDataChannelCreated(get_abi(token)));
}

template <typename D> Microsoft::Holographic::AppRemoting::PlayerFrameStatistics consume_Microsoft_Holographic_AppRemoting_IPlayerContext<D>::LastFrameStatistics() const
{
    Microsoft::Holographic::AppRemoting::PlayerFrameStatistics value{};
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IPlayerContext)->get_LastFrameStatistics(put_abi(value)));
    return value;
}

template <typename D> Microsoft::Holographic::AppRemoting::PlayerContext consume_Microsoft_Holographic_AppRemoting_IPlayerContextStatics<D>::Create() const
{
    Microsoft::Holographic::AppRemoting::PlayerContext result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IPlayerContextStatics)->Create(put_abi(result)));
    return result;
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IRemoteContext<D>::Connect(param::hstring const& hostname, uint16_t port) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IRemoteContext)->Connect(get_abi(hostname), port));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IRemoteContext<D>::ConnectSecure(param::hstring const& hostname, uint16_t port, Microsoft::Holographic::AppRemoting::IAuthenticationProvider const& authProvider, Microsoft::Holographic::AppRemoting::ICertificateValidator const& certValidator) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IRemoteContext)->ConnectSecure(get_abi(hostname), port, get_abi(authProvider), get_abi(certValidator)));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IRemoteContext<D>::Listen(param::hstring const& localHostname, uint16_t handshakePort, uint16_t primaryTransportPort) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IRemoteContext)->Listen(get_abi(localHostname), handshakePort, primaryTransportPort));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IRemoteContext<D>::ListenSecure(param::hstring const& localHostname, uint16_t handshakePort, uint16_t primaryTransportPort, Microsoft::Holographic::AppRemoting::ICertificateProvider const& provider, Microsoft::Holographic::AppRemoting::IAuthenticationReceiver const& receiver) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IRemoteContext)->ListenSecure(get_abi(localHostname), handshakePort, primaryTransportPort, get_abi(provider), get_abi(receiver)));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IRemoteContext<D>::Disconnect() const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IRemoteContext)->Disconnect());
}

template <typename D> Microsoft::Holographic::AppRemoting::ConnectionState consume_Microsoft_Holographic_AppRemoting_IRemoteContext<D>::ConnectionState() const
{
    Microsoft::Holographic::AppRemoting::ConnectionState value{};
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IRemoteContext)->get_ConnectionState(put_abi(value)));
    return value;
}

template <typename D> winrt::event_token consume_Microsoft_Holographic_AppRemoting_IRemoteContext<D>::OnConnected(Microsoft::Holographic::AppRemoting::OnConnectedHandler const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IRemoteContext)->add_OnConnected(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_Holographic_AppRemoting_IRemoteContext<D>::OnConnected_revoker consume_Microsoft_Holographic_AppRemoting_IRemoteContext<D>::OnConnected(auto_revoke_t, Microsoft::Holographic::AppRemoting::OnConnectedHandler const& handler) const
{
    return impl::make_event_revoker<D, OnConnected_revoker>(this, OnConnected(handler));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IRemoteContext<D>::OnConnected(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::Holographic::AppRemoting::IRemoteContext)->remove_OnConnected(get_abi(token)));
}

template <typename D> winrt::event_token consume_Microsoft_Holographic_AppRemoting_IRemoteContext<D>::OnDisconnected(Microsoft::Holographic::AppRemoting::OnDisconnectedHandler const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IRemoteContext)->add_OnDisconnected(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_Holographic_AppRemoting_IRemoteContext<D>::OnDisconnected_revoker consume_Microsoft_Holographic_AppRemoting_IRemoteContext<D>::OnDisconnected(auto_revoke_t, Microsoft::Holographic::AppRemoting::OnDisconnectedHandler const& handler) const
{
    return impl::make_event_revoker<D, OnDisconnected_revoker>(this, OnDisconnected(handler));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IRemoteContext<D>::OnDisconnected(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::Holographic::AppRemoting::IRemoteContext)->remove_OnDisconnected(get_abi(token)));
}

template <typename D> winrt::event_token consume_Microsoft_Holographic_AppRemoting_IRemoteContext<D>::OnListening(Microsoft::Holographic::AppRemoting::OnListeningHandler const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IRemoteContext)->add_OnListening(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_Holographic_AppRemoting_IRemoteContext<D>::OnListening_revoker consume_Microsoft_Holographic_AppRemoting_IRemoteContext<D>::OnListening(auto_revoke_t, Microsoft::Holographic::AppRemoting::OnListeningHandler const& handler) const
{
    return impl::make_event_revoker<D, OnListening_revoker>(this, OnListening(handler));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IRemoteContext<D>::OnListening(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::Holographic::AppRemoting::IRemoteContext)->remove_OnListening(get_abi(token)));
}

template <typename D> winrt::event_token consume_Microsoft_Holographic_AppRemoting_IRemoteContext<D>::OnSendFrame(Microsoft::Holographic::AppRemoting::OnSendFrameHandler const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IRemoteContext)->add_OnSendFrame(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_Holographic_AppRemoting_IRemoteContext<D>::OnSendFrame_revoker consume_Microsoft_Holographic_AppRemoting_IRemoteContext<D>::OnSendFrame(auto_revoke_t, Microsoft::Holographic::AppRemoting::OnSendFrameHandler const& handler) const
{
    return impl::make_event_revoker<D, OnSendFrame_revoker>(this, OnSendFrame(handler));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IRemoteContext<D>::OnSendFrame(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::Holographic::AppRemoting::IRemoteContext)->remove_OnSendFrame(get_abi(token)));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IRemoteContext<D>::CreateDataChannel(uint8_t channelId, Microsoft::Holographic::AppRemoting::DataChannelPriority const& priority) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IRemoteContext)->CreateDataChannel(channelId, get_abi(priority)));
}

template <typename D> winrt::event_token consume_Microsoft_Holographic_AppRemoting_IRemoteContext<D>::OnDataChannelCreated(Microsoft::Holographic::AppRemoting::OnDataChannelCreatedHandler const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IRemoteContext)->add_OnDataChannelCreated(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_Holographic_AppRemoting_IRemoteContext<D>::OnDataChannelCreated_revoker consume_Microsoft_Holographic_AppRemoting_IRemoteContext<D>::OnDataChannelCreated(auto_revoke_t, Microsoft::Holographic::AppRemoting::OnDataChannelCreatedHandler const& handler) const
{
    return impl::make_event_revoker<D, OnDataChannelCreated_revoker>(this, OnDataChannelCreated(handler));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IRemoteContext<D>::OnDataChannelCreated(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::Holographic::AppRemoting::IRemoteContext)->remove_OnDataChannelCreated(get_abi(token)));
}

template <typename D> Microsoft::Holographic::AppRemoting::IRemoteSpeech consume_Microsoft_Holographic_AppRemoting_IRemoteContext<D>::GetRemoteSpeech() const
{
    Microsoft::Holographic::AppRemoting::IRemoteSpeech result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IRemoteContext)->GetRemoteSpeech(put_abi(result)));
    return result;
}

template <typename D> Microsoft::Holographic::AppRemoting::RemoteContext consume_Microsoft_Holographic_AppRemoting_IRemoteContextStatics<D>::Create() const
{
    Microsoft::Holographic::AppRemoting::RemoteContext result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IRemoteContextStatics)->Create(put_abi(result)));
    return result;
}

template <typename D> Microsoft::Holographic::AppRemoting::RemoteContext consume_Microsoft_Holographic_AppRemoting_IRemoteContextStatics<D>::Create(uint32_t maxBitrateKbps) const
{
    Microsoft::Holographic::AppRemoting::RemoteContext result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IRemoteContextStatics)->Create2(maxBitrateKbps, put_abi(result)));
    return result;
}

template <typename D> Microsoft::Holographic::AppRemoting::RemoteContext consume_Microsoft_Holographic_AppRemoting_IRemoteContextStatics<D>::Create(uint32_t maxBitrateKbps, bool enableAudio) const
{
    Microsoft::Holographic::AppRemoting::RemoteContext result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IRemoteContextStatics)->Create3(maxBitrateKbps, enableAudio, put_abi(result)));
    return result;
}

template <typename D> Microsoft::Holographic::AppRemoting::RemoteContext consume_Microsoft_Holographic_AppRemoting_IRemoteContextStatics<D>::Create(uint32_t maxBitrateKbps, bool enableAudio, Microsoft::Holographic::AppRemoting::PreferredVideoCodec const& preferredVideoCodec) const
{
    Microsoft::Holographic::AppRemoting::RemoteContext result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IRemoteContextStatics)->Create4(maxBitrateKbps, enableAudio, get_abi(preferredVideoCodec), put_abi(result)));
    return result;
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IRemoteSpeech<D>::ApplyParameters(param::hstring const& language, Windows::Storage::IStorageFile const& grammarFile, array_view<hstring const> dictionary) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IRemoteSpeech)->ApplyParameters(get_abi(language), get_abi(grammarFile), dictionary.size(), get_abi(dictionary)));
}

template <typename D> winrt::event_token consume_Microsoft_Holographic_AppRemoting_IRemoteSpeech<D>::OnRecognizedSpeech(Microsoft::Holographic::AppRemoting::OnRecognizedSpeechHandler const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IRemoteSpeech)->add_OnRecognizedSpeech(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_Holographic_AppRemoting_IRemoteSpeech<D>::OnRecognizedSpeech_revoker consume_Microsoft_Holographic_AppRemoting_IRemoteSpeech<D>::OnRecognizedSpeech(auto_revoke_t, Microsoft::Holographic::AppRemoting::OnRecognizedSpeechHandler const& handler) const
{
    return impl::make_event_revoker<D, OnRecognizedSpeech_revoker>(this, OnRecognizedSpeech(handler));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IRemoteSpeech<D>::OnRecognizedSpeech(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::Holographic::AppRemoting::IRemoteSpeech)->remove_OnRecognizedSpeech(get_abi(token)));
}

template <> struct delegate<Microsoft::Holographic::AppRemoting::DataChannelCloseHandler>
{
    template <typename H>
    struct type : implements_delegate<Microsoft::Holographic::AppRemoting::DataChannelCloseHandler, H>
    {
        type(H&& handler) : implements_delegate<Microsoft::Holographic::AppRemoting::DataChannelCloseHandler, H>(std::forward<H>(handler)) {}

        int32_t WINRT_CALL Invoke() noexcept final
        {
            try
            {
                (*this)();
                return 0;
            }
            catch (...)
            {
                return to_hresult();
            }
        }
    };
};

template <> struct delegate<Microsoft::Holographic::AppRemoting::DataChannelReceivedHandler>
{
    template <typename H>
    struct type : implements_delegate<Microsoft::Holographic::AppRemoting::DataChannelReceivedHandler, H>
    {
        type(H&& handler) : implements_delegate<Microsoft::Holographic::AppRemoting::DataChannelReceivedHandler, H>(std::forward<H>(handler)) {}

        int32_t WINRT_CALL Invoke(uint32_t __dataSize, uint8_t* data) noexcept final
        {
            try
            {
                (*this)(array_view<uint8_t const>(reinterpret_cast<uint8_t const *>(data), reinterpret_cast<uint8_t const *>(data) + __dataSize));
                return 0;
            }
            catch (...)
            {
                return to_hresult();
            }
        }
    };
};

template <> struct delegate<Microsoft::Holographic::AppRemoting::OnConnectedHandler>
{
    template <typename H>
    struct type : implements_delegate<Microsoft::Holographic::AppRemoting::OnConnectedHandler, H>
    {
        type(H&& handler) : implements_delegate<Microsoft::Holographic::AppRemoting::OnConnectedHandler, H>(std::forward<H>(handler)) {}

        int32_t WINRT_CALL Invoke() noexcept final
        {
            try
            {
                (*this)();
                return 0;
            }
            catch (...)
            {
                return to_hresult();
            }
        }
    };
};

template <> struct delegate<Microsoft::Holographic::AppRemoting::OnDataChannelCreatedHandler>
{
    template <typename H>
    struct type : implements_delegate<Microsoft::Holographic::AppRemoting::OnDataChannelCreatedHandler, H>
    {
        type(H&& handler) : implements_delegate<Microsoft::Holographic::AppRemoting::OnDataChannelCreatedHandler, H>(std::forward<H>(handler)) {}

        int32_t WINRT_CALL Invoke(void* dataChannel, uint8_t channelId) noexcept final
        {
            try
            {
                (*this)(*reinterpret_cast<Microsoft::Holographic::AppRemoting::IDataChannel const*>(&dataChannel), channelId);
                return 0;
            }
            catch (...)
            {
                return to_hresult();
            }
        }
    };
};

template <> struct delegate<Microsoft::Holographic::AppRemoting::OnDisconnectedHandler>
{
    template <typename H>
    struct type : implements_delegate<Microsoft::Holographic::AppRemoting::OnDisconnectedHandler, H>
    {
        type(H&& handler) : implements_delegate<Microsoft::Holographic::AppRemoting::OnDisconnectedHandler, H>(std::forward<H>(handler)) {}

        int32_t WINRT_CALL Invoke(Microsoft::Holographic::AppRemoting::ConnectionFailureReason failureReason) noexcept final
        {
            try
            {
                (*this)(*reinterpret_cast<Microsoft::Holographic::AppRemoting::ConnectionFailureReason const*>(&failureReason));
                return 0;
            }
            catch (...)
            {
                return to_hresult();
            }
        }
    };
};

template <> struct delegate<Microsoft::Holographic::AppRemoting::OnListeningHandler>
{
    template <typename H>
    struct type : implements_delegate<Microsoft::Holographic::AppRemoting::OnListeningHandler, H>
    {
        type(H&& handler) : implements_delegate<Microsoft::Holographic::AppRemoting::OnListeningHandler, H>(std::forward<H>(handler)) {}

        int32_t WINRT_CALL Invoke(uint16_t port) noexcept final
        {
            try
            {
                (*this)(port);
                return 0;
            }
            catch (...)
            {
                return to_hresult();
            }
        }
    };
};

template <> struct delegate<Microsoft::Holographic::AppRemoting::OnRecognizedSpeechHandler>
{
    template <typename H>
    struct type : implements_delegate<Microsoft::Holographic::AppRemoting::OnRecognizedSpeechHandler, H>
    {
        type(H&& handler) : implements_delegate<Microsoft::Holographic::AppRemoting::OnRecognizedSpeechHandler, H>(std::forward<H>(handler)) {}

        int32_t WINRT_CALL Invoke(struct struct_Microsoft_Holographic_AppRemoting_RecognizedSpeech recognizedSpeech) noexcept final
        {
            try
            {
                (*this)(*reinterpret_cast<Microsoft::Holographic::AppRemoting::RecognizedSpeech const*>(&recognizedSpeech));
                return 0;
            }
            catch (...)
            {
                return to_hresult();
            }
        }
    };
};

template <> struct delegate<Microsoft::Holographic::AppRemoting::OnSendFrameHandler>
{
    template <typename H>
    struct type : implements_delegate<Microsoft::Holographic::AppRemoting::OnSendFrameHandler, H>
    {
        type(H&& handler) : implements_delegate<Microsoft::Holographic::AppRemoting::OnSendFrameHandler, H>(std::forward<H>(handler)) {}

        int32_t WINRT_CALL Invoke(void* texture) noexcept final
        {
            try
            {
                (*this)(*reinterpret_cast<Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface const*>(&texture));
                return 0;
            }
            catch (...)
            {
                return to_hresult();
            }
        }
    };
};

template <typename D>
struct produce<D, Microsoft::Holographic::AppRemoting::IAuthenticationProvider> : produce_base<D, Microsoft::Holographic::AppRemoting::IAuthenticationProvider>
{
    int32_t WINRT_CALL GetToken(void* callback) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetToken, WINRT_WRAP(void), Microsoft::Holographic::AppRemoting::IAuthenticationProviderCallback const&);
            this->shim().GetToken(*reinterpret_cast<Microsoft::Holographic::AppRemoting::IAuthenticationProviderCallback const*>(&callback));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Holographic::AppRemoting::IAuthenticationProviderCallback> : produce_base<D, Microsoft::Holographic::AppRemoting::IAuthenticationProviderCallback>
{
    int32_t WINRT_CALL TokenReceived(void* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TokenReceived, WINRT_WRAP(void), hstring const&);
            this->shim().TokenReceived(*reinterpret_cast<hstring const*>(&token));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL Cancel() noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Cancel, WINRT_WRAP(void));
            this->shim().Cancel();
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Holographic::AppRemoting::IAuthenticationReceiver> : produce_base<D, Microsoft::Holographic::AppRemoting::IAuthenticationReceiver>
{
    int32_t WINRT_CALL ValidateToken(void* token, void* callback) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ValidateToken, WINRT_WRAP(void), hstring const&, Microsoft::Holographic::AppRemoting::IAuthenticationReceiverCallback const&);
            this->shim().ValidateToken(*reinterpret_cast<hstring const*>(&token), *reinterpret_cast<Microsoft::Holographic::AppRemoting::IAuthenticationReceiverCallback const*>(&callback));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetRealm(void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetRealm, WINRT_WRAP(hstring));
            *result = detach_from<hstring>(this->shim().GetRealm());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Holographic::AppRemoting::IAuthenticationReceiverCallback> : produce_base<D, Microsoft::Holographic::AppRemoting::IAuthenticationReceiverCallback>
{
    int32_t WINRT_CALL ValidationCompleted(void* token, bool isValid) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ValidationCompleted, WINRT_WRAP(void), hstring const&, bool);
            this->shim().ValidationCompleted(*reinterpret_cast<hstring const*>(&token), isValid);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL Cancel() noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Cancel, WINRT_WRAP(void));
            this->shim().Cancel();
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Holographic::AppRemoting::ICertificate> : produce_base<D, Microsoft::Holographic::AppRemoting::ICertificate>
{
    int32_t WINRT_CALL GetCertificatePfx(uint32_t* __resultSize, uint8_t** result) noexcept final
    {
        try
        {
            *__resultSize = 0;
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetCertificatePfx, WINRT_WRAP(com_array<uint8_t>));
            std::tie(*__resultSize, *result) = detach_abi(this->shim().GetCertificatePfx());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetSubjectName(void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetSubjectName, WINRT_WRAP(hstring));
            *result = detach_from<hstring>(this->shim().GetSubjectName());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetPfxPassword(void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetPfxPassword, WINRT_WRAP(hstring));
            *result = detach_from<hstring>(this->shim().GetPfxPassword());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Holographic::AppRemoting::ICertificateChain> : produce_base<D, Microsoft::Holographic::AppRemoting::ICertificateChain>
{
    int32_t WINRT_CALL GetCertificate(uint32_t index, uint32_t* __resultSize, uint8_t** result) noexcept final
    {
        try
        {
            *__resultSize = 0;
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetCertificate, WINRT_WRAP(com_array<uint8_t>), uint32_t);
            std::tie(*__resultSize, *result) = detach_abi(this->shim().GetCertificate(index));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Length(uint32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Length, WINRT_WRAP(uint32_t));
            *value = detach_from<uint32_t>(this->shim().Length());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Holographic::AppRemoting::ICertificateProvider> : produce_base<D, Microsoft::Holographic::AppRemoting::ICertificateProvider>
{
    int32_t WINRT_CALL GetCertificate(void* callback) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetCertificate, WINRT_WRAP(void), Microsoft::Holographic::AppRemoting::ICertificateProviderCallback const&);
            this->shim().GetCertificate(*reinterpret_cast<Microsoft::Holographic::AppRemoting::ICertificateProviderCallback const*>(&callback));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Holographic::AppRemoting::ICertificateProviderCallback> : produce_base<D, Microsoft::Holographic::AppRemoting::ICertificateProviderCallback>
{
    int32_t WINRT_CALL CertificateReceived(void* certificate) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CertificateReceived, WINRT_WRAP(void), Microsoft::Holographic::AppRemoting::ICertificate const&);
            this->shim().CertificateReceived(*reinterpret_cast<Microsoft::Holographic::AppRemoting::ICertificate const*>(&certificate));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL Cancel() noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Cancel, WINRT_WRAP(void));
            this->shim().Cancel();
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Holographic::AppRemoting::ICertificateValidationCallback> : produce_base<D, Microsoft::Holographic::AppRemoting::ICertificateValidationCallback>
{
    int32_t WINRT_CALL CertificateValidated(struct struct_Microsoft_Holographic_AppRemoting_CertificateValidationResult result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CertificateValidated, WINRT_WRAP(void), Microsoft::Holographic::AppRemoting::CertificateValidationResult const&);
            this->shim().CertificateValidated(*reinterpret_cast<Microsoft::Holographic::AppRemoting::CertificateValidationResult const*>(&result));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL Cancel() noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Cancel, WINRT_WRAP(void));
            this->shim().Cancel();
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Holographic::AppRemoting::ICertificateValidator> : produce_base<D, Microsoft::Holographic::AppRemoting::ICertificateValidator>
{
    int32_t WINRT_CALL ValidateCertificate(void* certificateChain, void* serverName, bool forceRevocationCheck, void* systemValidationResult, void* callback) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ValidateCertificate, WINRT_WRAP(void), Microsoft::Holographic::AppRemoting::ICertificateChain const&, hstring const&, bool, Windows::Foundation::IReference<Microsoft::Holographic::AppRemoting::CertificateValidationResult> const&, Microsoft::Holographic::AppRemoting::ICertificateValidationCallback const&);
            this->shim().ValidateCertificate(*reinterpret_cast<Microsoft::Holographic::AppRemoting::ICertificateChain const*>(&certificateChain), *reinterpret_cast<hstring const*>(&serverName), forceRevocationCheck, *reinterpret_cast<Windows::Foundation::IReference<Microsoft::Holographic::AppRemoting::CertificateValidationResult> const*>(&systemValidationResult), *reinterpret_cast<Microsoft::Holographic::AppRemoting::ICertificateValidationCallback const*>(&callback));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PerformSystemValidation(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PerformSystemValidation, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().PerformSystemValidation());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Holographic::AppRemoting::IDataChannel> : produce_base<D, Microsoft::Holographic::AppRemoting::IDataChannel>
{
    int32_t WINRT_CALL add_OnDataReceived(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OnDataReceived, WINRT_WRAP(winrt::event_token), Microsoft::Holographic::AppRemoting::DataChannelReceivedHandler const&);
            *token = detach_from<winrt::event_token>(this->shim().OnDataReceived(*reinterpret_cast<Microsoft::Holographic::AppRemoting::DataChannelReceivedHandler const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_OnDataReceived(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(OnDataReceived, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().OnDataReceived(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL SendData(uint32_t __dataSize, uint8_t* data, bool guaranteedDelivery) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SendData, WINRT_WRAP(void), array_view<uint8_t const>, bool);
            this->shim().SendData(array_view<uint8_t const>(reinterpret_cast<uint8_t const *>(data), reinterpret_cast<uint8_t const *>(data) + __dataSize), guaranteedDelivery);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL Close() noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Close, WINRT_WRAP(void));
            this->shim().Close();
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL add_OnClosed(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OnClosed, WINRT_WRAP(winrt::event_token), Microsoft::Holographic::AppRemoting::DataChannelCloseHandler const&);
            *token = detach_from<winrt::event_token>(this->shim().OnClosed(*reinterpret_cast<Microsoft::Holographic::AppRemoting::DataChannelCloseHandler const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_OnClosed(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(OnClosed, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().OnClosed(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }
};

template <typename D>
struct produce<D, Microsoft::Holographic::AppRemoting::IPlayerContext> : produce_base<D, Microsoft::Holographic::AppRemoting::IPlayerContext>
{
    int32_t WINRT_CALL Connect(void* hostname, uint16_t port) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Connect, WINRT_WRAP(void), hstring const&, uint16_t);
            this->shim().Connect(*reinterpret_cast<hstring const*>(&hostname), port);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL ConnectSecure(void* hostname, uint16_t port, void* authProvider, void* certValidator) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ConnectSecure, WINRT_WRAP(void), hstring const&, uint16_t, Microsoft::Holographic::AppRemoting::IAuthenticationProvider const&, Microsoft::Holographic::AppRemoting::ICertificateValidator const&);
            this->shim().ConnectSecure(*reinterpret_cast<hstring const*>(&hostname), port, *reinterpret_cast<Microsoft::Holographic::AppRemoting::IAuthenticationProvider const*>(&authProvider), *reinterpret_cast<Microsoft::Holographic::AppRemoting::ICertificateValidator const*>(&certValidator));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL Listen(void* localHostname, uint16_t handshakePort, uint16_t primaryTransportPort) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Listen, WINRT_WRAP(void), hstring const&, uint16_t, uint16_t);
            this->shim().Listen(*reinterpret_cast<hstring const*>(&localHostname), handshakePort, primaryTransportPort);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL ListenSecure(void* localHostname, uint16_t handshakePort, uint16_t primaryTransportPort, void* provider, void* receiver) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ListenSecure, WINRT_WRAP(void), hstring const&, uint16_t, uint16_t, Microsoft::Holographic::AppRemoting::ICertificateProvider const&, Microsoft::Holographic::AppRemoting::IAuthenticationReceiver const&);
            this->shim().ListenSecure(*reinterpret_cast<hstring const*>(&localHostname), handshakePort, primaryTransportPort, *reinterpret_cast<Microsoft::Holographic::AppRemoting::ICertificateProvider const*>(&provider), *reinterpret_cast<Microsoft::Holographic::AppRemoting::IAuthenticationReceiver const*>(&receiver));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL Disconnect() noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Disconnect, WINRT_WRAP(void));
            this->shim().Disconnect();
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ConnectionState(Microsoft::Holographic::AppRemoting::ConnectionState* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ConnectionState, WINRT_WRAP(Microsoft::Holographic::AppRemoting::ConnectionState));
            *value = detach_from<Microsoft::Holographic::AppRemoting::ConnectionState>(this->shim().ConnectionState());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL add_OnConnected(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OnConnected, WINRT_WRAP(winrt::event_token), Microsoft::Holographic::AppRemoting::OnConnectedHandler const&);
            *token = detach_from<winrt::event_token>(this->shim().OnConnected(*reinterpret_cast<Microsoft::Holographic::AppRemoting::OnConnectedHandler const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_OnConnected(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(OnConnected, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().OnConnected(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL add_OnDisconnected(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OnDisconnected, WINRT_WRAP(winrt::event_token), Microsoft::Holographic::AppRemoting::OnDisconnectedHandler const&);
            *token = detach_from<winrt::event_token>(this->shim().OnDisconnected(*reinterpret_cast<Microsoft::Holographic::AppRemoting::OnDisconnectedHandler const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_OnDisconnected(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(OnDisconnected, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().OnDisconnected(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL add_OnListening(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OnListening, WINRT_WRAP(winrt::event_token), Microsoft::Holographic::AppRemoting::OnListeningHandler const&);
            *token = detach_from<winrt::event_token>(this->shim().OnListening(*reinterpret_cast<Microsoft::Holographic::AppRemoting::OnListeningHandler const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_OnListening(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(OnListening, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().OnListening(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL BlitRemoteFrame(Microsoft::Holographic::AppRemoting::BlitResult* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BlitRemoteFrame, WINRT_WRAP(Microsoft::Holographic::AppRemoting::BlitResult));
            *result = detach_from<Microsoft::Holographic::AppRemoting::BlitResult>(this->shim().BlitRemoteFrame());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateDataChannel(uint8_t channelId, Microsoft::Holographic::AppRemoting::DataChannelPriority priority) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateDataChannel, WINRT_WRAP(void), uint8_t, Microsoft::Holographic::AppRemoting::DataChannelPriority const&);
            this->shim().CreateDataChannel(channelId, *reinterpret_cast<Microsoft::Holographic::AppRemoting::DataChannelPriority const*>(&priority));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL add_OnDataChannelCreated(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OnDataChannelCreated, WINRT_WRAP(winrt::event_token), Microsoft::Holographic::AppRemoting::OnDataChannelCreatedHandler const&);
            *token = detach_from<winrt::event_token>(this->shim().OnDataChannelCreated(*reinterpret_cast<Microsoft::Holographic::AppRemoting::OnDataChannelCreatedHandler const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_OnDataChannelCreated(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(OnDataChannelCreated, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().OnDataChannelCreated(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL get_LastFrameStatistics(struct struct_Microsoft_Holographic_AppRemoting_PlayerFrameStatistics* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LastFrameStatistics, WINRT_WRAP(Microsoft::Holographic::AppRemoting::PlayerFrameStatistics));
            *value = detach_from<Microsoft::Holographic::AppRemoting::PlayerFrameStatistics>(this->shim().LastFrameStatistics());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Holographic::AppRemoting::IPlayerContextStatics> : produce_base<D, Microsoft::Holographic::AppRemoting::IPlayerContextStatics>
{
    int32_t WINRT_CALL Create(void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Create, WINRT_WRAP(Microsoft::Holographic::AppRemoting::PlayerContext));
            *result = detach_from<Microsoft::Holographic::AppRemoting::PlayerContext>(this->shim().Create());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Holographic::AppRemoting::IRemoteContext> : produce_base<D, Microsoft::Holographic::AppRemoting::IRemoteContext>
{
    int32_t WINRT_CALL Connect(void* hostname, uint16_t port) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Connect, WINRT_WRAP(void), hstring const&, uint16_t);
            this->shim().Connect(*reinterpret_cast<hstring const*>(&hostname), port);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL ConnectSecure(void* hostname, uint16_t port, void* authProvider, void* certValidator) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ConnectSecure, WINRT_WRAP(void), hstring const&, uint16_t, Microsoft::Holographic::AppRemoting::IAuthenticationProvider const&, Microsoft::Holographic::AppRemoting::ICertificateValidator const&);
            this->shim().ConnectSecure(*reinterpret_cast<hstring const*>(&hostname), port, *reinterpret_cast<Microsoft::Holographic::AppRemoting::IAuthenticationProvider const*>(&authProvider), *reinterpret_cast<Microsoft::Holographic::AppRemoting::ICertificateValidator const*>(&certValidator));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL Listen(void* localHostname, uint16_t handshakePort, uint16_t primaryTransportPort) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Listen, WINRT_WRAP(void), hstring const&, uint16_t, uint16_t);
            this->shim().Listen(*reinterpret_cast<hstring const*>(&localHostname), handshakePort, primaryTransportPort);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL ListenSecure(void* localHostname, uint16_t handshakePort, uint16_t primaryTransportPort, void* provider, void* receiver) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ListenSecure, WINRT_WRAP(void), hstring const&, uint16_t, uint16_t, Microsoft::Holographic::AppRemoting::ICertificateProvider const&, Microsoft::Holographic::AppRemoting::IAuthenticationReceiver const&);
            this->shim().ListenSecure(*reinterpret_cast<hstring const*>(&localHostname), handshakePort, primaryTransportPort, *reinterpret_cast<Microsoft::Holographic::AppRemoting::ICertificateProvider const*>(&provider), *reinterpret_cast<Microsoft::Holographic::AppRemoting::IAuthenticationReceiver const*>(&receiver));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL Disconnect() noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Disconnect, WINRT_WRAP(void));
            this->shim().Disconnect();
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ConnectionState(Microsoft::Holographic::AppRemoting::ConnectionState* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ConnectionState, WINRT_WRAP(Microsoft::Holographic::AppRemoting::ConnectionState));
            *value = detach_from<Microsoft::Holographic::AppRemoting::ConnectionState>(this->shim().ConnectionState());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL add_OnConnected(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OnConnected, WINRT_WRAP(winrt::event_token), Microsoft::Holographic::AppRemoting::OnConnectedHandler const&);
            *token = detach_from<winrt::event_token>(this->shim().OnConnected(*reinterpret_cast<Microsoft::Holographic::AppRemoting::OnConnectedHandler const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_OnConnected(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(OnConnected, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().OnConnected(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL add_OnDisconnected(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OnDisconnected, WINRT_WRAP(winrt::event_token), Microsoft::Holographic::AppRemoting::OnDisconnectedHandler const&);
            *token = detach_from<winrt::event_token>(this->shim().OnDisconnected(*reinterpret_cast<Microsoft::Holographic::AppRemoting::OnDisconnectedHandler const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_OnDisconnected(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(OnDisconnected, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().OnDisconnected(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL add_OnListening(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OnListening, WINRT_WRAP(winrt::event_token), Microsoft::Holographic::AppRemoting::OnListeningHandler const&);
            *token = detach_from<winrt::event_token>(this->shim().OnListening(*reinterpret_cast<Microsoft::Holographic::AppRemoting::OnListeningHandler const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_OnListening(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(OnListening, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().OnListening(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL add_OnSendFrame(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OnSendFrame, WINRT_WRAP(winrt::event_token), Microsoft::Holographic::AppRemoting::OnSendFrameHandler const&);
            *token = detach_from<winrt::event_token>(this->shim().OnSendFrame(*reinterpret_cast<Microsoft::Holographic::AppRemoting::OnSendFrameHandler const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_OnSendFrame(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(OnSendFrame, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().OnSendFrame(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL CreateDataChannel(uint8_t channelId, Microsoft::Holographic::AppRemoting::DataChannelPriority priority) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateDataChannel, WINRT_WRAP(void), uint8_t, Microsoft::Holographic::AppRemoting::DataChannelPriority const&);
            this->shim().CreateDataChannel(channelId, *reinterpret_cast<Microsoft::Holographic::AppRemoting::DataChannelPriority const*>(&priority));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL add_OnDataChannelCreated(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OnDataChannelCreated, WINRT_WRAP(winrt::event_token), Microsoft::Holographic::AppRemoting::OnDataChannelCreatedHandler const&);
            *token = detach_from<winrt::event_token>(this->shim().OnDataChannelCreated(*reinterpret_cast<Microsoft::Holographic::AppRemoting::OnDataChannelCreatedHandler const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_OnDataChannelCreated(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(OnDataChannelCreated, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().OnDataChannelCreated(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL GetRemoteSpeech(void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetRemoteSpeech, WINRT_WRAP(Microsoft::Holographic::AppRemoting::IRemoteSpeech));
            *result = detach_from<Microsoft::Holographic::AppRemoting::IRemoteSpeech>(this->shim().GetRemoteSpeech());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Holographic::AppRemoting::IRemoteContextStatics> : produce_base<D, Microsoft::Holographic::AppRemoting::IRemoteContextStatics>
{
    int32_t WINRT_CALL Create(void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Create, WINRT_WRAP(Microsoft::Holographic::AppRemoting::RemoteContext));
            *result = detach_from<Microsoft::Holographic::AppRemoting::RemoteContext>(this->shim().Create());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL Create2(uint32_t maxBitrateKbps, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Create, WINRT_WRAP(Microsoft::Holographic::AppRemoting::RemoteContext), uint32_t);
            *result = detach_from<Microsoft::Holographic::AppRemoting::RemoteContext>(this->shim().Create(maxBitrateKbps));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL Create3(uint32_t maxBitrateKbps, bool enableAudio, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Create, WINRT_WRAP(Microsoft::Holographic::AppRemoting::RemoteContext), uint32_t, bool);
            *result = detach_from<Microsoft::Holographic::AppRemoting::RemoteContext>(this->shim().Create(maxBitrateKbps, enableAudio));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL Create4(uint32_t maxBitrateKbps, bool enableAudio, Microsoft::Holographic::AppRemoting::PreferredVideoCodec preferredVideoCodec, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Create, WINRT_WRAP(Microsoft::Holographic::AppRemoting::RemoteContext), uint32_t, bool, Microsoft::Holographic::AppRemoting::PreferredVideoCodec const&);
            *result = detach_from<Microsoft::Holographic::AppRemoting::RemoteContext>(this->shim().Create(maxBitrateKbps, enableAudio, *reinterpret_cast<Microsoft::Holographic::AppRemoting::PreferredVideoCodec const*>(&preferredVideoCodec)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Holographic::AppRemoting::IRemoteSpeech> : produce_base<D, Microsoft::Holographic::AppRemoting::IRemoteSpeech>
{
    int32_t WINRT_CALL ApplyParameters(void* language, void* grammarFile, uint32_t __dictionarySize, void** dictionary) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ApplyParameters, WINRT_WRAP(void), hstring const&, Windows::Storage::IStorageFile const&, array_view<hstring const>);
            this->shim().ApplyParameters(*reinterpret_cast<hstring const*>(&language), *reinterpret_cast<Windows::Storage::IStorageFile const*>(&grammarFile), array_view<hstring const>(reinterpret_cast<hstring const *>(dictionary), reinterpret_cast<hstring const *>(dictionary) + __dictionarySize));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL add_OnRecognizedSpeech(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OnRecognizedSpeech, WINRT_WRAP(winrt::event_token), Microsoft::Holographic::AppRemoting::OnRecognizedSpeechHandler const&);
            *token = detach_from<winrt::event_token>(this->shim().OnRecognizedSpeech(*reinterpret_cast<Microsoft::Holographic::AppRemoting::OnRecognizedSpeechHandler const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_OnRecognizedSpeech(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(OnRecognizedSpeech, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().OnRecognizedSpeech(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }
};

}

WINRT_EXPORT namespace winrt::Microsoft::Holographic::AppRemoting {

inline Microsoft::Holographic::AppRemoting::PlayerContext PlayerContext::Create()
{
    return impl::call_factory<PlayerContext, Microsoft::Holographic::AppRemoting::IPlayerContextStatics>([&](auto&& f) { return f.Create(); });
}

inline Microsoft::Holographic::AppRemoting::RemoteContext RemoteContext::Create()
{
    return impl::call_factory<RemoteContext, Microsoft::Holographic::AppRemoting::IRemoteContextStatics>([&](auto&& f) { return f.Create(); });
}

inline Microsoft::Holographic::AppRemoting::RemoteContext RemoteContext::Create(uint32_t maxBitrateKbps)
{
    return impl::call_factory<RemoteContext, Microsoft::Holographic::AppRemoting::IRemoteContextStatics>([&](auto&& f) { return f.Create(maxBitrateKbps); });
}

inline Microsoft::Holographic::AppRemoting::RemoteContext RemoteContext::Create(uint32_t maxBitrateKbps, bool enableAudio)
{
    return impl::call_factory<RemoteContext, Microsoft::Holographic::AppRemoting::IRemoteContextStatics>([&](auto&& f) { return f.Create(maxBitrateKbps, enableAudio); });
}

inline Microsoft::Holographic::AppRemoting::RemoteContext RemoteContext::Create(uint32_t maxBitrateKbps, bool enableAudio, Microsoft::Holographic::AppRemoting::PreferredVideoCodec const& preferredVideoCodec)
{
    return impl::call_factory<RemoteContext, Microsoft::Holographic::AppRemoting::IRemoteContextStatics>([&](auto&& f) { return f.Create(maxBitrateKbps, enableAudio, preferredVideoCodec); });
}

template <typename L> DataChannelCloseHandler::DataChannelCloseHandler(L handler) :
    DataChannelCloseHandler(impl::make_delegate<DataChannelCloseHandler>(std::forward<L>(handler)))
{}

template <typename F> DataChannelCloseHandler::DataChannelCloseHandler(F* handler) :
    DataChannelCloseHandler([=](auto&&... args) { return handler(args...); })
{}

template <typename O, typename M> DataChannelCloseHandler::DataChannelCloseHandler(O* object, M method) :
    DataChannelCloseHandler([=](auto&&... args) { return ((*object).*(method))(args...); })
{}

template <typename O, typename M> DataChannelCloseHandler::DataChannelCloseHandler(com_ptr<O>&& object, M method) :
    DataChannelCloseHandler([o = std::move(object), method](auto&&... args) { return ((*o).*(method))(args...); })
{}

template <typename O, typename M> DataChannelCloseHandler::DataChannelCloseHandler(weak_ref<O>&& object, M method) :
    DataChannelCloseHandler([o = std::move(object), method](auto&&... args) { if (auto s = o.get()) { ((*s).*(method))(args...); } })
{}

inline void DataChannelCloseHandler::operator()() const
{
    check_hresult((*(impl::abi_t<DataChannelCloseHandler>**)this)->Invoke());
}

template <typename L> DataChannelReceivedHandler::DataChannelReceivedHandler(L handler) :
    DataChannelReceivedHandler(impl::make_delegate<DataChannelReceivedHandler>(std::forward<L>(handler)))
{}

template <typename F> DataChannelReceivedHandler::DataChannelReceivedHandler(F* handler) :
    DataChannelReceivedHandler([=](auto&&... args) { return handler(args...); })
{}

template <typename O, typename M> DataChannelReceivedHandler::DataChannelReceivedHandler(O* object, M method) :
    DataChannelReceivedHandler([=](auto&&... args) { return ((*object).*(method))(args...); })
{}

template <typename O, typename M> DataChannelReceivedHandler::DataChannelReceivedHandler(com_ptr<O>&& object, M method) :
    DataChannelReceivedHandler([o = std::move(object), method](auto&&... args) { return ((*o).*(method))(args...); })
{}

template <typename O, typename M> DataChannelReceivedHandler::DataChannelReceivedHandler(weak_ref<O>&& object, M method) :
    DataChannelReceivedHandler([o = std::move(object), method](auto&&... args) { if (auto s = o.get()) { ((*s).*(method))(args...); } })
{}

inline void DataChannelReceivedHandler::operator()(array_view<uint8_t const> data) const
{
    check_hresult((*(impl::abi_t<DataChannelReceivedHandler>**)this)->Invoke(data.size(), get_abi(data)));
}

template <typename L> OnConnectedHandler::OnConnectedHandler(L handler) :
    OnConnectedHandler(impl::make_delegate<OnConnectedHandler>(std::forward<L>(handler)))
{}

template <typename F> OnConnectedHandler::OnConnectedHandler(F* handler) :
    OnConnectedHandler([=](auto&&... args) { return handler(args...); })
{}

template <typename O, typename M> OnConnectedHandler::OnConnectedHandler(O* object, M method) :
    OnConnectedHandler([=](auto&&... args) { return ((*object).*(method))(args...); })
{}

template <typename O, typename M> OnConnectedHandler::OnConnectedHandler(com_ptr<O>&& object, M method) :
    OnConnectedHandler([o = std::move(object), method](auto&&... args) { return ((*o).*(method))(args...); })
{}

template <typename O, typename M> OnConnectedHandler::OnConnectedHandler(weak_ref<O>&& object, M method) :
    OnConnectedHandler([o = std::move(object), method](auto&&... args) { if (auto s = o.get()) { ((*s).*(method))(args...); } })
{}

inline void OnConnectedHandler::operator()() const
{
    check_hresult((*(impl::abi_t<OnConnectedHandler>**)this)->Invoke());
}

template <typename L> OnDataChannelCreatedHandler::OnDataChannelCreatedHandler(L handler) :
    OnDataChannelCreatedHandler(impl::make_delegate<OnDataChannelCreatedHandler>(std::forward<L>(handler)))
{}

template <typename F> OnDataChannelCreatedHandler::OnDataChannelCreatedHandler(F* handler) :
    OnDataChannelCreatedHandler([=](auto&&... args) { return handler(args...); })
{}

template <typename O, typename M> OnDataChannelCreatedHandler::OnDataChannelCreatedHandler(O* object, M method) :
    OnDataChannelCreatedHandler([=](auto&&... args) { return ((*object).*(method))(args...); })
{}

template <typename O, typename M> OnDataChannelCreatedHandler::OnDataChannelCreatedHandler(com_ptr<O>&& object, M method) :
    OnDataChannelCreatedHandler([o = std::move(object), method](auto&&... args) { return ((*o).*(method))(args...); })
{}

template <typename O, typename M> OnDataChannelCreatedHandler::OnDataChannelCreatedHandler(weak_ref<O>&& object, M method) :
    OnDataChannelCreatedHandler([o = std::move(object), method](auto&&... args) { if (auto s = o.get()) { ((*s).*(method))(args...); } })
{}

inline void OnDataChannelCreatedHandler::operator()(Microsoft::Holographic::AppRemoting::IDataChannel const& dataChannel, uint8_t channelId) const
{
    check_hresult((*(impl::abi_t<OnDataChannelCreatedHandler>**)this)->Invoke(get_abi(dataChannel), channelId));
}

template <typename L> OnDisconnectedHandler::OnDisconnectedHandler(L handler) :
    OnDisconnectedHandler(impl::make_delegate<OnDisconnectedHandler>(std::forward<L>(handler)))
{}

template <typename F> OnDisconnectedHandler::OnDisconnectedHandler(F* handler) :
    OnDisconnectedHandler([=](auto&&... args) { return handler(args...); })
{}

template <typename O, typename M> OnDisconnectedHandler::OnDisconnectedHandler(O* object, M method) :
    OnDisconnectedHandler([=](auto&&... args) { return ((*object).*(method))(args...); })
{}

template <typename O, typename M> OnDisconnectedHandler::OnDisconnectedHandler(com_ptr<O>&& object, M method) :
    OnDisconnectedHandler([o = std::move(object), method](auto&&... args) { return ((*o).*(method))(args...); })
{}

template <typename O, typename M> OnDisconnectedHandler::OnDisconnectedHandler(weak_ref<O>&& object, M method) :
    OnDisconnectedHandler([o = std::move(object), method](auto&&... args) { if (auto s = o.get()) { ((*s).*(method))(args...); } })
{}

inline void OnDisconnectedHandler::operator()(Microsoft::Holographic::AppRemoting::ConnectionFailureReason const& failureReason) const
{
    check_hresult((*(impl::abi_t<OnDisconnectedHandler>**)this)->Invoke(get_abi(failureReason)));
}

template <typename L> OnListeningHandler::OnListeningHandler(L handler) :
    OnListeningHandler(impl::make_delegate<OnListeningHandler>(std::forward<L>(handler)))
{}

template <typename F> OnListeningHandler::OnListeningHandler(F* handler) :
    OnListeningHandler([=](auto&&... args) { return handler(args...); })
{}

template <typename O, typename M> OnListeningHandler::OnListeningHandler(O* object, M method) :
    OnListeningHandler([=](auto&&... args) { return ((*object).*(method))(args...); })
{}

template <typename O, typename M> OnListeningHandler::OnListeningHandler(com_ptr<O>&& object, M method) :
    OnListeningHandler([o = std::move(object), method](auto&&... args) { return ((*o).*(method))(args...); })
{}

template <typename O, typename M> OnListeningHandler::OnListeningHandler(weak_ref<O>&& object, M method) :
    OnListeningHandler([o = std::move(object), method](auto&&... args) { if (auto s = o.get()) { ((*s).*(method))(args...); } })
{}

inline void OnListeningHandler::operator()(uint16_t port) const
{
    check_hresult((*(impl::abi_t<OnListeningHandler>**)this)->Invoke(port));
}

template <typename L> OnRecognizedSpeechHandler::OnRecognizedSpeechHandler(L handler) :
    OnRecognizedSpeechHandler(impl::make_delegate<OnRecognizedSpeechHandler>(std::forward<L>(handler)))
{}

template <typename F> OnRecognizedSpeechHandler::OnRecognizedSpeechHandler(F* handler) :
    OnRecognizedSpeechHandler([=](auto&&... args) { return handler(args...); })
{}

template <typename O, typename M> OnRecognizedSpeechHandler::OnRecognizedSpeechHandler(O* object, M method) :
    OnRecognizedSpeechHandler([=](auto&&... args) { return ((*object).*(method))(args...); })
{}

template <typename O, typename M> OnRecognizedSpeechHandler::OnRecognizedSpeechHandler(com_ptr<O>&& object, M method) :
    OnRecognizedSpeechHandler([o = std::move(object), method](auto&&... args) { return ((*o).*(method))(args...); })
{}

template <typename O, typename M> OnRecognizedSpeechHandler::OnRecognizedSpeechHandler(weak_ref<O>&& object, M method) :
    OnRecognizedSpeechHandler([o = std::move(object), method](auto&&... args) { if (auto s = o.get()) { ((*s).*(method))(args...); } })
{}

inline void OnRecognizedSpeechHandler::operator()(Microsoft::Holographic::AppRemoting::RecognizedSpeech const& recognizedSpeech) const
{
    check_hresult((*(impl::abi_t<OnRecognizedSpeechHandler>**)this)->Invoke(get_abi(recognizedSpeech)));
}

template <typename L> OnSendFrameHandler::OnSendFrameHandler(L handler) :
    OnSendFrameHandler(impl::make_delegate<OnSendFrameHandler>(std::forward<L>(handler)))
{}

template <typename F> OnSendFrameHandler::OnSendFrameHandler(F* handler) :
    OnSendFrameHandler([=](auto&&... args) { return handler(args...); })
{}

template <typename O, typename M> OnSendFrameHandler::OnSendFrameHandler(O* object, M method) :
    OnSendFrameHandler([=](auto&&... args) { return ((*object).*(method))(args...); })
{}

template <typename O, typename M> OnSendFrameHandler::OnSendFrameHandler(com_ptr<O>&& object, M method) :
    OnSendFrameHandler([o = std::move(object), method](auto&&... args) { return ((*o).*(method))(args...); })
{}

template <typename O, typename M> OnSendFrameHandler::OnSendFrameHandler(weak_ref<O>&& object, M method) :
    OnSendFrameHandler([o = std::move(object), method](auto&&... args) { if (auto s = o.get()) { ((*s).*(method))(args...); } })
{}

inline void OnSendFrameHandler::operator()(Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface const& texture) const
{
    check_hresult((*(impl::abi_t<OnSendFrameHandler>**)this)->Invoke(get_abi(texture)));
}

}

WINRT_EXPORT namespace std {

template<> struct hash<winrt::Microsoft::Holographic::AppRemoting::IAuthenticationProvider> : winrt::impl::hash_base<winrt::Microsoft::Holographic::AppRemoting::IAuthenticationProvider> {};
template<> struct hash<winrt::Microsoft::Holographic::AppRemoting::IAuthenticationProviderCallback> : winrt::impl::hash_base<winrt::Microsoft::Holographic::AppRemoting::IAuthenticationProviderCallback> {};
template<> struct hash<winrt::Microsoft::Holographic::AppRemoting::IAuthenticationReceiver> : winrt::impl::hash_base<winrt::Microsoft::Holographic::AppRemoting::IAuthenticationReceiver> {};
template<> struct hash<winrt::Microsoft::Holographic::AppRemoting::IAuthenticationReceiverCallback> : winrt::impl::hash_base<winrt::Microsoft::Holographic::AppRemoting::IAuthenticationReceiverCallback> {};
template<> struct hash<winrt::Microsoft::Holographic::AppRemoting::ICertificate> : winrt::impl::hash_base<winrt::Microsoft::Holographic::AppRemoting::ICertificate> {};
template<> struct hash<winrt::Microsoft::Holographic::AppRemoting::ICertificateChain> : winrt::impl::hash_base<winrt::Microsoft::Holographic::AppRemoting::ICertificateChain> {};
template<> struct hash<winrt::Microsoft::Holographic::AppRemoting::ICertificateProvider> : winrt::impl::hash_base<winrt::Microsoft::Holographic::AppRemoting::ICertificateProvider> {};
template<> struct hash<winrt::Microsoft::Holographic::AppRemoting::ICertificateProviderCallback> : winrt::impl::hash_base<winrt::Microsoft::Holographic::AppRemoting::ICertificateProviderCallback> {};
template<> struct hash<winrt::Microsoft::Holographic::AppRemoting::ICertificateValidationCallback> : winrt::impl::hash_base<winrt::Microsoft::Holographic::AppRemoting::ICertificateValidationCallback> {};
template<> struct hash<winrt::Microsoft::Holographic::AppRemoting::ICertificateValidator> : winrt::impl::hash_base<winrt::Microsoft::Holographic::AppRemoting::ICertificateValidator> {};
template<> struct hash<winrt::Microsoft::Holographic::AppRemoting::IDataChannel> : winrt::impl::hash_base<winrt::Microsoft::Holographic::AppRemoting::IDataChannel> {};
template<> struct hash<winrt::Microsoft::Holographic::AppRemoting::IPlayerContext> : winrt::impl::hash_base<winrt::Microsoft::Holographic::AppRemoting::IPlayerContext> {};
template<> struct hash<winrt::Microsoft::Holographic::AppRemoting::IPlayerContextStatics> : winrt::impl::hash_base<winrt::Microsoft::Holographic::AppRemoting::IPlayerContextStatics> {};
template<> struct hash<winrt::Microsoft::Holographic::AppRemoting::IRemoteContext> : winrt::impl::hash_base<winrt::Microsoft::Holographic::AppRemoting::IRemoteContext> {};
template<> struct hash<winrt::Microsoft::Holographic::AppRemoting::IRemoteContextStatics> : winrt::impl::hash_base<winrt::Microsoft::Holographic::AppRemoting::IRemoteContextStatics> {};
template<> struct hash<winrt::Microsoft::Holographic::AppRemoting::IRemoteSpeech> : winrt::impl::hash_base<winrt::Microsoft::Holographic::AppRemoting::IRemoteSpeech> {};
template<> struct hash<winrt::Microsoft::Holographic::AppRemoting::PlayerContext> : winrt::impl::hash_base<winrt::Microsoft::Holographic::AppRemoting::PlayerContext> {};
template<> struct hash<winrt::Microsoft::Holographic::AppRemoting::RemoteContext> : winrt::impl::hash_base<winrt::Microsoft::Holographic::AppRemoting::RemoteContext> {};

}
