// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.190111.3

#pragma once
#include "winrt/impl/Windows.Graphics.DirectX.Direct3D11.1.h"
#include "winrt/impl/Windows.Media.SpeechRecognition.1.h"
#include "winrt/impl/Windows.Storage.1.h"
#include "winrt/impl/Windows.Foundation.1.h"
#include "winrt/impl/Microsoft.Holographic.AppRemoting.1.h"

WINRT_EXPORT namespace winrt::Microsoft::Holographic::AppRemoting {

struct DataChannelCloseHandler : Windows::Foundation::IUnknown
{
    DataChannelCloseHandler(std::nullptr_t = nullptr) noexcept {}
    template <typename L> DataChannelCloseHandler(L lambda);
    template <typename F> DataChannelCloseHandler(F* function);
    template <typename O, typename M> DataChannelCloseHandler(O* object, M method);
    template <typename O, typename M> DataChannelCloseHandler(com_ptr<O>&& object, M method);
    template <typename O, typename M> DataChannelCloseHandler(weak_ref<O>&& object, M method);
    void operator()() const;
};

struct DataChannelReceivedHandler : Windows::Foundation::IUnknown
{
    DataChannelReceivedHandler(std::nullptr_t = nullptr) noexcept {}
    template <typename L> DataChannelReceivedHandler(L lambda);
    template <typename F> DataChannelReceivedHandler(F* function);
    template <typename O, typename M> DataChannelReceivedHandler(O* object, M method);
    template <typename O, typename M> DataChannelReceivedHandler(com_ptr<O>&& object, M method);
    template <typename O, typename M> DataChannelReceivedHandler(weak_ref<O>&& object, M method);
    void operator()(array_view<uint8_t const> data) const;
};

struct OnConnectedHandler : Windows::Foundation::IUnknown
{
    OnConnectedHandler(std::nullptr_t = nullptr) noexcept {}
    template <typename L> OnConnectedHandler(L lambda);
    template <typename F> OnConnectedHandler(F* function);
    template <typename O, typename M> OnConnectedHandler(O* object, M method);
    template <typename O, typename M> OnConnectedHandler(com_ptr<O>&& object, M method);
    template <typename O, typename M> OnConnectedHandler(weak_ref<O>&& object, M method);
    void operator()() const;
};

struct OnDataChannelCreatedHandler : Windows::Foundation::IUnknown
{
    OnDataChannelCreatedHandler(std::nullptr_t = nullptr) noexcept {}
    template <typename L> OnDataChannelCreatedHandler(L lambda);
    template <typename F> OnDataChannelCreatedHandler(F* function);
    template <typename O, typename M> OnDataChannelCreatedHandler(O* object, M method);
    template <typename O, typename M> OnDataChannelCreatedHandler(com_ptr<O>&& object, M method);
    template <typename O, typename M> OnDataChannelCreatedHandler(weak_ref<O>&& object, M method);
    void operator()(Microsoft::Holographic::AppRemoting::IDataChannel const& dataChannel, uint8_t channelId) const;
};

struct OnDisconnectedHandler : Windows::Foundation::IUnknown
{
    OnDisconnectedHandler(std::nullptr_t = nullptr) noexcept {}
    template <typename L> OnDisconnectedHandler(L lambda);
    template <typename F> OnDisconnectedHandler(F* function);
    template <typename O, typename M> OnDisconnectedHandler(O* object, M method);
    template <typename O, typename M> OnDisconnectedHandler(com_ptr<O>&& object, M method);
    template <typename O, typename M> OnDisconnectedHandler(weak_ref<O>&& object, M method);
    void operator()(Microsoft::Holographic::AppRemoting::ConnectionFailureReason const& failureReason) const;
};

struct OnListeningHandler : Windows::Foundation::IUnknown
{
    OnListeningHandler(std::nullptr_t = nullptr) noexcept {}
    template <typename L> OnListeningHandler(L lambda);
    template <typename F> OnListeningHandler(F* function);
    template <typename O, typename M> OnListeningHandler(O* object, M method);
    template <typename O, typename M> OnListeningHandler(com_ptr<O>&& object, M method);
    template <typename O, typename M> OnListeningHandler(weak_ref<O>&& object, M method);
    void operator()(uint16_t port) const;
};

struct OnRecognizedSpeechHandler : Windows::Foundation::IUnknown
{
    OnRecognizedSpeechHandler(std::nullptr_t = nullptr) noexcept {}
    template <typename L> OnRecognizedSpeechHandler(L lambda);
    template <typename F> OnRecognizedSpeechHandler(F* function);
    template <typename O, typename M> OnRecognizedSpeechHandler(O* object, M method);
    template <typename O, typename M> OnRecognizedSpeechHandler(com_ptr<O>&& object, M method);
    template <typename O, typename M> OnRecognizedSpeechHandler(weak_ref<O>&& object, M method);
    void operator()(Microsoft::Holographic::AppRemoting::RecognizedSpeech const& recognizedSpeech) const;
};

struct OnSendFrameHandler : Windows::Foundation::IUnknown
{
    OnSendFrameHandler(std::nullptr_t = nullptr) noexcept {}
    template <typename L> OnSendFrameHandler(L lambda);
    template <typename F> OnSendFrameHandler(F* function);
    template <typename O, typename M> OnSendFrameHandler(O* object, M method);
    template <typename O, typename M> OnSendFrameHandler(com_ptr<O>&& object, M method);
    template <typename O, typename M> OnSendFrameHandler(weak_ref<O>&& object, M method);
    void operator()(Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface const& texture) const;
};

struct CertificateValidationResult
{
    bool TrustedRoot;
    bool Revoked;
    bool Expired;
    bool WrongUsage;
    Windows::Foundation::IReference<bool> NameMismatch;
    bool RevocationCheckFailed;
    bool InvalidCertOrChain;
};

inline bool operator==(CertificateValidationResult const& left, CertificateValidationResult const& right)
{
    return left.TrustedRoot == right.TrustedRoot && left.Revoked == right.Revoked && left.Expired == right.Expired && left.WrongUsage == right.WrongUsage && left.NameMismatch == right.NameMismatch && left.RevocationCheckFailed == right.RevocationCheckFailed && left.InvalidCertOrChain == right.InvalidCertOrChain;
}

inline bool operator!=(CertificateValidationResult const& left, CertificateValidationResult const& right)
{
    return !(left == right);
}

struct PlayerFrameStatistics
{
    float Latency;
    float TimeSinceLastPresent;
    uint32_t VideoFrameReusedCount;
    uint32_t VideoFramesSkipped;
    uint32_t VideoFramesReceived;
    uint32_t VideoFramesDiscarded;
    float VideoFrameMinDelta;
    float VideoFrameMaxDelta;
};

inline bool operator==(PlayerFrameStatistics const& left, PlayerFrameStatistics const& right) noexcept
{
    return left.Latency == right.Latency && left.TimeSinceLastPresent == right.TimeSinceLastPresent && left.VideoFrameReusedCount == right.VideoFrameReusedCount && left.VideoFramesSkipped == right.VideoFramesSkipped && left.VideoFramesReceived == right.VideoFramesReceived && left.VideoFramesDiscarded == right.VideoFramesDiscarded && left.VideoFrameMinDelta == right.VideoFrameMinDelta && left.VideoFrameMaxDelta == right.VideoFrameMaxDelta;
}

inline bool operator!=(PlayerFrameStatistics const& left, PlayerFrameStatistics const& right) noexcept
{
    return !(left == right);
}

struct RecognizedSpeech
{
    hstring RecognizedText;
    Windows::Media::SpeechRecognition::SpeechRecognitionConfidence Confidence;
    double RawConfidence;
};

inline bool operator==(RecognizedSpeech const& left, RecognizedSpeech const& right) noexcept
{
    return left.RecognizedText == right.RecognizedText && left.Confidence == right.Confidence && left.RawConfidence == right.RawConfidence;
}

inline bool operator!=(RecognizedSpeech const& left, RecognizedSpeech const& right) noexcept
{
    return !(left == right);
}

}

namespace winrt::impl {

}

WINRT_EXPORT namespace winrt::Microsoft::Holographic::AppRemoting {

struct WINRT_EBO PlayerContext :
    Microsoft::Holographic::AppRemoting::IPlayerContext,
    impl::require<PlayerContext, Windows::Foundation::IClosable>
{
    PlayerContext(std::nullptr_t) noexcept {}
    static Microsoft::Holographic::AppRemoting::PlayerContext Create();
};

struct WINRT_EBO RemoteContext :
    Microsoft::Holographic::AppRemoting::IRemoteContext,
    impl::require<RemoteContext, Windows::Foundation::IClosable>
{
    RemoteContext(std::nullptr_t) noexcept {}
    static Microsoft::Holographic::AppRemoting::RemoteContext Create();
    static Microsoft::Holographic::AppRemoting::RemoteContext Create(uint32_t maxBitrateKbps);
    static Microsoft::Holographic::AppRemoting::RemoteContext Create(uint32_t maxBitrateKbps, bool enableAudio);
    static Microsoft::Holographic::AppRemoting::RemoteContext Create(uint32_t maxBitrateKbps, bool enableAudio, Microsoft::Holographic::AppRemoting::PreferredVideoCodec const& preferredVideoCodec);
};

}
